{
  
  
  
  
  
  
      "":  {
      "title": "",
      "content"	 : "ROBOTIS eManaul  Previous eManual will be served as well   New ROBOTIS Community Forum is available  Please checkout the Forum if you have any issue with ROBOTIS Products Quick References  DYNAMIXEL Control Table          AX12W  AX12  12A  AX18F 18A      EX106      DX113  DX116  DX117      RX10  RX24F  RX28  RX64      MX12W  MX28  MX28 2 0   MX64  MX64 2 0   MX106  MX106 2 0       XL320  XL430W250  XM430W210  XM430W350  XH430W210  XH430W350  XH430V210  XH430V350      H54200S500R  H54100S500R  H4220S300R      M5460S250R  M5440S250R  M4210S260R      L5450S500R  L5450S290R  L5430S500R  L5430S400R  L4210S300R            DYNAMIXEL SDK SDK Download  Documentation        DYNAMIXEL Protocol Protocol 1 0  Protocol 2 0    Comatibility Guide Controller",
      "url": "http://0.0.0.0:4000/"
      } ,
  
  
      "404-html":  {
      "title": "",
      "content"	 : "Sorry  but the page you were trying to view does not exist — perhaps you can try searching for it above ",
      "url": "http://0.0.0.0:4000/404.html"
      } ,
  
  
  
  
      "docs-en-dxl-ax-ax-12a":  {
      "title": "AX-12A",
      "content"	 : "AX12ANote AX12  is the improved version of existing AX12 the design of circuit  material  and wheel gear are specially improved Note AX12A is a new version of the AX12  with the same performance but more advanced external design  Only the AX12A is now being sold Specifications            Item      Specifications                  Baud Rate      7843 bps   1 Mbps              Resolution      0 29°              Running Degree      0°   300°Endless Turn              Weight      53 5g AX12  AX12    54 6g AX12A               Dimensions  W x H x D       32mm x 50mm x 40mm              Gear Ratio      254  1              Stall Torque      1 5 N m  at 12V  1 5A               No Load Speed      59rpm  at 12V               Operating Temperature      5°C    70°C              Input Voltage      9 0   12 0V  Recommended  11 1V               Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communicationf 8bit  1stop  No Parity               Physical Connection      TTL Level Multi Drop Bus Daisy Chain Type Connector               ID      0   253              Feedback      Position  Temperature  Load  Input Voltage  etc              Material      Engineering Plastic      Note Stall torque is the maximum instantaneous and static  torque  Stable motions are possible with robots designed for loads with 1 5 or less of the stall torque Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 1 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on  Volatile   On the other hand  modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off  NonVolatile   Data in the EEPROM Area can only be changed or modified when the value of Torque Enable 24  is ‘0’ and Dynamixel is in idle state SizeThe Size of data is 1 or 2 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  2 bytes data will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      12              2      1      Firmware Version      Firmware Version      R                    3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      1              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      CounterClockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      70              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      140              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On Off      RW      0              25      1      LED      Status LED On Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      1              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      1              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW                    32      2      Moving Speed      Moving Speed      RW                    34      2      Torque Limit      Torque Limit Goal Torque       RW      ADD 14 amp15              36      2      Present Position      Present Position      R                    38      2      Present Speed      Present Speed      R                    40      2      Present Load      Present Load      R                    42      1      Present Voltage      Present Voltage      R                    43      1      Present Temperature      Present Temperature      R                    44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number  0 This address stores model number of the DYNAMIXEL Firmware Version  2 This address stores firmware version of the DYNAMIXEL ID  3 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate  4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate bps       Margin of Error                  1      1M      0 000%              3      500 000      0 000%              4      400 000      0 000%              7      250 000      0 000%              9      200 000      0 000%              16      115200      2 124%              34 Default       57600      0 794%              103      19200      0 160%              207      9600      0 160%      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time  5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       CW CCW Angle Limit 6  8 The angle limit allows the motion to be restrained The range and the unit of the value is the same as Goal Position Address 30  31    CW Angle Limit the minimum value of Goal Position Address 30  31   CCW Angle Limit the maximum value of Goal Position Address 30  31 The following two modes can be set pursuant to the value of CW and CCW             Operation Type      CW   CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheeltype operation robots since motors of the robots spin infinitely  The joint mode can be used to multijoints robot since the robots can be controlled with specific angles Temperature Limit  11             Unit      Value Range                  About 1°C      0   100      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit  12  13 It is the operation range of voltage             Unit      Value Range      Description                  About 0 1V      50   250      5 0   25 0V      For example  if the value is 80  the voltage is 8V If Present Voltage 42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 Max Torque  14 It is the torque value of maximum output  0 to 1 023  0x3FF  can be used  and the unit is about 0 1% For example  Data 1 023  0x3FF  means that Dynamixel will use 100% of the maximum torque it can produce while Data 512  0x200  means that Dynamixel will use 50% of the maximum torque  When the power is turned on  Torque Limit  Address 34 and 35  uses the value as the initial value Status Return Level  16 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Alarm LED 17   Shutdown 18 Dynamixel can protect itself by detecting errors occur during the operation The errors can be set are as the table below             Bit      Item      Description                  Bit 7      0                    Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’  That is  if 0x05  binary 00000101  is set  both Input Voltage Error and Overheating Error can be detected If errors occur  in case of Alarm LED  the LED blinks in case of Alarm Shutdown  the motor output becomes 0 % by resetting the value of Torque Limit 34  to 0 Torque Enable  24             Value      Description                  0      Turn off the torque Free run state               1      Turn on the torque and lock EEPROM area      LED  25 Turn on or turn off the LED on Dynamixel             Bit      Description                  0 Default       Turn OFF the LED              1      Turn ON the LED      Compliance Margin  26  27 It exists in each direction of CW CCW and means the error between goal position and present position The range of the value is 0 255  and the unit is the same as Goal Position  Address 30 31 The greater the value  the more difference occurs Compliance Slope  28  29 It exists in each direction of CW CCW and sets the level of Torque near the goal position Compliance Slope is set in 7 steps  the higher the value  the more flexibility is obtained Data representative value is actually used value   That is  even if the value is set to 25  16 is used internally as the representative value             Step      Data Value      Data Representative Value                  1      0 0x00    3 0x03       2 0x02               2      4 0x04    7 0x07       4 0x04               3      8 0x08  15 0x0F       8 0x08               4      16 0x10  31 0x1F       16 0x10               5      32 0x20  63 0x3F       32 0x20               6      64 0x40  127 0x7F       64 0x40               7      128 0x80  254 0xFE       128 0x80       Compliance is to set the control flexibility of the motor The following diagram shows the relationship between output torque and position of the motor Goal Position  30 It is a position value of destination 0   1 023  0x3FF  is available   The unit is 0 29° If Goal Position is out of the range  Angle Limit Error Bit  Bit 1  of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED Shutdown The picture above is the front view of DynamixelNote If it is set to Wheel Mode  Goal Position value is not used Moving Speed  32 It is a moving speed to Goal Position The range and the unit of the value may vary depending on the operation mode       Join Mode0   1 023 0x3FF  can be used  and the unit is about 0 111rpm If it is set to 0  it means the maximum rpm of the motor is used without controlling the speed If it is 1023  it is about 114rpm For example  if it is set to 300  it is about 33 3 rpm     Note Please check the maximum rpm of the Dynamixel  The motor cannot exceed the maximum rpm with the higher Moving Speed value         Wheel Mode0   2 047 0x7FF  can be used  the unit is about 0 1% If a value in the range of 0   1 023 is used  it is stopped by setting to 0 while rotating to CCW direction If a value in the range of 1 024   2 047 is used  it is stopped by setting to 1 024 while rotating to CW direction That is  the 10th bit becomes the direction bit to control the direction In Wheel Mode  only the output control is possible  not speed For example  if it is set to 512  it means the output is controlled by 50% of the maximum output   Torque Limit  34 It is the value of the maximum torque limit 0   1 023 0x3FF  is available  and the unit is about 0 1% For example  if the value is 512  it is about 50% that means only 50% of the maximum torque will be used If the power is turned on  the value of Max Torque  Address 14  15  is used as the initial value Note If the function of Alarm Shutdown is triggered  the motor loses its torque because the value becomes 0  Once error conditions are resolved and this value is changed to the value other than 0  the motor can be operated again Present Position  36 It is the current position value of Dynamixel The range of the value is 0 1023  0x3FF   and the unit is 0 29 degree The picture above is the front view of Dynamixel Caution If it is set to Wheel Mode  the value cannot be used to measure the moving distance and the rotation frequency Present Speed  38 It is the current moving speed 0 2047  0X7FF  can be used If a value is in the rage of 0 1023  it means that the motor rotates to the CCW direction If a value is in the rage of 1024 2047  it means that the motor rotates to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 0 and 1024 are equal The unit of this value varies depending on operation mode       Joint ModeThe unit is about 0 111rpm For example  if it is set to 300  it means that the motor is moving to the CCW direction at a rate of about 33 3rpm         Wheel ModeThe unit is about 0 1% For example  if it is set to 512  it means that the torque is controlled by 50% of the maximum torque to the CCW direction   Present Load  40 It means currently applied load The range of the value is 0 2047  and the unit is about 0 1% If the value is 0 1023  it means the load works to the CCW direction If the value is 1024 2047  it means the load works to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 1024 is equal to 0 For example  the value is 512  it means the load is detected in the direction of CCW about 50% of the maximum torque             Bit      15   11      10      9   0                  Value      0      Load Direction      Data  Load Ratio       Note CCW Load  Load Direction   0  CW Load  Load Direction   1Note Present load is an inferred value based on the internal output value not a measured value using torque sensor  etc  Therefore  it may be inaccurate for measuring weight or torque  It is recommended to use it for predicting the direction and size of the force being applied to the joint Present Voltage  42 It is the size of the current voltage supplied This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 Present Temperature  43 It is the internal temperature of Dynamixel in Celsius Data value is identical to the actual temperature in Celsius  For example  if the data value is 85  0x55   the current internal temperature is 85°C Registered Instruction  44             Value      Description                  0      There are no commands transmitted by REG_WRITE              1      There are commands transmitted by REG_WRITE      Note If ACTION command is executed  the value is changed into 0 Moving  46             Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock  47             Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 Punch  48 Current to drive motor is at minimum Can choose vales from 0x20 to 0x3FF How to AssembleMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators  the main controller needs to convert its UART signals to the half duplex type  The recommended circuit diagram for this is shown below TTL CommunicationRS485 CommunicationThe power of Dynamixel is supplied via Pin1    Pin2     The above circuit is built into Dynamixelonly controller  In the above circuit diagram  the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as followsIn case of DIRECTION485 Level   High The signal of TxD is output to D  and D In case of DIRECTION485 Level   Low The signal of D  and D is output to RxD Pin AssignmentThe connector pin assignments are as the following  The two connectors on the Dynamixel are connected pin to pin  thus the Dynamixel can be operated with only one connector attached ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/ax/ax-12a/"
      } ,
  
  
      "docs-en-dxl-ax-ax-12w":  {
      "title": "AX-12W",
      "content"	 : "AX12WSpecifications            Item      Specifications                  Baud Rate      7843 bps   1 Mbps              Resolution      0 29°              Running Degree      0°   300°Endless Turn              Weight      52 9g              Dimensions  W x H x D       32mm x 50mm x 40mm              Gear Ratio      32  1              No Load Speed      470rpm  at 12V  Wheel Mode 54rpm  at 12 0V  Joint Mode               Operating Temperature      5°C    70°C              Input Voltage      9 0   12 0V  Recommended  11 1V               Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      TTL Level Multi Drop Bus Daisy Chain Type Connector               ID      0   253              Feedback      Position  Temperature  Load  Input Voltage  etc              Material      Engineering Plastic      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to  Protocol  for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on  Volatile   On the other hand  modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off  NonVolatile   Data in the EEPROM Area can only be changed when the value of Torque Enable 64  is cleared to ‘0’ SizeThe Size of data varies from 1 to 4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      300              2      1      Firmware Version      Firmware Version      R                    3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      1              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      CounterClockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      70              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      140              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On Off      RW      0              25      1      LED      Status LED On Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      4              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      4              28      1      CW Compliance Slope      CW Compliance Slope      RW      64              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      64              30      2      Goal Position      Target Position      RW                    32      2      Moving Speed      Moving Speed      RW                    34      2      Torque Limit      Torque Limit Goal Torque       RW      ADD 14 amp15              36      2      Present Position      Present Position      R                    38      2      Present Speed      Present Speed      R                    40      2      Present Load      Present Load      R                    42      1      Present Voltage      Present Voltage      R                    43      1      Present Temperature      Present Temperature      R                    44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number  0 This address stores model number of the DYNAMIXEL Firmware Version  2 This address stores firmware version of the DYNAMIXEL ID  3 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet  0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate  4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate      Margin of Error                  1 Default       1M      0 000%              3      500 000      0 000%              4      400 000      0 000%              7      250 000      0 000%              9      200 000      0 000%              16      115200      2 124%              34      57600      0 794%              103      19200      0 160%              207      9600      0 160%      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time  5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received                    Value      Description                  Unit      2 μsec                     Range      0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       CW CCW Angle Limit 6  8 The angle limit allows the motion to be restrained The range and the unit of the value is the same as Goal Position Address 30  31  CW Angle Limit the minimum value of Goal Position Address 30  31 CCW Angle Limit the maximum value of Goal Position Address 30  31 The following two modes can be set pursuant to the value of CW and CCW             Operation Type      CW   CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheeltype operation robots since motors of the robots spin infinitely  The joint mode can be used to multijoints robot since the robots can be controlled with specific angles Temperature Limit  11 Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Using the product when the temperature is high may and can cause damage Min Max Voltage Limit  12  13 It is the operation range of voltage 50 to 250  0x32   0x96  can be used   The unit is 0 1V For example  if the value is 80  it is 8V If Present Voltage  Address42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 Max Torque  14 It is the torque value of maximum output  0 to 1023  0x3FF  can be used  and the unit is about 0 1% For example  Data 1023  0x3FF  means that Dynamixel will use 100% of the maximum torque it can produce while Data 512  0x200  means that Dynamixel will use 50% of the maximum torque  When the power is turned on  Torque Limit  Addresses 34 and 35  uses the value as the initial value Status Return Level  16 It decides how to return Status Packet  There are three ways like the below table             Value      Return of Status Packet                  0      No return against all commands  Except PING Command               1      Return only for the READ command              2      Return for all commands      When Instruction Packet is Broadcast ID  Status Packet is not returned regardless of Status Return Level Alarm LED 17   Shutdown 18 Dynamixel can protect itself by detecting errors occur during the operation The errors can be set are as the table below             Bit      Name      Description                  Bit 7      0                    Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’  That is  if 0X05  binary 00000101  is set  both Input Voltage Error and Overheating Error can be detected If errors occur  in case of Alarm LED  the LED blinks in case of Alarm Shutdown  the motor output becomes 0 % by making the value of Torque Limit Address 34  35  as 0 Torque Enable  24             Value      Description                  0      Keeps Torque from generating by interrupting the power of motor              1      Generates Torque by impressing the power to the motor       LED  25             Bit      Description                  0      Turn OFF the LED              1      Turn ON the LED      Compliance Margin  26  27 It exists in each direction of CW CCW and means the error between goal position and present position The range of the value is 0 255  and the unit is the same as Goal Position  Address 30 31 The greater the value  the more difference occurs Compliance Slope  28  29 It exists in each direction of CW CCW and sets the level of Torque near the goal position Compliance Slope is set in 7 steps  the higher the value  the more flexibility is obtained Data representative value is actually used value   That is  even if the value is set to 25  16 is used internally as the representative value             Step      Data Value      Data Representative Value                  1      0 0x00    3 0x03       2 0x02               2      4 0x04    7 0x07       4 0x04               3      8 0x08  15 0x0F       8 0x08               4      16 0x10  31 0x1F       16 0x10               5      32 0x20  63 0x3F       32 0x20               6      64 0x40  127 0x7F       64 0x40               7      128 0x80  254 0xFE       128 0x80       Compliance is to set the control flexibility of the motor The following diagram shows the relationship between output torque and position of the motor Goal Position  30 It is a position value of destination 0 to 1023  0x3FF  is available   The unit is 0 29 degree If Goal Position is out of the range  Angle Limit Error Bit  Bit1  of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED Shutdown The picture above is the front view of DynamixelNote If it is set to Wheel Mode  this value is not used Moving Speed  32 It is a moving speed to Goal Position The range and the unit of the value may vary depending on the operation mode       Join Mode0 1023  0X3FF  can be used  and the unit is about 0 111rpm If it is set to 0  it means the maximum rpm of the motor is used without controlling the speed If it is 1023  it is about 114rpm For example  if it is set to 300  it is about 33 3 rpm     Note Please check the maximum rpm of relevant model in Joint Mode   Even if the motor is set to more than maximum rpm  it cannot generate the torque more than the maximum rpm         Wheel Mode0 2047  0X7FF  can be used  the unit is about 0 1% If a value in the range of 0 1023 is used  it is stopped by setting to 0 while rotating to CCW direction If a value in the range of 1024 2047 is used  it is stopped by setting to 1024 while rotating to CW direction That is  the 10th bit becomes the direction bit to control the direction In Wheel Mode  only the output control is possible  not speed For example  if it is set to 512  it means the output is controlled by 50% of the maximum output   Torque Limit  34 It is the value of the maximum torque limit 0 to 1023  0x3FF  is available  and the unit is about 0 1% For example  if the value is 512  it is about 50% that means only 50% of the maximum torque will be used If the power is turned on  the value of Max Torque  Address 14  15  is used as the initial value Note If the function of Alarm Shutdown is triggered  the motor loses its torque because the value becomes 0  At this moment  if the value is changed to the value other than 0  the motor can be used again Present Position  36 It is the current position value of Dynamixel The range of the value is 0 1023  0x3FF   and the unit is 0 29 degree The picture above is the front view of Dynamixel Caution If it is set to Wheel Mode  the value cannot be used to measure the moving distance and the rotation frequency Present Speed  38 It is the current moving speed 0 2047  0X7FF  can be used If a value is in the rage of 0 1023  it means that the motor rotates to the CCW direction If a value is in the rage of 1024 2047  it means that the motor rotates to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 0 and 1024 are equal The unit of this value varies depending on operation mode       Joint ModeThe unit is about 0 111rpm For example  if it is set to 300  it means that the motor is moving to the CCW direction at a rate of about 33 3rpm         Wheel ModeThe unit is about 0 1% For example  if it is set to 512  it means that the torque is controlled by 50% of the maximum torque to the CCW direction   Present Load  40 It means currently applied load The range of the value is 0 2047  and the unit is about 0 1% If the value is 0 1023  it means the load works to the CCW direction If the value is 1024 2047  it means the load works to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 1024 is equal to 0 For example  the value is 512  it means the load is detected in the direction of CCW about 50% of the maximum torque             Bit      15   11      10      9   0                  Value      0      Load Direction      Data  Load Ratio       Note CCW Load  Load Direction   0  CW Load  Load Direction   1Note Present load is an inferred value based on the internal output value not a measured value using torque sensor  etc  Therefore  it may be inaccurate for measuring weight or torque  It is recommended to use it for predicting the direction and size of the force being applied to the joint Present Voltage  42 It is the size of the current voltage supplied This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 Present Temperature  43 It is the internal temperature of Dynamixel in Celsius Data value is identical to the actual temperature in Celsius  For example  if the data value is 85  0x55   the current internal temperature is 85°C Registered Instruction  44             Value      Description                  0      There are no commands transmitted by REG_WRITE              1      There are commands transmitted by REG_WRITE      Note If ACTION command is executed  the value is changed into 0 Moving  46             Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock  47             Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 Punch  48 Current to drive motor is at minimum Can choose vales from 0x20 to 0x3FF How to AssembleMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators  the main controller needs to convert its UART signals to the half duplex type  The recommended circuit diagram for this is shown below TTL CommunicationRS485 CommunicationThe power of Dynamixel is supplied via Pin1    Pin2     The above circuit is built into Dynamixelonly controller  In the above circuit diagram  the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as followsIn case of DIRECTION485 Level   High The signal of TxD is output to D  and D In case of DIRECTION485 Level   Low The signal of D  and D is output to RxD Pin AssignmentThe connector pin assignments are as the following  The two connectors on the Dynamixel are connected pin to pin  thus the Dynamixel can be operated with only one connector attached ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/ax/ax-12w/"
      } ,
  
  
      "docs-en-dxl-ax-ax-18a":  {
      "title": "AX-18A",
      "content"	 : "AX18ANote AX18A is a new version of the AX18F with the same performance but more advanced external design Specifications            Item      Specifications                  Baud Rate      7843 bps   1 Mbps              Resolution      0 29°              Running Degree      0°   300°Endless Turn              Weight      54 5g AX18F   55 9g AX18A               Dimensions  W x H x D       32mm x 50mm x 40mm              Gear Ratio      254  1              Stall Torque      1 8 N m  at 12V  2 2A               No Load Speed      97rpm  at 12V               Operating Temperature      5°C    70°C              Input Voltage      9 0   12 0V  Recommended  11 1V               Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      TTL Level Multi Drop Bus Daisy Chain Type Connector               ID      0   253              Feedback      Position  Temperature  Load  Input Voltage  etc              Material      Engineering Plastic      Note Stall torque is the maximum instantaneous and static  torque  Stable motions are possible with robots designed for loads with 1 5 or less of the stall torque Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to  Protocol  for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on  Volatile   On the other hand  modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off  NonVolatile   Data in the EEPROM Area can only be changed when the value of Torque Enable 64  is cleared to ‘0’ SizeThe Size of data varies from 1 to 4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      18              2      1      Firmware Version      Firmware Version      R                    3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      1              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      CounterClockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      75              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      140              14      2      Max Torque      Maximun Torque      RW      983              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On Off      RW      0              25      1      LED      Status LED On Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      1              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      1              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW                    32      2      Moving Speed      Moving Speed      RW                    34      2      Torque Limit      Torque Limit Goal Torque       RW      ADD 14 amp15              36      2      Present Position      Present Position      R                    38      2      Present Speed      Present Speed      R                    40      2      Present Load      Present Load      R                    42      1      Present Voltage      Present Voltage      R                    43      1      Present Temperature      Present Temperature      R                    44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number  0 This address stores model number of the DYNAMIXEL Firmware Version  2 This address stores firmware version of the DYNAMIXEL ID  3 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet  0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate  4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate      Margin of Error                  1 Default       1M      0 000%              3      500 000      0 000%              4      400 000      0 000%              7      250 000      0 000%              9      200 000      0 000%              16      115200      2 124%              34      57600      0 794%              103      19200      0 160%              207      9600      0 160%      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time  5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received                    Value      Description                  Unit      2 μsec                     Range      0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       CW CCW Angle Limit 6  8 The angle limit allows the motion to be restrained The range and the unit of the value is the same as Goal Position Address 30  31  CW Angle Limit the minimum value of Goal Position Address 30  31 CCW Angle Limit the maximum value of Goal Position Address 30  31 The following two modes can be set pursuant to the value of CW and CCW             Operation Type      CW   CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheeltype operation robots since motors of the robots spin infinitely  The joint mode can be used to multijoints robot since the robots can be controlled with specific angles Temperature Limit  11 Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Using the product when the temperature is high may and can cause damage Min Max Voltage Limit  12  13 It is the operation range of voltage 50 to 250  0x32   0x96  can be used   The unit is 0 1V For example  if the value is 80  it is 8V If Present Voltage  Address42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 Max Torque  14 It is the torque value of maximum output  0 to 1023  0x3FF  can be used  and the unit is about 0 1% For example  Data 1023  0x3FF  means that Dynamixel will use 100% of the maximum torque it can produce while Data 512  0x200  means that Dynamixel will use 50% of the maximum torque  When the power is turned on  Torque Limit  Addresses 34 and 35  uses the value as the initial value Status Return Level  16 It decides how to return Status Packet  There are three ways like the below table             Value      Return of Status Packet                  0      No return against all commands  Except PING Command               1      Return only for the READ command              2      Return for all commands      When Instruction Packet is Broadcast ID  Status Packet is not returned regardless of Status Return Level Alarm LED 17   Shutdown 18 Dynamixel can protect itself by detecting errors occur during the operation The errors can be set are as the table below             Bit      Name      Description                  Bit 7      0                    Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’  That is  if 0X05  binary 00000101  is set  both Input Voltage Error and Overheating Error can be detected If errors occur  in case of Alarm LED  the LED blinks in case of Alarm Shutdown  the motor output becomes 0 % by making the value of Torque Limit Address 34  35  as 0 Torque Enable  24             Value      Description                  0      Keeps Torque from generating by interrupting the power of motor              1      Generates Torque by impressing the power to the motor       LED  25             Bit      Description                  0      Turn OFF the LED              1      Turn ON the LED      Compliance Margin  26  27 It exists in each direction of CW CCW and means the error between goal position and present position The range of the value is 0 255  and the unit is the same as Goal Position  Address 30 31 The greater the value  the more difference occurs Compliance Slope  28  29 It exists in each direction of CW CCW and sets the level of Torque near the goal position Compliance Slope is set in 7 steps  the higher the value  the more flexibility is obtained Data representative value is actually used value   That is  even if the value is set to 25  16 is used internally as the representative value             Step      Data Value      Data Representative Value                  1      0 0x00    3 0x03       2 0x02               2      4 0x04    7 0x07       4 0x04               3      8 0x08  15 0x0F       8 0x08               4      16 0x10  31 0x1F       16 0x10               5      32 0x20  63 0x3F       32 0x20               6      64 0x40  127 0x7F       64 0x40               7      128 0x80  254 0xFE       128 0x80       Compliance is to set the control flexibility of the motor The following diagram shows the relationship between output torque and position of the motor Goal Position  30 It is a position value of destination 0 to 1023  0x3FF  is available   The unit is 0 29 degree If Goal Position is out of the range  Angle Limit Error Bit  Bit1  of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED Shutdown The picture above is the front view of DynamixelNote If it is set to Wheel Mode  this value is not used Moving Speed  32 It is a moving speed to Goal Position The range and the unit of the value may vary depending on the operation mode       Join Mode0 1023  0X3FF  can be used  and the unit is about 0 111rpm If it is set to 0  it means the maximum rpm of the motor is used without controlling the speed If it is 1023  it is about 114rpm For example  if it is set to 300  it is about 33 3 rpm     Note Please check the maximum rpm of relevant model in Joint Mode   Even if the motor is set to more than maximum rpm  it cannot generate the torque more than the maximum rpm         Wheel Mode0 2047  0X7FF  can be used  the unit is about 0 1% If a value in the range of 0 1023 is used  it is stopped by setting to 0 while rotating to CCW direction If a value in the range of 1024 2047 is used  it is stopped by setting to 1024 while rotating to CW direction That is  the 10th bit becomes the direction bit to control the direction In Wheel Mode  only the output control is possible  not speed For example  if it is set to 512  it means the output is controlled by 50% of the maximum output   Torque Limit  34 It is the value of the maximum torque limit 0 to 1023  0x3FF  is available  and the unit is about 0 1% For example  if the value is 512  it is about 50% that means only 50% of the maximum torque will be used If the power is turned on  the value of Max Torque  Address 14  15  is used as the initial value Note If the function of Alarm Shutdown is triggered  the motor loses its torque because the value becomes 0  At this moment  if the value is changed to the value other than 0  the motor can be used again Present Position  36 It is the current position value of Dynamixel The range of the value is 0 1023  0x3FF   and the unit is 0 29 degree The picture above is the front view of Dynamixel Caution If it is set to Wheel Mode  the value cannot be used to measure the moving distance and the rotation frequency Present Speed  38 It is the current moving speed 0 2047  0X7FF  can be used If a value is in the rage of 0 1023  it means that the motor rotates to the CCW direction If a value is in the rage of 1024 2047  it means that the motor rotates to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 0 and 1024 are equal The unit of this value varies depending on operation mode       Joint ModeThe unit is about 0 111rpm For example  if it is set to 300  it means that the motor is moving to the CCW direction at a rate of about 33 3rpm         Wheel ModeThe unit is about 0 1% For example  if it is set to 512  it means that the torque is controlled by 50% of the maximum torque to the CCW direction   Present Load  40 It means currently applied load The range of the value is 0 2047  and the unit is about 0 1% If the value is 0 1023  it means the load works to the CCW direction If the value is 1024 2047  it means the load works to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 1024 is equal to 0 For example  the value is 512  it means the load is detected in the direction of CCW about 50% of the maximum torque             Bit      15   11      10      9   0                  Value      0      Load Direction      Data  Load Ratio       Note CCW Load  Load Direction   0  CW Load  Load Direction   1Note Present load is an inferred value based on the internal output value not a measured value using torque sensor  etc  Therefore  it may be inaccurate for measuring weight or torque  It is recommended to use it for predicting the direction and size of the force being applied to the joint Present Voltage  42 It is the size of the current voltage supplied This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 Present Temperature  43 It is the internal temperature of Dynamixel in Celsius Data value is identical to the actual temperature in Celsius  For example  if the data value is 85  0x55   the current internal temperature is 85°C Registered Instruction  44             Value      Description                  0      There are no commands transmitted by REG_WRITE              1      There are commands transmitted by REG_WRITE      Note If ACTION command is executed  the value is changed into 0 Moving  46             Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock  47             Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 Punch  48 Current to drive motor is at minimum Can choose vales from 0x20 to 0x3FF How to AssembleMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators  the main controller needs to convert its UART signals to the half duplex type  The recommended circuit diagram for this is shown below TTL CommunicationRS485 CommunicationThe power of Dynamixel is supplied via Pin1    Pin2     The above circuit is built into Dynamixelonly controller  In the above circuit diagram  the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as followsIn case of DIRECTION485 Level   High The signal of TxD is output to D  and D In case of DIRECTION485 Level   Low The signal of D  and D is output to RxD Pin AssignmentThe connector pin assignments are as the following  The two connectors on the Dynamixel are connected pin to pin  thus the Dynamixel can be operated with only one connector attached ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/ax/ax-18a/"
      } ,
  
  
      "docs-en-dxl-crc":  {
      "title": "CRC Calculation",
      "content"	 : "CRC16  IBM ANSI   Polynomial  x16   x15   x2   1  polynomial representation  0x8005   Initial Value  0CRC16 Calculation Codeunsigned short update_crc unsigned short crc_accum  unsigned char  data_blk_ptr  unsigned short data_blk_size     unsigned short i  j    unsigned short crc_table 256            0x0000  0x8005  0x800F  0x000A  0x801B  0x001E  0x0014  0x8011         0x8033  0x0036  0x003C  0x8039  0x0028  0x802D  0x8027  0x0022         0x8063  0x0066  0x006C  0x8069  0x0078  0x807D  0x8077  0x0072         0x0050  0x8055  0x805F  0x005A  0x804B  0x004E  0x0044  0x8041         0x80C3  0x00C6  0x00CC  0x80C9  0x00D8  0x80DD  0x80D7  0x00D2         0x00F0  0x80F5  0x80FF  0x00FA  0x80EB  0x00EE  0x00E4  0x80E1         0x00A0  0x80A5  0x80AF  0x00AA  0x80BB  0x00BE  0x00B4  0x80B1         0x8093  0x0096  0x009C  0x8099  0x0088  0x808D  0x8087  0x0082         0x8183  0x0186  0x018C  0x8189  0x0198  0x819D  0x8197  0x0192         0x01B0  0x81B5  0x81BF  0x01BA  0x81AB  0x01AE  0x01A4  0x81A1         0x01E0  0x81E5  0x81EF  0x01EA  0x81FB  0x01FE  0x01F4  0x81F1         0x81D3  0x01D6  0x01DC  0x81D9  0x01C8  0x81CD  0x81C7  0x01C2         0x0140  0x8145  0x814F  0x014A  0x815B  0x015E  0x0154  0x8151         0x8173  0x0176  0x017C  0x8179  0x0168  0x816D  0x8167  0x0162         0x8123  0x0126  0x012C  0x8129  0x0138  0x813D  0x8137  0x0132         0x0110  0x8115  0x811F  0x011A  0x810B  0x010E  0x0104  0x8101         0x8303  0x0306  0x030C  0x8309  0x0318  0x831D  0x8317  0x0312         0x0330  0x8335  0x833F  0x033A  0x832B  0x032E  0x0324  0x8321         0x0360  0x8365  0x836F  0x036A  0x837B  0x037E  0x0374  0x8371         0x8353  0x0356  0x035C  0x8359  0x0348  0x834D  0x8347  0x0342         0x03C0  0x83C5  0x83CF  0x03CA  0x83DB  0x03DE  0x03D4  0x83D1         0x83F3  0x03F6  0x03FC  0x83F9  0x03E8  0x83ED  0x83E7  0x03E2         0x83A3  0x03A6  0x03AC  0x83A9  0x03B8  0x83BD  0x83B7  0x03B2         0x0390  0x8395  0x839F  0x039A  0x838B  0x038E  0x0384  0x8381         0x0280  0x8285  0x828F  0x028A  0x829B  0x029E  0x0294  0x8291         0x82B3  0x02B6  0x02BC  0x82B9  0x02A8  0x82AD  0x82A7  0x02A2         0x82E3  0x02E6  0x02EC  0x82E9  0x02F8  0x82FD  0x82F7  0x02F2         0x02D0  0x82D5  0x82DF  0x02DA  0x82CB  0x02CE  0x02C4  0x82C1         0x8243  0x0246  0x024C  0x8249  0x0258  0x825D  0x8257  0x0252         0x0270  0x8275  0x827F  0x027A  0x826B  0x026E  0x0264  0x8261         0x0220  0x8225  0x822F  0x022A  0x823B  0x023E  0x0234  0x8231         0x8213  0x0216  0x021C  0x8219  0x0208  0x820D  0x8207  0x0202        for j   0 j  lt data_blk_size j               i     unsigned short  crc_accum  gt gt 8    data_blk_ptr j    amp 0xFF        crc_accum    crc_accum  lt lt 8    crc_table i         return crc_accumCRC Calculation Example  unsigned short update_crc unsigned short crc_accum  unsigned char  data_blk_ptr  unsigned short data_blk_size   Return Value  16bit CRC Value  Arguments          crc_accum  set as ‘0’      data_blk_ptr  Packet array pointer      data_blk_size  number of bytes in the Packet excluding the CRC      data_blk_size   Header 3    Reserved 1    Packet ID 1    Packet Length 2    Packet Length  CRC 2    3   1   1   2   Pakcet Length  2   5   Packet Length      Packet Length    LEN_H « 8     LEN_L    Littleendian        Packet Analysis and CRC Calculation          Example Packet Read Instruction Packet to read the 2 bytes from address 0x0000 unsigned char TxPacket     0xFF  0xFF  0xFD  0x00  0x01  0x07  0x00  0x02  0x00  0x00  0x02  0x00  CRC_L  CRC_H      CRC calculationCRC   update_crc 0  TxPacket   12       12   5   Packet Length 7 CRC_L    CRC  amp 0x00FF                  LittleendianCRC_H    CRC»8   amp 0x00FF      ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/crc/"
      } ,
  
  
      "docs-en-dxl-dx-dx-113":  {
      "title": "DX-113",
      "content"	 : "DX113Warning DX113 has been discontinued Specifications            Item      Specifications                  Baud Rate      7343 bps   1 Mbps              Resolution      0 29°              Running Degree      0°   300°              Weight      58g              Dimensions  W x H x D       31mm x 46mm x 37mm              Gear Ratio      192 6  1              Stall Torque      1 0 N m  at 12V               No Load Speed      54rpm  at 12V               Operating Temperature      5°C    85°C              Input Voltage      9   12V  Recommended  11 1V               Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multi Drop Bus Daisy Chain Type Connector               ID      0   253              Feedback      Position  Temperature  Load  Input Voltage  etc              Material      Full Metal Gear  Engineering Plastic Body      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 1 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on  Volatile   On the other hand  modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off  NonVolatile   Data in the EEPROM Area can only be changed or modified when the value of Torque Enable 24  is ‘0’ and Dynamixel is in idle state SizeThe Size of data is 1 or 2 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  2 bytes data will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      113              2      1      Firmware Version      Firmware Version      R                    3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      CounterClockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      85              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      190              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On Off      RW      0              25      1      LED      Status LED On Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      0              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      0              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW                    32      2      Moving Speed      Moving Speed      RW                    34      2      Torque Limit      Torque Limit Goal Torque       RW      ADD 14 amp15              36      2      Present Position      Present Position      R                    38      2      Present Speed      Present Speed      R                    40      2      Present Load      Present Load      R                    42      1      Present Voltage      Present Voltage      R                    43      1      Present Temperature      Present Temperature      R                    44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number  0 This address stores model number of the DYNAMIXEL Firmware Version  2 This address stores firmware version of the DYNAMIXEL ID  3 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate  4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate bps       Margin of Error                  1      1M      0 000%              3      500 000      0 000%              4      400 000      0 000%              7      250 000      0 000%              9      200 000      0 000%              16      115200      2 124%              34 Default       57600      0 794%              103      19200      0 160%              207      9600      0 160%      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time  5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       CW CCW Angle Limit 6  8 The angle limit allows the motion to be restrained The range and the unit of the value is the same as Goal Position Address 30  31    CW Angle Limit the minimum value of Goal Position Address 30  31   CCW Angle Limit the maximum value of Goal Position Address 30  31 The following two modes can be set pursuant to the value of CW and CCW             Operation Type      CW   CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheeltype operation robots since motors of the robots spin infinitely  The joint mode can be used to multijoints robot since the robots can be controlled with specific angles Caution DX113 does not support Wheel Mode Temperature Limit  11             Unit      Value Range                  About 1°C      0   100      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit  12  13 It is the operation range of voltage             Unit      Value Range      Description                  About 0 1V      50   250      5 0   25 0V      For example  if the value is 80  the voltage is 8V If Present Voltage 42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 Max Torque  14 It is the torque value of maximum output  0 to 1 023  0x3FF  can be used  and the unit is about 0 1% For example  Data 1 023  0x3FF  means that Dynamixel will use 100% of the maximum torque it can produce while Data 512  0x200  means that Dynamixel will use 50% of the maximum torque  When the power is turned on  Torque Limit  Address 34 and 35  uses the value as the initial value Status Return Level  16 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Alarm LED 17   Shutdown 18 Dynamixel can protect itself by detecting errors occur during the operation The errors can be set are as the table below             Bit      Item      Description                  Bit 7      0                    Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’  That is  if 0x05  binary 00000101  is set  both Input Voltage Error and Overheating Error can be detected If errors occur  in case of Alarm LED  the LED blinks in case of Alarm Shutdown  the motor output becomes 0 % by resetting the value of Torque Limit 34  to 0 Torque Enable  24             Value      Description                  0      Turn off the torque Free run state               1      Turn on the torque and lock EEPROM area      LED  25 Turn on or turn off the LED on Dynamixel             Bit      Description                  0 Default       Turn OFF the LED              1      Turn ON the LED      Compliance Margin  26  27 It exists in each direction of CW CCW and means the error between goal position and present position The range of the value is 0 255  and the unit is the same as Goal Position  Address 30 31 The greater the value  the more difference occurs Compliance Slope  28  29 It exists in each direction of CW CCW and sets the level of Torque near the goal position Compliance Slope is set in 7 steps  the higher the value  the more flexibility is obtained Data representative value is actually used value   That is  even if the value is set to 25  16 is used internally as the representative value             Step      Data Value      Data Representative Value                  1      0 0x00    3 0x03       2 0x02               2      4 0x04    7 0x07       4 0x04               3      8 0x08  15 0x0F       8 0x08               4      16 0x10  31 0x1F       16 0x10               5      32 0x20  63 0x3F       32 0x20               6      64 0x40  127 0x7F       64 0x40               7      128 0x80  254 0xFE       128 0x80       Compliance is to set the control flexibility of the motor The following diagram shows the relationship between output torque and position of the motor Goal Position  30 It is a position value of destination 0   1 023  0x3FF  is available   The unit is 0 29° If Goal Position is out of the range  Angle Limit Error Bit  Bit 1  of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED Shutdown The picture above is the front view of DynamixelNote If it is set to Wheel Mode  Goal Position value is not used Moving Speed  32 It is a moving speed to Goal Position The range and the unit of the value may vary depending on the operation mode       Join Mode0 1023  0X3FF  can be used  and the unit is about 0 111rpm If it is set to 0  it means the maximum rpm of the motor is used without controlling the speed If it is 1023  it is about 114rpm For example  if it is set to 300  it is about 33 3 rpm     Note Please check the maximum rpm of relevant model in Joint Mode   Even if the motor is set to more than maximum rpm  it cannot generate the torque more than the maximum rpm   Torque Limit  34 It is the value of the maximum torque limit 0   1 023 0x3FF  is available  and the unit is about 0 1% For example  if the value is 512  it is about 50% that means only 50% of the maximum torque will be used If the power is turned on  the value of Max Torque  Address 14  15  is used as the initial value Note If the function of Alarm Shutdown is triggered  the motor loses its torque because the value becomes 0  Once error conditions are resolved and this value is changed to the value other than 0  the motor can be operated again Present Position  36 It is the current position value of Dynamixel The range of the value is 0 1 023  0x3FF   and the unit is 0 29 degree The picture above is the front view of Dynamixel Present Speed  38 It is the current moving speed 0 2047  0X7FF  can be used If a value is in the rage of 0 1023  it means that the motor rotates to the CCW direction If a value is in the rage of 1024 2047  it means that the motor rotates to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 0 and 1024 are equal The unit of this value varies depending on operation mode   Joint ModeThe unit is about 0 111rpm For example  if it is set to 300  it means that the motor is moving to the CCW direction at a rate of about 33 3rpm Present Load  40 It means currently applied load The range of the value is 0 2047  and the unit is about 0 1% If the value is 0 1 023  it means the load works to the CCW direction If the value is 1 024 2 047  it means the load works to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 1 024 is equal to 0 For example  the value is 512  it means the load is detected in the direction of CCW about 50% of the maximum torque             Bit      15   11      10      9   0                  Value      0      Load Direction      Data  Load Ratio       Note CCW Load  Load Direction   0  CW Load  Load Direction   1Note Present load is an inferred value based on the internal output value not a measured value using torque sensor  etc  Therefore  it may be inaccurate for measuring weight or torque  It is recommended to use it for predicting the direction and size of the force being applied to the joint Present Voltage  42 It is the size of the present voltage supplied This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 If Present Voltage 42  value is out of range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18 Present Temperature  43 It is the internal temperature of Dynamixel in Celsius Data value is identical to the actual temperature in Celsius  For example  if the data value is 85  0x55   the current internal temperature is 85°C Registered Instruction  44             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Moving  46             Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock  47             Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 Punch  48 Minimum current to drive motor  This value ranges from 0x20 to 0x3FF How to Assemble  OF116B Option Frame  OF116H Option Frame  OF116S Option Frame  Combination Structure of option frames and hornsMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators  the main controller needs to convert its UART signals to the half duplex type  The recommended circuit diagram for this is shown below TTL CommunicationRS485 CommunicationThe power of Dynamixel is supplied via Pin1    Pin2     The above circuit is built into Dynamixelonly controller  In the above circuit diagram  the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as followsIn case of DIRECTION485 Level   High The signal of TxD is output to D  and D In case of DIRECTION485 Level   Low The signal of D  and D is output to RxD Pin AssignmentThe connector pin assignments are as the following  The two connectors on the Dynamixel are connected pin to pin  thus the Dynamixel can be operated with only one connector attached ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/dx/dx-113/"
      } ,
  
  
      "docs-en-dxl-dx-dx-116":  {
      "title": "DX-116",
      "content"	 : "DX116Warning DX116 has been discontinued Specifications            Item      Specifications                  Baud Rate      7343 bps   1 Mbps              Resolution      0 29°              Running Degree      0°   300°              Weight      66g              Dimensions  W x H x D       31mm x 46mm x 37mm              Gear Ratio      142 5  1              Stall Torque      2 1 N m  at 12V   2 9 N m at 16V               Operating Temperature      5°C    85°C              Input Voltage      12   16V  Recommended  14 8V               Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multi Drop Bus Daisy Chain Type Connector               ID      0   253              Feedback      Position  Temperature  Load  Input Voltage  etc              Material      Full Metal Gear  Engineering Plastic Body      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 1 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on  Volatile   On the other hand  modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off  NonVolatile   Data in the EEPROM Area can only be changed or modified when the value of Torque Enable 24  is ‘0’ and Dynamixel is in idle state SizeThe Size of data is 1 or 2 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  2 bytes data will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      116              2      1      Firmware Version      Firmware Version      R                    3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      CounterClockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      85              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      190              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On Off      RW      0              25      1      LED      Status LED On Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      0              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      0              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW                    32      2      Moving Speed      Moving Speed      RW                    34      2      Torque Limit      Torque Limit Goal Torque       RW      ADD 14 amp15              36      2      Present Position      Present Position      R                    38      2      Present Speed      Present Speed      R                    40      2      Present Load      Present Load      R                    42      1      Present Voltage      Present Voltage      R                    43      1      Present Temperature      Present Temperature      R                    44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number  0 This address stores model number of the DYNAMIXEL Firmware Version  2 This address stores firmware version of the DYNAMIXEL ID  3 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate  4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate bps       Margin of Error                  1      1M      0 000%              3      500 000      0 000%              4      400 000      0 000%              7      250 000      0 000%              9      200 000      0 000%              16      115200      2 124%              34 Default       57600      0 794%              103      19200      0 160%              207      9600      0 160%      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time  5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       CW CCW Angle Limit 6  8 The angle limit allows the motion to be restrained The range and the unit of the value is the same as Goal Position Address 30  31    CW Angle Limit the minimum value of Goal Position Address 30  31   CCW Angle Limit the maximum value of Goal Position Address 30  31 The following two modes can be set pursuant to the value of CW and CCW             Operation Type      CW   CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheeltype operation robots since motors of the robots spin infinitely  The joint mode can be used to multijoints robot since the robots can be controlled with specific angles Caution DX116 does not support Wheel Mode Temperature Limit  11             Unit      Value Range                  About 1°C      0   100      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit  12  13 It is the operation range of voltage             Unit      Value Range      Description                  About 0 1V      50   250      5 0   25 0V      For example  if the value is 80  the voltage is 8V If Present Voltage 42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 Max Torque  14 It is the torque value of maximum output  0 to 1 023  0x3FF  can be used  and the unit is about 0 1% For example  Data 1 023  0x3FF  means that Dynamixel will use 100% of the maximum torque it can produce while Data 512  0x200  means that Dynamixel will use 50% of the maximum torque  When the power is turned on  Torque Limit  Address 34 and 35  uses the value as the initial value Status Return Level  16 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Alarm LED 17   Shutdown 18 Dynamixel can protect itself by detecting errors occur during the operation The errors can be set are as the table below             Bit      Item      Description                  Bit 7      0                    Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’  That is  if 0x05  binary 00000101  is set  both Input Voltage Error and Overheating Error can be detected If errors occur  in case of Alarm LED  the LED blinks in case of Alarm Shutdown  the motor output becomes 0 % by resetting the value of Torque Limit 34  to 0 Torque Enable  24             Value      Description                  0      Turn off the torque Free run state               1      Turn on the torque and lock EEPROM area      LED  25 Turn on or turn off the LED on Dynamixel             Bit      Description                  0 Default       Turn OFF the LED              1      Turn ON the LED      Compliance Margin  26  27 It exists in each direction of CW CCW and means the error between goal position and present position The range of the value is 0 255  and the unit is the same as Goal Position  Address 30 31 The greater the value  the more difference occurs Compliance Slope  28  29 It exists in each direction of CW CCW and sets the level of Torque near the goal position Compliance Slope is set in 7 steps  the higher the value  the more flexibility is obtained Data representative value is actually used value   That is  even if the value is set to 25  16 is used internally as the representative value             Step      Data Value      Data Representative Value                  1      0 0x00    3 0x03       2 0x02               2      4 0x04    7 0x07       4 0x04               3      8 0x08  15 0x0F       8 0x08               4      16 0x10  31 0x1F       16 0x10               5      32 0x20  63 0x3F       32 0x20               6      64 0x40  127 0x7F       64 0x40               7      128 0x80  254 0xFE       128 0x80       Compliance is to set the control flexibility of the motor The following diagram shows the relationship between output torque and position of the motor Goal Position  30 It is a position value of destination 0   1 023  0x3FF  is available   The unit is 0 29° If Goal Position is out of the range  Angle Limit Error Bit  Bit 1  of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED Shutdown The picture above is the front view of DynamixelNote If it is set to Wheel Mode  Goal Position value is not used Moving Speed  32 It is a moving speed to Goal Position The range and the unit of the value may vary depending on the operation mode       Join Mode0 1023  0X3FF  can be used  and the unit is about 0 111rpm If it is set to 0  it means the maximum rpm of the motor is used without controlling the speed If it is 1023  it is about 114rpm For example  if it is set to 300  it is about 33 3 rpm     Note Please check the maximum rpm of relevant model in Joint Mode   Even if the motor is set to more than maximum rpm  it cannot generate the torque more than the maximum rpm   Torque Limit  34 It is the value of the maximum torque limit 0   1 023 0x3FF  is available  and the unit is about 0 1% For example  if the value is 512  it is about 50% that means only 50% of the maximum torque will be used If the power is turned on  the value of Max Torque  Address 14  15  is used as the initial value Note If the function of Alarm Shutdown is triggered  the motor loses its torque because the value becomes 0  Once error conditions are resolved and this value is changed to the value other than 0  the motor can be operated again Present Position  36 It is the current position value of Dynamixel The range of the value is 0 1 023  0x3FF   and the unit is 0 29 degree The picture above is the front view of Dynamixel Present Speed  38 It is the current moving speed 0 2047  0X7FF  can be used If a value is in the rage of 0 1023  it means that the motor rotates to the CCW direction If a value is in the rage of 1024 2047  it means that the motor rotates to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 0 and 1024 are equal The unit of this value varies depending on operation mode   Joint ModeThe unit is about 0 111rpm For example  if it is set to 300  it means that the motor is moving to the CCW direction at a rate of about 33 3rpm Present Load  40 It means currently applied load The range of the value is 0 2047  and the unit is about 0 1% If the value is 0 1 023  it means the load works to the CCW direction If the value is 1 024 2 047  it means the load works to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 1 024 is equal to 0 For example  the value is 512  it means the load is detected in the direction of CCW about 50% of the maximum torque             Bit      15   11      10      9   0                  Value      0      Load Direction      Data  Load Ratio       Note CCW Load  Load Direction   0  CW Load  Load Direction   1Note Present load is an inferred value based on the internal output value not a measured value using torque sensor  etc  Therefore  it may be inaccurate for measuring weight or torque  It is recommended to use it for predicting the direction and size of the force being applied to the joint Present Voltage  42 It is the size of the present voltage supplied This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 If Present Voltage 42  value is out of range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18 Present Temperature  43 It is the internal temperature of Dynamixel in Celsius Data value is identical to the actual temperature in Celsius  For example  if the data value is 85  0x55   the current internal temperature is 85°C Registered Instruction  44             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Moving  46             Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock  47             Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 Punch  48 Minimum current to drive motor  This value ranges from 0x20 to 0x3FF How to Assemble  OF116B Option Frame  OF116H Option Frame  OF116S Option Frame  Combination Structure of option frames and hornsMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators  the main controller needs to convert its UART signals to the half duplex type  The recommended circuit diagram for this is shown below TTL CommunicationRS485 CommunicationThe power of Dynamixel is supplied via Pin1    Pin2     The above circuit is built into Dynamixelonly controller  In the above circuit diagram  the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as followsIn case of DIRECTION485 Level   High The signal of TxD is output to D  and D In case of DIRECTION485 Level   Low The signal of D  and D is output to RxD Pin AssignmentThe connector pin assignments are as the following  The two connectors on the Dynamixel are connected pin to pin  thus the Dynamixel can be operated with only one connector attached ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/dx/dx-116/"
      } ,
  
  
      "docs-en-dxl-dx-dx-117":  {
      "title": "DX-117",
      "content"	 : "DX117Warning DX117 has been discontinued Specifications            Item      Specifications                  Baud Rate      7343 bps   1 Mbps              Resolution      0 29°              Running Degree      0°   300°              Weight      66g              Dimensions  W x H x D       31mm x 46mm x 37mm              Gear Ratio      192 6  1              Stall Torque      3 7 N m  at 18 5V  1 9A               No Load Speed      85 RPM  at 18 5V               Operating Temperature      5°C    80°C              Input Voltage      12   18 5V  Recommended  14 8V               Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multi Drop Bus Daisy Chain Type Connector               ID      0   253              Feedback      Position  Temperature  Load  Input Voltage  etc              Material      Full Metal Gear  Engineering Plastic Body      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 1 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on  Volatile   On the other hand  modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off  NonVolatile   Data in the EEPROM Area can only be changed or modified when the value of Torque Enable 24  is ‘0’ and Dynamixel is in idle state SizeThe Size of data is 1 or 2 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  2 bytes data will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      117              2      1      Firmware Version      Firmware Version      R                    3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      CounterClockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      190              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On Off      RW      0              25      1      LED      Status LED On Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      1              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      1              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW                    32      2      Moving Speed      Moving Speed      RW                    34      2      Torque Limit      Torque Limit Goal Torque       RW      ADD 14 amp15              36      2      Present Position      Present Position      R                    38      2      Present Speed      Present Speed      R                    40      2      Present Load      Present Load      R                    42      1      Present Voltage      Present Voltage      R                    43      1      Present Temperature      Present Temperature      R                    44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number  0 This address stores model number of the DYNAMIXEL Firmware Version  2 This address stores firmware version of the DYNAMIXEL ID  3 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate  4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate bps       Margin of Error                  1      1M      0 000%              3      500 000      0 000%              4      400 000      0 000%              7      250 000      0 000%              9      200 000      0 000%              16      115200      2 124%              34 Default       57600      0 794%              103      19200      0 160%              207      9600      0 160%      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time  5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       CW CCW Angle Limit 6  8 The angle limit allows the motion to be restrained The range and the unit of the value is the same as Goal Position Address 30  31    CW Angle Limit the minimum value of Goal Position Address 30  31   CCW Angle Limit the maximum value of Goal Position Address 30  31 The following two modes can be set pursuant to the value of CW and CCW             Operation Type      CW   CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheeltype operation robots since motors of the robots spin infinitely  The joint mode can be used to multijoints robot since the robots can be controlled with specific angles Caution DX117 does not support Wheel Mode Temperature Limit  11             Unit      Value Range                  About 1°C      0   100      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit  12  13 It is the operation range of voltage             Unit      Value Range      Description                  About 0 1V      50   250      5 0   25 0V      For example  if the value is 80  the voltage is 8V If Present Voltage 42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 Max Torque  14 It is the torque value of maximum output  0 to 1 023  0x3FF  can be used  and the unit is about 0 1% For example  Data 1 023  0x3FF  means that Dynamixel will use 100% of the maximum torque it can produce while Data 512  0x200  means that Dynamixel will use 50% of the maximum torque  When the power is turned on  Torque Limit  Address 34 and 35  uses the value as the initial value Status Return Level  16 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Alarm LED 17   Shutdown 18 Dynamixel can protect itself by detecting errors occur during the operation The errors can be set are as the table below             Bit      Item      Description                  Bit 7      0                    Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’  That is  if 0x05  binary 00000101  is set  both Input Voltage Error and Overheating Error can be detected If errors occur  in case of Alarm LED  the LED blinks in case of Alarm Shutdown  the motor output becomes 0 % by resetting the value of Torque Limit 34  to 0 Torque Enable  24             Value      Description                  0      Turn off the torque Free run state               1      Turn on the torque and lock EEPROM area      LED  25 Turn on or turn off the LED on Dynamixel             Bit      Description                  0 Default       Turn OFF the LED              1      Turn ON the LED      Compliance Margin  26  27 It exists in each direction of CW CCW and means the error between goal position and present position The range of the value is 0 255  and the unit is the same as Goal Position  Address 30 31 The greater the value  the more difference occurs Compliance Slope  28  29 It exists in each direction of CW CCW and sets the level of Torque near the goal position Compliance Slope is set in 7 steps  the higher the value  the more flexibility is obtained Data representative value is actually used value   That is  even if the value is set to 25  16 is used internally as the representative value             Step      Data Value      Data Representative Value                  1      0 0x00    3 0x03       2 0x02               2      4 0x04    7 0x07       4 0x04               3      8 0x08  15 0x0F       8 0x08               4      16 0x10  31 0x1F       16 0x10               5      32 0x20  63 0x3F       32 0x20               6      64 0x40  127 0x7F       64 0x40               7      128 0x80  254 0xFE       128 0x80       Compliance is to set the control flexibility of the motor The following diagram shows the relationship between output torque and position of the motor Goal Position  30 It is a position value of destination 0   1 023  0x3FF  is available   The unit is 0 29° If Goal Position is out of the range  Angle Limit Error Bit  Bit 1  of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED Shutdown The picture above is the front view of DynamixelNote If it is set to Wheel Mode  Goal Position value is not used Moving Speed  32 It is a moving speed to Goal Position The range and the unit of the value may vary depending on the operation mode       Join Mode0 1023  0X3FF  can be used  and the unit is about 0 111rpm If it is set to 0  it means the maximum rpm of the motor is used without controlling the speed If it is 1023  it is about 114rpm For example  if it is set to 300  it is about 33 3 rpm     Note Please check the maximum rpm of relevant model in Joint Mode   Even if the motor is set to more than maximum rpm  it cannot generate the torque more than the maximum rpm   Torque Limit  34 It is the value of the maximum torque limit 0   1 023 0x3FF  is available  and the unit is about 0 1% For example  if the value is 512  it is about 50% that means only 50% of the maximum torque will be used If the power is turned on  the value of Max Torque  Address 14  15  is used as the initial value Note If the function of Alarm Shutdown is triggered  the motor loses its torque because the value becomes 0  Once error conditions are resolved and this value is changed to the value other than 0  the motor can be operated again Present Position  36 It is the current position value of Dynamixel The range of the value is 0 1 023  0x3FF   and the unit is 0 29 degree The picture above is the front view of Dynamixel Present Speed  38 It is the current moving speed 0 2047  0X7FF  can be used If a value is in the rage of 0 1023  it means that the motor rotates to the CCW direction If a value is in the rage of 1024 2047  it means that the motor rotates to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 0 and 1024 are equal The unit of this value varies depending on operation mode   Joint ModeThe unit is about 0 111rpm For example  if it is set to 300  it means that the motor is moving to the CCW direction at a rate of about 33 3rpm Present Load  40 It means currently applied load The range of the value is 0 2047  and the unit is about 0 1% If the value is 0 1 023  it means the load works to the CCW direction If the value is 1 024 2 047  it means the load works to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 1 024 is equal to 0 For example  the value is 512  it means the load is detected in the direction of CCW about 50% of the maximum torque             Bit      15   11      10      9   0                  Value      0      Load Direction      Data  Load Ratio       Note CCW Load  Load Direction   0  CW Load  Load Direction   1Note Present load is an inferred value based on the internal output value not a measured value using torque sensor  etc  Therefore  it may be inaccurate for measuring weight or torque  It is recommended to use it for predicting the direction and size of the force being applied to the joint Present Voltage  42 It is the size of the present voltage supplied This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 If Present Voltage 42  value is out of range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18 Present Temperature  43 It is the internal temperature of Dynamixel in Celsius Data value is identical to the actual temperature in Celsius  For example  if the data value is 85  0x55   the current internal temperature is 85°C Registered Instruction  44             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Moving  46             Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock  47             Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 Punch  48 Minimum current to drive motor  This value ranges from 0x20 to 0x3FF How to Assemble  OF116B Option Frame  OF116H Option Frame  OF116S Option Frame  Combination Structure of option frames and hornsMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators  the main controller needs to convert its UART signals to the half duplex type  The recommended circuit diagram for this is shown below TTL CommunicationRS485 CommunicationThe power of Dynamixel is supplied via Pin1    Pin2     The above circuit is built into Dynamixelonly controller  In the above circuit diagram  the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as followsIn case of DIRECTION485 Level   High The signal of TxD is output to D  and D In case of DIRECTION485 Level   Low The signal of D  and D is output to RxD Pin AssignmentThe connector pin assignments are as the following  The two connectors on the Dynamixel are connected pin to pin  thus the Dynamixel can be operated with only one connector attached ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/dx/dx-117/"
      } ,
  
  
      "docs-en-dxl-ex-ex-106":  {
      "title": "EX-106+",
      "content"	 : "EX106 Warning EX106  has been discontinued Specifications            Item      Specifications                  Baud Rate      7843 bps   1 Mbps              Resolution      0 06°              Running Degree      0°   251°Endless Turn              Weight      154g              Dimensions  W x H x D       40 2mm x 65 1mm x 46mm              Gear Ratio      184  1              Stall Torque      10 9 N m  at 18 5V  7A               No Load Speed      91rpm  at 18 5V               Operating Temperature      5°C    80°C              Input Voltage      12   18 5V  Recommended  14 8V               Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multi Drop Bus Daisy Chain Type Connector               ID      0   253              Feedback      Position  Temperature  Load  Input Voltage  etc              Material      Full Metal Gear  Aluminium Front Case Engineering Plastic Body              Standby Current      55mA      Note Stall torque is the maximum instantaneous and static  torque  Stable motions are possible with robots designed for loads with 1 5 or less of the stall torque Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to  Protocol  for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on  Volatile   On the other hand  modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off  NonVolatile   Data in the EEPROM Area can only be changed when the value of Torque Enable 64  is cleared to ‘0’ SizeThe Size of data varies from 1 to 4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      107              2      1      Firmware Version      Firmware Version      R                    3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      CounterClockwise Angle Limit      RW      4095              10      1      Drive Mode      Dual Mode Setting      RW      0              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      240              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On Off      RW      0              25      1      LED      Status LED On Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      1              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      1              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW                    32      2      Moving Speed      Moving Speed      RW                    34      2      Torque Limit      Torque Limit Goal Torque       RW      ADD 14 amp15              36      2      Present Position      Present Position      R                    38      2      Present Speed      Present Speed      R                    40      2      Present Load      Present Load      R                    42      1      Present Voltage      Present Voltage      R                    43      1      Present Temperature      Present Temperature      R                    44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      0              56      2      Sensed Current      Consuming Current      R            Control Table DescriptionModel Number  0 This address stores model number of the DYNAMIXEL Firmware Version  2 This address stores firmware version of the DYNAMIXEL ID  3 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet  0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate  4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate      Margin of Error                  1 Default       1M      0 000%              3      500 000      0 000%              4      400 000      0 000%              7      250 000      0 000%              9      200 000      0 000%              16      115200      2 124%              34      57600      0 794%              103      19200      0 160%              207      9600      0 160%      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time  5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received                    Value      Description                  Unit      2 μsec                     Range      0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       CW CCW Angle Limit  6  8 The angle limit allows the motion to be restrained The range and the unit of the value is the same as Goal Position Address 30  31  CW Angle Limit the minimum value of Goal Position Address 30  31 CCW Angle Limit the maximum value of Goal Position Address 30  31 The following two modes can be set pursuant to the value of CW and CCW             Operation Type      CW   CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheeltype operation robots since motors of the robots spin infinitely  The joint mode can be used to multijoints robot since the robots can be controlled with specific angles Drive Mode  10             Bit      Item      Description                  Bit 2   7      N A                    Bit 1      Master Slave Mode      0 Master Mode1  Slave Mode              Bit 0      Normal Reverse Mode      0 Normal Mode1 Reverse mode            Master ModeIn case of being used as dual joints  it is set to designate as master         Slave ModeIn case of being used as dual joints  it is set to designate as slave         General ModeSets the direction of rotation to set direction Reads normal data values from position         Reverse ModeSets the direction of rotation  opposite to set direction Reads inverse data values from position     Note Reverse mode is to reverse the rotational direction  It can be used conveniently when a symmetrical joint is required   Dual JointsDual joints are used as 1 joint by controlling 2 motors simultaneously To use the dual joints  1 unit of motor set in master mode and 1 unit of motor set in slave mode are needed Next  the motors must be connected to each other using synchronization cable   Normal mode synch cable Drives Master and PWM signals synchronized   Reverse mode synch cable Drives PWM signals in reverse Note Slave is synchronized by directly receiving the control command through synchronization cable from Master   Slave Mode unit responds to communication through command packets  but data related to motor drive are processed only through the synchronization Note In a dual masterslave configuration position information from the slave is ignored and the position of the dual configuration is based on the master in PWM control  When master and slave are not physically connected there could be a slight difference on the driven load  Use the frame shown in the below image to achieve dual configuration Temperature Limit  11 Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Using the product when the temperature is high may and can cause damage Min Max Voltage Limit  12  13 It is the operation range of voltage             Unit      Value Range      Description                  About 0 1V      50   250      5 0   25 0V      For example  if the value is 80  the voltage is 8V If Present Voltage 42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 Max Torque  14 It is the torque value of maximum output  0 to 1023  0x3FF  can be used  and the unit is about 0 1% For example  Data 1023  0x3FF  means that Dynamixel will use 100% of the maximum torque it can produce while Data 512  0x200  means that Dynamixel will use 50% of the maximum torque  When the power is turned on  Torque Limit  Addresses 34 and 35  uses the value as the initial value Status Return Level  16 It decides how to return Status Packet  There are three ways like the below table             Value      Return of Status Packet                  0      No return against all commands  Except PING Command               1      Return only for the READ command              2      Return for all commands      When Instruction Packet is Broadcast ID  Status Packet is not returned regardless of Status Return Level Alarm LED 17   Shutdown 18 Dynamixel can protect itself by detecting errors occur during the operation The errors can be set are as the table below             Bit      Name      Description                  Bit 7      0                    Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’  That is  if 0X05  binary 00000101  is set  both Input Voltage Error and Overheating Error can be detected If errors occur  in case of Alarm LED  the LED blinks in case of Alarm Shutdown  the motor output becomes 0 % by making the value of Torque Limit Address 34  35  as 0 Torque Enable  24             Value      Description                  0      Keeps Torque from generating by interrupting the power of motor              1      Generates Torque by impressing the power to the motor       LED  25             Bit      Description                  0      Turn OFF the LED              1      Turn ON the LED      Compliance Margin  26  27 It exists in each direction of CW CCW and means the error between goal position and present position The range of the value is 0 255  and the unit is the same as Goal Position  Address 30 31 The greater the value  the more difference occurs Compliance Slope  28  29 It exists in each direction of CW CCW and sets the level of Torque near the goal position Compliance Slope is set in 7 steps  the higher the value  the more flexibility is obtained Data representative value is actually used value   That is  even if the value is set to 25  16 is used internally as the representative value             Step      Data Value      Data Representative Value                  1      0 0x00    3 0x03       2 0x02               2      4 0x04    7 0x07       4 0x04               3      8 0x08  15 0x0F       8 0x08               4      16 0x10  31 0x1F       16 0x10               5      32 0x20  63 0x3F       32 0x20               6      64 0x40  127 0x7F       64 0x40               7      128 0x80  254 0xFE       128 0x80       Compliance is to set the control flexibility of the motor The following diagram shows the relationship between output torque and position of the motor Goal Position  30 It is a position value of destination 0 to 1023  0x3FF  is available   The unit is 0 29 degree If Goal Position is out of the range  Angle Limit Error Bit  Bit1  of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED Shutdown The picture above is the front view of DynamixelNote If it is set to Wheel Mode  this value is not used Moving Speed  32 It is a moving speed to Goal Position The range and the unit of the value may vary depending on the operation mode       Join Mode0 1023  0X3FF  can be used  and the unit is about 0 111rpm If it is set to 0  it means the maximum rpm of the motor is used without controlling the speed If it is 1023  it is about 114rpm For example  if it is set to 300  it is about 33 3 rpm         Wheel Mode0 2047  0X7FF  can be used  the unit is about 0 1% If a value in the range of 0 1023 is used  it is stopped by setting to 0 while rotating to CCW direction If a value in the range of 1024 2047 is used  it is stopped by setting to 1024 while rotating to CW direction That is  the 10th bit becomes the direction bit to control the direction In Wheel Mode  only the output control is possible  not speed For example  if it is set to 512  it means the output is controlled by 50% of the maximum output   Note Please check the maximum rpm of the Dynamixel  The motor cannot exceed the maximum rpm with the higher Moving Speed value Torque Limit  34 It is the value of the maximum torque limit 0 to 1023  0x3FF  is available  and the unit is about 0 1% For example  if the value is 512  it is about 50% that means only 50% of the maximum torque will be used If the power is turned on  the value of Max Torque  Address 14  15  is used as the initial value Note If the function of Alarm Shutdown is triggered  the motor loses its torque because the value becomes 0  At this moment  if the value is changed to the value other than 0  the motor can be used again Present Position  36 It is the current position value of Dynamixel The range of the value is 0 1023  0x3FF   and the unit is 0 29 degree The picture above is the front view of Dynamixel       Wheel ModeThe range of the value is 0 65535 0XFFFF   and the unit is 0 06 degree  In case of Wheel Mode  only the moving distance can be measured since the present location outputs the value of Encoder  It is increased or decreased by 1 depending on the moving direction of wheel  If it is decreased when the value is 0  it becomes 65535 if it is increased when it is 65535  the value becomes 0     Total Moved Angle    The value currently measured  The value measured in the past  x 0 06According to the formula above  if the total moved angle is greater than 0  it is turned to the direction of CCW if it is less than 0  it is turned to the direction of CW For example  The value is changed from 5000 to 10000   10000  5000  x 0 06   300  and the total moved angle becomes 300 degrees   Present Speed  38 It is the current moving speed 0 2047  0X7FF  can be used If a value is in the rage of 0 1023  it means that the motor rotates to the CCW direction If a value is in the rage of 1024 2047  it means that the motor rotates to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 0 and 1024 are equal The unit of this value varies depending on operation mode       Joint ModeThe unit is about 0 111rpm For example  if it is set to 300  it means that the motor is moving to the CCW direction at a rate of about 33 3rpm         Wheel ModeThe unit is about 0 1% For example  if it is set to 512  it means that the torque is controlled by 50% of the maximum torque to the CCW direction   Present Load  40 It means currently applied load The range of the value is 0 2047  and the unit is about 0 1% If the value is 0 1023  it means the load works to the CCW direction If the value is 1024 2047  it means the load works to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 1024 is equal to 0 For example  the value is 512  it means the load is detected in the direction of CCW about 50% of the maximum torque             Bit      15   11      10      9   0                  Value      0      Load Direction      Data  Load Ratio       Note CCW Load  Load Direction   0  CW Load  Load Direction   1Note Present load is an inferred value based on the internal output value not a measured value using torque sensor  etc  Therefore  it may be inaccurate for measuring weight or torque  It is recommended to use it for predicting the direction and size of the force being applied to the joint Present Voltage  42 It is the size of the current voltage supplied This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 Present Temperature  43 It is the internal temperature of Dynamixel in Celsius Data value is identical to the actual temperature in Celsius  For example  if the data value is 85  0x55   the current internal temperature is 85°C Registered Instruction  44             Value      Description                  0      There are no commands transmitted by REG_WRITE              1      There are commands transmitted by REG_WRITE      Note If ACTION command is executed  the value is changed into 0 Moving  46             Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock  47             Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 Punch  48 Current to drive motor is at minimum Can choose vales from 0x20 to 0x3FF Sensed Current  56 It is the amount of current in use  The range from 0 to 1023 is used  and the unit is 10mA  The value less than 512 means the motor consumes the current and torques to the direction of CCW  The value greater than 512 means the motor consumes the current and torques to the direction of CW  512 is equal to 0mA  and it means there is no torque from the motor For example  if the value is 612  the motor torques to the direction of CW and consumes 1000mA 612512 100   gt 100x10mA   1 000mA  If the value is 312  the motor torques to the direction of CW and consumes 2000mA 512312  200   gt 200x10mA 2 000mA  How to AssembleMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators  the main controller needs to convert its UART signals to the half duplex type  The recommended circuit diagram for this is shown below TTL CommunicationRS485 CommunicationThe power of Dynamixel is supplied via Pin1    Pin2     The above circuit is built into Dynamixelonly controller  In the above circuit diagram  the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as followsIn case of DIRECTION485 Level   High The signal of TxD is output to D  and D In case of DIRECTION485 Level   Low The signal of D  and D is output to RxD Pin AssignmentThe connector pin assignments are as the following  The two connectors on the Dynamixel are connected pin to pin  thus the Dynamixel can be operated with only one connector attached ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/ex/ex-106+/"
      } ,
  
  
      "docs-en-dxl-mx-mx-106-2":  {
      "title": "MX-106(2.0)",
      "content"	 : "MX106 Protocol 2 0 Specifications            Item      Specifications                  MCU      ST CORTEXM3   STM32F103C8 @ 72MHZ 32BIT               Position Sensor      Contactless absolute encoder  12BIT 360 DEGREE Maker  ams  www ams com   Part No  AS5045              Motor      Maxon              Baud Rate      8000 bps   4 5 Mbps              Control Algorithm      PID Control              Resolution      0 088°              Operation Modes      Current Control ModeVelocity Control ModePosition Control Mode 0°   360° Extended Position Ctrl Mode Multiturn Currentbased Position Ctrl ModePWM Control Mode              Weight      153g              Dimensions  W x H x D       40 2mm x 65 1mm x 46mm              Gear Ratio      225  1              Stall Torque      8 0Nm @ 11 1V  4 8A8 4Nm @ 12V  5 2A10 0Nm @ 14 8V  6 3A              No Load Speed      41rpm @ 11 1V45rpm @ 12V55rpm @ 14 8V              Operating Temperature      5°C    80°C              Input Voltage      10   14 8V  Recommended  12V               Standby Current      100mA              Command Signal      Digital Packet              Protocol Type      MX106T Half Duplex Asynchronous Serial CommunicationMX106R RS485 Asynchronous Serial Communication 8bit 1stop  No Parity               Physical Connection      MX106T TTL Level Multidrop BUSMX106R RS485 Multidrop BUS              ID      0   252              Feedback      Position  Temperature  Load  Input Voltage  etc              Material      Full Metal GearMetal Front   Engineering Plastic Middle  Back       Performance GraphStall torque Peak stall torque read from transient statePerformance Graph NT Curve  A graph shows torque measured in stable condition while increasing load  Normally  stall torque is bigger than maximum torque on performance graph Caution When connecting to power supply  For the stable power supply  we recommend using ROBOTIS controller or SMPS2Dynamixel   Connect your DYNAMIXEL to power supply while it’s off and turn on off with the power switch Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 2 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the power is reset Volatile   On the other hand  data in the EEPROM Area is maintained even when the DYNAMIXEL is powered off NonVolatile   Data in the EEPROM Area can only be written to if Torque Enable 64  is cleared to ‘0’ Off  SizeThe Size of data varies from 1 to 4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  For data larger than 2 bytes will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      321              2      4      Model Information      Model Information      R                    6      1      Firmware Version      Firmware Version      R                    7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Baud Rate      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              10      1      Drive Mode      Drive Mode      RW      0              11      1      Operating Mode      Operating Mode      RW      3              12      1      Secondary Shadow  ID      Secondary ID      RW      255              13      1      Protocol Version      Protocol Version      RW      2              20      4      Homing Offset      Home Position Offset      RW      0              24      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      10              31      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              32      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      160              34      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      95              36      2      PWM Limit      Maximum PWM Limit      RW      885              38      2      Current Limit      Maximum Current Limit      RW      2047              40      4      Acceleration Limit      Maximum Acceleration Limit      RW      32767              44      4      Velocity Limit      Maximum Velocity Limit      RW      360              48      4      Max Position Limit      Maximum Position Limit      RW      4095              52      4      Min Position Limit      Minimum Position Limit      RW      0              63      1      Shutdown      Shutdown Error Information      RW      52      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  64      1      Torque Enable      Motor Torque On Off      RW      0              65      1      LED      Status LED On Off      RW      0              68      1      Status Return Level      Select Types of Status Return      RW      2              69      1      Registered Instruction      REG_WRITE Instruction Flag      R      0              70      1      Hardware Error Status      Hardware Error Status      R      0              76      2      Velocity I Gain      I Gain of Velocity      RW      1920              78      2      Velocity P Gain      P Gain of Velocity      RW      100              80      2      Position D Gain      D Gain of Position      RW      0              82      2      Position I Gain      I Gain of Position      RW      0              84      2      Position P Gain      P Gain of Position      RW      850              88      2      Feedforward 2nd Gain      2nd Gain of FeedForward      RW      0              90      2      Feedforward 1st Gain      1st Gain of FeedForward      RW      0              98      1      BUS Watchdog      Dynamixel BUS Watchdog      RW      0              100      2      Goal PWM      Target PWM Value      RW                    102      2      Goal Current      Target Current Value      RW                    104      4      Goal Velocity      Target Velocity Value      RW                    108      4      Profile Acceleration      Acceleration Value of Profile      RW      0              112      4      Profile Velocity      Velocity Value of Profile      RW      0              116      4      Goal Position      Target Position      RW                    120      2      Realtime Tick      Count Time in Millisecond      R                    122      1      Moving      Movement Flag      R      0              123      1      Moving Status      Detailed Information of Movement Status      R      0              124      2      Present PWM      Present PWM Value      R                    126      2      Present Current      Present Current Value      R                    128      4      Present Velocity      Present Velocity Value      R                    132      4      Present Position      Present Position Value      R                    136      4      Velocity Trajectory      Target Velocity Trajectory from Profile      R                    140      4      Position Trajectory      Target Position Trajectory from Profile      R                    144      2      Present Input Voltage      Present Input Voltage      R                    146      1       Present Temperature       Present Internal Temperature      R                    168      2      Indirect Address 1      Indirect Address 1      RW      224              170      2      Indirect Address 2      Indirect Address 2      RW      225              172      2      Indirect Address 3      Indirect Address 3      RW      226              …      …      …      …      …      …              218      2      Indirect Address 26      Indirect Address 26      RW      249              220      2      Indirect Address 27      Indirect Address 27      RW      250              222      2      Indirect Address 28      Indirect Address 28      RW      251              224      1      Indirect Data 1      Indirect Data 1      RW      0              225      1      Indirect Data 2      Indirect Data 2      RW      0              226      1      Indirect Data 3      Indirect Data 3      RW      0              …      …      …      …      …      …              249      1      Indirect Data 26      Indirect Data 26      RW      0              250      1      Indirect Data 27      Indirect Data 27      RW      0              251      1      Indirect Data 28      Indirect Data 28      RW      0              578      2      Indirect Address 29      Indirect Address 29      RW      634              580      2      Indirect Address 30      Indirect Address 30      RW      635              582      2      Indirect Address 31      Indirect Address 31      RW      636              …      …      …      …      …      …              628      2      Indirect Address 54      Indirect Address 54      RW      659              630      2      Indirect Address 55      Indirect Address 55      RW      660              632      2      Indirect Address 56      Indirect Address 56      RW      661              634      1      Indirect Data 29      Indirect Data 29      RW      0              635      1      Indirect Data 30      Indirect Data 30      RW      0              636      1      Indirect Data 31      Indirect Data 31      RW      0              …      …      …      …      …      …              659      1      Indirect Data 54      Indirect Data 54      RW      0              660      1      Indirect Data 55      Indirect Data 55      RW      0              661      1      Indirect Data 56      Indirect Data 56      RW      0      Caution Protocol 1 0 does not support addresses greater than 256  Therefore  Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0 Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable 64  is cleared to ‘0’ Model Number 0 This address stores model number of the DYNAMIXEL Firmware Version 6 This address stores firmware version of the DYNAMIXEL ID 7 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate 4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate      Margin of Error                  7      4 5M      0 000%              6      4M      0 000%              5      3M      0 000%              4      2M      0 000%              3      1M      0 000%              2      115 200      0 000%              1 Default       57 600      0 000%              0      9 600      0 000%      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time 5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       Drive Mode 10 Drive Mode is availabe from the firmware version 38             Bit      Item      Description                  Bit 2   7      N A      Unused  always ‘0’              Bit 1      Master Slave Setting Dual Joint       Master Mode 0  Operate as a Master DynamixelSlave Mode 1  Operate as a Slave Dynamixel              Bit 0      Direction of Rotation      Normal Mode 0  CCW Positive   CW Negative Reverse Mode 1  CCW Negative   CW Positive       Note Setting Reverse mode ‘1’  for Direction of Rotation  DYNAMIXEL will switch rotating direction  Therefore the direction of Position  Velocity  Current  PWM will be affected  This feature can be very useful when configuring symmetrical joint system or wheel system Master Slave configuration  Dual joint  is a method to simultaneously control two Dynamixels like one Dynamixel  Master Dynamixel and Slave Dynamixel must be connected with a sync cable  Slave Dynamixel is directly controlled by the Master Dynamixel’s PWM signal transmitted through the sync cable  Therefore  the Slave Dynamixel’s Goal Position  Goal Velocity  Goal Current and Goal PWM are ignored             Sync Cable      Description                  Normal Mode Sync Cable      Slave Dynamixel is controlled by the Master Dynamixel’s PWM signal  Slave Dynamixel rotates to the same direction of the Master Dynamixel               Reverse Mode Sync Cable      Slave Dynamixel is controlled by the inverted PWM signal of the Master Dynamixel  Slave Dynamixel rotates to the opposite direction of the Master Dynamixel       Note In a dual masterslave configuration position information from the slave is ignored and the position of the dual configuration is based on the master in PWM control  When master and slave are not physically connected there could be a slight difference on the driven load  Use the frame shown in the below image to achieve dual configuration Operating Mode 11             Value      Operating Mode      Description                  0      Current Control Mode      DYNAMIXEL only controls current torque  regardless of speed and position  This mode is ideal for a gripper or a system that only uses current torque  control or a system that has additional velocity position controllers               1      Velocity Control Mode      This mode controls velocity  This mode is identical to the Wheel Mode endless  from existing DYNAMIXELs  This mode is ideal for wheeltype robots               3 Default       Position Control Mode      This mode controls position  This mode is identical to the Joint Mode from existing DYNAMIXELs  Operating position range is limited by Max Position Limit 48  and Min Position Limit 52   This mode is ideal for articulated robots that each joint rotates less than 360 degrees               4      Extended Position Control Mode Multiturn       This mode controls position  This mode is identical to the MultiTurn Mode from existing DYNAMIXELs  512 turns are supported 256 rev    256 rev    This mode is ideal for multiturn wrists or conveyer systems or a system that requires an additional reduction gear               5      Currentbased Position Control Mode      This mode controls both position and current torque   Up to 512 turns are supported 256 rev    256 rev    This mode is ideal for a system that requires both position and current control such as articulated robots or grippers               16      PWM Control Mode   Voltage Control Mode       This mode directly controls PWM output   Voltage Control Mode         Note Switching Operating Mode will reset gains PID  Feedfoward  properly to the selected Operating Mode  The profile generator and limits will also be reset   Profile Velocity 112   Profile Acceleration 108   Reset to ‘0’  Goal PWM 100   Goal Current 102   Reset to PWM Limit 36   Current Limit 38  respectively  Currentbased Position Control Mode  Reset to Position Gain PID  and PWM Limit 36  values Changed Position Gain PID  and PWM Limit 36  values can be read from the Control Table Note PWM is the abbreviation for Pulse Width Modulation that modulates PWM Duty to control motors  The PWM Control Mode changes pulse width to control average supply voltage to the motor and this technique is widely used in the motor control field  Therefore  PWM Control Mode uses Goal PWM 100  value to control supply voltage for DYNAMIXEL  PWM Control Mode is similar to the Wheel Mode of DYNAMIXEL AX and RX series Secondary Shadow  ID 12 Set the Dynamixel’s Secondary ID  Secondary ID 12  is a value to identify each Dynamixel  just like the ID 7  However  unlike ID 7   Secondary ID 12  is not a unique value Therefore  Dynamixels with the same Secondary ID value form a group The differences between Secondary ID 12  and ID 7  are as follows   Secondary ID 12  is not a unique value  i e   a lot of Dynamixels may have the same Secondary ID value   ID 7  has a higher priority than Secondary ID 12   i e   if Secondary ID 12  and ID 7  are the same  ID 7  will be applied first   The EEPROM area of the Control Table cannot be modified with Secondary ID 12   Only the RAM area can be modified   If Instruction Packet ID is the same as Secondary ID 12   the Status Packet will not be returned   If the value of Secondary ID 12  is 253 or higher  the Secondary ID function is deactivated             Values      Description                  0   252      Activate Secondary ID function              253   255      Deactivate Secondary ID function  Default value ‘255’      The following are examples of operation when there are five Dynamixels with ID  7  set from 1 to 5   Set all five Dynamixels’ Secondary ID 12  to ‘5’   Send Write Instruction Packet ID   1  LED 65    1    Turn on LED of Dynamixel with ID ‘1’ and return the Status Packet   Send Write Instruction Packet ID   5  LED 65    1    Turn on LED on five Dynamixels  However  Status Packet of Dynamixel with ID ‘5’ will be returned   Set the Secondary ID 12  of all five Dynamixels to ‘100’   Send Write Instruction Packet ID   100  LED 65    0    Turn off LED on five Dynamixels  However  as there is no Dynamixel with ID ‘100’  Status Packet is not returned Protocol Version 13 Users can select Dynamixel protocol version  1 0 and 2 0  It is recommended to use an identical protocol version for multiple Dynamixels             Value      Protocol Version      Compatible Dynamixels                  1      1 0      AX Series  DX Series  RX Series  EX Series  MX Series with Firmware below v39              2 default       2 0      MX28 64 106 with Firmware v39 or above  X Series  Pro Series      Note The protocol 2 0 is greatly enhanced from the protocol 1 0  Accessing some of the Control Table area might be denied if protocol 1 0 is selected  This manual complies with protocol 2 0  Please refer to the Protocol section of eManual for more details about the protocol Homing Offset 20 Users can adjust the Home position by setting Home Offset 20   The Homing Offset value is added to the Present Position 132  Present Position 132    Actual Position   Homing Offset 20              Unit      Value Range      Description                  about 0 088°      1 044 479   1 044 479 255   255 rev        4 096 resolution      Note In case of the Position Control Mode Joint Mode  that rotates less than 360 degrees  any invalid Homing Offset 20  values will be ignored valid range  1 024   1 024  Moving Threshold 24 This value helps to determine whether the Dynamixel is in motion or not When the absolute value of Present Velocity 128  is greater than the Moving Threshold 24   Moving 122  is set to ‘1’  otherwise it is cleared to ‘0’                    Values      Description                  Unit      about 0 229 rpm      All velocity related Data uses the same unit              Range      0   1 023            Maximum Temperature Limit 31 This value limits operating temperature  When the Present Temperature 146  that indicates internal temperature of Dynamixel is greater than the Temperature Limit 31   the Over Heating Error Bit 0x04  and Hardware Error Bit 0x80  in the Hardware Error Status 70  will be set  If Overheating Error Bit 0x04  is configured in the Shutdown 63   Torque Enable 64  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 63  section             Unit      Value Range      Description                  About 1°      0   100      0   100°      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit 32  34 It is the operation range of voltage             Unit      Value Range      Description                  About 0 1V      50   250      5 0   25 0V      For example  if the value is 80  the voltage is 8V If Present Voltage 42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 PWM Limit 36 This value indicates maximum PWM output  Goal PWM 100  can’t be configured with any values exceeding PWM Limit 36   PWM Limit 36  is commonly used in all operating mode as an output limit  therefore decreasing PWM output will result in decreasing torque and velocity  For more details  please refer to the Gain section of each operating modes             Values      Description                  0 0%    885 100%       885   100 %  output      Current Limit  38 This value indicates maximum current torque  output limit  Goal Current 102  can’t be configured with any values exceeding Current Limit 38   The Current Limit 38  is used in Torque Control Mode and Currentbased Position Control Mode  therefore decreasing Current Limit 38  will result in decreasing torque of DYNAMIXEL  For more details  please refer to the Position PID Gain 80   84              Unit      Value Range                  about  3 36 mA       0   2 047      Note Current Limit 38  could be differ by each DYNAMIXEL so please check the Control Table Acceleration Limit 40 This value indicates maximum Profile Acceleration 108   Profile Acceleration 108  can’t be configured with any values exceeding Acceleration Limit 40   Profile Acceleration 108  is used in all operating mode except PWM Control Mode in order to generate a target trajectory  For more details  please refer to the Profile Velocity 112              Unit      Value Range                  214 577 Rev min2      0   32 767      Note Bit information of the Error field in the Status Packet is different from protocol 1 0 and protocol 2 0  This manual complies with protocol 2 0  Please refer to the Protocol section of eManual for more details about the protocol Velocity Limit 44 This value indicates maximum velocity of Goal Velocity 104  and Profile Velocity 112   For more details  please refer to the Profile Velocity 112              Unit      Value Range                  0 229rpm      0   1 023      Min Max Position Limit 48  52 These values limit maximum and minimum target positions for Position Control Mode Joint Mode  within the range of 1 rotation 0   4 095   Therefore  Goal Position 116  should be configured within the position limit range  These values are not used in Extended Position Control Mode and Currentbased Position Control Mode             Unit      Value Range                  0 088°      0   4 095 1 rotation       Note Max Position Limit 48  and Min Position Limit 52  are only used in Position Control Mode with a single turn Shutdown 63 The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation Each Bit is inclusively processed with the ‘OR’ logic  therefore  multiple options can be generated For instance  when ‘0x05’  binary  00000101  is defined as Shutdown 63   Dynamixel can detect both Input Voltage Error binary  00000001  and Overheating Error binary  00000100  If those errors are detected  Torque Enable 64  is cleared to ‘0’ and the motor output becomes 0 %  REBOOT is the only method to reset Torque Enable 64  to ‘1’ Torque ON  after the shutdown The followings are detectable situations             Bit      Item      Description                  Bit 7            Unused  Always ‘0’              Bit 6            Unused  Always ‘0’              Bit 5      Overload Error default       Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error default       Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error default       Detect internal temperature exceeds the configured operating temperature              Bit 1            Unused  Always ‘0’              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs  use below method to reboot Dynamixels   H W REBOOT  Turn off the power and turn on again  S W REBOOT  Transmit REBOOT Instruction  For more details  please refer to the  Reboot  section of Protocol eManual  If Shutdown occurs  LED will flicker every second  Firmware v41 or above Torque Enable 64 Controls Torque ON OFF  Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected             Value      Description                  0 Default       Torque OFF Freerun  and the motor does not generate torque              1      Torque ON and all Data in the EEPROM area will be locked      Note Present Position 132  can be reset when Operating Mode 11  and Torque Enable 64  are updated  For more details  please refer to the Homing Offset 20  and Present Position 132  LED 65 Turn on or turn off the LED on Dynamixel             Bit      Description                  0 Default       Turn OFF the LED              1      Turn ON the LED      Status Return Level 68 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Registered Instruction 69             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Hardware Error Status 70 This value indicates hardware error status The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation Each Bit is inclusively processed with the ‘OR’ logic  therefore  multiple options can be generated For instance  when ‘0x05’  binary  00000101  is defined as Shutdown 63   Dynamixel can detect both Input Voltage Error binary  00000001  and Overheating Error binary  00000100  If those errors are detected  Torque Enable 64  is cleared to ‘0’ and the motor output becomes 0 %  REBOOT is the only method to reset Torque Enable 64  to ‘1’ Torque ON  after the shutdown The followings are detectable situations             Bit      Item      Description                  Bit 7            Unused  Always ‘0’              Bit 6            Unused  Always ‘0’              Bit 5      Overload Error default       Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error default       Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error default       Detect internal temperature exceeds the configured operating temperature              Bit 1            Unused  Always ‘0’              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs  use below method to reboot Dynamixels   H W REBOOT  Turn off the power and turn on again  S W REBOOT  Transmit REBOOT Instruction  For more details  please refer to the  Reboot  section of Protocol eManual  If Shutdown occurs  LED will flicker every second  Firmware v41 or above Velocity PI Gain 76  78 These values indicate Gains of Velocity Control Mode  Gains of DYNAMIXEL’s internal controller can be calculated from Gains of the Control Table as shown below  The constant in each equations include sampling time  Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and that of the Control Table is abbreviated to KVP TBL                     Controller Gain      Conversion Equations      Range      Description                  Velocity I Gain 76       KVI      KVI   KVI TBL    65 536      0   16 383      I Gain              Velocity P Gain 78       KVP      KVP   KVP TBL    128      0   16 383      P Gain      Below figure is a block diagram describing the velocity controller in Velocity Control Mode  When the instruction transmitted from the user is received by DYNAMIXEL  it takes following steps until driving the horn   An Instruction from the user is transmitted via DYNAMIXEL bus  then registered to Goal Velocity 104    Goal Velocity 104  is converted to target velocity trajectory by Profile Acceleration 108    The target velocity trajectory is stored at Velocity Trajectory 136    PI controller calculates PWM output for the motor based on the target velocity trajectory   Goal PWM 100  sets a limit on the calculated PWM output and decides the final PWM value   The final PWM value is applied to the motor through an Inverter  and the horn of DYNAMIXEL is driven   Results are stored at Present Position 132   Present Velocity 128   Present PWM 124  and Present Current 126  Note Ka stands for Antiwindup Gain and ‘β’ is a conversion coefficient of position and velocity that cannot be modified by users  For more details about the PID controller  please refer to the PID Controller at wikipedia Position PID Gain 80  82  84   Feedforward 1st 2nd Gains 88  90 These Gains are used in Position Control Mode and Extended Position Control Mode  Gains of Dynamixel’s internal controller can be calculated from Gains of the Control Table as shown below  The constant in each equations include sampling time  Position P Gain of Dynamixel’s internal controller is abbreviated to KPP and that of the Control Table is abbreviated to KPP TBL                     Controller Gain      Conversion Equations      Range      Description                  Position D Gain 80       KPD      KPD   KPD TBL    16      0   16 383      D Gain              Position I Gain 82       KPI      KPI   KPI TBL    65 536      0   16 383      I Gain              Position P Gain 84       KPP      KPP   KPP TBL    128      0   16 383      P Gain              Feedforward 2nd Gain 88       KFF2nd      KFF2nd TBL    4      0   16 383      Feedforward Acceleration Gain              Feedforward 1st Gain 90       KFF1st      KFF1st TBL    4      0   16 383      Feedforward Velocity Gain      Below figure is a block diagram describing the position controller in Position Control Mode and Extended Position Control Mode  When the instruction from the user is received by Dynamixel  it takes following steps until driving the horn   An Instruction from the user is transmitted via Dynamixel bus  then registered to Goal Position 116    Goal Position 116  is converted to target position trajectory and target velocity trajectory by Profile Velocity 112  and Profile Acceleration 108    The target position trajectory and target velocity trajectory is stored at Position Trajectory 140  and Velocity Trajectory 136  respectively   Feedforward and PID controller calculate PWM output for the motor based on target trajectories   Goal PWM 100  sets a limit on the calculated PWM output and decides the final PWM value   The final PWM value is applied to the motor through an Inverter  and the horn of Dynamixel is driven   Results are stored at Present Position 132   Present Velocity 128   Present PWM 124  and Present Current 126  Note In case of PWM Control Mode  both PID controller and Feedforward controller are deactivated while Goal PWM 100  value is directly controlling the motor through an Inverter  In this manner  users can directly control the supplying voltage to the motor Note Ka is an Antiwindup Gain that cannot be modified by users Below figure is a block diagram describing the currentbased position controller in Currentbased Position Control Mode  As Currentbased Position Control Mode is quite similar to Position Control Mode  differences will be focused in the following steps  The differences are highlighted with a green marker in the block diagram as well   Feedforward and PID controller calculates target current based on target trajectory   Goal Current 102  decides the final target current by setting a limit on the calculated target current   Current controller calculates PWM output for the motor based on the final target current   Goal PWM 100  sets a limit on the calculated PWM output and decides the final PWM value   The final PWM value is applied to the motor through an Inverter  and the horn of DYNAMIXEL is driven   Results are stored at Present Position 132   Present Velocity 128   Present PWM 124  and Present Current 126  Note Ka is an Antiwindup Gain that cannot be modified by users  For more details about the PID controller and Feedforward controller  please refer to the PID Controller and Feed Forward BUS Watchdog 98 Bus Watchdog  98  is available from firmware v38  It is a safety device  Failsafe  that stops the DYNAMIXEL if the communication between the controller and DYNAMIXEL communication  RS485  TTL  is disconnected due to an unspecified error Communication is defined as all the Instruction Packet in the DYNAMIXEL Protocol                    Values      Description                  Unit      20 ms                     Range      0      Deactivate Bus Watchdog Function  Clear Bus Watchdog Error              Range      1   127      Activate Bus Watchdog              Range      1      Bus Watchdog Error Status      The Bus Watchdog function monitors the communication interval  time  between the controller and DYNAMIXEL when Torque Enable  64  is ‘1’ If the measured communication interval  time  is larger than Bus Watchdog  98   the DYNAMIXEL will stop  Bus Watchdog  98  will be changed to ‘1’  Bus Watchdog Error  If the Bus Watchdog Error screen appears  the Goal Value  Goal PWM 100   Goal Current 102   Goal Velocity 104   Goal Position 116   will be changed to readonlyaccess Therefore  when a new value is written to the Goal Value  a Range Error will be returned via the Status packet If the value of Bus Watchdog  98  is changed to ‘0’  Bus Watchdog Error will be cleared Note For details of Range Error  please refer to the protocol of the eManual The following are examples of the operation of the Bus Watchdog function   After setting the operating mode  11  to speed control mode  change the Torque Enable  64  to ‘1’   If ‘50’ is written in the Goal Velocity  104   the DYNAMIXEL will rotate in CCW direction   Change the value of Bus Watchdog  98  to ‘100’  2 000  ms     Activate Bus Watchdog Function   If no instruction packet is received for 2 000  ms   the DYNAMIXEL will stop  When it stops  the Profile Acceleration  108  and Profile Velocity  112  are applied as ‘0’   The value of Bus Watchdog  98  changes to ‘1’  Bus Watchdog Error   At this time  the access to the Goal Value will be changed to readonly   If ‘150’ is written to the Goal Velocity  104   Range Error will be returned via Status Packet   If the value of Bus Watchdog  98  is changed to ‘0’  Bus Watchdog Error will be cleared   If 150 is written in the Goal Velocity  104   the DYNAMIXEL will rotate in CCW direction Goal PWM 100 In case of PWM Control Mode  both PID controller and Feedforward controller are deactivated while Goal PWM 100  value is directly controlling the motor through an Inverter  In other control modes  this value is used to limit PWM value  This value cannot exceed PWM Limit 36   Please refer to the Gain section in order to see how Goal PWM 100  affects to different control modes             Range      Description                  PWM Limit 36    PWM Limit 36       Initial Value of PWM Limit 36   ‘885’      Goal Current  102 In case of Torque Control Mode  Goal Current 102  can be used to set a target current  This value sets a limit to current in Currentbased Position Control mode  This value cannot exceed Current Limit 38              Unit      Value Range                  about  3 36 mA       Current Limit 38    Current Limit 38       Note Applying high current to the motor for long period of time might damage the motor Goal Velocity 104 In case of Velocity Control Mode  Goal Velocity 104  can be used to set a target velocity  This value cannot exceed Velocity Limit 44   For now  Goal Velocity 104  is used for target velocity  but this value is not used to limit the velocity             Unit      Value Range                  0 229 rpm      Velocity Limit 44    Velocity Limit 44       Note The maximum velocity and maximum torque of DYNAMIXEL is affected by supplying voltage  Therefore  if supplying voltage changes  so does the maximum velocity  This manual complies with recommended supply voltage 12 V   Note If Profile Acceleration 108  and Goal Velocity 104  are modified simultaneously  modified Profile Acceleration 108  will be used to process Goal Velocity 104  Profile Acceleration 108 The acceleration of Profile can be set with this value  Profile Acceleration 108  can be used in all control modes except Torque Control Mode  Profile Acceleration 108  cannot exceed Acceleration Limit 40   For more details  please refer to the Profile Velocity 112              Unit      Value Range      Description                  214 577 Rev min2      0   Acceleration Limit 40       ‘0’ stands for an infinite acceleration      Profile Velocity 112 The Maximum velocity of Profile can be set with this value  Profile Velocity 112  can be used in all control modes except Torque Control Mode and Velocity Control Mode  Profile Velocity 112  cannot exceed Velocity Limit 44   Velocity Control Mode only uses Profile Acceleration 108  instead of Profile Velocity 112              Unit      Value Range      Description                  0 229 rpm      0   Velocity Limit 44       ‘0’ stands for an infinite velocity      The Profile is an acceleration deceleration control method to reduce vibration  noise and load of the motor by controlling dramatically changing velocity and acceleration  It is also called Velocity Profile as it controls acceleration and deceleration based on velocity  DYNAMIXEL provides 4 different types of Profile  The following explains 4 Profiles and how to select them  Profiles are usually selected by a combination of Profile Velocity 112  and Profile Acceleration 108   Triangular and Trapezoidal Profiles exceptionally consider total travel distance ΔPos  the distance difference between target position and current position  as an additional factor  For convenience  Profile Velocity 112  is abbreviated to VPRFL and Profile Acceleration 108  is abbreviated to VPRFL  ‘X’ stands for Don’t Care case When given Goal Position 116   Dynamixel’s profile creates target velocity trajectory based on current velocity initial velocity of the Profile   When Dynamixel receives updated target position from a new Goal Position 116  while it is moving toward the previous Goal Position 116   velocity smoothly varies for the new target velocity trajectory  Maintaining velocity continuity while updating target velocity trajectory is called Velocity Override  For a simple calculation  let’s assume that the initial velocity of the Profile is ‘0’  The following explains how Profile processes Goal Position 116  instruction in Position Control mode  Extended Position Control Mode  Currentbased Position Control Mode   An Instruction from the user is transmitted via Dynamixel bus  then registered to Goal Position 116    Acceleration time t1  is calculated from Profile Velocity 112  and Profile Acceleration 108    Types of Profile is decided based on Profile Velocity 112   Profile Acceleration 108  and total travel distance ΔPos  the distance difference between target position and current position    Selected Profile type is stored at Moving Status 123   Refer to the Moving Status 123    Dynamixel is driven by the calculated target trajectory from Profile   Target velocity trajectory and target position trajectory from Profile are stored at Velocity Trajectory 136  and Position Trajectory 140  respectively   VPRFL_TRI of ③ and Travel time t3  to reach Goal Position 116  is calculated as below             Condition      Types of Profile                  VPRFL 112    0      Profile not used Step Instruction                VPRFL 112  ≠ 0   amp  APRF 108    0       Rectangular Profile               VPRFL 112  ≠ 0   amp  APRF 108  ≠ 0   amp  VPRFL_TRI ≤ VPRFL 112        Triangular Profile               VPRFL 112  ≠ 0   amp  APRF 108  ≠ 0   amp  VPRFL_TRI ＞ VPRFL 112        Trapezoidal Profile      Note Dynamixel supports Jerk control in order to minimize dramatic change of acceleration  Therefore  actual travel time by the target trajectory of Profile could be longer than t3 t4 of above figure    Note Velocity Control Mode only uses Profile Acceleration 108   Step and Trapezoidal Profiles are supported  Velocity Override and Jerk control are supported as well  Acceleration time t1  can be calculated as below equation Goal Velocity 104    Profile Acceleration 108    t1   64Goal Position 116 Target position can be set with Goal Position 116   From the front view of Dynamixels  CCW is an increasing direction whereas CW is a decreasing direction  The way to reaching Goal Position 116  is differ by 4 Profiles provided by Dynamixels  Please refer to the Profile Velocity 112  for more details             Mode      Values      Description                  Position Control Mode      Min Position Limit 52    Max Position Limit 48       Initial Value  0   4 095              Extended Position Control Mode      1 048 575   1 048 575      256 rev    256 rev               Currentbased Position Control Mode      1 048 575   1 048 575      256 rev    256 rev                   Degree Conversion Constant      Description                  0 088° Value      1 rev   0   4 095      Note If Profile Acceleration 108   Profile Velocity 112  and Goal Position 116  are modified simultaneously  Goal Position 116  is processed based on updated Profile Acceleration 108  and Profile Velocity 112  Realtime Tick 120 This value indicates Dynamixel’s time             Unit      Value Range      Description                  1 ms      0   32 767      The value resets to ‘0’ when it exceeds 32 767      Moving 122 This value indicates whether Dynamixel is in motion or not  If absolute value of Present Velocity 128  is greater than Moving Threshold 24   Moving 122  is set to ‘1’  Otherwise  it will be cleared to ‘0’  However  this value will always be set to ‘1’ regardless of Present Velocity 128  while Profile is in progress with Goal Position 116  instruction             Value      Description                  0      Movement is not detected              1      Movement is detected  or Profile is in progress Goal Position 116  instruction is being processed       Moving Status 123 This value provides additional information about the movement  Following Error Bit 0x08  and InPosition Bit 0x01  only work with Position Control Mode  Extended Position Control Mode  Currentbased Position Control Mode                           Details      Description                  Bit 7      0x80            Unused              Bit 6      0x40            Unused              Bit 5 Bit 4      0x30      Profile Type 0x30 Profile Type 0x20 Profile Type 0x10 Profile Type 0x00       Trapezoidal Velocity ProfileTriangular Velocity ProfileRectangular Velocity ProfileProfile is not used              Bit 3      0x08      Following Error      Dynamixel fails to reach target position trajectory              Bit 2      0x04            Unused              Bit 1      0x02      Profile Ongoing      Profile is in progress with Goal Position 116  instruction              Bit 0      0x01      InPosition      Dynamixel is reached to target position      Present PWM 124 This value indicates present PWM  For more details  please refer to the Goal PWM 100  Present Load 126 This value indicates current Current  For more details  please refer to the Goal Current 102  Present Velocity 128 This value indicates present Velocity  For more details  please refer to the Goal Velocity 104  Present Position 132 This value indicates present Position  For more details  please refer to the Goal Position 116    Note Present Position 132  represents 4 byte continuous range 2 147 483 648   2 147 483 647  when Torque is turned off regardless of Operating Mode 11   However  Present Position 132  will be reset in those cases  Present Position 132  is reset with the value within 1 rev  0   4 095  when Operating Mode 11  is changed to Position Control Mode   Present Position 132  is reset with the value within 1 rev  0   4 095  when Torque is turned on in Position Control Mode Reset Present Position 132  value can be affected by Homing Offset 20  Velocity Trajectory 136 This is a target velocity trajectory created by Profile  Operating method can be changed based on control mode  For more details  please refer to the Profile Velocity 112    Velocity Control Mode  When Profile reaches to the endpoint  Velocity Trajectory 136  becomes equal to Goal Velocity 104    Position Control Mode  Extended Position Control Mode  Currentbased Position Control Mode  Velocity Trajectory is used to create Position Trajectory 140   When Profile reaches to an endpoint  Velocity Trajectory 136  is cleared to ‘0’ Position Trajectory 140 This is a target position trajectory created by Profile  This value is only used in Position Control Mode  Extended Position Control Mode and Currentbased Position Control Mode  For more details  please refer to the Profile Velocity 112  Present Input Voltage 144 This value indicates present voltage that is being supplied  For more details  please refer to the Max Min Voltage Limit 32  34  Present Temperature 146 This value indicates internal temperature of Dynamixel  For more details  please refer to the Temperature Limit 31  Indirect Address  Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses  Sequential addresses increase Instruction Packet efficiency  Addresses that can be defined as Indirect Address is limited to RAM area Address 64   661  If specific address is allocated to Indirect Address  Indirect Address inherits features and properties of the Data from the specific Address  Property includes Size Byte length   value range  and Access property Read Only  Read Write   For instance  allocating 65 Address of LED  to Indirect Address 1 168   Indirect Data 1 224  can perform exactly same as LED 65  Example 1 Allocating Size 1 byte LED 65  to Indirect Data 1 224    Indirect Address 1 168   change the value to ‘65’ which is the address of LED   Set Indirect Data 1 224  to ‘1’  LED 65  also becomes ‘1’ and LED is turned on   Set Indirect Data 1 224  to ‘0’  LED 65  also becomes ‘0’ and LED is turned off Example 2 Allocating Size 4 byte Goal Position 116  to Indirect Data 2 225   4 sequential bytes have to be allocated   Indirect Address 2 170   change the value to ‘116’ which is the first address of Goal Position   Indirect Address 3 172   change the value to ‘117’ which is the second address of Goal Position   Indirect Address 4 174   change the value to ‘118’ which is the third address of Goal Position   Indirect Address 5 176   change the value to ‘119’ which is the fourth address of Goal Position   Set 4 byte value ‘1 024’ to Indirect Data 2  Goal Position 116  also becomes ‘1024’ and Dynamixel moves             Indirect Address Range      Description                  64   661      EEPROM address can’t be assigned to Indirect Address      Note In order to allocate Data in the Control Table longer than 2 byte  to Indirect Address  all address must be allocated to Indirect Address like the above Example 2 Note Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0 How to AssembleOptional Frames      FR05F101 and FR08X101        FR05S101        FR08B101        FR08H101        FR08H110 and FR08D101  Horns      HN05N102        HN05I101  Combination StructuresMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideVideosQuick StartDrawingsDownload MX106T",
      "url": "http://0.0.0.0:4000/docs/en/dxl/mx/mx-106-2/"
      } ,
  
  
      "docs-en-dxl-mx-mx-106":  {
      "title": "MX-106",
      "content"	 : "MX106Note Compliance has been replaced with PID Gains Note Although the MX106T  TTL  and MX106R  RS485  differ in communications protocols both have the same features and perform equally   TTL uses 3pin connectors while RS485 uses 4 Note In order to use Protocol 2 0  please update the firmware to V39 or above   Update firmware using R  Manager 2 0 Warning For MX106 2 0  Protocol  please refer to the MX106 2 0  Control Table as they are different Specifications            Item      Specifications                  MCU      ST CORTEXM3   STM32F103C8 @ 72MHZ 32BIT               Position Sensor      Contactless absolute encoder  12BIT 360 DEGREE Maker  ams  www ams com   Part No  AS5045              Motor      Maxon              Baud Rate      8000 bps   4 5 Mbps              Control Algorithm      PID Control              Resolution      0 088°              Running Degree      0°   360°Endless Turn              Weight      153g              Dimensions  W x H x D       40 2mm x 65 1mm x 46mm              Gear Ratio      225  1              Stall Torque      8 0Nm @ 11 1V  4 8A8 4Nm @ 12V  5 2A10 0Nm @ 14 8V  6 3A              No Load Speed      41rpm @ 11 1V45rpm @ 12V55rpm @ 14 8V              Operating Temperature      5°C    80°C              Input Voltage      10   14 8V  Recommended  12V               Standby Current      100mA              Command Signal      Digital Packet              Protocol Type      MX106T Half Duplex Asynchronous Serial CommunicationMX106R RS485 Asynchronous Serial Communication 8bit 1stop  No Parity               Physical Connection      MX106T TTL Level Multidrop BUSMX106R RS485 Multidrop BUS              ID      0   253              Feedback      Position  Temperature  Load  Input Voltage  etc              Material      Full Metal GearMetal Front   Engineering Plastic Middle  Back       Performance GraphStall torque Peak stall torque read from transient statePerformance Graph NT Curve  A graph shows torque measured in stable condition while increasing load  Normally  stall torque is bigger than maximum torque on performance graph Caution When connecting to power supply  For the stable power supply  we recommend using ROBOTIS controller or SMPS2Dynamixel   Connect your DYNAMIXEL to power supply while it’s off and turn on off with the power switch Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 1 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on  Volatile   On the other hand  modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off  NonVolatile   Data in the EEPROM Area can only be changed or modified when the value of Torque Enable 24  is ‘0’ and Dynamixel is in idle state SizeThe Size of data is 1 or 2 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  2 bytes data will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      320              2      1      Firmware Version      Firmware Version      R                    3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      CounterClockwise Angle Limit      RW      4095              10      1      Drive Mode      Dual Mode Setting      RW      0              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      160              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36              20      2      Multi Turn Offset      Adjust Position with Offset      RW      0              22      1      Resolution Divider      Divider for Position Resolution      RW      1      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On Off      RW      0              25      1      LED      Status LED On Off      RW      0              26      1      D Gain      Derivative Gain      RW      0              27      1      I Gain      Integral Gain      RW      0              28      1      P Gain      Proportional Gain      RW      32              30      2      Goal Position      Target Position      RW                    32      2      Moving Speed      Moving Speed Moving Velocity       RW                    34      2      Torque Limit      Torque Limit Goal Torque       RW      ADD 14 amp15              36      2      Present Position      Present Position      R                    38      2      Present Speed      Present Speed      R                    40      2      Present Load      Present Load      R                    42      1      Present Voltage      Present Voltage      R                    43      1      Present Temperature      Present Temperature      R                    44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      0              68      2      Current      Consuming Current      RW      0              70      1      Torque Ctrl Mode Enable      Torque Control Mode On Off      RW      0              71      2      Goal Torque      Goal Torque      RW      0              73      1      Goal Acceleration      Goal Acceleration      RW      0      Control Table DescriptionModel Number  0 This address stores model number of the DYNAMIXEL Firmware Version  2 This address stores firmware version of the DYNAMIXEL ID  3 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate  4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate bps       Margin of Error                  1      1M      0 000%              3      500 000      0 000%              4      400 000      0 000%              7      250 000      0 000%              9      200 000      0 000%              16      115200      2 124%              34 Default       57600      0 794%              103      19200      0 160%              207      9600      0 160%      Note Less than 3% of the baud rate error margin will not affect to UART communication For BPS over 250 values             Value      Baud Rate      Margin of Error                  250      2 250 000      0 000%              251      2 500 000      0 000%              252      3 000 000      0 000%      Return Delay Time  5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       CW CCW Angle Limit 6  8 The angle limit allows the motion to be restrained The range and the unit of the value is the same as Goal Position Address 30  31    CW Angle Limit the minimum value of Goal Position Address 30  31   CCW Angle Limit the maximum value of Goal Position Address 30  31 The following three modes can be set pursuant to the value of CW and CCW             Operation Type      CW   CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0              Multiturn Mode      both are 4095      The wheel mode can be used to wheeltype operation robots since motors of the robots spin infinitely  The joint mode can be used to multijoints robot since the robots can be controlled with specific angles  Multiturn mode allows joint mode control over multiple rotations  Position range  28 672   28 672 Drive Mode  10             Bit      Item      Description                  Bit 2   7      N A                    Bit 1      Master Slave Mode      0 Master Mode1  Slave Mode              Bit 0      Normal Reverse Mode      0 Normal Mode1 Reverse mode            Master ModeIn case of being used as dual joints  it is set to designate as master         Slave ModeIn case of being used as dual joints  it is set to designate as slave         General ModeSets the direction of rotation to set direction Reads normal data values from position         Reverse ModeSets the direction of rotation  opposite to set direction Reads inverse data values from position     Note Reverse mode is to reverse the rotational direction  It can be used conveniently when a symmetrical joint is required   Dual jointoffsetDual joints are used as 1 joint by controlling 2 motors simultaneously To use the dual joints  1 unit of motor set in master mode and 1 unit of motor set in slave mode are needed Next  the motors must be connected to each other using synchronization cable   Normal mode synch cable Drives Master and PWM signals synchronized   Reverse mode synch cable Drives PWM signals in reverse Note Slave is synchronized by directly receiving the control command through synchronization cable from Master   Slave Mode unit responds to communication through command packets  but data related to motor drive are processed only through the synchronization Note In a dual masterslave configuration position information from the slave is ignored and the position of the dual configuration is based on the master in PWM control  When master and slave are not physically connected there could be a slight difference on the driven load  Use the frame shown in the below image to achieve dual configuration Temperature Limit  11             Unit      Value Range                  About 1°C      0   100      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit  12  13 It is the operation range of voltage             Unit      Value Range      Description                  About 0 1V      50   160      5 0   16 0V      For example  if the value is 80  the voltage is 8V If Present Voltage 42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 Max Torque  14 It is the torque value of maximum output  0 to 1 023  0x3FF  can be used  and the unit is about 0 1% For example  Data 1 023  0x3FF  means that Dynamixel will use 100% of the maximum torque it can produce while Data 512  0x200  means that Dynamixel will use 50% of the maximum torque  When the power is turned on  Torque Limit  Address 34 and 35  uses the value as the initial value Status Return Level  16 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Alarm LED 17   Shutdown 18 Dynamixel can protect itself by detecting errors occur during the operation The errors can be set are as the table below             Bit      Item      Description                  Bit 7      0                    Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’  That is  if 0x05  binary 00000101  is set  both Input Voltage Error and Overheating Error can be detected If errors occur  in case of Alarm LED  the LED blinks in case of Alarm Shutdown  the motor output becomes 0 % by resetting the value of Torque Limit 34  to 0 Multi Turn Offset  20 Adjusts offset position  This offset value is added to the Present Position 36  Initial value is 0 and the range is from 24 576 to 24 576 Dynamixel with a Present position of 2 048 with an offset of 1 024 will return an adjusted Present position of 3 072 Note This offset feature is only available in multiturn mode Resolution Divider  22 It allows the user to change Dynamixel’s resolution The default Resolution Divider Value is set as 1   1   4 available When resolution is lowered  revolutions  in both directions  can be increased  up to 28 turns in each direction  Present Position   Real Position   Resolution DividerFor example  a Real Position of 2048 with a Resolution Divider set as 2 will yield a Present Position value of 1024  2048 2   1024   A Dynamixel with Resolution Divider set as 2 will have a resolution 2048 for a single revolution The Present Position can be obtained while Multiturn Offset and Resolution Divider are taken into account Present position    Real Position   Resolution Divider    Multiturn OffsetFor example  a Dynamixel with a Real Position of 2048 with a Resolution Divider set as 4 and Multiturn Offset as 1024 will yield a Present Position of 1535   2048 4    1024   1535  Note This feature is only applied in multiturn mode and will be ignored in other modes Torque Enable  24             Value      Description                  0      Turn off the torque Free run state               1      Turn on the torque and lock EEPROM area      LED  25 Turn on or turn off the LED on Dynamixel             Bit      Description                  0 Default       Turn OFF the LED              1      Turn ON the LED      PID Gains  26  27  28 MX series will use the PID controller as a main control method P gain  value of proportional band I gain  value of integral action D Gain  value of derivative action Gains values are in between 0 254 Kp   P Gain   8Ki   I Gain   1 000   2 048Kd   D Gain   4   1 000The relationship between Compliance Slop and PID            Slope      P Gain                  8      128              16      64              32      32              64      16              128      8      The less the P gain  The larger the back lash  and the weaker the amount of output near goal position At some extent  it is like a combined concept of margine and slope It does not exactly match the previous concept of compliance  So it is obvious if you see the difference in terms of motion Explanation for PID required For the brief explanation about general PID  please refer to the website link  below http  en wikipedia org wiki PID_controllerFYI  PID control theory is not only limited to the control of motor actuator  but is a generic theory that can be applied to all kinds of control Goal Position  30 It is a position value of destination 0 to 4 095  0xFFF  is available   The unit is 0 088° If Goal Position is out of the range  Angle Limit Error Bit  Bit1  of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED Shutdown The picture above is the front view of DynamixelIn multiturn mode Dynamixel has a range from 28 672 to 28 672  can turn up to 7 revolutions in either CW or CCW direction  When resolution divider is set to a different value revolutions can increase Note If it is set to Wheel Mode  Goal Position value is not used Moving Speed  32       Join Mode  MultiTurn modeIt is a moving speed to Goal Position 0   1 023  0x3FF  can be used  and the unit is about 0 114rpm If it is set to 0  it means the maximum rpm of the motor is used without controlling the speed If it is 1023  it is about 116 62rpm For example  if it is set to 300  it is about 34 2 rpm However  the rpm will not exceed the No Load Speed         Wheel ModeIt is a moving speed to Goal direction 0   2 047  0x7FF  can be used  and the unit is about 0 114rpm If a value in the range of 0   1 023 is used  it is stopped by setting to 0 while rotating to CCW direction If a value in the range of 1 024   2 047 is used  it is stopped by setting to 1024 while rotating to CW direction That is  the 10th bit becomes the direction bit to control the direction     Note Please check the maximum rpm of the Dynamixel  The motor cannot exceed the maximum rpm with the higher Moving Speed value   Torque Limit  34 It is the value of the maximum torque limit 0   1 023 0x3FF  is available  and the unit is about 0 1% For example  if the value is 512  it is about 50% that means only 50% of the maximum torque will be used If the power is turned on  the value of Max Torque  Address 14  15  is used as the initial value Note If the function of Alarm Shutdown is triggered  the motor loses its torque because the value becomes 0  Once error conditions are resolved and this value is changed to the value other than 0  the motor can be operated again Present Position  36 It is the current position value of Dynamixel The range of the value is 0 4095  0xFFF   and the unit is 0 088 degree The picture above is the front view of Dynamixel In multiturn mode  the range is from 28672 to 28672 with unit values dependent on Resolution Divider  0 088   Resolution Divider Note In multiturn mode  Present position depends on resolution divider and multiturn offset For more information turn to the section on Multi Turn offset and Resolution Divider Present Speed  38 Is the current moving speed 0   2 047  0x000   0x7FF  can be used If a value is in the rage of 0   1 023 then the motor rotates to the CCW direction If a value is in the rage of 1 024   2 047 then the motor rotates to the CW direction The 10th bit becomes the direction bit to control the direction 0 and 1 024 are equal The value unit is about 0 11rpm For example  if it is set to 300 then the motor is moving to the CCW direction at a rate of about 34 33rpm Present Load  40 It means currently applied load The range of the value is 0 2047  and the unit is about 0 1% If the value is 0 1 023  it means the load works to the CCW direction If the value is 1 024 2 047  it means the load works to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 1 024 is equal to 0 For example  the value is 512  it means the load is detected in the direction of CCW about 50% of the maximum torque             Bit      15   11      10      9   0                  Value      0      Load Direction      Data  Load Ratio       Note CCW Load  Load Direction   0  CW Load  Load Direction   1Note Present load is an inferred value based on the internal output value not a measured value using torque sensor  etc  Therefore  it may be inaccurate for measuring weight or torque  It is recommended to use it for predicting the direction and size of the force being applied to the joint Present Voltage  42 It is the size of the present voltage supplied This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 If Present Voltage 42  value is out of range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18 Present Temperature  43 It is the internal temperature of Dynamixel in Celsius Data value is identical to the actual temperature in Celsius  For example  if the data value is 85  0x55   the current internal temperature is 85°C Registered Instruction  44             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Moving  46             Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock  47             Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 Punch  48 Minimum current to drive motor  This value ranges from 0x20 to 0x3FF Current  68 At an idle state without current flow  this value is 2 048 0x800  When positive current flows  this value becomes larger than 2 048 0x800  while negative current flow returns a value smaller than 2 048 0x800  The following is current flow calculation formula I     4 5mA      CURRENT – 2048   in amps unit  A  For example  68 gives a value of 2148  which corresponds to 450mA of current flow Torque Control Mode Enable  70             Value      Meaning                  0      Turn off the torque mode  Executes Joint mode or Wheel mode              1      Turn on the torque mode  Cannot control the position or moving speed but only Torque      When Torque Control Mode Enable is 1  DYNAMIXEL behaves like the followings  DYNAMIXEL does not control position or velocity   DYNAMIXEL is controlled by the Goal Torque value   DYNAMIXEL does not affected by the Goal position and Goal speed values   Since position moving speed is not controlled  DYNAMIXEL behaves as if it is in the wheel mode Goal Torque  71 You can use 0   2 047  0x7FF  and the unit is 4 5mA  Torque is directly proportional to the current value  If you use a value between 0   1 023  torque is applied to the CCW direction  and setting it to 0 will stops If you use a value between 1 024   2 047  torque is applied to the CW direction  and setting it to 1 024 will stops That means  10th bit becomes the CW CCW direction bit  which controls rotational direction Goal Torque cannot be bigger than Torque Limit 34 35  Goal Acceleration  73 This is Goal Acceleration value It can be used from 0 254 0XFE  and the unit is approximately 8 583°   sec2 When it is set to 0  there is no control over acceleration and moves with the maximum acceleration of the motor When the goal speead is set to 0  there is no control over acceleration and moves with the maximum acceleration of the motor When it is set to 254  it becomes 2 180°   sec2 For example  the current speed of Dynamixel is 0  and Goal acceleration is 10 The speed of Dynamixel after 1 second will be 14 3 RPM How to AssembleOptional Frames      FR05F101 and FR08X101        FR05S101        FR08B101        FR08H101        FR08H110 and FR08D101  Horns      HN05N102        HN05I101  Combination StructuresMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideVideosQuick StartDrawingsDownload MX106T",
      "url": "http://0.0.0.0:4000/docs/en/dxl/mx/mx-106/"
      } ,
  
  
      "docs-en-dxl-mx-mx-12w":  {
      "title": "MX-12W",
      "content"	 : "MX12WSpecifications            Item      Specifications                  Baud Rate      8000 bps   4 5 Mbps              Resolution      0 088°              Running Degree      0°   360°Endless Turn              Weight      54 6g              Dimensions  W x H x D       32mm x 50mm x 40mm              Gear Ratio      32  1              No Load Speed      470rpm  at 12V               Operating Temperature      5°C    80°C              Input Voltage      10   14 8V  Recommended  12V               Standby Current      60mA              Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      TTL Level Multidrop Bus Daisy Chain Type Connector               ID      0   253              Feedback      Position  Temperature  Load  Input Voltage  etc              Material      Engineering Plastic      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 1 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on  Volatile   On the other hand  modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off  NonVolatile   Data in the EEPROM Area can only be changed or modified when the value of Torque Enable 24  is ‘0’ and Dynamixel is in idle state SizeThe Size of data is 1 or 2 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  2 bytes data will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      104              2      1      Firmware Version      Firmware Version      R                    3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      1              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      CounterClockwise Angle Limit      RW      4095              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      160              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36              20      2      Multi Turn Offset      Adjust Position with Offset      RW      0              22      1      Resolution Divider      Divider for Position Resolution      RW      1      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On Off      RW      0              25      1      LED      Status LED On Off      RW      0              26      1      D Gain      Derivative Gain      RW      8              27      1      I Gain      Integral Gain      RW      0              28      1      P Gain      Proportional Gain      RW      8              30      2      Goal Position      Target Position      RW                    32      2      Moving Speed      Moving Speed Moving Velocity       RW                    34      2      Torque Limit      Torque Limit Goal Torque       RW      ADD 14 amp15              36      2      Present Position      Present Position      R                    38      2      Present Speed      Present Speed      R                    40      2      Present Load      Present Load      R                    42      1      Present Voltage      Present Voltage      R                    43      1      Present Temperature      Present Temperature      R                    44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32              73      1      Goal Acceleration      Goal Acceleration      RW      0      Control Table DescriptionModel Number  0 This address stores model number of the DYNAMIXEL Firmware Version  2 This address stores firmware version of the DYNAMIXEL ID  3 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate  4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate bps       Margin of Error                  1      1M      0 000%              3      500 000      0 000%              4      400 000      0 000%              7      250 000      0 000%              9      200 000      0 000%              16      115200      2 124%              34 Default       57600      0 794%              103      19200      0 160%              207      9600      0 160%      Note Less than 3% of the baud rate error margin will not affect to UART communication For BPS over 250 values             Value      Baud Rate      Margin of Error                  250      2 250 000      0 000%              251      2 500 000      0 000%              252      3 000 000      0 000%      Return Delay Time  5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       CW CCW Angle Limit 6  8 The angle limit allows the motion to be restrained The range and the unit of the value is the same as Goal Position Address 30  31    CW Angle Limit the minimum value of Goal Position Address 30  31   CCW Angle Limit the maximum value of Goal Position Address 30  31 The following three modes can be set pursuant to the value of CW and CCW             Operation Type      CW   CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0              Multiturn Mode      both are 4095      The wheel mode can be used to wheeltype operation robots since motors of the robots spin infinitely  The joint mode can be used to multijoints robot since the robots can be controlled with specific angles  Multiturn mode allows joint mode control over multiple rotations  Position range  28 672   28 672 Temperature Limit  11             Unit      Value Range                  About 1°C      0   100      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit  12  13 It is the operation range of voltage             Unit      Value Range      Description                  About 0 1V      50   160      5 0   16 0V      For example  if the value is 80  the voltage is 8V If Present Voltage 42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 Max Torque  14 It is the torque value of maximum output  0 to 1 023  0x3FF  can be used  and the unit is about 0 1% For example  Data 1 023  0x3FF  means that Dynamixel will use 100% of the maximum torque it can produce while Data 512  0x200  means that Dynamixel will use 50% of the maximum torque  When the power is turned on  Torque Limit  Address 34 and 35  uses the value as the initial value Status Return Level  16 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Alarm LED 17   Shutdown 18 Dynamixel can protect itself by detecting errors occur during the operation The errors can be set are as the table below             Bit      Item      Description                  Bit 7      0                    Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’  That is  if 0x05  binary 00000101  is set  both Input Voltage Error and Overheating Error can be detected If errors occur  in case of Alarm LED  the LED blinks in case of Alarm Shutdown  the motor output becomes 0 % by resetting the value of Torque Limit 34  to 0 Multi Turn Offset  20 Adjusts offset position  This offset value is added to the Present Position 36  Initial value is 0 and the range is from 24 576 to 24 576 Dynamixel with a Present position of 2 048 with an offset of 1 024 will return an adjusted Present position of 3 072 Note This offset feature is only available in multiturn mode Resolution Divider  22 It allows the user to change Dynamixel’s resolution The default Resolution Divider Value is set as 1   1   4 available When resolution is lowered  revolutions  in both directions  can be increased  up to 28 turns in each direction  Present Position   Real Position   Resolution DividerFor example  a Real Position of 2048 with a Resolution Divider set as 2 will yield a Present Position value of 1024  2048 2   1024   A Dynamixel with Resolution Divider set as 2 will have a resolution 2048 for a single revolution The Present Position can be obtained while Multiturn Offset and Resolution Divider are taken into account Present position    Real Position   Resolution Divider    Multiturn OffsetFor example  a Dynamixel with a Real Position of 2048 with a Resolution Divider set as 4 and Multiturn Offset as 1024 will yield a Present Position of 1535   2048 4    1024   1535  Note This feature is only applied in multiturn mode and will be ignored in other modes Torque Enable  24             Value      Description                  0      Turn off the torque Free run state               1      Turn on the torque and lock EEPROM area      LED  25 Turn on or turn off the LED on Dynamixel             Bit      Description                  0 Default       Turn OFF the LED              1      Turn ON the LED      PID Gains  26  27  28 MX series will use the PID controller as a main control method P gain  value of proportional band I gain  value of integral action D Gain  value of derivative action Gains values are in between 0 254 Kp   P Gain   8Ki   I Gain   1 000   2 048Kd   D Gain   4   1 000The relationship between Compliance Slop and PID            Slope      P Gain                  8      128              16      64              32      32              64      16              128      8      The less the P gain  The larger the back lash  and the weaker the amount of output near goal position At some extent  it is like a combined concept of margine and slope It does not exactly match the previous concept of compliance  So it is obvious if you see the difference in terms of motion Explanation for PID required For the brief explanation about general PID  please refer to the website link  below http  en wikipedia org wiki PID_controllerFYI  PID control theory is not only limited to the control of motor actuator  but is a generic theory that can be applied to all kinds of control Goal Position  30 It is a position value of destination 0 to 4 095  0xFFF  is available   The unit is 0 088° If Goal Position is out of the range  Angle Limit Error Bit  Bit1  of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED Shutdown The picture above is the front view of DynamixelIn multiturn mode Dynamixel has a range from 28 672 to 28 672  can turn up to 7 revolutions in either CW or CCW direction  When resolution divider is set to a different value revolutions can increase Note If it is set to Wheel Mode  Goal Position value is not used Moving Speed  32       Join Mode  MultiTurn modeIt is a moving speed to Goal Position 0 1023  0X3FF  can be used  and the unit is about 0 916rpm If it is set to 0  it means the maximum rpm of the motor is used without controlling the speed If it is 1023  it is about 937 1rpm For example  if it is set to 300  it is about 274 8 rpm However  the rpm will not exceed the No Load Speed         Wheel ModeIt is a moving speed to Goal direction 0 2047  0X7FF  can be used  and the unit is about 0 916rpm If a value in the range of 0 1023 is used  it is stopped by setting to 0 while rotating to CCW direction If a value in the range of 1024 2047 is used  it is stopped by setting to 1024 while rotating to CW direction That is  the 10th bit becomes the direction bit to control the direction     Note Wheel mode allows to check max rpm  Any values higher than max rpm will not take effect   Torque Limit  34 It is the value of the maximum torque limit 0   1 023 0x3FF  is available  and the unit is about 0 1% For example  if the value is 512  it is about 50% that means only 50% of the maximum torque will be used If the power is turned on  the value of Max Torque  Address 14  15  is used as the initial value Note If the function of Alarm Shutdown is triggered  the motor loses its torque because the value becomes 0  Once error conditions are resolved and this value is changed to the value other than 0  the motor can be operated again Present Position  36 It is the current position value of Dynamixel The range of the value is 0 4095  0xFFF   and the unit is 0 088 degree The picture above is the front view of Dynamixel In multiturn mode  the range is from 28672 to 28672 with unit values dependent on Resolution Divider  0 088   Resolution Divider Note In multiturn mode  Present position depends on resolution divider and multiturn offset For more information turn to the section on Multi Turn offset and Resolution Divider Present Speed  38 Is the current moving speed 0 2047  0x000   0x7FF  can be used If a value is in the rage of 0 1023 then the motor rotates to the CCW direction If a value is in the rage of 1024 2047 then the motor rotates to the CW direction The 10th bit becomes the direction bit to control the direction 0 and 1024 are equal The value unit is about 0 916rpm For example  if it is set to 300 then the motor is moving to the CCW direction at a rate of about 274 8rpm Present Load  40 It means currently applied load The range of the value is 0 2047  and the unit is about 0 1% If the value is 0 1 023  it means the load works to the CCW direction If the value is 1 024 2 047  it means the load works to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 1 024 is equal to 0 For example  the value is 512  it means the load is detected in the direction of CCW about 50% of the maximum torque             Bit      15   11      10      9   0                  Value      0      Load Direction      Data  Load Ratio       Note CCW Load  Load Direction   0  CW Load  Load Direction   1Note Present load is an inferred value based on the internal output value not a measured value using torque sensor  etc  Therefore  it may be inaccurate for measuring weight or torque  It is recommended to use it for predicting the direction and size of the force being applied to the joint Present Voltage  42 It is the size of the present voltage supplied This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 If Present Voltage 42  value is out of range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18 Present Temperature  43 It is the internal temperature of Dynamixel in Celsius Data value is identical to the actual temperature in Celsius  For example  if the data value is 85  0x55   the current internal temperature is 85°C Registered Instruction  44             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Moving  46             Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock  47             Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 Punch  48 Minimum current to drive motor  This value ranges from 0x20 to 0x3FF Goal Acceleration  73 This is Goal Acceleration value It can be used from 0 254 0XFE  and the unit is approximately 8 583°   sec2 When it is set to 0  there is no control over acceleration and moves with the maximum acceleration of the motor When the goal speead is set to 0  there is no control over acceleration and moves with the maximum acceleration of the motor When it is set to 254  it becomes 2 180°   sec2 For example  the current speed of Dynamixel is 0  and Goal acceleration is 10 The speed of Dynamixel after 1 second will be 14 3 RPM How to AssembleMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideVideosQuick StartDrawings",
      "url": "http://0.0.0.0:4000/docs/en/dxl/mx/mx-12w/"
      } ,
  
  
      "docs-en-dxl-mx-mx-28-2":  {
      "title": "MX-28(2.0)",
      "content"	 : "MX28 Protocol 2 0 Specifications            Item      Specifications                  MCU      ST CORTEXM3   STM32F103C8 @ 72MHZ 32BIT               Position Sensor      Contactless absolute encoder  12BIT 360 DEGREE Maker  ams  www ams com   Part No  AS5045              Motor      Maxon              Baud Rate      8000 bps   4 5 Mbps              Control Algorithm      PID Control              Resolution      0 088°              Operation Modes      Velocity Control ModePosition Control Mode 0°   360° Extended Position Ctrl Mode Multiturn PWM Control Mode              Weight      MX28AR AT  77g  MX28R T  72g              Dimensions  W x H x D       35 6mm x 50 6mm x 35 5mm              Gear Ratio      193  1              Stall Torque      2 3Nm @ 11 1V  1 3A2 5Nm @ 12V  1 4A3 1Nm @ 14 8V  1 7A              No Load Speed      50rpm @ 11 1V55rpm @ 12V67rpm @ 14 8V              Operating Temperature      5°C    80°C              Input Voltage      10   14 8V  Recommended  12V               Standby Current      100mA              Command Signal      Digital Packet              Protocol Type      MX28T MX28AT Half Duplex Asynchronous Serial CommunicationMX28R MX28AR RS485 Asynchronous Serial Communication 8bit 1stop  No Parity               Physical Connection      MX28T MX28AT TTL Level Multidrop BUSMX28R MX28AR RS485 Multidrop BUS              ID      0   252              Feedback      Position  Velocity  Temperature  Load  Input Voltage  Trajectory  Realtime Tick  etc              Material      Full Metal GearMX28AR AT Metal Front   Engineering Plastic Middle  Back MX28R T Engineering Plastic Front  Middle  Back       Performance GraphStall torque Peak stall torque read from transient statePerformance Graph NT Curve  A graph shows torque measured in stable condition while increasing load  Normally  stall torque is bigger than maximum torque on performance graph Caution When connecting to power supply  For the stable power supply  we recommend using ROBOTIS controller or SMPS2Dynamixel   Connect your DYNAMIXEL to power supply while it’s off and turn on off with the power switch Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 2 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the power is reset Volatile   On the other hand  data in the EEPROM Area is maintained even when the DYNAMIXEL is powered off NonVolatile   Data in the EEPROM Area can only be written to if Torque Enable 64  is cleared to ‘0’ Off  SizeThe Size of data varies from 1 to 4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  For data larger than 2 bytes will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      30              2      4      Model Information      Model Information      R                    6      1      Firmware Version      Firmware Version      R                    7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Baud Rate      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              10      1      Drive Mode      Drive Mode      RW      0              11      1      Operating Mode      Operating Mode      RW      3              12      1      Secondary Shadow  ID      Secondary ID      RW      255              13      1      Protocol Version      Protocol Version      RW      2              20      4      Homing Offset      Home Position Offset      RW      0              24      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      10              31      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              32      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      160              34      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      95              36      2      PWM Limit      Maximum PWM Limit      RW      885              40      4      Acceleration Limit      Maximum Acceleration Limit      RW      32767              44      4      Velocity Limit      Maximum Velocity Limit      RW      380              48      4      Max Position Limit      Maximum Position Limit      RW      4095              52      4      Min Position Limit      Minimum Position Limit      RW      0              63      1      Shutdown      Shutdown Error Information      RW      52      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  64      1      Torque Enable      Motor Torque On Off      RW      0              65      1      LED      Status LED On Off      RW      0              68      1      Status Return Level      Select Types of Status Return      RW      2              69      1      Registered Instruction      REG_WRITE Instruction Flag      R      0              70      1      Hardware Error Status      Hardware Error Status      R      0              76      2      Velocity I Gain      I Gain of Velocity      RW      1920              78      2      Velocity P Gain      P Gain of Velocity      RW      100              80      2      Position D Gain      D Gain of Position      RW      0              82      2      Position I Gain      I Gain of Position      RW      0              84      2      Position P Gain      P Gain of Position      RW      850              88      2      Feedforward 2nd Gain      2nd Gain of FeedForward      RW      0              90      2      Feedforward 1st Gain      1st Gain of FeedForward      RW      0              98      1      BUS Watchdog      Dynamixel BUS Watchdog      RW      0              100      2      Goal PWM      Target PWM Value      RW                    104      4      Goal Velocity      Target Velocity Value      RW                    108      4      Profile Acceleration      Acceleration Value of Profile      RW      0              112      4      Profile Velocity      Velocity Value of Profile      RW      0              116      4      Goal Position      Target Position      RW                    120      2      Realtime Tick      Count Time in Millisecond      R                    122      1      Moving      Movement Flag      R      0              123      1      Moving Status      Detailed Information of Movement Status      R      0              124      2      Present PWM      Present PWM Value      R                    126      2      Present Load      Present Load Value      R                    128      4      Present Velocity      Present Velocity Value      R                    132      4      Present Position      Present Position Value      R                    136      4      Velocity Trajectory      Target Velocity Trajectory from Profile      R                    140      4      Position Trajectory      Target Position Trajectory from Profile      R                    144      2      Present Input Voltage      Present Input Voltage      R                    146      1       Present Temperature       Present Internal Temperature      R                    168      2      Indirect Address 1      Indirect Address 1      RW      224              170      2      Indirect Address 2      Indirect Address 2      RW      225              172      2      Indirect Address 3      Indirect Address 3      RW      226              …      …      …      …      …      …              218      2      Indirect Address 26      Indirect Address 26      RW      249              220      2      Indirect Address 27      Indirect Address 27      RW      250              222      2      Indirect Address 28      Indirect Address 28      RW      251              224      1      Indirect Data 1      Indirect Data 1      RW      0              225      1      Indirect Data 2      Indirect Data 2      RW      0              226      1      Indirect Data 3      Indirect Data 3      RW      0              …      …      …      …      …      …              249      1      Indirect Data 26      Indirect Data 26      RW      0              250      1      Indirect Data 27      Indirect Data 27      RW      0              251      1      Indirect Data 28      Indirect Data 28      RW      0              578      2      Indirect Address 29      Indirect Address 29      RW      634              580      2      Indirect Address 30      Indirect Address 30      RW      635              582      2      Indirect Address 31      Indirect Address 31      RW      636              …      …      …      …      …      …              628      2      Indirect Address 54      Indirect Address 54      RW      659              630      2      Indirect Address 55      Indirect Address 55      RW      660              632      2      Indirect Address 56      Indirect Address 56      RW      661              634      1      Indirect Data 29      Indirect Data 29      RW      0              635      1      Indirect Data 30      Indirect Data 30      RW      0              636      1      Indirect Data 31      Indirect Data 31      RW      0              …      …      …      …      …      …              659      1      Indirect Data 54      Indirect Data 54      RW      0              660      1      Indirect Data 55      Indirect Data 55      RW      0              661      1      Indirect Data 56      Indirect Data 56      RW      0      Caution Protocol 1 0 does not support addresses greater than 256  Therefore  Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0 Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable 64  is cleared to ‘0’ Model Number 0 This address stores model number of the DYNAMIXEL Firmware Version 6 This address stores firmware version of the DYNAMIXEL ID 7 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate 4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate      Margin of Error                  7      4 5M      0 000%              6      4M      0 000%              5      3M      0 000%              4      2M      0 000%              3      1M      0 000%              2      115 200      0 000%              1 Default       57 600      0 000%              0      9 600      0 000%      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time 5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       Drive Mode 10 Drive Mode is availabe from the firmware version 38             Bit      Item      Description                  Bit 1 0x02    7 0x80       N A      Unused  always ‘0’              Bit 0 0x01       Direction of Rotation      Normal Mode 0  CCW Positive   CW Negative Reverse Mode 1  CCW Negative   CW Positive       Operating Mode 11             Value      Operating Mode      Description                  1      Velocity Control Mode 0°   360°       This mode controls velocity and ideal for wheel operation This mode is identical to the Wheel Mode endless  from existing Dynamixels               3 Default       Position Control Mode      This mode controls position and identical to the Joint Mode Operating position range is limited by Max Position Limit 48  and Min Position Limit 52  This mode is ideal for articulated robots that each joint rotates less than 360°               4      Extended Position Control Mode Multiturn       This mode controls position and identical to Multiturn Mode 512 turns are supported 256 rev    256 rev   and ideal for multiturn wrists or conveyer systems or a system that requires an additional reduction gear               16      PWM Control Mode Voltage Control Mode       This mode directly controls PWM output  Voltage Control Mode         Note Switching Operating Mode will reset gains PID  Feedfoward  properly to the selected Operating Mode  The profile generator and limits will also be reset   Profile Velocity 112   Profile Acceleration 108   Reset to ‘0’  Goal PWM 100   Reset to PWM Limit 36   Note PWM is the abbreviation for Pulse Width Modulation that modulates PWM Duty to control motors  The PWM Control Mode changes pulse width to control average supply voltage to the motor and this technique is widely used in the motor control field Therefore  PWM Control Mode uses Goal PWM 100  value to control supply voltage for Dynamixel  PWM Control Mode is similar to the Wheel Mode of Dynamixel AX and RX series Secondary Shadow  ID 12 Set the Dynamixel’s Secondary ID  Secondary ID 12  is a value to identify each Dynamixel  just like the ID 7  However  unlike ID 7   Secondary ID 12  is not a unique value Therefore  Dynamixels with the same Secondary ID value form a group The differences between Secondary ID 12  and ID 7  are as follows   Secondary ID 12  is not a unique value  i e   a lot of Dynamixels may have the same Secondary ID value   ID 7  has a higher priority than Secondary ID 12   i e   if Secondary ID 12  and ID 7  are the same  ID 7  will be applied first   The EEPROM area of the Control Table cannot be modified with Secondary ID 12   Only the RAM area can be modified   If Instruction Packet ID is the same as Secondary ID 12   the Status Packet will not be returned   If the value of Secondary ID 12  is 253 or higher  the Secondary ID function is deactivated             Values      Description                  0   252      Activate Secondary ID function              253   255      Deactivate Secondary ID function  Default value ‘255’      The following are examples of operation when there are five Dynamixels with ID  7  set from 1 to 5   Set all five Dynamixels’ Secondary ID 12  to ‘5’   Send Write Instruction Packet ID   1  LED 65    1    Turn on LED of Dynamixel with ID ‘1’ and return the Status Packet   Send Write Instruction Packet ID   5  LED 65    1    Turn on LED on five Dynamixels  However  Status Packet of Dynamixel with ID ‘5’ will be returned   Set the Secondary ID 12  of all five Dynamixels to ‘100’   Send Write Instruction Packet ID   100  LED 65    0    Turn off LED on five Dynamixels  However  as there is no Dynamixel with ID ‘100’  Status Packet is not returned Protocol Version 13 Users can select Dynamixel protocol version  1 0 and 2 0  It is recommended to use an identical protocol version for multiple Dynamixels             Value      Protocol Version      Compatible Dynamixels                  1      1 0      AX Series  DX Series  RX Series  EX Series  MX Series with Firmware below v39              2 default       2 0      MX28 64 106 with Firmware v39 or above  X Series  Pro Series      Note The protocol 2 0 is greatly enhanced from the protocol 1 0  Accessing some of the Control Table area might be denied if protocol 1 0 is selected  This manual complies with protocol 2 0  Please refer to the Protocol section of eManual for more details about the protocol Homing Offset 20 Users can adjust the Home position by setting Home Offset 20   The Homing Offset value is added to the Present Position 132  Present Position 132    Actual Position   Homing Offset 20              Unit      Value Range      Description                  about 0 088°      1 044 479   1 044 479 255   255 rev        4 096 resolution      Note In case of the Position Control Mode Joint Mode  that rotates less than 360 degrees  any invalid Homing Offset 20  values will be ignored valid range  1 024   1 024  Moving Threshold 24 This value helps to determine whether the Dynamixel is in motion or not When the absolute value of Present Velocity 128  is greater than the Moving Threshold 24   Moving 122  is set to ‘1’  otherwise it is cleared to ‘0’                    Values      Description                  Unit      about 0 229 rpm      All velocity related Data uses the same unit              Range      0   1 023            Maximum Temperature Limit 31 This value limits operating temperature  When the Present Temperature 146  that indicates internal temperature of Dynamixel is greater than the Temperature Limit 31   the Over Heating Error Bit 0x04  and Hardware Error Bit 0x80  in the Hardware Error Status 70  will be set  If Overheating Error Bit 0x04  is configured in the Shutdown 63   Torque Enable 64  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 63  section             Unit      Value Range      Description                  About 1°      0   100      0   100°      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit 32  34 It is the operation range of voltage             Unit      Value Range      Description                  About 0 1V      50   160      5 0   16 0V      For example  if the value is 80  the voltage is 8V If Present Voltage 42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 PWM Limit 36 This value indicates maximum PWM output  Goal PWM 100  can’t be configured with any values exceeding PWM Limit 36   PWM Limit 36  is commonly used in all operating mode as an output limit  therefore decreasing PWM output will result in decreasing torque and velocity  For more details  please refer to the Gain section of each operating modes             Values      Description                  0 0%    885 100%       885   100 %  output      Acceleration Limit 40 This value indicates maximum Profile Acceleration 108   Profile Acceleration 108  can’t be configured with any values exceeding Acceleration Limit 40   Profile Acceleration 108  is used in all operating mode except PWM Control Mode in order to generate a target trajectory  For more details  please refer to the Profile Velocity 112              Unit      Value Range                  214 577 Rev min2      0   32 767      Note Bit information of the Error field in the Status Packet is different from protocol 1 0 and protocol 2 0  This manual complies with protocol 2 0  Please refer to the Protocol section of eManual for more details about the protocol Velocity Limit 44 This value indicates maximum velocity of Goal Velocity 104  and Profile Velocity 112   For more details  please refer to the Profile Velocity 112              Unit      Value Range                  0 229rpm      0   1 023      Min Max Position Limit 48  52 These values limit maximum and minimum target positions for Position Control Mode Joint Mode  within the range of 1 rotation 0   4 095   Therefore  Goal Position 116  should be configured within the position limit range  These values are not used in Extended Position Control Mode and Currentbased Position Control Mode             Unit      Value Range                  0 088°      0   4 095 1 rotation       Note Max Position Limit 48  and Min Position Limit 52  are only used in Position Control Mode with a single turn Shutdown 63 The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation Each Bit is inclusively processed with the ‘OR’ logic  therefore  multiple options can be generated For instance  when ‘0x05’  binary  00000101  is defined as Shutdown 63   Dynamixel can detect both Input Voltage Error binary  00000001  and Overheating Error binary  00000100  If those errors are detected  Torque Enable 64  is cleared to ‘0’ and the motor output becomes 0 %  REBOOT is the only method to reset Torque Enable 64  to ‘1’ Torque ON  after the shutdown The followings are detectable situations             Bit      Item      Description                  Bit 7            Unused  Always ‘0’              Bit 6            Unused  Always ‘0’              Bit 5      Overload Error default       Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error default       Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error default       Detect internal temperature exceeds the configured operating temperature              Bit 1            Unused  Always ‘0’              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs  use below method to reboot Dynamixels   H W REBOOT  Turn off the power and turn on again  S W REBOOT  Transmit REBOOT Instruction  For more details  please refer to the  Reboot  section of Protocol eManual  If Shutdown occurs  LED will flicker every second  Firmware v41 or above Torque Enable 64 Controls Torque ON OFF  Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected             Value      Description                  0 Default       Torque OFF Freerun  and the motor does not generate torque              1      Torque ON and all Data in the EEPROM area will be locked      Note Present Position 132  can be reset when Operating Mode 11  and Torque Enable 64  are updated  For more details  please refer to the Homing Offset 20  and Present Position 132  LED 65 Turn on or turn off the LED on Dynamixel             Bit      Description                  0 Default       Turn OFF the LED              1      Turn ON the LED      Status Return Level 68 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Registered Instruction 69             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Hardware Error Status 70 This value indicates hardware error status The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation Each Bit is inclusively processed with the ‘OR’ logic  therefore  multiple options can be generated For instance  when ‘0x05’  binary  00000101  is defined as Shutdown 63   Dynamixel can detect both Input Voltage Error binary  00000001  and Overheating Error binary  00000100  If those errors are detected  Torque Enable 64  is cleared to ‘0’ and the motor output becomes 0 %  REBOOT is the only method to reset Torque Enable 64  to ‘1’ Torque ON  after the shutdown The followings are detectable situations             Bit      Item      Description                  Bit 7            Unused  Always ‘0’              Bit 6            Unused  Always ‘0’              Bit 5      Overload Error default       Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error default       Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error default       Detect internal temperature exceeds the configured operating temperature              Bit 1            Unused  Always ‘0’              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs  use below method to reboot Dynamixels   H W REBOOT  Turn off the power and turn on again  S W REBOOT  Transmit REBOOT Instruction  For more details  please refer to the  Reboot  section of Protocol eManual  If Shutdown occurs  LED will flicker every second  Firmware v41 or above Velocity PI Gain 76  78 These values indicate Gains of Velocity Control Mode  Gains of DYNAMIXEL’s internal controller can be calculated from Gains of the Control Table as shown below  The constant in each equations include sampling time  Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and that of the Control Table is abbreviated to KVP TBL                     Controller Gain      Conversion Equations      Range      Description                  Velocity I Gain 76       KVI      KVI   KVI TBL    65 536      0   16 383      I Gain              Velocity P Gain 78       KVP      KVP   KVP TBL    128      0   16 383      P Gain      Below figure is a block diagram describing the velocity controller in Velocity Control Mode  When the instruction transmitted from the user is received by DYNAMIXEL  it takes following steps until driving the horn   An Instruction from the user is transmitted via DYNAMIXEL bus  then registered to Goal Velocity 104    Goal Velocity 104  is converted to target velocity trajectory by Profile Acceleration 108    The target velocity trajectory is stored at Velocity Trajectory 136    PI controller calculates PWM output for the motor based on the target velocity trajectory   Goal PWM 100  sets a limit on the calculated PWM output and decides the final PWM value   The final PWM value is applied to the motor through an Inverter  and the horn of DYNAMIXEL is driven   Results are stored at Present Position 132   Present Velocity 128   Present PWM 124  and Present Current 126  Note Ka stands for Antiwindup Gain and ‘β’ is a conversion coefficient of position and velocity that cannot be modified by users  For more details about the PID controller  please refer to the PID Controller at wikipedia Position PID Gain 80  82  84   Feedforward 1st 2nd Gains 88  90 These Gains are used in Position Control Mode and Extended Position Control Mode  Gains of Dynamixel’s internal controller can be calculated from Gains of the Control Table as shown below  The constant in each equations include sampling time  Position P Gain of Dynamixel’s internal controller is abbreviated to KPP and that of the Control Table is abbreviated to KPP TBL                     Controller Gain      Conversion Equations      Range      Description                  Position D Gain 80       KPD      KPD   KPD TBL    16      0   16 383      D Gain              Position I Gain 82       KPI      KPI   KPI TBL    65 536      0   16 383      I Gain              Position P Gain 84       KPP      KPP   KPP TBL    128      0   16 383      P Gain              Feedforward 2nd Gain 88       KFF2nd      KFF2nd TBL    4      0   16 383      Feedforward Acceleration Gain              Feedforward 1st Gain 90       KFF1st      KFF1st TBL    4      0   16 383      Feedforward Velocity Gain      Below figure is a block diagram describing the position controller in Position Control Mode and Extended Position Control Mode  When the instruction from the user is received by Dynamixel  it takes following steps until driving the horn   An Instruction from the user is transmitted via Dynamixel bus  then registered to Goal Position 116    Goal Position 116  is converted to target position trajectory and target velocity trajectory by Profile Velocity 112  and Profile Acceleration 108    The target position trajectory and target velocity trajectory is stored at Position Trajectory 140  and Velocity Trajectory 136  respectively   Feedforward and PID controller calculate PWM output for the motor based on target trajectories   Goal PWM 100  sets a limit on the calculated PWM output and decides the final PWM value   The final PWM value is applied to the motor through an Inverter  and the horn of Dynamixel is driven   Results are stored at Present Position 132   Present Velocity 128   Present PWM 124  and Present Current 126  Note In case of PWM Control Mode  both PID controller and Feedforward controller are deactivated while Goal PWM 100  value is directly controlling the motor through an Inverter  In this manner  users can directly control the supplying voltage to the motor Note Ka is an Antiwindup Gain that cannot be modified by users BUS Watchdog 98 Bus Watchdog  98  is available from firmware v38  It is a safety device  Failsafe  that stops the DYNAMIXEL if the communication between the controller and DYNAMIXEL communication  RS485  TTL  is disconnected due to an unspecified error Communication is defined as all the Instruction Packet in the DYNAMIXEL Protocol                    Values      Description                  Unit      20 ms                     Range      0      Deactivate Bus Watchdog Function  Clear Bus Watchdog Error              Range      1   127      Activate Bus Watchdog              Range      1      Bus Watchdog Error Status      The Bus Watchdog function monitors the communication interval  time  between the controller and DYNAMIXEL when Torque Enable  64  is ‘1’ If the measured communication interval  time  is larger than Bus Watchdog  98   the DYNAMIXEL will stop  Bus Watchdog  98  will be changed to ‘1’  Bus Watchdog Error  If the Bus Watchdog Error screen appears  the Goal Value  Goal PWM 100   Goal Current 102   Goal Velocity 104   Goal Position 116   will be changed to readonlyaccess Therefore  when a new value is written to the Goal Value  a Range Error will be returned via the Status packet If the value of Bus Watchdog  98  is changed to ‘0’  Bus Watchdog Error will be cleared Note For details of Range Error  please refer to the protocol of the eManual The following are examples of the operation of the Bus Watchdog function   After setting the operating mode  11  to speed control mode  change the Torque Enable  64  to ‘1’   If ‘50’ is written in the Goal Velocity  104   the DYNAMIXEL will rotate in CCW direction   Change the value of Bus Watchdog  98  to ‘100’  2 000  ms     Activate Bus Watchdog Function   If no instruction packet is received for 2 000  ms   the DYNAMIXEL will stop  When it stops  the Profile Acceleration  108  and Profile Velocity  112  are applied as ‘0’   The value of Bus Watchdog  98  changes to ‘1’  Bus Watchdog Error   At this time  the access to the Goal Value will be changed to readonly   If ‘150’ is written to the Goal Velocity  104   Range Error will be returned via Status Packet   If the value of Bus Watchdog  98  is changed to ‘0’  Bus Watchdog Error will be cleared   If 150 is written in the Goal Velocity  104   the DYNAMIXEL will rotate in CCW direction Goal PWM 100 In case of PWM Control Mode  both PID controller and Feedforward controller are deactivated while Goal PWM 100  value is directly controlling the motor through an Inverter  In other control modes  this value is used to limit PWM value  This value cannot exceed PWM Limit 36   Please refer to the Gain section in order to see how Goal PWM 100  affects to different control modes             Range      Description                  PWM Limit 36    PWM Limit 36       Initial Value of PWM Limit 36   ‘885’      Goal Velocity 104 In case of Velocity Control Mode  Goal Velocity 104  can be used to set a target velocity  This value cannot exceed Velocity Limit 44   For now  Goal Velocity 104  is used for target velocity  but this value is not used to limit the velocity             Unit      Value Range                  0 229 rpm      Velocity Limit 44    Velocity Limit 44       Note The maximum velocity and maximum torque of DYNAMIXEL is affected by supplying voltage  Therefore  if supplying voltage changes  so does the maximum velocity  This manual complies with recommended supply voltage 12 V   Note If Profile Acceleration 108  and Goal Velocity 104  are modified simultaneously  modified Profile Acceleration 108  will be used to process Goal Velocity 104  Profile Acceleration 108 The acceleration of Profile can be set with this value  Profile Acceleration 108  can be used in all control modes except Torque Control Mode  Profile Acceleration 108  cannot exceed Acceleration Limit 40   For more details  please refer to the Profile Velocity 112              Unit      Value Range      Description                  214 577 Rev min2      0   Acceleration Limit 40       ‘0’ stands for an infinite acceleration      Profile Velocity 112 The Maximum velocity of Profile can be set with this value  Profile Velocity 112  can be used in all control modes except Torque Control Mode and Velocity Control Mode  Profile Velocity 112  cannot exceed Velocity Limit 44   Velocity Control Mode only uses Profile Acceleration 108  instead of Profile Velocity 112              Unit      Value Range      Description                  0 229 rpm      0   Velocity Limit 44       ‘0’ stands for an infinite velocity      The Profile is an acceleration deceleration control method to reduce vibration  noise and load of the motor by controlling dramatically changing velocity and acceleration  It is also called Velocity Profile as it controls acceleration and deceleration based on velocity  DYNAMIXEL provides 4 different types of Profile  The following explains 4 Profiles and how to select them  Profiles are usually selected by a combination of Profile Velocity 112  and Profile Acceleration 108   Triangular and Trapezoidal Profiles exceptionally consider total travel distance ΔPos  the distance difference between target position and current position  as an additional factor  For convenience  Profile Velocity 112  is abbreviated to VPRFL and Profile Acceleration 108  is abbreviated to VPRFL  ‘X’ stands for Don’t Care case When given Goal Position 116   Dynamixel’s profile creates target velocity trajectory based on current velocity initial velocity of the Profile   When Dynamixel receives updated target position from a new Goal Position 116  while it is moving toward the previous Goal Position 116   velocity smoothly varies for the new target velocity trajectory  Maintaining velocity continuity while updating target velocity trajectory is called Velocity Override  For a simple calculation  let’s assume that the initial velocity of the Profile is ‘0’  The following explains how Profile processes Goal Position 116  instruction in Position Control mode  Extended Position Control Mode  Currentbased Position Control Mode   An Instruction from the user is transmitted via Dynamixel bus  then registered to Goal Position 116    Acceleration time t1  is calculated from Profile Velocity 112  and Profile Acceleration 108    Types of Profile is decided based on Profile Velocity 112   Profile Acceleration 108  and total travel distance ΔPos  the distance difference between target position and current position    Selected Profile type is stored at Moving Status 123   Refer to the Moving Status 123    Dynamixel is driven by the calculated target trajectory from Profile   Target velocity trajectory and target position trajectory from Profile are stored at Velocity Trajectory 136  and Position Trajectory 140  respectively   VPRFL_TRI of ③ and Travel time t3  to reach Goal Position 116  is calculated as below             Condition      Types of Profile                  VPRFL 112    0      Profile not used Step Instruction                VPRFL 112  ≠ 0   amp  APRF 108    0       Rectangular Profile               VPRFL 112  ≠ 0   amp  APRF 108  ≠ 0   amp  VPRFL_TRI ≤ VPRFL 112        Triangular Profile               VPRFL 112  ≠ 0   amp  APRF 108  ≠ 0   amp  VPRFL_TRI ＞ VPRFL 112        Trapezoidal Profile      Note Dynamixel supports Jerk control in order to minimize dramatic change of acceleration  Therefore  actual travel time by the target trajectory of Profile could be longer than t3 t4 of above figure    Note Velocity Control Mode only uses Profile Acceleration 108   Step and Trapezoidal Profiles are supported  Velocity Override and Jerk control are supported as well  Acceleration time t1  can be calculated as below equation Goal Velocity 104    Profile Acceleration 108    t1   64Goal Position 116 Target position can be set with Goal Position 116   From the front view of Dynamixels  CCW is an increasing direction whereas CW is a decreasing direction  The way to reaching Goal Position 116  is differ by 4 Profiles provided by Dynamixels  Please refer to the Profile Velocity 112  for more details             Mode      Values      Description                  Position Control Mode      Min Position Limit 52    Max Position Limit 48       Initial Value  0   4 095              Extended Position Control Mode      1 048 575   1 048 575      256 rev    256 rev               Currentbased Position Control Mode      1 048 575   1 048 575      256 rev    256 rev                   Degree Conversion Constant      Description                  0 088° Value      1 rev   0   4 095      Note If Profile Acceleration 108   Profile Velocity 112  and Goal Position 116  are modified simultaneously  Goal Position 116  is processed based on updated Profile Acceleration 108  and Profile Velocity 112  Realtime Tick 120 This value indicates Dynamixel’s time             Unit      Value Range      Description                  1 ms      0   32 767      The value resets to ‘0’ when it exceeds 32 767      Moving 122 This value indicates whether Dynamixel is in motion or not  If absolute value of Present Velocity 128  is greater than Moving Threshold 24   Moving 122  is set to ‘1’  Otherwise  it will be cleared to ‘0’  However  this value will always be set to ‘1’ regardless of Present Velocity 128  while Profile is in progress with Goal Position 116  instruction             Value      Description                  0      Movement is not detected              1      Movement is detected  or Profile is in progress Goal Position 116  instruction is being processed       Moving Status 123 This value provides additional information about the movement  Following Error Bit 0x08  and InPosition Bit 0x01  only work with Position Control Mode  Extended Position Control Mode  Currentbased Position Control Mode                           Details      Description                  Bit 7      0x80            Unused              Bit 6      0x40            Unused              Bit 5 Bit 4      0x30      Profile Type 0x30 Profile Type 0x20 Profile Type 0x10 Profile Type 0x00       Trapezoidal Velocity ProfileTriangular Velocity ProfileRectangular Velocity ProfileProfile is not used              Bit 3      0x08      Following Error      Dynamixel fails to reach target position trajectory              Bit 2      0x04            Unused              Bit 1      0x02      Profile Ongoing      Profile is in progress with Goal Position 116  instruction              Bit 0      0x01      InPosition      Dynamixel is reached to target position      Present PWM 124 This value indicates present PWM  For more details  please refer to the Goal PWM 100  Present Load 126 It means currently applied load For example  the value is 512  it means the load is detected in the direction of CCW about 50% of the maximum torque             Unit      Value Range      Description                  0 1%      1 000   1 000      Positive CCW Load   Negative CW Load       Note Present load is an inferred value based on the internal output value not a measured value using torque sensor  etc  Therefore  it may be inaccurate for measuring weight or torque  It is recommended to use it for predicting the direction and size of the force being applied to the joint Present Velocity 128 This value indicates present Velocity  For more details  please refer to the Goal Velocity 104  Present Position 132 This value indicates present Position  For more details  please refer to the Goal Position 116    Note Present Position 132  represents 4 byte continuous range 2 147 483 648   2 147 483 647  when Torque is turned off regardless of Operating Mode 11   However  Present Position 132  will be reset in those cases  Present Position 132  is reset with the value within 1 rev  0   4 095  when Operating Mode 11  is changed to Position Control Mode   Present Position 132  is reset with the value within 1 rev  0   4 095  when Torque is turned on in Position Control Mode Reset Present Position 132  value can be affected by Homing Offset 20  Velocity Trajectory 136 This is a target velocity trajectory created by Profile  Operating method can be changed based on control mode  For more details  please refer to the Profile Velocity 112    Velocity Control Mode  When Profile reaches to the endpoint  Velocity Trajectory 136  becomes equal to Goal Velocity 104    Position Control Mode  Extended Position Control Mode  Velocity Trajectory is used to create Position Trajectory 140   When Profile reaches to an endpoint  Velocity Trajectory 136  is cleared to ‘0’ Position Trajectory 140 This is a target position trajectory created by Profile  This value is only used in Position Control Mode  Extended Position Control Mode  For more details  please refer to the Profile Velocity 112  Present Input Voltage 144 This value indicates present voltage that is being supplied  For more details  please refer to the Max Min Voltage Limit 32  34  Present Temperature 146 This value indicates internal temperature of Dynamixel  For more details  please refer to the Temperature Limit 31  Indirect Address  Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses  Sequential addresses increase Instruction Packet efficiency  Addresses that can be defined as Indirect Address is limited to RAM area Address 64   661  If specific address is allocated to Indirect Address  Indirect Address inherits features and properties of the Data from the specific Address  Property includes Size Byte length   value range  and Access property Read Only  Read Write   For instance  allocating 65 Address of LED  to Indirect Address 1 168   Indirect Data 1 224  can perform exactly same as LED 65  Example 1 Allocating Size 1 byte LED 65  to Indirect Data 1 224    Indirect Address 1 168   change the value to ‘65’ which is the address of LED   Set Indirect Data 1 224  to ‘1’  LED 65  also becomes ‘1’ and LED is turned on   Set Indirect Data 1 224  to ‘0’  LED 65  also becomes ‘0’ and LED is turned off Example 2 Allocating Size 4 byte Goal Position 116  to Indirect Data 2 225   4 sequential bytes have to be allocated   Indirect Address 2 170   change the value to ‘116’ which is the first address of Goal Position   Indirect Address 3 172   change the value to ‘117’ which is the second address of Goal Position   Indirect Address 4 174   change the value to ‘118’ which is the third address of Goal Position   Indirect Address 5 176   change the value to ‘119’ which is the fourth address of Goal Position   Set 4 byte value ‘1 024’ to Indirect Data 2  Goal Position 116  also becomes ‘1024’ and Dynamixel moves             Indirect Address Range      Description                  64   661      EEPROM address can’t be assigned to Indirect Address      Note In order to allocate Data in the Control Table longer than 2 byte  to Indirect Address  all address must be allocated to Indirect Address like the above Example 2 Note Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0 How to AssembleFrames      FR07B101 Option Frame        FR07F101_FR07X101 Option Frame        FR07H101 Option Frame        FR07S101 Option Frame  Horns      HN07I101        HN07N101  Combination StructuresMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideVideosQuick StartDrawingsDownload MX28AT_AR pdf",
      "url": "http://0.0.0.0:4000/docs/en/dxl/mx/mx-28-2/"
      } ,
  
  
      "docs-en-dxl-mx-mx-28":  {
      "title": "MX-28",
      "content"	 : "MX28Note Compliance has been replaced with PID Gains Note Although the MX28AT  TTL  and MX28AR  RS485  differ in communications protocols both have the same features and perform equally   TTL uses 3pin connectors while RS485 uses 4 Note In order to use Protocol 2 0  please update the firmware to V39 or above   Update firmware using R  Manager 2 0 Warning For MX28 2 0  Protocol  please refer to the MX28 2 0  Control Table as they are different Specifications            Item      Specifications                  MCU      ST CORTEXM3   STM32F103C8 @ 72MHZ 32BIT               Position Sensor      Contactless absolute encoder  12BIT 360 DEGREE Maker  ams  www ams com   Part No  AS5045              Motor      Maxon              Baud Rate      8000 bps   4 5 Mbps              Control Algorithm      PID Control              Resolution      0 088°              Running Degree      0°   360°Endless Turn              Weight      MX28AR  MX28AT  77gMX28R  MX28T  72g              Dimensions  W x H x D       35 6mm x 50 6mm x 35 5mm              Gear Ratio      193  1              Stall Torque      2 3Nm @ 11 1V  1 3A2 5Nm @ 12V  1 4A3 1Nm @ 14 8V  1 7A              No Load Speed      50rpm @ 11 1V55rpm @ 12V67rpm @ 14 8V              Operating Temperature      5°C    80°C              Input Voltage      10   14 8V  Recommended  12V               Standby Current      100mA              Command Signal      Digital Packet              Protocol Type      MX28T MX28AT Half Duplex Asynchronous Serial CommunicationMX28R MX28AR RS485 Asynchronous Serial Communication 8bit 1stop  No Parity               Physical Connection      MX28T MX28AT TTL Level Multidrop BUSMX28R MX28AR RS485 Multidrop BUS              ID      0   253              Feedback      Position  Temperature  Load  Input Voltage  etc              Material      Full Metal GearMX28AR MX28AT Metal Front   Engineering Plastic Middle  Back MX28R MX28T Engineering Plastic Front  Middle  Back       Performance GraphStall torque Peak stall torque read from transient statePerformance Graph NT Curve  A graph shows torque measured in stable condition while increasing load  Normally  stall torque is bigger than maximum torque on performance graph Caution When connecting to power supply  For the stable power supply  we recommend using ROBOTIS controller or SMPS2Dynamixel   Connect your DYNAMIXEL to power supply while it’s off and turn on off with the power switch Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 1 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on  Volatile   On the other hand  modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off  NonVolatile   Data in the EEPROM Area can only be changed or modified when the value of Torque Enable 24  is ‘0’ and Dynamixel is in idle state SizeThe Size of data is 1 or 2 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  2 bytes data will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      29              2      1      Firmware Version      Firmware Version      R                    3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      CounterClockwise Angle Limit      RW      4095              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      160              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36              20      2      Multi Turn Offset      Adjust Position with Offset      RW      0              22      1      Resolution Divider      Divider for Position Resolution      RW      1      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On Off      RW      0              25      1      LED      Status LED On Off      RW      0              26      1      D Gain      Derivative Gain      RW      0              27      1      I Gain      Integral Gain      RW      0              28      1      P Gain      Proportional Gain      RW      32              30      2      Goal Position      Target Position      RW                    32      2      Moving Speed      Moving Speed Moving Velocity       RW                    34      2      Torque Limit      Torque Limit Goal Torque       RW      ADD 14 amp15              36      2      Present Position      Present Position      R                    38      2      Present Speed      Present Speed      R                    40      2      Present Load      Present Load      R                    42      1      Present Voltage      Present Voltage      R                    43      1      Present Temperature      Present Temperature      R                    44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      0              73      1      Goal Acceleration      Goal Acceleration      RW      0      Control Table DescriptionModel Number  0 This address stores model number of the DYNAMIXEL Firmware Version  2 This address stores firmware version of the DYNAMIXEL ID  3 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate  4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate bps       Margin of Error                  1      1M      0 000%              3      500 000      0 000%              4      400 000      0 000%              7      250 000      0 000%              9      200 000      0 000%              16      115200      2 124%              34 Default       57600      0 794%              103      19200      0 160%              207      9600      0 160%      Note Less than 3% of the baud rate error margin will not affect to UART communication For BPS over 250 values             Value      Baud Rate      Margin of Error                  250      2 250 000      0 000%              251      2 500 000      0 000%              252      3 000 000      0 000%      Return Delay Time  5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       CW CCW Angle Limit 6  8 The angle limit allows the motion to be restrained The range and the unit of the value is the same as Goal Position Address 30  31    CW Angle Limit the minimum value of Goal Position Address 30  31   CCW Angle Limit the maximum value of Goal Position Address 30  31 The following three modes can be set pursuant to the value of CW and CCW             Operation Type      CW   CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0              Multiturn Mode      both are 4095      The wheel mode can be used to wheeltype operation robots since motors of the robots spin infinitely  The joint mode can be used to multijoints robot since the robots can be controlled with specific angles  Multiturn mode allows joint mode control over multiple rotations  Position range  28 672   28 672 Temperature Limit  11             Unit      Value Range                  About 1°C      0   100      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit  12  13 It is the operation range of voltage             Unit      Value Range      Description                  About 0 1V      50   160      5 0   16 0V      For example  if the value is 80  the voltage is 8V If Present Voltage 42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 Max Torque  14 It is the torque value of maximum output  0 to 1 023  0x3FF  can be used  and the unit is about 0 1% For example  Data 1 023  0x3FF  means that Dynamixel will use 100% of the maximum torque it can produce while Data 512  0x200  means that Dynamixel will use 50% of the maximum torque  When the power is turned on  Torque Limit  Address 34 and 35  uses the value as the initial value Status Return Level  16 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Alarm LED 17   Shutdown 18 Dynamixel can protect itself by detecting errors occur during the operation The errors can be set are as the table below             Bit      Item      Description                  Bit 7      0                    Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’  That is  if 0x05  binary 00000101  is set  both Input Voltage Error and Overheating Error can be detected If errors occur  in case of Alarm LED  the LED blinks in case of Alarm Shutdown  the motor output becomes 0 % by resetting the value of Torque Limit 34  to 0 Multi Turn Offset  20 Adjusts offset position  This offset value is added to the Present Position 36  Initial value is 0 and the range is from 24 576 to 24 576 Dynamixel with a Present position of 2 048 with an offset of 1 024 will return an adjusted Present position of 3 072 Note This offset feature is only available in multiturn mode Resolution Divider  22 It allows the user to change Dynamixel’s resolution The default Resolution Divider Value is set as 1   1   4 available When resolution is lowered  revolutions  in both directions  can be increased  up to 28 turns in each direction  Present Position   Real Position   Resolution DividerFor example  a Real Position of 2048 with a Resolution Divider set as 2 will yield a Present Position value of 1024  2048 2   1024   A Dynamixel with Resolution Divider set as 2 will have a resolution 2048 for a single revolution The Present Position can be obtained while Multiturn Offset and Resolution Divider are taken into account Present position    Real Position   Resolution Divider    Multiturn OffsetFor example  a Dynamixel with a Real Position of 2048 with a Resolution Divider set as 4 and Multiturn Offset as 1024 will yield a Present Position of 1535   2048 4    1024   1535  Note This feature is only applied in multiturn mode and will be ignored in other modes Torque Enable  24             Value      Description                  0      Turn off the torque Free run state               1      Turn on the torque and lock EEPROM area      LED  25 Turn on or turn off the LED on Dynamixel             Bit      Description                  0 Default       Turn OFF the LED              1      Turn ON the LED      PID Gains  26  27  28 MX series will use the PID controller as a main control method P gain  value of proportional band I gain  value of integral action D Gain  value of derivative action Gains values are in between 0 254 Kp   P Gain   8Ki   I Gain   1 000   2 048Kd   D Gain   4   1 000The relationship between Compliance Slop and PID            Slope      P Gain                  8      128              16      64              32      32              64      16              128      8      The less the P gain  The larger the back lash  and the weaker the amount of output near goal position At some extent  it is like a combined concept of margine and slope It does not exactly match the previous concept of compliance  So it is obvious if you see the difference in terms of motion Explanation for PID required For the brief explanation about general PID  please refer to the website link  below http  en wikipedia org wiki PID_controllerFYI  PID control theory is not only limited to the control of motor actuator  but is a generic theory that can be applied to all kinds of control Goal Position  30 It is a position value of destination 0 to 4 095  0xFFF  is available   The unit is 0 088° If Goal Position is out of the range  Angle Limit Error Bit  Bit1  of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED Shutdown The picture above is the front view of DynamixelIn multiturn mode Dynamixel has a range from 28 672 to 28 672  can turn up to 7 revolutions in either CW or CCW direction  When resolution divider is set to a different value revolutions can increase Note If it is set to Wheel Mode  Goal Position value is not used Moving Speed  32       Join Mode  MultiTurn modeIt is a moving speed to Goal Position 0 1023  0X3FF  can be used  and the unit is about 0 114rpm If it is set to 0  it means the maximum rpm of the motor is used without controlling the speed If it is 1023  it is about 116 62rpm For example  if it is set to 300  it is about 34 2 rpm However  the rpm will not exceed the No Load Speed         Wheel ModeIt is a moving speed to Goal direction 0 2047  0X7FF  can be used  and the unit is about 0 114rpm If a value in the range of 0 1023 is used  it is stopped by setting to 0 while rotating to CCW direction If a value in the range of 1024 2047 is used  it is stopped by setting to 1024 while rotating to CW direction That is  the 10th bit becomes the direction bit to control the direction     Note Wheel mode allows to check max rpm  Any values higher than max rpm will not take effect   Torque Limit  34 It is the value of the maximum torque limit 0   1 023 0x3FF  is available  and the unit is about 0 1% For example  if the value is 512  it is about 50% that means only 50% of the maximum torque will be used If the power is turned on  the value of Max Torque  Address 14  15  is used as the initial value Note If the function of Alarm Shutdown is triggered  the motor loses its torque because the value becomes 0  Once error conditions are resolved and this value is changed to the value other than 0  the motor can be operated again Present Position  36 It is the current position value of Dynamixel The range of the value is 0 4095  0xFFF   and the unit is 0 088 degree The picture above is the front view of Dynamixel In multiturn mode  the range is from 28672 to 28672 with unit values dependent on Resolution Divider  0 088   Resolution Divider Note In multiturn mode  Present position depends on resolution divider and multiturn offset For more information turn to the section on Multi Turn offset and Resolution Divider Present Speed  38 Is the current moving speed 0   2 047  0x000   0x7FF  can be used If a value is in the rage of 0   1 023 then the motor rotates to the CCW direction If a value is in the rage of 1 024   2 047 then the motor rotates to the CW direction The 10th bit becomes the direction bit to control the direction 0 and 1 024 are equal The value unit is about 0 11rpm For example  if it is set to 300 then the motor is moving to the CCW direction at a rate of about 34 33rpm Present Load  40 It means currently applied load The range of the value is 0 2047  and the unit is about 0 1% If the value is 0 1 023  it means the load works to the CCW direction If the value is 1 024 2 047  it means the load works to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 1 024 is equal to 0 For example  the value is 512  it means the load is detected in the direction of CCW about 50% of the maximum torque             Bit      15   11      10      9   0                  Value      0      Load Direction      Data  Load Ratio       Note CCW Load  Load Direction   0  CW Load  Load Direction   1Note Present load is an inferred value based on the internal output value not a measured value using torque sensor  etc  Therefore  it may be inaccurate for measuring weight or torque  It is recommended to use it for predicting the direction and size of the force being applied to the joint Present Voltage  42 It is the size of the present voltage supplied This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 If Present Voltage 42  value is out of range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18 Present Temperature  43 It is the internal temperature of Dynamixel in Celsius Data value is identical to the actual temperature in Celsius  For example  if the data value is 85  0x55   the current internal temperature is 85°C Registered Instruction  44             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Moving  46             Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock  47             Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 Punch  48 Minimum current to drive motor  This value ranges from 0x20 to 0x3FF Goal Acceleration  73 This is Goal Acceleration value It can be used from 0 254 0XFE  and the unit is approximately 8 583°   sec2 When it is set to 0  there is no control over acceleration and moves with the maximum acceleration of the motor When the goal speead is set to 0  there is no control over acceleration and moves with the maximum acceleration of the motor When it is set to 254  it becomes 2 180°   sec2 For example  the current speed of Dynamixel is 0  and Goal acceleration is 10 The speed of Dynamixel after 1 second will be 14 3 RPM How to AssembleFrames      FR07B101 Option Frame        FR07F101_FR07X101 Option Frame        FR07H101 Option Frame        FR07S101 Option Frame  Horns      HN07I101        HN07N101  Combination StructuresMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideVideosQuick StartDrawingsDownload MX28AT_AR pdf",
      "url": "http://0.0.0.0:4000/docs/en/dxl/mx/mx-28/"
      } ,
  
  
      "docs-en-dxl-mx-mx-64-2":  {
      "title": "MX-64(2.0)",
      "content"	 : "MX64 Protocol 2 0 Specifications            Item      Specifications                  MCU      ST CORTEXM3   STM32F103C8 @ 72MHZ 32BIT               Position Sensor      Contactless absolute encoder  12BIT 360 DEGREE Maker  ams  www ams com   Part No  AS5045              Motor      Maxon              Baud Rate      8000 bps   4 5 Mbps              Control Algorithm      PID Control              Resolution      0 088°              Operation Modes      Current Control ModeVelocity Control ModePosition Control Mode 0°   360° Extended Position Ctrl Mode Multiturn Currentbased Position Ctrl ModePWM Control Mode              Weight      MX64AR AT  135g  MX64R T  126g              Dimensions  W x H x D       40 2mm x 61 1mm x 41mm              Gear Ratio      200  1              Stall Torque      5 5Nm @ 11 1V  3 9A6 0Nm @ 12V  4 1A7 3Nm @ 14 8V  5 2A              No Load Speed      58rpm @ 11 1V63rpm @ 12V78rpm @ 14 8V              Operating Temperature      5°C    80°C              Input Voltage      10   14 8V  Recommended  12V               Standby Current      100mA              Command Signal      Digital Packet              Protocol Type      MX64T MX64AT Half Duplex Asynchronous Serial CommunicationMX64R MX64AR RS485 Asynchronous Serial Communication 8bit 1stop  No Parity               Physical Connection      MX64T MX64AT TTL Level Multidrop BUSMX64R MX64AR RS485 Multidrop BUS              ID      0   252              Feedback      Position  Velocity  Current  Realtime Tick  Trajectory  Input Voltage  etc              Material      Full Metal GearMX64AR AT Metal Front   Engineering Plastic Middle  Back MX64R T Engineering Plastic Front  Middle  Back       Performance GraphStall torque Peak stall torque read from transient statePerformance Graph NT Curve  A graph shows torque measured in stable condition while increasing load  Normally  stall torque is bigger than maximum torque on performance graph Caution When connecting to power supply  For the stable power supply  we recommend using ROBOTIS controller or SMPS2Dynamixel   Connect your DYNAMIXEL to power supply while it’s off and turn on off with the power switch Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 2 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the power is reset Volatile   On the other hand  data in the EEPROM Area is maintained even when the DYNAMIXEL is powered off NonVolatile   Data in the EEPROM Area can only be written to if Torque Enable 64  is cleared to ‘0’ Off  SizeThe Size of data varies from 1 to 4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  For data larger than 2 bytes will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      311              2      4      Model Information      Model Information      R                    6      1      Firmware Version      Firmware Version      R                    7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Baud Rate      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              10      1      Drive Mode      Drive Mode      RW      0              11      1      Operating Mode      Operating Mode      RW      3              12      1      Secondary Shadow  ID      Secondary ID      RW      255              13      1      Protocol Version      Protocol Version      RW      2              20      4      Homing Offset      Home Position Offset      RW      0              24      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      10              31      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              32      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      160              34      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      95              36      2      PWM Limit      Maximum PWM Limit      RW      885              38      2      Current Limit      Maximum Current Limit      RW      1941              40      4      Acceleration Limit      Maximum Acceleration Limit      RW      32767              44      4      Velocity Limit      Maximum Velocity Limit      RW      435              48      4      Max Position Limit      Maximum Position Limit      RW      4095              52      4      Min Position Limit      Minimum Position Limit      RW      0              63      1      Shutdown      Shutdown Error Information      RW      52      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  64      1      Torque Enable      Motor Torque On Off      RW      0              65      1      LED      Status LED On Off      RW      0              68      1      Status Return Level      Select Types of Status Return      RW      2              69      1      Registered Instruction      REG_WRITE Instruction Flag      R      0              70      1      Hardware Error Status      Hardware Error Status      R      0              76      2      Velocity I Gain      I Gain of Velocity      RW      1920              78      2      Velocity P Gain      P Gain of Velocity      RW      100              80      2      Position D Gain      D Gain of Position      RW      0              82      2      Position I Gain      I Gain of Position      RW      0              84      2      Position P Gain      P Gain of Position      RW      850              88      2      Feedforward 2nd Gain      2nd Gain of FeedForward      RW      0              90      2      Feedforward 1st Gain      1st Gain of FeedForward      RW      0              98      1      BUS Watchdog      Dynamixel BUS Watchdog      RW      0              100      2      Goal PWM      Target PWM Value      RW                    102      2      Goal Current      Target Current Value      RW                    104      4      Goal Velocity      Target Velocity Value      RW                    108      4      Profile Acceleration      Acceleration Value of Profile      RW      0              112      4      Profile Velocity      Velocity Value of Profile      RW      0              116      4      Goal Position      Target Position      RW                    120      2      Realtime Tick      Count Time in Millisecond      R                    122      1      Moving      Movement Flag      R      0              123      1      Moving Status      Detailed Information of Movement Status      R      0              124      2      Present PWM      Present PWM Value      R                    126      2      Present Current      Present Current Value      R                    128      4      Present Velocity      Present Velocity Value      R                    132      4      Present Position      Present Position Value      R                    136      4      Velocity Trajectory      Target Velocity Trajectory from Profile      R                    140      4      Position Trajectory      Target Position Trajectory from Profile      R                    144      2      Present Input Voltage      Present Input Voltage      R                    146      1       Present Temperature       Present Internal Temperature      R                    168      2      Indirect Address 1      Indirect Address 1      RW      224              170      2      Indirect Address 2      Indirect Address 2      RW      225              172      2      Indirect Address 3      Indirect Address 3      RW      226              …      …      …      …      …      …              218      2      Indirect Address 26      Indirect Address 26      RW      249              220      2      Indirect Address 27      Indirect Address 27      RW      250              222      2      Indirect Address 28      Indirect Address 28      RW      251              224      1      Indirect Data 1      Indirect Data 1      RW      0              225      1      Indirect Data 2      Indirect Data 2      RW      0              226      1      Indirect Data 3      Indirect Data 3      RW      0              …      …      …      …      …      …              249      1      Indirect Data 26      Indirect Data 26      RW      0              250      1      Indirect Data 27      Indirect Data 27      RW      0              251      1      Indirect Data 28      Indirect Data 28      RW      0              578      2      Indirect Address 29      Indirect Address 29      RW      634              580      2      Indirect Address 30      Indirect Address 30      RW      635              582      2      Indirect Address 31      Indirect Address 31      RW      636              …      …      …      …      …      …              628      2      Indirect Address 54      Indirect Address 54      RW      659              630      2      Indirect Address 55      Indirect Address 55      RW      660              632      2      Indirect Address 56      Indirect Address 56      RW      661              634      1      Indirect Data 29      Indirect Data 29      RW      0              635      1      Indirect Data 30      Indirect Data 30      RW      0              636      1      Indirect Data 31      Indirect Data 31      RW      0              …      …      …      …      …      …              659      1      Indirect Data 54      Indirect Data 54      RW      0              660      1      Indirect Data 55      Indirect Data 55      RW      0              661      1      Indirect Data 56      Indirect Data 56      RW      0      Caution Protocol 1 0 does not support addresses greater than 256  Therefore  Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0 Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable 64  is cleared to ‘0’ Model Number 0 This address stores model number of the DYNAMIXEL Firmware Version 6 This address stores firmware version of the DYNAMIXEL ID 7 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate 4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate      Margin of Error                  7      4 5M      0 000%              6      4M      0 000%              5      3M      0 000%              4      2M      0 000%              3      1M      0 000%              2      115 200      0 000%              1 Default       57 600      0 000%              0      9 600      0 000%      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time 5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       Drive Mode 10 Drive Mode is availabe from the firmware version 38             Bit      Item      Description                  Bit 1 0x02    7 0x80       N A      Unused  always ‘0’              Bit 0 0x01       Direction of Rotation      Normal Mode 0  CCW Positive   CW Negative Reverse Mode 1  CCW Negative   CW Positive       Operating Mode 11             Value      Operating Mode      Description                  0      Current Control Mode      DYNAMIXEL only controls current torque  regardless of speed and position  This mode is ideal for a gripper or a system that only uses current torque  control or a system that has additional velocity position controllers               1      Velocity Control Mode      This mode controls velocity  This mode is identical to the Wheel Mode endless  from existing DYNAMIXELs  This mode is ideal for wheeltype robots               3 Default       Position Control Mode      This mode controls position  This mode is identical to the Joint Mode from existing DYNAMIXELs  Operating position range is limited by Max Position Limit 48  and Min Position Limit 52   This mode is ideal for articulated robots that each joint rotates less than 360 degrees               4      Extended Position Control Mode Multiturn       This mode controls position  This mode is identical to the MultiTurn Mode from existing DYNAMIXELs  512 turns are supported 256 rev    256 rev    This mode is ideal for multiturn wrists or conveyer systems or a system that requires an additional reduction gear               5      Currentbased Position Control Mode      This mode controls both position and current torque   Up to 512 turns are supported 256 rev    256 rev    This mode is ideal for a system that requires both position and current control such as articulated robots or grippers               16      PWM Control Mode   Voltage Control Mode       This mode directly controls PWM output   Voltage Control Mode         Note Switching Operating Mode will reset gains PID  Feedfoward  properly to the selected Operating Mode  The profile generator and limits will also be reset   Profile Velocity 112   Profile Acceleration 108   Reset to ‘0’  Goal PWM 100   Goal Current 102   Reset to PWM Limit 36   Current Limit 38  respectively  Currentbased Position Control Mode  Reset to Position Gain PID  and PWM Limit 36  values Changed Position Gain PID  and PWM Limit 36  values can be read from the Control Table Note PWM is the abbreviation for Pulse Width Modulation that modulates PWM Duty to control motors  The PWM Control Mode changes pulse width to control average supply voltage to the motor and this technique is widely used in the motor control field  Therefore  PWM Control Mode uses Goal PWM 100  value to control supply voltage for DYNAMIXEL  PWM Control Mode is similar to the Wheel Mode of DYNAMIXEL AX and RX series Secondary Shadow  ID 12 Set the Dynamixel’s Secondary ID  Secondary ID 12  is a value to identify each Dynamixel  just like the ID 7  However  unlike ID 7   Secondary ID 12  is not a unique value Therefore  Dynamixels with the same Secondary ID value form a group The differences between Secondary ID 12  and ID 7  are as follows   Secondary ID 12  is not a unique value  i e   a lot of Dynamixels may have the same Secondary ID value   ID 7  has a higher priority than Secondary ID 12   i e   if Secondary ID 12  and ID 7  are the same  ID 7  will be applied first   The EEPROM area of the Control Table cannot be modified with Secondary ID 12   Only the RAM area can be modified   If Instruction Packet ID is the same as Secondary ID 12   the Status Packet will not be returned   If the value of Secondary ID 12  is 253 or higher  the Secondary ID function is deactivated             Values      Description                  0   252      Activate Secondary ID function              253   255      Deactivate Secondary ID function  Default value ‘255’      The following are examples of operation when there are five Dynamixels with ID  7  set from 1 to 5   Set all five Dynamixels’ Secondary ID 12  to ‘5’   Send Write Instruction Packet ID   1  LED 65    1    Turn on LED of Dynamixel with ID ‘1’ and return the Status Packet   Send Write Instruction Packet ID   5  LED 65    1    Turn on LED on five Dynamixels  However  Status Packet of Dynamixel with ID ‘5’ will be returned   Set the Secondary ID 12  of all five Dynamixels to ‘100’   Send Write Instruction Packet ID   100  LED 65    0    Turn off LED on five Dynamixels  However  as there is no Dynamixel with ID ‘100’  Status Packet is not returned Protocol Version 13 Users can select Dynamixel protocol version  1 0 and 2 0  It is recommended to use an identical protocol version for multiple Dynamixels             Value      Protocol Version      Compatible Dynamixels                  1      1 0      AX Series  DX Series  RX Series  EX Series  MX Series with Firmware below v39              2 default       2 0      MX28 64 106 with Firmware v39 or above  X Series  Pro Series      Note The protocol 2 0 is greatly enhanced from the protocol 1 0  Accessing some of the Control Table area might be denied if protocol 1 0 is selected  This manual complies with protocol 2 0  Please refer to the Protocol section of eManual for more details about the protocol Homing Offset 20 Users can adjust the Home position by setting Home Offset 20   The Homing Offset value is added to the Present Position 132  Present Position 132    Actual Position   Homing Offset 20              Unit      Value Range      Description                  about 0 088°      1 044 479   1 044 479 255   255 rev        4 096 resolution      Note In case of the Position Control Mode Joint Mode  that rotates less than 360 degrees  any invalid Homing Offset 20  values will be ignored valid range  1 024   1 024  Moving Threshold 24 This value helps to determine whether the Dynamixel is in motion or not When the absolute value of Present Velocity 128  is greater than the Moving Threshold 24   Moving 122  is set to ‘1’  otherwise it is cleared to ‘0’                    Values      Description                  Unit      about 0 229 rpm      All velocity related Data uses the same unit              Range      0   1 023            Maximum Temperature Limit 31 This value limits operating temperature  When the Present Temperature 146  that indicates internal temperature of Dynamixel is greater than the Temperature Limit 31   the Over Heating Error Bit 0x04  and Hardware Error Bit 0x80  in the Hardware Error Status 70  will be set  If Overheating Error Bit 0x04  is configured in the Shutdown 63   Torque Enable 64  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 63  section             Unit      Value Range      Description                  About 1°      0   100      0   100°      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit 32  34 It is the operation range of voltage             Unit      Value Range      Description                  About 0 1V      50   250      5 0   25 0V      For example  if the value is 80  the voltage is 8V If Present Voltage 42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 PWM Limit 36 This value indicates maximum PWM output  Goal PWM 100  can’t be configured with any values exceeding PWM Limit 36   PWM Limit 36  is commonly used in all operating mode as an output limit  therefore decreasing PWM output will result in decreasing torque and velocity  For more details  please refer to the Gain section of each operating modes             Values      Description                  0 0%    885 100%       885   100 %  output      Current Limit  38 This value indicates maximum current torque  output limit  Goal Current 102  can’t be configured with any values exceeding Current Limit 38   The Current Limit 38  is used in Torque Control Mode and Currentbased Position Control Mode  therefore decreasing Current Limit 38  will result in decreasing torque of DYNAMIXEL  For more details  please refer to the Position PID Gain 80   84              Unit      Value Range                  about  3 36 mA       0   1 941      Note Current Limit 38  could be differ by each DYNAMIXEL so please check the Control Table Acceleration Limit 40 This value indicates maximum Profile Acceleration 108   Profile Acceleration 108  can’t be configured with any values exceeding Acceleration Limit 40   Profile Acceleration 108  is used in all operating mode except PWM Control Mode in order to generate a target trajectory  For more details  please refer to the Profile Velocity 112              Unit      Value Range                  214 577 Rev min2      0   32 767      Note Bit information of the Error field in the Status Packet is different from protocol 1 0 and protocol 2 0  This manual complies with protocol 2 0  Please refer to the Protocol section of eManual for more details about the protocol Velocity Limit 44 This value indicates maximum velocity of Goal Velocity 104  and Profile Velocity 112   For more details  please refer to the Profile Velocity 112              Unit      Value Range                  0 229rpm      0   1 023      Min Max Position Limit 48  52 These values limit maximum and minimum target positions for Position Control Mode Joint Mode  within the range of 1 rotation 0   4 095   Therefore  Goal Position 116  should be configured within the position limit range  These values are not used in Extended Position Control Mode and Currentbased Position Control Mode             Unit      Value Range                  0 088°      0   4 095 1 rotation       Note Max Position Limit 48  and Min Position Limit 52  are only used in Position Control Mode with a single turn Shutdown 63 The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation Each Bit is inclusively processed with the ‘OR’ logic  therefore  multiple options can be generated For instance  when ‘0x05’  binary  00000101  is defined as Shutdown 63   Dynamixel can detect both Input Voltage Error binary  00000001  and Overheating Error binary  00000100  If those errors are detected  Torque Enable 64  is cleared to ‘0’ and the motor output becomes 0 %  REBOOT is the only method to reset Torque Enable 64  to ‘1’ Torque ON  after the shutdown The followings are detectable situations             Bit      Item      Description                  Bit 7            Unused  Always ‘0’              Bit 6            Unused  Always ‘0’              Bit 5      Overload Error default       Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error default       Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error default       Detect internal temperature exceeds the configured operating temperature              Bit 1            Unused  Always ‘0’              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs  use below method to reboot Dynamixels   H W REBOOT  Turn off the power and turn on again  S W REBOOT  Transmit REBOOT Instruction  For more details  please refer to the  Reboot  section of Protocol eManual  If Shutdown occurs  LED will flicker every second  Firmware v41 or above Torque Enable 64 Controls Torque ON OFF  Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected             Value      Description                  0 Default       Torque OFF Freerun  and the motor does not generate torque              1      Torque ON and all Data in the EEPROM area will be locked      Note Present Position 132  can be reset when Operating Mode 11  and Torque Enable 64  are updated  For more details  please refer to the Homing Offset 20  and Present Position 132  LED 65 Turn on or turn off the LED on Dynamixel             Bit      Description                  0 Default       Turn OFF the LED              1      Turn ON the LED      Status Return Level 68 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Registered Instruction 69             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Hardware Error Status 70 This value indicates hardware error status The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation Each Bit is inclusively processed with the ‘OR’ logic  therefore  multiple options can be generated For instance  when ‘0x05’  binary  00000101  is defined as Shutdown 63   Dynamixel can detect both Input Voltage Error binary  00000001  and Overheating Error binary  00000100  If those errors are detected  Torque Enable 64  is cleared to ‘0’ and the motor output becomes 0 %  REBOOT is the only method to reset Torque Enable 64  to ‘1’ Torque ON  after the shutdown The followings are detectable situations             Bit      Item      Description                  Bit 7            Unused  Always ‘0’              Bit 6            Unused  Always ‘0’              Bit 5      Overload Error default       Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error default       Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error default       Detect internal temperature exceeds the configured operating temperature              Bit 1            Unused  Always ‘0’              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs  use below method to reboot Dynamixels   H W REBOOT  Turn off the power and turn on again  S W REBOOT  Transmit REBOOT Instruction  For more details  please refer to the  Reboot  section of Protocol eManual  If Shutdown occurs  LED will flicker every second  Firmware v41 or above Velocity PI Gain 76  78 These values indicate Gains of Velocity Control Mode  Gains of DYNAMIXEL’s internal controller can be calculated from Gains of the Control Table as shown below  The constant in each equations include sampling time  Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and that of the Control Table is abbreviated to KVP TBL                     Controller Gain      Conversion Equations      Range      Description                  Velocity I Gain 76       KVI      KVI   KVI TBL    65 536      0   16 383      I Gain              Velocity P Gain 78       KVP      KVP   KVP TBL    128      0   16 383      P Gain      Below figure is a block diagram describing the velocity controller in Velocity Control Mode  When the instruction transmitted from the user is received by DYNAMIXEL  it takes following steps until driving the horn   An Instruction from the user is transmitted via DYNAMIXEL bus  then registered to Goal Velocity 104    Goal Velocity 104  is converted to target velocity trajectory by Profile Acceleration 108    The target velocity trajectory is stored at Velocity Trajectory 136    PI controller calculates PWM output for the motor based on the target velocity trajectory   Goal PWM 100  sets a limit on the calculated PWM output and decides the final PWM value   The final PWM value is applied to the motor through an Inverter  and the horn of DYNAMIXEL is driven   Results are stored at Present Position 132   Present Velocity 128   Present PWM 124  and Present Current 126  Note Ka stands for Antiwindup Gain and ‘β’ is a conversion coefficient of position and velocity that cannot be modified by users  For more details about the PID controller  please refer to the PID Controller at wikipedia Position PID Gain 80  82  84   Feedforward 1st 2nd Gains 88  90 These Gains are used in Position Control Mode and Extended Position Control Mode  Gains of Dynamixel’s internal controller can be calculated from Gains of the Control Table as shown below  The constant in each equations include sampling time  Position P Gain of Dynamixel’s internal controller is abbreviated to KPP and that of the Control Table is abbreviated to KPP TBL                     Controller Gain      Conversion Equations      Range      Description                  Position D Gain 80       KPD      KPD   KPD TBL    16      0   16 383      D Gain              Position I Gain 82       KPI      KPI   KPI TBL    65 536      0   16 383      I Gain              Position P Gain 84       KPP      KPP   KPP TBL    128      0   16 383      P Gain              Feedforward 2nd Gain 88       KFF2nd      KFF2nd TBL    4      0   16 383      Feedforward Acceleration Gain              Feedforward 1st Gain 90       KFF1st      KFF1st TBL    4      0   16 383      Feedforward Velocity Gain      Below figure is a block diagram describing the position controller in Position Control Mode and Extended Position Control Mode  When the instruction from the user is received by Dynamixel  it takes following steps until driving the horn   An Instruction from the user is transmitted via Dynamixel bus  then registered to Goal Position 116    Goal Position 116  is converted to target position trajectory and target velocity trajectory by Profile Velocity 112  and Profile Acceleration 108    The target position trajectory and target velocity trajectory is stored at Position Trajectory 140  and Velocity Trajectory 136  respectively   Feedforward and PID controller calculate PWM output for the motor based on target trajectories   Goal PWM 100  sets a limit on the calculated PWM output and decides the final PWM value   The final PWM value is applied to the motor through an Inverter  and the horn of Dynamixel is driven   Results are stored at Present Position 132   Present Velocity 128   Present PWM 124  and Present Current 126  Note In case of PWM Control Mode  both PID controller and Feedforward controller are deactivated while Goal PWM 100  value is directly controlling the motor through an Inverter  In this manner  users can directly control the supplying voltage to the motor Note Ka is an Antiwindup Gain that cannot be modified by users Below figure is a block diagram describing the currentbased position controller in Currentbased Position Control Mode  As Currentbased Position Control Mode is quite similar to Position Control Mode  differences will be focused in the following steps  The differences are highlighted with a green marker in the block diagram as well   Feedforward and PID controller calculates target current based on target trajectory   Goal Current 102  decides the final target current by setting a limit on the calculated target current   Current controller calculates PWM output for the motor based on the final target current   Goal PWM 100  sets a limit on the calculated PWM output and decides the final PWM value   The final PWM value is applied to the motor through an Inverter  and the horn of DYNAMIXEL is driven   Results are stored at Present Position 132   Present Velocity 128   Present PWM 124  and Present Current 126  Note Ka is an Antiwindup Gain that cannot be modified by users  For more details about the PID controller and Feedforward controller  please refer to the PID Controller and Feed Forward BUS Watchdog 98 Bus Watchdog  98  is available from firmware v38  It is a safety device  Failsafe  that stops the DYNAMIXEL if the communication between the controller and DYNAMIXEL communication  RS485  TTL  is disconnected due to an unspecified error Communication is defined as all the Instruction Packet in the DYNAMIXEL Protocol                    Values      Description                  Unit      20 ms                     Range      0      Deactivate Bus Watchdog Function  Clear Bus Watchdog Error              Range      1   127      Activate Bus Watchdog              Range      1      Bus Watchdog Error Status      The Bus Watchdog function monitors the communication interval  time  between the controller and DYNAMIXEL when Torque Enable  64  is ‘1’ If the measured communication interval  time  is larger than Bus Watchdog  98   the DYNAMIXEL will stop  Bus Watchdog  98  will be changed to ‘1’  Bus Watchdog Error  If the Bus Watchdog Error screen appears  the Goal Value  Goal PWM 100   Goal Current 102   Goal Velocity 104   Goal Position 116   will be changed to readonlyaccess Therefore  when a new value is written to the Goal Value  a Range Error will be returned via the Status packet If the value of Bus Watchdog  98  is changed to ‘0’  Bus Watchdog Error will be cleared Note For details of Range Error  please refer to the protocol of the eManual The following are examples of the operation of the Bus Watchdog function   After setting the operating mode  11  to speed control mode  change the Torque Enable  64  to ‘1’   If ‘50’ is written in the Goal Velocity  104   the DYNAMIXEL will rotate in CCW direction   Change the value of Bus Watchdog  98  to ‘100’  2 000  ms     Activate Bus Watchdog Function   If no instruction packet is received for 2 000  ms   the DYNAMIXEL will stop  When it stops  the Profile Acceleration  108  and Profile Velocity  112  are applied as ‘0’   The value of Bus Watchdog  98  changes to ‘1’  Bus Watchdog Error   At this time  the access to the Goal Value will be changed to readonly   If ‘150’ is written to the Goal Velocity  104   Range Error will be returned via Status Packet   If the value of Bus Watchdog  98  is changed to ‘0’  Bus Watchdog Error will be cleared   If 150 is written in the Goal Velocity  104   the DYNAMIXEL will rotate in CCW direction Goal PWM 100 In case of PWM Control Mode  both PID controller and Feedforward controller are deactivated while Goal PWM 100  value is directly controlling the motor through an Inverter  In other control modes  this value is used to limit PWM value  This value cannot exceed PWM Limit 36   Please refer to the Gain section in order to see how Goal PWM 100  affects to different control modes             Range      Description                  PWM Limit 36    PWM Limit 36       Initial Value of PWM Limit 36   ‘885’      Goal Current  102 In case of Torque Control Mode  Goal Current 102  can be used to set a target current  This value sets a limit to current in Currentbased Position Control mode  This value cannot exceed Current Limit 38              Unit      Value Range                  about  3 36 mA       Current Limit 38    Current Limit 38       Note Applying high current to the motor for long period of time might damage the motor Goal Velocity 104 In case of Velocity Control Mode  Goal Velocity 104  can be used to set a target velocity  This value cannot exceed Velocity Limit 44   For now  Goal Velocity 104  is used for target velocity  but this value is not used to limit the velocity             Unit      Value Range                  0 229 rpm      Velocity Limit 44    Velocity Limit 44       Note The maximum velocity and maximum torque of DYNAMIXEL is affected by supplying voltage  Therefore  if supplying voltage changes  so does the maximum velocity  This manual complies with recommended supply voltage 12 V   Note If Profile Acceleration 108  and Goal Velocity 104  are modified simultaneously  modified Profile Acceleration 108  will be used to process Goal Velocity 104  Profile Acceleration 108 The acceleration of Profile can be set with this value  Profile Acceleration 108  can be used in all control modes except Torque Control Mode  Profile Acceleration 108  cannot exceed Acceleration Limit 40   For more details  please refer to the Profile Velocity 112              Unit      Value Range      Description                  214 577 Rev min2      0   Acceleration Limit 40       ‘0’ stands for an infinite acceleration      Profile Velocity 112 The Maximum velocity of Profile can be set with this value  Profile Velocity 112  can be used in all control modes except Torque Control Mode and Velocity Control Mode  Profile Velocity 112  cannot exceed Velocity Limit 44   Velocity Control Mode only uses Profile Acceleration 108  instead of Profile Velocity 112              Unit      Value Range      Description                  0 229 rpm      0   Velocity Limit 44       ‘0’ stands for an infinite velocity      The Profile is an acceleration deceleration control method to reduce vibration  noise and load of the motor by controlling dramatically changing velocity and acceleration  It is also called Velocity Profile as it controls acceleration and deceleration based on velocity  DYNAMIXEL provides 4 different types of Profile  The following explains 4 Profiles and how to select them  Profiles are usually selected by a combination of Profile Velocity 112  and Profile Acceleration 108   Triangular and Trapezoidal Profiles exceptionally consider total travel distance ΔPos  the distance difference between target position and current position  as an additional factor  For convenience  Profile Velocity 112  is abbreviated to VPRFL and Profile Acceleration 108  is abbreviated to VPRFL  ‘X’ stands for Don’t Care case When given Goal Position 116   Dynamixel’s profile creates target velocity trajectory based on current velocity initial velocity of the Profile   When Dynamixel receives updated target position from a new Goal Position 116  while it is moving toward the previous Goal Position 116   velocity smoothly varies for the new target velocity trajectory  Maintaining velocity continuity while updating target velocity trajectory is called Velocity Override  For a simple calculation  let’s assume that the initial velocity of the Profile is ‘0’  The following explains how Profile processes Goal Position 116  instruction in Position Control mode  Extended Position Control Mode  Currentbased Position Control Mode   An Instruction from the user is transmitted via Dynamixel bus  then registered to Goal Position 116    Acceleration time t1  is calculated from Profile Velocity 112  and Profile Acceleration 108    Types of Profile is decided based on Profile Velocity 112   Profile Acceleration 108  and total travel distance ΔPos  the distance difference between target position and current position    Selected Profile type is stored at Moving Status 123   Refer to the Moving Status 123    Dynamixel is driven by the calculated target trajectory from Profile   Target velocity trajectory and target position trajectory from Profile are stored at Velocity Trajectory 136  and Position Trajectory 140  respectively   VPRFL_TRI of ③ and Travel time t3  to reach Goal Position 116  is calculated as below             Condition      Types of Profile                  VPRFL 112    0      Profile not used Step Instruction                VPRFL 112  ≠ 0   amp  APRF 108    0       Rectangular Profile               VPRFL 112  ≠ 0   amp  APRF 108  ≠ 0   amp  VPRFL_TRI ≤ VPRFL 112        Triangular Profile               VPRFL 112  ≠ 0   amp  APRF 108  ≠ 0   amp  VPRFL_TRI ＞ VPRFL 112        Trapezoidal Profile      Note Dynamixel supports Jerk control in order to minimize dramatic change of acceleration  Therefore  actual travel time by the target trajectory of Profile could be longer than t3 t4 of above figure    Note Velocity Control Mode only uses Profile Acceleration 108   Step and Trapezoidal Profiles are supported  Velocity Override and Jerk control are supported as well  Acceleration time t1  can be calculated as below equation Goal Velocity 104    Profile Acceleration 108    t1   64Goal Position 116 Target position can be set with Goal Position 116   From the front view of Dynamixels  CCW is an increasing direction whereas CW is a decreasing direction  The way to reaching Goal Position 116  is differ by 4 Profiles provided by Dynamixels  Please refer to the Profile Velocity 112  for more details             Mode      Values      Description                  Position Control Mode      Min Position Limit 52    Max Position Limit 48       Initial Value  0   4 095              Extended Position Control Mode      1 048 575   1 048 575      256 rev    256 rev               Currentbased Position Control Mode      1 048 575   1 048 575      256 rev    256 rev                   Degree Conversion Constant      Description                  0 088° Value      1 rev   0   4 095      Note If Profile Acceleration 108   Profile Velocity 112  and Goal Position 116  are modified simultaneously  Goal Position 116  is processed based on updated Profile Acceleration 108  and Profile Velocity 112  Realtime Tick 120 This value indicates Dynamixel’s time             Unit      Value Range      Description                  1 ms      0   32 767      The value resets to ‘0’ when it exceeds 32 767      Moving 122 This value indicates whether Dynamixel is in motion or not  If absolute value of Present Velocity 128  is greater than Moving Threshold 24   Moving 122  is set to ‘1’  Otherwise  it will be cleared to ‘0’  However  this value will always be set to ‘1’ regardless of Present Velocity 128  while Profile is in progress with Goal Position 116  instruction             Value      Description                  0      Movement is not detected              1      Movement is detected  or Profile is in progress Goal Position 116  instruction is being processed       Moving Status 123 This value provides additional information about the movement  Following Error Bit 0x08  and InPosition Bit 0x01  only work with Position Control Mode  Extended Position Control Mode  Currentbased Position Control Mode                           Details      Description                  Bit 7      0x80            Unused              Bit 6      0x40            Unused              Bit 5 Bit 4      0x30      Profile Type 0x30 Profile Type 0x20 Profile Type 0x10 Profile Type 0x00       Trapezoidal Velocity ProfileTriangular Velocity ProfileRectangular Velocity ProfileProfile is not used              Bit 3      0x08      Following Error      Dynamixel fails to reach target position trajectory              Bit 2      0x04            Unused              Bit 1      0x02      Profile Ongoing      Profile is in progress with Goal Position 116  instruction              Bit 0      0x01      InPosition      Dynamixel is reached to target position      Present PWM 124 This value indicates present PWM  For more details  please refer to the Goal PWM 100  Present Load 126 This value indicates current Current  For more details  please refer to the Goal Current 102  Present Velocity 128 This value indicates present Velocity  For more details  please refer to the Goal Velocity 104  Present Position 132 This value indicates present Position  For more details  please refer to the Goal Position 116    Note Present Position 132  represents 4 byte continuous range 2 147 483 648   2 147 483 647  when Torque is turned off regardless of Operating Mode 11   However  Present Position 132  will be reset in those cases  Present Position 132  is reset with the value within 1 rev  0   4 095  when Operating Mode 11  is changed to Position Control Mode   Present Position 132  is reset with the value within 1 rev  0   4 095  when Torque is turned on in Position Control Mode Reset Present Position 132  value can be affected by Homing Offset 20  Velocity Trajectory 136 This is a target velocity trajectory created by Profile  Operating method can be changed based on control mode  For more details  please refer to the Profile Velocity 112    Velocity Control Mode  When Profile reaches to the endpoint  Velocity Trajectory 136  becomes equal to Goal Velocity 104    Position Control Mode  Extended Position Control Mode  Currentbased Position Control Mode  Velocity Trajectory is used to create Position Trajectory 140   When Profile reaches to an endpoint  Velocity Trajectory 136  is cleared to ‘0’ Position Trajectory 140 This is a target position trajectory created by Profile  This value is only used in Position Control Mode  Extended Position Control Mode and Currentbased Position Control Mode  For more details  please refer to the Profile Velocity 112  Present Input Voltage 144 This value indicates present voltage that is being supplied  For more details  please refer to the Max Min Voltage Limit 32  34  Present Temperature 146 This value indicates internal temperature of Dynamixel  For more details  please refer to the Temperature Limit 31  Indirect Address  Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses  Sequential addresses increase Instruction Packet efficiency  Addresses that can be defined as Indirect Address is limited to RAM area Address 64   661  If specific address is allocated to Indirect Address  Indirect Address inherits features and properties of the Data from the specific Address  Property includes Size Byte length   value range  and Access property Read Only  Read Write   For instance  allocating 65 Address of LED  to Indirect Address 1 168   Indirect Data 1 224  can perform exactly same as LED 65  Example 1 Allocating Size 1 byte LED 65  to Indirect Data 1 224    Indirect Address 1 168   change the value to ‘65’ which is the address of LED   Set Indirect Data 1 224  to ‘1’  LED 65  also becomes ‘1’ and LED is turned on   Set Indirect Data 1 224  to ‘0’  LED 65  also becomes ‘0’ and LED is turned off Example 2 Allocating Size 4 byte Goal Position 116  to Indirect Data 2 225   4 sequential bytes have to be allocated   Indirect Address 2 170   change the value to ‘116’ which is the first address of Goal Position   Indirect Address 3 172   change the value to ‘117’ which is the second address of Goal Position   Indirect Address 4 174   change the value to ‘118’ which is the third address of Goal Position   Indirect Address 5 176   change the value to ‘119’ which is the fourth address of Goal Position   Set 4 byte value ‘1 024’ to Indirect Data 2  Goal Position 116  also becomes ‘1024’ and Dynamixel moves             Indirect Address Range      Description                  64   661      EEPROM address can’t be assigned to Indirect Address      Note In order to allocate Data in the Control Table longer than 2 byte  to Indirect Address  all address must be allocated to Indirect Address like the above Example 2 Note Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0 How to AssembleOptional Frames      FR05B101        FR05F101 and FR05X101        FR05H101        FR05S101  Horns      HN05I102        HN05N101  Combination StructuresMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideVideosQuick StartDrawingsDownload MX64TDownload MX64R",
      "url": "http://0.0.0.0:4000/docs/en/dxl/mx/mx-64-2/"
      } ,
  
  
      "docs-en-dxl-mx-mx-64":  {
      "title": "MX-64",
      "content"	 : "MX64Note Compliance has been replaced with PID Gains Note Although the MX64AT  TTL  and MX64AR  RS485  differ in communications protocols both have the same features and perform equally   TTL uses 3pin connectors while RS485 uses 4 Note In order to use Protocol 2 0  please update the firmware to V39 or above   Update firmware using R  Manager 2 0 Warning For MX64 2 0  Protocol  please refer to the MX64 2 0  Control Table as they are different Specifications            Item      Specifications                  MCU      ST CORTEXM3   STM32F103C8 @ 72MHZ 32BIT               Position Sensor      Contactless absolute encoder  12BIT 360 DEGREE Maker  ams  www ams com   Part No  AS5045              Motor      Maxon              Baud Rate      8000 bps   4 5 Mbps              Control Algorithm      PID Control              Resolution      0 088°              Running Degree      0°   360°Endless Turn              Weight      135g              Dimensions  W x H x D       40 2mm x 61 1mm x 41mm              Gear Ratio      200  1              Stall Torque      5 5Nm @ 11 1V  3 9A6 0Nm @ 12V  4 1A7 3Nm @ 14 8V  5 2A              No Load Speed      58rpm @ 11 1V63rpm @ 12V78rpm @ 14 8V              Operating Temperature      5°C    80°C              Input Voltage      10   14 8V  Recommended  12V               Standby Current      100mA              Command Signal      Digital Packet              Protocol Type      MX64T MX64AT Half Duplex Asynchronous Serial CommunicationMX64R MX64AR RS485 Asynchronous Serial Communication 8bit 1stop  No Parity               Physical Connection      MX64T MX64AT TTL Level Multidrop BUSMX64R MX64AR RS485 Multidrop BUS              ID      0   253              Feedback      Position  Temperature  Load  Input Voltage  etc              Material      Full Metal GearMX64AR MX64AT Metal Front   Engineering Plastic Middle  Back MX64R MX64T Engineering Plastic Front  Middle  Back       Performance GraphStall torque Peak stall torque read from transient statePerformance Graph NT Curve  A graph shows torque measured in stable condition while increasing load  Normally  stall torque is bigger than maximum torque on performance graph Caution When connecting to power supply  For the stable power supply  we recommend using ROBOTIS controller or SMPS2Dynamixel   Connect your DYNAMIXEL to power supply while it’s off and turn on off with the power switch Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 1 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on  Volatile   On the other hand  modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off  NonVolatile   Data in the EEPROM Area can only be changed or modified when the value of Torque Enable 24  is ‘0’ and Dynamixel is in idle state SizeThe Size of data is 1 or 2 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  2 bytes data will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      310              2      1      Firmware Version      Firmware Version      R                    3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      CounterClockwise Angle Limit      RW      4095              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      240              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36              20      2      Multi Turn Offset      Adjust Position with Offset      RW      0              22      1      Resolution Divider      Divider for Position Resolution      RW      1      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On Off      RW      0              25      1      LED      Status LED On Off      RW      0              26      1      D Gain      Derivative Gain      RW      0              27      1      I Gain      Integral Gain      RW      0              28      1      P Gain      Proportional Gain      RW      32              30      2      Goal Position      Target Position      RW                    32      2      Moving Speed      Moving Speed Moving Velocity       RW                    34      2      Torque Limit      Torque Limit Goal Torque       RW      ADD 14 amp15              36      2      Present Position      Present Position      R                    38      2      Present Speed      Present Speed      R                    40      2      Present Load      Present Load      R                    42      1      Present Voltage      Present Voltage      R                    43      1      Present Temperature      Present Temperature      R                    44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      0              68      2      Current      Consuming Current      RW      0              70      1      Torque Ctrl Mode Enable      Torque Control Mode On Off      RW      0              71      2      Goal Torque      Goal Torque      RW      0              73      1      Goal Acceleration      Goal Acceleration      RW      0      Control Table DescriptionModel Number  0 This address stores model number of the DYNAMIXEL Firmware Version  2 This address stores firmware version of the DYNAMIXEL ID  3 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate  4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate bps       Margin of Error                  1      1M      0 000%              3      500 000      0 000%              4      400 000      0 000%              7      250 000      0 000%              9      200 000      0 000%              16      115200      2 124%              34 Default       57600      0 794%              103      19200      0 160%              207      9600      0 160%      Note Less than 3% of the baud rate error margin will not affect to UART communication For BPS over 250 values             Value      Baud Rate      Margin of Error                  250      2 250 000      0 000%              251      2 500 000      0 000%              252      3 000 000      0 000%      Return Delay Time  5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       CW CCW Angle Limit 6  8 The angle limit allows the motion to be restrained The range and the unit of the value is the same as Goal Position Address 30  31    CW Angle Limit the minimum value of Goal Position Address 30  31   CCW Angle Limit the maximum value of Goal Position Address 30  31 The following three modes can be set pursuant to the value of CW and CCW             Operation Type      CW   CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0              Multiturn Mode      both are 4095      The wheel mode can be used to wheeltype operation robots since motors of the robots spin infinitely  The joint mode can be used to multijoints robot since the robots can be controlled with specific angles  Multiturn mode allows joint mode control over multiple rotations  Position range  28 672   28 672 Temperature Limit  11             Unit      Value Range                  About 1°C      0   100      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit  12  13 It is the operation range of voltage             Unit      Value Range      Description                  About 0 1V      50   250      5 0   25 0V      For example  if the value is 80  the voltage is 8V If Present Voltage 42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 Max Torque  14 It is the torque value of maximum output  0 to 1 023  0x3FF  can be used  and the unit is about 0 1% For example  Data 1 023  0x3FF  means that Dynamixel will use 100% of the maximum torque it can produce while Data 512  0x200  means that Dynamixel will use 50% of the maximum torque  When the power is turned on  Torque Limit  Address 34 and 35  uses the value as the initial value Status Return Level  16 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Alarm LED 17   Shutdown 18 Dynamixel can protect itself by detecting errors occur during the operation The errors can be set are as the table below             Bit      Item      Description                  Bit 7      0                    Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’  That is  if 0x05  binary 00000101  is set  both Input Voltage Error and Overheating Error can be detected If errors occur  in case of Alarm LED  the LED blinks in case of Alarm Shutdown  the motor output becomes 0 % by resetting the value of Torque Limit 34  to 0 Multi Turn Offset  20 Adjusts offset position  This offset value is added to the Present Position 36  Initial value is 0 and the range is from 24 576 to 24 576 Dynamixel with a Present position of 2 048 with an offset of 1 024 will return an adjusted Present position of 3 072 Note This offset feature is only available in multiturn mode Resolution Divider  22 It allows the user to change Dynamixel’s resolution The default Resolution Divider Value is set as 1   1   4 available When resolution is lowered  revolutions  in both directions  can be increased  up to 28 turns in each direction  Present Position   Real Position   Resolution DividerFor example  a Real Position of 2048 with a Resolution Divider set as 2 will yield a Present Position value of 1024  2048 2   1024   A Dynamixel with Resolution Divider set as 2 will have a resolution 2048 for a single revolution The Present Position can be obtained while Multiturn Offset and Resolution Divider are taken into account Present position    Real Position   Resolution Divider    Multiturn OffsetFor example  a Dynamixel with a Real Position of 2048 with a Resolution Divider set as 4 and Multiturn Offset as 1024 will yield a Present Position of 1535   2048 4    1024   1535  Note This feature is only applied in multiturn mode and will be ignored in other modes Torque Enable  24             Value      Description                  0      Turn off the torque Free run state               1      Turn on the torque and lock EEPROM area      LED  25 Turn on or turn off the LED on Dynamixel             Bit      Description                  0 Default       Turn OFF the LED              1      Turn ON the LED      PID Gains  26  27  28 MX series will use the PID controller as a main control method P gain  value of proportional band I gain  value of integral action D Gain  value of derivative action Gains values are in between 0 254 Kp   P Gain   8Ki   I Gain   1 000   2 048Kd   D Gain   4   1 000The relationship between Compliance Slop and PID            Slope      P Gain                  8      128              16      64              32      32              64      16              128      8      The less the P gain  The larger the back lash  and the weaker the amount of output near goal position At some extent  it is like a combined concept of margine and slope It does not exactly match the previous concept of compliance  So it is obvious if you see the difference in terms of motion Explanation for PID required For the brief explanation about general PID  please refer to the website link  below http  en wikipedia org wiki PID_controllerFYI  PID control theory is not only limited to the control of motor actuator  but is a generic theory that can be applied to all kinds of control Goal Position  30 It is a position value of destination 0 to 4 095  0xFFF  is available   The unit is 0 088° If Goal Position is out of the range  Angle Limit Error Bit  Bit1  of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED Shutdown The picture above is the front view of DynamixelIn multiturn mode Dynamixel has a range from 28 672 to 28 672  can turn up to 7 revolutions in either CW or CCW direction  When resolution divider is set to a different value revolutions can increase Note If it is set to Wheel Mode  Goal Position value is not used Moving Speed  32       Join Mode  MultiTurn modeIt is a moving speed to Goal Position 0 1023  0X3FF  can be used  and the unit is about 0 114rpm If it is set to 0  it means the maximum rpm of the motor is used without controlling the speed If it is 1023  it is about 116 62rpm For example  if it is set to 300  it is about 34 2 rpm However  the rpm will not exceed the No Load Speed         Wheel ModeIt is a moving speed to Goal direction 0 2047  0X7FF  can be used  and the unit is about 0 114rpm If a value in the range of 0 1023 is used  it is stopped by setting to 0 while rotating to CCW direction If a value in the range of 1024 2047 is used  it is stopped by setting to 1024 while rotating to CW direction That is  the 10th bit becomes the direction bit to control the direction     Note Wheel mode allows to check max rpm  Any values higher than max rpm will not take effect   Torque Limit  34 It is the value of the maximum torque limit 0   1 023 0x3FF  is available  and the unit is about 0 1% For example  if the value is 512  it is about 50% that means only 50% of the maximum torque will be used If the power is turned on  the value of Max Torque  Address 14  15  is used as the initial value Note If the function of Alarm Shutdown is triggered  the motor loses its torque because the value becomes 0  Once error conditions are resolved and this value is changed to the value other than 0  the motor can be operated again Present Position  36 It is the current position value of Dynamixel The range of the value is 0 4095  0xFFF   and the unit is 0 088 degree The picture above is the front view of Dynamixel In multiturn mode  the range is from 28672 to 28672 with unit values dependent on Resolution Divider  0 088   Resolution Divider Note In multiturn mode  Present position depends on resolution divider and multiturn offset For more information turn to the section on Multi Turn offset and Resolution Divider Present Speed  38 Is the current moving speed 0   2 047  0x000   0x7FF  can be used If a value is in the rage of 0   1 023 then the motor rotates to the CCW direction If a value is in the rage of 1 024   2 047 then the motor rotates to the CW direction The 10th bit becomes the direction bit to control the direction 0 and 1 024 are equal The value unit is about 0 11rpm For example  if it is set to 300 then the motor is moving to the CCW direction at a rate of about 34 33rpm Present Load  40 It means currently applied load The range of the value is 0 2047  and the unit is about 0 1% If the value is 0 1 023  it means the load works to the CCW direction If the value is 1 024 2 047  it means the load works to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 1 024 is equal to 0 For example  the value is 512  it means the load is detected in the direction of CCW about 50% of the maximum torque             Bit      15   11      10      9   0                  Value      0      Load Direction      Data  Load Ratio       Note CCW Load  Load Direction   0  CW Load  Load Direction   1Note Present load is an inferred value based on the internal output value not a measured value using torque sensor  etc  Therefore  it may be inaccurate for measuring weight or torque  It is recommended to use it for predicting the direction and size of the force being applied to the joint Present Voltage  42 It is the size of the present voltage supplied This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 If Present Voltage 42  value is out of range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18 Present Temperature  43 It is the internal temperature of Dynamixel in Celsius Data value is identical to the actual temperature in Celsius  For example  if the data value is 85  0x55   the current internal temperature is 85°C Registered Instruction  44             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Moving  46             Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock  47             Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 Punch  48 Minimum current to drive motor  This value ranges from 0x20 to 0x3FF Current  68 At an idle state without current flow  this value is 2 048 0x800  When positive current flows  this value becomes larger than 2 048 0x800  while negative current flow returns a value smaller than 2 048 0x800  The following is current flow calculation formula I     4 5mA      CURRENT – 2048   in amps unit  A  For example  68 gives a value of 2148  which corresponds to 450mA of current flow Torque Control Mode Enable  70             Value      Meaning                  0      Turn off the torque mode  Executes Joint mode or Wheel mode              1      Turn on the torque mode  Cannot control the position or moving speed but only Torque      When Torque Control Mode Enable is 1  DYNAMIXEL behaves like the followings  DYNAMIXEL does not control position or velocity   DYNAMIXEL is controlled by the Goal Torque value   DYNAMIXEL does not affected by the Goal position and Goal speed values   Since position moving speed is not controlled  DYNAMIXEL behaves as if it is in the wheel mode Goal Torque  71 You can use 0   2 047  0x7FF  and the unit is 4 5mA  Torque is directly proportional to the current value  If you use a value between 0   1 023  torque is applied to the CCW direction  and setting it to 0 will stops If you use a value between 1 024   2 047  torque is applied to the CW direction  and setting it to 1 024 will stops That means  10th bit becomes the CW CCW direction bit  which controls rotational direction Goal Torque cannot be bigger than Torque Limit 34 35  Goal Acceleration  73 This is Goal Acceleration value It can be used from 0 254 0XFE  and the unit is approximately 8 583°   sec2 When it is set to 0  there is no control over acceleration and moves with the maximum acceleration of the motor When the goal speead is set to 0  there is no control over acceleration and moves with the maximum acceleration of the motor When it is set to 254  it becomes 2 180°   sec2 For example  the current speed of Dynamixel is 0  and Goal acceleration is 10 The speed of Dynamixel after 1 second will be 14 3 RPM How to AssembleOptional Frames      FR05B101        FR05F101 and FR05X101        FR05H101        FR05S101  Horns      HN05I102        HN05N101  Combination StructuresMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideVideosQuick StartDrawingsDownload MX64TDownload MX64R",
      "url": "http://0.0.0.0:4000/docs/en/dxl/mx/mx-64/"
      } ,
  
  
      "docs-en-dxl-pro-h42-20-s300-r":  {
      "title": "H42-20-S300-R",
      "content"	 : "H4220S300RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps   10 5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      340g  11 9oz               Dimensions  W x H x D       42mm x 84mm x 42mm  1 65 x 3 31 x 1 65               Resolution      303 750 steps rev              Gear Ratio      303 8  1              Backlash      3 8arcmin  0 06°               No Load Speed      32 7rpm              No Load Current      0 57A              Continuous Speed      29 2rpm              Continuous Torque      5 1Nm  722 ozfin               Continuous Current      1 5A              Output      20W              Operating Temperature      5°C   55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multidrop BUS              ID      0   252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different  Stall torque is measured from the max torque that it can reach  This is generally how RC servos measure their torque  For the Performance graph with the NT curves  it is measured with the load gradually increasing  The motor operation environment is closer to the performance graph  not stall torque method  This is probably why the performance graph is being broadly used in the industrial market  This is why the max torque of the performance grap can actually be less than the stall torque Caution When connecting to power supply  it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL Do not connect or disconnect DYNAMIXEL when power is being supplied Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 2 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the power is reset Volatile   On the other hand  data in the EEPROM Area is maintained even when the DYNAMIXEL is powered off NonVolatile   Data in the EEPROM Area can only be written to if Torque Enable 64  is cleared to ‘0’ Off  SizeThe Size of data varies from 1 to 4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  For data larger than 2 bytes will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      51200              2      4      Model Information      Model Information      R                    6      1      Firmware Version      Firmware Version      R                    7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW                    30      2      Torque Limit      Maximum Torque Limit      RW                    32      4      Velocity Limit      Maximum Velocity Limit      RW                    36      4      Max Position Limit      Maximum Position Limit      RW                    40      4      Min Position Limit      Minimum Position Limit      RW                    44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW                    588      2      Velocity P Gain      P Gain of Velocity      RW                    594      2      Position P Gain      P Gain of Position      RW                    596      4      Goal Position      Target Position Value      RW                    600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R                    611      4      Present Position      Present Position Value      R                    615      4      Present Velocity      Present Velocity Value      R                    621      2      Present Current      Present Current Value      R                    623      2      Present Input Voltage      Present Input Voltage      R                    625      1      Present Temperature      Present Internal Temperature      R                    626      2      External Port Data 1      External Port Data 1      R RW      0              628      2      External Port Data 2      External Port Data 2      R RW      0              630      2      External Port Data 3      External Port Data 3      R RW      0              632      2      External Port Data 4      External Port Data 4      R RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable 562  is cleared to ‘0’ Model Number 0 This address stores model number of the DYNAMIXEL             Model Name      Model Number                  H4220S300R      51200  0xC800       Firmware Version 6 This address stores firmware version of the DYNAMIXEL ID 7 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate 8 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate                  8      10 5M              7      4 5M              6      4M              5      3M              4      2M              3      1M              2      115 200              1 Default       57 600              0      9 600      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time 9 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       Operating Mode 11             Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque  Speed and Position will not be controlled               1      Velocity Control Mode      This mode controls Velocity and Torque  Position will not be controlled               3 Default       Position Control Mode      This mode controls Position  Velocity and Torque               4      Extended Position Control Mode      This mode controls Position  Velocity and Torque  Multiturn is enabled       Homing Offset 13 Users can adjust the Home position by setting Homing Offset 13   The Homing Offset value is added to the Present Position 611  Present Position 611    Actual Position   Homing Offset 13              Value Range                  2 147 483 648   2 147 483 647      Moving Threshold 17 If Present Velocity 615  is bigger than this value  Moving 610  is set to ‘1’ and otherwise Moving 610  is cleared to ‘0’  This value determines whether Dynamixel is in motion or not             Value Range                  0   2 147 483 647      Temperature Limit 21 This value limits operating temperature  When the Present Temperature 625  that indicates internal temperature of Dynamixel is greater than the Temperature Limit 21   the Over Heating Error Bit Bit 2  in the Hardware Error Status 892  will be set  If Overheating Error Bit Bit 2  is configured in the Shutdown 48  when Over Heating Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 1°      0   100      0   100°      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit 22  24 These values are maximum and minimum operating voltages When current input voltage acquired from Present Input Voltage 623  exceeds the range of Max Voltage Limit 36  and Min Voltage Limit 40   Input Voltage Error Bit Bit 0  in the Hardware Error Status 892  will be set to ‘1’  If Input Voltage Error Bit Bit 0  is configured in the Shutdown 48  when Input Voltage Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 0 1V      0   400      0   40 0V      Acceleration Limit 26 This value indicates acceleration limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Torque Limit 30 This value indicates torque limit  Goal Torque 604  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   32 767      Velocity Limit 32 This value indicates velocity limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Min Max Position Limit 36  40 These values limit maximum and minimum target positions  The Goal Position 596  can’t exceed these values Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet  In Extended Position Control Mode  these limits will be ignored             Model Name      Value Range                  H54200S500RH54100S500R      250 961   250 961              H4220S300R      151 875   151 875              M5460S250RM5440S250R      125 708   125 708              M4210S260R      131 593   131 593              L5450S290R      103 846   103 846              L5450S500RL5430S500R      180 692   180 692              L5430S400R      144 197   144 197      External Port Mode  External Port DataDynamixel PRO is equipped with multipurpose expansion ports             Item      Range                  Voltage      0   3 3V              Current      0   5mA        Analog input mode analog values from an external port get converted to digital  These values are automatically updated in External port data 626   632    Output mode can adjust external port voltage 0V or 3 3V  External port data value of 0 is 0V  1 for 3 3V   Pullup input mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pullup  Depending on needs an external strong pullup is acceptable   Pullup output mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pulldown  Depending on needs an external strong pulldown is acceptable External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector             Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3 3V      PORT1      PORT2      PORT3      PORT4      Shutdown 48 The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation  Each Bit is inclusively processed with the ‘OR’ logic  therefore  multiple options can be generated  For instance  when ‘0x05’  binary  00000101  is defined as Shutdown 48   Dynamixel can detect both Input Voltage Error binary  00000001  and Overheating Error binary  00000100   If those errors are detected  Torque Enable 562  is cleared to ‘0’ and the motor output becomes 0 %   In order to reuse Dynamixel Pro in shutdown status  REBOOT has to be done  The followings are detectable situations             Bit      Item      Description                  Bit 7                          Bit 6                          Bit 5      Overload Error default       Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error default       Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error default       Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs  use below method to reboot Dynamixels   H W REBOOT  Turn off the power and turn on again  S W REBOOT  Transmit REBOOT Instruction  For more details  please refer to the Protocol section of eManual  Indirect Address  Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses  Sequential addresses increase Instruction Packet efficiency  Addresses that can be defined as Indirect Address is limited to RAM area Address 562   892  If specific address is allocated to Indirect Address  Indirect Address inherits features and properties of the Data from the specific Address  Property includes Size Byte length   value range  and Access property Read Only  Read Write   For instance  if address 563 LED Red  is allocated to Indirect Address 1 49   Indirect Data 1 634  will have the exactly same value of LED Red 563  Example 1 Allocating 1 byte LED 563  to Indirect Data 1 634    Indirect Address 1 49   change the value to ‘563’ which is the address of LED Red   Set Indirect Data 1 634  to ‘1’  LED Red 563  also becomes ‘1’ and Red LED will be turned on   Set Indirect Data 1 634  to ‘0’  LED Red 563  also becomes ‘0’ and Red LED will be turned off Example 2 Allocating Size 4 byte Goal Position 596  to Indirect Data 2 635   4 sequential bytes have to be allocated   Indirect Address 2 51   change the value to ‘596’ which is the first address of Goal Position   Indirect Address 3 53   change the value to ‘597’ which is the second address of Goal Position   Indirect Address 4 55   change the value to ‘598’ which is the third address of Goal Position   Indirect Address 5 57   change the value to ‘599’ which is the fourth address of Goal Position   Set 4 byte value 305 419 896 0x12345678  to Indirect Data 2  Goal Position 596  also becomes 305 419 896 0x12345678  as below             Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2 byte  to Indirect Address  all address must be allocated to Indirect Address like the above Example 2 Note Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0 Torque Enable 562 Controls Torque ON OFF  Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected             Value      Description                  0 Default       Torque OFF Freerun  and the motor does not generate torque              1      Torque ON and all Data in the EEPROM area will be locked      Note Present Position 132  can be reset when Operating Mode 11  and Torque Enable 64  are updated  For more details  please refer to the Homing Offset 20  and Present Position 132  RGB LED 563 Controls the RGB LED on Dynamixel PRO             Address      Color      Range                  563      Red      0   255              564      Green      0   255              565      Blue      0   255      Velocity PI Gain 586  588 These values indicate P and I Gains of Velocity Control Mode  The I Gain includes sampling time  Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI             Gain Value Range                  0   32 767      Note KPA stands for Antiwindup Gain that cannot be modified by users  For more details about the PID controller  please refer to the PID Controller at wikipedia Position P Gain 594 This P Gain is used in Position Control Mode  Below figure is a block diagram describing the Position Control Mode  The Position Controller is cascaded with the Velocity Controller  KPP stands for Position P Gain             Gain Value Range                  0   32 767      Goal Position 596   Present Position 611 Target position can be set with Goal Position 596   This value can’t be smaller than the Min Position Limit 40  or larger than Max Position Limit 36              Model      Angle Range      Position Range      Description                  H54200S500RH54100S500R      180°   180 °      250 961 5   250 961 5                    H4220S300R      180°   180 °      151 875   151 875            Goal Velocity 600 Goal Velocity 600  can be used to set a target velocity and this value cannot exceed Velocity Limit  32  In case of Position Control Mode or Extended Position Control Mode  Goal Velocity will be used to limit the velocity However  if Goal Velocity is set to ‘0’  Velocity Limit 32  will be used to limit the velocity   Please refer to the block diagram of Position P Gain The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor Output RPM   Goal Velocity   Scale Factor            Model      Scale Factor RPM                   H54200S500RH54100S500R      0 00199234              H4220S300R      0 00329218              M5460S250RM5440S250R      0 00397746              M4210S260R      0 00389076              L5450S290R      0 00346667              L5450S500RL5430S500R      0 00199234              L5430S400R      0 00249657      Goal Torque 604 Goal torque  604  can be used to set a target torque and this value cannot exceed Torque Limit 30  When the Operating Mode 11  is set other than Torque Control Mode  Goal Torque will be used to limit the torque However  if Goal Torque is set to ‘0’  Torque Limit 30  will be used to limit the torque   Please refer to the block diagram of Position Gain or Velocity Gain The relationship between torque  current  and goal torque is shown below             Model      Formula                  PRO 54      A   V   33 000   2 048A  Current mA V  Present Current Goal Torque              PRO 42      A   V   8 250   2 048A  Current mA V  Present Current Goal Torque      Goal Acceleration 606 Goal Acceleration 606  can be used to set a target acceleration  This value is used in Velocity Control Mode  Position Control Mode and Extended Position Control Mode  The profile control will be enabled when both Goal Acceleration 606  and Goal Velocity 600  are not ‘0’ Please refer to the Goal Velocity 600  for RPM conversion constant             Value Range      Unit                  2 147 483 647   2 147 483 647      58 000 RPM2 @ Core Motor      Moving 610 This value indicates whether Dynamixel Pro is in motion or not  If absolute value of Present Velocity 615  is greater than Moving Threshold 17   Moving 610  is set to ‘1’  Otherwise  it will be cleared to ‘0’  However  this value will always be set to ‘1’ regardless of Present Velocity 615  while Profile is in progress with Goal Position 596  instruction             Value      Description                  0      Movement is not detected              1      Movement is detected  or Profile is in progress Goal Position 596  instruction is being processed       Present Velocity 615 This value indicates present Velocity  For more details  please refer to the Goal Velocity 600  Present Current 621 This value indicates present Current  For more details  please refer to the Goal Torque 604  Present Input Voltage 623 This value indicates present voltage that is being supplied  For more details  please refer to the Min Max Voltage Limit 24  22  Present Temperature 625 This value indicates present internal Temperature  For more details  please refer to the Temperature Limit 21  Registered Instruction 890             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Status Return Level 891 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Hardware Error Status 892 This value indicates hardware error status  For more details  please refer to the Shutdown 48  How to AssembleOption Frame Assembly  FRP42H110K  FRP42H120K SetMaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF  DWG  STEP  IGES",
      "url": "http://0.0.0.0:4000/docs/en/dxl/pro/h42-20-s300-r/"
      } ,
  
  
      "docs-en-dxl-pro-h54-100-s500-r":  {
      "title": "H54-100-S500-R",
      "content"	 : "H54100S500RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps   10 5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      732g  25 8oz               Dimensions  W x H x D       54mm x 108mm x 54mm  2 13 x 4 25 x 2 13               Resolution      501 923 steps rev              Gear Ratio      501 9  1              Backlash      3 5arcmin  0 06°               No Load Speed      33 3rpm              No Load Current      1 13A              Continuous Speed      29 2rpm              Continuous Torque      25 3Nm  3 582 ozfin               Continuous Current      5 5A              Output      100W              Operating Temperature      5°C   55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multidrop BUS              ID      0   252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different  Stall torque is measured from the max torque that it can reach  This is generally how RC servos measure their torque  For the Performance graph with the NT curves  it is measured with the load gradually increasing  The motor operation environment is closer to the performance graph  not stall torque method  This is probably why the performance graph is being broadly used in the industrial market  This is why the max torque of the performance grap can actually be less than the stall torque Caution When connecting to power supply  it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL Do not connect or disconnect DYNAMIXEL when power is being supplied Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 2 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the power is reset Volatile   On the other hand  data in the EEPROM Area is maintained even when the DYNAMIXEL is powered off NonVolatile   Data in the EEPROM Area can only be written to if Torque Enable 64  is cleared to ‘0’ Off  SizeThe Size of data varies from 1 to 4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  For data larger than 2 bytes will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      53768              2      4      Model Information      Model Information      R                    6      1      Firmware Version      Firmware Version      R                    7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW                    30      2      Torque Limit      Maximum Torque Limit      RW                    32      4      Velocity Limit      Maximum Velocity Limit      RW                    36      4      Max Position Limit      Maximum Position Limit      RW                    40      4      Min Position Limit      Minimum Position Limit      RW                    44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW                    588      2      Velocity P Gain      P Gain of Velocity      RW                    594      2      Position P Gain      P Gain of Position      RW                    596      4      Goal Position      Target Position Value      RW                    600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R                    611      4      Present Position      Present Position Value      R                    615      4      Present Velocity      Present Velocity Value      R                    621      2      Present Current      Present Current Value      R                    623      2      Present Input Voltage      Present Input Voltage      R                    625      1      Present Temperature      Present Internal Temperature      R                    626      2      External Port Data 1      External Port Data 1      R RW      0              628      2      External Port Data 2      External Port Data 2      R RW      0              630      2      External Port Data 3      External Port Data 3      R RW      0              632      2      External Port Data 4      External Port Data 4      R RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable 562  is cleared to ‘0’ Model Number 0 This address stores model number of the DYNAMIXEL             Model Name      Model Number                  H54100S500R      53768  0xD208       Firmware Version 6 This address stores firmware version of the DYNAMIXEL ID 7 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate 8 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate                  8      10 5M              7      4 5M              6      4M              5      3M              4      2M              3      1M              2      115 200              1 Default       57 600              0      9 600      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time 9 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       Operating Mode 11             Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque  Speed and Position will not be controlled               1      Velocity Control Mode      This mode controls Velocity and Torque  Position will not be controlled               3 Default       Position Control Mode      This mode controls Position  Velocity and Torque               4      Extended Position Control Mode      This mode controls Position  Velocity and Torque  Multiturn is enabled       Homing Offset 13 Users can adjust the Home position by setting Homing Offset 13   The Homing Offset value is added to the Present Position 611  Present Position 611    Actual Position   Homing Offset 13              Value Range                  2 147 483 648   2 147 483 647      Moving Threshold 17 If Present Velocity 615  is bigger than this value  Moving 610  is set to ‘1’ and otherwise Moving 610  is cleared to ‘0’  This value determines whether Dynamixel is in motion or not             Value Range                  0   2 147 483 647      Temperature Limit 21 This value limits operating temperature  When the Present Temperature 625  that indicates internal temperature of Dynamixel is greater than the Temperature Limit 21   the Over Heating Error Bit Bit 2  in the Hardware Error Status 892  will be set  If Overheating Error Bit Bit 2  is configured in the Shutdown 48  when Over Heating Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 1°      0   100      0   100°      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit 22  24 These values are maximum and minimum operating voltages When current input voltage acquired from Present Input Voltage 623  exceeds the range of Max Voltage Limit 36  and Min Voltage Limit 40   Input Voltage Error Bit Bit 0  in the Hardware Error Status 892  will be set to ‘1’  If Input Voltage Error Bit Bit 0  is configured in the Shutdown 48  when Input Voltage Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 0 1V      0   400      0   40 0V      Acceleration Limit 26 This value indicates acceleration limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Torque Limit 30 This value indicates torque limit  Goal Torque 604  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   32 767      Velocity Limit 32 This value indicates velocity limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Min Max Position Limit 36  40 These values limit maximum and minimum target positions  The Goal Position 596  can’t exceed these values Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet  In Extended Position Control Mode  these limits will be ignored             Model Name      Value Range                  H54200S500RH54100S500R      250 961   250 961              H4220S300R      151 875   151 875              M5460S250RM5440S250R      125 708   125 708              M4210S260R      131 593   131 593              L5450S290R      103 846   103 846              L5450S500RL5430S500R      180 692   180 692              L5430S400R      144 197   144 197      External Port Mode  External Port DataDynamixel PRO is equipped with multipurpose expansion ports             Item      Range                  Voltage      0   3 3V              Current      0   5mA        Analog input mode analog values from an external port get converted to digital  These values are automatically updated in External port data 626   632    Output mode can adjust external port voltage 0V or 3 3V  External port data value of 0 is 0V  1 for 3 3V   Pullup input mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pullup  Depending on needs an external strong pullup is acceptable   Pullup output mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pulldown  Depending on needs an external strong pulldown is acceptable External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector             Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3 3V      PORT1      PORT2      PORT3      PORT4      Shutdown 48 The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation  Each Bit is inclusively processed with the ‘OR’ logic  therefore  multiple options can be generated  For instance  when ‘0x05’  binary  00000101  is defined as Shutdown 48   Dynamixel can detect both Input Voltage Error binary  00000001  and Overheating Error binary  00000100   If those errors are detected  Torque Enable 562  is cleared to ‘0’ and the motor output becomes 0 %   In order to reuse Dynamixel Pro in shutdown status  REBOOT has to be done  The followings are detectable situations             Bit      Item      Description                  Bit 7                          Bit 6                          Bit 5      Overload Error default       Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error default       Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error default       Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs  use below method to reboot Dynamixels   H W REBOOT  Turn off the power and turn on again  S W REBOOT  Transmit REBOOT Instruction  For more details  please refer to the Protocol section of eManual  Indirect Address  Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses  Sequential addresses increase Instruction Packet efficiency  Addresses that can be defined as Indirect Address is limited to RAM area Address 562   892  If specific address is allocated to Indirect Address  Indirect Address inherits features and properties of the Data from the specific Address  Property includes Size Byte length   value range  and Access property Read Only  Read Write   For instance  if address 563 LED Red  is allocated to Indirect Address 1 49   Indirect Data 1 634  will have the exactly same value of LED Red 563  Example 1 Allocating 1 byte LED 563  to Indirect Data 1 634    Indirect Address 1 49   change the value to ‘563’ which is the address of LED Red   Set Indirect Data 1 634  to ‘1’  LED Red 563  also becomes ‘1’ and Red LED will be turned on   Set Indirect Data 1 634  to ‘0’  LED Red 563  also becomes ‘0’ and Red LED will be turned off Example 2 Allocating Size 4 byte Goal Position 596  to Indirect Data 2 635   4 sequential bytes have to be allocated   Indirect Address 2 51   change the value to ‘596’ which is the first address of Goal Position   Indirect Address 3 53   change the value to ‘597’ which is the second address of Goal Position   Indirect Address 4 55   change the value to ‘598’ which is the third address of Goal Position   Indirect Address 5 57   change the value to ‘599’ which is the fourth address of Goal Position   Set 4 byte value 305 419 896 0x12345678  to Indirect Data 2  Goal Position 596  also becomes 305 419 896 0x12345678  as below             Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2 byte  to Indirect Address  all address must be allocated to Indirect Address like the above Example 2 Note Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0 Torque Enable 562 Controls Torque ON OFF  Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected             Value      Description                  0 Default       Torque OFF Freerun  and the motor does not generate torque              1      Torque ON and all Data in the EEPROM area will be locked      Note Present Position 132  can be reset when Operating Mode 11  and Torque Enable 64  are updated  For more details  please refer to the Homing Offset 20  and Present Position 132  RGB LED 563 Controls the RGB LED on Dynamixel PRO             Address      Color      Range                  563      Red      0   255              564      Green      0   255              565      Blue      0   255      Velocity PI Gain 586  588 These values indicate P and I Gains of Velocity Control Mode  The I Gain includes sampling time  Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI             Gain Value Range                  0   32 767      Note KPA stands for Antiwindup Gain that cannot be modified by users  For more details about the PID controller  please refer to the PID Controller at wikipedia Position P Gain 594 This P Gain is used in Position Control Mode  Below figure is a block diagram describing the Position Control Mode  The Position Controller is cascaded with the Velocity Controller  KPP stands for Position P Gain             Gain Value Range                  0   32 767      Goal Position 596   Present Position 611 Target position can be set with Goal Position 596   This value can’t be smaller than the Min Position Limit 40  or larger than Max Position Limit 36              Model      Angle Range      Position Range      Description                  H54200S500RH54100S500R      180°   180 °      250 961 5   250 961 5                    H4220S300R      180°   180 °      151 875   151 875            Goal Velocity 600 Goal Velocity 600  can be used to set a target velocity and this value cannot exceed Velocity Limit  32  In case of Position Control Mode or Extended Position Control Mode  Goal Velocity will be used to limit the velocity However  if Goal Velocity is set to ‘0’  Velocity Limit 32  will be used to limit the velocity   Please refer to the block diagram of Position P Gain The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor Output RPM   Goal Velocity   Scale Factor            Model      Scale Factor RPM                   H54200S500RH54100S500R      0 00199234              H4220S300R      0 00329218              M5460S250RM5440S250R      0 00397746              M4210S260R      0 00389076              L5450S290R      0 00346667              L5450S500RL5430S500R      0 00199234              L5430S400R      0 00249657      Goal Torque 604 Goal torque  604  can be used to set a target torque and this value cannot exceed Torque Limit 30  When the Operating Mode 11  is set other than Torque Control Mode  Goal Torque will be used to limit the torque However  if Goal Torque is set to ‘0’  Torque Limit 30  will be used to limit the torque   Please refer to the block diagram of Position Gain or Velocity Gain The relationship between torque  current  and goal torque is shown below             Model      Formula                  PRO 54      A   V   33 000   2 048A  Current mA V  Present Current Goal Torque              PRO 42      A   V   8 250   2 048A  Current mA V  Present Current Goal Torque      Goal Acceleration 606 Goal Acceleration 606  can be used to set a target acceleration  This value is used in Velocity Control Mode  Position Control Mode and Extended Position Control Mode  The profile control will be enabled when both Goal Acceleration 606  and Goal Velocity 600  are not ‘0’ Please refer to the Goal Velocity 600  for RPM conversion constant             Value Range      Unit                  2 147 483 647   2 147 483 647      58 000 RPM2 @ Core Motor      Moving 610 This value indicates whether Dynamixel Pro is in motion or not  If absolute value of Present Velocity 615  is greater than Moving Threshold 17   Moving 610  is set to ‘1’  Otherwise  it will be cleared to ‘0’  However  this value will always be set to ‘1’ regardless of Present Velocity 615  while Profile is in progress with Goal Position 596  instruction             Value      Description                  0      Movement is not detected              1      Movement is detected  or Profile is in progress Goal Position 596  instruction is being processed       Present Velocity 615 This value indicates present Velocity  For more details  please refer to the Goal Velocity 600  Present Current 621 This value indicates present Current  For more details  please refer to the Goal Torque 604  Present Input Voltage 623 This value indicates present voltage that is being supplied  For more details  please refer to the Min Max Voltage Limit 24  22  Present Temperature 625 This value indicates present internal Temperature  For more details  please refer to the Temperature Limit 21  Registered Instruction 890             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Status Return Level 891 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Hardware Error Status 892 This value indicates hardware error status  For more details  please refer to the Shutdown 48  How to AssembleOption Frame Assembly      FRP54H110K  FRP54H120K Set        FRP54H210K  FRP54H220K Set  MaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF  DWG  STEP  IGES",
      "url": "http://0.0.0.0:4000/docs/en/dxl/pro/h54-100-s500-r/"
      } ,
  
  
      "docs-en-dxl-pro-h54-200-s500-r":  {
      "title": "H54-200-S500-R",
      "content"	 : "H54200S500RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps   10 5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      855g  30 1oz               Dimensions  W x H x D       54mm x 126mm x 54mm  2 13 x 4 96 x 2 13               Resolution      501 923 steps rev              Gear Ratio      501 9  1              Backlash      3 5arcmin  0 06°               No Load Speed      33 1rpm              No Load Current      1 65A              Continuous Speed      29 0rpm              Continuous Torque      44 7Nm  6 330 ozfin               Continuous Current      9 3A              Output      200W              Operating Temperature      5°C   55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multidrop BUS              ID      0   252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different  Stall torque is measured from the max torque that it can reach  This is generally how RC servos measure their torque  For the Performance graph with the NT curves  it is measured with the load gradually increasing  The motor operation environment is closer to the performance graph  not stall torque method  This is probably why the performance graph is being broadly used in the industrial market  This is why the max torque of the performance grap can actually be less than the stall torque Caution When connecting to power supply  it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL Do not connect or disconnect DYNAMIXEL when power is being supplied Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 2 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the power is reset Volatile   On the other hand  data in the EEPROM Area is maintained even when the DYNAMIXEL is powered off NonVolatile   Data in the EEPROM Area can only be written to if Torque Enable 64  is cleared to ‘0’ Off  SizeThe Size of data varies from 1 to 4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  For data larger than 2 bytes will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      54024              2      4      Model Information      Model Information      R                    6      1      Firmware Version      Firmware Version      R                    7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW                    30      2      Torque Limit      Maximum Torque Limit      RW                    32      4      Velocity Limit      Maximum Velocity Limit      RW                    36      4      Max Position Limit      Maximum Position Limit      RW                    40      4      Min Position Limit      Minimum Position Limit      RW                    44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW                    588      2      Velocity P Gain      P Gain of Velocity      RW                    594      2      Position P Gain      P Gain of Position      RW                    596      4      Goal Position      Target Position Value      RW                    600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R                    611      4      Present Position      Present Position Value      R                    615      4      Present Velocity      Present Velocity Value      R                    621      2      Present Current      Present Current Value      R                    623      2      Present Input Voltage      Present Input Voltage      R                    625      1      Present Temperature      Present Internal Temperature      R                    626      2      External Port Data 1      External Port Data 1      R RW      0              628      2      External Port Data 2      External Port Data 2      R RW      0              630      2      External Port Data 3      External Port Data 3      R RW      0              632      2      External Port Data 4      External Port Data 4      R RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable 562  is cleared to ‘0’ Model Number 0 This address stores model number of the DYNAMIXEL             Model Name      Model Number                  H54200S500R      54024  0xD308       Firmware Version 6 This address stores firmware version of the DYNAMIXEL ID 7 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate 8 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate                  8      10 5M              7      4 5M              6      4M              5      3M              4      2M              3      1M              2      115 200              1 Default       57 600              0      9 600      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time 9 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       Operating Mode 11             Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque  Speed and Position will not be controlled               1      Velocity Control Mode      This mode controls Velocity and Torque  Position will not be controlled               3 Default       Position Control Mode      This mode controls Position  Velocity and Torque               4      Extended Position Control Mode      This mode controls Position  Velocity and Torque  Multiturn is enabled       Homing Offset 13 Users can adjust the Home position by setting Homing Offset 13   The Homing Offset value is added to the Present Position 611  Present Position 611    Actual Position   Homing Offset 13              Value Range                  2 147 483 648   2 147 483 647      Moving Threshold 17 If Present Velocity 615  is bigger than this value  Moving 610  is set to ‘1’ and otherwise Moving 610  is cleared to ‘0’  This value determines whether Dynamixel is in motion or not             Value Range                  0   2 147 483 647      Temperature Limit 21 This value limits operating temperature  When the Present Temperature 625  that indicates internal temperature of Dynamixel is greater than the Temperature Limit 21   the Over Heating Error Bit Bit 2  in the Hardware Error Status 892  will be set  If Overheating Error Bit Bit 2  is configured in the Shutdown 48  when Over Heating Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 1°      0   100      0   100°      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit 22  24 These values are maximum and minimum operating voltages When current input voltage acquired from Present Input Voltage 623  exceeds the range of Max Voltage Limit 36  and Min Voltage Limit 40   Input Voltage Error Bit Bit 0  in the Hardware Error Status 892  will be set to ‘1’  If Input Voltage Error Bit Bit 0  is configured in the Shutdown 48  when Input Voltage Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 0 1V      0   400      0   40 0V      Acceleration Limit 26 This value indicates acceleration limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Torque Limit 30 This value indicates torque limit  Goal Torque 604  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   32 767      Velocity Limit 32 This value indicates velocity limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Min Max Position Limit 36  40 These values limit maximum and minimum target positions  The Goal Position 596  can’t exceed these values Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet  In Extended Position Control Mode  these limits will be ignored             Model Name      Value Range                  H54200S500RH54100S500R      250 961   250 961              H4220S300R      151 875   151 875              M5460S250RM5440S250R      125 708   125 708              M4210S260R      131 593   131 593              L5450S290R      103 846   103 846              L5450S500RL5430S500R      180 692   180 692              L5430S400R      144 197   144 197      External Port Mode  External Port DataDynamixel PRO is equipped with multipurpose expansion ports             Item      Range                  Voltage      0   3 3V              Current      0   5mA        Analog input mode analog values from an external port get converted to digital  These values are automatically updated in External port data 626   632    Output mode can adjust external port voltage 0V or 3 3V  External port data value of 0 is 0V  1 for 3 3V   Pullup input mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pullup  Depending on needs an external strong pullup is acceptable   Pullup output mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pulldown  Depending on needs an external strong pulldown is acceptable External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector             Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3 3V      PORT1      PORT2      PORT3      PORT4      Shutdown 48 The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation  Each Bit is inclusively processed with the ‘OR’ logic  therefore  multiple options can be generated  For instance  when ‘0x05’  binary  00000101  is defined as Shutdown 48   Dynamixel can detect both Input Voltage Error binary  00000001  and Overheating Error binary  00000100   If those errors are detected  Torque Enable 562  is cleared to ‘0’ and the motor output becomes 0 %   In order to reuse Dynamixel Pro in shutdown status  REBOOT has to be done  The followings are detectable situations             Bit      Item      Description                  Bit 7                          Bit 6                          Bit 5      Overload Error default       Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error default       Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error default       Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs  use below method to reboot Dynamixels   H W REBOOT  Turn off the power and turn on again  S W REBOOT  Transmit REBOOT Instruction  For more details  please refer to the Protocol section of eManual  Indirect Address  Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses  Sequential addresses increase Instruction Packet efficiency  Addresses that can be defined as Indirect Address is limited to RAM area Address 562   892  If specific address is allocated to Indirect Address  Indirect Address inherits features and properties of the Data from the specific Address  Property includes Size Byte length   value range  and Access property Read Only  Read Write   For instance  if address 563 LED Red  is allocated to Indirect Address 1 49   Indirect Data 1 634  will have the exactly same value of LED Red 563  Example 1 Allocating 1 byte LED 563  to Indirect Data 1 634    Indirect Address 1 49   change the value to ‘563’ which is the address of LED Red   Set Indirect Data 1 634  to ‘1’  LED Red 563  also becomes ‘1’ and Red LED will be turned on   Set Indirect Data 1 634  to ‘0’  LED Red 563  also becomes ‘0’ and Red LED will be turned off Example 2 Allocating Size 4 byte Goal Position 596  to Indirect Data 2 635   4 sequential bytes have to be allocated   Indirect Address 2 51   change the value to ‘596’ which is the first address of Goal Position   Indirect Address 3 53   change the value to ‘597’ which is the second address of Goal Position   Indirect Address 4 55   change the value to ‘598’ which is the third address of Goal Position   Indirect Address 5 57   change the value to ‘599’ which is the fourth address of Goal Position   Set 4 byte value 305 419 896 0x12345678  to Indirect Data 2  Goal Position 596  also becomes 305 419 896 0x12345678  as below             Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2 byte  to Indirect Address  all address must be allocated to Indirect Address like the above Example 2 Note Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0 Torque Enable 562 Controls Torque ON OFF  Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected             Value      Description                  0 Default       Torque OFF Freerun  and the motor does not generate torque              1      Torque ON and all Data in the EEPROM area will be locked      Note Present Position 132  can be reset when Operating Mode 11  and Torque Enable 64  are updated  For more details  please refer to the Homing Offset 20  and Present Position 132  RGB LED 563 Controls the RGB LED on Dynamixel PRO             Address      Color      Range                  563      Red      0   255              564      Green      0   255              565      Blue      0   255      Velocity PI Gain 586  588 These values indicate P and I Gains of Velocity Control Mode  The I Gain includes sampling time  Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI             Gain Value Range                  0   32 767      Note KPA stands for Antiwindup Gain that cannot be modified by users  For more details about the PID controller  please refer to the PID Controller at wikipedia Position P Gain 594 This P Gain is used in Position Control Mode  Below figure is a block diagram describing the Position Control Mode  The Position Controller is cascaded with the Velocity Controller  KPP stands for Position P Gain             Gain Value Range                  0   32 767      Goal Position 596   Present Position 611 Target position can be set with Goal Position 596   This value can’t be smaller than the Min Position Limit 40  or larger than Max Position Limit 36              Model      Angle Range      Position Range      Description                  H54200S500RH54100S500R      180°   180 °      250 961 5   250 961 5                    H4220S300R      180°   180 °      151 875   151 875            Goal Velocity 600 Goal Velocity 600  can be used to set a target velocity and this value cannot exceed Velocity Limit  32  In case of Position Control Mode or Extended Position Control Mode  Goal Velocity will be used to limit the velocity However  if Goal Velocity is set to ‘0’  Velocity Limit 32  will be used to limit the velocity   Please refer to the block diagram of Position P Gain The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor Output RPM   Goal Velocity   Scale Factor            Model      Scale Factor RPM                   H54200S500RH54100S500R      0 00199234              H4220S300R      0 00329218              M5460S250RM5440S250R      0 00397746              M4210S260R      0 00389076              L5450S290R      0 00346667              L5450S500RL5430S500R      0 00199234              L5430S400R      0 00249657      Goal Torque 604 Goal torque  604  can be used to set a target torque and this value cannot exceed Torque Limit 30  When the Operating Mode 11  is set other than Torque Control Mode  Goal Torque will be used to limit the torque However  if Goal Torque is set to ‘0’  Torque Limit 30  will be used to limit the torque   Please refer to the block diagram of Position Gain or Velocity Gain The relationship between torque  current  and goal torque is shown below             Model      Formula                  PRO 54      A   V   33 000   2 048A  Current mA V  Present Current Goal Torque              PRO 42      A   V   8 250   2 048A  Current mA V  Present Current Goal Torque      Goal Acceleration 606 Goal Acceleration 606  can be used to set a target acceleration  This value is used in Velocity Control Mode  Position Control Mode and Extended Position Control Mode  The profile control will be enabled when both Goal Acceleration 606  and Goal Velocity 600  are not ‘0’ Please refer to the Goal Velocity 600  for RPM conversion constant             Value Range      Unit                  2 147 483 647   2 147 483 647      58 000 RPM2 @ Core Motor      Moving 610 This value indicates whether Dynamixel Pro is in motion or not  If absolute value of Present Velocity 615  is greater than Moving Threshold 17   Moving 610  is set to ‘1’  Otherwise  it will be cleared to ‘0’  However  this value will always be set to ‘1’ regardless of Present Velocity 615  while Profile is in progress with Goal Position 596  instruction             Value      Description                  0      Movement is not detected              1      Movement is detected  or Profile is in progress Goal Position 596  instruction is being processed       Present Velocity 615 This value indicates present Velocity  For more details  please refer to the Goal Velocity 600  Present Current 621 This value indicates present Current  For more details  please refer to the Goal Torque 604  Present Input Voltage 623 This value indicates present voltage that is being supplied  For more details  please refer to the Min Max Voltage Limit 24  22  Present Temperature 625 This value indicates present internal Temperature  For more details  please refer to the Temperature Limit 21  Registered Instruction 890             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Status Return Level 891 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Hardware Error Status 892 This value indicates hardware error status  For more details  please refer to the Shutdown 48  How to AssembleOption Frame Assembly      FRP54H110K  FRP54H120K Set        FRP54H210K  FRP54H220K Set  MaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF  DWG  STEP  IGES",
      "url": "http://0.0.0.0:4000/docs/en/dxl/pro/h54-200-s500-r/"
      } ,
  
  
      "docs-en-dxl-pro-l42-10-s300-r":  {
      "title": "L42-10-S300-R",
      "content"	 : "L4210S300RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps   10 5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      257g  9 0oz               Dimensions  W x H x D       42mm x 72mm x 42mm  1 65 x 2 83 x 1 65               Resolution      4 096 steps rev              Gear Ratio      303 8  1              Backlash      4 6arcmin  0 08°               No Load Speed      29 7rpm              No Load Current      0 72A              Continuous Speed      27 9rpm              Continuous Torque      1 2Nm  170 ozfin               Continuous Current      0 8A              Output      10W              Operating Temperature      5°C   55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multidrop BUS              ID      0   252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different  Stall torque is measured from the max torque that it can reach  This is generally how RC servos measure their torque  For the Performance graph with the NT curves  it is measured with the load gradually increasing  The motor operation environment is closer to the performance graph  not stall torque method  This is probably why the performance graph is being broadly used in the industrial market  This is why the max torque of the performance grap can actually be less than the stall torque Caution When connecting to power supply  it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL Do not connect or disconnect DYNAMIXEL when power is being supplied Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 2 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the power is reset Volatile   On the other hand  data in the EEPROM Area is maintained even when the DYNAMIXEL is powered off NonVolatile   Data in the EEPROM Area can only be written to if Torque Enable 64  is cleared to ‘0’ Off  SizeThe Size of data varies from 1 to 4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  For data larger than 2 bytes will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      35072              2      4      Model Information      Model Information      R                    6      1      Firmware Version      Firmware Version      R                    7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW                    30      2      Torque Limit      Maximum Torque Limit      RW                    32      4      Velocity Limit      Maximum Velocity Limit      RW                    36      4      Max Position Limit      Maximum Position Limit      RW                    40      4      Min Position Limit      Minimum Position Limit      RW                    44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      48              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              590      2      Position D Gain      D Gain of Position      RW                    592      2      Position I Gain      I Gain of Position      RW                    594      2      Position P Gain      P Gain of Position      RW                    596      4      Goal Position      Target Position Value      RW                    600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R                    611      4      Present Position      Present Position Value      R                    615      4      Present Velocity      Present Velocity Value      R                    621      2      Present Current      Present Current Value      R                    623      2      Present Input Voltage      Present Input Voltage      R                    625      1      Present Temperature      Present Internal Temperature      R                    626      2      External Port Data 1      External Port Data 1      R RW      0              628      2      External Port Data 2      External Port Data 2      R RW      0              630      2      External Port Data 3      External Port Data 3      R RW      0              632      2      External Port Data 4      External Port Data 4      R RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable 562  is cleared to ‘0’ Model Number 0 This address stores model number of the DYNAMIXEL             Model Name      Model Number                  L4210S300R      35072  0x8900       Firmware Version 6 This address stores firmware version of the DYNAMIXEL ID 7 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate 8 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate                  8      10 5M              7      4 5M              6      4M              5      3M              4      2M              3      1M              2      115 200              1 Default       57 600              0      9 600      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time 9 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       Operating Mode 11             Value      Operating Mode      Description                  1      Velocity Control Mode      This mode controls Velocity and Torque  Position will not be controlled               3 Default       Position Control Mode      This mode controls Position  Velocity and Torque       Moving Threshold 17 If Present Velocity 615  is bigger than this value  Moving 610  is set to ‘1’ and otherwise Moving 610  is cleared to ‘0’  This value determines whether Dynamixel is in motion or not             Value Range                  0   2 147 483 647      Temperature Limit 21 This value limits operating temperature  When the Present Temperature 625  that indicates internal temperature of Dynamixel is greater than the Temperature Limit 21   the Over Heating Error Bit Bit 2  in the Hardware Error Status 892  will be set  If Overheating Error Bit Bit 2  is configured in the Shutdown 48  when Over Heating Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 1°      0   100      0   100°      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit 22  24 These values are maximum and minimum operating voltages When current input voltage acquired from Present Input Voltage 623  exceeds the range of Max Voltage Limit 36  and Min Voltage Limit 40   Input Voltage Error Bit Bit 0  in the Hardware Error Status 892  will be set to ‘1’  If Input Voltage Error Bit Bit 0  is configured in the Shutdown 48  when Input Voltage Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 0 1V      0   400      0   40 0V      Acceleration Limit 26 This value indicates acceleration limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Torque Limit 30 This value indicates torque limit  Goal Torque 604  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   32 767      Velocity Limit 32 This value indicates velocity limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Min Max Position Limit 36  40 These values limit maximum and minimum target positions  The Goal Position 596  can’t exceed these values Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet  In Extended Position Control Mode  these limits will be ignored             Model Name      Value Range                  H54200S500RH54100S500R      250 961   250 961              H4220S300R      151 875   151 875              M5460S250RM5440S250R      125 708   125 708              M4210S260R      131 593   131 593              L5450S290R      103 846   103 846              L5450S500RL5430S500R      180 692   180 692              L5430S400R      144 197   144 197      External Port Mode  External Port DataDynamixel PRO is equipped with multipurpose expansion ports             Item      Range                  Voltage      0   3 3V              Current      0   5mA        Analog input mode analog values from an external port get converted to digital  These values are automatically updated in External port data 626   632    Output mode can adjust external port voltage 0V or 3 3V  External port data value of 0 is 0V  1 for 3 3V   Pullup input mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pullup  Depending on needs an external strong pullup is acceptable   Pullup output mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pulldown  Depending on needs an external strong pulldown is acceptable External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector             Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3 3V      PORT1      PORT2      PORT3      PORT4      Shutdown 48 The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation  Each Bit is inclusively processed with the ‘OR’ logic  therefore  multiple options can be generated  For instance  when ‘0x05’  binary  00000101  is defined as Shutdown 48   Dynamixel can detect both Input Voltage Error binary  00000001  and Overheating Error binary  00000100   If those errors are detected  Torque Enable 562  is cleared to ‘0’ and the motor output becomes 0 %   In order to reuse Dynamixel Pro in shutdown status  REBOOT has to be done  The followings are detectable situations             Bit      Item      Description                  Bit 7                          Bit 6                          Bit 5      Overload Error default       Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error default       Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error default       Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs  use below method to reboot Dynamixels   H W REBOOT  Turn off the power and turn on again  S W REBOOT  Transmit REBOOT Instruction  For more details  please refer to the Protocol section of eManual  Indirect Address  Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses  Sequential addresses increase Instruction Packet efficiency  Addresses that can be defined as Indirect Address is limited to RAM area Address 562   892  If specific address is allocated to Indirect Address  Indirect Address inherits features and properties of the Data from the specific Address  Property includes Size Byte length   value range  and Access property Read Only  Read Write   For instance  if address 563 LED Red  is allocated to Indirect Address 1 49   Indirect Data 1 634  will have the exactly same value of LED Red 563  Example 1 Allocating 1 byte LED 563  to Indirect Data 1 634    Indirect Address 1 49   change the value to ‘563’ which is the address of LED Red   Set Indirect Data 1 634  to ‘1’  LED Red 563  also becomes ‘1’ and Red LED will be turned on   Set Indirect Data 1 634  to ‘0’  LED Red 563  also becomes ‘0’ and Red LED will be turned off Example 2 Allocating Size 4 byte Goal Position 596  to Indirect Data 2 635   4 sequential bytes have to be allocated   Indirect Address 2 51   change the value to ‘596’ which is the first address of Goal Position   Indirect Address 3 53   change the value to ‘597’ which is the second address of Goal Position   Indirect Address 4 55   change the value to ‘598’ which is the third address of Goal Position   Indirect Address 5 57   change the value to ‘599’ which is the fourth address of Goal Position   Set 4 byte value 305 419 896 0x12345678  to Indirect Data 2  Goal Position 596  also becomes 305 419 896 0x12345678  as below             Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2 byte  to Indirect Address  all address must be allocated to Indirect Address like the above Example 2 Note Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0 Torque Enable 562 Controls Torque ON OFF  Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected             Value      Description                  0 Default       Torque OFF Freerun  and the motor does not generate torque              1      Torque ON and all Data in the EEPROM area will be locked      Note Present Position 132  can be reset when Operating Mode 11  and Torque Enable 64  are updated  For more details  please refer to the Homing Offset 20  and Present Position 132  RGB LED 563 Controls the RGB LED on Dynamixel PRO             Address      Color      Range                  563      Red      0   255              564      Green      0   255              565      Blue      0   255      Position PID Gain 594  592  590 These Gains are used in Position Control Mode  Below figure is a block diagram describing the Position Control Mode  KPD  KPI  KPP stands for Position D Gain  Position I Gain and Position P Gain respectively             Gain Value Range                  0   32 767      Goal Position 596 Target position can be set with Goal Position 596   This value can’t be smaller than the Min Position Limit 40  or larger than Max Position Limit 36  When CW CCW Angle Limit are exceeded the status packet sends an Angle limit error bit  bit 1  to 1  The alarm LED is triggered and initiate shutdown             Model      Angle Range      Position Range      Description                  L4210S300R      0°   360 °      0   4 095            Goal Velocity 600       Position Control ModeSpeed for Goal Position  Range is from 0   1 023  0x3FF  and 0 114rpm is a RPM conversion unit  If Goal Velocity is set to ‘0’  maximum rpm will be used For example  if Goal Velocity is set to ‘1 023’  1 023   0 114rpm   116 62rpm        Speed Control ModeIt is a velocity to a target direction 1 023   1 023  0x3FF  can be used  and the conversion unit is about 0 114rpm If a value in the range of 0   1 023 is used  rotating direction is CCW and ‘0’ will stop rotation If a value in the range of 1 023   0 is used  rotating direction is CW and ‘0’ will stop rotation     Note Please check the maximum rpm of the Dynamixel  The motor cannot exceed the maximum rpm with the higher Moving Speed value   Goal Torque 604 It is the value of the maximum torque limit 0   1 023 0x3FF  is available  and the unit is about 0 1% For example  if the value is 512  it is about 50% that means only 50% of the maximum torque will be used If the power is turned on  the value of Torque Limit 30  is used as an initial value Goal Acceleration 606 Goal Acceleration 606  can be used to set a target acceleration  This value is used in Velocity Control Mode and Position Control Mode  The profile control will be enabled when both Goal Acceleration 606  and Goal Velocity 600  are not ‘0’ Please refer to the Goal Velocity 600  for RPM conversion constant             Value Range      Unit                  2 147 483 647   2 147 483 647      214 RPM2 @ Core Motor      Moving 610 This value indicates whether Dynamixel Pro is in motion or not  If absolute value of Present Velocity 615  is greater than Moving Threshold 17   Moving 610  is set to ‘1’  Otherwise  it will be cleared to ‘0’  However  this value will always be set to ‘1’ regardless of Present Velocity 615  while Profile is in progress with Goal Position 596  instruction             Value      Description                  0      Movement is not detected              1      Movement is detected  or Profile is in progress Goal Position 596  instruction is being processed       Present Position 611 This value indicates present Position  For more details  please refer to the Goal Position 596  Present Velocity 615 This value indicates present Velocity It is a velocity to a target direction 1 023   1 023  0x3FF  can be used  and the conversion unit is about 0 114rpm For more details  please refer to the Goal Velocity 600  Present Current 621             Formula                  A   V   8 250   2 048A  Current mA V  Present Current Goal Torque      Present Input Voltage 623 This value indicates present voltage that is being supplied  For more details  please refer to the Min Max Voltage Limit 24  22  Present Temperature 625 This value indicates present internal Temperature  For more details  please refer to the Temperature Limit 21  Registered Instruction 890             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Status Return Level 891 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Hardware Error Status 892 This value indicates hardware error status  For more details  please refer to the Shutdown 48  How to AssembleOption Frame Assembly  FRP42H110K  FRP42H120K SetMaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF  DWG  STEP  IGES",
      "url": "http://0.0.0.0:4000/docs/en/dxl/pro/l42-10-s300-r/"
      } ,
  
  
      "docs-en-dxl-pro-l54-30-s400-r":  {
      "title": "L54-30-S400-R",
      "content"	 : "L5430S400RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps   10 5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      612g  21 6oz               Dimensions  W x H x D       54mm x 108mm x 54mm  2 13 x 4 25 x 2 13               Resolution      288 395 steps rev              Gear Ratio      400 5  1              Backlash      4 6arcmin  0 08°               No Load Speed      28 7rpm              No Load Current      1 19A              Continuous Speed      26 9rpm              Continuous Torque      2 5Nm  354 ozfin               Continuous Current      1 6A              Output      30W              Operating Temperature      5°C   55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multidrop BUS              ID      0   252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different  Stall torque is measured from the max torque that it can reach  This is generally how RC servos measure their torque  For the Performance graph with the NT curves  it is measured with the load gradually increasing  The motor operation environment is closer to the performance graph  not stall torque method  This is probably why the performance graph is being broadly used in the industrial market  This is why the max torque of the performance grap can actually be less than the stall torque Caution When connecting to power supply  it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL Do not connect or disconnect DYNAMIXEL when power is being supplied Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 2 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the power is reset Volatile   On the other hand  data in the EEPROM Area is maintained even when the DYNAMIXEL is powered off NonVolatile   Data in the EEPROM Area can only be written to if Torque Enable 64  is cleared to ‘0’ Off  SizeThe Size of data varies from 1 to 4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  For data larger than 2 bytes will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      37928              2      4      Model Information      Model Information      R                    6      1      Firmware Version      Firmware Version      R                    7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW                    30      2      Torque Limit      Maximum Torque Limit      RW                    32      4      Velocity Limit      Maximum Velocity Limit      RW                    36      4      Max Position Limit      Maximum Position Limit      RW                    40      4      Min Position Limit      Minimum Position Limit      RW                    44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW                    588      2      Velocity P Gain      P Gain of Velocity      RW                    594      2      Position P Gain      P Gain of Position      RW                    596      4      Goal Position      Target Position Value      RW                    600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R                    611      4      Present Position      Present Position Value      R                    615      4      Present Velocity      Present Velocity Value      R                    621      2      Present Current      Present Current Value      R                    623      2      Present Input Voltage      Present Input Voltage      R                    625      1      Present Temperature      Present Internal Temperature      R                    626      2      External Port Data 1      External Port Data 1      R RW      0              628      2      External Port Data 2      External Port Data 2      R RW      0              630      2      External Port Data 3      External Port Data 3      R RW      0              632      2      External Port Data 4      External Port Data 4      R RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable 562  is cleared to ‘0’ Model Number 0 This address stores model number of the DYNAMIXEL             Model Name      Model Number                  L5430S400R      37928  0x9428       Firmware Version 6 This address stores firmware version of the DYNAMIXEL ID 7 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate 8 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate                  8      10 5M              7      4 5M              6      4M              5      3M              4      2M              3      1M              2      115 200              1 Default       57 600              0      9 600      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time 9 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       Operating Mode 11             Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque  Speed and Position will not be controlled               1      Velocity Control Mode      This mode controls Velocity and Torque  Position will not be controlled               3 Default       Position Control Mode      This mode controls Position  Velocity and Torque               4      Extended Position Control Mode      This mode controls Position  Velocity and Torque  Multiturn is enabled       Homing Offset 13 Users can adjust the Home position by setting Homing Offset 13   The Homing Offset value is added to the Present Position 611  Present Position 611    Actual Position   Homing Offset 13              Value Range                  2 147 483 648   2 147 483 647      Moving Threshold 17 If Present Velocity 615  is bigger than this value  Moving 610  is set to ‘1’ and otherwise Moving 610  is cleared to ‘0’  This value determines whether Dynamixel is in motion or not             Value Range                  0   2 147 483 647      Temperature Limit 21 This value limits operating temperature  When the Present Temperature 625  that indicates internal temperature of Dynamixel is greater than the Temperature Limit 21   the Over Heating Error Bit Bit 2  in the Hardware Error Status 892  will be set  If Overheating Error Bit Bit 2  is configured in the Shutdown 48  when Over Heating Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 1°      0   100      0   100°      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit 22  24 These values are maximum and minimum operating voltages When current input voltage acquired from Present Input Voltage 623  exceeds the range of Max Voltage Limit 36  and Min Voltage Limit 40   Input Voltage Error Bit Bit 0  in the Hardware Error Status 892  will be set to ‘1’  If Input Voltage Error Bit Bit 0  is configured in the Shutdown 48  when Input Voltage Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 0 1V      0   400      0   40 0V      Acceleration Limit 26 This value indicates acceleration limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Torque Limit 30 This value indicates torque limit  Goal Torque 604  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   32 767      Velocity Limit 32 This value indicates velocity limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Min Max Position Limit 36  40 These values limit maximum and minimum target positions  The Goal Position 596  can’t exceed these values Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet  In Extended Position Control Mode  these limits will be ignored             Model Name      Value Range                  H54200S500RH54100S500R      250 961   250 961              H4220S300R      151 875   151 875              M5460S250RM5440S250R      125 708   125 708              M4210S260R      131 593   131 593              L5450S290R      103 846   103 846              L5450S500RL5430S500R      180 692   180 692              L5430S400R      144 197   144 197      External Port Mode  External Port DataDynamixel PRO is equipped with multipurpose expansion ports             Item      Range                  Voltage      0   3 3V              Current      0   5mA        Analog input mode analog values from an external port get converted to digital  These values are automatically updated in External port data 626   632    Output mode can adjust external port voltage 0V or 3 3V  External port data value of 0 is 0V  1 for 3 3V   Pullup input mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pullup  Depending on needs an external strong pullup is acceptable   Pullup output mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pulldown  Depending on needs an external strong pulldown is acceptable External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector             Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3 3V      PORT1      PORT2      PORT3      PORT4      Shutdown 48 The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation  Each Bit is inclusively processed with the ‘OR’ logic  therefore  multiple options can be generated  For instance  when ‘0x05’  binary  00000101  is defined as Shutdown 48   Dynamixel can detect both Input Voltage Error binary  00000001  and Overheating Error binary  00000100   If those errors are detected  Torque Enable 562  is cleared to ‘0’ and the motor output becomes 0 %   In order to reuse Dynamixel Pro in shutdown status  REBOOT has to be done  The followings are detectable situations             Bit      Item      Description                  Bit 7                          Bit 6                          Bit 5      Overload Error default       Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error default       Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error default       Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs  use below method to reboot Dynamixels   H W REBOOT  Turn off the power and turn on again  S W REBOOT  Transmit REBOOT Instruction  For more details  please refer to the Protocol section of eManual  Indirect Address  Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses  Sequential addresses increase Instruction Packet efficiency  Addresses that can be defined as Indirect Address is limited to RAM area Address 562   892  If specific address is allocated to Indirect Address  Indirect Address inherits features and properties of the Data from the specific Address  Property includes Size Byte length   value range  and Access property Read Only  Read Write   For instance  if address 563 LED Red  is allocated to Indirect Address 1 49   Indirect Data 1 634  will have the exactly same value of LED Red 563  Example 1 Allocating 1 byte LED 563  to Indirect Data 1 634    Indirect Address 1 49   change the value to ‘563’ which is the address of LED Red   Set Indirect Data 1 634  to ‘1’  LED Red 563  also becomes ‘1’ and Red LED will be turned on   Set Indirect Data 1 634  to ‘0’  LED Red 563  also becomes ‘0’ and Red LED will be turned off Example 2 Allocating Size 4 byte Goal Position 596  to Indirect Data 2 635   4 sequential bytes have to be allocated   Indirect Address 2 51   change the value to ‘596’ which is the first address of Goal Position   Indirect Address 3 53   change the value to ‘597’ which is the second address of Goal Position   Indirect Address 4 55   change the value to ‘598’ which is the third address of Goal Position   Indirect Address 5 57   change the value to ‘599’ which is the fourth address of Goal Position   Set 4 byte value 305 419 896 0x12345678  to Indirect Data 2  Goal Position 596  also becomes 305 419 896 0x12345678  as below             Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2 byte  to Indirect Address  all address must be allocated to Indirect Address like the above Example 2 Note Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0 Torque Enable 562 Controls Torque ON OFF  Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected             Value      Description                  0 Default       Torque OFF Freerun  and the motor does not generate torque              1      Torque ON and all Data in the EEPROM area will be locked      Note Present Position 132  can be reset when Operating Mode 11  and Torque Enable 64  are updated  For more details  please refer to the Homing Offset 20  and Present Position 132  RGB LED 563 Controls the RGB LED on Dynamixel PRO             Address      Color      Range                  563      Red      0   255              564      Green      0   255              565      Blue      0   255      Velocity PI Gain 586  588 These values indicate P and I Gains of Velocity Control Mode  The I Gain includes sampling time  Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI             Gain Value Range                  0   32 767      Note KPA stands for Antiwindup Gain that cannot be modified by users  For more details about the PID controller  please refer to the PID Controller at wikipedia Position P Gain 594 This P Gain is used in Position Control Mode  Below figure is a block diagram describing the Position Control Mode  The Position Controller is cascaded with the Velocity Controller  KPP stands for Position P Gain             Gain Value Range                  0   32 767      Goal Position 596   Present Position 611 Target position can be set with Goal Position 596   This value can’t be smaller than the Min Position Limit 40  or larger than Max Position Limit 36              Model      Angle Range      Position Range      Description                  H54200S500RH54100S500R      180°   180 °      250 961 5   250 961 5                    H4220S300R      180°   180 °      151 875   151 875            Goal Velocity 600 Goal Velocity 600  can be used to set a target velocity and this value cannot exceed Velocity Limit  32  In case of Position Control Mode or Extended Position Control Mode  Goal Velocity will be used to limit the velocity However  if Goal Velocity is set to ‘0’  Velocity Limit 32  will be used to limit the velocity   Please refer to the block diagram of Position P Gain The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor Output RPM   Goal Velocity   Scale Factor            Model      Scale Factor RPM                   H54200S500RH54100S500R      0 00199234              H4220S300R      0 00329218              M5460S250RM5440S250R      0 00397746              M4210S260R      0 00389076              L5450S290R      0 00346667              L5450S500RL5430S500R      0 00199234              L5430S400R      0 00249657      Goal Torque 604 Goal torque  604  can be used to set a target torque and this value cannot exceed Torque Limit 30  When the Operating Mode 11  is set other than Torque Control Mode  Goal Torque will be used to limit the torque However  if Goal Torque is set to ‘0’  Torque Limit 30  will be used to limit the torque   Please refer to the block diagram of Position Gain or Velocity Gain The relationship between torque  current  and goal torque is shown below             Model      Formula                  PRO 54      A   V   33 000   2 048A  Current mA V  Present Current Goal Torque              PRO 42      A   V   8 250   2 048A  Current mA V  Present Current Goal Torque      Goal Acceleration 606 Goal Acceleration 606  can be used to set a target acceleration  This value is used in Velocity Control Mode  Position Control Mode and Extended Position Control Mode  The profile control will be enabled when both Goal Acceleration 606  and Goal Velocity 600  are not ‘0’ Please refer to the Goal Velocity 600  for RPM conversion constant             Value Range      Unit                  2 147 483 647   2 147 483 647      58 000 RPM2 @ Core Motor      Moving 610 This value indicates whether Dynamixel Pro is in motion or not  If absolute value of Present Velocity 615  is greater than Moving Threshold 17   Moving 610  is set to ‘1’  Otherwise  it will be cleared to ‘0’  However  this value will always be set to ‘1’ regardless of Present Velocity 615  while Profile is in progress with Goal Position 596  instruction             Value      Description                  0      Movement is not detected              1      Movement is detected  or Profile is in progress Goal Position 596  instruction is being processed       Present Velocity 615 This value indicates present Velocity  For more details  please refer to the Goal Velocity 600  Present Current 621 This value indicates present Current  For more details  please refer to the Goal Torque 604  Present Input Voltage 623 This value indicates present voltage that is being supplied  For more details  please refer to the Min Max Voltage Limit 24  22  Present Temperature 625 This value indicates present internal Temperature  For more details  please refer to the Temperature Limit 21  Registered Instruction 890             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Status Return Level 891 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Hardware Error Status 892 This value indicates hardware error status  For more details  please refer to the Shutdown 48  How to AssembleOption Frame Assembly      FRP54H110K  FRP54H120K Set        FRP54H210K  FRP54H220K Set  MaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF  DWG  STEP  IGES",
      "url": "http://0.0.0.0:4000/docs/en/dxl/pro/l54-30-s400-r/"
      } ,
  
  
      "docs-en-dxl-pro-l54-30-s500-r":  {
      "title": "L54-30-S500-R",
      "content"	 : "L5430S500RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps   10 5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      591g  20 8oz               Dimensions  W x H x D       54mm x 108mm x 54mm  2 13 x 4 25 x 2 13               Resolution      361 384 steps rev              Gear Ratio      501 9  1              Backlash      5 0arcmin  0 08°               No Load Speed      23 0rpm              No Load Current      1 1A              Continuous Speed      21 0rpm              Continuous Torque      5 4Nm  764 ozfin               Continuous Current      1 6A              Output      30W              Operating Temperature      5°C   55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multidrop BUS              ID      0   252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different  Stall torque is measured from the max torque that it can reach  This is generally how RC servos measure their torque  For the Performance graph with the NT curves  it is measured with the load gradually increasing  The motor operation environment is closer to the performance graph  not stall torque method  This is probably why the performance graph is being broadly used in the industrial market  This is why the max torque of the performance grap can actually be less than the stall torque Caution When connecting to power supply  it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL Do not connect or disconnect DYNAMIXEL when power is being supplied Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 2 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the power is reset Volatile   On the other hand  data in the EEPROM Area is maintained even when the DYNAMIXEL is powered off NonVolatile   Data in the EEPROM Area can only be written to if Torque Enable 64  is cleared to ‘0’ Off  SizeThe Size of data varies from 1 to 4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  For data larger than 2 bytes will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      37896              2      4      Model Information      Model Information      R                    6      1      Firmware Version      Firmware Version      R                    7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW                    30      2      Torque Limit      Maximum Torque Limit      RW                    32      4      Velocity Limit      Maximum Velocity Limit      RW                    36      4      Max Position Limit      Maximum Position Limit      RW                    40      4      Min Position Limit      Minimum Position Limit      RW                    44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW                    588      2      Velocity P Gain      P Gain of Velocity      RW                    594      2      Position P Gain      P Gain of Position      RW                    596      4      Goal Position      Target Position Value      RW                    600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R                    611      4      Present Position      Present Position Value      R                    615      4      Present Velocity      Present Velocity Value      R                    621      2      Present Current      Present Current Value      R                    623      2      Present Input Voltage      Present Input Voltage      R                    625      1      Present Temperature      Present Internal Temperature      R                    626      2      External Port Data 1      External Port Data 1      R RW      0              628      2      External Port Data 2      External Port Data 2      R RW      0              630      2      External Port Data 3      External Port Data 3      R RW      0              632      2      External Port Data 4      External Port Data 4      R RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable 562  is cleared to ‘0’ Model Number 0 This address stores model number of the DYNAMIXEL             Model Name      Model Number                  L5430S500R      37896  0x9408       Firmware Version 6 This address stores firmware version of the DYNAMIXEL ID 7 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate 8 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate                  8      10 5M              7      4 5M              6      4M              5      3M              4      2M              3      1M              2      115 200              1 Default       57 600              0      9 600      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time 9 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       Operating Mode 11             Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque  Speed and Position will not be controlled               1      Velocity Control Mode      This mode controls Velocity and Torque  Position will not be controlled               3 Default       Position Control Mode      This mode controls Position  Velocity and Torque               4      Extended Position Control Mode      This mode controls Position  Velocity and Torque  Multiturn is enabled       Homing Offset 13 Users can adjust the Home position by setting Homing Offset 13   The Homing Offset value is added to the Present Position 611  Present Position 611    Actual Position   Homing Offset 13              Value Range                  2 147 483 648   2 147 483 647      Moving Threshold 17 If Present Velocity 615  is bigger than this value  Moving 610  is set to ‘1’ and otherwise Moving 610  is cleared to ‘0’  This value determines whether Dynamixel is in motion or not             Value Range                  0   2 147 483 647      Temperature Limit 21 This value limits operating temperature  When the Present Temperature 625  that indicates internal temperature of Dynamixel is greater than the Temperature Limit 21   the Over Heating Error Bit Bit 2  in the Hardware Error Status 892  will be set  If Overheating Error Bit Bit 2  is configured in the Shutdown 48  when Over Heating Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 1°      0   100      0   100°      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit 22  24 These values are maximum and minimum operating voltages When current input voltage acquired from Present Input Voltage 623  exceeds the range of Max Voltage Limit 36  and Min Voltage Limit 40   Input Voltage Error Bit Bit 0  in the Hardware Error Status 892  will be set to ‘1’  If Input Voltage Error Bit Bit 0  is configured in the Shutdown 48  when Input Voltage Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 0 1V      0   400      0   40 0V      Acceleration Limit 26 This value indicates acceleration limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Torque Limit 30 This value indicates torque limit  Goal Torque 604  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   32 767      Velocity Limit 32 This value indicates velocity limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Min Max Position Limit 36  40 These values limit maximum and minimum target positions  The Goal Position 596  can’t exceed these values Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet  In Extended Position Control Mode  these limits will be ignored             Model Name      Value Range                  H54200S500RH54100S500R      250 961   250 961              H4220S300R      151 875   151 875              M5460S250RM5440S250R      125 708   125 708              M4210S260R      131 593   131 593              L5450S290R      103 846   103 846              L5450S500RL5430S500R      180 692   180 692              L5430S400R      144 197   144 197      External Port Mode  External Port DataDynamixel PRO is equipped with multipurpose expansion ports             Item      Range                  Voltage      0   3 3V              Current      0   5mA        Analog input mode analog values from an external port get converted to digital  These values are automatically updated in External port data 626   632    Output mode can adjust external port voltage 0V or 3 3V  External port data value of 0 is 0V  1 for 3 3V   Pullup input mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pullup  Depending on needs an external strong pullup is acceptable   Pullup output mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pulldown  Depending on needs an external strong pulldown is acceptable External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector             Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3 3V      PORT1      PORT2      PORT3      PORT4      Shutdown 48 The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation  Each Bit is inclusively processed with the ‘OR’ logic  therefore  multiple options can be generated  For instance  when ‘0x05’  binary  00000101  is defined as Shutdown 48   Dynamixel can detect both Input Voltage Error binary  00000001  and Overheating Error binary  00000100   If those errors are detected  Torque Enable 562  is cleared to ‘0’ and the motor output becomes 0 %   In order to reuse Dynamixel Pro in shutdown status  REBOOT has to be done  The followings are detectable situations             Bit      Item      Description                  Bit 7                          Bit 6                          Bit 5      Overload Error default       Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error default       Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error default       Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs  use below method to reboot Dynamixels   H W REBOOT  Turn off the power and turn on again  S W REBOOT  Transmit REBOOT Instruction  For more details  please refer to the Protocol section of eManual  Indirect Address  Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses  Sequential addresses increase Instruction Packet efficiency  Addresses that can be defined as Indirect Address is limited to RAM area Address 562   892  If specific address is allocated to Indirect Address  Indirect Address inherits features and properties of the Data from the specific Address  Property includes Size Byte length   value range  and Access property Read Only  Read Write   For instance  if address 563 LED Red  is allocated to Indirect Address 1 49   Indirect Data 1 634  will have the exactly same value of LED Red 563  Example 1 Allocating 1 byte LED 563  to Indirect Data 1 634    Indirect Address 1 49   change the value to ‘563’ which is the address of LED Red   Set Indirect Data 1 634  to ‘1’  LED Red 563  also becomes ‘1’ and Red LED will be turned on   Set Indirect Data 1 634  to ‘0’  LED Red 563  also becomes ‘0’ and Red LED will be turned off Example 2 Allocating Size 4 byte Goal Position 596  to Indirect Data 2 635   4 sequential bytes have to be allocated   Indirect Address 2 51   change the value to ‘596’ which is the first address of Goal Position   Indirect Address 3 53   change the value to ‘597’ which is the second address of Goal Position   Indirect Address 4 55   change the value to ‘598’ which is the third address of Goal Position   Indirect Address 5 57   change the value to ‘599’ which is the fourth address of Goal Position   Set 4 byte value 305 419 896 0x12345678  to Indirect Data 2  Goal Position 596  also becomes 305 419 896 0x12345678  as below             Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2 byte  to Indirect Address  all address must be allocated to Indirect Address like the above Example 2 Note Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0 Torque Enable 562 Controls Torque ON OFF  Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected             Value      Description                  0 Default       Torque OFF Freerun  and the motor does not generate torque              1      Torque ON and all Data in the EEPROM area will be locked      Note Present Position 132  can be reset when Operating Mode 11  and Torque Enable 64  are updated  For more details  please refer to the Homing Offset 20  and Present Position 132  RGB LED 563 Controls the RGB LED on Dynamixel PRO             Address      Color      Range                  563      Red      0   255              564      Green      0   255              565      Blue      0   255      Velocity PI Gain 586  588 These values indicate P and I Gains of Velocity Control Mode  The I Gain includes sampling time  Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI             Gain Value Range                  0   32 767      Note KPA stands for Antiwindup Gain that cannot be modified by users  For more details about the PID controller  please refer to the PID Controller at wikipedia Position P Gain 594 This P Gain is used in Position Control Mode  Below figure is a block diagram describing the Position Control Mode  The Position Controller is cascaded with the Velocity Controller  KPP stands for Position P Gain             Gain Value Range                  0   32 767      Goal Position 596   Present Position 611 Target position can be set with Goal Position 596   This value can’t be smaller than the Min Position Limit 40  or larger than Max Position Limit 36              Model      Angle Range      Position Range      Description                  H54200S500RH54100S500R      180°   180 °      250 961 5   250 961 5                    H4220S300R      180°   180 °      151 875   151 875            Goal Velocity 600 Goal Velocity 600  can be used to set a target velocity and this value cannot exceed Velocity Limit  32  In case of Position Control Mode or Extended Position Control Mode  Goal Velocity will be used to limit the velocity However  if Goal Velocity is set to ‘0’  Velocity Limit 32  will be used to limit the velocity   Please refer to the block diagram of Position P Gain The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor Output RPM   Goal Velocity   Scale Factor            Model      Scale Factor RPM                   H54200S500RH54100S500R      0 00199234              H4220S300R      0 00329218              M5460S250RM5440S250R      0 00397746              M4210S260R      0 00389076              L5450S290R      0 00346667              L5450S500RL5430S500R      0 00199234              L5430S400R      0 00249657      Goal Torque 604 Goal torque  604  can be used to set a target torque and this value cannot exceed Torque Limit 30  When the Operating Mode 11  is set other than Torque Control Mode  Goal Torque will be used to limit the torque However  if Goal Torque is set to ‘0’  Torque Limit 30  will be used to limit the torque   Please refer to the block diagram of Position Gain or Velocity Gain The relationship between torque  current  and goal torque is shown below             Model      Formula                  PRO 54      A   V   33 000   2 048A  Current mA V  Present Current Goal Torque              PRO 42      A   V   8 250   2 048A  Current mA V  Present Current Goal Torque      Goal Acceleration 606 Goal Acceleration 606  can be used to set a target acceleration  This value is used in Velocity Control Mode  Position Control Mode and Extended Position Control Mode  The profile control will be enabled when both Goal Acceleration 606  and Goal Velocity 600  are not ‘0’ Please refer to the Goal Velocity 600  for RPM conversion constant             Value Range      Unit                  2 147 483 647   2 147 483 647      58 000 RPM2 @ Core Motor      Moving 610 This value indicates whether Dynamixel Pro is in motion or not  If absolute value of Present Velocity 615  is greater than Moving Threshold 17   Moving 610  is set to ‘1’  Otherwise  it will be cleared to ‘0’  However  this value will always be set to ‘1’ regardless of Present Velocity 615  while Profile is in progress with Goal Position 596  instruction             Value      Description                  0      Movement is not detected              1      Movement is detected  or Profile is in progress Goal Position 596  instruction is being processed       Present Velocity 615 This value indicates present Velocity  For more details  please refer to the Goal Velocity 600  Present Current 621 This value indicates present Current  For more details  please refer to the Goal Torque 604  Present Input Voltage 623 This value indicates present voltage that is being supplied  For more details  please refer to the Min Max Voltage Limit 24  22  Present Temperature 625 This value indicates present internal Temperature  For more details  please refer to the Temperature Limit 21  Registered Instruction 890             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Status Return Level 891 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Hardware Error Status 892 This value indicates hardware error status  For more details  please refer to the Shutdown 48  How to AssembleOption Frame Assembly      FRP54H110K  FRP54H120K Set        FRP54H210K  FRP54H220K Set  MaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF  DWG  STEP  IGES",
      "url": "http://0.0.0.0:4000/docs/en/dxl/pro/l54-30-s500-r/"
      } ,
  
  
      "docs-en-dxl-pro-l54-50-s290-r":  {
      "title": "L54-50-S290-R",
      "content"	 : "L5450S290RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps   10 5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      656g  23 1oz               Dimensions  W x H x D       54mm x 108mm x 54mm  2 13 x 4 25 x 2 13               Resolution      207 692 steps rev              Gear Ratio      288 5  1              Backlash      4 6arcmin  0 08°               No Load Speed      26 0rpm              No Load Current      1 05A              Continuous Speed      22 1rpm              Continuous Torque      4 8Nm  680 ozfin               Continuous Current      1 9A              Output      50W              Operating Temperature      5°C   55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multidrop BUS              ID      0   252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different  Stall torque is measured from the max torque that it can reach  This is generally how RC servos measure their torque  For the Performance graph with the NT curves  it is measured with the load gradually increasing  The motor operation environment is closer to the performance graph  not stall torque method  This is probably why the performance graph is being broadly used in the industrial market  This is why the max torque of the performance grap can actually be less than the stall torque Caution When connecting to power supply  it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL Do not connect or disconnect DYNAMIXEL when power is being supplied Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 2 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the power is reset Volatile   On the other hand  data in the EEPROM Area is maintained even when the DYNAMIXEL is powered off NonVolatile   Data in the EEPROM Area can only be written to if Torque Enable 64  is cleared to ‘0’ Off  SizeThe Size of data varies from 1 to 4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  For data larger than 2 bytes will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      38176              2      4      Model Information      Model Information      R                    6      1      Firmware Version      Firmware Version      R                    7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW                    30      2      Torque Limit      Maximum Torque Limit      RW                    32      4      Velocity Limit      Maximum Velocity Limit      RW                    36      4      Max Position Limit      Maximum Position Limit      RW                    40      4      Min Position Limit      Minimum Position Limit      RW                    44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW                    588      2      Velocity P Gain      P Gain of Velocity      RW                    594      2      Position P Gain      P Gain of Position      RW                    596      4      Goal Position      Target Position Value      RW                    600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R                    611      4      Present Position      Present Position Value      R                    615      4      Present Velocity      Present Velocity Value      R                    621      2      Present Current      Present Current Value      R                    623      2      Present Input Voltage      Present Input Voltage      R                    625      1      Present Temperature      Present Internal Temperature      R                    626      2      External Port Data 1      External Port Data 1      R RW      0              628      2      External Port Data 2      External Port Data 2      R RW      0              630      2      External Port Data 3      External Port Data 3      R RW      0              632      2      External Port Data 4      External Port Data 4      R RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable 562  is cleared to ‘0’ Model Number 0 This address stores model number of the DYNAMIXEL             Model Name      Model Number                  L5450S290R      38176  0x9520       Firmware Version 6 This address stores firmware version of the DYNAMIXEL ID 7 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate 8 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate                  8      10 5M              7      4 5M              6      4M              5      3M              4      2M              3      1M              2      115 200              1 Default       57 600              0      9 600      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time 9 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       Operating Mode 11             Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque  Speed and Position will not be controlled               1      Velocity Control Mode      This mode controls Velocity and Torque  Position will not be controlled               3 Default       Position Control Mode      This mode controls Position  Velocity and Torque               4      Extended Position Control Mode      This mode controls Position  Velocity and Torque  Multiturn is enabled       Homing Offset 13 Users can adjust the Home position by setting Homing Offset 13   The Homing Offset value is added to the Present Position 611  Present Position 611    Actual Position   Homing Offset 13              Value Range                  2 147 483 648   2 147 483 647      Moving Threshold 17 If Present Velocity 615  is bigger than this value  Moving 610  is set to ‘1’ and otherwise Moving 610  is cleared to ‘0’  This value determines whether Dynamixel is in motion or not             Value Range                  0   2 147 483 647      Temperature Limit 21 This value limits operating temperature  When the Present Temperature 625  that indicates internal temperature of Dynamixel is greater than the Temperature Limit 21   the Over Heating Error Bit Bit 2  in the Hardware Error Status 892  will be set  If Overheating Error Bit Bit 2  is configured in the Shutdown 48  when Over Heating Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 1°      0   100      0   100°      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit 22  24 These values are maximum and minimum operating voltages When current input voltage acquired from Present Input Voltage 623  exceeds the range of Max Voltage Limit 36  and Min Voltage Limit 40   Input Voltage Error Bit Bit 0  in the Hardware Error Status 892  will be set to ‘1’  If Input Voltage Error Bit Bit 0  is configured in the Shutdown 48  when Input Voltage Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 0 1V      0   400      0   40 0V      Acceleration Limit 26 This value indicates acceleration limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Torque Limit 30 This value indicates torque limit  Goal Torque 604  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   32 767      Velocity Limit 32 This value indicates velocity limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Min Max Position Limit 36  40 These values limit maximum and minimum target positions  The Goal Position 596  can’t exceed these values Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet  In Extended Position Control Mode  these limits will be ignored             Model Name      Value Range                  H54200S500RH54100S500R      250 961   250 961              H4220S300R      151 875   151 875              M5460S250RM5440S250R      125 708   125 708              M4210S260R      131 593   131 593              L5450S290R      103 846   103 846              L5450S500RL5430S500R      180 692   180 692              L5430S400R      144 197   144 197      External Port Mode  External Port DataDynamixel PRO is equipped with multipurpose expansion ports             Item      Range                  Voltage      0   3 3V              Current      0   5mA        Analog input mode analog values from an external port get converted to digital  These values are automatically updated in External port data 626   632    Output mode can adjust external port voltage 0V or 3 3V  External port data value of 0 is 0V  1 for 3 3V   Pullup input mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pullup  Depending on needs an external strong pullup is acceptable   Pullup output mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pulldown  Depending on needs an external strong pulldown is acceptable External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector             Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3 3V      PORT1      PORT2      PORT3      PORT4      Shutdown 48 The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation  Each Bit is inclusively processed with the ‘OR’ logic  therefore  multiple options can be generated  For instance  when ‘0x05’  binary  00000101  is defined as Shutdown 48   Dynamixel can detect both Input Voltage Error binary  00000001  and Overheating Error binary  00000100   If those errors are detected  Torque Enable 562  is cleared to ‘0’ and the motor output becomes 0 %   In order to reuse Dynamixel Pro in shutdown status  REBOOT has to be done  The followings are detectable situations             Bit      Item      Description                  Bit 7                          Bit 6                          Bit 5      Overload Error default       Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error default       Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error default       Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs  use below method to reboot Dynamixels   H W REBOOT  Turn off the power and turn on again  S W REBOOT  Transmit REBOOT Instruction  For more details  please refer to the Protocol section of eManual  Indirect Address  Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses  Sequential addresses increase Instruction Packet efficiency  Addresses that can be defined as Indirect Address is limited to RAM area Address 562   892  If specific address is allocated to Indirect Address  Indirect Address inherits features and properties of the Data from the specific Address  Property includes Size Byte length   value range  and Access property Read Only  Read Write   For instance  if address 563 LED Red  is allocated to Indirect Address 1 49   Indirect Data 1 634  will have the exactly same value of LED Red 563  Example 1 Allocating 1 byte LED 563  to Indirect Data 1 634    Indirect Address 1 49   change the value to ‘563’ which is the address of LED Red   Set Indirect Data 1 634  to ‘1’  LED Red 563  also becomes ‘1’ and Red LED will be turned on   Set Indirect Data 1 634  to ‘0’  LED Red 563  also becomes ‘0’ and Red LED will be turned off Example 2 Allocating Size 4 byte Goal Position 596  to Indirect Data 2 635   4 sequential bytes have to be allocated   Indirect Address 2 51   change the value to ‘596’ which is the first address of Goal Position   Indirect Address 3 53   change the value to ‘597’ which is the second address of Goal Position   Indirect Address 4 55   change the value to ‘598’ which is the third address of Goal Position   Indirect Address 5 57   change the value to ‘599’ which is the fourth address of Goal Position   Set 4 byte value 305 419 896 0x12345678  to Indirect Data 2  Goal Position 596  also becomes 305 419 896 0x12345678  as below             Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2 byte  to Indirect Address  all address must be allocated to Indirect Address like the above Example 2 Note Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0 Torque Enable 562 Controls Torque ON OFF  Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected             Value      Description                  0 Default       Torque OFF Freerun  and the motor does not generate torque              1      Torque ON and all Data in the EEPROM area will be locked      Note Present Position 132  can be reset when Operating Mode 11  and Torque Enable 64  are updated  For more details  please refer to the Homing Offset 20  and Present Position 132  RGB LED 563 Controls the RGB LED on Dynamixel PRO             Address      Color      Range                  563      Red      0   255              564      Green      0   255              565      Blue      0   255      Velocity PI Gain 586  588 These values indicate P and I Gains of Velocity Control Mode  The I Gain includes sampling time  Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI             Gain Value Range                  0   32 767      Note KPA stands for Antiwindup Gain that cannot be modified by users  For more details about the PID controller  please refer to the PID Controller at wikipedia Position P Gain 594 This P Gain is used in Position Control Mode  Below figure is a block diagram describing the Position Control Mode  The Position Controller is cascaded with the Velocity Controller  KPP stands for Position P Gain             Gain Value Range                  0   32 767      Goal Position 596   Present Position 611 Target position can be set with Goal Position 596   This value can’t be smaller than the Min Position Limit 40  or larger than Max Position Limit 36              Model      Angle Range      Position Range      Description                  H54200S500RH54100S500R      180°   180 °      250 961 5   250 961 5                    H4220S300R      180°   180 °      151 875   151 875            Goal Velocity 600 Goal Velocity 600  can be used to set a target velocity and this value cannot exceed Velocity Limit  32  In case of Position Control Mode or Extended Position Control Mode  Goal Velocity will be used to limit the velocity However  if Goal Velocity is set to ‘0’  Velocity Limit 32  will be used to limit the velocity   Please refer to the block diagram of Position P Gain The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor Output RPM   Goal Velocity   Scale Factor            Model      Scale Factor RPM                   H54200S500RH54100S500R      0 00199234              H4220S300R      0 00329218              M5460S250RM5440S250R      0 00397746              M4210S260R      0 00389076              L5450S290R      0 00346667              L5450S500RL5430S500R      0 00199234              L5430S400R      0 00249657      Goal Torque 604 Goal torque  604  can be used to set a target torque and this value cannot exceed Torque Limit 30  When the Operating Mode 11  is set other than Torque Control Mode  Goal Torque will be used to limit the torque However  if Goal Torque is set to ‘0’  Torque Limit 30  will be used to limit the torque   Please refer to the block diagram of Position Gain or Velocity Gain The relationship between torque  current  and goal torque is shown below             Model      Formula                  PRO 54      A   V   33 000   2 048A  Current mA V  Present Current Goal Torque              PRO 42      A   V   8 250   2 048A  Current mA V  Present Current Goal Torque      Goal Acceleration 606 Goal Acceleration 606  can be used to set a target acceleration  This value is used in Velocity Control Mode  Position Control Mode and Extended Position Control Mode  The profile control will be enabled when both Goal Acceleration 606  and Goal Velocity 600  are not ‘0’ Please refer to the Goal Velocity 600  for RPM conversion constant             Value Range      Unit                  2 147 483 647   2 147 483 647      58 000 RPM2 @ Core Motor      Moving 610 This value indicates whether Dynamixel Pro is in motion or not  If absolute value of Present Velocity 615  is greater than Moving Threshold 17   Moving 610  is set to ‘1’  Otherwise  it will be cleared to ‘0’  However  this value will always be set to ‘1’ regardless of Present Velocity 615  while Profile is in progress with Goal Position 596  instruction             Value      Description                  0      Movement is not detected              1      Movement is detected  or Profile is in progress Goal Position 596  instruction is being processed       Present Velocity 615 This value indicates present Velocity  For more details  please refer to the Goal Velocity 600  Present Current 621 This value indicates present Current  For more details  please refer to the Goal Torque 604  Present Input Voltage 623 This value indicates present voltage that is being supplied  For more details  please refer to the Min Max Voltage Limit 24  22  Present Temperature 625 This value indicates present internal Temperature  For more details  please refer to the Temperature Limit 21  Registered Instruction 890             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Status Return Level 891 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Hardware Error Status 892 This value indicates hardware error status  For more details  please refer to the Shutdown 48  How to AssembleOption Frame Assembly      FRP54H110K  FRP54H120K Set        FRP54H210K  FRP54H220K Set  MaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF  DWG  STEP  IGES",
      "url": "http://0.0.0.0:4000/docs/en/dxl/pro/l54-50-s290-r/"
      } ,
  
  
      "docs-en-dxl-pro-l54-50-s500-r":  {
      "title": "L54-50-S500-R",
      "content"	 : "L5450S500RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps   10 5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      656g  23 1oz               Dimensions  W x H x D       54mm x 108mm x 54mm  2 13 x 4 25 x 2 13               Resolution      361 384 steps rev              Gear Ratio      501 9  1              Backlash      5 0arcmin  0 08°               No Load Speed      16 0rpm              No Load Current      0 7A              Continuous Speed      13 7rpm              Continuous Torque      14 0Nm  1 982 ozfin               Continuous Current      1 9A              Output      100W              Operating Temperature      5°C   55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multidrop BUS              ID      0   252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different  Stall torque is measured from the max torque that it can reach  This is generally how RC servos measure their torque  For the Performance graph with the NT curves  it is measured with the load gradually increasing  The motor operation environment is closer to the performance graph  not stall torque method  This is probably why the performance graph is being broadly used in the industrial market  This is why the max torque of the performance grap can actually be less than the stall torque Caution When connecting to power supply  it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL Do not connect or disconnect DYNAMIXEL when power is being supplied Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 2 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the power is reset Volatile   On the other hand  data in the EEPROM Area is maintained even when the DYNAMIXEL is powered off NonVolatile   Data in the EEPROM Area can only be written to if Torque Enable 64  is cleared to ‘0’ Off  SizeThe Size of data varies from 1 to 4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  For data larger than 2 bytes will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      38152              2      4      Model Information      Model Information      R                    6      1      Firmware Version      Firmware Version      R                    7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW                    30      2      Torque Limit      Maximum Torque Limit      RW                    32      4      Velocity Limit      Maximum Velocity Limit      RW                    36      4      Max Position Limit      Maximum Position Limit      RW                    40      4      Min Position Limit      Minimum Position Limit      RW                    44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW                    588      2      Velocity P Gain      P Gain of Velocity      RW                    594      2      Position P Gain      P Gain of Position      RW                    596      4      Goal Position      Target Position Value      RW                    600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R                    611      4      Present Position      Present Position Value      R                    615      4      Present Velocity      Present Velocity Value      R                    621      2      Present Current      Present Current Value      R                    623      2      Present Input Voltage      Present Input Voltage      R                    625      1      Present Temperature      Present Internal Temperature      R                    626      2      External Port Data 1      External Port Data 1      R RW      0              628      2      External Port Data 2      External Port Data 2      R RW      0              630      2      External Port Data 3      External Port Data 3      R RW      0              632      2      External Port Data 4      External Port Data 4      R RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable 562  is cleared to ‘0’ Model Number 0 This address stores model number of the DYNAMIXEL             Model Name      Model Number                  L5450S500R      38152  0x9508       Firmware Version 6 This address stores firmware version of the DYNAMIXEL ID 7 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate 8 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate                  8      10 5M              7      4 5M              6      4M              5      3M              4      2M              3      1M              2      115 200              1 Default       57 600              0      9 600      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time 9 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       Operating Mode 11             Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque  Speed and Position will not be controlled               1      Velocity Control Mode      This mode controls Velocity and Torque  Position will not be controlled               3 Default       Position Control Mode      This mode controls Position  Velocity and Torque               4      Extended Position Control Mode      This mode controls Position  Velocity and Torque  Multiturn is enabled       Homing Offset 13 Users can adjust the Home position by setting Homing Offset 13   The Homing Offset value is added to the Present Position 611  Present Position 611    Actual Position   Homing Offset 13              Value Range                  2 147 483 648   2 147 483 647      Moving Threshold 17 If Present Velocity 615  is bigger than this value  Moving 610  is set to ‘1’ and otherwise Moving 610  is cleared to ‘0’  This value determines whether Dynamixel is in motion or not             Value Range                  0   2 147 483 647      Temperature Limit 21 This value limits operating temperature  When the Present Temperature 625  that indicates internal temperature of Dynamixel is greater than the Temperature Limit 21   the Over Heating Error Bit Bit 2  in the Hardware Error Status 892  will be set  If Overheating Error Bit Bit 2  is configured in the Shutdown 48  when Over Heating Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 1°      0   100      0   100°      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit 22  24 These values are maximum and minimum operating voltages When current input voltage acquired from Present Input Voltage 623  exceeds the range of Max Voltage Limit 36  and Min Voltage Limit 40   Input Voltage Error Bit Bit 0  in the Hardware Error Status 892  will be set to ‘1’  If Input Voltage Error Bit Bit 0  is configured in the Shutdown 48  when Input Voltage Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 0 1V      0   400      0   40 0V      Acceleration Limit 26 This value indicates acceleration limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Torque Limit 30 This value indicates torque limit  Goal Torque 604  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   32 767      Velocity Limit 32 This value indicates velocity limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Min Max Position Limit 36  40 These values limit maximum and minimum target positions  The Goal Position 596  can’t exceed these values Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet  In Extended Position Control Mode  these limits will be ignored             Model Name      Value Range                  H54200S500RH54100S500R      250 961   250 961              H4220S300R      151 875   151 875              M5460S250RM5440S250R      125 708   125 708              M4210S260R      131 593   131 593              L5450S290R      103 846   103 846              L5450S500RL5430S500R      180 692   180 692              L5430S400R      144 197   144 197      External Port Mode  External Port DataDynamixel PRO is equipped with multipurpose expansion ports             Item      Range                  Voltage      0   3 3V              Current      0   5mA        Analog input mode analog values from an external port get converted to digital  These values are automatically updated in External port data 626   632    Output mode can adjust external port voltage 0V or 3 3V  External port data value of 0 is 0V  1 for 3 3V   Pullup input mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pullup  Depending on needs an external strong pullup is acceptable   Pullup output mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pulldown  Depending on needs an external strong pulldown is acceptable External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector             Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3 3V      PORT1      PORT2      PORT3      PORT4      Shutdown 48 The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation  Each Bit is inclusively processed with the ‘OR’ logic  therefore  multiple options can be generated  For instance  when ‘0x05’  binary  00000101  is defined as Shutdown 48   Dynamixel can detect both Input Voltage Error binary  00000001  and Overheating Error binary  00000100   If those errors are detected  Torque Enable 562  is cleared to ‘0’ and the motor output becomes 0 %   In order to reuse Dynamixel Pro in shutdown status  REBOOT has to be done  The followings are detectable situations             Bit      Item      Description                  Bit 7                          Bit 6                          Bit 5      Overload Error default       Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error default       Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error default       Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs  use below method to reboot Dynamixels   H W REBOOT  Turn off the power and turn on again  S W REBOOT  Transmit REBOOT Instruction  For more details  please refer to the Protocol section of eManual  Indirect Address  Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses  Sequential addresses increase Instruction Packet efficiency  Addresses that can be defined as Indirect Address is limited to RAM area Address 562   892  If specific address is allocated to Indirect Address  Indirect Address inherits features and properties of the Data from the specific Address  Property includes Size Byte length   value range  and Access property Read Only  Read Write   For instance  if address 563 LED Red  is allocated to Indirect Address 1 49   Indirect Data 1 634  will have the exactly same value of LED Red 563  Example 1 Allocating 1 byte LED 563  to Indirect Data 1 634    Indirect Address 1 49   change the value to ‘563’ which is the address of LED Red   Set Indirect Data 1 634  to ‘1’  LED Red 563  also becomes ‘1’ and Red LED will be turned on   Set Indirect Data 1 634  to ‘0’  LED Red 563  also becomes ‘0’ and Red LED will be turned off Example 2 Allocating Size 4 byte Goal Position 596  to Indirect Data 2 635   4 sequential bytes have to be allocated   Indirect Address 2 51   change the value to ‘596’ which is the first address of Goal Position   Indirect Address 3 53   change the value to ‘597’ which is the second address of Goal Position   Indirect Address 4 55   change the value to ‘598’ which is the third address of Goal Position   Indirect Address 5 57   change the value to ‘599’ which is the fourth address of Goal Position   Set 4 byte value 305 419 896 0x12345678  to Indirect Data 2  Goal Position 596  also becomes 305 419 896 0x12345678  as below             Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2 byte  to Indirect Address  all address must be allocated to Indirect Address like the above Example 2 Note Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0 Torque Enable 562 Controls Torque ON OFF  Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected             Value      Description                  0 Default       Torque OFF Freerun  and the motor does not generate torque              1      Torque ON and all Data in the EEPROM area will be locked      Note Present Position 132  can be reset when Operating Mode 11  and Torque Enable 64  are updated  For more details  please refer to the Homing Offset 20  and Present Position 132  RGB LED 563 Controls the RGB LED on Dynamixel PRO             Address      Color      Range                  563      Red      0   255              564      Green      0   255              565      Blue      0   255      Velocity PI Gain 586  588 These values indicate P and I Gains of Velocity Control Mode  The I Gain includes sampling time  Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI             Gain Value Range                  0   32 767      Note KPA stands for Antiwindup Gain that cannot be modified by users  For more details about the PID controller  please refer to the PID Controller at wikipedia Position P Gain 594 This P Gain is used in Position Control Mode  Below figure is a block diagram describing the Position Control Mode  The Position Controller is cascaded with the Velocity Controller  KPP stands for Position P Gain             Gain Value Range                  0   32 767      Goal Position 596   Present Position 611 Target position can be set with Goal Position 596   This value can’t be smaller than the Min Position Limit 40  or larger than Max Position Limit 36              Model      Angle Range      Position Range      Description                  H54200S500RH54100S500R      180°   180 °      250 961 5   250 961 5                    H4220S300R      180°   180 °      151 875   151 875            Goal Velocity 600 Goal Velocity 600  can be used to set a target velocity and this value cannot exceed Velocity Limit  32  In case of Position Control Mode or Extended Position Control Mode  Goal Velocity will be used to limit the velocity However  if Goal Velocity is set to ‘0’  Velocity Limit 32  will be used to limit the velocity   Please refer to the block diagram of Position P Gain The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor Output RPM   Goal Velocity   Scale Factor            Model      Scale Factor RPM                   H54200S500RH54100S500R      0 00199234              H4220S300R      0 00329218              M5460S250RM5440S250R      0 00397746              M4210S260R      0 00389076              L5450S290R      0 00346667              L5450S500RL5430S500R      0 00199234              L5430S400R      0 00249657      Goal Torque 604 Goal torque  604  can be used to set a target torque and this value cannot exceed Torque Limit 30  When the Operating Mode 11  is set other than Torque Control Mode  Goal Torque will be used to limit the torque However  if Goal Torque is set to ‘0’  Torque Limit 30  will be used to limit the torque   Please refer to the block diagram of Position Gain or Velocity Gain The relationship between torque  current  and goal torque is shown below             Model      Formula                  PRO 54      A   V   33 000   2 048A  Current mA V  Present Current Goal Torque              PRO 42      A   V   8 250   2 048A  Current mA V  Present Current Goal Torque      Goal Acceleration 606 Goal Acceleration 606  can be used to set a target acceleration  This value is used in Velocity Control Mode  Position Control Mode and Extended Position Control Mode  The profile control will be enabled when both Goal Acceleration 606  and Goal Velocity 600  are not ‘0’ Please refer to the Goal Velocity 600  for RPM conversion constant             Value Range      Unit                  2 147 483 647   2 147 483 647      58 000 RPM2 @ Core Motor      Moving 610 This value indicates whether Dynamixel Pro is in motion or not  If absolute value of Present Velocity 615  is greater than Moving Threshold 17   Moving 610  is set to ‘1’  Otherwise  it will be cleared to ‘0’  However  this value will always be set to ‘1’ regardless of Present Velocity 615  while Profile is in progress with Goal Position 596  instruction             Value      Description                  0      Movement is not detected              1      Movement is detected  or Profile is in progress Goal Position 596  instruction is being processed       Present Velocity 615 This value indicates present Velocity  For more details  please refer to the Goal Velocity 600  Present Current 621 This value indicates present Current  For more details  please refer to the Goal Torque 604  Present Input Voltage 623 This value indicates present voltage that is being supplied  For more details  please refer to the Min Max Voltage Limit 24  22  Present Temperature 625 This value indicates present internal Temperature  For more details  please refer to the Temperature Limit 21  Registered Instruction 890             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Status Return Level 891 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Hardware Error Status 892 This value indicates hardware error status  For more details  please refer to the Shutdown 48  How to AssembleOption Frame Assembly      FRP54H110K  FRP54H120K Set        FRP54H210K  FRP54H220K Set  MaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF  DWG  STEP  IGES",
      "url": "http://0.0.0.0:4000/docs/en/dxl/pro/l54-50-s500-r/"
      } ,
  
  
      "docs-en-dxl-pro-m42-10-s260-r":  {
      "title": "M42-10-S260-R",
      "content"	 : "M4210S260RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps   10 5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      269g  9 5oz               Dimensions  W x H x D       42mm x 72mm x 42mm  1 65 x 2 83 x 1 65               Resolution      263 187 steps rev              Gear Ratio      257 0  1              Backlash      4 2arcmin  0 07°               No Load Speed      28 0rpm              No Load Current      0 52A              Continuous Speed      26 0rpm              Continuous Torque      1 7Nm  241 ozfin               Continuous Current      0 6A              Output      10W              Operating Temperature      5°C   55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multidrop BUS              ID      0   252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different  Stall torque is measured from the max torque that it can reach  This is generally how RC servos measure their torque  For the Performance graph with the NT curves  it is measured with the load gradually increasing  The motor operation environment is closer to the performance graph  not stall torque method  This is probably why the performance graph is being broadly used in the industrial market  This is why the max torque of the performance grap can actually be less than the stall torque Caution When connecting to power supply  it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL Do not connect or disconnect DYNAMIXEL when power is being supplied Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 2 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the power is reset Volatile   On the other hand  data in the EEPROM Area is maintained even when the DYNAMIXEL is powered off NonVolatile   Data in the EEPROM Area can only be written to if Torque Enable 64  is cleared to ‘0’ Off  SizeThe Size of data varies from 1 to 4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  For data larger than 2 bytes will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      43288              2      4      Model Information      Model Information      R                    6      1      Firmware Version      Firmware Version      R                    7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW                    30      2      Torque Limit      Maximum Torque Limit      RW                    32      4      Velocity Limit      Maximum Velocity Limit      RW                    36      4      Max Position Limit      Maximum Position Limit      RW                    40      4      Min Position Limit      Minimum Position Limit      RW                    44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW                    588      2      Velocity P Gain      P Gain of Velocity      RW                    594      2      Position P Gain      P Gain of Position      RW                    596      4      Goal Position      Target Position Value      RW                    600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R                    611      4      Present Position      Present Position Value      R                    615      4      Present Velocity      Present Velocity Value      R                    621      2      Present Current      Present Current Value      R                    623      2      Present Input Voltage      Present Input Voltage      R                    625      1      Present Temperature      Present Internal Temperature      R                    626      2      External Port Data 1      External Port Data 1      R RW      0              628      2      External Port Data 2      External Port Data 2      R RW      0              630      2      External Port Data 3      External Port Data 3      R RW      0              632      2      External Port Data 4      External Port Data 4      R RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable 562  is cleared to ‘0’ Model Number 0 This address stores model number of the DYNAMIXEL             Model Name      Model Number                  H4220S300R      43288  0xA918       Firmware Version 6 This address stores firmware version of the DYNAMIXEL ID 7 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate 8 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate                  8      10 5M              7      4 5M              6      4M              5      3M              4      2M              3      1M              2      115 200              1 Default       57 600              0      9 600      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time 9 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       Operating Mode 11             Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque  Speed and Position will not be controlled               1      Velocity Control Mode      This mode controls Velocity and Torque  Position will not be controlled               3 Default       Position Control Mode      This mode controls Position  Velocity and Torque               4      Extended Position Control Mode      This mode controls Position  Velocity and Torque  Multiturn is enabled       Homing Offset 13 Users can adjust the Home position by setting Homing Offset 13   The Homing Offset value is added to the Present Position 611  Present Position 611    Actual Position   Homing Offset 13              Value Range                  2 147 483 648   2 147 483 647      Moving Threshold 17 If Present Velocity 615  is bigger than this value  Moving 610  is set to ‘1’ and otherwise Moving 610  is cleared to ‘0’  This value determines whether Dynamixel is in motion or not             Value Range                  0   2 147 483 647      Temperature Limit 21 This value limits operating temperature  When the Present Temperature 625  that indicates internal temperature of Dynamixel is greater than the Temperature Limit 21   the Over Heating Error Bit Bit 2  in the Hardware Error Status 892  will be set  If Overheating Error Bit Bit 2  is configured in the Shutdown 48  when Over Heating Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 1°      0   100      0   100°      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit 22  24 These values are maximum and minimum operating voltages When current input voltage acquired from Present Input Voltage 623  exceeds the range of Max Voltage Limit 36  and Min Voltage Limit 40   Input Voltage Error Bit Bit 0  in the Hardware Error Status 892  will be set to ‘1’  If Input Voltage Error Bit Bit 0  is configured in the Shutdown 48  when Input Voltage Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 0 1V      0   400      0   40 0V      Acceleration Limit 26 This value indicates acceleration limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Torque Limit 30 This value indicates torque limit  Goal Torque 604  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   32 767      Velocity Limit 32 This value indicates velocity limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Min Max Position Limit 36  40 These values limit maximum and minimum target positions  The Goal Position 596  can’t exceed these values Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet  In Extended Position Control Mode  these limits will be ignored             Model Name      Value Range                  H54200S500RH54100S500R      250 961   250 961              H4220S300R      151 875   151 875              M5460S250RM5440S250R      125 708   125 708              M4210S260R      131 593   131 593              L5450S290R      103 846   103 846              L5450S500RL5430S500R      180 692   180 692              L5430S400R      144 197   144 197      External Port Mode  External Port DataDynamixel PRO is equipped with multipurpose expansion ports             Item      Range                  Voltage      0   3 3V              Current      0   5mA        Analog input mode analog values from an external port get converted to digital  These values are automatically updated in External port data 626   632    Output mode can adjust external port voltage 0V or 3 3V  External port data value of 0 is 0V  1 for 3 3V   Pullup input mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pullup  Depending on needs an external strong pullup is acceptable   Pullup output mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pulldown  Depending on needs an external strong pulldown is acceptable External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector             Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3 3V      PORT1      PORT2      PORT3      PORT4      Shutdown 48 The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation  Each Bit is inclusively processed with the ‘OR’ logic  therefore  multiple options can be generated  For instance  when ‘0x05’  binary  00000101  is defined as Shutdown 48   Dynamixel can detect both Input Voltage Error binary  00000001  and Overheating Error binary  00000100   If those errors are detected  Torque Enable 562  is cleared to ‘0’ and the motor output becomes 0 %   In order to reuse Dynamixel Pro in shutdown status  REBOOT has to be done  The followings are detectable situations             Bit      Item      Description                  Bit 7                          Bit 6                          Bit 5      Overload Error default       Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error default       Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error default       Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs  use below method to reboot Dynamixels   H W REBOOT  Turn off the power and turn on again  S W REBOOT  Transmit REBOOT Instruction  For more details  please refer to the Protocol section of eManual  Indirect Address  Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses  Sequential addresses increase Instruction Packet efficiency  Addresses that can be defined as Indirect Address is limited to RAM area Address 562   892  If specific address is allocated to Indirect Address  Indirect Address inherits features and properties of the Data from the specific Address  Property includes Size Byte length   value range  and Access property Read Only  Read Write   For instance  if address 563 LED Red  is allocated to Indirect Address 1 49   Indirect Data 1 634  will have the exactly same value of LED Red 563  Example 1 Allocating 1 byte LED 563  to Indirect Data 1 634    Indirect Address 1 49   change the value to ‘563’ which is the address of LED Red   Set Indirect Data 1 634  to ‘1’  LED Red 563  also becomes ‘1’ and Red LED will be turned on   Set Indirect Data 1 634  to ‘0’  LED Red 563  also becomes ‘0’ and Red LED will be turned off Example 2 Allocating Size 4 byte Goal Position 596  to Indirect Data 2 635   4 sequential bytes have to be allocated   Indirect Address 2 51   change the value to ‘596’ which is the first address of Goal Position   Indirect Address 3 53   change the value to ‘597’ which is the second address of Goal Position   Indirect Address 4 55   change the value to ‘598’ which is the third address of Goal Position   Indirect Address 5 57   change the value to ‘599’ which is the fourth address of Goal Position   Set 4 byte value 305 419 896 0x12345678  to Indirect Data 2  Goal Position 596  also becomes 305 419 896 0x12345678  as below             Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2 byte  to Indirect Address  all address must be allocated to Indirect Address like the above Example 2 Note Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0 Torque Enable 562 Controls Torque ON OFF  Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected             Value      Description                  0 Default       Torque OFF Freerun  and the motor does not generate torque              1      Torque ON and all Data in the EEPROM area will be locked      Note Present Position 132  can be reset when Operating Mode 11  and Torque Enable 64  are updated  For more details  please refer to the Homing Offset 20  and Present Position 132  RGB LED 563 Controls the RGB LED on Dynamixel PRO             Address      Color      Range                  563      Red      0   255              564      Green      0   255              565      Blue      0   255      Velocity PI Gain 586  588 These values indicate P and I Gains of Velocity Control Mode  The I Gain includes sampling time  Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI             Gain Value Range                  0   32 767      Note KPA stands for Antiwindup Gain that cannot be modified by users  For more details about the PID controller  please refer to the PID Controller at wikipedia Position P Gain 594 This P Gain is used in Position Control Mode  Below figure is a block diagram describing the Position Control Mode  The Position Controller is cascaded with the Velocity Controller  KPP stands for Position P Gain             Gain Value Range                  0   32 767      Goal Position 596   Present Position 611 Target position can be set with Goal Position 596   This value can’t be smaller than the Min Position Limit 40  or larger than Max Position Limit 36              Model      Angle Range      Position Range      Description                  H54200S500RH54100S500R      180°   180 °      250 961 5   250 961 5                    H4220S300R      180°   180 °      151 875   151 875            Goal Velocity 600 Goal Velocity 600  can be used to set a target velocity and this value cannot exceed Velocity Limit  32  In case of Position Control Mode or Extended Position Control Mode  Goal Velocity will be used to limit the velocity However  if Goal Velocity is set to ‘0’  Velocity Limit 32  will be used to limit the velocity   Please refer to the block diagram of Position P Gain The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor Output RPM   Goal Velocity   Scale Factor            Model      Scale Factor RPM                   H54200S500RH54100S500R      0 00199234              H4220S300R      0 00329218              M5460S250RM5440S250R      0 00397746              M4210S260R      0 00389076              L5450S290R      0 00346667              L5450S500RL5430S500R      0 00199234              L5430S400R      0 00249657      Goal Torque 604 Goal torque  604  can be used to set a target torque and this value cannot exceed Torque Limit 30  When the Operating Mode 11  is set other than Torque Control Mode  Goal Torque will be used to limit the torque However  if Goal Torque is set to ‘0’  Torque Limit 30  will be used to limit the torque   Please refer to the block diagram of Position Gain or Velocity Gain The relationship between torque  current  and goal torque is shown below             Model      Formula                  PRO 54      A   V   33 000   2 048A  Current mA V  Present Current Goal Torque              PRO 42      A   V   8 250   2 048A  Current mA V  Present Current Goal Torque      Goal Acceleration 606 Goal Acceleration 606  can be used to set a target acceleration  This value is used in Velocity Control Mode  Position Control Mode and Extended Position Control Mode  The profile control will be enabled when both Goal Acceleration 606  and Goal Velocity 600  are not ‘0’ Please refer to the Goal Velocity 600  for RPM conversion constant             Value Range      Unit                  2 147 483 647   2 147 483 647      58 000 RPM2 @ Core Motor      Moving 610 This value indicates whether Dynamixel Pro is in motion or not  If absolute value of Present Velocity 615  is greater than Moving Threshold 17   Moving 610  is set to ‘1’  Otherwise  it will be cleared to ‘0’  However  this value will always be set to ‘1’ regardless of Present Velocity 615  while Profile is in progress with Goal Position 596  instruction             Value      Description                  0      Movement is not detected              1      Movement is detected  or Profile is in progress Goal Position 596  instruction is being processed       Present Velocity 615 This value indicates present Velocity  For more details  please refer to the Goal Velocity 600  Present Current 621 This value indicates present Current  For more details  please refer to the Goal Torque 604  Present Input Voltage 623 This value indicates present voltage that is being supplied  For more details  please refer to the Min Max Voltage Limit 24  22  Present Temperature 625 This value indicates present internal Temperature  For more details  please refer to the Temperature Limit 21  Registered Instruction 890             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Status Return Level 891 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Hardware Error Status 892 This value indicates hardware error status  For more details  please refer to the Shutdown 48  How to AssembleOption Frame Assembly  FRP42H110K  FRP42H120K SetMaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF  DWG  STEP  IGES",
      "url": "http://0.0.0.0:4000/docs/en/dxl/pro/m42-10-s260-r/"
      } ,
  
  
      "docs-en-dxl-pro-m54-40-s250-r":  {
      "title": "M54-40-S250-R",
      "content"	 : "M5440S250RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps   10 5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      710g  25 0oz               Dimensions  W x H x D       54mm x 108mm x 54mm  2 13 x 4 25 x 2 13               Resolution      251 417 steps rev              Gear Ratio      251 4  1              Backlash      3 8arcmin  0 06°               No Load Speed      28 4rpm              No Load Current      1 32A              Continuous Speed      24 2rpm              Continuous Torque      3 9Nm  552 ozfin               Continuous Current      1 9A              Output      40W              Operating Temperature      5°C   55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multidrop BUS              ID      0   252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different  Stall torque is measured from the max torque that it can reach  This is generally how RC servos measure their torque  For the Performance graph with the NT curves  it is measured with the load gradually increasing  The motor operation environment is closer to the performance graph  not stall torque method  This is probably why the performance graph is being broadly used in the industrial market  This is why the max torque of the performance grap can actually be less than the stall torque Caution When connecting to power supply  it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL Do not connect or disconnect DYNAMIXEL when power is being supplied Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 2 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the power is reset Volatile   On the other hand  data in the EEPROM Area is maintained even when the DYNAMIXEL is powered off NonVolatile   Data in the EEPROM Area can only be written to if Torque Enable 64  is cleared to ‘0’ Off  SizeThe Size of data varies from 1 to 4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  For data larger than 2 bytes will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      46096              2      4      Model Information      Model Information      R                    6      1      Firmware Version      Firmware Version      R                    7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW                    30      2      Torque Limit      Maximum Torque Limit      RW                    32      4      Velocity Limit      Maximum Velocity Limit      RW                    36      4      Max Position Limit      Maximum Position Limit      RW                    40      4      Min Position Limit      Minimum Position Limit      RW                    44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW                    588      2      Velocity P Gain      P Gain of Velocity      RW                    594      2      Position P Gain      P Gain of Position      RW                    596      4      Goal Position      Target Position Value      RW                    600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R                    611      4      Present Position      Present Position Value      R                    615      4      Present Velocity      Present Velocity Value      R                    621      2      Present Current      Present Current Value      R                    623      2      Present Input Voltage      Present Input Voltage      R                    625      1      Present Temperature      Present Internal Temperature      R                    626      2      External Port Data 1      External Port Data 1      R RW      0              628      2      External Port Data 2      External Port Data 2      R RW      0              630      2      External Port Data 3      External Port Data 3      R RW      0              632      2      External Port Data 4      External Port Data 4      R RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable 562  is cleared to ‘0’ Model Number 0 This address stores model number of the DYNAMIXEL             Model Name      Model Number                  M5440S250R      46096  0xB410       Firmware Version 6 This address stores firmware version of the DYNAMIXEL ID 7 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate 8 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate                  8      10 5M              7      4 5M              6      4M              5      3M              4      2M              3      1M              2      115 200              1 Default       57 600              0      9 600      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time 9 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       Operating Mode 11             Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque  Speed and Position will not be controlled               1      Velocity Control Mode      This mode controls Velocity and Torque  Position will not be controlled               3 Default       Position Control Mode      This mode controls Position  Velocity and Torque               4      Extended Position Control Mode      This mode controls Position  Velocity and Torque  Multiturn is enabled       Homing Offset 13 Users can adjust the Home position by setting Homing Offset 13   The Homing Offset value is added to the Present Position 611  Present Position 611    Actual Position   Homing Offset 13              Value Range                  2 147 483 648   2 147 483 647      Moving Threshold 17 If Present Velocity 615  is bigger than this value  Moving 610  is set to ‘1’ and otherwise Moving 610  is cleared to ‘0’  This value determines whether Dynamixel is in motion or not             Value Range                  0   2 147 483 647      Temperature Limit 21 This value limits operating temperature  When the Present Temperature 625  that indicates internal temperature of Dynamixel is greater than the Temperature Limit 21   the Over Heating Error Bit Bit 2  in the Hardware Error Status 892  will be set  If Overheating Error Bit Bit 2  is configured in the Shutdown 48  when Over Heating Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 1°      0   100      0   100°      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit 22  24 These values are maximum and minimum operating voltages When current input voltage acquired from Present Input Voltage 623  exceeds the range of Max Voltage Limit 36  and Min Voltage Limit 40   Input Voltage Error Bit Bit 0  in the Hardware Error Status 892  will be set to ‘1’  If Input Voltage Error Bit Bit 0  is configured in the Shutdown 48  when Input Voltage Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 0 1V      0   400      0   40 0V      Acceleration Limit 26 This value indicates acceleration limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Torque Limit 30 This value indicates torque limit  Goal Torque 604  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   32 767      Velocity Limit 32 This value indicates velocity limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Min Max Position Limit 36  40 These values limit maximum and minimum target positions  The Goal Position 596  can’t exceed these values Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet  In Extended Position Control Mode  these limits will be ignored             Model Name      Value Range                  H54200S500RH54100S500R      250 961   250 961              H4220S300R      151 875   151 875              M5460S250RM5440S250R      125 708   125 708              M4210S260R      131 593   131 593              L5450S290R      103 846   103 846              L5450S500RL5430S500R      180 692   180 692              L5430S400R      144 197   144 197      External Port Mode  External Port DataDynamixel PRO is equipped with multipurpose expansion ports             Item      Range                  Voltage      0   3 3V              Current      0   5mA        Analog input mode analog values from an external port get converted to digital  These values are automatically updated in External port data 626   632    Output mode can adjust external port voltage 0V or 3 3V  External port data value of 0 is 0V  1 for 3 3V   Pullup input mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pullup  Depending on needs an external strong pullup is acceptable   Pullup output mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pulldown  Depending on needs an external strong pulldown is acceptable External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector             Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3 3V      PORT1      PORT2      PORT3      PORT4      Shutdown 48 The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation  Each Bit is inclusively processed with the ‘OR’ logic  therefore  multiple options can be generated  For instance  when ‘0x05’  binary  00000101  is defined as Shutdown 48   Dynamixel can detect both Input Voltage Error binary  00000001  and Overheating Error binary  00000100   If those errors are detected  Torque Enable 562  is cleared to ‘0’ and the motor output becomes 0 %   In order to reuse Dynamixel Pro in shutdown status  REBOOT has to be done  The followings are detectable situations             Bit      Item      Description                  Bit 7                          Bit 6                          Bit 5      Overload Error default       Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error default       Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error default       Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs  use below method to reboot Dynamixels   H W REBOOT  Turn off the power and turn on again  S W REBOOT  Transmit REBOOT Instruction  For more details  please refer to the Protocol section of eManual  Indirect Address  Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses  Sequential addresses increase Instruction Packet efficiency  Addresses that can be defined as Indirect Address is limited to RAM area Address 562   892  If specific address is allocated to Indirect Address  Indirect Address inherits features and properties of the Data from the specific Address  Property includes Size Byte length   value range  and Access property Read Only  Read Write   For instance  if address 563 LED Red  is allocated to Indirect Address 1 49   Indirect Data 1 634  will have the exactly same value of LED Red 563  Example 1 Allocating 1 byte LED 563  to Indirect Data 1 634    Indirect Address 1 49   change the value to ‘563’ which is the address of LED Red   Set Indirect Data 1 634  to ‘1’  LED Red 563  also becomes ‘1’ and Red LED will be turned on   Set Indirect Data 1 634  to ‘0’  LED Red 563  also becomes ‘0’ and Red LED will be turned off Example 2 Allocating Size 4 byte Goal Position 596  to Indirect Data 2 635   4 sequential bytes have to be allocated   Indirect Address 2 51   change the value to ‘596’ which is the first address of Goal Position   Indirect Address 3 53   change the value to ‘597’ which is the second address of Goal Position   Indirect Address 4 55   change the value to ‘598’ which is the third address of Goal Position   Indirect Address 5 57   change the value to ‘599’ which is the fourth address of Goal Position   Set 4 byte value 305 419 896 0x12345678  to Indirect Data 2  Goal Position 596  also becomes 305 419 896 0x12345678  as below             Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2 byte  to Indirect Address  all address must be allocated to Indirect Address like the above Example 2 Note Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0 Torque Enable 562 Controls Torque ON OFF  Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected             Value      Description                  0 Default       Torque OFF Freerun  and the motor does not generate torque              1      Torque ON and all Data in the EEPROM area will be locked      Note Present Position 132  can be reset when Operating Mode 11  and Torque Enable 64  are updated  For more details  please refer to the Homing Offset 20  and Present Position 132  RGB LED 563 Controls the RGB LED on Dynamixel PRO             Address      Color      Range                  563      Red      0   255              564      Green      0   255              565      Blue      0   255      Velocity PI Gain 586  588 These values indicate P and I Gains of Velocity Control Mode  The I Gain includes sampling time  Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI             Gain Value Range                  0   32 767      Note KPA stands for Antiwindup Gain that cannot be modified by users  For more details about the PID controller  please refer to the PID Controller at wikipedia Position P Gain 594 This P Gain is used in Position Control Mode  Below figure is a block diagram describing the Position Control Mode  The Position Controller is cascaded with the Velocity Controller  KPP stands for Position P Gain             Gain Value Range                  0   32 767      Goal Position 596   Present Position 611 Target position can be set with Goal Position 596   This value can’t be smaller than the Min Position Limit 40  or larger than Max Position Limit 36              Model      Angle Range      Position Range      Description                  H54200S500RH54100S500R      180°   180 °      250 961 5   250 961 5                    H4220S300R      180°   180 °      151 875   151 875            Goal Velocity 600 Goal Velocity 600  can be used to set a target velocity and this value cannot exceed Velocity Limit  32  In case of Position Control Mode or Extended Position Control Mode  Goal Velocity will be used to limit the velocity However  if Goal Velocity is set to ‘0’  Velocity Limit 32  will be used to limit the velocity   Please refer to the block diagram of Position P Gain The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor Output RPM   Goal Velocity   Scale Factor            Model      Scale Factor RPM                   H54200S500RH54100S500R      0 00199234              H4220S300R      0 00329218              M5460S250RM5440S250R      0 00397746              M4210S260R      0 00389076              L5450S290R      0 00346667              L5450S500RL5430S500R      0 00199234              L5430S400R      0 00249657      Goal Torque 604 Goal torque  604  can be used to set a target torque and this value cannot exceed Torque Limit 30  When the Operating Mode 11  is set other than Torque Control Mode  Goal Torque will be used to limit the torque However  if Goal Torque is set to ‘0’  Torque Limit 30  will be used to limit the torque   Please refer to the block diagram of Position Gain or Velocity Gain The relationship between torque  current  and goal torque is shown below             Model      Formula                  PRO 54      A   V   33 000   2 048A  Current mA V  Present Current Goal Torque              PRO 42      A   V   8 250   2 048A  Current mA V  Present Current Goal Torque      Goal Acceleration 606 Goal Acceleration 606  can be used to set a target acceleration  This value is used in Velocity Control Mode  Position Control Mode and Extended Position Control Mode  The profile control will be enabled when both Goal Acceleration 606  and Goal Velocity 600  are not ‘0’ Please refer to the Goal Velocity 600  for RPM conversion constant             Value Range      Unit                  2 147 483 647   2 147 483 647      58 000 RPM2 @ Core Motor      Moving 610 This value indicates whether Dynamixel Pro is in motion or not  If absolute value of Present Velocity 615  is greater than Moving Threshold 17   Moving 610  is set to ‘1’  Otherwise  it will be cleared to ‘0’  However  this value will always be set to ‘1’ regardless of Present Velocity 615  while Profile is in progress with Goal Position 596  instruction             Value      Description                  0      Movement is not detected              1      Movement is detected  or Profile is in progress Goal Position 596  instruction is being processed       Present Velocity 615 This value indicates present Velocity  For more details  please refer to the Goal Velocity 600  Present Current 621 This value indicates present Current  For more details  please refer to the Goal Torque 604  Present Input Voltage 623 This value indicates present voltage that is being supplied  For more details  please refer to the Min Max Voltage Limit 24  22  Present Temperature 625 This value indicates present internal Temperature  For more details  please refer to the Temperature Limit 21  Registered Instruction 890             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Status Return Level 891 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Hardware Error Status 892 This value indicates hardware error status  For more details  please refer to the Shutdown 48  How to AssembleOption Frame Assembly      FRP54H110K  FRP54H120K Set        FRP54H210K  FRP54H220K Set  MaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF  DWG  STEP  IGES",
      "url": "http://0.0.0.0:4000/docs/en/dxl/pro/m54-40-s250-r/"
      } ,
  
  
      "docs-en-dxl-pro-m54-60-s250-r":  {
      "title": "M54-60-S250-R",
      "content"	 : "M5460S250RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps   10 5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      853g  30 0oz               Dimensions  W x H x D       54mm x 126mm x 54mm  2 13 x 4 96 x 2 13               Resolution      251 417 steps rev              Gear Ratio      251 4  1              Backlash      3 8arcmin  0 06°               No Load Speed      33 1rpm              No Load Current      1 25A              Continuous Speed      28 3rpm              Continuous Torque      10 1Nm  1 430 ozfin               Continuous Current      3 0A              Output      60W              Operating Temperature      5°C   55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multidrop BUS              ID      0   252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different  Stall torque is measured from the max torque that it can reach  This is generally how RC servos measure their torque  For the Performance graph with the NT curves  it is measured with the load gradually increasing  The motor operation environment is closer to the performance graph  not stall torque method  This is probably why the performance graph is being broadly used in the industrial market  This is why the max torque of the performance grap can actually be less than the stall torque Caution When connecting to power supply  it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL Do not connect or disconnect DYNAMIXEL when power is being supplied Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 2 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the power is reset Volatile   On the other hand  data in the EEPROM Area is maintained even when the DYNAMIXEL is powered off NonVolatile   Data in the EEPROM Area can only be written to if Torque Enable 64  is cleared to ‘0’ Off  SizeThe Size of data varies from 1 to 4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  For data larger than 2 bytes will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      46352              2      4      Model Information      Model Information      R                    6      1      Firmware Version      Firmware Version      R                    7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW                    30      2      Torque Limit      Maximum Torque Limit      RW                    32      4      Velocity Limit      Maximum Velocity Limit      RW                    36      4      Max Position Limit      Maximum Position Limit      RW                    40      4      Min Position Limit      Minimum Position Limit      RW                    44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW                    588      2      Velocity P Gain      P Gain of Velocity      RW                    594      2      Position P Gain      P Gain of Position      RW                    596      4      Goal Position      Target Position Value      RW                    600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R                    611      4      Present Position      Present Position Value      R                    615      4      Present Velocity      Present Velocity Value      R                    621      2      Present Current      Present Current Value      R                    623      2      Present Input Voltage      Present Input Voltage      R                    625      1      Present Temperature      Present Internal Temperature      R                    626      2      External Port Data 1      External Port Data 1      R RW      0              628      2      External Port Data 2      External Port Data 2      R RW      0              630      2      External Port Data 3      External Port Data 3      R RW      0              632      2      External Port Data 4      External Port Data 4      R RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable 562  is cleared to ‘0’ Model Number 0 This address stores model number of the DYNAMIXEL             Model Name      Model Number                  M5460S250R      46352  0xB510       Firmware Version 6 This address stores firmware version of the DYNAMIXEL ID 7 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate 8 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate                  8      10 5M              7      4 5M              6      4M              5      3M              4      2M              3      1M              2      115 200              1 Default       57 600              0      9 600      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time 9 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       Operating Mode 11             Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque  Speed and Position will not be controlled               1      Velocity Control Mode      This mode controls Velocity and Torque  Position will not be controlled               3 Default       Position Control Mode      This mode controls Position  Velocity and Torque               4      Extended Position Control Mode      This mode controls Position  Velocity and Torque  Multiturn is enabled       Homing Offset 13 Users can adjust the Home position by setting Homing Offset 13   The Homing Offset value is added to the Present Position 611  Present Position 611    Actual Position   Homing Offset 13              Value Range                  2 147 483 648   2 147 483 647      Moving Threshold 17 If Present Velocity 615  is bigger than this value  Moving 610  is set to ‘1’ and otherwise Moving 610  is cleared to ‘0’  This value determines whether Dynamixel is in motion or not             Value Range                  0   2 147 483 647      Temperature Limit 21 This value limits operating temperature  When the Present Temperature 625  that indicates internal temperature of Dynamixel is greater than the Temperature Limit 21   the Over Heating Error Bit Bit 2  in the Hardware Error Status 892  will be set  If Overheating Error Bit Bit 2  is configured in the Shutdown 48  when Over Heating Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 1°      0   100      0   100°      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit 22  24 These values are maximum and minimum operating voltages When current input voltage acquired from Present Input Voltage 623  exceeds the range of Max Voltage Limit 36  and Min Voltage Limit 40   Input Voltage Error Bit Bit 0  in the Hardware Error Status 892  will be set to ‘1’  If Input Voltage Error Bit Bit 0  is configured in the Shutdown 48  when Input Voltage Error occurs  Torque Enable 562  is cleared to ‘0’ and Torque will be disabled  For more details  please refer to the Shutdown 48  section             Unit      Value Range      Description                  About 0 1V      0   400      0   40 0V      Acceleration Limit 26 This value indicates acceleration limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Torque Limit 30 This value indicates torque limit  Goal Torque 604  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   32 767      Velocity Limit 32 This value indicates velocity limit  The Goal Velocity 600  can’t exceed this value Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet             Value Range                  0   2 147 483 647      Min Max Position Limit 36  40 These values limit maximum and minimum target positions  The Goal Position 596  can’t exceed these values Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet  In Extended Position Control Mode  these limits will be ignored             Model Name      Value Range                  H54200S500RH54100S500R      250 961   250 961              H4220S300R      151 875   151 875              M5460S250RM5440S250R      125 708   125 708              M4210S260R      131 593   131 593              L5450S290R      103 846   103 846              L5450S500RL5430S500R      180 692   180 692              L5430S400R      144 197   144 197      External Port Mode  External Port DataDynamixel PRO is equipped with multipurpose expansion ports             Item      Range                  Voltage      0   3 3V              Current      0   5mA        Analog input mode analog values from an external port get converted to digital  These values are automatically updated in External port data 626   632    Output mode can adjust external port voltage 0V or 3 3V  External port data value of 0 is 0V  1 for 3 3V   Pullup input mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pullup  Depending on needs an external strong pullup is acceptable   Pullup output mode Verify port value of 0 or 1  External port data value changes by following voltage from expansion port 0V to 0  3 3V to 1  This becomes a weak pulldown  Depending on needs an external strong pulldown is acceptable External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector             Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3 3V      PORT1      PORT2      PORT3      PORT4      Shutdown 48 The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation  Each Bit is inclusively processed with the ‘OR’ logic  therefore  multiple options can be generated  For instance  when ‘0x05’  binary  00000101  is defined as Shutdown 48   Dynamixel can detect both Input Voltage Error binary  00000001  and Overheating Error binary  00000100   If those errors are detected  Torque Enable 562  is cleared to ‘0’ and the motor output becomes 0 %   In order to reuse Dynamixel Pro in shutdown status  REBOOT has to be done  The followings are detectable situations             Bit      Item      Description                  Bit 7                          Bit 6                          Bit 5      Overload Error default       Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error default       Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error default       Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs  use below method to reboot Dynamixels   H W REBOOT  Turn off the power and turn on again  S W REBOOT  Transmit REBOOT Instruction  For more details  please refer to the Protocol section of eManual  Indirect Address  Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses  Sequential addresses increase Instruction Packet efficiency  Addresses that can be defined as Indirect Address is limited to RAM area Address 562   892  If specific address is allocated to Indirect Address  Indirect Address inherits features and properties of the Data from the specific Address  Property includes Size Byte length   value range  and Access property Read Only  Read Write   For instance  if address 563 LED Red  is allocated to Indirect Address 1 49   Indirect Data 1 634  will have the exactly same value of LED Red 563  Example 1 Allocating 1 byte LED 563  to Indirect Data 1 634    Indirect Address 1 49   change the value to ‘563’ which is the address of LED Red   Set Indirect Data 1 634  to ‘1’  LED Red 563  also becomes ‘1’ and Red LED will be turned on   Set Indirect Data 1 634  to ‘0’  LED Red 563  also becomes ‘0’ and Red LED will be turned off Example 2 Allocating Size 4 byte Goal Position 596  to Indirect Data 2 635   4 sequential bytes have to be allocated   Indirect Address 2 51   change the value to ‘596’ which is the first address of Goal Position   Indirect Address 3 53   change the value to ‘597’ which is the second address of Goal Position   Indirect Address 4 55   change the value to ‘598’ which is the third address of Goal Position   Indirect Address 5 57   change the value to ‘599’ which is the fourth address of Goal Position   Set 4 byte value 305 419 896 0x12345678  to Indirect Data 2  Goal Position 596  also becomes 305 419 896 0x12345678  as below             Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2 byte  to Indirect Address  all address must be allocated to Indirect Address like the above Example 2 Note Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0 Torque Enable 562 Controls Torque ON OFF  Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected             Value      Description                  0 Default       Torque OFF Freerun  and the motor does not generate torque              1      Torque ON and all Data in the EEPROM area will be locked      Note Present Position 132  can be reset when Operating Mode 11  and Torque Enable 64  are updated  For more details  please refer to the Homing Offset 20  and Present Position 132  RGB LED 563 Controls the RGB LED on Dynamixel PRO             Address      Color      Range                  563      Red      0   255              564      Green      0   255              565      Blue      0   255      Velocity PI Gain 586  588 These values indicate P and I Gains of Velocity Control Mode  The I Gain includes sampling time  Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI             Gain Value Range                  0   32 767      Note KPA stands for Antiwindup Gain that cannot be modified by users  For more details about the PID controller  please refer to the PID Controller at wikipedia Position P Gain 594 This P Gain is used in Position Control Mode  Below figure is a block diagram describing the Position Control Mode  The Position Controller is cascaded with the Velocity Controller  KPP stands for Position P Gain             Gain Value Range                  0   32 767      Goal Position 596   Present Position 611 Target position can be set with Goal Position 596   This value can’t be smaller than the Min Position Limit 40  or larger than Max Position Limit 36              Model      Angle Range      Position Range      Description                  H54200S500RH54100S500R      180°   180 °      250 961 5   250 961 5                    H4220S300R      180°   180 °      151 875   151 875            Goal Velocity 600 Goal Velocity 600  can be used to set a target velocity and this value cannot exceed Velocity Limit  32  In case of Position Control Mode or Extended Position Control Mode  Goal Velocity will be used to limit the velocity However  if Goal Velocity is set to ‘0’  Velocity Limit 32  will be used to limit the velocity   Please refer to the block diagram of Position P Gain The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor Output RPM   Goal Velocity   Scale Factor            Model      Scale Factor RPM                   H54200S500RH54100S500R      0 00199234              H4220S300R      0 00329218              M5460S250RM5440S250R      0 00397746              M4210S260R      0 00389076              L5450S290R      0 00346667              L5450S500RL5430S500R      0 00199234              L5430S400R      0 00249657      Goal Torque 604 Goal torque  604  can be used to set a target torque and this value cannot exceed Torque Limit 30  When the Operating Mode 11  is set other than Torque Control Mode  Goal Torque will be used to limit the torque However  if Goal Torque is set to ‘0’  Torque Limit 30  will be used to limit the torque   Please refer to the block diagram of Position Gain or Velocity Gain The relationship between torque  current  and goal torque is shown below             Model      Formula                  PRO 54      A   V   33 000   2 048A  Current mA V  Present Current Goal Torque              PRO 42      A   V   8 250   2 048A  Current mA V  Present Current Goal Torque      Goal Acceleration 606 Goal Acceleration 606  can be used to set a target acceleration  This value is used in Velocity Control Mode  Position Control Mode and Extended Position Control Mode  The profile control will be enabled when both Goal Acceleration 606  and Goal Velocity 600  are not ‘0’ Please refer to the Goal Velocity 600  for RPM conversion constant             Value Range      Unit                  2 147 483 647   2 147 483 647      58 000 RPM2 @ Core Motor      Moving 610 This value indicates whether Dynamixel Pro is in motion or not  If absolute value of Present Velocity 615  is greater than Moving Threshold 17   Moving 610  is set to ‘1’  Otherwise  it will be cleared to ‘0’  However  this value will always be set to ‘1’ regardless of Present Velocity 615  while Profile is in progress with Goal Position 596  instruction             Value      Description                  0      Movement is not detected              1      Movement is detected  or Profile is in progress Goal Position 596  instruction is being processed       Present Velocity 615 This value indicates present Velocity  For more details  please refer to the Goal Velocity 600  Present Current 621 This value indicates present Current  For more details  please refer to the Goal Torque 604  Present Input Voltage 623 This value indicates present voltage that is being supplied  For more details  please refer to the Min Max Voltage Limit 24  22  Present Temperature 625 This value indicates present internal Temperature  For more details  please refer to the Temperature Limit 21  Registered Instruction 890             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Status Return Level 891 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Hardware Error Status 892 This value indicates hardware error status  For more details  please refer to the Shutdown 48  How to AssembleOption Frame Assembly      FRP54H110K  FRP54H120K Set        FRP54H210K  FRP54H220K Set  MaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF  DWG  STEP  IGES",
      "url": "http://0.0.0.0:4000/docs/en/dxl/pro/m54-60-s250-r/"
      } ,
  
  
      "docs-en-dxl-protocol1":  {
      "title": "Protocol 1.0",
      "content"	 : "Protocol 1 0Instruction PacketInstruction Packet is the command data sent to the Device             Header1      Header2      ID      Length      Instruction      Param 1      …      Param N      Checksum                  0xFF      0xFF      ID      Length      Instruction      Param 1      …      Param N      CHKSUM      HeaderThe field indicates the start of the Packet Packet IDThe field that indicates the ID of the Device that should receive the Instruction Packet and process it  Range  0   253  0x00   0xFD   which is a total of 254 numbers that can be used   Broadcast ID  254  0xFE   which makes all connected devices execute the Instruction Packet LengthThe length of the Packet Instruction  Parameter  Checksum fields  Length   number of Parameters   2InstructionThe field that defines the type of instruction             Value      Instructions      Description                  0x01      Ping      Instruction that checks whether the Packet has arrived to a device with the same ID as Packet ID              0x02      Read      Instruction to read data from the Device              0x03      Write      Instruction to write data on the Device              0x04      Reg Write      Instruction that registers the Instruction Packet to a standby status Packet is later executed through the Action instruction              0x05      Action      Instruction that executes the Packet that was registered beforehand using Reg Write              0x06      Factory Reset      Instruction that resets the Control Table to its initial factory default settings              0x83      Sync Write      For multiple devices  Instruction to write data on the same Address with the same length at once      ParametersParameters are used when additional data is required for an instruction Instruction ChecksumIt is used to check if packet is damaged during communication Instruction Checksum is calculated according to the following formula Instruction Checksum      ID   Length   Instruction   Parameter1   … Parameter N  Where   is the Binary Ones Complement operator When the calculation result of the parenthesis in the above formula is larger than 255  0xFF   use only lower bytes For example  when you want to use below Instruction Packet ID 1 0x01   Length 5 0x05   Instruction 3 0x03  Parameter1 12 0x0C   Parameter2 100 0x64   Parameter3 170 0xAA Checksum       ID   Length   Instruction   Parameter1   … Parameter 3        0x01   0x05   0x03   0x0C   0x64   0xAA        0x123      Only the lower byte 0x23 executes the Not operation   0xDCThus  Instruction Packet should be 0xFF  0xFF  0x01  0x05  0x03  0x0C  0x64  0xAA  0xDC Status Packet            Header1      Header2      ID      Length      Error      Param 1      …      Param N      Checksum                  0xFF      0xFF      ID      Length      Error      Param 1      …      Param N      CHKSUM      ErrorThis field displays the error status occurred during the operation of Dynamixel             Bit      Error      Description                  Bit 7      0                    Bit 6      Instruction Error      In case of sending an undefined instruction or delivering the action instruction without the reg_write instruction  it is set as 1              Bit 5      Overload Error      When the current load cannot be controlled by the set Torque  it is set as 1              Bit 4      Checksum Error      When the Checksum of the transmitted Instruction Packet is incorrect  it is set as 1              Bit 3      Range Error      When an instruction is out of the range for use  it is set as 1              Bit 2      Overheating Error      When internal temperature of Dynamixel is out of the range of operating temperature set in the Control table  it is set as 1              Bit 1      Angle Limit Error      When Goal Position is written out of the range from CW Angle Limit to CCW Angle Limit   it is set as 1              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control table  it is as 1      For example  when Status Packet is returned as below0xFF 0xFF 0x01 0x02 0x24 0xD8It means that the error of 0x24 occurs from Dynamixel whose ID is 01  Since 0x24 is 00100100 as binary  Bit5 and Bit2 become 1  In order words  Overload and Overheating Errors have occurred Note The error types on the table above are related to actuators  and the contents may vary depending on the type of Dynamixel Status ChecksumIt is used to check if packet is damaged during communication Status Checksum is calculated according to the following formula Status Checksum      ID   Length   Error   Parameter1   … Parameter N  Instruction DetailsPingThis instruction requests the Status Packet from a specific ID  Even if Status Return Level 16  is 0  Dynamixel returns Status Packet all the time for Ping Instruction             Instruction      Length      Parameter                  0x01      0x02            ExampleConditions  ID 1 RX64  is connected to the PC with an identical baudrate Ping Instruction Packet            H1      H2      ID      LEN      INST      CKSM                  0xFF      0xFF      0x01      0x02      0x01      0xFB      ID 1 Status Packet            H1      H2      ID      LEN      ERR      CKSM                  0xFF      0xFF      0x01      0x02      0x00      0xFC      ReadThis instruction is to read data in the Control Table of Dynamixel             Instruction      Length      Param 1      Param 2                  0x02      0x04      Starting Address of the Data      Length of Data to read      ExampleConditions  ID 1 RX64   Read Present Temperature  which is located at the address 43 0x2B Read Instruction Packet            H1      H2      ID      LEN      INST      P1      P2      CKSM                  0xFF      0xFF      0x01      0x04      0x02      0x2B      0x01      0xCC      ID 1 Status Packet            H1      H2      ID      LEN      ERR      P1      CKSM                  0xFF      0xFF      0x01      0x03      0x00      0x20      0xDB      WriteThis instruction is to write data to the Control Table of DYNAMIXEL            Instruction      Length      Param 1      Param 2      Param 3      Param N 1                  0x03      N   3      Starting Address of the Data      1st Byte      2nd Byte      Nth Byte      ExampleConditions  ID broadcast RX64   Set the unknwon Dynamixel’s ID as 1 by writing 1 to ID 3 Write Instruction Packet            H1      H2      ID      LEN      INST      P1      P2      CKSM                  0xFF      0xFF      0xFE      0x04      0x03      0x03      0x01      0xF6      Note Status Packet will not be returned if Broadcast ID 0xFE  is used Reg Write  Instruction that is similar to Write Instruction  but has an improved synchronization characteristic  Write Instruction is executed immediately when an Instruction Packet is received   Reg Write Instruction registers the Instruction Packet to a standby status  and sets Control table Registered Instruction to ‘1’   When an Action Instruction is received  the registered Packet is executed  and sets Control Table Registered Instruction to ‘0’             Instruction      Length      Param 1      Param 2      Param N 1                  0x04      N 3      Starting Address of the Data      1st Byte      Nth Byte      ExampleConditions  ID 1 RX64   Reg Write 500 0x1F4  to Goal Position 30  and wait for Action instruction to move Reg Write Instruction Packet            H1      H2      ID      LEN      INST      P1      P2      P3      CKSM                  0xFF      0xFF      0x01      0x05      0x04      0x1E      0xF4      0x01      0xE2      ID 1 Status Packet            H1      H2      ID      LEN      ERR      CKSM                  0xFF      0xFF      0x01      0x02      0x00      0xFC      ActionThis instruction is to execute the registered Reg Write instruction  The Action instruction is useful when multiple Dynamixels are required to start moving at the same time  When several devices are controlled via communication  there is a minor time difference between enabling the first and last device  Dynamixel has resolved this problem by using Action instruction             Instruction      Length      Parameter                  0x05      0x02            ExampleConditions  All Dynamixels have received Reg Write instructions Action Instruction Packet            H1      H2      ID      LEN      INST      CKSM                  0xFF      0xFF      0xFE      0x02      0x05      0xFA      Note Status Packet will not be returned if Broadcast ID 0xFE  is used Factory ResetThis instruction is to reset the Control Table of Dynamixel to the factory default values Caution Please be careful as Reset instruction will erase saved custom values in the EEPROM             Instruction      Length      Parameter                  0x06      0x02            ExampleConditions  ID 0 RX64   Factory Reset the DynamixelFactory Reset Instruction Packet            H1      H2      ID      LEN      INST      CKSM                  0xFF      0xFF      0x00      0x02      0x06      0xF7      ID 0 Status Packet            H1      H2      ID      LEN      ERR      CKSM                  0xFF      0xFF      0x00      0x02      0x00      0xFD      Sync WriteThis instruction is used to control multiple Dynamixels simultaneously with a single Instruction Packet transmission  When this instruction is used  several instructions can be transmitted at once  so that the communication time is reduced when multiple Dynamixels are connected in a single channel  However  the SYNC WRITE instruction can only be used to a single address with an identical length of data over connected Dynamixels  ID should be transmitted as Broadcasting ID             Item      Description                  Instruction      0x83              Length        L   1    N    4  LData Length  NNumber of Dynamixel              Parameter 1      Starting address              Parameter 2      Length of Data to write              Parameter 3       1st Device  ID              Parameter 4       1st Device  1st Byte              Parameter 5       1st Device  2nd Byte              …      …              Parameter L 3       1st Device  Lth Byte              Parameter L 4       2nd Device  ID              Parameter L 5       2nd Device  1st Byte              Parameter L 6       2nd Device  2nd Byte              …      …              Parameter 2L 4       2nd Device  Lth Byte      ExampleConditions  ID 0 RX64   Write 0x010 to Goal Position 30  0x1E  and write 0x150 to Moving Speed 32  0x20   ID 1 RX64   Write 0x220 to Goal Position 30  0x1E  and write 0x360 to Moving Speed 32  0x20 Sync Write Instruction Packet            H1      H2      ID      LEN      INST      P1      P2      P3      P4      P5      P6      P7      P8      P9      P10      P11      P12      CKSM                  0xFF      0xFF      0xFE      0x0E      0x83      0x1E      0x04      0x00      0x10      0x00      0x50      0x01      0x01      0x20      0x02      0x60      0x03      0x67      Note Status Packet will not be returned if Broadcast ID 0xFE  is used Bulk ReadThis instruction is used for reading values of multiple DYNAMIXELs simultaneously by sending a single Instruction Packet  The packet length is shortened compared to sending multiple READ commands  and the idle time between the status packets being returned is also shortened to save communication time  However  this cannot be used to read a single module  If an identical ID is designated multiple times  only the first designated parameter will be processed             Item      Description                  Instruction      0x92              Length      3N   3              Parameter 1      0x00              Parameter 2       1st Device  Length of Data to read              Parameter 3       1st Device  ID              Parameter 4       1st Device  Starting address              …      …              Parameter 3N 2       Nth Device  Length of Data to read              Parameter 3N 3       Nth Device  ID              Parameter 3N 4       Nth Device  Starting address      ExampleConditions  ID 1 RX64   Read the 2byte Goal Position value 30  0x1E    ID 2 RX64   Read the 2byte Present Position value 36  0x24  Bulk Read Instruction Packet            H1      H2      ID      LEN      INST      P1      P2      P3      P4      P5      P6      P7      CKSM                  0xFF      0xFF      0xFE      0x09      0x92      0x00      0x02      0x01      0x1E      0x02      0x02      0x24      0x1D      When Bulk Read instruction is received  Dynamixel with ID 2 monitors the status packet being sent from ID 1 of the data bus  the preceeding device ID   and when device ID 1’s status packet transmission is completed  ID 2 sends its own status packet ID 1 Status Packet            H1      H2      ID      LEN      ERR      P1      P2      CKSM                  0xFF      0xFF      0x01      0x04      0x00      0x00      0x80      0x7A      ID 2 Status Packet            H1      H2      ID      LEN      ERR      P1      P2      CKSM                  0xFF      0xFF      0x02      0x04      0x00      0x00      0x80      0x79      More Packet ExamplesCommunication OverviewTo control Dynamixel  communication should be established according to the protocol of Dynamixel   Dynamixel is driven by receiving binary data  Examples of programs for the transmission of this kind of data are described in detail in the User’s Manual of the Dynamixelonly controller or the USB2Dynamixel Thus  this manual describes only the method and protocol of communication used in Dynamixel on the assumption that Main Controller can transfer binary data PacketMain Controller and Dynamixel communicate each other by sending and receiving data called Packet  Packet has two kinds Instruction Packet  which Main Controller sends to control Dynamixel  and Status Packet  which Dynamixel responses to Main Controller IDID is a specific number for distinction of each Dynamixel when several Dynamixels are linked to one bus By giving IDs to Instruction and Status Packets  Main Controller can control only the Dynamixel that you want to controlProtocolDynamixel does the Asynchronous Serial Communication with 8 bit  1 Stop bit  and None Parity If Dynamixel with the same ID is connected  packet will collide and network problem will occur  Thus  set ID as such that there is no Dynamixel with the same ID ID of Dynamixel is changeable For this change  please refer to Changing IDs of Dynamixel  The factory default setting ID is 1 Half DuplexHalf duplex UART is a serial communication protocol where both TxD and RxD cannot be used at the same time  This method is generally used when many devices need to be connected to a single bus  Since more than one device are connected to the same bus  all the other devices need to be in input mode while one device is transmitting  The Main Controller that controllers the Dynamixel actuators sets the communication direction to input mode  and only when it is transmitting an Instruction Packet  it changes the direction to output mode Tx  Rx DirectionFor Half Duplex UART  the transmission ending timing is important to change the direction to receiving mode  The bit definitions within the register that indicates UART_STATUS are as the following  TXD_BUFFER_READY_BIT Indicates that the transmission DATA can be loaded into the Buffer  Note that this only means that the SERIAL TX BUFFER is empty  and does not necessarily mean that the all the data transmitted before has left the CPU       TXD_SHIFT_REGISTER_EMPTY_BIT Set when all the Transmission Data has completed its transmission and left the CPU         The TXD_BUFFER_READY_BIT is used when one byte is to be transmitted via the serial communication channel  and an example is shown below     TxDByte byte bData   while  TXD_BUFFER_READY_BIT    wait until data can be loaded   SerialTxDBuffer   bData   data load to TxD buffer  When changing the direction  the TXD_SHIFT_REGISTER_EMPTY_BIT must be checked  The following is an example program that sends an Instruction Packet  DIRECTION_PORT   TX_DIRECTION  TxDByte 0xff   TxDByte 0xff   TxDByte bID   TxDByte bLength   TxDByte bInstruction   TxDByte Parameter0  TxDByte Parameter1  …  DisableInterrupt      interrupt should be disable  TxDByte Checksum    last TxD  while  TXD_SHIFT_REGISTER_EMPTY_BIT    Wait till last data bit has been sent  DIRECTION_PORT   RX_DIRECTION   Direction change to RXD  EnableInterrupt      enable interrupt againNote Please note the important lines between LINE 8 and LINE 12  Line 8 is necessary since an interrupt here may cause a delay longer than the return delay time and corruption to the front of the status packet may occur Byte to Byte TimeThe delay time between bytes when sending an instruction packet  If the delay time is over 100ms  then the Dynamixel actuator recognizes this as a communication problem and waits for the next header  0xff 0xff  of a packet again ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/protocol1/"
      } ,
  
  
      "docs-en-dxl-protocol2":  {
      "title": "Protocol 2.0",
      "content"	 : "Protocol 2 0  Protocol 2 0 supported devices MX28  MX64  MX106 MX Series with Firmware V39 or above   X Series  DYNAMIXEL Pro  Protocol 2 0 supported controllers CM150   CM200  Other 2 0 protocol from R  Smart appInstruction PacketInstruction Packet is the command data sent to the Device             Header1      Header2      Header3      Reserved      Packet ID      Length1      Length2      Instruction      Param      Param      Param      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      ID      Len_L      Len_H      Instruction      Param 1      …      Param N      CRC_L      CRC_H      HeaderThe field indicates the start of the PacketReserved0x00  0xFD cannot be used Packet IDThe field that indicates the ID of the Device that should receive the Instruction Packet and process it  Range  0   252  0x00   0xFC   which is a total of 253 numbers that can be used  Broadcast ID  254  0xFE   which makes all connected devices execute the Instruction Packet  253 0xFD   255 0xFF   These are not used in order to avoid duplicate use with HeaderPacket LengthThe length after the Packet Length field  Instruction  Parameter  CRC fields  Packet Length   number of Parameters   3InstructionThe field that defines the type of command             Value      Instructions      Description                  0x01      Ping      Instruction that checks whether the Packet has arrived to a device with the same ID as Packet ID              0x02      Read      Instruction to read data from the Device              0x03      Write      Instruction to write data on the Device              0x04      Reg Write      Instruction that registers the Instruction Packet to a standby status Packet is later executed through the Action command              0x05      Action      Instruction that executes the Packet that was registered beforehand using Reg Write              0x06      Factory Reset      Instruction that resets the Control Table to its initial factory default settings              0x08      Reboot      Instruction to reboot the Device              0x55      Status Return       Return Instruction for the Instruction Packet              0x82      Sync Read      For multiple devices  Instruction to read data from the same Address with the same length at once              0x83      Sync Write      For multiple devices  Instruction to write data on the same Address with the same length at once              0x92      Bulk Read      For multiple devices  Instruction to read data from different Addresses with different lengths at once              0x93      Bulk Write      For multiple devices  Instruction to write data on different Addresses with different lengths at once      Parameters  As the auxiliary data field for Instruction  its purpose is different for each Instruction   Method of expressing negative number data  This is different for each product  so please refer to the emanual of the corresponding product CRC16bit CRC field checks if the Packet has been damaged during communication  Please refer to the CRC calculation code Status Packet            Header1      Header2      Header3      Reserved      Packet ID      Length1      Length2      Instruction      ERR      PARAM      PARAM      PARAM      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      ID      Len_L      Len_H      Instruction      Error      Param 1      …      Param N      CRC_L      CRC_H      InstructionInstruction of the Status Packet is designated to 0x55  Status ErrorThe field that indicates the processing result of Instruction Packet            Bit 7      Bit 6   Bit 0                  Alert      Error Number        Alert  When there has been a problem in the Device  this field is set as 1  Checking the Hardware error status value of the Control Table can indicate the cause of the problem   Error Number  When there has been an Error in the processing of the Instruction Packet             Value      Error      Description                  0x01      Result Fail      Failed to process the sent Instruction Packet              0x02      Instruction Error      Undefined Instruction has been usedAction has been used without Reg Write              0x03      CRC Error      CRC of the sent Packet does not match              0x04      Data Range Error      Data to be written in the corresponding Address is outside the range of the minimum maximum value              0x05      Data Length Error      Attempt to write Data that is shorter than the data length of the corresponding Address ex when you attempt to only use 2 bytes of a item that has been defined as 4 bytes               0x06      Data Limit Error      Data to be written in the corresponding Address is outside of the Limit value              0x07      Access Errer      Attempt to write a value in an Address that is Read Only or has not been definedAttempt to read a value in an Address that is Write Only or has not been definedAttempt to write a value in the ROM domain while in a state of Torque Enable ROM Lock       Parameter  As the auxiliary data field for Instruction  its purpose is different for each Instruction   Method of expressing negative number data  This is different for each product  so please refer to the emanual of the corresponding productPacket ProcessProcessing Order of Transmission  Generate basic form of Packet and afterwards Byte Stuffing 0xFD           Inspection range  Everything within the Instruction field to the Parameter field  not the CRC       Processing method  When the pattern 0xFF 0xFF 0xFD appears  add Byte Stuffing  0xFD   If 0xFF 0xFF 0xFD already exists  add a 0xFD to change it to 0xFF 0xFF 0xFD 0xFD         Packet Length  Modify to Packet Length with Byte Stuffing applied  CRC  Calculate CRC with Byte Stuffing appliedProcessing Order of Reception  Search for Header 0xFF 0xFF 0xFD   Ignore the Byte Stuffing 0xFF 0xFF 0xFD 0xFD    Packet ID  If Packet ID is valid  receive additional transmission the size of Packet Length  CRC  Calculate with the received Packet with Byte Stuffing included  and once CRC is matched then remove Byte StuffingInstruction DetailsPingDescription  Instruction to check the existence of a Device and basic information  Regardless of the Status Return Level of the Device  the Status Packet is always sent to Ping Instruction   When the Packet ID field is 0xFE Broadcast ID   All devices send their Status Packet according to their arranged order Packet ParametersNote Status Packet is received from each Device             Status Packet      Description                  Parameter 1      Model Number LSB              Parameter 2      Model Number MSB              Parameter 3      Version of Firmware      Example 1Conditions  ID1 XM430W210   For Model Number 1030 0x0406   Version of Firmware 38 0x26   Instruction Packet ID  1Ping Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x03      0x00      0x01      0x19      0x4E      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      PARAM1      PARAM2      PARAM3      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x07      0x00      0x55      0x00      0x06      0x04      0x26      0x65      0x5D      Example 2Conditions  ID1 XM430W210   For Model Number 1030 0x0406   Version of Firmware 38 0x26   ID2 XM430W210   For Model Number 1030 0x0406   Version of Firmware 38 0x26   Instruction Packet ID  254 Broadcast ID Ping Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0xFE      0x03      0x00      0x01      0x31      0x42      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      PARAM1      PARAM2      PARAM3      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x07      0x00      0x55      0x00      0x06      0x04      0x26      0x65      0x5D      ID 2 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      PARAM1      PARAM2      PARAM3      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x02      0x07      0x00      0x55      0x00      0x06      0x04      0x26      0x6F      0x6D      ReadDescription  Instruction to read a value from Control Table  Method of expressing negative number data  This is different for each product  so please refer to the emanual of the corresponding productPacket Parameters            Instruction Packet      Description                  Parameter 1      Loworder byte from the starting address              Parameter 2      Highorder byte from the starting address              Parameter 3      Loworder byte from the data length  X               Parameter 4      Highorder byte from the data length  X                   Status Packet      Description                  Parameter 1      First Byte              Parameter 2      Second Byte              …      …              Parameter X      Xth Byte      ExampleConditions  ID1 XM430W210   Present Position 132  0x0084  4 byte     166 0x000000A6 Read Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      PARAM1      PARAM2      PARAM3      PARAM4      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x07      0x00      0x02      0x84      0x00      0x04      0x00      0x1D      0x15      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      PARAM1      PARAM2      PARAM3      PARAM4      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x08      0x00      0x55      0x00      0xA6      0x00      0x00      0x00      0x8C      0xC0      WriteDescription  Instruction to write a value on the Control Table  Method of expressing negative number data  This is different for each product  so please refer to the emanual of the corresponding productPacket Parameters            Instruction Packet      Description                  Parameter 1      Loworder byte from the starting address              Parameter 2      Highorder byte from the starting address              Parameter 2 1      First Byte              Parameter 2 2      Second Byte              …      …              Parameter 2 X      Xth Byte      ExampleConditions  ID1 XM430W210   Write 512 0x00000200  to Goal Position 116  0x0074  4 byte  Write Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      P1      P2      P3      P4      P5      P6      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x09      0x00      0x03      0x74      0x00      0x00      0x02      0x00      0x00      0xCA      0x89      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x04      0x00      0x55      0x00      0xA1      0x0C      Reg WriteDescription  Instruction that is similar to Write Instruction  but has an improved synchronization characteristic  Write Instruction is executed immediately when an Instruction Packet is received   Reg Write Instruction registers the Instruction Packet to a standby status  and sets Control table Registered Instruction to ‘1’   When an Action Instruction is received  the registered Packet is executed  and sets Control Table Registered Instruction to ‘0’ Packet Parameters            Instruction Packet      Description                  Parameter 1      Loworder byte from the starting address              Parameter 2      Highorder byte from the starting address              Parameter 2 1      First Byte              Parameter 2 2      Second Byte              …      …              Parameter 2 X      Xth Byte      ExampleCondition  ID1 XM430W210   Write 200 0x000000C8  to Goal Velocity 104  0x0068  4 byte  Reg Write Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      P1      P2      P3      P4      P5      P6      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x09      0x00      0x04      0x68      0x00      0xC8      0x00      0x00      0x00      0xAE      0x8E      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x04      0x00      0x55      0x00      0xA1      0x0C      ActionDescription  Instruction that executes the Packet that has been registered using Reg Write Instruction  When controlling multiple devices using Write Instruction  there will be a difference in the time of execution between the first device that receives the Packet and the last device that receives the Packet   By using Reg Write and Action Instruction  one can operate multiple devices simultaneously ExampleCondition  ID1 XM430W210   Instruction has been already registered by the Reg Write Instruction Action Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x03      0x00      0x05      0x02      0xCE      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x04      0x00      0x55      0x00      0xA1      0x0C      Factory ResetDescription  Instruction that resets the Control Table to its initial factory default settings Parameters            Instruction Packet      Description                  Parameter 1      0xFF  Reset all0x01  Reset all except ID0x02  Reset all except ID and Baudrate      ExampleConditions  ID1 XM430W210   Apply reset with option 0x01 Reset all except ID Factory Reset Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      P1      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x04      0x00      0x06      0x01      0xA1      0xE6      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      P1      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x04      0x00      0x55      0x00      0xA1      0x0C      RebootDescription  Instruction to reboot the deviceExampleConditions  ID1 XM430W210 Reboot Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x03      0x00      0x08      0x2F      0x4E      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      P1      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x04      0x00      0x55      0x00      0xA1      0x0C      Sync ReadDescription  Instruction to read data from multiple devices simultaneously using one Instruction Packet  The Address and Data Length of the data must all be the same   If the Address of the data is not continual  an Indirect Address can be used   Packet ID field  0xFE  Broadcast ID Parameters            Instruction Packet      Description                  Parameter 1      Loworder byte from the starting address              Parameter 2      Highorder byte from the starting address              Parameter 3      Loworder byte from the data length X               Parameter 4      Highorder byte from the data length X               Parameter 4 1      ID of the 1st Device              Parameter 4 2      ID of the 2nd Device              …      …              Parameter 4 X      ID of the Xth Device      Note Status Packet is received from each Device             Status Packet      Description                  Parameter 1      Frist Byte              Parameter 2      Second Byte              …      …              Parameter X      Xth Byte      ExampleConditions  ID1 XM430W210   Present Position 132  0x0084  4 byte     166 0x000000A6   ID2 XM430W210   Present Position 132  0x0084  4 byte     2 079 0x0000081F Sync Read Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      P1      P2      P3      P4      P5      P6      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0xFE      0x09      0x00      0x82      0x84      0x00      0x04      0x00      0x01      0x02      0xCE      0xFA      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      PARAM1      PARAM2      PARAM3      PARAM4      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x08      0x00      0x55      0x00      0xA6      0x00      0x00      0x00      0x8C      0xC0      ID 2 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      PARAM1      PARAM2      PARAM3      PARAM4      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x02      0x08      0x00      0x55      0x00      0x1F      0x08      0x00      0x00      0xBA      0xBE      Sync WriteDescription  Instruction to control multiple devices simultaneously using one Instruction Packet  The Address and Data Length of the data must all be the same   If the Address of the data is not continual  an Indirect Address can be used   Packet ID field  0xFE  Broadcast ID Parameters            Instruction Packet      Description                  Parameter 1      Loworder byte from the starting address              Parameter 2      Highorder byte from the starting address              Parameter 3      Loworder byte from the data length X               Parameter 4      Highorder byte from the data length X               Parameter 5       1st Device  ID              Parameter 5 1       1st Device  1st Byte              Parameter 5 2       1st Device  2nd Byte              …       1st Device …              Parameter 6 X       2nd Device  Xth Byte              Parameter 6       2nd Device  ID              Parameter 6 1       2nd Device  1st Byte              Parameter 6 2       2nd Device  2nd Byte              …       2nd Device …              Parameter 6 X       2nd Device  Xth Byte              …      …      ExampleConditions  ID1 XM430W210   Write 150 0x00000096  to Goal Position 116  0x0074  4 byte    ID2 XM430W210   Write 170 0x000000AA  to Goal Position 116  0x0074  4 byte  Sync Write Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      P1      P2      P3      P4                  0xFF      0xFF      0xFD      0x00      0xFE      0x11      0x00      0x83      0x74      0x00      0x04      0x00                  P5      P6      P7      P8      P9      P10      P11      P12      P13      P14      CRC1      CRC2                  0x01      0x96      0x00      0x00      0x00      0x02      0xAA      0x00      0x00      0x00      0x82      0x87      Bulk ReadDescription  Similar to Sync Read  this is an Instruction to read data from multiple devices simultaneously using one Instruction Packet  This Instruction can be used even if the Address and Data Length of the data for each device are not all the same   The same ID cannot be used multiple times in the Parameter  In other words  it can only read once from each individual device   If the Address of the data is not continual  an Indirect Address can be used   Packet ID field  0xFE  Broadcast ID Parameters            Instruction Packet      Description                  Parameter 1       1st Device  ID              Parameter 2       1st Device  Loworder byte from the starting address              Parameter 3       1st Device  Highorder byte from the starting address              Parameter 4       1st Device  Loworder byte from the data              Parameter 5       1st Device  Highorder byte from the data              Parameter 6       2nd Device  ID              Parameter 7       2nd Device  Loworder byte from the starting address              Parameter 8       2nd Device  Highorder byte from the starting address              Parameter 9       2nd Device  Loworder byte from the data              Parameter 10       2nd Device  Highorder byte from the data              …      …      Note Status Packet is received from each Device             Status Packet      Description                  Parameter 1      1st Byte              Parameter 2      2nd Byte              …      …              Parameter X      Xth Byte      ExampleCondition  ID1 XM430W210   Present Voltage 144  0x0090  2 byte     119 0x0077   ID2 XM430W210   Present Temperature 146  0x0092  1 byte     36 0x24 Bulk Read Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      P1      P2      P3      P4      P5                  0xFF      0xFF      0xFD      0x00      0xFE      0x0D      0x00      0x92      0x01      0x90      0x00      0x02      0x00                  P6      P7      P8      P9      P10      CRC1      CRC2                  0x02      0x92      0x00      0x01      0x00      0x1A      0x05      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      PARAM1      PARAM2      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x06      0x00      0x55      0x00      0x77      0x00      0xC3      0x69      ID 2 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      PARAM1      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x02      0x05      0x00      0x55      0x00      0x24      0x8B      0x21      Bulk WriteDescription  Similar to Sync Write  this is an Instruction to control multiple devices simultaneously using one Instruction Packet  This Instruction can be used even if the Address and Data Length of the data for each device are not all the same   The same ID cannot be used multiple times in the Parameter  In other words  it can only write once for each individual device   If the Address of the data is not continual  an Indirect Address can be used   Packet ID field  0xFE  Broadcast ID Parameters            Instruction Packet      Description                  Parameter 1       1st Device  ID              Parameter 2       1st Device  Loworder byte from the starting address              Parameter 3       1st Device  Highorder byte from the starting address              Parameter 4       1st Device  Loworder byte from the data length X               Parameter 5       1st Device  Highorder byte from the data length X               Parameter 5 1       1st Device  1st Byte              Parameter 5 2       1st Device  2nd Byte              …      …              Parameter 5 X       1st Device  Xth Byte              Parameter 6 X       2nd Device  ID              Parameter 7 X       2nd Device  Loworder byte from the starting address              Parameter 8 X       2nd Device  Highorder byte from the starting address              Parameter 9 X       2nd Device  Loworder byte from the data length X               Parameter 10 X       2nd Device  Highorder byte from the data length X               Parameter 10 X 1       2nd Device  1st Byte              Parameter 10 X 2       2nd Device  2nd Byte              …      …              Parameter 10 X Y       2nd Device  Yth Byte              …      …      ExampleCondition  ID1 XM430W210   Set Max Voltage Limit 32  0x0020  2 byte   to 160 0x00A0   ID2 XM430W210   Set Temperature Limit 31  0x001F  1 byte   to 80 0x50 Bulk Write Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      P1      P2      P3      P4      P5      P6      P7                  0xFF      0xFF      0xFD      0x00      0xFE      0x10      0x00      0x93      0x01      0x20      0x00      0x02      0x00      0xA0      0x00                  P8      P9      P10      P11      P12      P13      CRC1      CRC2                  0x02      0x1F      0x00      0x01      0x00      0x50      0xB7      0x68      ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/protocol2/"
      } ,
  
  
      "docs-en-dxl-rx-rx-10":  {
      "title": "RX-10",
      "content"	 : "RX10Warning RX10 has been discontinued Specifications            Item      Specifications                  Baud Rate      7343 bps   1 Mbps              Resolution      0 29°              Running Degree      0°   300°Endless Turn              Weight      64 5g              Dimensions  W x H x D       35 6mm x 50 6mm x 35 5mm              Gear Ratio      193  1              Stall Torque      1 3 N m  at 12V  0 8A               No Load Speed      54rpm  at 12V               Operating Temperature      5°C    80°C              Input Voltage      9   12V  Recommended  11 1V               Standby Current      50mA              Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multi Drop Bus Daisy Chain Type Connector               ID      0   253              Feedback      Position  Temperature  Load  Input Voltage  etc              Material      Full Metal Gear  Engineering Plastic Body      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 1 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on  Volatile   On the other hand  modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off  NonVolatile   Data in the EEPROM Area can only be changed or modified when the value of Torque Enable 24  is ‘0’ and Dynamixel is in idle state SizeThe Size of data is 1 or 2 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  2 bytes data will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      10              2      1      Firmware Version      Firmware Version      R                    3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      CounterClockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      190              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On Off      RW      0              25      1      LED      Status LED On Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      1              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      1              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW                    32      2      Moving Speed      Moving Speed      RW                    34      2      Torque Limit      Torque Limit Goal Torque       RW      ADD 14 amp15              36      2      Present Position      Present Position      R                    38      2      Present Speed      Present Speed      R                    40      2      Present Load      Present Load      R                    42      1      Present Voltage      Present Voltage      R                    43      1      Present Temperature      Present Temperature      R                    44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number  0 This address stores model number of the DYNAMIXEL Firmware Version  2 This address stores firmware version of the DYNAMIXEL ID  3 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate  4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate bps       Margin of Error                  1      1M      0 000%              3      500 000      0 000%              4      400 000      0 000%              7      250 000      0 000%              9      200 000      0 000%              16      115200      2 124%              34 Default       57600      0 794%              103      19200      0 160%              207      9600      0 160%      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time  5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       CW CCW Angle Limit 6  8 The angle limit allows the motion to be restrained The range and the unit of the value is the same as Goal Position Address 30  31    CW Angle Limit the minimum value of Goal Position Address 30  31   CCW Angle Limit the maximum value of Goal Position Address 30  31 The following two modes can be set pursuant to the value of CW and CCW             Operation Type      CW   CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheeltype operation robots since motors of the robots spin infinitely  The joint mode can be used to multijoints robot since the robots can be controlled with specific angles Temperature Limit  11             Unit      Value Range                  About 1°C      0   100      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit  12  13 It is the operation range of voltage             Unit      Value Range      Description                  About 0 1V      50   250      5 0   25 0V      For example  if the value is 80  the voltage is 8V If Present Voltage 42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 Max Torque  14 It is the torque value of maximum output  0 to 1 023  0x3FF  can be used  and the unit is about 0 1% For example  Data 1 023  0x3FF  means that Dynamixel will use 100% of the maximum torque it can produce while Data 512  0x200  means that Dynamixel will use 50% of the maximum torque  When the power is turned on  Torque Limit  Address 34 and 35  uses the value as the initial value Status Return Level  16 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Alarm LED 17   Shutdown 18 Dynamixel can protect itself by detecting errors occur during the operation The errors can be set are as the table below             Bit      Item      Description                  Bit 7      0                    Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’  That is  if 0x05  binary 00000101  is set  both Input Voltage Error and Overheating Error can be detected If errors occur  in case of Alarm LED  the LED blinks in case of Alarm Shutdown  the motor output becomes 0 % by resetting the value of Torque Limit 34  to 0 Torque Enable  24             Value      Description                  0      Turn off the torque Free run state               1      Turn on the torque and lock EEPROM area      LED  25 Turn on or turn off the LED on Dynamixel             Bit      Description                  0 Default       Turn OFF the LED              1      Turn ON the LED      Compliance Margin  26  27 It exists in each direction of CW CCW and means the error between goal position and present position The range of the value is 0 255  and the unit is the same as Goal Position  Address 30 31 The greater the value  the more difference occurs Compliance Slope  28  29 It exists in each direction of CW CCW and sets the level of Torque near the goal position Compliance Slope is set in 7 steps  the higher the value  the more flexibility is obtained Data representative value is actually used value   That is  even if the value is set to 25  16 is used internally as the representative value             Step      Data Value      Data Representative Value                  1      0 0x00    3 0x03       2 0x02               2      4 0x04    7 0x07       4 0x04               3      8 0x08  15 0x0F       8 0x08               4      16 0x10  31 0x1F       16 0x10               5      32 0x20  63 0x3F       32 0x20               6      64 0x40  127 0x7F       64 0x40               7      128 0x80  254 0xFE       128 0x80       Compliance is to set the control flexibility of the motor The following diagram shows the relationship between output torque and position of the motor Goal Position  30 It is a position value of destination 0   1 023  0x3FF  is available   The unit is 0 29° If Goal Position is out of the range  Angle Limit Error Bit  Bit 1  of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED Shutdown The picture above is the front view of DynamixelNote If it is set to Wheel Mode  Goal Position value is not used Moving Speed  32 It is a moving speed to Goal Position The range and the unit of the value may vary depending on the operation mode       Join Mode0   1 023 0x3FF  can be used  and the unit is about 0 111rpm If it is set to 0  it means the maximum rpm of the motor is used without controlling the speed If it is 1023  it is about 114rpm For example  if it is set to 300  it is about 33 3 rpm     Note Please check the maximum rpm of the Dynamixel  The motor cannot exceed the maximum rpm with the higher Moving Speed value         Wheel Mode0   2 047 0x7FF  can be used  the unit is about 0 1% If a value in the range of 0   1 023 is used  it is stopped by setting to 0 while rotating to CCW direction If a value in the range of 1 024   2 047 is used  it is stopped by setting to 1 024 while rotating to CW direction That is  the 10th bit becomes the direction bit to control the direction In Wheel Mode  only the output control is possible  not speed For example  if it is set to 512  it means the output is controlled by 50% of the maximum output   Torque Limit  34 It is the value of the maximum torque limit 0   1 023 0x3FF  is available  and the unit is about 0 1% For example  if the value is 512  it is about 50% that means only 50% of the maximum torque will be used If the power is turned on  the value of Max Torque  Address 14  15  is used as the initial value Note If the function of Alarm Shutdown is triggered  the motor loses its torque because the value becomes 0  Once error conditions are resolved and this value is changed to the value other than 0  the motor can be operated again Present Position  36 It is the current position value of Dynamixel The range of the value is 0 1023  0x3FF   and the unit is 0 29 degree The picture above is the front view of Dynamixel Caution If it is set to Wheel Mode  the value cannot be used to measure the moving distance and the rotation frequency Present Speed  38 It is the present moving speed 0 2 047  0x7FF  can be used If a value is in the rage of 0 1 023  it means that the motor rotates to the CCW direction If a value is in the rage of 1 024 2 047  it means that the motor rotates to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 0 and 1 024 are equal The unit of this value varies depending on operation mode       Joint Mode    The unit is about 0 111rpm For example  if it is set to 300  it means that the motor is moving to the CCW direction at a rate of about 33 3rpm         Wheel Mode    The unit is about 0 1% For example  if it is set to 512  it means that the torque is controlled by 50% of the maximum torque to the CCW direction   Present Load  40 It means currently applied load The range of the value is 0 2047  and the unit is about 0 1% If the value is 0 1 023  it means the load works to the CCW direction If the value is 1 024 2 047  it means the load works to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 1 024 is equal to 0 For example  the value is 512  it means the load is detected in the direction of CCW about 50% of the maximum torque             Bit      15   11      10      9   0                  Value      0      Load Direction      Data  Load Ratio       Note CCW Load  Load Direction   0  CW Load  Load Direction   1Note Present load is an inferred value based on the internal output value not a measured value using torque sensor  etc  Therefore  it may be inaccurate for measuring weight or torque  It is recommended to use it for predicting the direction and size of the force being applied to the joint Present Voltage  42 It is the size of the present voltage supplied This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 If Present Voltage 42  value is out of range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18 Present Temperature  43 It is the internal temperature of Dynamixel in Celsius Data value is identical to the actual temperature in Celsius  For example  if the data value is 85  0x55   the current internal temperature is 85°C Registered Instruction  44             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Moving  46             Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock  47             Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 Punch  48 Minimum current to drive motor  This value ranges from 0x20 to 0x3FF How to Assemble  FR07B1 Option Frame  FR07H1 Option Frame  FR07S1 Option Frame  HN07N1 Horn  HN07I1 Horn  HN07T1 Horn  CombinationsMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators  the main controller needs to convert its UART signals to the half duplex type  The recommended circuit diagram for this is shown below TTL CommunicationRS485 CommunicationThe power of Dynamixel is supplied via Pin1    Pin2     The above circuit is built into Dynamixelonly controller  In the above circuit diagram  the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as followsIn case of DIRECTION485 Level   High The signal of TxD is output to D  and D In case of DIRECTION485 Level   Low The signal of D  and D is output to RxD Pin AssignmentThe connector pin assignments are as the following  The two connectors on the Dynamixel are connected pin to pin  thus the Dynamixel can be operated with only one connector attached ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/rx/rx-10/"
      } ,
  
  
      "docs-en-dxl-rx-rx-24f":  {
      "title": "RX-24F",
      "content"	 : "RX24FWarning RX24F has been discontinued Specifications            Item      Specifications                  Baud Rate      7343 bps   1 Mbps              Resolution      0 29°              Running Degree      0°   300°Endless Turn              Weight      67g              Dimensions  W x H x D       35 6mm x 50 6mm x 35 5mm              Gear Ratio      193  1              Stall Torque      2 6 N m  at 12V  2 4A               No Load Speed      126rpm  at 12V               Operating Temperature      5°C    80°C              Input Voltage      9   12V  Recommended  11 1V               Standby Current      50mA              Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multi Drop Bus Daisy Chain Type Connector               ID      0   253              Feedback      Position  Temperature  Load  Input Voltage  etc              Material      Full Metal Gear  Engineering Plastic Body      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 1 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on  Volatile   On the other hand  modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off  NonVolatile   Data in the EEPROM Area can only be changed or modified when the value of Torque Enable 24  is ‘0’ and Dynamixel is in idle state SizeThe Size of data is 1 or 2 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  2 bytes data will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      24              2      1      Firmware Version      Firmware Version      R                    3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      CounterClockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      190              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On Off      RW      0              25      1      LED      Status LED On Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      1              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      1              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW                    32      2      Moving Speed      Moving Speed      RW                    34      2      Torque Limit      Torque Limit Goal Torque       RW      ADD 14 amp15              36      2      Present Position      Present Position      R                    38      2      Present Speed      Present Speed      R                    40      2      Present Load      Present Load      R                    42      1      Present Voltage      Present Voltage      R                    43      1      Present Temperature      Present Temperature      R                    44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number  0 This address stores model number of the DYNAMIXEL Firmware Version  2 This address stores firmware version of the DYNAMIXEL ID  3 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate  4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate bps       Margin of Error                  1      1M      0 000%              3      500 000      0 000%              4      400 000      0 000%              7      250 000      0 000%              9      200 000      0 000%              16      115200      2 124%              34 Default       57600      0 794%              103      19200      0 160%              207      9600      0 160%      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time  5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       CW CCW Angle Limit 6  8 The angle limit allows the motion to be restrained The range and the unit of the value is the same as Goal Position Address 30  31    CW Angle Limit the minimum value of Goal Position Address 30  31   CCW Angle Limit the maximum value of Goal Position Address 30  31 The following two modes can be set pursuant to the value of CW and CCW             Operation Type      CW   CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheeltype operation robots since motors of the robots spin infinitely  The joint mode can be used to multijoints robot since the robots can be controlled with specific angles Temperature Limit  11             Unit      Value Range                  About 1°C      0   100      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit  12  13 It is the operation range of voltage             Unit      Value Range      Description                  About 0 1V      50   250      5 0   25 0V      For example  if the value is 80  the voltage is 8V If Present Voltage 42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 Max Torque  14 It is the torque value of maximum output  0 to 1 023  0x3FF  can be used  and the unit is about 0 1% For example  Data 1 023  0x3FF  means that Dynamixel will use 100% of the maximum torque it can produce while Data 512  0x200  means that Dynamixel will use 50% of the maximum torque  When the power is turned on  Torque Limit  Address 34 and 35  uses the value as the initial value Status Return Level  16 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Alarm LED 17   Shutdown 18 Dynamixel can protect itself by detecting errors occur during the operation The errors can be set are as the table below             Bit      Item      Description                  Bit 7      0                    Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’  That is  if 0x05  binary 00000101  is set  both Input Voltage Error and Overheating Error can be detected If errors occur  in case of Alarm LED  the LED blinks in case of Alarm Shutdown  the motor output becomes 0 % by resetting the value of Torque Limit 34  to 0 Torque Enable  24             Value      Description                  0      Turn off the torque Free run state               1      Turn on the torque and lock EEPROM area      LED  25 Turn on or turn off the LED on Dynamixel             Bit      Description                  0 Default       Turn OFF the LED              1      Turn ON the LED      Compliance Margin  26  27 It exists in each direction of CW CCW and means the error between goal position and present position The range of the value is 0 255  and the unit is the same as Goal Position  Address 30 31 The greater the value  the more difference occurs Compliance Slope  28  29 It exists in each direction of CW CCW and sets the level of Torque near the goal position Compliance Slope is set in 7 steps  the higher the value  the more flexibility is obtained Data representative value is actually used value   That is  even if the value is set to 25  16 is used internally as the representative value             Step      Data Value      Data Representative Value                  1      0 0x00    3 0x03       2 0x02               2      4 0x04    7 0x07       4 0x04               3      8 0x08  15 0x0F       8 0x08               4      16 0x10  31 0x1F       16 0x10               5      32 0x20  63 0x3F       32 0x20               6      64 0x40  127 0x7F       64 0x40               7      128 0x80  254 0xFE       128 0x80       Compliance is to set the control flexibility of the motor The following diagram shows the relationship between output torque and position of the motor Goal Position  30 It is a position value of destination 0   1 023  0x3FF  is available   The unit is 0 29° If Goal Position is out of the range  Angle Limit Error Bit  Bit 1  of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED Shutdown The picture above is the front view of DynamixelNote If it is set to Wheel Mode  Goal Position value is not used Moving Speed  32 It is a moving speed to Goal Position The range and the unit of the value may vary depending on the operation mode       Join Mode0   1 023 0x3FF  can be used  and the unit is about 0 111rpm If it is set to 0  it means the maximum rpm of the motor is used without controlling the speed If it is 1023  it is about 114rpm For example  if it is set to 300  it is about 33 3 rpm     Note Please check the maximum rpm of the Dynamixel  The motor cannot exceed the maximum rpm with the higher Moving Speed value         Wheel Mode0   2 047 0x7FF  can be used  the unit is about 0 1% If a value in the range of 0   1 023 is used  it is stopped by setting to 0 while rotating to CCW direction If a value in the range of 1 024   2 047 is used  it is stopped by setting to 1 024 while rotating to CW direction That is  the 10th bit becomes the direction bit to control the direction In Wheel Mode  only the output control is possible  not speed For example  if it is set to 512  it means the output is controlled by 50% of the maximum output   Torque Limit  34 It is the value of the maximum torque limit 0   1 023 0x3FF  is available  and the unit is about 0 1% For example  if the value is 512  it is about 50% that means only 50% of the maximum torque will be used If the power is turned on  the value of Max Torque  Address 14  15  is used as the initial value Note If the function of Alarm Shutdown is triggered  the motor loses its torque because the value becomes 0  Once error conditions are resolved and this value is changed to the value other than 0  the motor can be operated again Present Position  36 It is the current position value of Dynamixel The range of the value is 0 1023  0x3FF   and the unit is 0 29 degree The picture above is the front view of Dynamixel Caution If it is set to Wheel Mode  the value cannot be used to measure the moving distance and the rotation frequency Present Speed  38 It is the present moving speed 0 2 047  0x7FF  can be used If a value is in the rage of 0 1 023  it means that the motor rotates to the CCW direction If a value is in the rage of 1 024 2 047  it means that the motor rotates to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 0 and 1 024 are equal The unit of this value varies depending on operation mode       Joint Mode    The unit is about 0 111rpm For example  if it is set to 300  it means that the motor is moving to the CCW direction at a rate of about 33 3rpm         Wheel Mode    The unit is about 0 1% For example  if it is set to 512  it means that the torque is controlled by 50% of the maximum torque to the CCW direction   Present Load  40 It means currently applied load The range of the value is 0 2047  and the unit is about 0 1% If the value is 0 1 023  it means the load works to the CCW direction If the value is 1 024 2 047  it means the load works to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 1 024 is equal to 0 For example  the value is 512  it means the load is detected in the direction of CCW about 50% of the maximum torque             Bit      15   11      10      9   0                  Value      0      Load Direction      Data  Load Ratio       Note CCW Load  Load Direction   0  CW Load  Load Direction   1Note Present load is an inferred value based on the internal output value not a measured value using torque sensor  etc  Therefore  it may be inaccurate for measuring weight or torque  It is recommended to use it for predicting the direction and size of the force being applied to the joint Present Voltage  42 It is the size of the present voltage supplied This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 If Present Voltage 42  value is out of range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18 Present Temperature  43 It is the internal temperature of Dynamixel in Celsius Data value is identical to the actual temperature in Celsius  For example  if the data value is 85  0x55   the current internal temperature is 85°C Registered Instruction  44             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Moving  46             Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock  47             Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 Punch  48 Minimum current to drive motor  This value ranges from 0x20 to 0x3FF How to Assemble  FR07B1 Option Frame  FR07H1 Option Frame  FR07S1 Option Frame  FR07B101 Option Frame  FR07F101  FR07X101 Option Frame  FR07H101 Option Frame  FR07S101 Option Frame  HN07N1 Horn  HN07I1 Horn  HN07T1 Horn  HN07N101 Horn  HN07I101 Horn  HN07T101 Horn  CombinationsMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators  the main controller needs to convert its UART signals to the half duplex type  The recommended circuit diagram for this is shown below TTL CommunicationRS485 CommunicationThe power of Dynamixel is supplied via Pin1    Pin2     The above circuit is built into Dynamixelonly controller  In the above circuit diagram  the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as followsIn case of DIRECTION485 Level   High The signal of TxD is output to D  and D In case of DIRECTION485 Level   Low The signal of D  and D is output to RxD Pin AssignmentThe connector pin assignments are as the following  The two connectors on the Dynamixel are connected pin to pin  thus the Dynamixel can be operated with only one connector attached ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/rx/rx-24f/"
      } ,
  
  
      "docs-en-dxl-rx-rx-28":  {
      "title": "RX-28",
      "content"	 : "RX28Warning RX28 has been discontinued Specifications            Item      Specifications                  Baud Rate      7343 bps   1 Mbps              Resolution      0 29°              Running Degree      0°   300°Endless Turn              Weight      72g              Dimensions  W x H x D       35 6mm x 50 6mm x 35 5mm              Gear Ratio      193  1              Stall Torque      3 7 N m  at 18 5V  1 9A               No Load Speed      85rpm  at 18 5V               Operating Temperature      5°C    80°C              Input Voltage      12   18 5V  Recommended  14 8V               Standby Current      50mA              Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multi Drop Bus Daisy Chain Type Connector               ID      0   253              Feedback      Position  Temperature  Load  Input Voltage  etc              Material      Full Metal Gear  Engineering Plastic Body      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 1 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on  Volatile   On the other hand  modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off  NonVolatile   Data in the EEPROM Area can only be changed or modified when the value of Torque Enable 24  is ‘0’ and Dynamixel is in idle state SizeThe Size of data is 1 or 2 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  2 bytes data will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      28              2      1      Firmware Version      Firmware Version      R                    3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      CounterClockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      190              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On Off      RW      0              25      1      LED      Status LED On Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      1              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      1              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW                    32      2      Moving Speed      Moving Speed      RW                    34      2      Torque Limit      Torque Limit Goal Torque       RW      ADD 14 amp15              36      2      Present Position      Present Position      R                    38      2      Present Speed      Present Speed      R                    40      2      Present Load      Present Load      R                    42      1      Present Voltage      Present Voltage      R                    43      1      Present Temperature      Present Temperature      R                    44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number  0 This address stores model number of the DYNAMIXEL Firmware Version  2 This address stores firmware version of the DYNAMIXEL ID  3 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate  4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate bps       Margin of Error                  1      1M      0 000%              3      500 000      0 000%              4      400 000      0 000%              7      250 000      0 000%              9      200 000      0 000%              16      115200      2 124%              34 Default       57600      0 794%              103      19200      0 160%              207      9600      0 160%      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time  5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       CW CCW Angle Limit 6  8 The angle limit allows the motion to be restrained The range and the unit of the value is the same as Goal Position Address 30  31    CW Angle Limit the minimum value of Goal Position Address 30  31   CCW Angle Limit the maximum value of Goal Position Address 30  31 The following two modes can be set pursuant to the value of CW and CCW             Operation Type      CW   CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheeltype operation robots since motors of the robots spin infinitely  The joint mode can be used to multijoints robot since the robots can be controlled with specific angles Temperature Limit  11             Unit      Value Range                  About 1°C      0   100      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit  12  13 It is the operation range of voltage             Unit      Value Range      Description                  About 0 1V      50   250      5 0   25 0V      For example  if the value is 80  the voltage is 8V If Present Voltage 42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 Max Torque  14 It is the torque value of maximum output  0 to 1 023  0x3FF  can be used  and the unit is about 0 1% For example  Data 1 023  0x3FF  means that Dynamixel will use 100% of the maximum torque it can produce while Data 512  0x200  means that Dynamixel will use 50% of the maximum torque  When the power is turned on  Torque Limit  Address 34 and 35  uses the value as the initial value Status Return Level  16 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Alarm LED 17   Shutdown 18 Dynamixel can protect itself by detecting errors occur during the operation The errors can be set are as the table below             Bit      Item      Description                  Bit 7      0                    Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’  That is  if 0x05  binary 00000101  is set  both Input Voltage Error and Overheating Error can be detected If errors occur  in case of Alarm LED  the LED blinks in case of Alarm Shutdown  the motor output becomes 0 % by resetting the value of Torque Limit 34  to 0 Torque Enable  24             Value      Description                  0      Turn off the torque Free run state               1      Turn on the torque and lock EEPROM area      LED  25 Turn on or turn off the LED on Dynamixel             Bit      Description                  0 Default       Turn OFF the LED              1      Turn ON the LED      Compliance Margin  26  27 It exists in each direction of CW CCW and means the error between goal position and present position The range of the value is 0 255  and the unit is the same as Goal Position  Address 30 31 The greater the value  the more difference occurs Compliance Slope  28  29 It exists in each direction of CW CCW and sets the level of Torque near the goal position Compliance Slope is set in 7 steps  the higher the value  the more flexibility is obtained Data representative value is actually used value   That is  even if the value is set to 25  16 is used internally as the representative value             Step      Data Value      Data Representative Value                  1      0 0x00    3 0x03       2 0x02               2      4 0x04    7 0x07       4 0x04               3      8 0x08  15 0x0F       8 0x08               4      16 0x10  31 0x1F       16 0x10               5      32 0x20  63 0x3F       32 0x20               6      64 0x40  127 0x7F       64 0x40               7      128 0x80  254 0xFE       128 0x80       Compliance is to set the control flexibility of the motor The following diagram shows the relationship between output torque and position of the motor Goal Position  30 It is a position value of destination 0   1 023  0x3FF  is available   The unit is 0 29° If Goal Position is out of the range  Angle Limit Error Bit  Bit 1  of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED Shutdown The picture above is the front view of DynamixelNote If it is set to Wheel Mode  Goal Position value is not used Moving Speed  32 It is a moving speed to Goal Position The range and the unit of the value may vary depending on the operation mode       Join Mode0   1 023 0x3FF  can be used  and the unit is about 0 111rpm If it is set to 0  it means the maximum rpm of the motor is used without controlling the speed If it is 1023  it is about 114rpm For example  if it is set to 300  it is about 33 3 rpm     Note Please check the maximum rpm of the Dynamixel  The motor cannot exceed the maximum rpm with the higher Moving Speed value         Wheel Mode0   2 047 0x7FF  can be used  the unit is about 0 1% If a value in the range of 0   1 023 is used  it is stopped by setting to 0 while rotating to CCW direction If a value in the range of 1 024   2 047 is used  it is stopped by setting to 1 024 while rotating to CW direction That is  the 10th bit becomes the direction bit to control the direction In Wheel Mode  only the output control is possible  not speed For example  if it is set to 512  it means the output is controlled by 50% of the maximum output   Torque Limit  34 It is the value of the maximum torque limit 0   1 023 0x3FF  is available  and the unit is about 0 1% For example  if the value is 512  it is about 50% that means only 50% of the maximum torque will be used If the power is turned on  the value of Max Torque  Address 14  15  is used as the initial value Note If the function of Alarm Shutdown is triggered  the motor loses its torque because the value becomes 0  Once error conditions are resolved and this value is changed to the value other than 0  the motor can be operated again Present Position  36 It is the current position value of Dynamixel The range of the value is 0 1023  0x3FF   and the unit is 0 29 degree The picture above is the front view of Dynamixel Caution If it is set to Wheel Mode  the value cannot be used to measure the moving distance and the rotation frequency Present Speed  38 It is the present moving speed 0 2 047  0x7FF  can be used If a value is in the rage of 0 1 023  it means that the motor rotates to the CCW direction If a value is in the rage of 1 024 2 047  it means that the motor rotates to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 0 and 1 024 are equal The unit of this value varies depending on operation mode       Joint Mode    The unit is about 0 111rpm For example  if it is set to 300  it means that the motor is moving to the CCW direction at a rate of about 33 3rpm         Wheel Mode    The unit is about 0 1% For example  if it is set to 512  it means that the torque is controlled by 50% of the maximum torque to the CCW direction   Present Load  40 It means currently applied load The range of the value is 0 2047  and the unit is about 0 1% If the value is 0 1 023  it means the load works to the CCW direction If the value is 1 024 2 047  it means the load works to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 1 024 is equal to 0 For example  the value is 512  it means the load is detected in the direction of CCW about 50% of the maximum torque             Bit      15   11      10      9   0                  Value      0      Load Direction      Data  Load Ratio       Note CCW Load  Load Direction   0  CW Load  Load Direction   1Note Present load is an inferred value based on the internal output value not a measured value using torque sensor  etc  Therefore  it may be inaccurate for measuring weight or torque  It is recommended to use it for predicting the direction and size of the force being applied to the joint Present Voltage  42 It is the size of the present voltage supplied This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 If Present Voltage 42  value is out of range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18 Present Temperature  43 It is the internal temperature of Dynamixel in Celsius Data value is identical to the actual temperature in Celsius  For example  if the data value is 85  0x55   the current internal temperature is 85°C Registered Instruction  44             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Moving  46             Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock  47             Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 Punch  48 Minimum current to drive motor  This value ranges from 0x20 to 0x3FF How to Assemble  FR07B1 Option Frame  FR07H1 Option Frame  FR07S1 Option Frame  FR07B101 Option Frame  FR07F101  FR07X101 Option Frame  FR07H101 Option Frame  FR07S101 Option Frame  HN07N1 Horn  HN07I1 Horn  HN07T1 Horn  HN07N101 Horn  HN07I101 Horn  HN07T101 Horn  CombinationsMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators  the main controller needs to convert its UART signals to the half duplex type  The recommended circuit diagram for this is shown below TTL CommunicationRS485 CommunicationThe power of Dynamixel is supplied via Pin1    Pin2     The above circuit is built into Dynamixelonly controller  In the above circuit diagram  the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as followsIn case of DIRECTION485 Level   High The signal of TxD is output to D  and D In case of DIRECTION485 Level   Low The signal of D  and D is output to RxD Pin AssignmentThe connector pin assignments are as the following  The two connectors on the Dynamixel are connected pin to pin  thus the Dynamixel can be operated with only one connector attached ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/rx/rx-28/"
      } ,
  
  
      "docs-en-dxl-rx-rx-64":  {
      "title": "RX-64",
      "content"	 : "RX64Warning RX64 has been discontinued Specifications            Item      Specifications                  Baud Rate      7343 bps   1 Mbps              Resolution      0 29°              Running Degree      0°   300°Endless Turn              Weight      125g              Dimensions  W x H x D       40 2mm x 61 1mm x 41mm              Gear Ratio      200  1              Stall Torque      5 3 N m  at 18 5V  2 6A               No Load Speed      64rpm  at 18 5V               Operating Temperature      5°C    80°C              Input Voltage      12   18 5V  Recommended  14 8V               Standby Current      50mA              Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication 8bit  1stop  No Parity               Physical Connection      RS485 Multi Drop Bus Daisy Chain Type Connector               ID      0   253              Feedback      Position  Temperature  Load  Input Voltage  etc              Material      Full Metal Gear  Engineering Plastic Body      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 1 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on  Volatile   On the other hand  modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off  NonVolatile   Data in the EEPROM Area can only be changed or modified when the value of Torque Enable 24  is ‘0’ and Dynamixel is in idle state SizeThe Size of data is 1 or 2 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  2 bytes data will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      64              2      1      Firmware Version      Firmware Version      R                    3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      CounterClockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      190              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On Off      RW      0              25      1      LED      Status LED On Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      1              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      1              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW                    32      2      Moving Speed      Moving Speed      RW                    34      2      Torque Limit      Torque Limit Goal Torque       RW      ADD 14 amp15              36      2      Present Position      Present Position      R                    38      2      Present Speed      Present Speed      R                    40      2      Present Load      Present Load      R                    42      1      Present Voltage      Present Voltage      R                    43      1      Present Temperature      Present Temperature      R                    44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number  0 This address stores model number of the DYNAMIXEL Firmware Version  2 This address stores firmware version of the DYNAMIXEL ID  3 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate  4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate bps       Margin of Error                  1      1M      0 000%              3      500 000      0 000%              4      400 000      0 000%              7      250 000      0 000%              9      200 000      0 000%              16      115200      2 124%              34 Default       57600      0 794%              103      19200      0 160%              207      9600      0 160%      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time  5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       CW CCW Angle Limit 6  8 The angle limit allows the motion to be restrained The range and the unit of the value is the same as Goal Position Address 30  31    CW Angle Limit the minimum value of Goal Position Address 30  31   CCW Angle Limit the maximum value of Goal Position Address 30  31 The following two modes can be set pursuant to the value of CW and CCW             Operation Type      CW   CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheeltype operation robots since motors of the robots spin infinitely  The joint mode can be used to multijoints robot since the robots can be controlled with specific angles Temperature Limit  11             Unit      Value Range                  About 1°C      0   100      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before reuse  Keep using the product when the temperature is high can cause severe damage Min Max Voltage Limit  12  13 It is the operation range of voltage             Unit      Value Range      Description                  About 0 1V      50   160      5 0   16 0V      For example  if the value is 80  the voltage is 8V If Present Voltage 42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 Max Torque  14 It is the torque value of maximum output  0 to 1 023  0x3FF  can be used  and the unit is about 0 1% For example  Data 1 023  0x3FF  means that Dynamixel will use 100% of the maximum torque it can produce while Data 512  0x200  means that Dynamixel will use 50% of the maximum torque  When the power is turned on  Torque Limit  Address 34 and 35  uses the value as the initial value Status Return Level  16 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 Alarm LED 17   Shutdown 18 Dynamixel can protect itself by detecting errors occur during the operation The errors can be set are as the table below             Bit      Item      Description                  Bit 7      0                    Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’  That is  if 0x05  binary 00000101  is set  both Input Voltage Error and Overheating Error can be detected If errors occur  in case of Alarm LED  the LED blinks in case of Alarm Shutdown  the motor output becomes 0 % by resetting the value of Torque Limit 34  to 0 Torque Enable  24             Value      Description                  0      Turn off the torque Free run state               1      Turn on the torque and lock EEPROM area      LED  25 Turn on or turn off the LED on Dynamixel             Bit      Description                  0 Default       Turn OFF the LED              1      Turn ON the LED      Compliance Margin  26  27 It exists in each direction of CW CCW and means the error between goal position and present position The range of the value is 0 255  and the unit is the same as Goal Position  Address 30 31 The greater the value  the more difference occurs Compliance Slope  28  29 It exists in each direction of CW CCW and sets the level of Torque near the goal position Compliance Slope is set in 7 steps  the higher the value  the more flexibility is obtained Data representative value is actually used value   That is  even if the value is set to 25  16 is used internally as the representative value             Step      Data Value      Data Representative Value                  1      0 0x00    3 0x03       2 0x02               2      4 0x04    7 0x07       4 0x04               3      8 0x08  15 0x0F       8 0x08               4      16 0x10  31 0x1F       16 0x10               5      32 0x20  63 0x3F       32 0x20               6      64 0x40  127 0x7F       64 0x40               7      128 0x80  254 0xFE       128 0x80       Compliance is to set the control flexibility of the motor The following diagram shows the relationship between output torque and position of the motor Goal Position  30 It is a position value of destination 0   1 023  0x3FF  is available   The unit is 0 29° If Goal Position is out of the range  Angle Limit Error Bit  Bit 1  of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED Shutdown The picture above is the front view of DynamixelNote If it is set to Wheel Mode  Goal Position value is not used Moving Speed  32 It is a moving speed to Goal Position The range and the unit of the value may vary depending on the operation mode       Join Mode0   1 023 0x3FF  can be used  and the unit is about 0 111rpm If it is set to 0  it means the maximum rpm of the motor is used without controlling the speed If it is 1023  it is about 114rpm For example  if it is set to 300  it is about 33 3 rpm     Note Please check the maximum rpm of the Dynamixel  The motor cannot exceed the maximum rpm with the higher Moving Speed value         Wheel Mode0   2 047 0x7FF  can be used  the unit is about 0 1% If a value in the range of 0   1 023 is used  it is stopped by setting to 0 while rotating to CCW direction If a value in the range of 1 024   2 047 is used  it is stopped by setting to 1 024 while rotating to CW direction That is  the 10th bit becomes the direction bit to control the direction In Wheel Mode  only the output control is possible  not speed For example  if it is set to 512  it means the output is controlled by 50% of the maximum output   Torque Limit  34 It is the value of the maximum torque limit 0   1 023 0x3FF  is available  and the unit is about 0 1% For example  if the value is 512  it is about 50% that means only 50% of the maximum torque will be used If the power is turned on  the value of Max Torque  Address 14  15  is used as the initial value Note If the function of Alarm Shutdown is triggered  the motor loses its torque because the value becomes 0  Once error conditions are resolved and this value is changed to the value other than 0  the motor can be operated again Present Position  36 It is the current position value of Dynamixel The range of the value is 0 1023  0x3FF   and the unit is 0 29 degree The picture above is the front view of Dynamixel Caution If it is set to Wheel Mode  the value cannot be used to measure the moving distance and the rotation frequency Present Speed  38 It is the present moving speed 0 2 047  0x7FF  can be used If a value is in the rage of 0 1 023  it means that the motor rotates to the CCW direction If a value is in the rage of 1 024 2 047  it means that the motor rotates to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 0 and 1 024 are equal The unit of this value varies depending on operation mode       Joint Mode    The unit is about 0 111rpm For example  if it is set to 300  it means that the motor is moving to the CCW direction at a rate of about 33 3rpm         Wheel Mode    The unit is about 0 1% For example  if it is set to 512  it means that the torque is controlled by 50% of the maximum torque to the CCW direction   Present Load  40 It means currently applied load The range of the value is 0 2047  and the unit is about 0 1% If the value is 0 1 023  it means the load works to the CCW direction If the value is 1 024 2 047  it means the load works to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 1 024 is equal to 0 For example  the value is 512  it means the load is detected in the direction of CCW about 50% of the maximum torque             Bit      15   11      10      9   0                  Value      0      Load Direction      Data  Load Ratio       Note CCW Load  Load Direction   0  CW Load  Load Direction   1Note Present load is an inferred value based on the internal output value not a measured value using torque sensor  etc  Therefore  it may be inaccurate for measuring weight or torque  It is recommended to use it for predicting the direction and size of the force being applied to the joint Present Voltage  42 It is the size of the present voltage supplied This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 If Present Voltage 42  value is out of range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18 Present Temperature  43 It is the internal temperature of Dynamixel in Celsius Data value is identical to the actual temperature in Celsius  For example  if the data value is 85  0x55   the current internal temperature is 85°C Registered Instruction  44             Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed  the value will be changed to 0 Moving  46             Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock  47             Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 Punch  48 Minimum current to drive motor  This value ranges from 0x20 to 0x3FF How to Assemble  FR05B1 Option Frame  FR05H1 Option Frame  FR05S1 Option Frame  FR05S2 Option Frame  FR05B101 Option Frame  FR05F101  FR05X101 Option Frame  FR05H101 Option Frame  FR05S101 Option Frame  HN05N1 Horn  HN05I1 Horn  HN05T1 Horn  HN05N101 Horn  HN05I101 Horn  HN05T101 Horn  CombinationsMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators  the main controller needs to convert its UART signals to the half duplex type  The recommended circuit diagram for this is shown below TTL CommunicationRS485 CommunicationThe power of Dynamixel is supplied via Pin1    Pin2     The above circuit is built into Dynamixelonly controller  In the above circuit diagram  the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as followsIn case of DIRECTION485 Level   High The signal of TxD is output to D  and D In case of DIRECTION485 Level   Low The signal of D  and D is output to RxD Pin AssignmentThe connector pin assignments are as the following  The two connectors on the Dynamixel are connected pin to pin  thus the Dynamixel can be operated with only one connector attached ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/rx/rx-64/"
      } ,
  
  
      "docs-en-dxl-x-xh430-v210":  {
      "title": "XH430-V210",
      "content"	 : "  XH430V210     assets images dxl x x_series_product png    Specifications   specifications   Item             Specifications               MCU         ST CORTEXM3  STM32F103C8 @ 72Mhz  32Bit           Position Sensor         Contactless absolute encoder  12Bit  360 deg Maker  ams www ams com   Part No  AS5045   Motor         Maxon          Baud Rate         9600 bps   4 5 Mbps          Control Algorithm   PID control        Degree of Precision   0 088 deg     Operating Modes   Current Control Mode  Velocity Control Mode  Position Control Mode  0 deg   360 deg   Extended Position Control Mode  Currentbased Position Control Mode  PWM Control Mode  Voltage Control Mode     Weight   82g    Dimensions  W x H x D    28 5mm x 46 5mm x 34mm    Gear Ratio   212 6  1     Stall Torque   2 6Nm @ 24V  0 7A    No Load Speed   52rpm @ 24V    Operating Temperature   5 degC    80 degC    Input Voltage   24 0V    Recommended  24 0V       Standby Current   36mA    Command Signal   Digital Packet    Protocol Type   RS485 Asynchronous Serial Communication 8bit  1stop  No Parity     Physical Connection   RS485 Multidrop BUS    ID   0   252    Feedback   Position  Velocity  Current  Realtime tick  Trajectory  Temperature  Input Voltage  etc    Part Material   Full Metal GearMetal Front  Middle   Engineering Plastic Back       Performance Graph   performancegraph      assets images dxl x xh430_v210_performance_graph jpg % include en dxl note_performance_graph md %% include en dxl control_table_protocol2 md %    Control Table of EEPROM Area   controltableofeepromarea   Address       Size Byte        Data Name       Description       Access       Initial Value                          0 2  Model Number   modelnumber                      Model Number                              R   1050  2 4  Model Information   modelinformation            Model Information                         R     6 1  Firmware Version   firmwareversion              Firmware Version                          R     7 1  ID   id                                          DYNAMIXEL ID                              RW  1  8 1  Baud Rate   baudrate                            Communication Speed                       RW  1  9 1  Return Delay Time   returndelaytime            Response Delay Time                       RW  250  10 1  Drive Mode   drivemode                         Default Rotation Direction                RW  0  11 1  Operating Mode   operatingmode                 Operating Mode                            RW  3  12 1  Secondary Shadow  ID   secondaryshadowid      Secondary Shadow  ID                      RW  255  13 1  Protocol Version   protocolversion             Protocol Version                          RW  2  20 4  Homing Offset   homingoffset                   Home Position Offset                      RW  0  24 4  Moving Threshold   movingthreshold             Velocity Threshold for Movement Detection RW  10  31 1  Temperature Limit   temperaturelimit           Maximum Internal Temperature Limit        RW  80  32 2  Max Voltage Limit   maxvoltagelimit           Maximum Input Voltage Limit               RW  300  34 2  Min Voltage Limit   minvoltagelimit           Minimum Input Voltage Limit               RW  110  36 2  PWM Limit   pwmlimit                           Maximum PWM Limit                         RW  885  38 2  Current Limit   currentlimit                   Maximum Current Limit                     RW  689  40 4  Acceleration Limit   accelerationlimit         Maximum Accleration Limit                 RW  32767  44 4  Velocity Limit   velocitylimit                 Maximum Velocity Limit                    RW  380  48 4  Max Position Limit   maxpositionlimit         Maximum Position Limit                    RW  4095  52 4  Min Position Limit   minpositionlimit         Minimum Position Limit                    RW  0  63 1  Shutdown   shutdown                             Shutdown Error Information                RW  52     Control Table of RAM Area   controltableoframarea   Address       Size Byte        Data Name       Description       Access       Initial Value                          64 1  Torque Enable   torqueenable                 Motor Torque On Off                         RW  0  65 1  LED   led                                     Status LED On Off                           RW  0  68 1  Status Return Level   statusreturnlevel     Select Types of Status Return               RW  2  69 1  Registered Instruction   registeredinstruction  Check Reception of Instruction           R   0  70 1  Hardware Error Status   hardwareerrorstatus    Hardware Error Status                    R   0  76 2  Velocity I Gain   velocityigain             I Gain of Velocity                          RW  1920  78 2  Velocity P Gain   velocitypgain             P Gain of Velocity                          RW  100  80 2  Position D Gain   positiondgain             D Gain of Position                          RW  0  82 2  Position I Gain   positionigain             I Gain of Position                          RW  0  84 2  Position P Gain   positionpgain             P Gain of Position                          RW  800  88 2  Feedforward 2nd Gain   feedforward2ndgain   2nd Gain of FeedForward                    RW  0  90 2  Feedforward 1st Gain   feedforward1stgain   1st Gain of FeedForward                    RW  0  98 1  Bus Watchdog   buswatchdog                   DYNAMIXEL Bus Watchdog                      RW  0  100 2  Goal PWM   goalpwm                          Target PWM Value                            RW    102 2  Goal Current   goalcurrent                  Target Current Value                        RW    104 4  Goal Velocity   goalvelocity                Target Velocity Value                       RW    108 4  Profile Acceleration   profileacceleration  Acceleration Value of Profile               RW  0  112 4  Profile Velocity   profilevelocity          Velocity Value of Profile                   RW  0  116 4  Goal Position   goalposition                Target Position Value                       RW    120 2  Realtime Tick   realtimetick                Count Time in millisecond                   R     122 1  Moving   moving                              Movement Status                             R   0  123 1  Moving Status   movingstatus                Detailed Information of Movement Status     R   0  124 2  Present PWM   presentpwm                    Current PWM Value                           R     126 2  Present Current   presentcurrent            Current Current Value                       R     128 4  Present Velocity   presentvelocity          Current Velocity Value                      R     132 4  Present Position   presentposition          Current Position Value                      R     136 4  Velocity Trajectory   velocitytrajectory    Target Velocity Trajectory Generated by Profile R   140 4  Position Trajectory   positiontrajectory    Target Position Trajectory Generated by Profile R   144 2  Present Input Voltage   presentinputvoltage  Current Input Voltage                     R     146 1  Present Temperature   presenttemperature      Current Internal Temperature              R     168 2  Indirect Address 1   indirectaddress        Indirect Address 1                          RW  224  170 2  Indirect Address 2   indirectaddress        Indirect Address 2                          RW  225  172 2  Indirect Address 3   indirectaddress        Indirect Address 3                          RW  226      … …                         … … …  218 2  Indirect Address 26   indirectaddress       Indirect Address 26                         RW  249  220 2  Indirect Address 27   indirectaddress       Indirect Address 27                         RW  250  222 2  Indirect Address 28   indirectaddress       Indirect Address 28                         RW  251  224 1  Indirect Data 1   indirectdata              Indirect Data 1                             RW  0  225 1  Indirect Data 2   indirectdata              Indirect Data 2                             RW  0  226 1  Indirect Data 3   indirectdata              Indirect Data 3                             RW  0      … …                         … … …  249 1  Indirect Data 26   indirectdata             Indirect Data 26                            RW  0  250 1  Indirect Data 27   indirectdata             Indirect Data 27                            RW  0  251 1  Indirect Data 28   indirectdata             Indirect Data 28                            RW  0  578 2  Indirect Address 29   indirectaddress       Indirect Address 29                         RW  634  580 2  Indirect Address 30   indirectaddress       Indirect Address 30                         RW  635  582 2  Indirect Address 31   indirectaddress       Indirect Address 31                         RW  636  … … … … … …  628 2  Indirect Address 54   indirectaddress       Indirect Address 54                         RW  659  630 2  Indirect Address 55   indirectaddress       Indirect Address 55                         RW  660  632 2  Indirect Address 56   indirectaddress       Indirect Address 56                         RW  661  634 1  Indirect Data 29   indirectdata             Indirect Data 29                            RW  0  635 1  Indirect Data 30   indirectdata             Indirect Data 30                            RW  0  636 1  Indirect Data 31   indirectdata             Indirect Data 31                            RW  0  … … … … … …  659 1  Indirect Data 54   indirectdata             Indirect Data 54                            RW  0  660 1  Indirect Data 55   indirectdata             Indirect Data 55                            RW  0  661 1  Indirect Data 56   indirectdata             Indirect Data 56                            RW  0  Caution  Protocol 1 0 does not support addresses greater than 256  Therefore  Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0   noticewarning    Control Table Description   controltabledescription  Caution  Data in the EEPROM Area can only be written when the value of Torque Enable 64  is cleared to ‘0’   noticewarning       Model Number 0    modelnumber0    This address stores model number of the DYNAMIXEL        Firmware Version 6    firmwareversion6    This address stores firmware version of the DYNAMIXEL        ID 7    id7   % include en dxl control_table_id md %       Baud Rate 8    baudrate8   % include en dxl control_table_baudrate_2 md %       Return Delay Time 9    returndelaytime9   % include en dxl control_table_return_delay_time md %       Drive Mode 10    drivemode10   % include en dxl control_table_drivemode md %       Operating Mode 11    operatingmode11   % include en dxl control_table_opmode_six_2 md %       Secondary Shadow  ID 12    secondaryshadowid12   % include en dxl control_table_shadowid md %       Protocol Version 13    protocolversion13   % include en dxl control_table_protocolversion md %       Homing Offset 20    homingoffset20   % include en dxl control_table_homingoffset md %       Moving Threshold 24    movingthreshold24   % include en dxl control_table_movingthreshold md %       Temperature Limit 31    temperaturelimit31   % include en dxl control_table_temp_limit_2 md %       Min Max Voltage Limit 32  34    minmaxvoltagelimit3234   % include en dxl control_table_volt_limit_24v md %       PWM Limit 36    pwmlimit36   % include en dxl control_table_pwm_limit md %       Current Limit 38    currentlimit38   % include en dxl control_table_current_limit md %  Unit   Value Range              about  1 34 mA  0   689  Note  Current Limit 38  could be differ by each DYNAMIXEL so please check the Control Table   notice       Acceleration Limit 40    accelerationlimit40   % include en dxl control_table_acclimit md %       Velocity Limit 44    velocitylimit44   % include en dxl control_table_vellimit md %       Min Max Position Limit 48  52    minmaxpositionlimit4852   % include en dxl control_table_positionlimit md %       Shutdown 63    shutdown63   % include en dxl control_table_shutdown md %       Torque Enable 64    torqueenable64   % include en dxl control_table_torque_enable_2 md %       LED 65    led65   % include en dxl control_table_led md %       Status Return Level 68    statusreturnlevel68   % include en dxl control_table_status_return_lv md %       Registered Instruction 69    registeredinstruction69   % include en dxl control_table_reg_instruction md %       Hardware Error Status 70    hardwareerrorstatus70   This value indicates hardware error status % include en dxl control_table_shutdown md %       Velocity PI Gain 76  78    velocitypigain7678   % include en dxl control_table_velocity_pi_gain md %       Position PID Gain 80  82  84    positionpidgain808284        Feedforward 1st 2nd Gains 88  90    feedforward1st2ndgains8890   % include en dxl control_table_position_pid_gain md %% include en dxl control_table_current_position_pid_gain md %       Bus Watchdog 98    buswatchdog98   % include en dxl control_table_buswatchdog md %       Goal PWM 100    goalpwm100   % include en dxl control_table_goal_pwm md %      Goal Current 102   % include en dxl control_table_goal_current md %  Unit   Value Range              about  1 34 mA  Current Limit 38    Current Limit 38   Note  Applying high current to the motor for long period of time might damage the motor   notice       Goal Velocity 104    goalvelocity104   % include en dxl control_table_goal_velocity md %       Profile Acceleration 108    profileacceleration108   % include en dxl control_table_profile_acceleration md %       Profile Velocity 112    profilevelocity112   % include en dxl control_table_profile_velocity md %       Goal Position 116    goalposition116   % include en dxl control_table_goal_position_2 md %       Realtime Tick 120    realtimetick120   % include en dxl control_table_realtime_tick md %       Moving 122    moving122   % include en dxl control_table_moving_2 md %       Moving Status 123    movingstatus123   % include en dxl control_table_moving_status md %       Present PWM 124    presentpwm124   This value indicates current PWM  For more details  please refer to the  Goal PWM 100    goalpwm         Present Current 126    presentcurrent126   This value indicates current Current  For more details  please refer to the  Goal Current 102    goalcurrent         Present Velocity 128    presentvelocity128   This value indicates current Velocity  For more details  please refer to the Goal Velocity 104    goalvelocity         Present Position 132    presentposition132   % include en dxl control_table_present_position md %       Velocity Trajectory 136    velocitytrajectory136   % include en dxl control_table_velocity_trajectory md %       Position Trajectory 140    positiontrajectory140   % include en dxl control_table_position_trajectory md %       Present Input Voltage 144    presentinputvoltage144   % include en dxl control_table_present_volt_2 md %       Present Temperature 146    presenttemperature146   % include en dxl control_table_present_temp_2 md %       Indirect Address   indirectaddress        Indirect Data   indirectdata   % include en dxl control_table_indirect_data md %   How to Assemble   howtoassemble     Wiring through Back Case   wiringthroughbackcase      assets images dxl x wiring_through_back_case jpg     Option Frame Assembly   optionframeassembly      assets images dxl x x430_option_frame jpg    Maintenance   maintenance % include en dxl horn_bearing_replacement md %   Reference   reference  Note   Compatibility Guide   notice    Quick Start   quickstart % include en dxl quick_start md %    Drawings   drawings  Download   X_430_std_ref pdf  X_430_std_ref pdf  http  support robotis com en baggage_files dynamixel x430_std_ref pdf Compatibility Guide  http  en robotis com BlueAD board php bbs_id faq mode view bbs_no 47 page 1 key  keyword  sort  scate ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/x/xh430-v210/"
      } ,
  
  
      "docs-en-dxl-x-xh430-v350":  {
      "title": "XH430-V350",
      "content"	 : "  XH430V350     assets images dxl x x_series_product png    Specifications   specifications   Item             Specifications               MCU         ST CORTEXM3  STM32F103C8 @ 72Mhz  32Bit           Position Sensor         Contactless absolute encoder  12Bit  360 deg Maker  ams www ams com   Part No  AS5045   Motor         Maxon          Baud Rate         9600 bps   4 5 Mbps          Control Algorithm   PID control        Degree of Precision   0 088 deg     Operating Modes   Current Control Mode  Velocity Control Mode  Position Control Mode  0 deg   360 deg   Extended Position Control Mode  Currentbased Position Control Mode  PWM Control Mode  Voltage Control Mode     Weight   82g    Dimensions  W x H x D    28 5mm x 46 5mm x 34mm    Gear Ratio   353 5  1     Stall Torque   3 3Nm @ 24V  0 7A    No Load Speed   31rpm @ 24V    Operating Temperature   5 degC    80 degC    Input Voltage   24 0V    Recommended  24 0V       Standby Current   36mA    Command Signal   Digital Packet    Protocol Type   RS485 Asynchronous Serial Communication 8bit  1stop  No Parity     Physical Connection   RS485 Multidrop BUS    ID   0   252    Feedback   Position  Velocity  Current  Realtime tick  Trajectory  Temperature  Input Voltage  etc    Part Material   Full Metal GearMetal Front  Middle   Engineering Plastic Back       Performance Graph   performancegraph      assets images dxl x xh430_v350_performance_graph jpg % include en dxl note_performance_graph md %% include en dxl control_table_protocol2 md %    Control Table of EEPROM Area   controltableofeepromarea   Address       Size Byte        Data Name       Description       Access       Initial Value                          0 2  Model Number   modelnumber                      Model Number                              R   1040  2 4  Model Information   modelinformation            Model Information                         R     6 1  Firmware Version   firmwareversion              Firmware Version                          R     7 1  ID   id                                          DYNAMIXEL ID                              RW  1  8 1  Baud Rate   baudrate                            Communication Speed                       RW  1  9 1  Return Delay Time   returndelaytime            Response Delay Time                       RW  250  10 1  Drive Mode   drivemode                         Default Rotation Direction                RW  0  11 1  Operating Mode   operatingmode                 Operating Mode                            RW  3  12 1  Secondary Shadow  ID   secondaryshadowid      Secondary Shadow  ID                      RW  255  13 1  Protocol Version   protocolversion             Protocol Version                          RW  2  20 4  Homing Offset   homingoffset                   Home Position Offset                      RW  0  24 4  Moving Threshold   movingthreshold             Velocity Threshold for Movement Detection RW  10  31 1  Temperature Limit   temperaturelimit           Maximum Internal Temperature Limit        RW  80  32 2  Max Voltage Limit   maxvoltagelimit           Maximum Input Voltage Limit               RW  300  34 2  Min Voltage Limit   minvoltagelimit           Minimum Input Voltage Limit               RW  110  36 2  PWM Limit   pwmlimit                           Maximum PWM Limit                         RW  885  38 2  Current Limit   currentlimit                   Maximum Current Limit                     RW  689  40 4  Acceleration Limit   accelerationlimit         Maximum Accleration Limit                 RW  32767  44 4  Velocity Limit   velocitylimit                 Maximum Velocity Limit                    RW  285  48 4  Max Position Limit   maxpositionlimit         Maximum Position Limit                    RW  4095  52 4  Min Position Limit   minpositionlimit         Minimum Position Limit                    RW  0  63 1  Shutdown   shutdown                             Shutdown Error Information                RW  52     Control Table of RAM Area   controltableoframarea   Address       Size Byte        Data Name       Description       Access       Initial Value                          64 1  Torque Enable   torqueenable                 Motor Torque On Off                         RW  0  65 1  LED   led                                     Status LED On Off                           RW  0  68 1  Status Return Level   statusreturnlevel     Select Types of Status Return               RW  2  69 1  Registered Instruction   registeredinstruction  Check Reception of Instruction           R   0  70 1  Hardware Error Status   hardwareerrorstatus    Hardware Error Status                    R   0  76 2  Velocity I Gain   velocityigain             I Gain of Velocity                          RW  1920  78 2  Velocity P Gain   velocitypgain             P Gain of Velocity                          RW  100  80 2  Position D Gain   positiondgain             D Gain of Position                          RW  0  82 2  Position I Gain   positionigain             I Gain of Position                          RW  0  84 2  Position P Gain   positionpgain             P Gain of Position                          RW  800  88 2  Feedforward 2nd Gain   feedforward2ndgain   2nd Gain of FeedForward                    RW  0  90 2  Feedforward 1st Gain   feedforward1stgain   1st Gain of FeedForward                    RW  0  98 1  Bus Watchdog   buswatchdog                   DYNAMIXEL Bus Watchdog                      RW  0  100 2  Goal PWM   goalpwm                          Target PWM Value                            RW    102 2  Goal Current   goalcurrent                  Target Current Value                        RW    104 4  Goal Velocity   goalvelocity                Target Velocity Value                       RW    108 4  Profile Acceleration   profileacceleration  Acceleration Value of Profile               RW  0  112 4  Profile Velocity   profilevelocity          Velocity Value of Profile                   RW  0  116 4  Goal Position   goalposition                Target Position Value                       RW    120 2  Realtime Tick   realtimetick                Count Time in millisecond                   R     122 1  Moving   moving                              Movement Status                             R   0  123 1  Moving Status   movingstatus                Detailed Information of Movement Status     R   0  124 2  Present PWM   presentpwm                    Current PWM Value                           R     126 2  Present Current   presentcurrent            Current Current Value                       R     128 4  Present Velocity   presentvelocity          Current Velocity Value                      R     132 4  Present Position   presentposition          Current Position Value                      R     136 4  Velocity Trajectory   velocitytrajectory    Target Velocity Trajectory Generated by Profile R   140 4  Position Trajectory   positiontrajectory    Target Position Trajectory Generated by Profile R   144 2  Present Input Voltage   presentinputvoltage  Current Input Voltage                     R     146 1  Present Temperature   presenttemperature      Current Internal Temperature              R     168 2  Indirect Address 1   indirectaddress        Indirect Address 1                          RW  224  170 2  Indirect Address 2   indirectaddress        Indirect Address 2                          RW  225  172 2  Indirect Address 3   indirectaddress        Indirect Address 3                          RW  226      … …                         … … …  218 2  Indirect Address 26   indirectaddress       Indirect Address 26                         RW  249  220 2  Indirect Address 27   indirectaddress       Indirect Address 27                         RW  250  222 2  Indirect Address 28   indirectaddress       Indirect Address 28                         RW  251  224 1  Indirect Data 1   indirectdata              Indirect Data 1                             RW  0  225 1  Indirect Data 2   indirectdata              Indirect Data 2                             RW  0  226 1  Indirect Data 3   indirectdata              Indirect Data 3                             RW  0      … …                         … … …  249 1  Indirect Data 26   indirectdata             Indirect Data 26                            RW  0  250 1  Indirect Data 27   indirectdata             Indirect Data 27                            RW  0  251 1  Indirect Data 28   indirectdata             Indirect Data 28                            RW  0  578 2  Indirect Address 29   indirectaddress       Indirect Address 29                         RW  634  580 2  Indirect Address 30   indirectaddress       Indirect Address 30                         RW  635  582 2  Indirect Address 31   indirectaddress       Indirect Address 31                         RW  636  … … … … … …  628 2  Indirect Address 54   indirectaddress       Indirect Address 54                         RW  659  630 2  Indirect Address 55   indirectaddress       Indirect Address 55                         RW  660  632 2  Indirect Address 56   indirectaddress       Indirect Address 56                         RW  661  634 1  Indirect Data 29   indirectdata             Indirect Data 29                            RW  0  635 1  Indirect Data 30   indirectdata             Indirect Data 30                            RW  0  636 1  Indirect Data 31   indirectdata             Indirect Data 31                            RW  0  … … … … … …  659 1  Indirect Data 54   indirectdata             Indirect Data 54                            RW  0  660 1  Indirect Data 55   indirectdata             Indirect Data 55                            RW  0  661 1  Indirect Data 56   indirectdata             Indirect Data 56                            RW  0  Caution  Protocol 1 0 does not support addresses greater than 256  Therefore  Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0   noticewarning    Control Table Description   controltabledescription  Caution  Data in the EEPROM Area can only be written when the value of Torque Enable 64  is cleared to ‘0’   noticewarning       Model Number 0    modelnumber0    This address stores model number of the DYNAMIXEL        Firmware Version 6    firmwareversion6    This address stores firmware version of the DYNAMIXEL        ID 7    id7   % include en dxl control_table_id md %       Baud Rate 8    baudrate8   % include en dxl control_table_baudrate_2 md %       Return Delay Time 9    returndelaytime9   % include en dxl control_table_return_delay_time md %       Drive Mode 10    drivemode10   % include en dxl control_table_drivemode md %       Operating Mode 11    operatingmode11   % include en dxl control_table_opmode_six_2 md %       Secondary Shadow  ID 12    secondaryshadowid12   % include en dxl control_table_shadowid md %       Protocol Version 13    protocolversion13   % include en dxl control_table_protocolversion md %       Homing Offset 20    homingoffset20   % include en dxl control_table_homingoffset md %       Moving Threshold 24    movingthreshold24   % include en dxl control_table_movingthreshold md %       Temperature Limit 31    temperaturelimit31   % include en dxl control_table_temp_limit_2 md %       Min Max Voltage Limit 32  34    minmaxvoltagelimit3234   % include en dxl control_table_volt_limit_24v md %       PWM Limit 36    pwmlimit36   % include en dxl control_table_pwm_limit md %       Current Limit 38    currentlimit38   % include en dxl control_table_current_limit md %  Unit   Value Range              about  1 34 mA  0   689  Note  Current Limit 38  could be differ by each DYNAMIXEL so please check the Control Table   notice       Acceleration Limit 40    accelerationlimit40   % include en dxl control_table_acclimit md %       Velocity Limit 44    velocitylimit44   % include en dxl control_table_vellimit md %       Min Max Position Limit 48  52    minmaxpositionlimit4852   % include en dxl control_table_positionlimit md %       Shutdown 63    shutdown63   % include en dxl control_table_shutdown md %       Torque Enable 64    torqueenable64   % include en dxl control_table_torque_enable_2 md %       LED 65    led65   % include en dxl control_table_led md %       Status Return Level 68    statusreturnlevel68   % include en dxl control_table_status_return_lv md %       Registered Instruction 69    registeredinstruction69   % include en dxl control_table_reg_instruction md %       Hardware Error Status 70    hardwareerrorstatus70   This value indicates hardware error status % include en dxl control_table_shutdown md %       Velocity PI Gain 76  78    velocitypigain7678   % include en dxl control_table_velocity_pi_gain md %       Position PID Gain 80  82  84    positionpidgain808284        Feedforward 1st 2nd Gains 88  90    feedforward1st2ndgains8890   % include en dxl control_table_position_pid_gain md %% include en dxl control_table_current_position_pid_gain md %       Bus Watchdog 98    buswatchdog98   % include en dxl control_table_buswatchdog md %       Goal PWM 100    goalpwm100   % include en dxl control_table_goal_pwm md %      Goal Current 102   % include en dxl control_table_goal_current md %  Unit   Value Range              about  1 34 mA  Current Limit 38    Current Limit 38   Note  Applying high current to the motor for long period of time might damage the motor   notice       Goal Velocity 104    goalvelocity104   % include en dxl control_table_goal_velocity md %       Profile Acceleration 108    profileacceleration108   % include en dxl control_table_profile_acceleration md %       Profile Velocity 112    profilevelocity112   % include en dxl control_table_profile_velocity md %       Goal Position 116    goalposition116   % include en dxl control_table_goal_position_2 md %       Realtime Tick 120    realtimetick120   % include en dxl control_table_realtime_tick md %       Moving 122    moving122   % include en dxl control_table_moving_2 md %       Moving Status 123    movingstatus123   % include en dxl control_table_moving_status md %       Present PWM 124    presentpwm124   This value indicates current PWM  For more details  please refer to the  Goal PWM 100    goalpwm         Present Current 126    presentcurrent126   This value indicates current Current  For more details  please refer to the  Goal Current 102    goalcurrent         Present Velocity 128    presentvelocity128   This value indicates current Velocity  For more details  please refer to the Goal Velocity 104    goalvelocity         Present Position 132    presentposition132   % include en dxl control_table_present_position md %       Velocity Trajectory 136    velocitytrajectory136   % include en dxl control_table_velocity_trajectory md %       Position Trajectory 140    positiontrajectory140   % include en dxl control_table_position_trajectory md %       Present Input Voltage 144    presentinputvoltage144   % include en dxl control_table_present_volt_2 md %       Present Temperature 146    presenttemperature146   % include en dxl control_table_present_temp_2 md %       Indirect Address   indirectaddress        Indirect Data   indirectdata   % include en dxl control_table_indirect_data md %   How to Assemble   howtoassemble     Wiring through Back Case   wiringthroughbackcase      assets images dxl x wiring_through_back_case jpg     Option Frame Assembly   optionframeassembly      assets images dxl x x430_option_frame jpg    Maintenance   maintenance % include en dxl horn_bearing_replacement md %   Reference   reference  Note   Compatibility Guide   notice    Quick Start   quickstart % include en dxl quick_start md %    Drawings   drawings  Download   X_430_std_ref pdf  X_430_std_ref pdf  http  support robotis com en baggage_files dynamixel x430_std_ref pdf Compatibility Guide  http  en robotis com BlueAD board php bbs_id faq mode view bbs_no 47 page 1 key  keyword  sort  scate ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/x/xh430-v350/"
      } ,
  
  
      "docs-en-dxl-x-xh430-w210":  {
      "title": "XH430-W210",
      "content"	 : "  XH430W210     assets images dxl x x_series_product png    Specifications   specifications   Item             Specifications               MCU         ST CORTEXM3  STM32F103C8 @ 72Mhz  32Bit           Position Sensor         Contactless absolute encoder  12Bit  360 deg Maker  ams www ams com   Part No  AS5045   Motor         Maxon          Baud Rate         9600 bps   4 5 Mbps          Control Algorithm   PID control        Degree of Precision   0 088 deg     Operating Modes   Current Control Mode  Velocity Control Mode  Position Control Mode  0 deg   360 deg   Extended Position Control Mode  Currentbased Position Control Mode  PWM Control Mode  Voltage Control Mode     Weight   82g    Dimensions  W x H x D    28 5mm x 46 5mm x 34mm    Gear Ratio   212 6  1     Stall Torque   2 2N m @ 11 1V  1 2A2 5Nm @ 12 0V  1 3A3 1Nm @ 14 8V  1 5A    No Load Speed   46rpm @ 11 1V50rpm @ 12 0V62rpm @ 14 8V    Operating Temperature   5 degC    80 degC    Input Voltage   10 0   14 8V    Recommended  12 0V       Standby Current   40mA    Command Signal   Digital Packet    Protocol Type   XH430W210T Half Duplex Asynchronous Serial CommunicationXH430W210R RS485 Asynchronous Serial Communication 8bit  1stop  No Parity     Physical Connection   XH430W210T TTL Level Multidrop BUS XH430W210R RS485 Multidrop BUS    ID   0   252    Feedback   Position  Velocity  Current  Realtime tick  Trajectory  Temperature  Input Voltage  etc    Part Material   Full Metal GearMetal Front  Middle   Engineering Plastic Back       Performance Graph   performancegraph      assets images dxl x xh430_w210_performance_graph jpg % include en dxl note_performance_graph md %% include en dxl control_table_protocol2 md %    Control Table of EEPROM Area   controltableofeepromarea   Address       Size Byte        Data Name       Description       Access       Initial Value                          0 2  Model Number   modelnumber                      Model Number                              R   1010  2 4  Model Information   modelinformation            Model Information                         R     6 1  Firmware Version   firmwareversion              Firmware Version                          R     7 1  ID   id                                          DYNAMIXEL ID                              RW  1  8 1  Baud Rate   baudrate                            Communication Speed                       RW  1  9 1  Return Delay Time   returndelaytime            Response Delay Time                       RW  250  10 1  Drive Mode   drivemode                         Default Rotation Direction                RW  0  11 1  Operating Mode   operatingmode                 Operating Mode                            RW  3  12 1  Secondary Shadow  ID   secondaryshadowid      Secondary Shadow  ID                      RW  255  13 1  Protocol Version   protocolversion             Protocol Version                          RW  2  20 4  Homing Offset   homingoffset                   Home Position Offset                      RW  0  24 4  Moving Threshold   movingthreshold             Velocity Threshold for Movement Detection RW  10  31 1  Temperature Limit   temperaturelimit           Maximum Internal Temperature Limit        RW  80  32 2  Max Voltage Limit   maxvoltagelimit           Maximum Input Voltage Limit               RW  160  34 2  Min Voltage Limit   minvoltagelimit           Minimum Input Voltage Limit               RW  95  36 2  PWM Limit   pwmlimit                           Maximum PWM Limit                         RW  885  38 2  Current Limit   currentlimit                   Maximum Current Limit                     RW  648  40 4  Acceleration Limit   accelerationlimit         Maximum Accleration Limit                 RW  32767  44 4  Velocity Limit   velocitylimit                 Maximum Velocity Limit                    RW  360  48 4  Max Position Limit   maxpositionlimit         Maximum Position Limit                    RW  4095  52 4  Min Position Limit   minpositionlimit         Minimum Position Limit                    RW  0  63 1  Shutdown   shutdown                             Shutdown Error Information                RW  52     Control Table of RAM Area   controltableoframarea   Address       Size Byte        Data Name       Description       Access       Initial Value                          64 1  Torque Enable   torqueenable                 Motor Torque On Off                         RW  0  65 1  LED   led                                     Status LED On Off                           RW  0  68 1  Status Return Level   statusreturnlevel     Select Types of Status Return               RW  2  69 1  Registered Instruction   registeredinstruction  Check Reception of Instruction           R   0  70 1  Hardware Error Status   hardwareerrorstatus    Hardware Error Status                    R   0  76 2  Velocity I Gain   velocityigain             I Gain of Velocity                          RW  1920  78 2  Velocity P Gain   velocitypgain             P Gain of Velocity                          RW  100  80 2  Position D Gain   positiondgain             D Gain of Position                          RW  0  82 2  Position I Gain   positionigain             I Gain of Position                          RW  0  84 2  Position P Gain   positionpgain             P Gain of Position                          RW  900  88 2  Feedforward 2nd Gain   feedforward2ndgain   2nd Gain of FeedForward                    RW  0  90 2  Feedforward 1st Gain   feedforward1stgain   1st Gain of FeedForward                    RW  0  98 1  Bus Watchdog   buswatchdog                   DYNAMIXEL Bus Watchdog                      RW  0  100 2  Goal PWM   goalpwm                          Target PWM Value                            RW    102 2  Goal Current   goalcurrent                  Target Current Value                        RW    104 4  Goal Velocity   goalvelocity                Target Velocity Value                       RW    108 4  Profile Acceleration   profileacceleration  Acceleration Value of Profile               RW  0  112 4  Profile Velocity   profilevelocity          Velocity Value of Profile                   RW  0  116 4  Goal Position   goalposition                Target Position Value                       RW    120 2  Realtime Tick   realtimetick                Count Time in millisecond                   R     122 1  Moving   moving                              Movement Status                             R   0  123 1  Moving Status   movingstatus                Detailed Information of Movement Status     R   0  124 2  Present PWM   presentpwm                    Current PWM Value                           R     126 2  Present Current   presentcurrent            Current Current Value                       R     128 4  Present Velocity   presentvelocity          Current Velocity Value                      R     132 4  Present Position   presentposition          Current Position Value                      R     136 4  Velocity Trajectory   velocitytrajectory    Target Velocity Trajectory Generated by Profile R   140 4  Position Trajectory   positiontrajectory    Target Position Trajectory Generated by Profile R   144 2  Present Input Voltage   presentinputvoltage  Current Input Voltage                     R     146 1  Present Temperature   presenttemperature      Current Internal Temperature              R     168 2  Indirect Address 1   indirectaddress        Indirect Address 1                          RW  224  170 2  Indirect Address 2   indirectaddress        Indirect Address 2                          RW  225  172 2  Indirect Address 3   indirectaddress        Indirect Address 3                          RW  226      … …                         … … …  218 2  Indirect Address 26   indirectaddress       Indirect Address 26                         RW  249  220 2  Indirect Address 27   indirectaddress       Indirect Address 27                         RW  250  222 2  Indirect Address 28   indirectaddress       Indirect Address 28                         RW  251  224 1  Indirect Data 1   indirectdata              Indirect Data 1                             RW  0  225 1  Indirect Data 2   indirectdata              Indirect Data 2                             RW  0  226 1  Indirect Data 3   indirectdata              Indirect Data 3                             RW  0      … …                         … … …  249 1  Indirect Data 26   indirectdata             Indirect Data 26                            RW  0  250 1  Indirect Data 27   indirectdata             Indirect Data 27                            RW  0  251 1  Indirect Data 28   indirectdata             Indirect Data 28                            RW  0  578 2  Indirect Address 29   indirectaddress       Indirect Address 29                         RW  634  580 2  Indirect Address 30   indirectaddress       Indirect Address 30                         RW  635  582 2  Indirect Address 31   indirectaddress       Indirect Address 31                         RW  636  … … … … … …  628 2  Indirect Address 54   indirectaddress       Indirect Address 54                         RW  659  630 2  Indirect Address 55   indirectaddress       Indirect Address 55                         RW  660  632 2  Indirect Address 56   indirectaddress       Indirect Address 56                         RW  661  634 1  Indirect Data 29   indirectdata             Indirect Data 29                            RW  0  635 1  Indirect Data 30   indirectdata             Indirect Data 30                            RW  0  636 1  Indirect Data 31   indirectdata             Indirect Data 31                            RW  0  … … … … … …  659 1  Indirect Data 54   indirectdata             Indirect Data 54                            RW  0  660 1  Indirect Data 55   indirectdata             Indirect Data 55                            RW  0  661 1  Indirect Data 56   indirectdata             Indirect Data 56                            RW  0  Caution  Protocol 1 0 does not support addresses greater than 256  Therefore  Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0   noticewarning    Control Table Description   controltabledescription  Caution  Data in the EEPROM Area can only be written when the value of Torque Enable 64  is cleared to ‘0’   noticewarning       Model Number 0    modelnumber0    This address stores model number of the DYNAMIXEL        Firmware Version 6    firmwareversion6    This address stores firmware version of the DYNAMIXEL        ID 7    id7   % include en dxl control_table_id md %       Baud Rate 8    baudrate8   % include en dxl control_table_baudrate_2 md %       Return Delay Time 9    returndelaytime9   % include en dxl control_table_return_delay_time md %       Drive Mode 10    drivemode10   % include en dxl control_table_drivemode md %       Operating Mode 11    operatingmode11   % include en dxl control_table_opmode_six_2 md %       Secondary Shadow  ID 12    secondaryshadowid12   % include en dxl control_table_shadowid md %       Protocol Version 13    protocolversion13   % include en dxl control_table_protocolversion md %       Homing Offset 20    homingoffset20   % include en dxl control_table_homingoffset md %       Moving Threshold 24    movingthreshold24   % include en dxl control_table_movingthreshold md %       Temperature Limit 31    temperaturelimit31   % include en dxl control_table_temp_limit_2 md %       Min Max Voltage Limit 32  34    minmaxvoltagelimit3234   % include en dxl control_table_volt_limit_2 md %       PWM Limit 36    pwmlimit36   % include en dxl control_table_pwm_limit md %       Current Limit 38    currentlimit38   % include en dxl control_table_current_limit md %  Unit   Value Range              about  2 69 mA  0   648  Note  Current Limit 38  could be differ by each DYNAMIXEL so please check the Control Table   notice       Acceleration Limit 40    accelerationlimit40   % include en dxl control_table_acclimit md %       Velocity Limit 44    velocitylimit44   % include en dxl control_table_vellimit md %       Min Max Position Limit 48  52    minmaxpositionlimit4852   % include en dxl control_table_positionlimit md %       Shutdown 63    shutdown63   % include en dxl control_table_shutdown md %       Torque Enable 64    torqueenable64   % include en dxl control_table_torque_enable_2 md %       LED 65    led65   % include en dxl control_table_led md %       Status Return Level 68    statusreturnlevel68   % include en dxl control_table_status_return_lv md %       Registered Instruction 69    registeredinstruction69   % include en dxl control_table_reg_instruction md %       Hardware Error Status 70    hardwareerrorstatus70   This value indicates hardware error status % include en dxl control_table_shutdown md %       Velocity PI Gain 76  78    velocitypigain7678   % include en dxl control_table_velocity_pi_gain md %       Position PID Gain 80  82  84    positionpidgain808284        Feedforward 1st 2nd Gains 88  90    feedforward1st2ndgains8890   % include en dxl control_table_position_pid_gain md %% include en dxl control_table_current_position_pid_gain md %       Bus Watchdog 98    buswatchdog98   % include en dxl control_table_buswatchdog md %       Goal PWM 100    goalpwm100   % include en dxl control_table_goal_pwm md %      Goal Current 102   % include en dxl control_table_goal_current md %  Unit   Value Range              about  2 69 mA  Current Limit 38    Current Limit 38   Note  Applying high current to the motor for long period of time might damage the motor   notice       Goal Velocity 104    goalvelocity104   % include en dxl control_table_goal_velocity md %       Profile Acceleration 108    profileacceleration108   % include en dxl control_table_profile_acceleration md %       Profile Velocity 112    profilevelocity112   % include en dxl control_table_profile_velocity md %       Goal Position 116    goalposition116   % include en dxl control_table_goal_position_2 md %       Realtime Tick 120    realtimetick120   % include en dxl control_table_realtime_tick md %       Moving 122    moving122   % include en dxl control_table_moving_2 md %       Moving Status 123    movingstatus123   % include en dxl control_table_moving_status md %       Present PWM 124    presentpwm124   This value indicates current PWM  For more details  please refer to the  Goal PWM 100    goalpwm         Present Current 126    presentcurrent126   This value indicates current Current  For more details  please refer to the  Goal Current 102    goalcurrent         Present Velocity 128    presentvelocity128   This value indicates current Velocity  For more details  please refer to the Goal Velocity 104    goalvelocity         Present Position 132    presentposition132   % include en dxl control_table_present_position md %       Velocity Trajectory 136    velocitytrajectory136   % include en dxl control_table_velocity_trajectory md %       Position Trajectory 140    positiontrajectory140   % include en dxl control_table_position_trajectory md %       Present Input Voltage 144    presentinputvoltage144   % include en dxl control_table_present_volt_2 md %       Present Temperature 146    presenttemperature146   % include en dxl control_table_present_temp_2 md %       Indirect Address   indirectaddress        Indirect Data   indirectdata   % include en dxl control_table_indirect_data md %   How to Assemble   howtoassemble     Wiring through Back Case   wiringthroughbackcase      assets images dxl x wiring_through_back_case jpg     Option Frame Assembly   optionframeassembly      assets images dxl x x430_option_frame jpg    Maintenance   maintenance % include en dxl horn_bearing_replacement md %   Reference   reference  Note   Compatibility Guide   notice    Quick Start   quickstart % include en dxl quick_start md %    Drawings   drawings  Download   X_430_std_ref pdf  X_430_std_ref pdf  http  support robotis com en baggage_files dynamixel x430_std_ref pdf Compatibility Guide  http  en robotis com BlueAD board php bbs_id faq mode view bbs_no 47 page 1 key  keyword  sort  scate ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/x/xh430-w210/"
      } ,
  
  
      "docs-en-dxl-x-xh430-w350":  {
      "title": "XH430-W350",
      "content"	 : "  XH430W350     assets images dxl x x_series_product png    Specifications   specifications   Item             Specifications               MCU         ST CORTEXM3  STM32F103C8 @ 72Mhz  32Bit           Position Sensor         Contactless absolute encoder  12Bit  360 deg Maker  ams www ams com   Part No  AS5045   Motor         Maxon          Baud Rate         9600 bps   4 5 Mbps          Control Algorithm   PID control        Degree of Precision   0 088 deg     Operating Modes   Current Control Mode  Velocity Control Mode  Position Control Mode  0 deg   360 deg   Extended Position Control Mode  Currentbased Position Control Mode  PWM Control Mode  Voltage Control Mode     Weight   82g    Dimensions  W x H x D    28 5mm x 46 5mm x 34mm    Gear Ratio   353 5  1     Stall Torque   3 1Nm @ 11 1V  1 2A3 4Nm @ 12 0V  1 3A4 2Nm @ 14 8V  1 5A    No Load Speed   27rpm @ 11 1V30rpm @ 12 0V37rpm @ 14 8V    Operating Temperature   5 degC    80 degC    Input Voltage   10 0   14 8V    Recommended  12 0V       Standby Current   40mA    Command Signal   Digital Packet    Protocol Type   XH430W350T Half Duplex Asynchronous Serial CommunicationXH430W350R RS485 Asynchronous Serial Communication 8bit  1stop  No Parity     Physical Connection   XH430W350T TTL Level Multidrop BUS XH430W350R RS485 Multidrop BUS    ID   0   252    Feedback   Position  Velocity  Current  Realtime tick  Trajectory  Temperature  Input Voltage  etc    Part Material   Full Metal GearMetal Front  Middle   Engineering Plastic Back       Performance Graph   performancegraph      assets images dxl x xh430_w350_performance_graph jpg % include en dxl note_performance_graph md %% include en dxl control_table_protocol2 md %    Control Table of EEPROM Area   controltableofeepromarea   Address       Size Byte        Data Name       Description       Access       Initial Value                          0 2  Model Number   modelnumber                      Model Number                              R   1000  2 4  Model Information   modelinformation            Model Information                         R     6 1  Firmware Version   firmwareversion              Firmware Version                          R     7 1  ID   id                                          DYNAMIXEL ID                              RW  1  8 1  Baud Rate   baudrate                            Communication Speed                       RW  1  9 1  Return Delay Time   returndelaytime            Response Delay Time                       RW  250  10 1  Drive Mode   drivemode                         Default Rotation Direction                RW  0  11 1  Operating Mode   operatingmode                 Operating Mode                            RW  3  12 1  Secondary Shadow  ID   secondaryshadowid      Secondary Shadow  ID                      RW  255  13 1  Protocol Version   protocolversion             Protocol Version                          RW  2  20 4  Homing Offset   homingoffset                   Home Position Offset                      RW  0  24 4  Moving Threshold   movingthreshold             Velocity Threshold for Movement Detection RW  10  31 1  Temperature Limit   temperaturelimit           Maximum Internal Temperature Limit        RW  80  32 2  Max Voltage Limit   maxvoltagelimit           Maximum Input Voltage Limit               RW  160  34 2  Min Voltage Limit   minvoltagelimit           Minimum Input Voltage Limit               RW  95  36 2  PWM Limit   pwmlimit                           Maximum PWM Limit                         RW  885  38 2  Current Limit   currentlimit                   Maximum Current Limit                     RW  648  40 4  Acceleration Limit   accelerationlimit         Maximum Accleration Limit                 RW  32767  44 4  Velocity Limit   velocitylimit                 Maximum Velocity Limit                    RW  280  48 4  Max Position Limit   maxpositionlimit         Maximum Position Limit                    RW  4095  52 4  Min Position Limit   minpositionlimit         Minimum Position Limit                    RW  0  63 1  Shutdown   shutdown                             Shutdown Error Information                RW  52     Control Table of RAM Area   controltableoframarea   Address       Size Byte        Data Name       Description       Access       Initial Value                          64 1  Torque Enable   torqueenable                 Motor Torque On Off                         RW  0  65 1  LED   led                                     Status LED On Off                           RW  0  68 1  Status Return Level   statusreturnlevel     Select Types of Status Return               RW  2  69 1  Registered Instruction   registeredinstruction  Check Reception of Instruction           R   0  70 1  Hardware Error Status   hardwareerrorstatus    Hardware Error Status                    R   0  76 2  Velocity I Gain   velocityigain             I Gain of Velocity                          RW  1920  78 2  Velocity P Gain   velocitypgain             P Gain of Velocity                          RW  100  80 2  Position D Gain   positiondgain             D Gain of Position                          RW  0  82 2  Position I Gain   positionigain             I Gain of Position                          RW  0  84 2  Position P Gain   positionpgain             P Gain of Position                          RW  900  88 2  Feedforward 2nd Gain   feedforward2ndgain   2nd Gain of FeedForward                    RW  0  90 2  Feedforward 1st Gain   feedforward1stgain   1st Gain of FeedForward                    RW  0  98 1  Bus Watchdog   buswatchdog                   DYNAMIXEL Bus Watchdog                      RW  0  100 2  Goal PWM   goalpwm                          Target PWM Value                            RW    102 2  Goal Current   goalcurrent                  Target Current Value                        RW    104 4  Goal Velocity   goalvelocity                Target Velocity Value                       RW    108 4  Profile Acceleration   profileacceleration  Acceleration Value of Profile               RW  0  112 4  Profile Velocity   profilevelocity          Velocity Value of Profile                   RW  0  116 4  Goal Position   goalposition                Target Position Value                       RW    120 2  Realtime Tick   realtimetick                Count Time in millisecond                   R     122 1  Moving   moving                              Movement Status                             R   0  123 1  Moving Status   movingstatus                Detailed Information of Movement Status     R   0  124 2  Present PWM   presentpwm                    Current PWM Value                           R     126 2  Present Current   presentcurrent            Current Current Value                       R     128 4  Present Velocity   presentvelocity          Current Velocity Value                      R     132 4  Present Position   presentposition          Current Position Value                      R     136 4  Velocity Trajectory   velocitytrajectory    Target Velocity Trajectory Generated by Profile R   140 4  Position Trajectory   positiontrajectory    Target Position Trajectory Generated by Profile R   144 2  Present Input Voltage   presentinputvoltage  Current Input Voltage                     R     146 1  Present Temperature   presenttemperature      Current Internal Temperature              R     168 2  Indirect Address 1   indirectaddress        Indirect Address 1                          RW  224  170 2  Indirect Address 2   indirectaddress        Indirect Address 2                          RW  225  172 2  Indirect Address 3   indirectaddress        Indirect Address 3                          RW  226      … …                         … … …  218 2  Indirect Address 26   indirectaddress       Indirect Address 26                         RW  249  220 2  Indirect Address 27   indirectaddress       Indirect Address 27                         RW  250  222 2  Indirect Address 28   indirectaddress       Indirect Address 28                         RW  251  224 1  Indirect Data 1   indirectdata              Indirect Data 1                             RW  0  225 1  Indirect Data 2   indirectdata              Indirect Data 2                             RW  0  226 1  Indirect Data 3   indirectdata              Indirect Data 3                             RW  0      … …                         … … …  249 1  Indirect Data 26   indirectdata             Indirect Data 26                            RW  0  250 1  Indirect Data 27   indirectdata             Indirect Data 27                            RW  0  251 1  Indirect Data 28   indirectdata             Indirect Data 28                            RW  0  578 2  Indirect Address 29   indirectaddress       Indirect Address 29                         RW  634  580 2  Indirect Address 30   indirectaddress       Indirect Address 30                         RW  635  582 2  Indirect Address 31   indirectaddress       Indirect Address 31                         RW  636  … … … … … …  628 2  Indirect Address 54   indirectaddress       Indirect Address 54                         RW  659  630 2  Indirect Address 55   indirectaddress       Indirect Address 55                         RW  660  632 2  Indirect Address 56   indirectaddress       Indirect Address 56                         RW  661  634 1  Indirect Data 29   indirectdata             Indirect Data 29                            RW  0  635 1  Indirect Data 30   indirectdata             Indirect Data 30                            RW  0  636 1  Indirect Data 31   indirectdata             Indirect Data 31                            RW  0  … … … … … …  659 1  Indirect Data 54   indirectdata             Indirect Data 54                            RW  0  660 1  Indirect Data 55   indirectdata             Indirect Data 55                            RW  0  661 1  Indirect Data 56   indirectdata             Indirect Data 56                            RW  0  Caution  Protocol 1 0 does not support addresses greater than 256  Therefore  Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0   noticewarning    Control Table Description   controltabledescription  Caution  Data in the EEPROM Area can only be written when the value of Torque Enable 64  is cleared to ‘0’   noticewarning       Model Number 0    modelnumber0    This address stores model number of the DYNAMIXEL        Firmware Version 6    firmwareversion6    This address stores firmware version of the DYNAMIXEL        ID 7    id7   % include en dxl control_table_id md %       Baud Rate 8    baudrate8   % include en dxl control_table_baudrate_2 md %       Return Delay Time 9    returndelaytime9   % include en dxl control_table_return_delay_time md %       Drive Mode 10    drivemode10   % include en dxl control_table_drivemode md %       Operating Mode 11    operatingmode11   % include en dxl control_table_opmode_six_2 md %       Secondary Shadow  ID 12    secondaryshadowid12   % include en dxl control_table_shadowid md %       Protocol Version 13    protocolversion13   % include en dxl control_table_protocolversion md %       Homing Offset 20    homingoffset20   % include en dxl control_table_homingoffset md %       Moving Threshold 24    movingthreshold24   % include en dxl control_table_movingthreshold md %       Temperature Limit 31    temperaturelimit31   % include en dxl control_table_temp_limit_2 md %       Min Max Voltage Limit 32  34    minmaxvoltagelimit3234   % include en dxl control_table_volt_limit_2 md %       PWM Limit 36    pwmlimit36   % include en dxl control_table_pwm_limit md %       Current Limit 38    currentlimit38   % include en dxl control_table_current_limit md %  Unit   Value Range              about  2 69 mA  0   648  Note  Current Limit 38  could be differ by each DYNAMIXEL so please check the Control Table   notice       Acceleration Limit 40    accelerationlimit40   % include en dxl control_table_acclimit md %       Velocity Limit 44    velocitylimit44   % include en dxl control_table_vellimit md %       Min Max Position Limit 48  52    minmaxpositionlimit4852   % include en dxl control_table_positionlimit md %       Shutdown 63    shutdown63   % include en dxl control_table_shutdown md %       Torque Enable 64    torqueenable64   % include en dxl control_table_torque_enable_2 md %       LED 65    led65   % include en dxl control_table_led md %       Status Return Level 68    statusreturnlevel68   % include en dxl control_table_status_return_lv md %       Registered Instruction 69    registeredinstruction69   % include en dxl control_table_reg_instruction md %       Hardware Error Status 70    hardwareerrorstatus70   This value indicates hardware error status % include en dxl control_table_shutdown md %       Velocity PI Gain 76  78    velocitypigain7678   % include en dxl control_table_velocity_pi_gain md %       Position PID Gain 80  82  84    positionpidgain808284        Feedforward 1st 2nd Gains 88  90    feedforward1st2ndgains8890   % include en dxl control_table_position_pid_gain md %% include en dxl control_table_current_position_pid_gain md %       Bus Watchdog 98    buswatchdog98   % include en dxl control_table_buswatchdog md %       Goal PWM 100    goalpwm100   % include en dxl control_table_goal_pwm md %      Goal Current 102   % include en dxl control_table_goal_current md %  Unit   Value Range              about  2 69 mA  Current Limit 38    Current Limit 38   Note  Applying high current to the motor for long period of time might damage the motor   notice       Goal Velocity 104    goalvelocity104   % include en dxl control_table_goal_velocity md %       Profile Acceleration 108    profileacceleration108   % include en dxl control_table_profile_acceleration md %       Profile Velocity 112    profilevelocity112   % include en dxl control_table_profile_velocity md %       Goal Position 116    goalposition116   % include en dxl control_table_goal_position_2 md %       Realtime Tick 120    realtimetick120   % include en dxl control_table_realtime_tick md %       Moving 122    moving122   % include en dxl control_table_moving_2 md %       Moving Status 123    movingstatus123   % include en dxl control_table_moving_status md %       Present PWM 124    presentpwm124   This value indicates current PWM  For more details  please refer to the  Goal PWM 100    goalpwm         Present Current 126    presentcurrent126   This value indicates current Current  For more details  please refer to the  Goal Current 102    goalcurrent         Present Velocity 128    presentvelocity128   This value indicates current Velocity  For more details  please refer to the Goal Velocity 104    goalvelocity         Present Position 132    presentposition132   % include en dxl control_table_present_position md %       Velocity Trajectory 136    velocitytrajectory136   % include en dxl control_table_velocity_trajectory md %       Position Trajectory 140    positiontrajectory140   % include en dxl control_table_position_trajectory md %       Present Input Voltage 144    presentinputvoltage144   % include en dxl control_table_present_volt_2 md %       Present Temperature 146    presenttemperature146   % include en dxl control_table_present_temp_2 md %       Indirect Address   indirectaddress        Indirect Data   indirectdata   % include en dxl control_table_indirect_data md %   How to Assemble   howtoassemble     Wiring through Back Case   wiringthroughbackcase      assets images dxl x wiring_through_back_case jpg     Option Frame Assembly   optionframeassembly      assets images dxl x x430_option_frame jpg    Maintenance   maintenance % include en dxl horn_bearing_replacement md %   Reference   reference  Note   Compatibility Guide   notice    Quick Start   quickstart % include en dxl quick_start md %    Drawings   drawings  Download   X_430_std_ref pdf  X_430_std_ref pdf  http  support robotis com en baggage_files dynamixel x430_std_ref pdf Compatibility Guide  http  en robotis com BlueAD board php bbs_id faq mode view bbs_no 47 page 1 key  keyword  sort  scate ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/x/xh430-w350/"
      } ,
  
  
      "docs-en-dxl-x-xl320":  {
      "title": "XL320",
      "content"	 : "  XL320     assets images dxl x xl320_product jpg  Caution  XL320 is a different product from the OLLO Geared and Servo Motor   noticewarning   Specifications   specifications   Item             Specifications               Baud Rate         7343 bps   1 Mbps          Resolution   0 29 deg     Running Degree   0 deg   360 degEndless Turn    Weight   16 7g    Dimensions  W x H x D    24mm x 36mm x 27mm    Gear Ratio   238  1     Stall Torque   0 39Nm @ 7 4V  1 1A    No Load Speed   114rpm @ 7 4V  0 18A    Operating Temperature   5 degC    70 degC    Input Voltage   6   8 4V    Recommended  7 4V       Command Signal   Digital Packet    Protocol Type   Half Duplex Asynchronous Serial Communication 8bit  1stop  No Parity     Physical Connection   TTL Level Multidrop Bus Daisy Chain Type Connector     ID   0   252    Feedback   Position  Temperature  Load  Input Voltage  etc    Material   Engineering Plastic   Note  Stall torque is the maximum instantaneous and static torque  Stable motions are possible with robots designed for loads with 1 5 or less of the stall torque   notice% include en dxl control_table_protocol1 md %    Control Table of EEPROM Area   controltableofeepromarea   Address       Size Byte        Data Name       Description       Access       Initial Value       Min   Max                            0 2  Model Number   modelnumber            Model Number         R         350     2 1  Firmware Version   firmwareversion      Firmware Version R     3 1  ID   id                    DYNAMIXEL ID       RW 1 0 252  4 1  Baud Rate   baudrate             Communication Speed RW 3 0 3  5 1  Return Delay Time   returndelaytime     Response Delay Time RW 250 0 254  6 2  CW Angle Limit   cwanglelimit            Clockwise Angle Limit RW 0 0 1023  8 2  CCW Angle Limit   ccwanglelimit            CounterClockwise Angle Limit RW 1023 0 1023  11 1  Control Mode   controlmode               Control Mode RW 2 1 2  12 1  Temperature Limit   temperaturelimit     Maximum Internal Temperature Limit RW 65 0 150  13 1  Min Voltage Limit   minvoltagelimit     Minimum Input Voltage Limit RW 60 50 250  14 1  Max Voltage Limit   maxvoltagelimit     Maximum Input Voltage Limit RW 90 50 250  15 2  Max Torque   maxtorque             Maximun Torque RW 1023 0 1023  17 1  Status Return Level   statusreturnlevel        Select Types of Status Return RW 2 0 2  18 1  Shutdown   shutdown              Shutdown Error Information RW 3 0 7     Control Table of RAM Area   controltableoframarea   Address       Size Byte        Data Name       Description       Access       Initial Value       Min   Max                            24 1  Torque Enable   torqueenable              Motor Torque On Off RW 0 0 1  25 1  LED   led                               Status LED On Off RW 0 0 7  27 1  D Gain   dgain     Derivative Gain RW 0 0 254  28 1  I Gain   igain     Integral Gain RW 0 0 254  29 1  P Gain   pgain     Proportional Gain RW 32 0 254  30 2  Goal Position   goalposition                   Target Position RW  0 1023  32 2  Moving Speed   movingspeed               Moving Speed Moving Velocity  RW  0 2047  35 2  Torque Limit   torquelimit              Torque Limit Goal Torque  RW  0 1023  37 2  Present Position   presentposition       Present Position R     39 2  Present Speed   presentspeed             Present Speed R     41 2  Present Load   presentload               Present Load R     45 1  Present Voltage   presentvoltage         Present Voltage R     46 1  Present Temperature   presenttemperature  Present Temperature R     47 1  Registered   registered                   If Instruction is registered R 0    49 1  Moving   moving                     Movement Status R 0    50 1  Hardware Error Stat   hardwareerrorstat  Hardware Error Status R 0    51 2  Punch   punch                     Minimum Current Threshold RW 32 0 1023     Control Table Description   controltabledescription        Model Number  0    modelnumber0    This address stores model number of the DYNAMIXEL        Firmware Version  2    firmwareversion2    This address stores firmware version of the DYNAMIXEL        ID  3    id3   % include en dxl control_table_id md %       Baud Rate  4    baudrate4   Baud Rate determines serial communication speed between a controller and DYNAMIXELs   Value       Baud Rate              0           9 600 bps        1           57 600 bps       2           115 200 bps      3           1 Mbps                 Return Delay Time  5    returndelaytime5   % include en dxl control_table_return_delay_time md %       CW CCW Angle Limit 6  8    cwccwanglelimit68   % include en dxl control_table_angle_limit md %      Control Mode 11     Value       Mode              0           Wheel Mode        1           Joint Mode            Temperature Limit 12   % include en dxl control_table_temp_limit md %      Min Max Voltage Limit 13  14   It is the operation range of voltage  Unit Value Range Description            About 0 1V 50   250 5 0   25 0V For example  if the value is 80  the voltage is 8V If  Present Voltage 45   is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and  Shutdown 18   is triggered  Present Voltage 45    presentvoltage Shutdown 18    shutdown      Max Torque 15   % include en dxl control_table_max_torque md %      Status Return Level 17   % include en dxl control_table_status_return_lv md %      Shutdown 18   Dynamixel can protect itself by detecting errors occur during the operation The errors can be set are as the table below  Bit     Item       Description                 Bit 3 7    Bit 2 ERROR_INPUT_VOLTAGE Voltage is out of operational voatage range  Bit 1 ERROR_OVER_HEATING Temperature is out of operational temperature range  Bit 0 ERROR_OVERLOAD Motor cannot output max load due to load being applied continouosly It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’  That is  if 0x05  binary 00000101  is set  both Input Voltage Error and Overload Error can be detected If errors occur  in case of Alarm LED  the LED blinks in case of Alarm Shutdown  the motor output becomes 0 % by making the value of Torque Limit 35  to 0       Torque Enable 24   % include en dxl control_table_torque_enable md %      LED 25   The combination of bit changes the output color of XL320  Bit     Output Color          0        Red     1        Green   2        Blue    0   1    Yellow  1   2    Cyan    0   2    Purple  0   1   2    White        PID Gains 27  28  29   % include en dxl control_table_mx_pid md %      Goal Position 30   % include en dxl control_table_dx_goal_position md %      Moving Speed 32    Join Mode  MultiTurn mode  It is a moving speed to Goal Position   0 1 023  0x3FF  can be used  and the unit is about 0 111rpm   If it is set to 0  it means the maximum rpm of the motor is used without controlling the speed   If it is 1 023  it is about 114rpm   For example  if it is set to 300  it is about 33 3 rpm   However  the rpm will not exceed the No Load Speed  Wheel Mode  It is a moving speed to Goal direction   0 2 047  0x7FF  can be used  and the unit is about 0 1%   If a value in the range of 0 1 023 is used  it is stopped by setting to 0 while rotating to CCW direction   If a value in the range of 1 024 2 047 is used  it is stopped by setting to 1 024 while rotating to CW direction   That is  the 10th bit becomes the direction bit to control the direction   For example  if it is set to 512  it means the output is controlled by 50% of the maximum output    Note  Wheel mode allows to check max rpm  Any values higher than max rpm will not take effect     notice      Torque Limit 35   % include en dxl control_table_torque_limit md %      Present Position 37   % include en dxl control_table_dx_present_position md % Caution  If it is set to Wheel Mode  the value cannot be used to measure the moving distance and the rotation frequency   noticewarning      Present Speed 39   Is the present moving speed 0 2 047  0x000   0x7FF  can be used If a value is in the rage of 0 1 023 then the motor rotates to the CCW direction If a value is in the rage of 1 024 2 047 then the motor rotates to the CW direction The 10th bit becomes the direction bit to control the direction 0 and 1 024 are equal The unit of this value varies depending on operation mode  Joint Mode  The unit is about 0 111rpm   For example  if it is set to 300  it means that the motor is moving to the CCW direction at a rate of about 33 3rpm  Wheel Mode  The unit is about 0 1%   For example  if it is set to 512  it means that the torque is controlled by 50% of the maximum torque to the CCW direction       Present Load 41   % include en dxl control_table_present_load md %      Present Voltage 45   It is the size of the present voltage supplied This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 If Present Voltage 45  value is out of range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Shutdown 18  is triggered by setting 1 to the Bit 0 of the address 18       Present Temperature 46   % include en dxl control_table_present_temp md %      Registered Instruction 47   % include en dxl control_table_reg_instruction md %      Moving 49   % include en dxl control_table_moving md %      Hardware Error Status 50   Present hardware error staus  Alarm shutdown error value       Punch 51   % include en dxl control_table_punch md %   Reference   reference  Note   Compatibility Guide   notice    Drawings   drawings      assets images dxl x xl320_dimension png  Compatibility Guide  http  en robotis com BlueAD board php bbs_id faq mode view bbs_no 47 page 1 key  keyword  sort  scate ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/x/xl320/"
      } ,
  
  
      "docs-en-dxl-x-xl430-w250":  {
      "title": "XL430-W250",
      "content"	 : "  XL430W250     assets images dxl x xl430_product png    Specifications   specifications   Item             Specifications               MCU         ST CORTEXM3  STM32F103C8 @ 72Mhz  32Bit           Position Sensor         Contactless absolute encoder  12Bit  360 deg Maker  ams www ams com   Part No  AS5045   Motor         Cored Motor          Baud Rate         9600 bps   4 5 Mbps          Control Algorithm   PID control        Degree of Precision   0 088 deg     Operating Modes   Velocity Control Mode  Position Control Mode  0 deg   360 deg   Extended Position Control Mode PWM Control Mode  Voltage Control Mode     Weight   57 2g    Dimensions  W x H x D    28 5mm x 46 5mm x 34mm    Gear Ratio   258 5  1     Stall Torque   1 0N m @ 9 0V  1 0A1 4Nm @ 11 1V  1 3A1 5Nm @ 12 0V  1 4A    No Load Speed   47rpm @ 9 0V57rpm @ 11 1V61rpm @ 12 0V    Operating Temperature   5 degC    72 degC    Input Voltage   6 5   12 0V    Recommended  11 1V       Standby Current   52mA    Command Signal   Digital Packet    Protocol Type   Half Duplex Asynchronous Serial Communication 8bit  1stop  No Parity     Physical Connection   TTL Level Multidrop BUS   ID   0   252    Feedback   Position  Velocity  Load  Realtime tick  Trajectory  Temperature  Input Voltage  etc    Part Material   Engineering Plastic      Performance Graph   performancegraph      assets images dxl x xl430_w250_performance_graph png % include en dxl note_performance_graph md %% include en dxl control_table_protocol2 md %    Control Table of EEPROM Area   controltableofeepromarea   Address       Size Byte        Data Name       Description       Access       Initial Value                          0 2  Model Number   modelnumber                      Model Number                              R   1060  2 4  Model Information   modelinformation            Model Information                         R     6 1  Firmware Version   firmwareversion              Firmware Version                          R     7 1  ID   id                                          DYNAMIXEL ID                              RW  1  8 1  Baud Rate   baudrate                            Communication Speed                       RW  1  9 1  Return Delay Time   returndelaytime            Response Delay Time                       RW  250  10 1  Drive Mode   drivemode                         Default Rotation Direction                RW  0  11 1  Operating Mode   operatingmode                 Operating Mode                            RW  3  12 1  Secondary Shadow  ID   secondaryshadowid      Secondary Shadow  ID                      RW  255  13 1  Protocol Version   protocolversion             Protocol Version                          RW  2  20 4  Homing Offset   homingoffset                   Home Position Offset                      RW  0  24 4  Moving Threshold   movingthreshold             Velocity Threshold for Movement Detection RW  10  31 1  Temperature Limit   temperaturelimit           Maximum Internal Temperature Limit        RW  72  32 2  Max Voltage Limit   maxvoltagelimit           Maximum Input Voltage Limit               RW  140  34 2  Min Voltage Limit   minvoltagelimit           Minimum Input Voltage Limit               RW  60  36 2  PWM Limit   pwmlimit                           Maximum PWM Limit                         RW  885  40 4  Acceleration Limit   accelerationlimit         Maximum Accleration Limit                 RW  32767  44 4  Velocity Limit   velocitylimit                 Maximum Velocity Limit                    RW  415  48 4  Max Position Limit   maxpositionlimit         Maximum Position Limit                    RW  4095  52 4  Min Position Limit   minpositionlimit         Minimum Position Limit                    RW  0  63 1  Shutdown   shutdown                             Shutdown Error Information                RW  52     Control Table of RAM Area   controltableoframarea   Address       Size Byte        Data Name       Description       Access       Initial Value                          64 1  Torque Enable   torqueenable                 Motor Torque On Off                         RW  0  65 1  LED   led                                     Status LED On Off                           RW  0  68 1  Status Return Level   statusreturnlevel     Select Types of Status Return               RW  2  69 1  Registered Instruction   registeredinstruction  Check Reception of Instruction           R   0  70 1  Hardware Error Status   hardwareerrorstatus    Hardware Error Status                    R   0  76 2  Velocity I Gain   velocityigain             I Gain of Velocity                          RW  1000  78 2  Velocity P Gain   velocitypgain             P Gain of Velocity                          RW  100  80 2  Position D Gain   positiondgain             D Gain of Position                          RW  4000  82 2  Position I Gain   positionigain             I Gain of Position                          RW  0  84 2  Position P Gain   positionpgain             P Gain of Position                          RW  640  88 2  Feedforward 2nd Gain   feedforward2ndgain   2nd Gain of FeedForward                    RW  0  90 2  Feedforward 1st Gain   feedforward1stgain   1st Gain of FeedForward                    RW  0  98 1  Bus Watchdog   buswatchdog                   DYNAMIXEL Bus Watchdog                      RW  0  100 2  Goal PWM   goalpwm                          Target PWM Value                            RW    102 2  Goal Current   goalcurrent                  Target Current Value                        RW    104 4  Goal Velocity   goalvelocity                Target Velocity Value                       RW    108 4  Profile Acceleration   profileacceleration  Acceleration Value of Profile               RW  0  112 4  Profile Velocity   profilevelocity          Velocity Value of Profile                   RW  0  116 4  Goal Position   goalposition                Target Position Value                       RW    120 2  Realtime Tick   realtimetick                Count Time in millisecond                   R     122 1  Moving   moving                              Movement Status                             R   0  123 1  Moving Status   movingstatus                Detailed Information of Movement Status     R   0  124 2  Present PWM   presentpwm                    Present PWM Value                           R     126 2  Present Load   presentload                  Present Load Value                          R     128 4  Present Velocity   presentvelocity          Present Velocity Value                      R     132 4  Present Position   presentposition          Present Position Value                      R     136 4  Velocity Trajectory   velocitytrajectory    Target Velocity Trajectory Generated by Profile R   140 4  Position Trajectory   positiontrajectory    Target Position Trajectory Generated by Profile R   144 2  Present Input Voltage   presentinputvoltage  Present Input Voltage                     R     146 1  Present Temperature   presenttemperature      Present Internal Temperature              R     168 2  Indirect Address 1   indirectaddress        Indirect Address 1                          RW  224  170 2  Indirect Address 2   indirectaddress        Indirect Address 2                          RW  225  172 2  Indirect Address 3   indirectaddress        Indirect Address 3                          RW  226      … …                         … … …  218 2  Indirect Address 26   indirectaddress       Indirect Address 26                         RW  249  220 2  Indirect Address 27   indirectaddress       Indirect Address 27                         RW  250  222 2  Indirect Address 28   indirectaddress       Indirect Address 28                         RW  251  224 1  Indirect Data 1   indirectdata              Indirect Data 1                             RW  0  225 1  Indirect Data 2   indirectdata              Indirect Data 2                             RW  0  226 1  Indirect Data 3   indirectdata              Indirect Data 3                             RW  0      … …                         … … …  249 1  Indirect Data 26   indirectdata             Indirect Data 26                            RW  0  250 1  Indirect Data 27   indirectdata             Indirect Data 27                            RW  0  251 1  Indirect Data 28   indirectdata             Indirect Data 28                            RW  0  578 2  Indirect Address 29   indirectaddress       Indirect Address 29                         RW  634  580 2  Indirect Address 30   indirectaddress       Indirect Address 30                         RW  635  582 2  Indirect Address 31   indirectaddress       Indirect Address 31                         RW  636  … … … … … …  628 2  Indirect Address 54   indirectaddress       Indirect Address 54                         RW  659  630 2  Indirect Address 55   indirectaddress       Indirect Address 55                         RW  660  632 2  Indirect Address 56   indirectaddress       Indirect Address 56                         RW  661  634 1  Indirect Data 29   indirectdata             Indirect Data 29                            RW  0  635 1  Indirect Data 30   indirectdata             Indirect Data 30                            RW  0  636 1  Indirect Data 31   indirectdata             Indirect Data 31                            RW  0  … … … … … …  659 1  Indirect Data 54   indirectdata             Indirect Data 54                            RW  0  660 1  Indirect Data 55   indirectdata             Indirect Data 55                            RW  0  661 1  Indirect Data 56   indirectdata             Indirect Data 56                            RW  0  Caution  Protocol 1 0 does not support addresses greater than 256  Therefore  Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0   noticewarning    Control Table Description   controltabledescription  Caution  Data in the EEPROM Area can only be written when the value of Torque Enable 64  is cleared to ‘0’   noticewarning       Model Number 0    modelnumber0    This address stores model number of the DYNAMIXEL        Firmware Version 6    firmwareversion6    This address stores firmware version of the DYNAMIXEL        ID 7    id7   % include en dxl control_table_id md %       Baud Rate 8    baudrate8   % include en dxl control_table_baudrate_2 md %       Return Delay Time 9    returndelaytime9   % include en dxl control_table_return_delay_time md %       Drive Mode 10    drivemode10   % include en dxl control_table_drivemode md %       Operating Mode 11    operatingmode11   % include en dxl control_table_mx_opmode_2 md %       Secondary Shadow  ID 12    secondaryshadowid12   % include en dxl control_table_shadowid md %       Protocol Version 13    protocolversion13   % include en dxl control_table_protocolversion md %       Homing Offset 20    homingoffset20   % include en dxl control_table_homingoffset md %       Moving Threshold 24    movingthreshold24   % include en dxl control_table_movingthreshold md %       Temperature Limit 31    temperaturelimit31   % include en dxl control_table_temp_limit_2 md %       Min Max Voltage Limit 32  34    minmaxvoltagelimit3234   These values are maximum and minimum operating voltages When current input voltage acquired from Present Input Voltage 144  exceeds the range of Max Voltage Limit 32  and Min Voltage Limit 34   Voltage Range Error Bit 0x01  and Hardware Error Bit 0x80  in the Hardware Error Status 70  are set  If Input Voltage Error Bit 0x10  is configured in the Shutdown 63   Torque Enable 64  is cleared to ‘0’ and Torque is disabled  For more details  please refer to the  Shutdown 63    shutdown  section  Unit Value Range Description            About 0 1V 60   140 6 0   14 0V        PWM Limit 36    pwmlimit36   % include en dxl control_table_pwm_limit md %       Acceleration Limit 40    accelerationlimit40   % include en dxl control_table_acclimit md %       Velocity Limit 44    velocitylimit44   % include en dxl control_table_vellimit md %       Min Max Position Limit 48  52    minmaxpositionlimit4852   These values limit maximum and minimum target positions for Position Control Mode Joint Mode  within the range of 1 rotation 0   4 095   Therefore  Goal Position 116  should be configured within the position limit range  These values are not used in Extended Position Control Mode  Unit Value Range         0 088 deg 0   4 095 1 rotation   Note  Max Position Limit 48  and Min Position Limit 52  are only used in Position Control Mode with a single turn        Shutdown 63    shutdown63   % include en dxl control_table_shutdown md %       Torque Enable 64    torqueenable64   % include en dxl control_table_torque_enable_2 md %       LED 65    led65   % include en dxl control_table_led md %       Status Return Level 68    statusreturnlevel68   % include en dxl control_table_status_return_lv md %       Registered Instruction 69    registeredinstruction69   % include en dxl control_table_reg_instruction md %       Hardware Error Status 70    hardwareerrorstatus70   This value indicates hardware error status % include en dxl control_table_shutdown md %       Velocity PI Gain 76  78    velocitypigain7678   These values indicate Gains of Velocity Control Mode  Gains of DYNAMIXEL’s internal controller can be calculated from Gains of the Control Table as shown below  The constant in each equations include sampling time  Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and that of the Control Table is abbreviated to KVP TBL     Controller Gain       Conversion Equations       Range   Description                 Velocity I Gain 76    KVI   KVI   KVI TBL    65536   0   16383   I Gain    Velocity P Gain 78    KVP   KVP   KVP TBL    128   0   16383   P Gain Below figure is a block diagram describing the velocity controller in Velocity Control Mode  When the instruction transmitted from the user is received by DYNAMIXEL  it takes following steps until driving the horn 1  An Instruction from the user is transmitted via DYNAMIXEL bus  then registered to Goal Velocity 104  2  Goal Velocity 104  is converted to target velocity trajectory by Profile Acceleration 108  3  The target velocity trajectory is stored at Velocity Trajectory 136  4  PI controller calculates PWM output for the motor based on the target velocity trajectory 5  Goal PWM 100  sets a limit on the calculated PWM output and decides the final PWM value 6  The final PWM value is applied to the motor through an Inverter  and the horn of DYNAMIXEL is driven 7  Results are stored at Present Position 132   Present Velocity 128   Present PWM 124  and Present Load 126       assets images dxl velocity_controller_pi_gain jpg  Note  Ka stands for Antiwindup Gain and ‘β’ is a conversion coefficient of position and velocity that cannot be modified by users  For more details about the PID controller  please refer to the  PID Controller at wikipedia  http  en wikipedia org wiki PID_controller    notice       Position PID Gain 80  82  84    positionpidgain808284        Feedforward 1st 2nd Gains 88  90    feedforward1st2ndgains8890   These Gains are used in Position Control Mode and Extended Position Control Mode  Gains of Dynamixel’s internal controller can be calculated from Gains of the Control Table as shown below  The constant in each equations include sampling time  Position P Gain of Dynamixel’s internal controller is abbreviated to KPP and that of the Control Table is abbreviated to KPP TBL     Controller Gain       Conversion Equations       Range   Description                 Position D Gain 80    KPD   KPD   KPD TBL    16   0   16 383   D Gain    Position I Gain 82    KPI   KPI   KPI TBL    65 536   0   16 383   I Gain    Position P Gain 84    KPP   KPP   KPP TBL    128   0   16 383   P Gain    Feedforward 2nd Gain 88    KFF2nd   KFF2nd TBL    4   0   16 383   Feedforward Acceleration Gain    Feedforward 1st Gain 90    KFF1st   KFF1st TBL    4   0   16 383   Feedforward Velocity Gain  Below figure is a block diagram describing the position controller in Position Control Mode and Extended Position Control Mode  When the instruction from the user is received by Dynamixel  it takes following steps until driving the horn 1  An Instruction from the user is transmitted via Dynamixel bus  then registered to Goal Position 116  2  Goal Position 116  is converted to target position trajectory and target velocity trajectory by Profile Velocity 112  and Profile Acceleration 108  3  The target position trajectory and target velocity trajectory is stored at Position Trajectory 140  and Velocity Trajectory 136  respectively 4  Feedforward and PID controller calculate PWM output for the motor based on target trajectories 5  Goal PWM 100  sets a limit on the calculated PWM output and decides the final PWM value 6  The final PWM value is applied to the motor through an Inverter  and the horn of Dynamixel is driven 7  Results are stored at Present Position 132   Present Velocity 128   Present PWM 124  and Present Load 126       assets images dxl position_controller_pid_gain jpg  Note  In case of PWM Control Mode  both PID controller and Feedforward controller are deactivated while Goal PWM 100  value is directly controlling the motor through an Inverter  In this manner  users can directly control the supplying voltage to the motor   notice Note  Ka is an Antiwindup Gain that cannot be modified by users  For more details about the PID controller and Feedforward controller  please refer to the  PID Controller  http  en wikipedia org wiki PID_controller  and  Feed Forward  https  en wikipedia org wiki Feed_forward_ control     notice       Bus Watchdog 98    buswatchdog98   % include en dxl control_table_buswatchdog md %       Goal PWM 100    goalpwm100   % include en dxl control_table_goal_pwm md %       Goal Velocity 104    goalvelocity104   % include en dxl control_table_goal_velocity md %       Profile Acceleration 108    profileacceleration108   % include en dxl control_table_profile_acceleration md %       Profile Velocity 112    profilevelocity112   The Maximum velocity of Profile can be set with this value  Profile Velocity 112  can be used in all control modes except Torque Control Mode and Velocity Control Mode  Profile Velocity 112  cannot exceed Velocity Limit 44   Velocity Control Mode only uses Profile Acceleration 108  instead of Profile Velocity 112   Unit Value Range Description             0 229 rpm   0   Velocity Limit 44     0  stands for an infinite velocity  The Profile is an acceleration deceleration control method to reduce vibration  noise and load of the motor by controlling dramatically changing velocity and acceleration  It is also called Velocity Profile as it controls acceleration and deceleration based on velocity  DYNAMIXEL provides 4 different types of Profile  The following explains 4 Profiles and how to select them  Profiles are usually selected by a combination of Profile Velocity 112  and Profile Acceleration 108   Triangular and Trapezoidal Profiles exceptionally consider total travel distance ΔPos  the distance difference between target position and current position  as an additional factor  For convenience  Profile Velocity 112  is abbreviated to VPRFL and Profile Acceleration 108  is abbreviated to VPRFL   X  stands for Don t Care case      assets images dxl dxl_profiles jpg When given Goal Position 116   Dynamixel s profile creates target velocity trajectory based on current velocity initial velocity of the Profile   When Dynamixel receives updated target position from a new Goal Position 116  while it is moving toward the previous Goal Position 116   velocity smoothly varies for the new target velocity trajectory  Maintaining velocity continuity while updating target velocity trajectory is called Velocity Override  For a simple calculation  let s assume that the initial velocity of the Profile is  0   The following explains how Profile processes Goal Position 116  instruction in Position Control mode  Extended Position Control Mode 1  An Instruction from the user is transmitted via Dynamixel bus  then registered to Goal Position 116  2  Acceleration time t1  is calculated from Profile Velocity 112  and Profile Acceleration 108  3  Types of Profile is decided based on Profile Velocity 112   Profile Acceleration 108  and total travel distance ΔPos  the distance difference between target position and current position  4  Selected Profile type is stored at Moving Status 123   Refer to the Moving Status 123  5  Dynamixel is driven by the calculated target trajectory from Profile 6  Target velocity trajectory and target position trajectory from Profile are stored at Velocity Trajectory 136  and Position Trajectory 140  respectively 7  VPRFL_TRI of ③ and Travel time t3  to reach Goal Position 116  is calculated as below   Condition       Types of Profile               VPRFL 112    0   Profile not used  Step Instruction      VPRFL 112  ≠ 0     APRF 108    0    Rectangular Profile     VPRFL 112  ≠ 0     APRF 108  ≠ 0     VPRFL_TRI ≤ VPRFL 112     Triangular Profile     VPRFL 112  ≠ 0     APRF 108  ≠ 0     VPRFL_TRI ＞ VPRFL 112    Trapezoidal Profile       assets images dxl dxl_velocity_profiles jpg  Note  Dynamixel supports Jerk control in order to minimize dramatic change of acceleration  Therefore  actual travel time by the target trajectory of Profile could be longer than t3 t4 of above figure    notice% capture group_notice_03 % Note  Velocity Control Mode only uses Profile Acceleration 108   Step and Trapezoidal Profiles are supported  Velocity Override and Jerk control are supported as well  Acceleration time t1  can be calculated as below equation      assets images dxl x equation_01 gif % endcapture %   group_notice_03   markdownify        Goal Position 116    goalposition116   % include en dxl control_table_goal_position_2 md %       Realtime Tick 120    realtimetick120   % include en dxl control_table_realtime_tick md %       Moving 122    moving122   % include en dxl control_table_moving_2 md %       Moving Status 123    movingstatus123   % include en dxl control_table_moving_status md %       Present PWM 124    presentpwm124   This value indicates present PWM  For more details  please refer to the  Goal PWM 100    goalpwm         Present Load 126    presentload126   % include en dxl control_table_present_load_2 md %       Present Velocity 128    presentvelocity128   This value indicates present Velocity  For more details  please refer to the Goal Velocity 104    goalvelocity         Present Position 132    presentposition132   % include en dxl control_table_present_position md %       Velocity Trajectory 136    velocitytrajectory136   This is a target velocity trajectory created by Profile  Operating method can be changed based on control mode  For more details  please refer to the Profile Velocity 112  1    Velocity Control Mode    When Profile reaches to the endpoint  Velocity Trajectory 136  becomes equal to Goal Velocity 104  2    Position Control Mode  Extended Position Control Mode    Velocity Trajectory is used to create Position Trajectory 140   When Profile reaches to an endpoint  Velocity Trajectory 136  is cleared to  0         Position Trajectory 140    positiontrajectory140   % include en dxl control_table_position_trajectory md %       Present Input Voltage 144    presentinputvoltage144   % include en dxl control_table_present_volt_2 md %       Present Temperature 146    presenttemperature146   % include en dxl control_table_present_temp_2 md %       Indirect Address   indirectaddress        Indirect Data   indirectdata   % include en dxl control_table_indirect_data md %   How to Assemble   howtoassemble     Wiring through Back Case   wiringthroughbackcase     Option Frame Assembly   optionframeassembly      assets images dxl x xl430_option_frame jpg    Maintenance   maintenance % include en dxl horn_bearing_replacement md %   Reference   reference  Note   Compatibility Guide   notice    Quick Start   quickstart % include en dxl quick_start md %    Drawings   drawings  Download   dc11_a01_xl430_ref pdf  dc11_a01_xl430_ref pdf  http  support robotis com en baggage_files dynamixel dc11_a01_xl430_ref pdf Compatibility Guide  http  en robotis com BlueAD board php bbs_id faq mode view bbs_no 47 page 1 key  keyword  sort  scate ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/x/xl430-w250/"
      } ,
  
  
      "docs-en-dxl-x-xm430-w210":  {
      "title": "XM430-W210",
      "content"	 : "  XM430W210     assets images dxl x x_series_product png    Specifications   specifications   Item             Specifications               MCU         ST CORTEXM3  STM32F103C8 @ 72Mhz  32Bit           Position Sensor         Contactless absolute encoder  12Bit  360 deg Maker  ams www ams com   Part No  AS5045   Motor         Coreless Motor          Baud Rate         9600 bps   4 5 Mbps          Control Algorithm   PID control        Degree of Precision   0 088 deg     Operating Modes   Current Control Mode  Velocity Control Mode  Position Control Mode  0 deg   360 deg   Extended Position Control Mode  Currentbased Position Control Mode  PWM Control Mode  Voltage Control Mode     Weight   82g    Dimensions  W x H x D    28 5mm x 46 5mm x 34mm    Gear Ratio   212 6  1     Stall Torque   2 7N m @ 11 1V  2 1A3 0Nm @ 12 0V  2 3A3 7Nm @ 14 8V  2 7A    No Load Speed   70rpm @ 11 1V77rpm @ 12 0V95rpm @ 14 8V    Operating Temperature   5 degC    80 degC    Input Voltage   10 0   14 8V    Recommended  12 0V       Standby Current   40mA    Command Signal   Digital Packet    Protocol Type   XM430W210T Half Duplex Asynchronous Serial CommunicationXM430W210R RS485 Asynchronous Serial Communication 8bit  1stop  No Parity     Physical Connection   XM430W210T TTL Level Multidrop BUS XM430W210R RS485 Multidrop BUS    ID   0   252    Feedback   Position  Velocity  Current  Realtime tick  Trajectory  Temperature  Input Voltage  etc    Part Material   Full Metal GearMetal Front  Middle   Engineering Plastic Back       Performance Graph   performancegraph      assets images dxl x xm430_w210_performance_graph jpg % include en dxl note_performance_graph md %% include en dxl control_table_protocol2 md %    Control Table of EEPROM Area   controltableofeepromarea   Address       Size Byte        Data Name       Description       Access       Initial Value                          0 2  Model Number   modelnumber                      Model Number                              R   1030  2 4  Model Information   modelinformation            Model Information                         R     6 1  Firmware Version   firmwareversion              Firmware Version                          R     7 1  ID   id                                          DYNAMIXEL ID                              RW  1  8 1  Baud Rate   baudrate                            Communication Speed                       RW  1  9 1  Return Delay Time   returndelaytime            Response Delay Time                       RW  250  10 1  Drive Mode   drivemode                         Default Rotation Direction                RW  0  11 1  Operating Mode   operatingmode                 Operating Mode                            RW  3  12 1  Secondary Shadow  ID   secondaryshadowid      Secondary Shadow  ID                      RW  255  13 1  Protocol Version   protocolversion             Protocol Version                          RW  2  20 4  Homing Offset   homingoffset                   Home Position Offset                      RW  0  24 4  Moving Threshold   movingthreshold             Velocity Threshold for Movement Detection RW  10  31 1  Temperature Limit   temperaturelimit           Maximum Internal Temperature Limit        RW  80  32 2  Max Voltage Limit   maxvoltagelimit           Maximum Input Voltage Limit               RW  160  34 2  Min Voltage Limit   minvoltagelimit           Minimum Input Voltage Limit               RW  95  36 2  PWM Limit   pwmlimit                           Maximum PWM Limit                         RW  885  38 2  Current Limit   currentlimit                   Maximum Current Limit                     RW  1193  40 4  Acceleration Limit   accelerationlimit         Maximum Accleration Limit                 RW  32767  44 4  Velocity Limit   velocitylimit                 Maximum Velocity Limit                    RW  480  48 4  Max Position Limit   maxpositionlimit         Maximum Position Limit                    RW  4095  52 4  Min Position Limit   minpositionlimit         Minimum Position Limit                    RW  0  63 1  Shutdown   shutdown                             Shutdown Error Information                RW  52     Control Table of RAM Area   controltableoframarea   Address       Size Byte        Data Name       Description       Access       Initial Value                          64 1  Torque Enable   torqueenable                 Motor Torque On Off                         RW  0  65 1  LED   led                                     Status LED On Off                           RW  0  68 1  Status Return Level   statusreturnlevel     Select Types of Status Return               RW  2  69 1  Registered Instruction   registeredinstruction  Check Reception of Instruction           R   0  70 1  Hardware Error Status   hardwareerrorstatus    Hardware Error Status                    R   0  76 2  Velocity I Gain   velocityigain             I Gain of Velocity                          RW  1920  78 2  Velocity P Gain   velocitypgain             P Gain of Velocity                          RW  100  80 2  Position D Gain   positiondgain             D Gain of Position                          RW  0  82 2  Position I Gain   positionigain             I Gain of Position                          RW  0  84 2  Position P Gain   positionpgain             P Gain of Position                          RW  800  88 2  Feedforward 2nd Gain   feedforward2ndgain   2nd Gain of FeedForward                    RW  0  90 2  Feedforward 1st Gain   feedforward1stgain   1st Gain of FeedForward                    RW  0  98 1  Bus Watchdog   buswatchdog                   DYNAMIXEL Bus Watchdog                      RW  0  100 2  Goal PWM   goalpwm                          Target PWM Value                            RW    102 2  Goal Current   goalcurrent                  Target Current Value                        RW    104 4  Goal Velocity   goalvelocity                Target Velocity Value                       RW    108 4  Profile Acceleration   profileacceleration  Acceleration Value of Profile               RW  0  112 4  Profile Velocity   profilevelocity          Velocity Value of Profile                   RW  0  116 4  Goal Position   goalposition                Target Position Value                       RW    120 2  Realtime Tick   realtimetick                Count Time in millisecond                   R     122 1  Moving   moving                              Movement Status                             R   0  123 1  Moving Status   movingstatus                Detailed Information of Movement Status     R   0  124 2  Present PWM   presentpwm                    Current PWM Value                           R     126 2  Present Current   presentcurrent            Current Current Value                       R     128 4  Present Velocity   presentvelocity          Current Velocity Value                      R     132 4  Present Position   presentposition          Current Position Value                      R     136 4  Velocity Trajectory   velocitytrajectory    Target Velocity Trajectory Generated by Profile R   140 4  Position Trajectory   positiontrajectory    Target Position Trajectory Generated by Profile R   144 2  Present Input Voltage   presentinputvoltage  Current Input Voltage                     R     146 1  Present Temperature   presenttemperature      Current Internal Temperature              R     168 2  Indirect Address 1   indirectaddress        Indirect Address 1                          RW  224  170 2  Indirect Address 2   indirectaddress        Indirect Address 2                          RW  225  172 2  Indirect Address 3   indirectaddress        Indirect Address 3                          RW  226      … …                         … … …  218 2  Indirect Address 26   indirectaddress       Indirect Address 26                         RW  249  220 2  Indirect Address 27   indirectaddress       Indirect Address 27                         RW  250  222 2  Indirect Address 28   indirectaddress       Indirect Address 28                         RW  251  224 1  Indirect Data 1   indirectdata              Indirect Data 1                             RW  0  225 1  Indirect Data 2   indirectdata              Indirect Data 2                             RW  0  226 1  Indirect Data 3   indirectdata              Indirect Data 3                             RW  0      … …                         … … …  249 1  Indirect Data 26   indirectdata             Indirect Data 26                            RW  0  250 1  Indirect Data 27   indirectdata             Indirect Data 27                            RW  0  251 1  Indirect Data 28   indirectdata             Indirect Data 28                            RW  0  578 2  Indirect Address 29   indirectaddress       Indirect Address 29                         RW  634  580 2  Indirect Address 30   indirectaddress       Indirect Address 30                         RW  635  582 2  Indirect Address 31   indirectaddress       Indirect Address 31                         RW  636  … … … … … …  628 2  Indirect Address 54   indirectaddress       Indirect Address 54                         RW  659  630 2  Indirect Address 55   indirectaddress       Indirect Address 55                         RW  660  632 2  Indirect Address 56   indirectaddress       Indirect Address 56                         RW  661  634 1  Indirect Data 29   indirectdata             Indirect Data 29                            RW  0  635 1  Indirect Data 30   indirectdata             Indirect Data 30                            RW  0  636 1  Indirect Data 31   indirectdata             Indirect Data 31                            RW  0  … … … … … …  659 1  Indirect Data 54   indirectdata             Indirect Data 54                            RW  0  660 1  Indirect Data 55   indirectdata             Indirect Data 55                            RW  0  661 1  Indirect Data 56   indirectdata             Indirect Data 56                            RW  0  Caution  Protocol 1 0 does not support addresses greater than 256  Therefore  Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0   noticewarning    Control Table Description   controltabledescription  Caution  Data in the EEPROM Area can only be written when the value of Torque Enable 64  is cleared to ‘0’   noticewarning       Model Number 0    modelnumber0    This address stores model number of the DYNAMIXEL        Firmware Version 6    firmwareversion6    This address stores firmware version of the DYNAMIXEL        ID 7    id7   % include en dxl control_table_id md %       Baud Rate 8    baudrate8   % include en dxl control_table_baudrate_2 md %       Return Delay Time 9    returndelaytime9   % include en dxl control_table_return_delay_time md %       Drive Mode 10    drivemode10   % include en dxl control_table_drivemode md %       Operating Mode 11    operatingmode11   % include en dxl control_table_opmode_six_2 md %       Secondary Shadow  ID 12    secondaryshadowid12   % include en dxl control_table_shadowid md %       Protocol Version 13    protocolversion13   % include en dxl control_table_protocolversion md %       Homing Offset 20    homingoffset20   % include en dxl control_table_homingoffset md %       Moving Threshold 24    movingthreshold24   % include en dxl control_table_movingthreshold md %       Temperature Limit 31    temperaturelimit31   % include en dxl control_table_temp_limit_2 md %       Min Max Voltage Limit 32  34    minmaxvoltagelimit3234   % include en dxl control_table_volt_limit_2 md %       PWM Limit 36    pwmlimit36   % include en dxl control_table_pwm_limit md %       Current Limit 38    currentlimit38   % include en dxl control_table_current_limit md %  Unit   Value Range              about  2 69 mA  0   1 193  Note  Current Limit 38  could be differ by each DYNAMIXEL so please check the Control Table   notice       Acceleration Limit 40    accelerationlimit40   % include en dxl control_table_acclimit md %       Velocity Limit 44    velocitylimit44   % include en dxl control_table_vellimit md %       Min Max Position Limit 48  52    minmaxpositionlimit4852   % include en dxl control_table_positionlimit md %       Shutdown 63    shutdown63   % include en dxl control_table_shutdown md %       Torque Enable 64    torqueenable64   % include en dxl control_table_torque_enable_2 md %       LED 65    led65   % include en dxl control_table_led md %       Status Return Level 68    statusreturnlevel68   % include en dxl control_table_status_return_lv md %       Registered Instruction 69    registeredinstruction69   % include en dxl control_table_reg_instruction md %       Hardware Error Status 70    hardwareerrorstatus70   This value indicates hardware error status % include en dxl control_table_shutdown md %       Velocity PI Gain 76  78    velocitypigain7678   % include en dxl control_table_velocity_pi_gain md %       Position PID Gain 80  82  84    positionpidgain808284        Feedforward 1st 2nd Gains 88  90    feedforward1st2ndgains8890   % include en dxl control_table_position_pid_gain md %% include en dxl control_table_current_position_pid_gain md %       Bus Watchdog 98    buswatchdog98   % include en dxl control_table_buswatchdog md %       Goal PWM 100    goalpwm100   % include en dxl control_table_goal_pwm md %      Goal Current 102   % include en dxl control_table_goal_current md %  Unit   Value Range              about  2 69 mA  Current Limit 38    Current Limit 38   Note  Applying high current to the motor for long period of time might damage the motor   notice       Goal Velocity 104    goalvelocity104   % include en dxl control_table_goal_velocity md %       Profile Acceleration 108    profileacceleration108   % include en dxl control_table_profile_acceleration md %       Profile Velocity 112    profilevelocity112   % include en dxl control_table_profile_velocity md %       Goal Position 116    goalposition116   % include en dxl control_table_goal_position_2 md %       Realtime Tick 120    realtimetick120   % include en dxl control_table_realtime_tick md %       Moving 122    moving122   % include en dxl control_table_moving_2 md %       Moving Status 123    movingstatus123   % include en dxl control_table_moving_status md %       Present PWM 124    presentpwm124   This value indicates current PWM  For more details  please refer to the  Goal PWM 100    goalpwm         Present Current 126    presentcurrent126   This value indicates current Current  For more details  please refer to the  Goal Current 102    goalcurrent         Present Velocity 128    presentvelocity128   This value indicates current Velocity  For more details  please refer to the Goal Velocity 104    goalvelocity         Present Position 132    presentposition132   % include en dxl control_table_present_position md %       Velocity Trajectory 136    velocitytrajectory136   % include en dxl control_table_velocity_trajectory md %       Position Trajectory 140    positiontrajectory140   % include en dxl control_table_position_trajectory md %       Present Input Voltage 144    presentinputvoltage144   % include en dxl control_table_present_volt_2 md %       Present Temperature 146    presenttemperature146   % include en dxl control_table_present_temp_2 md %       Indirect Address   indirectaddress        Indirect Data   indirectdata   % include en dxl control_table_indirect_data md %   How to Assemble   howtoassemble     Wiring through Back Case   wiringthroughbackcase      assets images dxl x wiring_through_back_case jpg     Option Frame Assembly   optionframeassembly      assets images dxl x x430_option_frame jpg    Maintenance   maintenance % include en dxl horn_bearing_replacement md %   Reference   reference  Note   Compatibility Guide   notice    Quick Start   quickstart % include en dxl quick_start md %    Drawings   drawings  Download   X_430_std_ref pdf  X_430_std_ref pdf  http  support robotis com en baggage_files dynamixel x430_std_ref pdf Compatibility Guide  http  en robotis com BlueAD board php bbs_id faq mode view bbs_no 47 page 1 key  keyword  sort  scate ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/x/xm430-w210/"
      } ,
  
  
      "docs-en-dxl-x-xm430-w350":  {
      "title": "XM430-W350",
      "content"	 : "  XM430W350     assets images dxl x x_series_product png    Specifications   specifications   Item             Specifications               MCU         ST CORTEXM3  STM32F103C8 @ 72Mhz  32Bit           Position Sensor         Contactless absolute encoder  12Bit  360 deg Maker  ams www ams com   Part No  AS5045   Motor         Coreless Motor          Baud Rate         9600 bps   4 5 Mbps          Control Algorithm   PID control        Degree of Precision   0 088 deg     Operating Modes   Current Control Mode  Velocity Control Mode  Position Control Mode  0 deg   360 deg   Extended Position Control Mode  Currentbased Position Control Mode  PWM Control Mode  Voltage Control Mode     Weight   82g    Dimensions  W x H x D    28 5mm x 46 5mm x 34mm    Gear Ratio   353 5  1     Stall Torque   3 8N m @ 11 1V  2 1A4 1Nm @ 12 0V  2 3A4 8Nm @ 14 8V  2 7A    No Load Speed   43rpm @ 11 1V46rpm @ 12 0V57rpm @ 14 8V    Operating Temperature   5 degC    80 degC    Input Voltage   10 0   14 8V    Recommended  12 0V       Standby Current   40mA    Command Signal   Digital Packet    Protocol Type   XM430W350T Half Duplex Asynchronous Serial CommunicationXM430W350R RS485 Asynchronous Serial Communication 8bit  1stop  No Parity     Physical Connection   XM430W350T TTL Level Multidrop BUS XM430W350R RS485 Multidrop BUS    ID   0   252    Feedback   Position  Velocity  Current  Realtime tick  Trajectory  Temperature  Input Voltage  etc    Part Material   Full Metal GearMetal Front  Middle   Engineering Plastic Back       Performance Graph   performancegraph      assets images dxl x xm430_w350_performance_graph jpg % include en dxl note_performance_graph md %% include en dxl control_table_protocol2 md %    Control Table of EEPROM Area   controltableofeepromarea   Address       Size Byte        Data Name       Description       Access       Initial Value                          0 2  Model Number   modelnumber                      Model Number                              R   1020  2 4  Model Information   modelinformation            Model Information                         R     6 1  Firmware Version   firmwareversion              Firmware Version                          R     7 1  ID   id                                          DYNAMIXEL ID                              RW  1  8 1  Baud Rate   baudrate                            Communication Speed                       RW  1  9 1  Return Delay Time   returndelaytime            Response Delay Time                       RW  250  10 1  Drive Mode   drivemode                         Default Rotation Direction                RW  0  11 1  Operating Mode   operatingmode                 Operating Mode                            RW  3  12 1  Secondary Shadow  ID   secondaryshadowid      Secondary Shadow  ID                      RW  255  13 1  Protocol Version   protocolversion             Protocol Version                          RW  2  20 4  Homing Offset   homingoffset                   Home Position Offset                      RW  0  24 4  Moving Threshold   movingthreshold             Velocity Threshold for Movement Detection RW  10  31 1  Temperature Limit   temperaturelimit           Maximum Internal Temperature Limit        RW  80  32 2  Max Voltage Limit   maxvoltagelimit           Maximum Input Voltage Limit               RW  160  34 2  Min Voltage Limit   minvoltagelimit           Minimum Input Voltage Limit               RW  95  36 2  PWM Limit   pwmlimit                           Maximum PWM Limit                         RW  885  38 2  Current Limit   currentlimit                   Maximum Current Limit                     RW  1193  40 4  Acceleration Limit   accelerationlimit         Maximum Accleration Limit                 RW  32767  44 4  Velocity Limit   velocitylimit                 Maximum Velocity Limit                    RW  350  48 4  Max Position Limit   maxpositionlimit         Maximum Position Limit                    RW  4095  52 4  Min Position Limit   minpositionlimit         Minimum Position Limit                    RW  0  63 1  Shutdown   shutdown                             Shutdown Error Information                RW  52     Control Table of RAM Area   controltableoframarea   Address       Size Byte        Data Name       Description       Access       Initial Value                          64 1  Torque Enable   torqueenable                 Motor Torque On Off                         RW  0  65 1  LED   led                                     Status LED On Off                           RW  0  68 1  Status Return Level   statusreturnlevel     Select Types of Status Return               RW  2  69 1  Registered Instruction   registeredinstruction  Check Reception of Instruction           R   0  70 1  Hardware Error Status   hardwareerrorstatus    Hardware Error Status                    R   0  76 2  Velocity I Gain   velocityigain             I Gain of Velocity                          RW  1920  78 2  Velocity P Gain   velocitypgain             P Gain of Velocity                          RW  100  80 2  Position D Gain   positiondgain             D Gain of Position                          RW  0  82 2  Position I Gain   positionigain             I Gain of Position                          RW  0  84 2  Position P Gain   positionpgain             P Gain of Position                          RW  800  88 2  Feedforward 2nd Gain   feedforward2ndgain   2nd Gain of FeedForward                    RW  0  90 2  Feedforward 1st Gain   feedforward1stgain   1st Gain of FeedForward                    RW  0  98 1  Bus Watchdog   buswatchdog                   DYNAMIXEL Bus Watchdog                      RW  0  100 2  Goal PWM   goalpwm                          Target PWM Value                            RW    102 2  Goal Current   goalcurrent                  Target Current Value                        RW    104 4  Goal Velocity   goalvelocity                Target Velocity Value                       RW    108 4  Profile Acceleration   profileacceleration  Acceleration Value of Profile               RW  0  112 4  Profile Velocity   profilevelocity          Velocity Value of Profile                   RW  0  116 4  Goal Position   goalposition                Target Position Value                       RW    120 2  Realtime Tick   realtimetick                Count Time in millisecond                   R     122 1  Moving   moving                              Movement Status                             R   0  123 1  Moving Status   movingstatus                Detailed Information of Movement Status     R   0  124 2  Present PWM   presentpwm                    Current PWM Value                           R     126 2  Present Current   presentcurrent            Current Current Value                       R     128 4  Present Velocity   presentvelocity          Current Velocity Value                      R     132 4  Present Position   presentposition          Current Position Value                      R     136 4  Velocity Trajectory   velocitytrajectory    Target Velocity Trajectory Generated by Profile R   140 4  Position Trajectory   positiontrajectory    Target Position Trajectory Generated by Profile R   144 2  Present Input Voltage   presentinputvoltage  Current Input Voltage                     R     146 1  Present Temperature   presenttemperature      Current Internal Temperature              R     168 2  Indirect Address 1   indirectaddress        Indirect Address 1                          RW  224  170 2  Indirect Address 2   indirectaddress        Indirect Address 2                          RW  225  172 2  Indirect Address 3   indirectaddress        Indirect Address 3                          RW  226      … …                         … … …  218 2  Indirect Address 26   indirectaddress       Indirect Address 26                         RW  249  220 2  Indirect Address 27   indirectaddress       Indirect Address 27                         RW  250  222 2  Indirect Address 28   indirectaddress       Indirect Address 28                         RW  251  224 1  Indirect Data 1   indirectdata              Indirect Data 1                             RW  0  225 1  Indirect Data 2   indirectdata              Indirect Data 2                             RW  0  226 1  Indirect Data 3   indirectdata              Indirect Data 3                             RW  0      … …                         … … …  249 1  Indirect Data 26   indirectdata             Indirect Data 26                            RW  0  250 1  Indirect Data 27   indirectdata             Indirect Data 27                            RW  0  251 1  Indirect Data 28   indirectdata             Indirect Data 28                            RW  0  578 2  Indirect Address 29   indirectaddress       Indirect Address 29                         RW  634  580 2  Indirect Address 30   indirectaddress       Indirect Address 30                         RW  635  582 2  Indirect Address 31   indirectaddress       Indirect Address 31                         RW  636  … … … … … …  628 2  Indirect Address 54   indirectaddress       Indirect Address 54                         RW  659  630 2  Indirect Address 55   indirectaddress       Indirect Address 55                         RW  660  632 2  Indirect Address 56   indirectaddress       Indirect Address 56                         RW  661  634 1  Indirect Data 29   indirectdata             Indirect Data 29                            RW  0  635 1  Indirect Data 30   indirectdata             Indirect Data 30                            RW  0  636 1  Indirect Data 31   indirectdata             Indirect Data 31                            RW  0  … … … … … …  659 1  Indirect Data 54   indirectdata             Indirect Data 54                            RW  0  660 1  Indirect Data 55   indirectdata             Indirect Data 55                            RW  0  661 1  Indirect Data 56   indirectdata             Indirect Data 56                            RW  0  Caution  Protocol 1 0 does not support addresses greater than 256  Therefore  Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0   noticewarning    Control Table Description   controltabledescription  Caution  Data in the EEPROM Area can only be written when the value of Torque Enable 64  is cleared to ‘0’   noticewarning       Model Number 0    modelnumber0    This address stores model number of the DYNAMIXEL        Firmware Version 6    firmwareversion6    This address stores firmware version of the DYNAMIXEL        ID 7    id7   % include en dxl control_table_id md %       Baud Rate 8    baudrate8   % include en dxl control_table_baudrate_2 md %       Return Delay Time 9    returndelaytime9   % include en dxl control_table_return_delay_time md %       Drive Mode 10    drivemode10   % include en dxl control_table_drivemode md %       Operating Mode 11    operatingmode11   % include en dxl control_table_opmode_six_2 md %       Secondary Shadow  ID 12    secondaryshadowid12   % include en dxl control_table_shadowid md %       Protocol Version 13    protocolversion13   % include en dxl control_table_protocolversion md %       Homing Offset 20    homingoffset20   % include en dxl control_table_homingoffset md %       Moving Threshold 24    movingthreshold24   % include en dxl control_table_movingthreshold md %       Temperature Limit 31    temperaturelimit31   % include en dxl control_table_temp_limit_2 md %       Min Max Voltage Limit 32  34    minmaxvoltagelimit3234   % include en dxl control_table_volt_limit_2 md %       PWM Limit 36    pwmlimit36   % include en dxl control_table_pwm_limit md %       Current Limit 38    currentlimit38   % include en dxl control_table_current_limit md %  Unit   Value Range              about  2 69 mA  0   1 193  Note  Current Limit 38  could be differ by each DYNAMIXEL so please check the Control Table   notice       Acceleration Limit 40    accelerationlimit40   % include en dxl control_table_acclimit md %       Velocity Limit 44    velocitylimit44   % include en dxl control_table_vellimit md %       Min Max Position Limit 48  52    minmaxpositionlimit4852   % include en dxl control_table_positionlimit md %       Shutdown 63    shutdown63   % include en dxl control_table_shutdown md %       Torque Enable 64    torqueenable64   % include en dxl control_table_torque_enable_2 md %       LED 65    led65   % include en dxl control_table_led md %       Status Return Level 68    statusreturnlevel68   % include en dxl control_table_status_return_lv md %       Registered Instruction 69    registeredinstruction69   % include en dxl control_table_reg_instruction md %       Hardware Error Status 70    hardwareerrorstatus70   This value indicates hardware error status % include en dxl control_table_shutdown md %       Velocity PI Gain 76  78    velocitypigain7678   % include en dxl control_table_velocity_pi_gain md %       Position PID Gain 80  82  84    positionpidgain808284        Feedforward 1st 2nd Gains 88  90    feedforward1st2ndgains8890   % include en dxl control_table_position_pid_gain md %% include en dxl control_table_current_position_pid_gain md %       Bus Watchdog 98    buswatchdog98   % include en dxl control_table_buswatchdog md %       Goal PWM 100    goalpwm100   % include en dxl control_table_goal_pwm md %      Goal Current 102   % include en dxl control_table_goal_current md %  Unit   Value Range              about  2 69 mA  Current Limit 38    Current Limit 38   Note  Applying high current to the motor for long period of time might damage the motor   notice       Goal Velocity 104    goalvelocity104   % include en dxl control_table_goal_velocity md %       Profile Acceleration 108    profileacceleration108   % include en dxl control_table_profile_acceleration md %       Profile Velocity 112    profilevelocity112   % include en dxl control_table_profile_velocity md %       Goal Position 116    goalposition116   % include en dxl control_table_goal_position_2 md %       Realtime Tick 120    realtimetick120   % include en dxl control_table_realtime_tick md %       Moving 122    moving122   % include en dxl control_table_moving_2 md %       Moving Status 123    movingstatus123   % include en dxl control_table_moving_status md %       Present PWM 124    presentpwm124   This value indicates current PWM  For more details  please refer to the  Goal PWM 100    goalpwm         Present Current 126    presentcurrent126   This value indicates current Current  For more details  please refer to the  Goal Current 102    goalcurrent         Present Velocity 128    presentvelocity128   This value indicates current Velocity  For more details  please refer to the Goal Velocity 104    goalvelocity         Present Position 132    presentposition132   % include en dxl control_table_present_position md %       Velocity Trajectory 136    velocitytrajectory136   % include en dxl control_table_velocity_trajectory md %       Position Trajectory 140    positiontrajectory140   % include en dxl control_table_position_trajectory md %       Present Input Voltage 144    presentinputvoltage144   % include en dxl control_table_present_volt_2 md %       Present Temperature 146    presenttemperature146   % include en dxl control_table_present_temp_2 md %       Indirect Address   indirectaddress        Indirect Data   indirectdata   % include en dxl control_table_indirect_data md %   How to Assemble   howtoassemble     Wiring through Back Case   wiringthroughbackcase      assets images dxl x wiring_through_back_case jpg     Option Frame Assembly   optionframeassembly      assets images dxl x x430_option_frame jpg    Maintenance   maintenance % include en dxl horn_bearing_replacement md %   Reference   reference  Note   Compatibility Guide   notice    Quick Start   quickstart % include en dxl quick_start md %    Drawings   drawings  Download   X_430_std_ref pdf  X_430_std_ref pdf  http  support robotis com en baggage_files dynamixel x430_std_ref pdf Compatibility Guide  http  en robotis com BlueAD board php bbs_id faq mode view bbs_no 47 page 1 key  keyword  sort  scate ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/x/xm430-w350/"
      } ,
  
  
      "docs-en-dxl-x-xm540-w150":  {
      "title": "XM540-W150-T/R",
      "content"	 : "  XM540W150T R     assets images dxl x x540series_product png    Specifications   specifications   Item             Specifications               MCU         ST CORTEXM3  STM32F103C8 @ 72Mhz  32Bit           Position Sensor         Contactless absolute encoder  12Bit  360 deg Maker  ams www ams com   Part No  AS5045   Motor         Coreless Motor          Baud Rate         9600 bps   4 5 Mbps          Control Algorithm   PID control        Degree of Precision   0 088 deg     Operating Modes   Current Control Mode  Velocity Control Mode  Position Control Mode  0 deg   360 deg   Extended Position Control Mode  Currentbased Position Control Mode  PWM Control Mode  Voltage Control Mode     Weight   165g    Dimensions  W x H x D    33 5mm x 58 5mm x 44mm    Gear Ratio   152 3  1     Stall Torque   6 9N m @ 11 1V  4 2A7 3Nm @ 12 0V  4 4A8 9Nm @ 14 8V  5 5A    No Load Speed   50rpm @ 11 1V53rpm @ 12 0V66rpm @ 14 8V    Operating Temperature   5 degC    80 degC    Input Voltage   10 0   14 8V    Recommended  12 0V       Standby Current   40mA    Command Signal   Digital Packet    Protocol Type   XM540W150T Half Duplex Asynchronous Serial CommunicationXM540W150R RS485 Asynchronous Serial Communication 8bit  1stop  No Parity     Physical Connection   XM540W150T TTL Level Multidrop BUS XM540W150R RS485 Multidrop BUS    ID   0   252    Feedback   Position  Velocity  Current  Realtime tick  Trajectory  Temperature  Input Voltage  etc    Part Material   Full Metal GearMetal Front  Middle   Engineering Plastic Back       Performance Graph   performancegraph      assets images dxl x xm540_w150_performance_graph jpg % include en dxl note_performance_graph md %% include en dxl control_table_protocol2 md %    Control Table of EEPROM Area   controltableofeepromarea   Address       Size Byte        Data Name       Description       Access       Initial Value                          0 2  Model Number   modelnumber                      Model Number                              R   1130  2 4  Model Information   modelinformation            Model Information                         R     6 1  Firmware Version   firmwareversion              Firmware Version                          R     7 1  ID   id                                          DYNAMIXEL ID                              RW  1  8 1  Baud Rate   baudrate                            Communication Speed                       RW  1  9 1  Return Delay Time   returndelaytime            Response Delay Time                       RW  250  10 1  Drive Mode   drivemode                         Default Rotation Direction                RW  0  11 1  Operating Mode   operatingmode                 Operating Mode                            RW  3  12 1  Secondary Shadow  ID   secondaryshadowid      Secondary Shadow  ID                      RW  255  13 1  Protocol Version   protocolversion             Protocol Version                          RW  2  20 4  Homing Offset   homingoffset                   Home Position Offset                      RW  0  24 4  Moving Threshold   movingthreshold             Velocity Threshold for Movement Detection RW  10  31 1  Temperature Limit   temperaturelimit           Maximum Internal Temperature Limit        RW  80  32 2  Max Voltage Limit   maxvoltagelimit           Maximum Input Voltage Limit               RW  160  34 2  Min Voltage Limit   minvoltagelimit           Minimum Input Voltage Limit               RW  95  36 2  PWM Limit   pwmlimit                           Maximum PWM Limit                         RW  885  38 2  Current Limit   currentlimit                   Maximum Current Limit                     RW  2047  40 4  Acceleration Limit   accelerationlimit         Maximum Accleration Limit                 RW  32767  44 4  Velocity Limit   velocitylimit                 Maximum Velocity Limit                    RW  380  48 4  Max Position Limit   maxpositionlimit         Maximum Position Limit                    RW  4095  52 4  Min Position Limit   minpositionlimit         Minimum Position Limit                    RW  0  56 1  External Port Mode 1   externalport            External Port 1 Mode                      RW  3  57 1  External Port Mode 2   externalport            External Port 2 Mode                      RW  3  58 1  External Port Mode 3   externalport            External Port 3 Mode                      RW  3  63 1  Shutdown   shutdown                             Shutdown Error Information                RW  52     Control Table of RAM Area   controltableoframarea   Address       Size Byte        Data Name       Description       Access       Initial Value                          64 1  Torque Enable   torqueenable                 Motor Torque On Off                         RW  0  65 1  LED   led                                     Status LED On Off                           RW  0  68 1  Status Return Level   statusreturnlevel     Select Types of Status Return               RW  2  69 1  Registered Instruction   registeredinstruction  Check Reception of Instruction           R   0  70 1  Hardware Error Status   hardwareerrorstatus    Hardware Error Status                    R   0  76 2  Velocity I Gain   velocityigain             I Gain of Velocity                          RW  1920  78 2  Velocity P Gain   velocitypgain             P Gain of Velocity                          RW  100  80 2  Position D Gain   positiondgain             D Gain of Position                          RW  0  82 2  Position I Gain   positionigain             I Gain of Position                          RW  0  84 2  Position P Gain   positionpgain             P Gain of Position                          RW  800  88 2  Feedforward 2nd Gain   feedforward2ndgain   2nd Gain of FeedForward                    RW  0  90 2  Feedforward 1st Gain   feedforward1stgain   1st Gain of FeedForward                    RW  0  98 1  Bus Watchdog   buswatchdog                   DYNAMIXEL Bus Watchdog                      RW  0  100 2  Goal PWM   goalpwm                          Target PWM Value                            RW    102 2  Goal Current   goalcurrent                  Target Current Value                        RW    104 4  Goal Velocity   goalvelocity                Target Velocity Value                       RW    108 4  Profile Acceleration   profileacceleration  Acceleration Value of Profile               RW  0  112 4  Profile Velocity   profilevelocity          Velocity Value of Profile                   RW  0  116 4  Goal Position   goalposition                Target Position Value                       RW    120 2  Realtime Tick   realtimetick                Count Time in millisecond                   R     122 1  Moving   moving                              Movement Status                             R   0  123 1  Moving Status   movingstatus                Detailed Information of Movement Status     R   0  124 2  Present PWM   presentpwm                    Current PWM Value                           R     126 2  Present Current   presentcurrent            Current Current Value                       R     128 4  Present Velocity   presentvelocity          Current Velocity Value                      R     132 4  Present Position   presentposition          Current Position Value                      R     136 4  Velocity Trajectory   velocitytrajectory    Target Velocity Trajectory Generated by Profile R   140 4  Position Trajectory   positiontrajectory    Target Position Trajectory Generated by Profile R   144 2  Present Input Voltage   presentinputvoltage  Current Input Voltage                     R     146 1  Present Temperature   presenttemperature      Current Internal Temperature              R     152 2  External Port Data 1   externalportdata    The Data of External Port 1                 RW    154 2  External Port Data 2   externalportdata    The Data of External Port 2                 RW    156 2  External Port Data 3   externalportdata    The Data of External Port 3                 RW    168 2  Indirect Address 1   indirectaddress        Indirect Address 1                          RW  224  170 2  Indirect Address 2   indirectaddress        Indirect Address 2                          RW  225  172 2  Indirect Address 3   indirectaddress        Indirect Address 3                          RW  226  … … …                         … … …  218 2  Indirect Address 26   indirectaddress       Indirect Address 26                         RW  249  220 2  Indirect Address 27   indirectaddress       Indirect Address 27                         RW  250  222 2  Indirect Address 28   indirectaddress       Indirect Address 28                         RW  251  224 1  Indirect Data 1   indirectdata              Indirect Data 1                             RW  0  225 1  Indirect Data 2   indirectdata              Indirect Data 2                             RW  0  226 1  Indirect Data 3   indirectdata              Indirect Data 3                             RW  0  … … …                         … … …  249 1  Indirect Data 26   indirectdata             Indirect Data 26                            RW  0  250 1  Indirect Data 27   indirectdata             Indirect Data 27                            RW  0  251 1  Indirect Data 28   indirectdata             Indirect Data 28                            RW  0  578 2  Indirect Address 29   indirectaddress       Indirect Address 29                         RW  634  580 2  Indirect Address 30   indirectaddress       Indirect Address 30                         RW  635  582 2  Indirect Address 31   indirectaddress       Indirect Address 31                         RW  636  … … … … … …  628 2  Indirect Address 54   indirectaddress       Indirect Address 54                         RW  659  630 2  Indirect Address 55   indirectaddress       Indirect Address 55                         RW  660  632 2  Indirect Address 56   indirectaddress       Indirect Address 56                         RW  661  634 1  Indirect Data 29   indirectdata             Indirect Data 29                            RW  0  635 1  Indirect Data 30   indirectdata             Indirect Data 30                            RW  0  636 1  Indirect Data 31   indirectdata             Indirect Data 31                            RW  0  … … … … … …  659 1  Indirect Data 54   indirectdata             Indirect Data 54                            RW  0  660 1  Indirect Data 55   indirectdata             Indirect Data 55                            RW  0  661 1  Indirect Data 56   indirectdata             Indirect Data 56                            RW  0  Caution  Protocol 1 0 does not support addresses greater than 256  Therefore  Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0   noticewarning    Control Table Description   controltabledescription  Caution  Data in the EEPROM Area can only be written when the value of Torque Enable 64  is cleared to ‘0’   noticewarning       Model Number 0    modelnumber0    This address stores model number of the DYNAMIXEL        Firmware Version 6    firmwareversion6    This address stores firmware version of the DYNAMIXEL        ID 7    id7   % include en dxl control_table_id md %       Baud Rate 8    baudrate8   % include en dxl control_table_baudrate_2 md %       Return Delay Time 9    returndelaytime9   % include en dxl control_table_return_delay_time md %       Drive Mode 10    drivemode10   Drive Mode is availabe from the firmware version 38  Bit Item Description            Bit 2 0x04  7 0x80  N A Unused  always  0   Bit 1 0x02  Master Slave Configuration Dual Joint  Master mode  0    Operate as a Master DYNAMIXELSlave mode  1    Operate as a Slave DYNAMIXEL  Bit 0 0x01  Direction of Rotation Normal Mode 0  CCW Positive   CW Negative Reverse Mode 1  CCW Negative   CW Positive  % include en dxl control_table_x_dual_drivemode md %       Operating Mode 11    operatingmode11   % include en dxl control_table_opmode_six_2 md %       Secondary Shadow  ID 12    secondaryshadowid12   % include en dxl control_table_shadowid md %       Protocol Version 13    protocolversion13   % include en dxl control_table_protocolversion md %       Homing Offset 20    homingoffset20   % include en dxl control_table_homingoffset md %       Moving Threshold 24    movingthreshold24   % include en dxl control_table_movingthreshold md %       Temperature Limit 31    temperaturelimit31   % include en dxl control_table_temp_limit_2 md %       Min Max Voltage Limit 32  34    minmaxvoltagelimit3234   % include en dxl control_table_volt_limit_2 md %       PWM Limit 36    pwmlimit36   % include en dxl control_table_pwm_limit md %       Current Limit 38    currentlimit38   % include en dxl control_table_current_limit md %  Unit   Value Range              about  2 69 mA  0   2 047  Note  Current Limit 38  could be differ by each DYNAMIXEL so please check the Control Table   notice       Acceleration Limit 40    accelerationlimit40   % include en dxl control_table_acclimit md %       Velocity Limit 44    velocitylimit44   % include en dxl control_table_vellimit md %       Min Max Position Limit 48  52    minmaxpositionlimit4852   % include en dxl control_table_positionlimit md %       External Port Mode 1 2 3 56 57 58    externalportmode123565758   % include en dxl control_table_externalport_x md %       Shutdown 63    shutdown63   % include en dxl control_table_shutdown md %       Torque Enable 64    torqueenable64   % include en dxl control_table_torque_enable_2 md %       LED 65    led65   % include en dxl control_table_led md %       Status Return Level 68    statusreturnlevel68   % include en dxl control_table_status_return_lv md %       Registered Instruction 69    registeredinstruction69   % include en dxl control_table_reg_instruction md %       Hardware Error Status 70    hardwareerrorstatus70   This value indicates hardware error status % include en dxl control_table_shutdown md %       Velocity PI Gain 76  78    velocitypigain7678   % include en dxl control_table_velocity_pi_gain md %       Position PID Gain 80  82  84    positionpidgain808284        Feedforward 1st 2nd Gains 88  90    feedforward1st2ndgains8890   % include en dxl control_table_position_pid_gain md %% include en dxl control_table_current_position_pid_gain md %       Bus Watchdog 98    buswatchdog98   % include en dxl control_table_buswatchdog md %       Goal PWM 100    goalpwm100   % include en dxl control_table_goal_pwm md %      Goal Current 102   % include en dxl control_table_goal_current md %  Unit   Value Range              about  2 69 mA  Current Limit 38    Current Limit 38   Note  Applying high current to the motor for long period of time might damage the motor   notice       Goal Velocity 104    goalvelocity104   % include en dxl control_table_goal_velocity md %       Profile Acceleration 108    profileacceleration108   % include en dxl control_table_profile_acceleration md %       Profile Velocity 112    profilevelocity112   % include en dxl control_table_profile_velocity md %       Goal Position 116    goalposition116   % include en dxl control_table_goal_position_2 md %       Realtime Tick 120    realtimetick120   % include en dxl control_table_realtime_tick md %       Moving 122    moving122   % include en dxl control_table_moving_2 md %       Moving Status 123    movingstatus123   % include en dxl control_table_moving_status md %       Present PWM 124    presentpwm124   This value indicates current PWM  For more details  please refer to the  Goal PWM 100    goalpwm         Present Current 126    presentcurrent126   This value indicates current Current  For more details  please refer to the  Goal Current 102    goalcurrent         Present Velocity 128    presentvelocity128   This value indicates current Velocity  For more details  please refer to the Goal Velocity 104    goalvelocity         Present Position 132    presentposition132   % include en dxl control_table_present_position md %       Velocity Trajectory 136    velocitytrajectory136   % include en dxl control_table_velocity_trajectory md %       Position Trajectory 140    positiontrajectory140   % include en dxl control_table_position_trajectory md %       Present Input Voltage 144    presentinputvoltage144   % include en dxl control_table_present_volt_2 md %       Present Temperature 146    presenttemperature146   % include en dxl control_table_present_temp_2 md %       External Port Data 1 2 3   externalportdata123   % include en dxl control_table_externalportdata_x md %       Indirect Address   indirectaddress        Indirect Data   indirectdata   % include en dxl control_table_indirect_data md %   How to Assemble   howtoassemble     Wiring through Back Case   wiringthroughbackcase      assets images dxl x wiring_through_back_case jpg     Option Frame Assembly   optionframeassembly      assets images dxl x x430_option_frame jpg    Maintenance   maintenance % include en dxl horn_bearing_replacement md %   Reference   reference  Note   Compatibility Guide   notice    Quick Start   quickstart     Drawings   drawings   Download   X_540 pdf   Download   X540 dwg   Download   dummy_X540_std stp   Download   dummy_X540_idel stp  X_540 pdf  http  www robotis com service download php no 655 X540 dwg  http  www robotis com service download php no 654 dummy_X540_std stp  http  www robotis com service download php no 656 dummy_X540_idel stp  http  www robotis com service download php no 657 Compatibility Guide  http  en robotis com BlueAD board php bbs_id faq mode view bbs_no 47 page 1 key  keyword  sort  scate ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/x/xm540-w150/"
      } ,
  
  
      "docs-en-dxl-x-xm540-w270":  {
      "title": "XM540-W270-T/R",
      "content"	 : "  XM540W270T R     assets images dxl x x540series_product png    Specifications   specifications   Item             Specifications               MCU         ST CORTEXM3  STM32F103C8 @ 72Mhz  32Bit           Position Sensor         Contactless absolute encoder  12Bit  360 deg Maker  ams www ams com   Part No  AS5045   Motor         Coreless Motor          Baud Rate         9600 bps   4 5 Mbps          Control Algorithm   PID control        Degree of Precision   0 088 deg     Operating Modes   Current Control Mode  Velocity Control Mode  Position Control Mode  0 deg   360 deg   Extended Position Control Mode  Currentbased Position Control Mode  PWM Control Mode  Voltage Control Mode     Weight   165g    Dimensions  W x H x D    33 5mm x 58 5mm x 44mm    Gear Ratio   272 5  1     Stall Torque   10 0N m @ 11 1V  4 2A10 6Nm @ 12 0V  4 4A12 9Nm @ 14 8V  5 5A    No Load Speed   28rpm @ 11 1V30rpm @ 12 0V37rpm @ 14 8V    Operating Temperature   5 degC    80 degC    Input Voltage   10 0   14 8V    Recommended  12 0V       Standby Current   40mA    Command Signal   Digital Packet    Protocol Type   XM540W270T Half Duplex Asynchronous Serial CommunicationXM540W270R RS485 Asynchronous Serial Communication 8bit  1stop  No Parity     Physical Connection   XM540W270T TTL Level Multidrop BUS XM540W270R RS485 Multidrop BUS    ID   0   252    Feedback   Position  Velocity  Current  Realtime tick  Trajectory  Temperature  Input Voltage  etc    Part Material   Full Metal GearMetal Front  Middle   Engineering Plastic Back       Performance Graph   performancegraph      assets images dxl x xm540_w270_performance_graph jpg % include en dxl note_performance_graph md %% include en dxl control_table_protocol2 md %    Control Table of EEPROM Area   controltableofeepromarea   Address       Size Byte        Data Name       Description       Access       Initial Value                          0 2  Model Number   modelnumber                      Model Number                              R   1120  2 4  Model Information   modelinformation            Model Information                         R     6 1  Firmware Version   firmwareversion              Firmware Version                          R     7 1  ID   id                                          DYNAMIXEL ID                              RW  1  8 1  Baud Rate   baudrate                            Communication Speed                       RW  1  9 1  Return Delay Time   returndelaytime            Response Delay Time                       RW  250  10 1  Drive Mode   drivemode                         Default Rotation Direction                RW  0  11 1  Operating Mode   operatingmode                 Operating Mode                            RW  3  12 1  Secondary Shadow  ID   secondaryshadowid      Secondary Shadow  ID                      RW  255  13 1  Protocol Version   protocolversion             Protocol Version                          RW  2  20 4  Homing Offset   homingoffset                   Home Position Offset                      RW  0  24 4  Moving Threshold   movingthreshold             Velocity Threshold for Movement Detection RW  10  31 1  Temperature Limit   temperaturelimit           Maximum Internal Temperature Limit        RW  80  32 2  Max Voltage Limit   maxvoltagelimit           Maximum Input Voltage Limit               RW  160  34 2  Min Voltage Limit   minvoltagelimit           Minimum Input Voltage Limit               RW  95  36 2  PWM Limit   pwmlimit                           Maximum PWM Limit                         RW  885  38 2  Current Limit   currentlimit                   Maximum Current Limit                     RW  2047  40 4  Acceleration Limit   accelerationlimit         Maximum Accleration Limit                 RW  32767  44 4  Velocity Limit   velocitylimit                 Maximum Velocity Limit                    RW  278  48 4  Max Position Limit   maxpositionlimit         Maximum Position Limit                    RW  4095  52 4  Min Position Limit   minpositionlimit         Minimum Position Limit                    RW  0  56 1  External Port Mode 1   externalport            External Port 1 Mode                      RW  3  57 1  External Port Mode 2   externalport            External Port 2 Mode                      RW  3  58 1  External Port Mode 3   externalport            External Port 3 Mode                      RW  3  63 1  Shutdown   shutdown                             Shutdown Error Information                RW  52     Control Table of RAM Area   controltableoframarea   Address       Size Byte        Data Name       Description       Access       Initial Value                          64 1  Torque Enable   torqueenable                 Motor Torque On Off                         RW  0  65 1  LED   led                                     Status LED On Off                           RW  0  68 1  Status Return Level   statusreturnlevel     Select Types of Status Return               RW  2  69 1  Registered Instruction   registeredinstruction  Check Reception of Instruction           R   0  70 1  Hardware Error Status   hardwareerrorstatus    Hardware Error Status                    R   0  76 2  Velocity I Gain   velocityigain             I Gain of Velocity                          RW  1920  78 2  Velocity P Gain   velocitypgain             P Gain of Velocity                          RW  100  80 2  Position D Gain   positiondgain             D Gain of Position                          RW  0  82 2  Position I Gain   positionigain             I Gain of Position                          RW  0  84 2  Position P Gain   positionpgain             P Gain of Position                          RW  800  88 2  Feedforward 2nd Gain   feedforward2ndgain   2nd Gain of FeedForward                    RW  0  90 2  Feedforward 1st Gain   feedforward1stgain   1st Gain of FeedForward                    RW  0  98 1  Bus Watchdog   buswatchdog                   DYNAMIXEL Bus Watchdog                      RW  0  100 2  Goal PWM   goalpwm                          Target PWM Value                            RW    102 2  Goal Current   goalcurrent                  Target Current Value                        RW    104 4  Goal Velocity   goalvelocity                Target Velocity Value                       RW    108 4  Profile Acceleration   profileacceleration  Acceleration Value of Profile               RW  0  112 4  Profile Velocity   profilevelocity          Velocity Value of Profile                   RW  0  116 4  Goal Position   goalposition                Target Position Value                       RW    120 2  Realtime Tick   realtimetick                Count Time in millisecond                   R     122 1  Moving   moving                              Movement Status                             R   0  123 1  Moving Status   movingstatus                Detailed Information of Movement Status     R   0  124 2  Present PWM   presentpwm                    Current PWM Value                           R     126 2  Present Current   presentcurrent            Current Current Value                       R     128 4  Present Velocity   presentvelocity          Current Velocity Value                      R     132 4  Present Position   presentposition          Current Position Value                      R     136 4  Velocity Trajectory   velocitytrajectory    Target Velocity Trajectory Generated by Profile R   140 4  Position Trajectory   positiontrajectory    Target Position Trajectory Generated by Profile R   144 2  Present Input Voltage   presentinputvoltage  Current Input Voltage                     R     146 1  Present Temperature   presenttemperature      Current Internal Temperature              R     152 2  External Port Data 1   externalportdata    The Data of External Port 1                 RW    154 2  External Port Data 2   externalportdata    The Data of External Port 2                 RW    156 2  External Port Data 3   externalportdata    The Data of External Port 3                 RW    168 2  Indirect Address 1   indirectaddress        Indirect Address 1                          RW  224  170 2  Indirect Address 2   indirectaddress        Indirect Address 2                          RW  225  172 2  Indirect Address 3   indirectaddress        Indirect Address 3                          RW  226  … … …                         … … …  218 2  Indirect Address 26   indirectaddress       Indirect Address 26                         RW  249  220 2  Indirect Address 27   indirectaddress       Indirect Address 27                         RW  250  222 2  Indirect Address 28   indirectaddress       Indirect Address 28                         RW  251  224 1  Indirect Data 1   indirectdata              Indirect Data 1                             RW  0  225 1  Indirect Data 2   indirectdata              Indirect Data 2                             RW  0  226 1  Indirect Data 3   indirectdata              Indirect Data 3                             RW  0  … … …                         … … …  249 1  Indirect Data 26   indirectdata             Indirect Data 26                            RW  0  250 1  Indirect Data 27   indirectdata             Indirect Data 27                            RW  0  251 1  Indirect Data 28   indirectdata             Indirect Data 28                            RW  0  578 2  Indirect Address 29   indirectaddress       Indirect Address 29                         RW  634  580 2  Indirect Address 30   indirectaddress       Indirect Address 30                         RW  635  582 2  Indirect Address 31   indirectaddress       Indirect Address 31                         RW  636  … … … … … …  628 2  Indirect Address 54   indirectaddress       Indirect Address 54                         RW  659  630 2  Indirect Address 55   indirectaddress       Indirect Address 55                         RW  660  632 2  Indirect Address 56   indirectaddress       Indirect Address 56                         RW  661  634 1  Indirect Data 29   indirectdata             Indirect Data 29                            RW  0  635 1  Indirect Data 30   indirectdata             Indirect Data 30                            RW  0  636 1  Indirect Data 31   indirectdata             Indirect Data 31                            RW  0  … … … … … …  659 1  Indirect Data 54   indirectdata             Indirect Data 54                            RW  0  660 1  Indirect Data 55   indirectdata             Indirect Data 55                            RW  0  661 1  Indirect Data 56   indirectdata             Indirect Data 56                            RW  0  Caution  Protocol 1 0 does not support addresses greater than 256  Therefore  Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0   noticewarning    Control Table Description   controltabledescription  Caution  Data in the EEPROM Area can only be written when the value of Torque Enable 64  is cleared to ‘0’   noticewarning       Model Number 0    modelnumber0    This address stores model number of the DYNAMIXEL        Firmware Version 6    firmwareversion6    This address stores firmware version of the DYNAMIXEL        ID 7    id7   % include en dxl control_table_id md %       Baud Rate 8    baudrate8   % include en dxl control_table_baudrate_2 md %       Return Delay Time 9    returndelaytime9   % include en dxl control_table_return_delay_time md %       Drive Mode 10    drivemode10   Drive Mode is availabe from the firmware version 38  Bit Item Description            Bit 2 0x04  7 0x80  N A Unused  always  0   Bit 1 0x02  Master Slave Configuration Dual Joint  Master mode  0    Operate as a Master DYNAMIXELSlave mode  1    Operate as a Slave DYNAMIXEL  Bit 0 0x01  Direction of Rotation Normal Mode 0  CCW Positive   CW Negative Reverse Mode 1  CCW Negative   CW Positive  % include en dxl control_table_x_dual_drivemode md %       Operating Mode 11    operatingmode11   % include en dxl control_table_opmode_six_2 md %       Secondary Shadow  ID 12    secondaryshadowid12   % include en dxl control_table_shadowid md %       Protocol Version 13    protocolversion13   % include en dxl control_table_protocolversion md %       Homing Offset 20    homingoffset20   % include en dxl control_table_homingoffset md %       Moving Threshold 24    movingthreshold24   % include en dxl control_table_movingthreshold md %       Temperature Limit 31    temperaturelimit31   % include en dxl control_table_temp_limit_2 md %       Min Max Voltage Limit 32  34    minmaxvoltagelimit3234   % include en dxl control_table_volt_limit_2 md %       PWM Limit 36    pwmlimit36   % include en dxl control_table_pwm_limit md %       Current Limit 38    currentlimit38   % include en dxl control_table_current_limit md %  Unit   Value Range              about  2 69 mA  0   2 047  Note  Current Limit 38  could be differ by each DYNAMIXEL so please check the Control Table   notice       Acceleration Limit 40    accelerationlimit40   % include en dxl control_table_acclimit md %       Velocity Limit 44    velocitylimit44   % include en dxl control_table_vellimit md %       Min Max Position Limit 48  52    minmaxpositionlimit4852   % include en dxl control_table_positionlimit md %       External Port Mode 1 2 3 56 57 58    externalportmode123565758   % include en dxl control_table_externalport_x md %       Shutdown 63    shutdown63   % include en dxl control_table_shutdown md %       Torque Enable 64    torqueenable64   % include en dxl control_table_torque_enable_2 md %       LED 65    led65   % include en dxl control_table_led md %       Status Return Level 68    statusreturnlevel68   % include en dxl control_table_status_return_lv md %       Registered Instruction 69    registeredinstruction69   % include en dxl control_table_reg_instruction md %       Hardware Error Status 70    hardwareerrorstatus70   This value indicates hardware error status % include en dxl control_table_shutdown md %       Velocity PI Gain 76  78    velocitypigain7678   % include en dxl control_table_velocity_pi_gain md %       Position PID Gain 80  82  84    positionpidgain808284        Feedforward 1st 2nd Gains 88  90    feedforward1st2ndgains8890   % include en dxl control_table_position_pid_gain md %% include en dxl control_table_current_position_pid_gain md %       Bus Watchdog 98    buswatchdog98   % include en dxl control_table_buswatchdog md %       Goal PWM 100    goalpwm100   % include en dxl control_table_goal_pwm md %      Goal Current 102   % include en dxl control_table_goal_current md %  Unit   Value Range              about  2 69 mA  Current Limit 38    Current Limit 38   Note  Applying high current to the motor for long period of time might damage the motor   notice       Goal Velocity 104    goalvelocity104   % include en dxl control_table_goal_velocity md %       Profile Acceleration 108    profileacceleration108   % include en dxl control_table_profile_acceleration md %       Profile Velocity 112    profilevelocity112   % include en dxl control_table_profile_velocity md %       Goal Position 116    goalposition116   % include en dxl control_table_goal_position_2 md %       Realtime Tick 120    realtimetick120   % include en dxl control_table_realtime_tick md %       Moving 122    moving122   % include en dxl control_table_moving_2 md %       Moving Status 123    movingstatus123   % include en dxl control_table_moving_status md %       Present PWM 124    presentpwm124   This value indicates current PWM  For more details  please refer to the  Goal PWM 100    goalpwm         Present Current 126    presentcurrent126   This value indicates current Current  For more details  please refer to the  Goal Current 102    goalcurrent         Present Velocity 128    presentvelocity128   This value indicates current Velocity  For more details  please refer to the Goal Velocity 104    goalvelocity         Present Position 132    presentposition132   % include en dxl control_table_present_position md %       Velocity Trajectory 136    velocitytrajectory136   % include en dxl control_table_velocity_trajectory md %       Position Trajectory 140    positiontrajectory140   % include en dxl control_table_position_trajectory md %       Present Input Voltage 144    presentinputvoltage144   % include en dxl control_table_present_volt_2 md %       Present Temperature 146    presenttemperature146   % include en dxl control_table_present_temp_2 md %       External Port Data 1 2 3   externalportdata123   % include en dxl control_table_externalportdata_x md %       Indirect Address   indirectaddress        Indirect Data   indirectdata   % include en dxl control_table_indirect_data md %   How to Assemble   howtoassemble     Wiring through Back Case   wiringthroughbackcase      assets images dxl x wiring_through_back_case jpg     Option Frame Assembly   optionframeassembly      assets images dxl x x430_option_frame jpg    Maintenance   maintenance % include en dxl horn_bearing_replacement md %   Reference   reference  Note   Compatibility Guide   notice    Quick Start   quickstart     Drawings   drawings   Download   X_540 pdf   Download   X540 dwg   Download   dummy_X540_std stp   Download   dummy_X540_idel stp  X_540 pdf  http  www robotis com service download php no 655 X540 dwg  http  www robotis com service download php no 654 dummy_X540_std stp  http  www robotis com service download php no 656 dummy_X540_idel stp  http  www robotis com service download php no 657 Compatibility Guide  http  en robotis com BlueAD board php bbs_id faq mode view bbs_no 47 page 1 key  keyword  sort  scate ",
      "url": "http://0.0.0.0:4000/docs/en/dxl/x/xm540-w270/"
      } ,
  
  
      "docs-en-edu-bioloid-beginner":  {
      "title": "BIOLOID Beginner",
      "content"	 : "BIOLOID BeginnerIntroductionRobots of 4 DOF can be built with Beginner Kit   This kit is recommended for people who meet robots for the first time   Learning the principle of robot building          You can build up 14 example robots with Bioloid Beginner Kit and learn the principle of robot building       From a simple barrier bar of 1 DOF to an automobile or walking droid of 4 DOF  it is possible to build the robot and edit the example programs  It will help increasing your understanding for robot programming       Purchasing 4 more AX12  for Bioloid Beginner Kit  you can build intermediatelevel robots of 8 DOF       Also  purchasing 14 additional AX12  for Bioloid Beginner Kit and frame set for Comprehensive Kit  you can build intermediatelevel robots and advancedlevel robots of 18 DOF       You can also create your one and only robot by designing  assembling and programming it by yourself       Getting StartedPart List  CM5  AX12  AXS1PreparationAs shown in BIOLOID learning material  CM5 is supposed to support existing BIOLOID software  Behavior Control Program  Motion Editor etc   Therefore  if you want to use RoboPlus software in CM5  you need to change the firmware into other firmware which supports Roboplus  However  if you change the firmware  you would no longer be able to use the existing Bioloid software The newupgraded RoboPlus is an integrated programming software which can control Robotis products Therefore  CM5 based robots can be controlled by programming with RoboPlus The usage is as below   Download the Latest Version of RoboPlus   Execute RoboPlus after installation   Select RoboPlus Manager   Connect CM5 with the PC using serial cable   Execute Firmware Wizard by pressing Control Restoration icon on RoboPlus Manager   Select the port connected to the controller   Users must set manually the port connected to the controller  Finish other programs and continue the process since the controller cannot be recognized in case the port is in use   Select the port connected to the controller and press Find button   Turn the power of the controller off and on   To find the controller  the controller to be restored must be turned off and on   Check the controller information   When the controller is found  the information of current controller and the firmware to download are appeared   Check the model name whether the controller is connected by the user or not    The version of controller information is for Boot Loader  not for firmware    Start the firmware installation again   Press Next button to start firmware restoration  Please be careful not to interrupt the connection or turn the power off until it is completed   Check the controller firmware reinstallation result Executing above procedure  CM5 can be programmed with RoboPlus  Try to make the best robot with upgraded RoboPlus OperatingBefore executing the program  the appropriate task codes and motions must be downloaded into the robot   Turn on the power   If it is not charged  POWER LED does not blink  Please refer to Charging   Make the LED on Play blink by pressing MODE button   Press START button to execute the program   The LED is not blinking while the program is being executed Charging CM5To move a robot when it is not connected with SMPS  you have to use a battery  If the battery is discharged  please use by charging it according to following procedures       Connect SMSPS to CM5             Turn on the CM5 Power and press the U button      Note While the CM5 is being charged  the power LED blinks  The speed of blinking shows how much it is left before finishing the charging  It will be more faster as it completes the charging  Once the charging is done  it will blink for every 2 seconds TutorialScreen OutputObjective for this tutorial is to print 1 and 2 on the output screen as below Write Task Code      Execute RoboPlus Task Program     As seen in the picture below  go to Start  gt All Programs  gt ROBOTIS  gt RoboPlus  gt Software  gt RoboPlus Task to execute RoboPlus Task               RoboPlus Task Initial Screen                Select a Controller     Double click an empty line or press Enter  In the Select Control window  select the controller to use  then press the OK button             Generating Start Program     Select Start Program from the Select Instruction Type window  Start Program will be automatically generated in RoboPlus Task             Input Endless Loop command    To print the numbers on the screen endlessly  use the Endless Loop command Create a command line   Double click or press Enter on an empty line between  and  of Start Program to invoke the Select Instruction Type window  Select Loop  gt Endless Loop while 1   from the list             Input Load command    Use Load command to input a Print command  which is needed to print numbers on the screen  Insert Execute  gt Load  Assignment value  into an empty line between  and  of Endless Loop             Load 1 into Print    Choose the left parameter       among the Load parameters Explanation on the parameter   The left parameter receives input from the right parameter  Double click the left parameter        or press Enter key after clicking it once to invoke the Select Parameter Window  Select Controller  gt Print then press OK         Select Constant Numbers  gt Number  gt 1 for the right parameter       in the same way         When both parameters of the Load command have been set  it should look like below             Load 2 into Print with Line    Select  under Print command  at the end of the endless loop section   and add new lines by pressing the Space key  Repeat Steps 5 and 6 to input the Load command and to input  Controller  gt Print with Line and 2  The final task code is shown below             Save Task Code    Press Ctrl   S or the Save icon       Download Task CodeDownload the task code created above  How to Download Task Code Execute Task Code      Open the Program Output Monitor    To see the output of the program  you must open the Program Output Monitor BEFORE executing the program  There are three ways to open the Program Output Monitor                   Click on the View Print of Program in the Download Program window                    Click on the View Print of Program button in TOOLS       Press F5 or click on View Print of Program  V   menu under Program  P              Executing the Program    When you turn on the controller  the LED will blink  showing it is in standby mode  Press the MODE button to move it to PLAY  then press START to execute the downloaded task code  You should see 1 and 2 being printed on the Program Output Monitor       Button  amp LEDObjective for this tutorial is to program the U button to turn the AUX LED on and the D button to turn it off  Pressing the START button will end the program Write Task CodeDownload Task CodeDownload the task code created above  How to Download Task Code Execute Task CodeExecute the program and check whether the AUX LED turns on when you press the U button and turns off when you press the D button  Press START button to end Attacking DuckObjective for this tutorial is to build an attacking duck which attacks approaching objects  Please refer to 2211 Attacking Duck of the assembly manual and complete the hardware Caution Do not approach your face near the robot when the power is on  You may get injured by the robot The attacking patterns of the duck are as follows   If any object is not detected  the robot gets ready to attack by locating ID 1  joint in the middle and folding ID 2    ID 3  joints   If objects are detected on the left and the right side  the robot turns to the direction where objects are detected by moving ID 1  joint   If objects are detected at the front  the robot unfolds ID 2    ID 3  joints for attack   It goes back to the status of 2 above Write Task Code      Enter the basic value of the motor’s moving speed and Call initial behavior         If an object is detected from the left side of the robot  turn the beak left   If an object is detected by the left distance sensor of AXS1  the location value  present location  value of the ID 1  joint   20  is entered as the goal position to turn left   However  to prevent from turning too much  it is written to move only if the present location value is less than 812   If an object is detected from the right side of the robot  turn the beak right If an object is detected by the right distance sensor of AXS1  the location value  present location value of the ID 1  joint 20  is entered as the goal position to turn right   However  to prevent from turning too much  it is written to move only if the present location value is greater than 212   Attack if an object is detected at the frontIf an object is detected by the central distance sensor of AXS1  the robot attacks by calling Attack with beak   Make Initial BehaviorMove the beak in the center by inputting proper goal position value 512  into ID 1  joint  and then call Attack with Beak once to make initial behavior   Make Attack BehaviorMake behaviors such as attack behaviors and raising head  ready behavior  by inputting proper goal position values into ID 2   ID 3  joints  and program Behavior Wating 7  function which can stop the behavior control program processing shortly until each behavior is completed Download Task CodeDownload Complete Task Code  How to Download Task Code Execute Task CodePlay the downloaded task code Check if the attacking duck attacks an approaching object or not Do not approach your face near the robot when the power is on  You may get injured by the robot Obstacle Detecting CarObjective for this tutorial is to build an intellectual car which runs and avoids obstacles  Please refer to 229 Obstacle Detection Car of the assembly manual and complete the hardware The behavior patterns of the obstacle detection car pursuant to obstacle detection in each direction are as follows             Left      Front      Right      Behavior Pattern                                    Forward              O                  Turn Right                    O            Backward              O      O            Turn Right                          O      Turn Left              O            O      Forward                    O      O      Turn Left              O      O      O      Stop      The mode of the robot is changed to wheel mode  infinite spinning mode  to use AX12  as the wheels of the obstacle detection car Using RoboPlus Manager  set both the CW location limit value and the CCW location limit value of AX12  to 0 Write Task Code      Save the basic value of the motor’s moving speed as the variable        Use the standard value of the object detection and the object detection existence to judge object detection  To do so  set the object detection standard value         Call appropriate motion functions pursuant to the object detection existence value   Obstacle Detection Direction     Make Stop   Forward   Backward   Turn Right   Turn Left Motions  Each motor’s moving speed is set by adding moving speed value which is the set speed value at the beginning and CW0 and CCW0 which represent directions Download Task CodeDownload Complete Task Code  How to Download Task Code Execute Task CodePlay the downloaded task code  Check if the obstacle detection car runs and avoids the obstacles Walking Droid 1Objective for this tutorial is to make a walking droid which walks forward in normal situation and avoids obstacles Since the walking droid uses various postures when it performs such as walking  avoiding obstacles  etc   it is convenient to use by saving the postures as motions The following table represents the behavior patterns of the walking droid pursuant to surroundings and motion status             Status      Behavior                  Initially executed      Stay in basic posture              No obstacles      Walking forward              Obstacles Found      Stop and walking backward              After walking backward      Changing direction to the left              Obstacles found even if turned left      Changing direction to the left      Besides duplicated motions  4 motions must be made as below  and the robot can avoid obstacles while walking   Stop  Walking forward  Walking backward  Changing direction to the leftMake Motions  Execute RoboPlus Motion and connect to the controller   See Connect Robot   Enter the name on the page 1 to make Stop motion  and then add steps   The joint values of ID 1  2  3  4 are set to 512  The values are applied to the robot if the rightward arrow is pressed  and the set posture can be checked   This is the method that users enter the joint values directly    Adjust the executing time  It is set to 0 072 second which is the fastest time   Enter the name on the page 12 to make Walking Forward motion  and then add steps   Turn off torques of all joints by pressing torqueoff button  You can see all the joint values are set to OFF   The posture of robot are set by users  The following picture shows the walking posture of the walking droid   As shown above  if the posture of robot is set and the Torqueon button is pressed  the present joint values of the robot are entered automatically to the posture of robot  The currently entered robot’s joints can be read as steps’ posture if the leftward arrow button is pressed This is the method that users read the joint values from the robot    Repeating the procedure from number 5  add Walking Forward posture to each step  If the posture addition is completed  adjust the stop time and the execution time properly   If the motion execution button is pressed  the steps of present page are executed sequentially  Check if the robot is operating well   Using the same method so far  add Walking Backward on the page 13 and Turn Left on the page 15   Save the works have been done so far Download Motion FileDownload Example Motion File  How to Download Motion File Walking Droid 2Execute MotionsTo use this motion after saving the motions written on RoboPlus Motion in CM5  the motions of CM5 must be executed in the task code  Using the two parameters  the motions of robots can be executed Load command must be used to execute the motions  If the Load command is selected  two parameter are created  In one parameter on the left  Motion Page in Controller  gt Motion is selected  and in the other parameter on the right  the motion page number which includes desired motions is entered If the task code is written as below and downloaded and executed in CM5  the saved motions are executed on the page 5 Executing Asynchronous MotionsIt is a motion control method which makes robots do the next work without checking motion status of the robots  It is suitable for beginners because understanding the code is very intuitive  However  it may not be controlled as desired since duplicate execution can happen during the motion execution Executing Synchronous MotionsIt is a motion control method which make robots do the next work after completing the execution by checking the motion status of the robots  It is suitable for intermediatelevel users because the concept of MultiTask is needed  In the case of infinite repetition motions  the task code must be written well since it may wait continuously when the motion status is checked Infinite Repetition MotionsIt is effective to make regularlyrepeated motions such as walking as an infinite repetition motion Write Task Code  Call Ready when it is executed for the first time   Call Forward if there is no obstacle   If an object is detected by Central Distance Sensor  Stop and walk backward and then turn left   Even though it turns left  if an object is detected by Central Distance Sensor  it turns left until no object is detected   Write a  function which executes the motion on the page 1 where the Ready motion is saved  To wait until the motion is complete after execution  Call the function WaitMotion   Write a function which executes the motion on the page 12 where the Forward motion is saved  To wait until the motion is complete after execution  Call the function WaitMotion   Write a function which executes the motion on the page 13 where the Backward motion is saved  To wait until the motion is complete after execution  Call the function WaitMotion   Write a function which executes the motion on the page 15 where the TurnLeft motion is saved  To wait until the motion is complete after execution  Call the function WaitMotion   Check the parameter value of the motion status  and write a function which waits while the motion is operating Download Task CodeDownload Complete Task Code  How to Download Task Code Execute Task CodePlay the downloaded task code   Leave obstacles on the way of the path  and then check if the walking droid avoids the obstacles and walks Walking Droid 3After adding turnright motion to previously built Walking Droid  let us try wireless control Zigbee Communication  using RC100 Referring to Building Walking Droid 1  Making Motion  you can make the rightturn motion additionally on the page 4 of the motion For Zigbee communication  CM5 and RC100 are equipped with ZIG100 module   Please refer to the explanation pages on CM5 and RC100  If U   L   D   R buttons of RC100 are pressed  the Walking Droid performs forward   turn left   backward  turn right motions Write Task CodeBased on previously written task code in Building Walking Droid 2  Task Code  Wait until the new wireless data is coming in  and if the data is coming in  it is saved in the received data variable   In the received data  only the values regarding U   D   L   R keys in RC100 are sorted by  amp Bit Calculation   Compose the conditional sentences to perform forward   backward   turn left   turn right pursuant to the pressed buttons among all buttons  RCCall Ready at the moment of releasing the pressed button of RC100   Write a function which executes the motion on the page 14 where the TurnRight motion is saved   To wait until the motion is complete after execution  call the function WaitMotion Download Task CodeDownload Complete Task Code  How to Download Task Code Download Example Motion File  How to Download Motion File Execute Task CodePlay the downloaded task code  Using RC100  check if the robot moves to the desired directions by performing forward   backward   turn left   turn right motions Converting  bpg to  tskObjective for this tutorial is to convert  bpg files written in Behavior Control Program into the Task code   tsk  for RoboPlus Task Open  bpg File      Open  bpg file using Open  Press Menu ≫ File F  ≫ Open O   Shortcut Ctrl   O   or  Open   to select a file         Open  bpg file using Drag  amp Drop  Drag  bpg file to RoboPlus Task   Convert Commands      Start Program  Click here to see more information on the Start Program       It is the same as existing Start   Section End  of Start Program is the same as existing End               RoboPlus Task      Behavior Control Program 1 0                                    End Program   Click here to see more information on the End Program      It is the same as existing Jump to the Label of End Command               RoboPlus Task      Behavior Control Program 1 0                                      Start Block      End Block    Click here to see more information on the Start End of Block       Lately added concept  it is not included in existing Behavior Control Program 1 0             Comment or Memo    Click here to see more information       It is the same as existing Comment   It does not have any influences on motions               RoboPlus Task      Behavior Control Program 1 0                                    Calculate  Basic Calculation and Bit Calculation    Click here to see more information on the Calculate       It is the same as existing Compute               RoboPlus Task      Behavior Control Program 1 0                                    Load  Input Values    Click here to see more information on the Load       It is the same as existing  LOAD               RoboPlus Task      Behavior Control Program 1 0                                    Label  The Site for Jump    Click here to see more information on the Label       It is the same as existing Label  However  it is not possible to be called as in Behavior Control Program 1 0 only Jump is possible               RoboPlus Task      Behavior Control Program 1 0                                    Jump  goto    Click here to see more information on the Jump       It is the same as existing JUMP               RoboPlus Task      Behavior Control Program 1 0                                     if     else if     else    Click here to see more information on the if   else if   else       It is the same as existing  IF     ELSE IF     ELSE                RoboPlus Task                                    Behavior Control Program 1 0                          In case that  CONT IF  comes after existing  AND   it is changed to  amp amp                               In case that  CONT IF  comes after existing  OR    it is changed to                                                      RoboPlus Task                                    Behavior Control Program 1 0                              Endless Loop  while 1     Click here to see more information on the Endless Loop       It is the same as the code repeating the execution of certain blocks unconditionally using Label and JUMP               RoboPlus Task                                    Behavior Control Program 1 0                          Loop While  while Condition     Click here to see more information on the Loop While   It is the same as the code repeating the execution of certain blocks using Label and JUMP  depending on conditions             RoboPlus Task                                    Behavior Control Program 1 0                          Loop For  for    Click here to see more information on the Loop For   It is the same as the code repeating the execution of certain blocks only designated times using variables             RoboPlus Task                                    Behavior Control Program 1 0                              Break Loop  break    Click here to see more information on the Break Loop       It is used equally as the code jumping to the next label of repeated sentences               RoboPlus Task                                    Behavior Control Program 1 0                              Wait While  Conditional Repeat without Execution Paragraph    Click here to see more information on Wait While       In case the condition is True  it is used equally as the code jumping to its own label               RoboPlus Task                                    Behavior Control Program 1 0                              Callback Function  callback    Click here to see more information on Callback function       Lately added concept  it is not included in existing Behavior Control Program 1 0         Make Call Function   Click here to see more information on Make Call Function       The function is the same as the subroutine composed of existing Label and RETURN In RoboPlus Task  the function must be located outside of the block where is owned by Start Program  the block tied with  AND                 RoboPlus Task                                    Behavior Control Program 1 0                              Exit Function  return    Click here to see more information on Exit Function       It is the same as the code performing JUMP to the label of existing RETURN               RoboPlus Task                                    Behavior Control Program 1 0                        VideoDownloadThe following robots have less than 4 joints and the robots can be built with Beginner kit or Comprehensive Kit  Please refer to the assembly manual for Bioloid Beginner Kit and Comprehensive kit about how to assemble Download Task CodeIf you want to use RoboPlus program for CM5  the controller used for Bioloid Beginner Comprehensive Kits   you must update the firmware  Please refer to Firmware Update of RoboPlus Manager on how to update firmware Preparation  Call the task code   tsk  from RoboPlus Task           You can open it by doubleclicking the task code file       You can open it using Open File function of RoboPlus Task       You can open it by dragging  amp dropping on RoboPlus Task         Connect the PC and the Controller with USB2Dynamixel   Turn on the power of the controller Download      Connect the controller before downloading the task code   To download the task code  the controller must be connected to the PC Please refer to controller information for information on how to connect the controller to the PC          Select the correct COM port  if you know  or else use the Automatic Search function  to easily find out the appropriate port     If RoboPlus Task is unable to find a controller  the following error message will be shown   Check if the controller is connected to the PC   See controller information on how to connect the controller    Check if the controller is turned on   Check if the correct communication port was chosen   Select the download menu If the program has an error  you must find the error and correct it   See rule check error messages   Download the program If the downloading fails  it will automatically try again from the beginning   Execute the task code and your robot will move   Turn on the controller and execute the downloaded task code Please refer to each controller information to learn how to execute the task code  Download Motion FileFile motions can be converted into robot motions       Open the file motion to download         Connect to the robot         Click on the Download Motion menu and wait for the download to complete     Verify that the contents of the file motion have been copied to the robot motion as seen below VideoExamplesBeginner LevelThe following robots have joints less than 4  The robots can be built with Beginner kit or Comprehensive Kit  Please refer to the assembly manuals for Bioloid Beginner Kit and Comprehensive kit about how to assemble             Robot      Description                  1  Crossing Gate      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  Joint Mode When U button on CM5 is pressed  the gate will be opened  When D button on CM5 is pressed  the gate will be closed               2  Universal Gauge      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 2  Joint Mode When U button on CM5 is pressed  the speed of gauge will be increased  When D button on CM5 is pressed  the speed of gauge will be decreased               3  Sound Lever Meter      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  Joint Mode  AXS1 ID 100  The gauge will move according to the sound volumes detected  The sound level can be measured because the gauge makes move more when the sound is getting louder               4  Crocodile Mouth      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 3  Joint Mode  AXS1 ID 100  The mouth will be opened when the sensor detects an object  The mouth will be opened  if there is an object in the mouth  It will play a melody if no object is detected for 10 sec               5  Pan Tilt      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 3  4  Joint Mode Upper lower tilt joint will move upwards  when you press the U button on CM5  Upper lower tilt joint will move downwards  when you press the D button on CM5  Right Left pan joint will move rightwards  when you press the R button on CM5  Right Left pan joint will move leftwards  when you press the L button on CM5               6  Parking Gate      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  2  Joint Mode  AXS1 ID 100  If an object is detected from a sensor  the barrier bar will be open vertically  If an object is detected from a sensor and the barrier bar is pushed ahead at the same time  the bar will be open horizontally  The barrier bar will be closed  if no objects are detected               7  Melody Car      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  2  3  4  Wheel Mode  AXS1 ID 100  It will move forward some distance with melody  when L button is pressed  It will move backward some distance with melody  when R button is pressed  It will turn right with melody  when U button is pressed  It will turn left with melody  when D button is pressed               8  Robot Arm      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  2  3  Wheel Mode It will rotate its arms rightward  if you press the R button on CM5  It will rotate it arms leftward  if you press the L button on CM5  It will stretch its elbows  if you press the U button on CM5  It will bend over its elbows  if you press the D button on CM5  It will stretch its wrists  if you press the start button and U button at the same time  It will bend over its wrists  if you press the start button and D button at the same time               9  Obstacle Detecting Car      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  2  3  4  Wheel Mode  AXS1 ID 100  Operate the detecting car after installing obstacles on the driving path  Detect obstacles by itself  and avoid them while driving               10  Greeting Penguin      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  2  3  4  Joint Mode  AXS1 ID 100  If you put on your hands ahead of its head  it will bow  If you put on your hands on the right side of its head  it will lift up its right hand  If you put on your hands on the left side of its head  it will lift up its left hand               11  Attacking Duck      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  2  3  Joint Mode  AXS1 ID 100  If you try to touch on its head with hands  it will attack  using its beak  If  you touch on the right side of its head  it turns its head right  If you touch on the left side of its head  it turns its head left               12  Cliff Detecting Car      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  2  3  4  Wheel Mode  AXS1 ID 100  Operate the detecting car after installing cliffs and obstacles on the driving path  Detects cliffs and obstacles by it self  and avoid them while driving               13  Clapping Penguin      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  2  3  4  Joint Mode  AXS1 ID 100  It will bow  if you put your hands in front of its head  It will clap as much times as your clapping sounds are heard               14  Waking Droid      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload VideoDynamixel Setting AX12  ID 1  2  3  4  Joint Mode  AXS1 ID 100  Operate the walking droid  after installing obstacles on walking path  Detect obstacles by itself and avoid them while walking by feet       ReferencesReplacing Fuse CM5 The fuse prevents the over power that flows in the CM5 which can damage the circuit If the CM5 does not turn on with the battery but turns on when connected to the SMPS  replace your fuse If the fuse is disconnected  followings will happen   Can turn on the power of CM5 with SMPS only   The LED doesn’t blink even when you press the U button for charging The fuse used for CM5 is available at electric shops  Fuse Volume  220V 5A  Dynamixel ManagementDynamixels used as robot actuators possess many functions  This section explains how to change the dynamixel’s settings Changing the ID  Select the port the controller is connected to       Click Connect         A list of connected dynamixels is shown on the left  Click on the dynamixel you wish to change the ID of   Click on the ID row in the Control Table       Click on the ID List combo box to see a list of possible ID’s  Select the ID  then click Apply         To use in RoboPlus Motion and RoboPlus Task  the ID must be within the following ranges           The Dynamixel’s ID must be between 0 and 25       The ID for AXS1 should be set between 100 and 109       Changing the Movement ModeThe dynamixel can operate in 2 different modes   Wheel Mode  Rotates 360 degrees like a regular motor   Joint Mode  Moves at a set angle with normal servo motors The mode can be changed using RoboPlus Manager  Once the mode is set  it will be maintained  even when turned off   Select the port the controller is connected to       Click Connect         A list of connected Dynamixels is shown on the left   Click on the Dynamixel you wish to change the mode of  Then  click on the CW CCW Angle Limit line in the Control Table       To set to Wheel Mode  change the CW CCW Angle Limit value to 0   Or  simply click on the Wheel Mode button         To set to Joint Mode again  set the CW CCW Angle Limit value to any number other than 0  The initial values for Joint Mode are 0 for CW Angle Limit  and 1023 for CCW Angle Limit TroubleshootingIf you cannot find the dynamixel you are looking for using RoboPlus Manager  try the following   Connect just 1 Dynamixel and check if there are any duplicate IDs  If you see a Dynamixel on the left even though only 1 Dynamixel is connected  there is a high probability of a duplicate ID  Change the ID immediately   If you are unable to find any Dynamixels as in the image below  click on Dynamixel Search  If the communication speed is not set to 1Mbps  the Dynamixel Search function automatically resets the controller’s communication speed to 1Mbps to enable it to be recognized If the problem persists  your dynamixel may need repair  Please contact the service department of the company you purchased from ZIGBee Wireless ControlZIGBeeZIG100 110 uses ZIGBee for wireless communication  ZIGBee  like Bluetooth  is the communication technology commonly used in Personal Area Network  PAN   The communication quality of ZIGBee is better than that of IR  so it allows many users to control their robots without interferences Caution Please note that not all products include a zigbee module and may need to be purchased separately Controller  amp ZIGBeeOLLO and Bioloid both use the RC100  which uses IR communication method  To upgrade to the Zigbee communication method  you must purchase the  ZIG110 set separately  The ZIG110 set includes one Zig100 module  which is attached to the RC100  and one Zig110 module which is attached to the Controller Note The modules in a single Zigbee set have been preconfigured to communicate with each other  Therefore  a module from one set may not work with a module from another set  Please be careful not to mix them up             ZIG100 installed in RC100      ZIG110 installed in CM100                                          ZIG110 installed in CM510      ZIG100 installed in CM5                              Control Multiple RobotsThis method is to give out commands at once to several robots being used for dance or demonstrationGives out commands to the robot at once using the zigbee module’s broadcast modeBioloid Entry Advanced       Communication with the Zig2Serial and carious robots            Communication with the RC100 and carious robots        To use the CM5  connect the controller and ZIG100 module together   Use the RoboPlus Manager to set the wireless ID of ZIG100 module on the opposite party’s robot to 65535   No need to set the broadcast channel for communication   Use the RC100 to give commands directly or use the Zig2Serial to give commands using the PC             Device      Channel Default Value      Whether or not the channel can be changed                  CM5      1      Unchangeable              Zig2Serial      1      Changeable              RC100      1      Changeable      The channel for the ZIG100 mounted on the CM5 is unchangeable  Thus  all users must set their channel to  1 for broadcast communication  All channels for the devises must pair to communicate Bioloid Premium Kit CM700       Communication with the Zig2Serial and carious robots            Communication with the RC100 and carious robots        When using the CM510 CM700  connect the ZIG100 module with the controller   Use the RoboPlus Manager to change the opposite party’s wireless ID to 65535   The channel on the ZIG110 connected to the controller it set to  4  so the channels on the Zig2Serial and RC100 must be set to  4   How to change the RC100 channel  How to change the Zig2Serial channel            Device      Channel Default Value      Whether or not the channel can be changed                  CM510CM530      4      Unchangeable              Zig2Serial      1      Changeable              RC100      1      Changeable      The channel for the zigbee connected to the controller is not changeable  Thus  all users must set their channel to  4 for broadcast communicationAll channels for the devises must pair to communicate ",
      "url": "http://0.0.0.0:4000/docs/en/edu/bioloid/beginner/"
      } ,
  
  
      "docs-en-edu-bioloid-comprehensive":  {
      "title": "BIOLOID Comprehensive",
      "content"	 : "BIOLOID ComprehensiveIntroductionRobots of 18 DOF can be built with Comprehensive Kit including the contents in Beginner Kit  and it provides 26 examples of robots   Learning the principle of robot building          You can build up 26 example robots with Bioloid Comprehensive Kit and learn the principle of robot building       From a simple barrier bar of 1 DOF to a spider or a humanoid of 18 DOF  it is possible to build the robot and edit the example programs   It will help increasing your understanding for robot programming       You can also create your one and only robot by designing  assembling and programming it by yourself       Getting StartedPart List  CM5  AX12  AXS1PreparationAs shown in BIOLOID learning material  CM5 is supposed to support existing BIOLOID software  Behavior Control Program  Motion Editor etc   Therefore  if you want to use RoboPlus software in CM5  you need to change the firmware into other firmware which supports Roboplus  However  if you change the firmware  you would no longer be able to use the existing Bioloid software The newupgraded RoboPlus is an integrated programming software which can control Robotis products Therefore  CM5 based robots can be controlled by programming with RoboPlus The usage is as below   Download the Latest Version of RoboPlus   Execute RoboPlus after installation   Select RoboPlus Manager   Connect CM5 with the PC using serial cable   Execute Firmware Wizard by pressing Control Restoration icon on RoboPlus Manager   Select the port connected to the controller   Users must set manually the port connected to the controller  Finish other programs and continue the process since the controller cannot be recognized in case the port is in use   Select the port connected to the controller and press Find button   Turn the power of the controller off and on   To find the controller  the controller to be restored must be turned off and on   Check the controller information   When the controller is found  the information of current controller and the firmware to download are appeared   Check the model name whether the controller is connected by the user or not    The version of controller information is for Boot Loader  not for firmware    Start the firmware installation again   Press Next button to start firmware restoration  Please be careful not to interrupt the connection or turn the power off until it is completed   Check the controller firmware reinstallation result Executing above procedure  CM5 can be programmed with RoboPlus  Try to make the best robot with upgraded RoboPlus OperatingBefore executing the program  the appropriate task codes and motions must be downloaded into the robot   Turn on the power   If it is not charged  POWER LED does not blink  Please refer to Charging   Make the LED on Play blink by pressing MODE button   Press START button to execute the program   The LED is not blinking while the program is being executed Charging CM5To move a robot when it is not connected with SMPS  you have to use a battery  If the battery is discharged  please use by charging it according to following procedures       Connect SMSPS to CM5             Turn on the CM5 Power and press the U button      Note While the CM5 is being charged  the power LED blinks  The speed of blinking shows how much it is left before finishing the charging  It will be more faster as it completes the charging  Once the charging is done  it will blink for every 2 seconds TutorialScreen OutputObjective for this tutorial is to print 1 and 2 on the output screen as below Write Task Code      Execute RoboPlus Task Program     As seen in the picture below  go to Start  gt All Programs  gt ROBOTIS  gt RoboPlus  gt Software  gt RoboPlus Task to execute RoboPlus Task               RoboPlus Task Initial Screen                Select a Controller     Double click an empty line or press Enter  In the Select Control window  select the controller to use  then press the OK button             Generating Start Program     Select Start Program from the Select Instruction Type window  Start Program will be automatically generated in RoboPlus Task             Input Endless Loop command    To print the numbers on the screen endlessly  use the Endless Loop command Create a command line   Double click or press Enter on an empty line between  and  of Start Program to invoke the Select Instruction Type window  Select Loop  gt Endless Loop while 1   from the list             Input Load command    Use Load command to input a Print command  which is needed to print numbers on the screen  Insert Execute  gt Load  Assignment value  into an empty line between  and  of Endless Loop             Load 1 into Print    Choose the left parameter       among the Load parameters Explanation on the parameter   The left parameter receives input from the right parameter  Double click the left parameter        or press Enter key after clicking it once to invoke the Select Parameter Window  Select Controller  gt Print then press OK         Select Constant Numbers  gt Number  gt 1 for the right parameter       in the same way         When both parameters of the Load command have been set  it should look like below             Load 2 into Print with Line    Select  under Print command  at the end of the endless loop section   and add new lines by pressing the Space key  Repeat Steps 5 and 6 to input the Load command and to input  Controller  gt Print with Line and 2  The final task code is shown below             Save Task Code    Press Ctrl   S or the Save icon       Download Task CodeDownload the task code created above  How to Download Task Code Execute Task Code      Open the Program Output Monitor    To see the output of the program  you must open the Program Output Monitor BEFORE executing the program  There are three ways to open the Program Output Monitor                   Click on the View Print of Program in the Download Program window                    Click on the View Print of Program button in TOOLS       Press F5 or click on View Print of Program  V   menu under Program  P              Executing the Program    When you turn on the controller  the LED will blink  showing it is in standby mode  Press the MODE button to move it to PLAY  then press START to execute the downloaded task code  You should see 1 and 2 being printed on the Program Output Monitor       Button  amp LEDObjective for this tutorial is to program the U button to turn the AUX LED on and the D button to turn it off  Pressing the START button will end the program Write Task CodeDownload Task CodeDownload the task code created above  How to Download Task Code Execute Task CodeExecute the program and check whether the AUX LED turns on when you press the U button and turns off when you press the D button  Press START button to end Attacking DuckObjective for this tutorial is to build an attacking duck which attacks approaching objects  Please refer to 2211 Attacking Duck of the assembly manual and complete the hardware Caution Do not approach your face near the robot when the power is on  You may get injured by the robot The attacking patterns of the duck are as follows   If any object is not detected  the robot gets ready to attack by locating ID 1  joint in the middle and folding ID 2    ID 3  joints   If objects are detected on the left and the right side  the robot turns to the direction where objects are detected by moving ID 1  joint   If objects are detected at the front  the robot unfolds ID 2    ID 3  joints for attack   It goes back to the status of 2 above Write Task Code      Enter the basic value of the motor’s moving speed and Call initial behavior         If an object is detected from the left side of the robot  turn the beak left   If an object is detected by the left distance sensor of AXS1  the location value  present location  value of the ID 1  joint   20  is entered as the goal position to turn left   However  to prevent from turning too much  it is written to move only if the present location value is less than 812   If an object is detected from the right side of the robot  turn the beak right If an object is detected by the right distance sensor of AXS1  the location value  present location value of the ID 1  joint 20  is entered as the goal position to turn right   However  to prevent from turning too much  it is written to move only if the present location value is greater than 212   Attack if an object is detected at the frontIf an object is detected by the central distance sensor of AXS1  the robot attacks by calling Attack with beak   Make Initial BehaviorMove the beak in the center by inputting proper goal position value 512  into ID 1  joint  and then call Attack with Beak once to make initial behavior   Make Attack BehaviorMake behaviors such as attack behaviors and raising head  ready behavior  by inputting proper goal position values into ID 2   ID 3  joints  and program Behavior Wating 7  function which can stop the behavior control program processing shortly until each behavior is completed Download Task CodeDownload Complete Task Code  How to Download Task Code Execute Task CodePlay the downloaded task code Check if the attacking duck attacks an approaching object or not Do not approach your face near the robot when the power is on  You may get injured by the robot Obstacle Detecting CarObjective for this tutorial is to build an intellectual car which runs and avoids obstacles  Please refer to 229 Obstacle Detection Car of the assembly manual and complete the hardware The behavior patterns of the obstacle detection car pursuant to obstacle detection in each direction are as follows             Left      Front      Right      Behavior Pattern                                    Forward              O                  Turn Right                    O            Backward              O      O            Turn Right                          O      Turn Left              O            O      Forward                    O      O      Turn Left              O      O      O      Stop      The mode of the robot is changed to wheel mode  infinite spinning mode  to use AX12  as the wheels of the obstacle detection car Using RoboPlus Manager  set both the CW location limit value and the CCW location limit value of AX12  to 0 Write Task Code      Save the basic value of the motor’s moving speed as the variable        Use the standard value of the object detection and the object detection existence to judge object detection  To do so  set the object detection standard value         Call appropriate motion functions pursuant to the object detection existence value   Obstacle Detection Direction     Make Stop   Forward   Backward   Turn Right   Turn Left Motions  Each motor’s moving speed is set by adding moving speed value which is the set speed value at the beginning and CW0 and CCW0 which represent directions Download Task CodeDownload Complete Task Code  How to Download Task Code Execute Task CodePlay the downloaded task code  Check if the obstacle detection car runs and avoids the obstacles Walking Droid 1Objective for this tutorial is to make a walking droid which walks forward in normal situation and avoids obstacles Since the walking droid uses various postures when it performs such as walking  avoiding obstacles  etc   it is convenient to use by saving the postures as motions The following table represents the behavior patterns of the walking droid pursuant to surroundings and motion status             Status      Behavior                  Initially executed      Stay in basic posture              No obstacles      Walking forward              Obstacles Found      Stop and walking backward              After walking backward      Changing direction to the left              Obstacles found even if turned left      Changing direction to the left      Besides duplicated motions  4 motions must be made as below  and the robot can avoid obstacles while walking   Stop  Walking forward  Walking backward  Changing direction to the leftMake Motions  Execute RoboPlus Motion and connect to the controller   See Connect Robot   Enter the name on the page 1 to make Stop motion  and then add steps   The joint values of ID 1  2  3  4 are set to 512  The values are applied to the robot if the rightward arrow is pressed  and the set posture can be checked   This is the method that users enter the joint values directly    Adjust the executing time  It is set to 0 072 second which is the fastest time   Enter the name on the page 12 to make Walking Forward motion  and then add steps   Turn off torques of all joints by pressing torqueoff button  You can see all the joint values are set to OFF   The posture of robot are set by users  The following picture shows the walking posture of the walking droid   As shown above  if the posture of robot is set and the Torqueon button is pressed  the present joint values of the robot are entered automatically to the posture of robot  The currently entered robot’s joints can be read as steps’ posture if the leftward arrow button is pressed This is the method that users read the joint values from the robot    Repeating the procedure from number 5  add Walking Forward posture to each step  If the posture addition is completed  adjust the stop time and the execution time properly   If the motion execution button is pressed  the steps of present page are executed sequentially  Check if the robot is operating well   Using the same method so far  add Walking Backward on the page 13 and Turn Left on the page 15   Save the works have been done so far Download Motion FileDownload Example Motion File  How to Download Motion File Walking Droid 2Execute MotionsTo use this motion after saving the motions written on RoboPlus Motion in CM5  the motions of CM5 must be executed in the task code  Using the two parameters  the motions of robots can be executed Load command must be used to execute the motions  If the Load command is selected  two parameter are created  In one parameter on the left  Motion Page in Controller  gt Motion is selected  and in the other parameter on the right  the motion page number which includes desired motions is entered If the task code is written as below and downloaded and executed in CM5  the saved motions are executed on the page 5 Executing Asynchronous MotionsIt is a motion control method which makes robots do the next work without checking motion status of the robots  It is suitable for beginners because understanding the code is very intuitive  However  it may not be controlled as desired since duplicate execution can happen during the motion execution Executing Synchronous MotionsIt is a motion control method which make robots do the next work after completing the execution by checking the motion status of the robots  It is suitable for intermediatelevel users because the concept of MultiTask is needed  In the case of infinite repetition motions  the task code must be written well since it may wait continuously when the motion status is checked Infinite Repetition MotionsIt is effective to make regularlyrepeated motions such as walking as an infinite repetition motion Write Task Code  Call Ready when it is executed for the first time   Call Forward if there is no obstacle   If an object is detected by Central Distance Sensor  Stop and walk backward and then turn left   Even though it turns left  if an object is detected by Central Distance Sensor  it turns left until no object is detected   Write a  function which executes the motion on the page 1 where the Ready motion is saved  To wait until the motion is complete after execution  Call the function WaitMotion   Write a function which executes the motion on the page 12 where the Forward motion is saved  To wait until the motion is complete after execution  Call the function WaitMotion   Write a function which executes the motion on the page 13 where the Backward motion is saved  To wait until the motion is complete after execution  Call the function WaitMotion   Write a function which executes the motion on the page 15 where the TurnLeft motion is saved  To wait until the motion is complete after execution  Call the function WaitMotion   Check the parameter value of the motion status  and write a function which waits while the motion is operating Download Task CodeDownload Complete Task Code  How to Download Task Code Execute Task CodePlay the downloaded task code   Leave obstacles on the way of the path  and then check if the walking droid avoids the obstacles and walks Walking Droid 3After adding turnright motion to previously built Walking Droid  let us try wireless control Zigbee Communication  using RC100 Referring to Building Walking Droid 1  Making Motion  you can make the rightturn motion additionally on the page 4 of the motion For Zigbee communication  CM5 and RC100 are equipped with ZIG100 module   Please refer to the explanation pages on CM5 and RC100  If U   L   D   R buttons of RC100 are pressed  the Walking Droid performs forward   turn left   backward  turn right motions Write Task CodeBased on previously written task code in Building Walking Droid 2  Task Code  Wait until the new wireless data is coming in  and if the data is coming in  it is saved in the received data variable   In the received data  only the values regarding U   D   L   R keys in RC100 are sorted by  amp Bit Calculation   Compose the conditional sentences to perform forward   backward   turn left   turn right pursuant to the pressed buttons among all buttons  RCCall Ready at the moment of releasing the pressed button of RC100   Write a function which executes the motion on the page 14 where the TurnRight motion is saved   To wait until the motion is complete after execution  call the function WaitMotion Download Task CodeDownload Complete Task Code  How to Download Task Code Download Example Motion File  How to Download Motion File Execute Task CodePlay the downloaded task code  Using RC100  check if the robot moves to the desired directions by performing forward   backward   turn left   turn right motions Converting  bpg to  tskObjective for this tutorial is to convert  bpg files written in Behavior Control Program into the Task code   tsk  for RoboPlus Task Open  bpg File      Open  bpg file using Open  Press Menu ≫ File F  ≫ Open O   Shortcut Ctrl   O   or  Open   to select a file         Open  bpg file using Drag  amp Drop  Drag  bpg file to RoboPlus Task   Convert Commands      Start Program  Click here to see more information on the Start Program       It is the same as existing Start   Section End  of Start Program is the same as existing End               RoboPlus Task      Behavior Control Program 1 0                                    End Program   Click here to see more information on the End Program      It is the same as existing Jump to the Label of End Command               RoboPlus Task      Behavior Control Program 1 0                                      Start Block      End Block    Click here to see more information on the Start End of Block       Lately added concept  it is not included in existing Behavior Control Program 1 0             Comment or Memo    Click here to see more information       It is the same as existing Comment   It does not have any influences on motions               RoboPlus Task      Behavior Control Program 1 0                                    Calculate  Basic Calculation and Bit Calculation    Click here to see more information on the Calculate       It is the same as existing Compute               RoboPlus Task      Behavior Control Program 1 0                                    Load  Input Values    Click here to see more information on the Load       It is the same as existing  LOAD               RoboPlus Task      Behavior Control Program 1 0                                    Label  The Site for Jump    Click here to see more information on the Label       It is the same as existing Label  However  it is not possible to be called as in Behavior Control Program 1 0 only Jump is possible               RoboPlus Task      Behavior Control Program 1 0                                    Jump  goto    Click here to see more information on the Jump       It is the same as existing JUMP               RoboPlus Task      Behavior Control Program 1 0                                     if     else if     else    Click here to see more information on the if   else if   else       It is the same as existing  IF     ELSE IF     ELSE                RoboPlus Task                                    Behavior Control Program 1 0                          In case that  CONT IF  comes after existing  AND   it is changed to  amp amp                               In case that  CONT IF  comes after existing  OR    it is changed to                                                      RoboPlus Task                                    Behavior Control Program 1 0                              Endless Loop  while 1     Click here to see more information on the Endless Loop       It is the same as the code repeating the execution of certain blocks unconditionally using Label and JUMP               RoboPlus Task                                    Behavior Control Program 1 0                          Loop While  while Condition     Click here to see more information on the Loop While   It is the same as the code repeating the execution of certain blocks using Label and JUMP  depending on conditions             RoboPlus Task                                    Behavior Control Program 1 0                          Loop For  for    Click here to see more information on the Loop For   It is the same as the code repeating the execution of certain blocks only designated times using variables             RoboPlus Task                                    Behavior Control Program 1 0                              Break Loop  break    Click here to see more information on the Break Loop       It is used equally as the code jumping to the next label of repeated sentences               RoboPlus Task                                    Behavior Control Program 1 0                              Wait While  Conditional Repeat without Execution Paragraph    Click here to see more information on Wait While       In case the condition is True  it is used equally as the code jumping to its own label               RoboPlus Task                                    Behavior Control Program 1 0                              Callback Function  callback    Click here to see more information on Callback function       Lately added concept  it is not included in existing Behavior Control Program 1 0         Make Call Function   Click here to see more information on Make Call Function       The function is the same as the subroutine composed of existing Label and RETURN In RoboPlus Task  the function must be located outside of the block where is owned by Start Program  the block tied with  AND                 RoboPlus Task                                    Behavior Control Program 1 0                              Exit Function  return    Click here to see more information on Exit Function       It is the same as the code performing JUMP to the label of existing RETURN               RoboPlus Task                                    Behavior Control Program 1 0                        VideoDownloadThe following robots have less than 4 joints and the robots can be built with Beginner kit or Comprehensive Kit  Please refer to the assembly manual for Bioloid Beginner Kit and Comprehensive kit about how to assemble Download Task CodeIf you want to use RoboPlus program for CM5  the controller used for Bioloid Beginner Comprehensive Kits   you must update the firmware  Please refer to Firmware Update of RoboPlus Manager on how to update firmware Preparation  Call the task code   tsk  from RoboPlus Task           You can open it by doubleclicking the task code file       You can open it using Open File function of RoboPlus Task       You can open it by dragging  amp dropping on RoboPlus Task         Connect the PC and the Controller with USB2Dynamixel   Turn on the power of the controller Download      Connect the controller before downloading the task code   To download the task code  the controller must be connected to the PC Please refer to controller information for information on how to connect the controller to the PC          Select the correct COM port  if you know  or else use the Automatic Search function  to easily find out the appropriate port     If RoboPlus Task is unable to find a controller  the following error message will be shown   Check if the controller is connected to the PC   See controller information on how to connect the controller    Check if the controller is turned on   Check if the correct communication port was chosen   Select the download menu If the program has an error  you must find the error and correct it   See rule check error messages   Download the program If the downloading fails  it will automatically try again from the beginning   Execute the task code and your robot will move   Turn on the controller and execute the downloaded task code Please refer to each controller information to learn how to execute the task code  Download Motion FileFile motions can be converted into robot motions       Open the file motion to download         Connect to the robot         Click on the Download Motion menu and wait for the download to complete     Verify that the contents of the file motion have been copied to the robot motion as seen below VideoExamplesBeginner LevelThe following robots have joints less than 4  The robots can be built with Beginner kit or Comprehensive Kit  Please refer to the assembly manuals for Bioloid Beginner Kit and Comprehensive kit about how to assemble             Robot      Description                  1  Crossing Gate      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  Joint Mode When U button on CM5 is pressed  the gate will be opened  When D button on CM5 is pressed  the gate will be closed               2  Universal Gauge      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 2  Joint Mode When U button on CM5 is pressed  the speed of gauge will be increased  When D button on CM5 is pressed  the speed of gauge will be decreased               3  Sound Lever Meter      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  Joint Mode  AXS1 ID 100  The gauge will move according to the sound volumes detected  The sound level can be measured because the gauge makes move more when the sound is getting louder               4  Crocodile Mouth      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 3  Joint Mode  AXS1 ID 100  The mouth will be opened when the sensor detects an object  The mouth will be opened  if there is an object in the mouth  It will play a melody if no object is detected for 10 sec               5  Pan Tilt      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 3  4  Joint Mode Upper lower tilt joint will move upwards  when you press the U button on CM5  Upper lower tilt joint will move downwards  when you press the D button on CM5  Right Left pan joint will move rightwards  when you press the R button on CM5  Right Left pan joint will move leftwards  when you press the L button on CM5               6  Parking Gate      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  2  Joint Mode  AXS1 ID 100  If an object is detected from a sensor  the barrier bar will be open vertically  If an object is detected from a sensor and the barrier bar is pushed ahead at the same time  the bar will be open horizontally  The barrier bar will be closed  if no objects are detected               7  Melody Car      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  2  3  4  Wheel Mode  AXS1 ID 100  It will move forward some distance with melody  when L button is pressed  It will move backward some distance with melody  when R button is pressed  It will turn right with melody  when U button is pressed  It will turn left with melody  when D button is pressed               8  Robot Arm      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  2  3  Wheel Mode It will rotate its arms rightward  if you press the R button on CM5  It will rotate it arms leftward  if you press the L button on CM5  It will stretch its elbows  if you press the U button on CM5  It will bend over its elbows  if you press the D button on CM5  It will stretch its wrists  if you press the start button and U button at the same time  It will bend over its wrists  if you press the start button and D button at the same time               9  Obstacle Detecting Car      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  2  3  4  Wheel Mode  AXS1 ID 100  Operate the detecting car after installing obstacles on the driving path  Detect obstacles by itself  and avoid them while driving               10  Greeting Penguin      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  2  3  4  Joint Mode  AXS1 ID 100  If you put on your hands ahead of its head  it will bow  If you put on your hands on the right side of its head  it will lift up its right hand  If you put on your hands on the left side of its head  it will lift up its left hand               11  Attacking Duck      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  2  3  Joint Mode  AXS1 ID 100  If you try to touch on its head with hands  it will attack  using its beak  If  you touch on the right side of its head  it turns its head right  If you touch on the left side of its head  it turns its head left               12  Cliff Detecting Car      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  2  3  4  Wheel Mode  AXS1 ID 100  Operate the detecting car after installing cliffs and obstacles on the driving path  Detects cliffs and obstacles by it self  and avoid them while driving               13  Clapping Penguin      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting AX12  ID 1  2  3  4  Joint Mode  AXS1 ID 100  It will bow  if you put your hands in front of its head  It will clap as much times as your clapping sounds are heard               14  Waking Droid      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload VideoDynamixel Setting AX12  ID 1  2  3  4  Joint Mode  AXS1 ID 100  Operate the walking droid  after installing obstacles on walking path  Detect obstacles by itself and avoid them while walking by feet       Intermediate LevelThe following robots have joints less than 8  The robots can be built with 4 additional AX12  to Beginner Kit or Comprehensive Kit  Please refer to the assembly manual for Bioloid Comprehensive Kit             Robot      Description                  1  Probing Robot      Download Assembly Check Task CodeDownload Task CodeDownload VideoDynamixel SettingAX12  ID 1  2  3  4  Wheel ModeAX12  ID 5  6  7  Joint ModeAXS1 ID 100  Operate the Probing Robot after installing a various size of obstacles on driving path  Please check if it drives avoiding too big obstacles  Please checks if it lifts up and puts down small obstacles aside to keep driving               2  Excavator      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel SettingAX12  ID 1  2  3  4  Wheel ModeAX12  ID 5  6  7  Joint ModeAXS1 ID 100  Operate the excavator after installing obstacles on the driving path  Please check if it rotates into the detected direction and excavates with robot arms when obstacles are detected from a sensor               3  Robot Flower      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload Video Dynamixel SettingAX12  ID 1  2  3  4  5  6  Joint ModeAXS1 ID 100  In bright place  it will blossom out and move slowly as if it is dancing  In dark place  it will close up its petals into a bud               4  Fawn      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload Video Dynamixel SettingAX12  ID 1  2  3  4  5  6  7  8  Joint ModeAXS1 ID 100  The Fawn will sit down and look around  when there are no changes  If you put on an object ahead of its face  it will keep following the objects               5  Turtle      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload Video Dynamixel SettingAX12  ID 1  2  3  4  5  6  7  8  Joint ModeAXS1 ID 100  Operate the turtle after installing obstacles on the walking path  Please check if the turtle avoids the obstacles during its moving               6  Spider      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload Video Dynamixel SettingAX12  ID 1  2  3  4  5  6  7  8  Joint ModeAXS1 ID 100  It will attack if it detects an object ahead of its head during walking  It will pretend to being dead  if it detects an object upper of its head during walking               7  GerWalk      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload Video Dynamixel SettingAX12  ID 1  2  3  4  5  6  7  Joint ModeAXS1 ID 100  Place an obstacle in the gerwalk’s path then turn on  Detects and avoids obstacles while walking               8  Battle Droid      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload Video Dynamixel SettingAX12  ID 1  2  3  4  5  6  7  8  Joint ModeAXS1 ID 100  Operate the battle droid after installing obstacles on the walking path  It will attack obstacles with its both arms during its walking  When the battle droid is fallen down  it will stand up by itself  if you clap out for more than 3 times       Advanced LevelThe following robots has joints less than 18   The robots can be built with Bioloid Comprehensive Kit  Using Beginner Kit  if you purchase the frame set and 14 additional AX12   you can build the robots as below  Please refer to the assembly manual for Bioloid Comprehensive Kit             Robot      Description                  1  Dinosaur      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload VideoDynamixel SettingAX12  ID 1   15  Joint ModeAXS1 ID 100  Operate the dinosaur robot after installing obstacles on the walking path  Please check if the dinosaur robot attacks the obstacles  It will keep walking if obstacles are taken away               2  Puppy      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload Video Dynamixel SettingAX12  ID 1  4   17  Joint ModeAXS1 ID 100  Operate the puppy after installing obstacles on the driving path  Please check if it moves avoiding the obstacles if a sound is heard  It will act cute if you touch its lips  It will fall asleep if there are no changes for some time               3  King Spider      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload Video Dynamixel SettingAX12  ID 1   18  Joint ModeAXS1 ID 100  It will move avoiding the obstacles on its walking path  It will attack if an object is detected near ahead  It will shrink back  if an object approaches from above  It will fall sleep if there are no changes for some time               4  Humanoid      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload Video Dynamixel SettingAX12  ID 1   18  Joint ModeAXS1 ID 100  If you clap after pressing the start button on CM5  it will dance  If you clap after pressing the U button on CM5  it will clap as you do  and if an object is detected ahead  it will bow  If you press the L button on CM5  it will take an attacking pose  and start to attack when an object is detected  If you press the D button on CM5  it will walk avoiding the obstacles by itself  When the robot is lying down  if you clap for more than 3 times  it will stand up       ReferencesReplacing Fuse CM5 The fuse prevents the over power that flows in the CM5 which can damage the circuit If the CM5 does not turn on with the battery but turns on when connected to the SMPS  replace your fuse If the fuse is disconnected  followings will happen   Can turn on the power of CM5 with SMPS only   The LED doesn’t blink even when you press the U button for charging The fuse used for CM5 is available at electric shops  Fuse Volume  220V 5A  Dynamixel ManagementDynamixels used as robot actuators possess many functions  This section explains how to change the dynamixel’s settings Changing the ID  Select the port the controller is connected to       Click Connect         A list of connected dynamixels is shown on the left  Click on the dynamixel you wish to change the ID of   Click on the ID row in the Control Table       Click on the ID List combo box to see a list of possible ID’s  Select the ID  then click Apply         To use in RoboPlus Motion and RoboPlus Task  the ID must be within the following ranges           The Dynamixel’s ID must be between 0 and 25       The ID for AXS1 should be set between 100 and 109       Changing the Movement ModeThe dynamixel can operate in 2 different modes   Wheel Mode  Rotates 360 degrees like a regular motor   Joint Mode  Moves at a set angle with normal servo motors The mode can be changed using RoboPlus Manager  Once the mode is set  it will be maintained  even when turned off   Select the port the controller is connected to       Click Connect         A list of connected Dynamixels is shown on the left   Click on the Dynamixel you wish to change the mode of  Then  click on the CW CCW Angle Limit line in the Control Table       To set to Wheel Mode  change the CW CCW Angle Limit value to 0   Or  simply click on the Wheel Mode button         To set to Joint Mode again  set the CW CCW Angle Limit value to any number other than 0  The initial values for Joint Mode are 0 for CW Angle Limit  and 1023 for CCW Angle Limit TroubleshootingIf you cannot find the dynamixel you are looking for using RoboPlus Manager  try the following   Connect just 1 Dynamixel and check if there are any duplicate IDs  If you see a Dynamixel on the left even though only 1 Dynamixel is connected  there is a high probability of a duplicate ID  Change the ID immediately   If you are unable to find any Dynamixels as in the image below  click on Dynamixel Search  If the communication speed is not set to 1Mbps  the Dynamixel Search function automatically resets the controller’s communication speed to 1Mbps to enable it to be recognized If the problem persists  your dynamixel may need repair  Please contact the service department of the company you purchased from ZIGBee Wireless ControlZIGBeeZIG100 110 uses ZIGBee for wireless communication  ZIGBee  like Bluetooth  is the communication technology commonly used in Personal Area Network  PAN   The communication quality of ZIGBee is better than that of IR  so it allows many users to control their robots without interferences Caution Please note that not all products include a zigbee module and may need to be purchased separately Controller  amp ZIGBeeOLLO and Bioloid both use the RC100  which uses IR communication method  To upgrade to the Zigbee communication method  you must purchase the  ZIG110 set separately  The ZIG110 set includes one Zig100 module  which is attached to the RC100  and one Zig110 module which is attached to the Controller Note The modules in a single Zigbee set have been preconfigured to communicate with each other  Therefore  a module from one set may not work with a module from another set  Please be careful not to mix them up             ZIG100 installed in RC100      ZIG110 installed in CM100                                          ZIG110 installed in CM510      ZIG100 installed in CM5                              Control Multiple RobotsThis method is to give out commands at once to several robots being used for dance or demonstrationGives out commands to the robot at once using the zigbee module’s broadcast modeBioloid Entry Advanced       Communication with the Zig2Serial and carious robots            Communication with the RC100 and carious robots        To use the CM5  connect the controller and ZIG100 module together   Use the RoboPlus Manager to set the wireless ID of ZIG100 module on the opposite party’s robot to 65535   No need to set the broadcast channel for communication   Use the RC100 to give commands directly or use the Zig2Serial to give commands using the PC             Device      Channel Default Value      Whether or not the channel can be changed                  CM5      1      Unchangeable              Zig2Serial      1      Changeable              RC100      1      Changeable      The channel for the ZIG100 mounted on the CM5 is unchangeable  Thus  all users must set their channel to  1 for broadcast communication  All channels for the devises must pair to communicate Bioloid Premium Kit CM700       Communication with the Zig2Serial and carious robots            Communication with the RC100 and carious robots        When using the CM510 CM700  connect the ZIG100 module with the controller   Use the RoboPlus Manager to change the opposite party’s wireless ID to 65535   The channel on the ZIG110 connected to the controller it set to  4  so the channels on the Zig2Serial and RC100 must be set to  4   How to change the RC100 channel  How to change the Zig2Serial channel            Device      Channel Default Value      Whether or not the channel can be changed                  CM510CM530      4      Unchangeable              Zig2Serial      1      Changeable              RC100      1      Changeable      The channel for the zigbee connected to the controller is not changeable  Thus  all users must set their channel to  4 for broadcast communicationAll channels for the devises must pair to communicate ",
      "url": "http://0.0.0.0:4000/docs/en/edu/bioloid/comprehensive/"
      } ,
  
  
      "docs-en-edu-bioloid-gp":  {
      "title": "BIOLOID GP",
      "content"	 : "BIOLOID GPIntroduction  Best humanoid robot with highquality Dynamixel AX18F  legs   Strong  lightweight aluminum frames  Excellent mobility such as turning during walking or highspeed walking  Basic humanoid motions such as combat and soccer modes provided  Selfpositioncorrecting using Gyro sensor  Gripper set and sensors included for various missions  Wireless remote included  Zigbee installed   Uptodate version of RoboPlus programming software included  Digital Packet communication and simple Daisy Chain cable arrangementGetting StartedPart ListOperatingDownloading the Program  Program for type A is installed by default in CM530   You can find task codes and motion files for other actions on the Default Program page Turning the Robot on  Turn the power switch on and the LED will start blinking   Use the MODE button to move the LED to PLAY   The LED will move each time you press the MODE button   Press the START button   Check whether the LED on PLAY is blinking           If the LED does not turn on  check the power cable connection       If there are no problems with cable  recharge your battery   Please refer to Charging for more information       The power does not turn on   Is the battery properly connected   Is the battery fully charged   Is the battery fuse intact           Please refer Fuse Replacement for information on how to replace the fuse       I want to check how much battery I have left Turn the CM530 on and press the U button  The LED will turn on to show how much battery you have left as seen in the figure below The robot makes a continuous warning sound while moving   The alarm indicates that the robot is low on batteries   Immediately recharge your battery Refer to Charge    If you do not replace the battery right away  the robot may turn off without warning and fall  which can cause severe damage Checking the robot’s basic posture  To check whether the robot has been assembled correctly   When the robot is turned on  it defaults to the pose shown below       Check the angles of the arms and legs  If they are different from the picture  go back to Check Assembly Mode         Check whether the cables have been assembled on the outer part of the leg   Note If the robot has been incorrectly assembled to an extent where it may be severely damaged  a warning sound will be activated  Also  the LED of the motor with the problem will turn on and release its torque to prevent damage Robot in Action  U  Soccer Mode  D  Battle Mode  L or R  Performance ModeNote Operating the robot with the RC100 without selecting the mode will automatically start the soccer mode   Press the POWER MODE button for 2 seconds to power on   Press the buttons below to control the robot Walking Motions            Buttons      Motion      Buttons      Motion                  U      Forward      D      Backward              L      Turn Left      R      Turn Right              U   L      Walk Forward   Left      U   R      Walk Forward   Right              L   5      Left Sidestep      L   5   6      Fast Left Sidestep              L   U   5      Left Forward Diagonal Step      L   D   5      Left Backward Diagonal Step              R   5      Right Sidestep      R   5   6      Fast Right Sidestep              R   U   5      Right Forward Diagonal Step      R   D   5      Right Backward Diagonal Step      Standard Buttons  Motion  Buttons  Motion   — — — —  1   U Gets up facing up 1   D Gets up facing down  5 6 U 1 Soccer Mode Change Mode  5 6 D 3 Battle Mode Change Mode   5 6 L 2 Performance Mode Change Mode    U Soccer Mode            Buttons      Motion      Buttons      Motion                  2   U      Left Leg   Forward Kick      4   U      Right Leg   Forward Kick              2   D      Left Leg   Back Kick      4   D      Right Leg   Back Kick              2   L      Left Leg   Left Kick      4   L      Right Leg   Left Kick              2   R      Left Leg   Right Kick      4   R      Right Leg   Right Kick              3      Defense Standby      3   L      Block Ball   Left              3   U      Defense      3   R      Block Ball   Right      D Battle Mode            Buttons      Motion      Buttons      Motion                  2   U      Hit   Forward Attack      3      Defense              2   L      Hit   Left Attack      2   R      Hit   Right Attack              4   U      Upper Body Tackle      4   D      Lower Body Tackle              4   L      Left Strong Tackle      4   R      Right Strong Tackle      L R Performance Mode            Buttons      Motion      Buttons      Motion                  2   U      Gretting      2   R      Handstand              2   D      Clap Twice       3   U      Roll on Side              2   L      Clap 337       3   D      Push ups      After mounting the IR receiver on CM530 under control mode  you can set the channels to control it remotely by pressing the Aux button  If you change the channel of the controller  you must also change the channel of RC100  On how to change the channel of RC100  please refer to Changing RC100’s Channel   Setting the CM530 IR Channels  Start   U L D R             Buttons      Description                  Start   U      Set the RC100 channel as 1              Start   L      Set the RC100 channel as 2              Start   D      Set the RC100 channel as 3              Start   R      Set the RC100 channel as 4      My remote controller does not work properly   Set to control mode   Check whether the IR receiver has been properly connected   Check whether the remote controller is on  Replace the battery and try again   Point towards the IR receiver and try again   Check if there are others controlling robots nearby  which may cause wireless interferences We want to play soccer or battle with several robots   In order to play a game with several users  you must install the ZIG110 set   ZIG110 set is available at the Robotis shopping mall   Please refer to Controller and RC100 for installation information Battery ChargeYou may obtain Lithium polymer batteries from www robotisshopen com If the robot alarm sounds off during operations then recharge the battery During charging the charger’s red LED turns on  When complete the green LED turns on       Take the battery out            Connect the charger            Charge    Charging Red LED   Complete Green LED             You can connect the robot to an external power source through SMPS             The battery is equipped with a connector to charge the battery and another to move the robot      Charging Time and Battery Life OperatingCharging Time  When fully discharged  1 1 5 hour  Leaving the battery fully discharged for too long may reduce its lifespan drastically   Time to charge the battery depends on the status of the battery If the charging time or battery life becomes too short  you may need to replace your battery    Caution  Do NOT  keep the battery connected with a robot or a charger   If you will not use the battery for a long time from now on  please keep it HALFCHARGED   Do NOT  put the battery with an environment with high temperature or humidity VideoTutorialScreen OutputObjective for this tutorial is to print 1 and 2 on the output screen as below Write Task Code      Execute RoboPlus Task Program     As seen in the picture below  go to Start  gt All Programs  gt ROBOTIS  gt RoboPlus  gt Software  gt RoboPlus Task to execute RoboPlus Task               RoboPlus Task Initial Screen                Select a Controller     Double click an empty line or press Enter  In the Select Control window  select the controller to use  then press the OK button             Generating Start Program     Select Start Program from the Select Instruction Type window  Start Program will be automatically generated in RoboPlus Task             Input Endless Loop command    To print the numbers on the screen endlessly  use the Endless Loop command Create a command line   Double click or press Enter on an empty line between  and  of Start Program to invoke the Select Instruction Type window  Select Loop  gt Endless Loop while 1   from the list             Input Load command    Use Load command to input a Print command  which is needed to print numbers on the screen  Insert Execute  gt Load  Assignment value  into an empty line between  and  of Endless Loop             Load 1 into Print    Choose the left parameter       among the Load parameters Explanation on the parameter   The left parameter receives input from the right parameter  Double click the left parameter        or press Enter key after clicking it once to invoke the Select Parameter Window  Select Controller  gt Print then press OK         Select Constant Numbers  gt Number  gt 1 for the right parameter       in the same way         When both parameters of the Load command have been set  it should look like below             Load 2 into Print with Line    Select  under Print command  at the end of the endless loop section   and add new lines by pressing the Space key  Repeat Steps 5 and 6 to input the Load command and to input  Controller  gt Print with Line and 2  The final task code is shown below             Save Task Code    Press Ctrl   S or the Save icon       Download Task CodeDownload the task code created above  How to Download Task Code Execute Task Code      Open the Program Output Monitor    To see the output of the program  you must open the Program Output Monitor BEFORE executing the program  There are three ways to open the Program Output Monitor                   Click on the View Print of Program in the Download Program window                    Click on the View Print of Program button in TOOLS       Press F5 or click on View Print of Program  V   menu under Program  P              Executing the Program    When you turn on the controller  the LED will blink  showing it is in standby mode  Press the MODE button to move it to PLAY  then press START to execute the downloaded task code  You should see 1 and 2 being printed on the Program Output Monitor       Button  amp LEDObjective for this tutorial is to program the U button to turn the AUX LED on and the D button to turn it off  Pressing the START button will end the program Write Task CodeDownload Task CodeDownload the task code created above  How to Download Task Code Execute Task CodeExecute the program and check whether the AUX LED turns on when you press the U button and turns off when you press the D button  Press START button to end Download            File Type      Download                  Humanoid Task Code      Download              Humanoid Basic Motion File      Download              QuickStart Guide PDF File      Download      ReferencesReplacing FuseThe fuse in the CM510 CM530 prevents it from overloading which can damage the circuit If the CM510 CM530 does not turn on with the battery but turns on when connected to the SMPS  replace your fuse ※ The size of the fuse is shown below  Use a 125V 5A 10A fuse ※ How to replace the fuse      Find the fuse on the back of the CM510 CM530             Use a pincette to replace the fuse with a new one       Dynamixel ManagementDynamixels used as robot actuators possess many functions  This section explains how to change the dynamixel’s settings Changing the ID  Select the port the controller is connected to       Click Connect         A list of connected dynamixels is shown on the left  Click on the dynamixel you wish to change the ID of   Click on the ID row in the Control Table       Click on the ID List combo box to see a list of possible ID’s  Select the ID  then click Apply         To use in RoboPlus Motion and RoboPlus Task  the ID must be within the following ranges           The Dynamixel’s ID must be between 0 and 25       The ID for AXS1 should be set between 100 and 109       Changing the Movement ModeThe dynamixel can operate in 2 different modes   Wheel Mode  Rotates 360 degrees like a regular motor   Joint Mode  Moves at a set angle with normal servo motors The mode can be changed using RoboPlus Manager  Once the mode is set  it will be maintained  even when turned off   Select the port the controller is connected to       Click Connect         A list of connected Dynamixels is shown on the left   Click on the Dynamixel you wish to change the mode of  Then  click on the CW CCW Angle Limit line in the Control Table       To set to Wheel Mode  change the CW CCW Angle Limit value to 0   Or  simply click on the Wheel Mode button         To set to Joint Mode again  set the CW CCW Angle Limit value to any number other than 0  The initial values for Joint Mode are 0 for CW Angle Limit  and 1023 for CCW Angle Limit TroubleshootingIf you cannot find the dynamixel you are looking for using RoboPlus Manager  try the following   Connect just 1 Dynamixel and check if there are any duplicate IDs  If you see a Dynamixel on the left even though only 1 Dynamixel is connected  there is a high probability of a duplicate ID  Change the ID immediately   If you are unable to find any Dynamixels as in the image below  click on Dynamixel Search  If the communication speed is not set to 1Mbps  the Dynamixel Search function automatically resets the controller’s communication speed to 1Mbps to enable it to be recognized If the problem persists  your dynamixel may need repair  Please contact the service department of the company you purchased from ZIGBee Wireless ControlZIGBeeZIG100 110 uses ZIGBee for wireless communication  ZIGBee  like Bluetooth  is the communication technology commonly used in Personal Area Network  PAN   The communication quality of ZIGBee is better than that of IR  so it allows many users to control their robots without interferences Caution Please note that not all products include a zigbee module and may need to be purchased separately Controller  amp ZIGBeeOLLO and Bioloid both use the RC100  which uses IR communication method  To upgrade to the Zigbee communication method  you must purchase the  ZIG110 set separately  The ZIG110 set includes one Zig100 module  which is attached to the RC100  and one Zig110 module which is attached to the Controller Note The modules in a single Zigbee set have been preconfigured to communicate with each other  Therefore  a module from one set may not work with a module from another set  Please be careful not to mix them up             ZIG100 installed in RC100      ZIG110 installed in CM100                                          ZIG110 installed in CM510      ZIG100 installed in CM5                              ZIG110A Set Assembly Method GP Control Multiple RobotsThis method is to give out commands at once to several robots being used for dance or demonstrationGives out commands to the robot at once using the zigbee module’s broadcast modeBioloid Entry Advanced       Communication with the Zig2Serial and carious robots            Communication with the RC100 and carious robots        To use the CM5  connect the controller and ZIG100 module together   Use the RoboPlus Manager to set the wireless ID of ZIG100 module on the opposite party’s robot to 65535   No need to set the broadcast channel for communication   Use the RC100 to give commands directly or use the Zig2Serial to give commands using the PC             Device      Channel Default Value      Whether or not the channel can be changed                  CM5      1      Unchangeable              Zig2Serial      1      Changeable              RC100      1      Changeable      The channel for the ZIG100 mounted on the CM5 is unchangeable  Thus  all users must set their channel to  1 for broadcast communication  All channels for the devises must pair to communicate Bioloid Premium Kit CM700       Communication with the Zig2Serial and carious robots            Communication with the RC100 and carious robots        When using the CM510 CM700  connect the ZIG100 module with the controller   Use the RoboPlus Manager to change the opposite party’s wireless ID to 65535   The channel on the ZIG110 connected to the controller it set to  4  so the channels on the Zig2Serial and RC100 must be set to  4   How to change the RC100 channel  How to change the Zig2Serial channel            Device      Channel Default Value      Whether or not the channel can be changed                  CM510CM530      4      Unchangeable              Zig2Serial      1      Changeable              RC100      1      Changeable      The channel for the zigbee connected to the controller is not changeable  Thus  all users must set their channel to  4 for broadcast communicationAll channels for the devises must pair to communicate Adding SensorsWith the Bioloid Premium Kit  you can connect additional IR Sensor and Touch Sensor to the CM530 For more information on each sensors  please click on the names of the sensors IR Sensor  IR Sensor Applications          The IR sensor can detects objects in front of the robot       It can also be used to detect object on the side when walking or moving       More informationTouch Sensor  Touch Sensor Applications          The touch sensor enables the robot to feel when it has been touched       For example  the sensor can be used to make the robot react to certain touches       More informationDMS Distance Measuring Sensor More informationMake Your Own SensorYou can make your own sensor with simple control functions using the ADC port and OUT port on CM510 CM530 Caution Connecting poorly designed circuits may damage the controller  Please be sure to acquire sufficient knowledge about circuits beforehand PIN Information  Below is a pin diagram of CM510’s external port           OUT  5V Output      VCC  5V       ADC  Can read analog signals made by users       GND      NC  Not used        Below is a pin diagram of CM530’s external port           OUT1  3 3V Output  Maximum Allowed Current 0 3A       VCC  5V       ADC  Can read analog signals made by users       GND      OUT2  3 3V Output  Maximum Allowed Current 0 3A       Note Please use the 5P Cable when using other sensors  The 5P cable can be purchased from ROBOTIS Controlling User’s DeviceExternal Output ControlBelow is an example of an LED circuit to turn the LED on and off using the OUT port  Pin 1  You need to adjust the amound of resistance depending on the type of controller and or the type of LED A high signal can be sent to the OUT port using RoboPlus Task   Select the user’s device in the writable parameter such as LOAD and CALCULATE  then select the port on which the device is connected   Then  set the high signal to the readable parameter using a constant When the code above is executed  high signal will be sent to the OUT port of the device connected to PORT 3  and the LED will turn on Reading the ADC ValueMost of the sensors used in robots  such as IR sensors and distance sensors  support analog output  The CM510 can use its external ports to read the sensor’s analog output signals  These sensors may be designed by the user or bought from a store   Below is an image of a tilt sensor  When the sensor is tilted  it prints the tilted value as the analog singal   The left pin of the tilt sensor is 5V VCC  The center is an analog signal output pin  and the right pin is GND   This sensor can be used by connecting its pins to the corresponding pins on CM510’s external port   To try for yourself  please refer to the pin information for CM510’s external ports   You can incorporate the sensor’s analog output to your robot’s movements as in the example below ",
      "url": "http://0.0.0.0:4000/docs/en/edu/bioloid/gp/"
      } ,
  
  
      "docs-en-edu-bioloid-premium":  {
      "title": "BIOLOID PREMIUM",
      "content"	 : "BIOLOID PREMIUMIntroduction  Excellent walking humanoid  SelfAdjusts posture while walking   Various sensors including Gyro  Distance  and IR  Remote control capability  IRdefault  Bluetoothoptional   Cstyle programming  amp motion teaching with RoboPlus S W  USB interface included   Semitransparent humanoid skin for customization  Digital packet communication with daisy chain topology  Build various robots through versatile expansion mechanismGetting StartedPart List  CM530  AX12A  DMS Sensor  IR Sensor  Gyro Sensor  USB2DynamixelOperatingDownloading the Program  Program for type A is installed by default in CM530   You can find task codes and motion files for other actions on the Default Program page Turning the Robot on  Turn the power switch on and the LED will start blinking   Use the MODE button to move the LED to PLAY   The LED will move each time you press the MODE button   Press the START button   Check whether the LED on PLAY is blinking           If the LED does not turn on  check the power cable connection       If there are no problems with cable  recharge your battery   Please refer to Charging for more information       The power does not turn on   Is the battery properly connected   Is the battery fully charged   Is the battery fuse intact           Please refer Fuse Replacement for information on how to replace the fuse       I want to check how much battery I have left Turn the CM530 on and press the U button  The LED will turn on to show how much battery you have left as seen in the figure below The robot makes a continuous warning sound while moving   The alarm indicates that the robot is low on batteries   Immediately recharge your battery Refer to Charge    If you do not replace the battery right away  the robot may turn off without warning and fall  which can cause severe damage Checking the robot’s basic posture  To check whether the robot has been assembled correctly   The robot should stand in the basic stance and play a melody according to its type as in the picture below   Make sure to hold the robot in its basic posture for 1 minute           This is to allow the robot to automatically configure its gyro sensors so that it can walk properly         Check the angles of the arms and legs  If they are different from the picture  go back to Check Assembly Mode  Check whether the cables have been assembled on the outer part of the leg If the robot has been incorrectly assembled to an extent where it may be severely damaged  a warning sound will be activated  Also  the LED of the motor with the problem will turn on and release its torque to prevent damage The robot’s basic posture and movements are awkward   Awkward Basic Posture           Go back to Check Assembly Mode and recheck whether all the dynamixels have been properly assembled         Unable to detect obstacles while in Free Walk Mode           Check whether the absolute distance measurement sensor’s cables are properly in place       The robot falls down easily while walking or is otherwise unstable   The gyro sensor used to detect the robot’s posture is not working          Please refer to the Assembly Manual to check whether the gyro sensor has been properly assembled       The torque is released and the dynamixel’s LED turns on after a warning sound   If the motor and frames have not been properly assembled or if the robot’s joints can not move properly  a warning sound will be activated to prevent damage           Find the motor indicated by the LED and refer to the Assembly Manual to check whether it has been assembled correctly               Make sure that the joints are free of cables or other debris   Please refer to Check Assembly Mode      The robot type and melody do not match   Check whether the motors with ID 7   10 are assembled properly  Check for loose connections            Robot Type      Do      Do Re      Do Re Mi      Repeat Do Re Mi                  TYPE A      O Correctly Assembled       Check cables for ID 9 10      Check cables for ID 7 8      Some of the cables have not been connected properly  Please refer to the Assembly Manual and check again               TYPE B            O Correctly Assembled       ID 9 and10 connected where ID 7 and 8 should be connected      Some of the cables have not been connected properly  Please refer to the Assembly Manual and check again               TYPE C            ID 7 and 8 connected where  ID 9 and 10 should be connected      O Correctly Assembled       Some of the cables have not been connected properly  Please refer to the Assembly Manual and check again       Robot in Action  R  Remote Control Mode  D  Demo Mode  L  Autonomous Walking Mode  U  Check Assembly ModeNote If you press a button on RC100 before choosing a mode  the robot will enter remote control mode Remote Control ModeThe RC100 is used to control the robot   Press the POWER MODE button for 2 seconds   Press the buttons below to control the robot           Walking  U   L   D   R      Change Posture  1   U   L   D   R      Demonstration Moves  2   U   L   D   R      Soccer Moves  3   U   L   D   R      Battle Moves  4   U   L   D   R      Walking Motions            Buttons      Motion                  U      Forward              D      Backward              L      Turn Left              R      Turn Right              U   L      Walk Forward   Left              D   L      Walk Left Sideways              U   R      Walk Forward   Right              D   R      Walk Right Sideways      Change Postures            Buttons      Motion                  1   U      Getting up Backward  When lying on stomach               1   D      Getting up Forward  When lying on back               1   L      Pushup              1   R      Handstand              2   U      Pound Chest              2   D      Scratch Head              2   L      Cheer              2   R      Bow      Soccer Motions            Buttons      Motion                  3   U      Block Right  Release button to return to normal position               3   D      Block Left  Release button to return to normal position               3   L      Shoot with left foot              3   R      Shoot with right foot      Battle Motions            Buttons      Motion                  4   U      Attack              4   D      Defend  Release button to return to normal position               4   L      Attack Left              4   R      Attack Right      Setting the CM510 IR ChannelsAfter mounting the IR receiver on CM530 under control mode  you can set the channels to control it remotely by pressing the Aux button  If you change the channel of the controller  you must also change the channel of RC100  On how to change the channel of RC100  please refer to Changing RC100’s Channel             Buttons      Motion                  Start   U      Set the RC100 channel as 1              Start   D      Set the RC100 channel as 3              Start   L      Set the RC100 channel as 2              Start   R      Set the RC100 channel as 4        If the robot does not receive commends for a period of time  it will standby in a seated position                                           When being controlled             Seated in a standby position      My remote controller does not work properly   Set to control mode   Check whether the IR receiver has been properly connected   Check whether the remote controller is on  Replace the battery and try again Point towards the IR receiver and try again Check if there are others controlling robots nearby  which may cause wireless interferences We want to play soccer or battle with several robots   In order to play a game with several users  you must install the ZIG110 set   ZIG110 set is available at the Robotis shopping mall   Please refer to Controller and RC100 for installation information Demo ModeThe robot will clap depending on how many times you clap When DMS senor detects an object  the robot greets the user If the robot does not sense any sound or object for a while  it performs various motions on its own                                           Claps depending on how many times you clap             Shows various movements      Autonomous Walking ModeThe robot will walk by itself while avoiding obstacles   When absolute distance sensor detects an obstacle  the robot will stop and turn left until the obstacle is no longer detected   If it falls down while walking  it will get back up in the direction it was moving Check Assembly ModeYou may use the Check Assembly Mode to see whether your robot has been properly assembled  Isolate each motor and compare it to the standard posture   Start the Check Assembly Mode  It will release the torque   Press the U or D button and check one motor at a time  The selected motor’s LED will turn on and move to its basic position    U  Increases the ID by 1   D  Decreases the ID by 1    Check the ID of the motor with the LED and compare it with the ID in the Assembly Manual           If the ID does not exist in the robot  a warning sound will be activated         Compare the position of the motors you have assembled to the basic posture           If the LED is on but the torque is released  check the cables or the motor’s assembly status       Battery ChargeYou may obtain Lithium polymer batteries from www robotisshopen com If the robot alarm sounds off during operations then recharge the battery During charging the charger’s red LED turns on  When complete the green LED turns on       Take the battery out            Connect the charger            Charge    Charging Red LED   Complete Green LED             You can connect the robot to an external power source through SMPS             The battery is equipped with a connector to charge the battery and another to move the robot      Charging Time and Battery Life OperatingCharging Time  When fully discharged  1 1 5 hour  Leaving the battery fully discharged for too long may reduce its lifespan drastically   Time to charge the battery depends on the status of the battery If the charging time or battery life becomes too short  you may need to replace your battery    Caution  Do NOT  keep the battery connected with a robot or a charger   If you will not use the battery for a long time from now on  please keep it HALFCHARGED   Do NOT  put the battery with an environment with high temperature or humidity VideoTutorialScreen OutputObjective for this tutorial is to print 1 and 2 on the output screen as below Write Task Code      Execute RoboPlus Task Program     As seen in the picture below  go to Start  gt All Programs  gt ROBOTIS  gt RoboPlus  gt Software  gt RoboPlus Task to execute RoboPlus Task               RoboPlus Task Initial Screen                Select a Controller     Double click an empty line or press Enter  In the Select Control window  select the controller to use  then press the OK button             Generating Start Program     Select Start Program from the Select Instruction Type window  Start Program will be automatically generated in RoboPlus Task             Input Endless Loop command    To print the numbers on the screen endlessly  use the Endless Loop command Create a command line   Double click or press Enter on an empty line between  and  of Start Program to invoke the Select Instruction Type window  Select Loop  gt Endless Loop while 1   from the list             Input Load command    Use Load command to input a Print command  which is needed to print numbers on the screen  Insert Execute  gt Load  Assignment value  into an empty line between  and  of Endless Loop             Load 1 into Print    Choose the left parameter       among the Load parameters Explanation on the parameter   The left parameter receives input from the right parameter  Double click the left parameter        or press Enter key after clicking it once to invoke the Select Parameter Window  Select Controller  gt Print then press OK         Select Constant Numbers  gt Number  gt 1 for the right parameter       in the same way         When both parameters of the Load command have been set  it should look like below             Load 2 into Print with Line    Select  under Print command  at the end of the endless loop section   and add new lines by pressing the Space key  Repeat Steps 5 and 6 to input the Load command and to input  Controller  gt Print with Line and 2  The final task code is shown below             Save Task Code    Press Ctrl   S or the Save icon       Download Task CodeDownload the task code created above  How to Download Task Code Execute Task Code      Open the Program Output Monitor    To see the output of the program  you must open the Program Output Monitor BEFORE executing the program  There are three ways to open the Program Output Monitor                   Click on the View Print of Program in the Download Program window                    Click on the View Print of Program button in TOOLS       Press F5 or click on View Print of Program  V   menu under Program  P              Executing the Program    When you turn on the controller  the LED will blink  showing it is in standby mode  Press the MODE button to move it to PLAY  then press START to execute the downloaded task code  You should see 1 and 2 being printed on the Program Output Monitor       Button  amp LEDObjective for this tutorial is to program the U button to turn the AUX LED on and the D button to turn it off  Pressing the START button will end the program Write Task CodeDownload Task CodeDownload the task code created above  How to Download Task Code Execute Task CodeExecute the program and check whether the AUX LED turns on when you press the U button and turns off when you press the D button  Press START button to end Walking MachineObjective for this tutorial is to learn how to use the Walking Machine Waking Machine is a combination of a walking motion file made up of specific patterns and a task code that plays theh role of smoothly connecting the walking motions in this motion file   Download Walking Motion File  Download Walking Task CodeLet’s use the Walking Machine to learn about how walking motions are converted smoothly Motion File OverviewWalking Motion FileThe walking motion files used in the Walking Machine can be found on pages 31 224  Several motion pages are gathered and repeatedly played to make up one walking pattern  forward  backward  etc   Each page is made to be conveniently converted to the next walking pattern’s motion page The walking patterns written in the Walking Motion FileThe walking motion files used in the Walking Machine contain 16 different walking patterns shown below             Forward      Backward      Left Turn      Right Turn                                                      Walk Sideways   Left      Walk Sideways   Right      Turn Left   Forward      Turn Right   Forward                                                      Backward   Left      Backward   Right      Avoid Left      Avoid Right                                                      Forward   Left Diagonally      Forward   Right Diagonally      Backward   Left Diagonally      Backward   Right Diagonally                                          Task Code OverviewThe walking machine task code includes a InitializationWalk Function and a WalkExecute function  There are samples that use these 2 functions to control the robot with a remote controller InitializationWalk FunctionThe InitializationWalk function initializes the variables and brings the robot to its default position WalkExecute FunctionThe WalkExecute function executes each walking pattern and smoothly joins the walking pattern Walk Command No             No       Walking Pattern      No       Walking Pattern      No       Walking Pattern      No       Walking Pattern                  1      Forward      2      Backward      3      Left Turn      4      Right Turn              5      Walk Sideways   Left      6      Walk Sideways   Right      7      Turn Left   Forward      8      Turn Right   Forward              9      Backward   Left      10      Backward   Right      11      Avoid Left      12      Avoid Right              13      Forward   Left Diagonally      14      Forward   Right Diagonally      15      Backward   Left Diagonally      16      Backward   Right Diagonally      Start ProgramLet’s try writing a simple Start Program sample using the InitializationWalk function and WalkExecute functions to smoothly connect walking patterns   First  call the InitializationWalk function to initialize the variable and to bring the robot to its default position   Select and input a walking pattern between 0 and 16 for the WalkCommand variable  then call the WalkExecute function to run the selected walking pattern   When you input a different number in the WalkCommand variable and call the WalkExecute function  it will convert to the new walking pattern as naturally as possible There are 16 different walking pattern sample codes to control via remote control in the walking machine’s task code file  Change the Start Program function in the sample codes to suit your needs Gyro SensorPrerequisite  Walking MachineCode to control the gyro sensor will be added to the task code used in the Walking Machine section  Review the Walking Machine section before getting started Objective for this tutorial is to learn how to adjust a humanoid’s posture using a gyro sensor A Gyro sensor is used to determine angular velocity  angular variation per second   When the robot tilts and angular velocity increases in a specific direction  the servo motor’s value can be adjusted in the opposite direction to straighten the robot Download TASK Code BIO_PRM_GyroSensorExam_EN tsk Things to Prepare  The gyro sensor’s Xaxis value should be connected to port  3  and Yaxis value should be connected to port  4   Other than that  modify the task code to suit your robot Concept      Callback Function    A humanoid with a gyro uses the Callback Function to determin the posture adjustment value The callback function is a function that runs independently of the main program routine and is automatically executed at  fixed intervals  Therefore  by calculating the adjustment value  and using the value in a callback function to adjust the posture at regular intervals  the robot can adjust its posture automatically         Joint Offset    The joint off set is added to the adjustment value from the gyro sensor before being used to adjust the humanoid’s posture   More information on Joint Offset  This is a parameter that gives an offset to the specific actuator’s joint position value  Thus  the actuator with joint offset execute their motions using the position value   joint offset value  which are designated in the motion file   Task Code Overview      InitializationGyro Call Function            Execute BalancePage to Apply Joint Offset    In order to apply the joint offset a motion must be executed  When no motion is being played  the joint offset will not be applied even if a  value is input by the gyro sensor  The BalancePage is used to apply the joint when no motion is being executed             InitializationGyro Function    The InitializeGyro function reads the gyro sensor value 10 times in a 0 128 second intervals and saves the average value as a gyro sensor standard value   The standard value is Approximate 250 degrees   If the gyro sensor value is less than 230 or greater than 270  it assumes there is no gyro sensor and does not use adjustment  when there is no gyro sensor or the robot has moved during initialization              Calculating the adjustment value in the Callback Function    At regular intervals  the callback function reads the current gyro sensor value and compares it to the standard value to calculate the adjustment value  If the UseGyro variable is false  the robot it will not adjust itself  Thus  set the UseGyro variable to false where you do not wish to use the gyro adjustment         Apply the calculated adjustment value to the joint offset and adjust the robot’s posture   To adjust the front back tilt  you must use the joints in the knees and ankle  which are actuators 1316   To adjust the left right tilt  you must use the joints in the ankle and waist  which are actuators 910 and 1718       Adjustment Test  Download the task code to your robot How to Download Task Code    In order to initialize the gyro  you must leave your robot on flat ground for at least 1 5 seconds after executing the task code   If the gyro sensor is not connected or if there is movement while initializing the gyro  the gyro will not make any  adjustments   Check whether the robot attempts to adjust itself when its posture is changed by a strong outside force while standing straight   Compare the robot’s actions when it uses and does not use a gyro while stanind on a slope Custom Motions  CreatePrerequisite  Walking MachineMotions will be added to the motion file used in the Walking Machine section  Review the Walking Machine section before getting started Objective for this tutorial is to add a new motion using RoboPlus Motion Let’s learn how to add 4 motions below using the RoboPlus Motion program             Motion Page No      Movement Description      Motion Page No      Movement Description                  14      Block ball on the right      27      Get up while lying on stomach              16      Block ball on the left      28      Get up while lying on back      Download Motion File BIO_PRM_UserMotionExam_EN mtn Make a motion to block a ball on the right      Execute RoboPlus Motion  then connect it to the controller Please refer to Connect Robot                To add the Block Ball motion in page 14  input a name and step             Turn off all motors  then set the robot’s pose   The Block ball on the right pose is shown below             Set the robot’s pose as above  When you press the torque on button  the robot’s current actuator values will automatically be saved  When you press the left arrow button  you can read the robot’s current input actuator values into Step’s Pose column             You can adjust the pause and play durations   Click here for more information on STEP STOP PLAY            Designating the NEXT page as itself 14  will cause the robot to enter an infinite loop and maintain its pose   Also designate an EXIT page for the robot to smoothly transiton into when it exits the infinite loop             Make a motion to return to the standard position on the page designated as the Exit page  15   Add the following 3 steps and poses to page 15             Additional settings  Number of Repeats  Play Speed  etc    You can also set the number of repeats  entire speed  etc  for each page       Make a motion to block a ball on the leftRepeat STEP 1 to make a motion to block a ball on the left on pages 16 and 17 Make motions to get up when the robot lying on its back and chest Add the following steps in motion page 27 and 28 to make a Get up while lying on stomach and Get up while lying on back motions       Get up while lying on the stomach            Get up while lying on the back      SaveUse the Save S  command to save your work in the robot or use Save As A  to save as a  mtn file in your PC Custom Motions  Task CodePrerequisite  Adjustment using the Gyro Sensor  Custom Motions CreateCode to execute userdefined motions will be added to the task code used in  the Adjustment using the Gyro Sensor section   The motion file is from the Custom Motions Create section   Review the two sections before getting started Write task code to execute userdefined motions Let’s learn how to run the motion added on  Userdefined Motions 1  Create Motion  with the RC100   Download Motion File BIO_PRM_UserMotionExam_KR mtn   Download TASK Code BIO_PRM_UserMotionExam_KR tsk Task Code OverviewCode to execute userdefined motions has been added to the task code written in Adjusting using the Gyro Sensor   Set WalkCommand  as 0 to make the robot stop   If the motion added by the user does not require the gyro sensor to maintain posture  you must turn off the gyro sensor adjustment to prevent motion variation due to the offset  Set the UseGyro variable as FALSE   Then call the EXITPageWaitMotion function and wait for the robot to come to a complete stop   The Getting Up motions added in motion pages 27 and 28 can be played just once  Thus  execute the motion  and wait for the motion to finish before executing another motion   The Block Ball motions added in motion page 14 and 16 are endlessly repeating motions  Thus  in order to end the motion  an EXIT page is needed   Using the WAIT WHILE command so that if the button is not pressed and held  the EXITPageWaitMotion function will execute the EXIT to end the motion   For more information  please refer to the Motion Page    After the user’s motion ends  set the UseGyro variable back to TRUE to restore gyro adjustment Gripper ControlPrerequisite  Custom Motions Create  Custom Motions Task CodeReview the two sections before getting started Objective for this tutorial is to learn how to control the grippers regardless of the motions When you add a gripper to your robot  there is a need to keep the robot’s arm fixed regardless of the motion In this case  it is not necessary to revise the motions to keep the arm still   Instead  let’s learn to control the gripper using the task code  while preventing specific actuators from being controlled by the motion data   Download Motion File BIO_PRM_HumanoidTypeB_EN mtn   Download TASK Code BIO_PRM_GripperExam_EN tsk Background KnowledgeSetting priorities to control the gripper and motions separately       Normal Control Priorities    Normally  motion data has the highest priority and task code has the next highest priority  Thus  under normal circumstances  if a motion is executed  it is impossible to control specific dyanmixels using task code         Changing Control Priorities    There are 2 methods to control the motor  entire arm including the gripper  with a task code while a motion is being executed           Uncheck the Using Now Not Using checkbox for the acutator’s ID in the motion data       Set the actuator’s Joint Offset parameter to 1024         The first method disables the actuator in the entire page   Even If there is a motion requiring the corresponding actuator  there is no way to control it with the motion data  Therefore  the second method  which allows you to activate  deactivate the application of the motion data for the specific actuator depending on your needs  may be the better option   AssemblyPlease refer to the  Gripper Assembly  Writing Task Code      Initializing Gripper Control    Set the joint offsets of the actuatorsfor both arms to 1024  so that they are not controlled by the motion data   Initialize the other data   such as  the arms’ and grippers’ movement speeds  and gripper’s grasping power and flexibility  then place the arms in their default position             Revise Callback Function  Gyro Adjustment     If the joint offset is used in the callback function to apply the gyro adjustment value  the joint offset should not be set for the joints used by the grippers   This is to prevent the values set as 1024 in STEP 1 from being changed             Gripper Arm Control Function    Copy the following fuction to control the gripper and arm   This function can control the gripper’s and arm’s movements  regardless of the motion status         Write a function for the left arm and gripper as above         Controlling the arm and gripper with a remote controller    Add code to control the gripper and arm using the remote controller  Reviewing  Custom Motions Task Code  will help you understand the code below       Download and Verify Result  Download the task code written in STEP 2  How to Download of task code    While controlling the robot’s motion with the remote controller  check whether the gripper and arm are fixed   Control the gripper with the remote controller ReferencesReplacing FuseThe fuse in the CM510 CM530 prevents it from overloading which can damage the circuit If the CM510 CM530 does not turn on with the battery but turns on when connected to the SMPS  replace your fuse ※ The size of the fuse is shown below  Use a 125V 5A 10A fuse ※ How to replace the fuse      Find the fuse on the back of the CM510 CM530             Use a pincette to replace the fuse with a new one       Dynamixel ManagementDynamixels used as robot actuators possess many functions  This section explains how to change the dynamixel’s settings Changing the ID  Select the port the controller is connected to       Click Connect         A list of connected dynamixels is shown on the left  Click on the dynamixel you wish to change the ID of   Click on the ID row in the Control Table       Click on the ID List combo box to see a list of possible ID’s  Select the ID  then click Apply         To use in RoboPlus Motion and RoboPlus Task  the ID must be within the following ranges           The Dynamixel’s ID must be between 0 and 25       The ID for AXS1 should be set between 100 and 109       Changing the Movement ModeThe dynamixel can operate in 2 different modes   Wheel Mode  Rotates 360 degrees like a regular motor   Joint Mode  Moves at a set angle with normal servo motors The mode can be changed using RoboPlus Manager  Once the mode is set  it will be maintained  even when turned off   Select the port the controller is connected to       Click Connect         A list of connected Dynamixels is shown on the left   Click on the Dynamixel you wish to change the mode of  Then  click on the CW CCW Angle Limit line in the Control Table       To set to Wheel Mode  change the CW CCW Angle Limit value to 0   Or  simply click on the Wheel Mode button         To set to Joint Mode again  set the CW CCW Angle Limit value to any number other than 0  The initial values for Joint Mode are 0 for CW Angle Limit  and 1023 for CCW Angle Limit TroubleshootingIf you cannot find the dynamixel you are looking for using RoboPlus Manager  try the following   Connect just 1 Dynamixel and check if there are any duplicate IDs  If you see a Dynamixel on the left even though only 1 Dynamixel is connected  there is a high probability of a duplicate ID  Change the ID immediately   If you are unable to find any Dynamixels as in the image below  click on Dynamixel Search  If the communication speed is not set to 1Mbps  the Dynamixel Search function automatically resets the controller’s communication speed to 1Mbps to enable it to be recognized If the problem persists  your dynamixel may need repair  Please contact the service department of the company you purchased from ZIGBee Wireless ControlZIGBeeZIG100 110 uses ZIGBee for wireless communication  ZIGBee  like Bluetooth  is the communication technology commonly used in Personal Area Network  PAN   The communication quality of ZIGBee is better than that of IR  so it allows many users to control their robots without interferences Caution Please note that not all products include a zigbee module and may need to be purchased separately Controller  amp ZIGBeeOLLO and Bioloid both use the RC100  which uses IR communication method  To upgrade to the Zigbee communication method  you must purchase the  ZIG110 set separately  The ZIG110 set includes one Zig100 module  which is attached to the RC100  and one Zig110 module which is attached to the Controller Note The modules in a single Zigbee set have been preconfigured to communicate with each other  Therefore  a module from one set may not work with a module from another set  Please be careful not to mix them up             ZIG100 installed in RC100      ZIG110 installed in CM100                                          ZIG110 installed in CM510      ZIG100 installed in CM5                              Customizing RobotUse the semitransparent skins provided only in the Premium Kit to make your humanoid unique Customizing your semitransparent skinsSamples of customized chest skins                                                                    Samples of customized head skinsSamples of robots with customized skins                                                            Adding SensorsWith the Bioloid Premium Kit  you can connect additional IR Sensor and Touch Sensor to the CM530 For more information on each sensors  please click on the names of the sensors IR Sensor  IR Sensor Applications          The IR sensor can detects objects in front of the robot       It can also be used to detect object on the side when walking or moving       More informationTouch Sensor  Touch Sensor Applications          The touch sensor enables the robot to feel when it has been touched       For example  the sensor can be used to make the robot react to certain touches       More informationMake Your Own SensorYou can make your own sensor with simple control functions using the ADC port and OUT port on CM510 CM530 Caution Connecting poorly designed circuits may damage the controller  Please be sure to acquire sufficient knowledge about circuits beforehand PIN Information  Below is a pin diagram of CM510’s external port           OUT  5V Output      VCC  5V       ADC  Can read analog signals made by users       GND      NC  Not used        Below is a pin diagram of CM530’s external port           OUT1  3 3V Output  Maximum Allowed Current 0 3A       VCC  5V       ADC  Can read analog signals made by users       GND      OUT2  3 3V Output  Maximum Allowed Current 0 3A       Note Please use the 5P Cable when using other sensors  The 5P cable can be purchased from ROBOTIS Controlling User’s DeviceExternal Output ControlBelow is an example of an LED circuit to turn the LED on and off using the OUT port  Pin 1  You need to adjust the amound of resistance depending on the type of controller and or the type of LED A high signal can be sent to the OUT port using RoboPlus Task   Select the user’s device in the writable parameter such as LOAD and CALCULATE  then select the port on which the device is connected   Then  set the high signal to the readable parameter using a constant When the code above is executed  high signal will be sent to the OUT port of the device connected to PORT 3  and the LED will turn on Reading the ADC ValueMost of the sensors used in robots  such as IR sensors and distance sensors  support analog output  The CM510 can use its external ports to read the sensor’s analog output signals  These sensors may be designed by the user or bought from a store   Below is an image of a tilt sensor  When the sensor is tilted  it prints the tilted value as the analog singal   The left pin of the tilt sensor is 5V VCC  The center is an analog signal output pin  and the right pin is GND   This sensor can be used by connecting its pins to the corresponding pins on CM510’s external port   To try for yourself  please refer to the pin information for CM510’s external ports   You can incorporate the sensor’s analog output to your robot’s movements as in the example below Gripper Assembly  Users can add grippers to humanoid robots to fit their needs   Grippers are useful when holding or throwing things MaterialsThere are 2 spare AX12 ’s when assembling a humanoid Type B or Type C using the Bioloid Premium Kit You can use these spare parts to make a gripper to your humanoid Below are the parts required to make a gripper Making a gripperThe image above shows how to make a gripper using frames and an AX12   Make two of these if you want to attach a gripper on both hands Attaching GrippersBy making a robot with grippers  you can expand the things you can do with the robot For more information on controlling the gripper robot  please refer to gripper control Below is an image of a Type B humanoid with a grippers AX12   9 was used for the right gripper and AX12   10 was used for the left DownloadDefault Program  How to Download of task code  How to Download motion file            Robot Type      File Type      Download                  Assembly Manual      PDF File      Download              A Type      Task Code      Download              A Type      Motion File      Download              B Type      Task Code      Download              B Type      Motion File      Download              C Type      Task Code      Download              C Type      Motion File      Download      Humanoid Fight            Robot Type      File Type      Download                  A Type      Humanoid Fight Task Code      Download              A Type      Humanoid Fight Motion File      Download      Walking            Buttons      Motion      Buttons      Motion                  U      Move Forward      D      Move Backward              L      Turn Left      R      Turn Right              U   L      Move Forward and Turn Left      U   R      Move Forward and Turn Right              L   5      Move Leftward      L   5   6      Move Leftward Quickly              L   U   5      Move Forward and Leftward      L   D   5      Move Backward and Leftward              R   5      Move Rightward      R   5   6      Move Rightward Quickly              R   U   5      Move Forward and Rightward      R   D   5      Move Backward and Rightward      Attack            Buttons      Motion      Buttons      Motion                  1   L      Attack Diagonal Left      6   2      Strong Left Attack              1   R      Attack Diagonal Right      6   4      Strong Right Attack              2   U      Attack Front      6   1      Strong Front Attack              2   L      Attack Left      4   U 4   L       Grab 1              2   R      Attack Right      4   D 4   R       Grab 2              3      Attack Left and Right                  ETC            Buttons      Motion      Buttons      Motion                  5 6 D 3      Torque Off      5 6 U 1      Torque On              1   U      Stand Up from face down      1   D      Stand Up from back down      Humanoid Soccer            Robot Type      File Type      Download                  A Type      Humanoid Soccer Task Code      Download              A Type      Humanoid Soccer Motion File      Download      Walking            Buttons      Motion      Buttons      Motion                  U      Move Forward      D      Move Backward              L      Turn Left      R      Turn Right              U   L      Move Forward and Turn Left      U   R      Move Forward and Turn Right              L   5      Move Leftward      L   5   6      Move Leftward Quickly              L   U   5      Move Forward and Leftward      L   D   5      Move Backward and Leftward              R   5      Move Rightward      R   5   6      Move Rightward Quickly              R   U   5      Move Forward and Rightward      R   D   5      Move Backward and Rightward      Offense            Buttons      Motion      Buttons      Motion                  2   U      Left Kick Forward      4   U      Right Kick Forward              2   6   U      Strong Left Kick Forward      4   6   U      Strong Right Kick Forward              2   D      Kick Backward      4   D      Kick Backward              2   L      Kick Left      4   L      Kick Left              2   R      Kick Right      4   R      Kick Right      Defense            Buttons      Motion      Buttons      Motion                  3      Prepare for Blocking      3   L      Block Left              3   U      Block Front      3   R      Block Right      ETC            Buttons      Motion      Buttons      Motion                  5 6 D 3      Torque Off      5 6 U 1      Torque On              1   U      Stand Up from face down      1   D      Stand Up from back down              1   L      Chest Beat      1   R      Cheer      ExamplesBeginner            Examples      Description                  1  Crossing Gate      Download Assembly ManualDownload Task CodeDownload VideoDevices CM530 x1   AX12  x1 Dynamixel Setting AX12  ID 1  Joint ModeRoboPlus LanguageFunction  Call  Load  Endless Loop  If  Wait WhileAlgorithmControl the Dynamixel’s position using the buttons on the CM530Operation Guide Press the U button on the CM530 to open the bar  Press the D button on the CM530 to lower the bar               2  Universal Gauge      Download Assembly ManualDownload Task CodeDownload VideoDevices CM530 x1   AX12  x1 Dynamixel Setting AX12  ID 1  Joint ModeRoboPlus LanguageFunction  Call  Return  Load  Calculate  Endless Loop  If  Else ifAlgorithmControl the Dynamixel’s speed using the buttons on the CM530Operation Guide Press the U button on the CM530 to increase the gauge’s speed  Press the D button on the CM530 to decrease the gauge’s speed               3  Crocodile Mouth      Download Assembly ManualDownload Task CodeDownload VideoDevices CM530 x1   AX12  x1   IR Sensor x1 Dynamixel Setting AX12  ID 1  Joint ModeRoboPlus LanguageFunction  Call  Load  Endless Loop  If  Else If  Wait WhileAlgorithm Control the Dynamixel position and Buzzer with the value from the IR Sensor and TimerOperation Guide The mouth opens when the front sensor detects something  and close when nothing is detected  It will open its mouth when it detects something  A melody will activate if nothing is detected for 10 seconds               4  Pan Tilt      Download Assembly ManualDownload Task CodeDownload VideoDevices CM530 x1   AX12  x2 Dynamixel Setting AX12  ID 1  2  Joint ModeRoboPlus LanguageFunction  Call  Load  Calculate Endless Loop If  Else If  Wait WhileAlgorithmControl the Pan Tilt using the buttons on the CM530Operation Guide Press the U button on the CM530 to move  the tilt actuator  Up  Down  up  Press the D button on the CM530 to move  the tilt actuator  Up  Down  down  Press the R button on the CM530 to turn  the pan actuator  Sideways   right  Press the L button on the CM530 to turn  the pan actuator  Sideways  left               5  Parking Gate      Download Assembly ManualDownload Task CodeDownload VideoDevices CM530 x1   AX12  x2   IR Sensor x1 Dynamixel Setting AX12  ID 1  2  Joint ModeRoboPlus Language Function  Call  Load  Endless Loop  If  Else If  Wait While  Break LoopAlgorithmControl the Dynamixel’s position using the IR Sensor and Dynamixel’s load value Operation Guide When an object is detected  the parking gate opens perpendicularly  When an object is detected and the bar is pushed  the parking gate opens horizontally  When an object is not detected  the parking gate closes               6  Smart Car      Download Assembly ManualDownload Task CodeDownload VideoDevices CM530 x1   AX12  x4   IR sensor x2 Dynamixel Setting AX12  ID 1   4  Wheel ModeRoboPlus Language Function  Call  Load  Calculate  Jump  Lable  Endless Loop  If  Else If  Wait WhileAlgorithm Use the CM530’s buttons to set the mode and use the buttons and sensor value to control the rotation direction Operation Guide Press the U button together with the START button on the CM530 to change to CONTROL mode  Press the D button together with the START button on the CM530 to change to FREE mode  When you press the L button in CONTROL mode  it moves forward  The R button moves backward  U button moves rights  and the D button moves left  A melody will play each time it moves  When front sensor detects an object in FREE mode  it will turn right  When the lower sensor detects something  it will avoid the edge and turn right               7  Clapping Crab      Download Assembly ManualDownload Task CodeDownload VideoDevices CM530 x1   AX12  x2 Dynamixel Setting AX12  ID 1  2  Joint ModeRoboPlus Language Load  Calculate  Endless Loop  If  Wait WhileAlgorithm Control the Dynamixel position using the number of times the MIC detects a sound Operation Guide The robot will standby with its arm open  The robot the number of time it detects a sound               8  Attacking Duck      Download Assembly ManualDownload Task CodeDownload VideoDevices CM530 x1   AX12  x3   IR Sensor x2 Dynamixel Setting AX12  ID 1  2  3  Joint ModeRoboPlus Language Function  Call  Load  Endless Loop  If  Loop While  Wait WhileAlgorithmUse the sensor detecting to control the DynamixelsOperation Guide The robot moves sideways continuously and watches for objects  The robot follows the direction in which an object is detected then attacks when both sensors detect an object               9  Distance Level Meter      Download Assembly ManualDownload Task CodeDownload VideoDevices CM530 x1   AX12  x1   DMS Sensor x1 Dynamixel Setting AX12  ID 1  Joint ModeRoboPlus Language Function  Call  Load  Calculate  Endless LoopAlgorithmControl the Dynamixel position using the distance detected by the sensor Operation Guide The bar moves depending on the distance detected by the sensor               10  Line Tracer      Download Assembly ManualDownload Task CodeDownload VideoDevices CM530 x1   AX12  x2   IR Sensor x2 Dynamixel Setting AX12  ID 1  2  Wheel ModeRoboPlus Language Function  Call  Load  Calculate  Endless Loop  If  Else If  Else  Wait WhileAlgorithm Control the line tracer using the sensor’s detection value Operation Guide The robot traces the black line               11  Walking Droid      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM530 x1   AX12  x4   IR Sensor x1 Dynamixel Setting AX12  ID 1   4  Joint ModeRoboPlus Language Function  Call  Load  Endless Loop  If  Loop While  Wait WhileAlgorithmControl various motions using the IR Sensor’s value Operation Guide Place an object in the robot’s path and start your robot  Checks whether the robot avoids obstacles while walking       Intermediate            Examples      Description                  1  Probing Robot      Download Assembly ManualDownload Task CodeDownload VideoDevices CM530 1   AX12  7  IR Sensor 1   DMS Sensor 1 Dynamixel Setting AX12  ID 1 4   Wheel Mode  AX12  ID 5 7   Joint ModeRoboPlus LanguageFunction  Call  Return  Load  Calculate  Endless Loop  If  Else  Wait While  Break LoopAlgorithm Object sensing and processing depending on IR Sensor’s and DMS Sensor’s valueOperation Guide Place objects of various sizes in the robot’s path  then turn the robot on  If the obstacle is too big  it will avoid it  If the obstacle is not too big  it will move it then proceed going its way               2  Excavator      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM530 1   AX12  8   IR Sensor 1   DMS Sensor 1 Dynamixel Setting AX12  ID 1 4   Wheel Mode  AX12  ID 5 8   Joint ModeRoboPlus LanguageFunction  Call  Load  Calculate  Endless Loop  If  Else  Wait WhileAlgorithmDynamixel Position control depending on IR Sensor’s and DMS Sensor’s value Operation Guide Place an object in the robot’s path  then turn the robot on  When an object is detected in front of it  it will begin excavating  If an object is detected while carrying an object  the robot will turn in that direction and put the object it was carrying down               3  Robot Flower      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM530 1  Sound Detection   AX12  6 Dynamixel Setting AX12  ID 1 6   Joint ModeRoboPlus LanguageFunction  Call  Load Endless Loop  If  Else  Wait WhileAlgorithm Motion control depending on the number of time sound is detected Operation Guide When the power is turned on  the flower blooms and moves as though it is dancing  If one clap is detected  the petals will pucker up slowly  If several claps are detected  the petals will pucker up quickly               4  Fawn      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM530 1  Sound Detection   AX12  7   IR Sensor 1 Dynamixel Setting AX12  ID 1 7   Joint ModeRoboPlus LanguageFunction  Call  Load  Endless Loop  If  Else If  Else  Wait WhileAlgorithmObject sensing using IR Sensor’s value Operation Guide When no change is detected  the fawn sits down and looks around  If an object is detected in front of the face  the fawn will follow the object               5  Turtle      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM530 1   AX12  8   IR Sensor 2   DMS Sensor 1 Dynamixel Setting AX12  ID 1 8   Joint ModeRoboPlus Language Function  Call  Load  Endless Loop  If  Else If  Else  Wait WhileAlgorithmAvoids obstacles depending on the IR Sensor and DMS Sensor value Operation Guide Place an obstacle in the robots path and turn the robot on  The turtle avoids obstacles in front of it               6  GerWalk      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM530 1   AX12  7   IR Sensor 2   DMS Sensor 1 Dynamixel Setting AX12  ID 1 7   Joint ModeRoboPlus Language Function  Call  Load  Endless Loop  If  Else If  Else  Loop WhileAlgorithm Control the Bird’s walking pattern using the IR Sensor and DMS Sensor value Operation Guide Place an obstacle in the robots path and turn the gerwalk robot on  The robot avoids obstacles in front of it and on the sides               7  Battle Droid      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM530 1   AX12  8   IR Sensor 1 Dynamixel Setting AX12  ID 1 8   Joint ModeRoboPlus Language Variables  Function  Call  Load  Calculate  Endless Loop  If  Else If  Else  Wait WhileAlgorithm Dynamixel control using the IR Sensor’s valueOperation Guide Place an obstacle in the robots path and turn the battle droid robot on  When the robot detects an object while walking  it will attack with both arms  When battle droid falls down  it will know which side it has fallen up and get up on its own               8  Quadruped Robot      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM530 1   AX12  8   IR Sensor 1   DMS Sensor 1 Dynamixel Setting AX12  ID 1 8   Joint ModeRoboPlus Language Function  Call  Load  Endless Loop  If  Wait WhileAlgorithmControl the walking using the IR Sensor and DMS Sensor valueOperation Guide Place an obstacle in the robots path and turn the quadruped robot on  The robot avoids obstacles in front of it               9  Biped Walking Robot      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM530 1   AX12  8   IR Sensor 1   DMS Sensor 1 Dynamixel Setting AX12  ID 11 18   Joint ModeRoboPlus Language Function  Call  Load  Endless Loop  If  Else If  Else  Wait While  Loop WhileAlgorithm Control the walking using the IR Sensor and DMS Sensor valueOperation Guide Place an obstacle in the robots path and turn the robot on  The robot avoids obstacles in front of it and on the sides               10  Robot Arm      Download Assembly ManualDownload Task CodeDownload VideoDevices CM530 1   AX12  8 Dynamixel Setting AX12  ID 1 8   Joint ModeRoboPlus Language Function  Call  Load  Calculate  Endless Loop  If  Else  Loop WhileAlgorithm Dynamixel Communication for Position ValueOperation Guide Check whether the responding motor reacts to the control motor’s movement       Advanced            Examples      Description                  1  Dinosaur      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM530 1   AX12  15   IR Sensor 1 Dynamixel Setting AX12  ID 1 15   Joint ModeRoboPlus Language Function  Call  Load  Lable  Jump  If  Else If  Else  Wait WhileAlgorithm Object detection and motion control using IR Sensor value Operation Guide Place an obstacle in the robots path and turn the dinosaur robot on  The dinosaur robot attacks  When the obstacle disappears  it continues walking  When nothing is detected for a while  it will sleep               2  Puppy      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM530 1  Sound Detection  Timer   AX12  17   IR Sensor 1 Dynamixel Setting AX12  ID 1 17   Joint ModeRoboPlus LanguageFunction  Call  Load  Lable  Jump  If  Else If  Wait WhileAlgorithmMotion control depending on the sound detection of the IR Sensor and Timer Operation Guide Place an obstacle in the robots path and turn the puppy robot on  When a sound is detected  it will walk avoiding obstacles  If you touch its mouth  it will do cute things  It will do different things depending on the number of claps  When nothing is detected for a while  it will sleep               3  King Spider      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM530 1  Timer   AX12  18   IR Sensor 2 Dynamixel Setting AX12  ID 1 18   Joint ModeRoboPlus LanguageFunction  Call  Load  Lable  Jump  If  Wait WhileAlgorithm Application motion control depending on the sound detection of the IR Sensor and Timer Operation Guide When it detects an object while walking  it will avoid it  It will attack when something is detected near the front  When an object is detected above it  it will crumple up its body  When nothing is detected for a while  it will sleep               4  Scorpion      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM530 1  Sound detection   AX12  18   DMS Sensor 1 Dynamixel Setting AX12  ID 1 18   Joint ModeRoboPlus Language Function  Call  Load  Lable  Jump  If  Else If  Loop For  Wait WhileAlgorithmApplication motion control depending on the number of sounds detected and DMS Sensor value Operation Guide The robot sleeps when you first turn it on  The robot will awake when you clap  If you clap twice when the robot is awake  it will run away  The closer your hand gets to the sensor  the tail will rise to threaten you  If you get too close  it will attack               5  Lizard      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM530 1   AX12  14   IR Sensor 1  DMS Sensor 1 Dynamixel Setting AX12  ID 1 14   Joint ModeRoboPlus Language Function  Call  Load  Calculate  Endless Loop  If  Else If  Else  Wait  WhileAlgorithm Obstacle avoidance motion control using the IR Sensor and DMS Sensor value Operation Guide It will being crawling once turned on  and will stop when it detects an object then avoid it  When the tail is caught  it will try to escape       ",
      "url": "http://0.0.0.0:4000/docs/en/edu/bioloid/premium/"
      } ,
  
  
      "docs-en-edu-bioloid-stem":  {
      "title": "BIOLOID STEM",
      "content"	 : "  BIOLOID STEM   Introduction   introduction      assets images edu bioloid stem_product jpg  Educational kit for science  technology  engineering  and mathematics Curricula of 16 sample robots with a total of 48 different types of lessons  Robots optimized for competition with highspeed Dynamixel and IR array  Robot kits aimed at solving problems creatively    Getting Started   gettingstarted     Standard Part List   standardpartlist      assets images edu bioloid stem_standard_partlist_01_en png      assets images edu bioloid stem_standard_partlist_02_en png     Expansion Part List   expansionpartlist      assets images edu bioloid stem_expansion_partlist_01_en png      assets images edu bioloid stem_expansion_partlist_02_en png   CM530   AX12W   AX12A   IR Sensor Array   IR Sensor     Operating   operating     Download the ProgramYou can find task codes and motion files for other actions on the  Standard   standardexamples    Expansion   expansionexamples  page % include en parts controller cm510_530_turnon md %    Assembly Check In Assembly Check mode you can verify whether your robot has been properly assembled  Compare the initial position of the motors   1  To run Assembly Check mode select ‘Manage’   hold the ‘D’ button followed by ‘START’       Keep holding until melody finished playing   2  Select the motor with either ‘U’ or ‘D’ buttons  The selected motor with turn its LED on and position itself into its initial position       ‘U’ ups ID order while ‘D’ downs ID order   3  Compare the ID against the assembly check guide       If the motor is not detected by the controller then it will beep   4  Compare whether the motor froze or it goes to its initial position       Although the LED may be on the motor may be loose check its wiring   5  Check the port for the IR array       The IR array connected to its preassigned will blink when detecting an object     Battery Charge   batterycharge % include en edu bioloid stem_charge md %   Download   download     Standard Examples   standardexamples  Robot Description     1  Sequence Racer  Ex_01  img_adv_ex_01   Download  adv_ex_11  Basic Phase Download  adv_ex_12  Application Phase Download  adv_ex_13  Practical Phase Download  adv_ex_14  Video Dynamixel Setting AX12W ID 1  2  Wheel Mode Algorithm Control the robot’s moving direction with the controller’s directional buttons  Operation Guide if you press the forward ‘U’  turn left ‘L’  turn right ‘R’  and reverse ‘D’ sequentially pressing ‘START’ the robot will move in the order the directional buttons were pressed   2  Bug Fighter  Ex_02  img_adv_ex_02   Download  adv_ex_21  Basic Phase Download  adv_ex_22  Application Phase Download  adv_ex_23  Practical Phase Download  adv_ex_24  Video  Dynamixel Setting AX12W ID 1  2  Wheel Mode Algorithm Robot follows the black line by following said line  Operation Guide The robot remains inbounds and push others out if found in the same area   3  Tumbler  Ex_03  img_adv_ex_03   Download  adv_ex_31  Basic Phase Download  adv_ex_32  Application Phase Download  adv_ex_33  Practical Phase Download  adv_ex_34  Video  Dynamixel Setting AX12W ID 1  2  Wheel Mode Algorithm The IR sensors detect obstacles and control the robot’s direction  Operation Guide The robot can go over large or small obstacles with large obstacles it can change directions or react accordingly if flipped over   4  Line Follower  Ex_04  img_adv_ex_04   Download  adv_ex_41  Basic Phase Download  adv_ex_42  Application Phase Download  adv_ex_43  Practical Phase Download  adv_ex_44  Video  Dynamixel Setting AX12W ID 1  2  Wheel Mode Algorithm The robot can move on a determined in a crisscross grid  Operation Guide The robot can move forward  reverse  turn left or right along its determined path via its IR array   5  Digital Piano  Ex_05  img_adv_ex_05   Download  adv_ex_51  Basic Phase Download  adv_ex_52  Application Phase Download  adv_ex_53  Practical Phase Download  adv_ex_54  Video Algorithm Plays a different tune based IR sensor reading  Operation Guide The robot can output a musical note from the active sensors from the IR array   6  Motorcycle  Ex_06  img_adv_ex_06   Download  adv_ex_131  Basic Phase Download  adv_ex_132  Application Phase Download  adv_ex_133  Practical Phase Download  adv_ex_134  Video  Dynamixel Setting AX12W ID 1  Wheel Mode  AX12W ID 2  Joint Mode Algorithm Control action by following the black line and avoiding obstacles Operation Guide Follows the line while avoiding obstacles by steering itself away from such obstacle   7  Avoider  Ex_07  img_adv_ex_07   Download  adv_ex_71  Basic Phase Download  adv_ex_72  Application Phase Download  adv_ex_73  Practical Phase Download  adv_ex_74  Video  Dynamixel Setting AX12W ID 1  2  Wheel Mode Algorithm maintains distance by its right sensor  Operation Guide The robot can escape a maze by using its left  right and center IR sensors      Expansion Examples   expansionexamples  Robot Description     8  Scribbler  Ex_08  img_adv_ex_08   Download  adv_ex_81  Basic Phase Download  adv_ex_82  Application Phase Download  adv_ex_83  Practical Phase Download  adv_ex_84  Video Dynamixel Setting AX12W ID 1  Wheel Mode  AX12A ID 3  4  Wheel Mode Algorithm Robot follows the order of sequentially inputted commands  Operation Guide Write  가  and  어  when augmented with a pen   9  Transporter  Ex_09  img_adv_ex_09   Download  adv_ex_91  Basic Phase Download  adv_ex_92  Application Phase Download  adv_ex_93  Practical Phase Download  adv_ex_94  Video  Dynamixel Setting AX12W ID 1  2  Wheel Mode  AX12A ID 3   5  Joint Mode Algorithm The robot follows a predetermined path and completes a mission  Operation Guide Obstacles at certain locations the robot moves them at 2 specific locations from start the robot follows a determined path until finishing   10  Probe Car  Ex_10  img_adv_ex_10   Download  adv_ex_101  Basic Phase Download  adv_ex_102  Application Phase Download  adv_ex_103  Practical Phase Download  adv_ex_104  Video  Dynamixel Setting AX12W ID 1  2  Wheel Mode  AX12A ID 3  4  Joint Mode Algorithm While following a path if the robot encounters an obstacle it will move it  Operation Guide If the robot detects obstacles over boxes via its IR sensors it moves them to specified locations   11  Beetle Gripper  Ex_11  img_adv_ex_11   Download  adv_ex_111  Basic Phase Download  adv_ex_112  Application Phase Download  adv_ex_113  Practical Phase Download  adv_ex_114  Video  Dynamixel Setting AX12W ID 1  2  Wheel Mode  AX12A ID 3   5  Joint Mode Algorithm Clamp robot follows button input Operation Guide The remote control can control forward  reverse  left and right turns  left and right pivots  grab  lift and lower objects   12  Robot Arm  Ex_12  img_adv_ex_12   Download  adv_ex_121  Basic Phase Download  adv_ex_122  Application Phase Download  adv_ex_123  Practical Phase Download  adv_ex_124  Video  Dynamixel Setting AX12A ID 3   6  Joint Mode Algorithm Detects a cup with the IR sensors and move it to a specified location  Operation Guide An example robot that moves 2 small cups and 2 big cups to the designated position regardless of the order of dection   13  Walking Droid  Ex_13  img_adv_ex_13   Download  adv_ex_131  Basic Phase Download  adv_ex_132  Application Phase Download  adv_ex_133  Practical Phase Download  adv_ex_134  Motion File Download  adv_ex_135  Video  Dynamixel Setting AX12A ID 3   6  Joint Mode Algorithm Robot detects obstacles and avoids it with its IR sensors  Operation Guide The robot moves forwards and turns left it shifts to the right if the left sensors detects an obstacle shifts to the left if the right sensor detects an obstacle reverses if the center sensor detects an obstacle   14  Hexapod  Ex_14  img_adv_ex_14   Download  adv_ex_141  Basic Phase Download  adv_ex_142  Application Phase Download  adv_ex_143  Practical Phase Download  adv_ex_144  Motion File Download  adv_ex_145  Video  Dynamixel Setting AX12A ID 3   5  Joint Mode Algorithm Robot detects obstacles and avoids it with its IR sensors  Operation Guide The robot shifts to the right if the left sensors detects an obstacle shifts to the left if the right sensor detects an obstacle it speeds up when the upper sensor detects a hand   15  Greeting Penguin  Ex_15  img_adv_ex_15   Download  adv_ex_151  Basic Phase Download  adv_ex_152  Application Phase Download  adv_ex_153  Practical Phase Download  adv_ex_154  Motion File Download  adv_ex_155  Video  Dynamixel Setting AX12W ID 1  2  Joint Mode  AX12A ID 3   6  Joint Mode Algorithm Robot remembers the order of input commands and performs in the same input order  Operation Guide Robot remembers lifting of left and right arms and clapping and repeats the motions in the same order   16  Cannon Shooter  Ex_16  img_adv_ex_16   Download  adv_ex_161  Basic Phase Download  adv_ex_162  Application Phase Download  adv_ex_163  Practical Phase Download  adv_ex_164  Video  Dynamixel Setting AX12W ID 1  2  Wheel Mode  AX12A ID 3   6  Joint Mode Algorithm Slingshot robot follows input commands for clamping and launching  Operation Guide The remote control can control forward  reverse  left and right turns  left and right pivots  grab  lift and lower objects     References   references     Replacing Fuse   replacingfuse % include en parts controller fuse_cm510_530 md %    Dynamixel Management   dynamixelmanagement % include en edu bioloid dynamixel_management md %% include en parts communication zigbee_control md % CM530   docs en parts controller cm530  AX12W   docs en dxl ax ax12w  AX12A   docs en dxl ax ax12a  IR Sensor Array   docs en parts sensor ir_array  IR Sensor   docs en parts sensor irss10  img_adv_ex_01   assets images edu bioloid stem_sequenceracer jpg img_adv_ex_02   assets images edu bioloid stem_bugfighter jpg img_adv_ex_03   assets images edu bioloid stem_tumbler jpg img_adv_ex_04   assets images edu bioloid stem_linefollower jpg img_adv_ex_05   assets images edu bioloid stem_digitalpiano jpg img_adv_ex_06   assets images edu bioloid stem_motorcycle jpg img_adv_ex_07   assets images edu bioloid stem_avoider jpg img_adv_ex_08   assets images edu bioloid stem_scribbler jpg img_adv_ex_09   assets images edu bioloid stem_transporter jpg img_adv_ex_10   assets images edu bioloid stem_probecar jpg img_adv_ex_11   assets images edu bioloid stem_beetlegripper jpg img_adv_ex_12   assets images edu bioloid stem_robotarm jpg img_adv_ex_13   assets images edu bioloid stem_walkingdroid jpg img_adv_ex_14   assets images edu bioloid stem_hexapod jpg img_adv_ex_15   assets images edu bioloid stem_greetingpenguin jpg img_adv_ex_16   assets images edu bioloid stem_cannonshooter jpg adv_ex_11  http  support robotis com en baggage_files bioloid stem 1 bio_stem_sequenceracer1_en tsk adv_ex_12  http  support robotis com en baggage_files bioloid stem 1 bio_stem_sequenceracer2_en tsk adv_ex_13  http  support robotis com en baggage_files bioloid stem 1 bio_stem_sequenceracer3_en tsk adv_ex_14  http  www robotis com video BIO_STEM_SequenceRacer wmv adv_ex_21  http  support robotis com en baggage_files bioloid stem 2 bio_stem_bugfighter1_en tsk adv_ex_22  http  support robotis com en baggage_files bioloid stem 2 bio_stem_bugfighter2_en tsk adv_ex_23  http  support robotis com en baggage_files bioloid stem 2 bio_stem_bugfighter3_en tsk adv_ex_24  http  www robotis com video BIO_STEM_BugFighter wmv adv_ex_31  http  support robotis com en baggage_files bioloid stem 3 bio_stem_tumbler1_en tsk adv_ex_32  http  support robotis com en baggage_files bioloid stem 3 bio_stem_tumbler2_en tsk adv_ex_33  http  support robotis com en baggage_files bioloid stem 3 bio_stem_tumbler3_en tsk adv_ex_34  http  www robotis com video BIO_STEM_Tumbler wmv adv_ex_41  http  support robotis com en baggage_files bioloid stem 4 bio_stem_linefollower1_en tsk adv_ex_42  http  support robotis com en baggage_files bioloid stem 4 bio_stem_linefollower2_en tsk adv_ex_43  http  support robotis com en baggage_files bioloid stem 4 bio_stem_linefollower3_en tsk adv_ex_44  http  www robotis com video BIO_STEM_LineFollower wmv adv_ex_51  http  support robotis com en baggage_files bioloid stem 5 bio_stem_digitalpiano1_en tsk adv_ex_52  http  support robotis com en baggage_files bioloid stem 5 bio_stem_digitalpiano2_en tsk adv_ex_53  http  support robotis com en baggage_files bioloid stem 5 bio_stem_digitalpiano3_en tsk adv_ex_54  http  www robotis com video BIO_STEM_DigitalPiano wmv adv_ex_61  http  support robotis com en baggage_files bioloid stem 6 bio_stem_motorcycle1_en tsk adv_ex_62  http  support robotis com en baggage_files bioloid stem 6 bio_stem_motorcycle2_en tsk adv_ex_63  http  support robotis com en baggage_files bioloid stem 6 bio_stem_motorcycle3_en tsk adv_ex_64  http  www robotis com video BIO_STEM_MotorCycle wmv adv_ex_71  http  support robotis com en baggage_files bioloid stem 7 bio_stem_avoider1_en tsk adv_ex_72  http  support robotis com en baggage_files bioloid stem 7 bio_stem_avoider2_en tsk adv_ex_73  http  support robotis com en baggage_files bioloid stem 7 bio_stem_avoider3_en tsk adv_ex_74  http  www robotis com video BIO_STEM_Avoider wmv adv_ex_81  http  support robotis com en baggage_files bioloid stem 8 bio_stem_scribbler1_en tsk adv_ex_82  http  support robotis com en baggage_files bioloid stem 8 bio_stem_scribbler2_en tsk adv_ex_83  http  support robotis com en baggage_files bioloid stem 8 bio_stem_scribbler3_en tsk adv_ex_84  http  www robotis com video BIOLOID_STEM_8 Scribbler wmv adv_ex_91  http  support robotis com en baggage_files bioloid stem 9 bio_stem_transporter1_en tsk adv_ex_92  http  support robotis com en baggage_files bioloid stem 9 bio_stem_transporter2_en tsk adv_ex_93  http  support robotis com en baggage_files bioloid stem 9 bio_stem_transporter3_en tsk adv_ex_94  http  www robotis com video BIOLOID_STEM_9 Transporter wmv adv_ex_101  http  support robotis com en baggage_files bioloid stem 10 bio_stem_probecar1_en tsk adv_ex_102  http  support robotis com en baggage_files bioloid stem 10 bio_stem_probecar2_en tsk adv_ex_103  http  support robotis com en baggage_files bioloid stem 10 bio_stem_probecar3_en tsk adv_ex_104  http  www robotis com video BIOLOID_STEM_10 ProbeCar wmv adv_ex_111  http  support robotis com en baggage_files bioloid stem 11 bio_stem_beetlegripper1_en tsk adv_ex_112  http  support robotis com en baggage_files bioloid stem 11 bio_stem_beetlegripper2_en tsk adv_ex_113  http  support robotis com en baggage_files bioloid stem 11 bio_stem_beetlegripper3_en tsk adv_ex_114  http  www robotis com video BIOLOID_STEM_11 BeetleGripper wmv adv_ex_121  http  support robotis com en baggage_files bioloid stem 12 bio_stem_robotarm1_en tsk adv_ex_122  http  support robotis com en baggage_files bioloid stem 12 bio_stem_robotarm2_en tsk adv_ex_123  http  support robotis com en baggage_files bioloid stem 12 bio_stem_robotarm3_en tsk adv_ex_124  http  www robotis com video BIOLOID_STEM_12 RobotArm wmv adv_ex_131  http  support robotis com en baggage_files bioloid stem 13 bio_stem_walking_droid1_en tsk adv_ex_132  http  support robotis com en baggage_files bioloid stem 13 bio_stem_walking_droid2_en tsk adv_ex_133  http  support robotis com en baggage_files bioloid stem 13 bio_stem_walking_droid3_en tsk adv_ex_134  http  support robotis com en baggage_files bioloid stem 13 bio_stem_walking_droid_en mtn adv_ex_135  http  www robotis com video BIOLOID_STEM_13 WalkingDroid wmv adv_ex_141  http  support robotis com en baggage_files bioloid stem 14 bio_stem_hexapod1_en tsk adv_ex_142  http  support robotis com en baggage_files bioloid stem 14 bio_stem_hexapod2_en tsk adv_ex_143  http  support robotis com en baggage_files bioloid stem 14 bio_stem_hexapod3_en tsk adv_ex_144  http  support robotis com en baggage_files bioloid stem 14 bio_stem_hexapod_en mtn adv_ex_145  http  www robotis com video BIOLOID_STEM_14 Hexapod wmv adv_ex_151  http  support robotis com en baggage_files bioloid stem 15 bio_stem_greetingpenguin1_en tsk adv_ex_152  http  support robotis com en baggage_files bioloid stem 15 bio_stem_greetingpenguin2_en tsk adv_ex_153  http  support robotis com en baggage_files bioloid stem 15 bio_stem_greetingpenguin3_en tsk adv_ex_154  http  support robotis com en baggage_files bioloid stem 15 bio_stem_greetingpenguin_en mtn adv_ex_155  http  www robotis com video BIOLOID_STEM_15 GreetingPenguin wmv adv_ex_161  http  support robotis com en baggage_files bioloid stem 16 bio_stem_cannonshooter1_en tsk adv_ex_162  http  support robotis com en baggage_files bioloid stem 16 bio_stem_cannonshooter2_en tsk adv_ex_163  http  support robotis com en baggage_files bioloid stem 16 bio_stem_cannonshooter3_en tsk adv_ex_164  http  www robotis com video BIOLOID_STEM_16 CannonShooter wmv",
      "url": "http://0.0.0.0:4000/docs/en/edu/bioloid/stem/"
      } ,
  
  
      "docs-en-edu-dream-dream-a":  {
      "title": "DREAM SET A",
      "content"	 : "DREAM SET AIntroductionROBOTIS DREAM is an entry level robotics kit optimized for learning and teaching robotics Set A combines the parts from the existing products ROBOTIS DREAM Level 1 and Level 2  and includes a much simpler QuickStart to get robotics education started   QuickStart includes assembly manual for 4 robot examples   Assembly manual for all 23 robots available through RoboPlus Design SW   Full workbook for students available  sold separately  Caution The controller CM150  in ROBOTIS DREAM SET A contains a Comprehensive Program that can make the robot move without downloading a program  To program or download a program you will need the USB Cable included  If you want to build and program your robots using more parts and peripheral devices  please purchase the ROBOTIS DREAM SET B or necessary parts separately Part ListQuick StartROBOTIS DREAM SET A comes with a Comprehensive Program in the controller that can make the robot move without downloading a program Caution The comprehensive program in the controller will be overwritten when downloading a program  Therefore  you must download the program using USB Downloader LN101  How to Play  If the button on the controller is pressed sequentially  the musical notes are played  Depending on the pressed number  the installed program can be selected   The default setting for Powersave Timer is 5 minutes when the controller is activated Select ProgramFor details  please refer to the workbook included in the kit             Button Press      Workbook      Robot                         Chapter 1  Windmill                    3  Mi       Chpater 2  Avoider                    7  Ti       Chapter 3  Scorpion                    11  Fa’       Chapter 4  Crocodile            Note Download the example program under the ROBOTIS DREAM Level 2 directory using the USB cable included in Level 1  The USB cable can also be purchased separactely ExamplesFor more information assembly and operation  please refer to the ROBOTIS DREAM SET A workbook  The controller initially comes with the comprehensive program preinstalled in it  To create your own program or download  click here to read more on How to Download Task code  You will need the USB cable to download the programs  This is included in ROBOTIS DREAM SET A             Robot      TASK Code                  1  Windmill      Not Programmable              2  Avoider      Download              3  Scorpion      Download              4  Crocodile      Download      ",
      "url": "http://0.0.0.0:4000/docs/en/edu/dream/dream-a/"
      } ,
  
  
      "docs-en-edu-dream-dream-b":  {
      "title": "DREAM SET B",
      "content"	 : "DREAM SET BIntroductionROBOTIS DREAM is an entry level robotics kit optimized for learning and teaching robotics Set B combines the parts from the existing products ROBOTIS DREAM Level 3 and Level 4  and expands on Set A to take robotics education to a higher level   QuickStart includes assembly manual for 4 robot examples   Assembly manual for all 24 robots available through RoboPlus Design SW   Full workbook for students available  sold separately  Caution ROBOTIS DREAM SET B requires parts from ROBOTIS DREAM SET A  Please make sure to purchase SET A  to build the robots in SET B  Users must program the robots or download the program into the controller CM150  to operate the robot  To download programs  you will need the USB cable included in SET A Part ListExamplesFor more information assembly and operation  please refer to the ROBOTIS DREAM SET B workbook  The controller initially comes with the comprehensive program preinstalled in it  To create your own program or download  click here to read more on How to Download Task code  You will need the USB cable to download the programs  This is included in ROBOTIS DREAM SET A             Robot      TASK Code                  1  Probing Car      Download              2  Electric Guitar      Download              3  Flag Game Robot      Download              4  War Robot      Download      ",
      "url": "http://0.0.0.0:4000/docs/en/edu/dream/dream-b/"
      } ,
  
  
      "docs-en-edu-dream-dream1-2":  {
      "title": "DREAM Lv 2",
      "content"	 : "DREAM1 Level 2IntroductionROBOTIS DREAM Level 2 teaches you the basics of how a robot moves  which includes the usage of sensors  speed and force  gait  and drive  This level comes with 12 chapters to help you understand the scientific and physical theory using experiments as you build the robots chapter by chapter Caution ROBOTIS DREAM Level 2 requires parts from ROBOTIS DREAM Level 1  Please make sure to purchase Level 1 first to build the robots in Level 2  The controller CM150  in ROBOTIS DREAM level 2 contains a Comprehensive Program that can make the robot move without downloading a program  To program or download a program you will need the USB Cable included in the ROBOTIS DREAM Level 1  If you want to build and program your robots using more parts and peripheral devices  please purchase the ROBOTIS DREAM Level 3 or necessary parts separately Part List  CM150  Geared MotorQuick StartROBOTIS DREAM level 2 comes with a Comprehensive Program in the controller that can make the robot move without downloading a program Caution The comprehensive program in the controller will be overwritten when downloading a program  Therefore  you must download the program using USB Downloader LN101  How to Play  If the button on the controller is pressed sequentially  the musical notes are played  Depending on the pressed number  the installed program can be selected   The default setting for Powersave Timer is 5 minutes when the controller is activated Select Program            Button Press      Workbook      Robot                  1  Do       Chapter 1  Elephant                    2  Re       Chapter 2  Flower  amp Firefly                    3  Mi       Chpater 3  Avoider                    4  Fa       Chapter 4  Seal                    5  Sol       Chapter 5  Beetle                    6  Ra       Chapter 6  Raccoon                    7  Ti       Chapter 7  Scorpion                    8  Do’       Chapter 8  Puppy                    9  Re’       Chapter 9  Squirrel                    10  Mi’       Chapter 10  Buffalo                    11  Fa’       Chapter 11  Crocodile                    12  Sol’       Chapter 12  Imagine            Note Download the example program under the ROBOTIS DREAM Level 2 directory using the USB cable included in Level 1  The USB cable can also be purchased separactely ExamplesFor more information assembly and operation  please refer to the ROBOTIS DREAM Level 2 workbook  The controller initially comes with the comprehensive program preinstalled in it  To create your own program or download  click here to read more on How to Download Task code  You will need the USB cable to download the programs  This is included in ROBOTIS DREAM Level 1   Integrated example program          This program is basically included in the main controller when you purchase the goods       Please refer to the Operating Method to see how to use this program Download DREAM_L2_Total_EN tsk        Example program of each chapter            Robot      TASK Code                  1  Elephant      Download              2  Flower  amp Firefly      Download              3  Avoider      Download              4  Seal      Download              5  Beetle      Download              6  Raccoon      Download              7  Scorpion      Download              8  Puppy      Download              9  Squirrel      Download              10  Buffalo      Download              11  Crocodile      Download              12  Imagine      Download      ",
      "url": "http://0.0.0.0:4000/docs/en/edu/dream/dream1-2/"
      } ,
  
  
      "docs-en-edu-dream-dream1-3":  {
      "title": "Dream Lv 3",
      "content"	 : "DREAM1 Level 2IntroductionROBOTIS DREAM Level 3 comes with the controller and teaches you the principles of servo motor control  usage of the touch sensor and IR sensors  and LED modules  This level will help you understand the flow chart to set up your ground work for programming Operate your robot using the sensors assembled in them or play games to experience how the sensors can be used in various ways Caution ROBOTIS DREAM Level 3 requires parts from ROBOTIS DREAM Level 1 and 2  Please make sure to purchase Level 1 and 2 to build the robots in Level 3  Users must program the robots or download the program into the controller  CM150  to operate the robot  To program or download a program you will need the USB Cable included in the ROBOTIS DREAM Level 1  If you want to build and program your robots using more parts and peripheral devices  please purchase the ROBOTIS DREAM Level 4 or necessary parts separately Part List  Servo Motor  IR Sensor  LED Module  Touch SensorExamplesFor more information assembly and operation  please refer to the ROBOTIS DREAM Level 3 workbook  You must download the examples programs below to operate your robot  To create your own program or download  click here to read more on How to Download Task code  You will need the USB cable to download the programs  This is included in ROBOTIS DREAM Level 1             Robot      TASK Code                  1  Music Box      Download              2  Cleaning Robot      Download              3  Truck      Download              4  Bumper Car      Download              5  Probing Car      Download              6  Electric Guitar      Download              7  Flag Game Robot      Download              8  Crane      Download              9  Drunken Basket      Download              10  Viking      Download              11  WhacAMole      Download              12  Goblin Robot      Download      ",
      "url": "http://0.0.0.0:4000/docs/en/edu/dream/dream1-3/"
      } ,
  
  
      "docs-en-edu-dream-dream1-4":  {
      "title": "DREAM Lv 4",
      "content"	 : "DREAM1 Level 4IntroductionROBOTIS DREAM Level 4 comes with a remote controller to control the robot in many ways  Now that you have an idea of how the flow chart works and have a basic knowledge of programming  this level allows you to prepare for competitions  Play games using the programs provided for download on our website and keep a record to see how well you do  Experience how the sensors can affect your results Caution ROBOTIS DREAM Level 4 requires parts from ROBOTIS DREAM Level 1  2 and 3  Please make sure to purchase Level 1  2 and 3 to build the robots in Level 4  Users must program the robots or download the program into the controller CM150  to operate the robot  To program or download a program you will need the USB Cable included in the ROBOTIS DREAM Level 1 Part List  BT210  RC100BExamplesFor more information assembly and operation  please refer to the ROBOTIS DREAM Level 4 workbook  You must download the examples programs below to operate your robot  To create your own program or download  click here to read more on How to Download Task code  You will need the USB cable to download the programs  This is included in ROBOTIS DREAM Level 1             Robot      TASK Code                  1  Tank      Download              2  Robot Knight      Download              3  War Robot      Download              4  Hockey Robot      Download              5  Excavator      Download              6  Ladder Truck      Download              7  Forklift      Download              8  Boxing Robot      Download              9  Bulldozer      Download              10  Dribbler      Download              11  Explorer      Download              12  Transporter      Download      ",
      "url": "http://0.0.0.0:4000/docs/en/edu/dream/dream1-4/"
      } ,
  
  
      "docs-en-edu-mini":  {
      "title": "ROBOTIS MINI",
      "content"	 : "ROBOTIS MINIIntroduction  Awarded the Good Design mark  Maintains compatibility with the 6mm grid OLLO ROBOTIS DREAM frame  Applies the small Dynamixel XL320 for various motion functions  Offers the ROBOTISMINI exclusive App  Touch  Gesture  Voice Recognition  Messenger   Supports various functions for the user’s convenience  battery percentage  offset setting  etc   Supports R  Task and R  Motion  Expandability capability with devices such as color Sensor  LED Module  etcPrecautionPlease be aware of your own safety as you assemble  ROBOTIS CO   LTD is not responsible for the result of any accidents caused by the user’s negligence   Safety Precautions          Read through manual carefully before assembly       Do not use any other tools other than those provided in this kit   no knives  cutters  drills  etc       Keep a safe distance from the robot during its activation       Be careful not to get fingers stuck between the robot joints       Do not store or operate the robot under direct sunlight       This project is not water proof  Do not use near water       Do not use near heat or fire       Do not disassemble or modify the parts       Keep all parts out of reach of small children       Do not drop or use sharp objects with the parts       Do not connect or let the liion battery come in contact  with hair pins  clips  or any metal objects       Do not bend  twist  or modify the metal part of the liion battery       Do not place the liion battery in the microwave or solder any parts       Do not soak or place the liion battery in or near water         Assembly Precautions          Use only the designated screw driver in the kit Size  M2       Do not use excessive force on nuts  bolts  or robotics parts       Avoid activating the robot on desks tables to avoid from falling       Damages caused from falling are not covered under warranty       The gears in the Dynamixel XL320 are subject to wear  Prolonged use  improper modification  excessive force  and accidents will increase the gear to backlash         Precautions During Use          Charging the Liion battery      Insert the liion battery in the charger case with the USB connector       The battery is not charged  Please charge before use             Frame Assembly for Dynamixel XL320    There are two different marks on the horn  Top marked and the bottom marked Before assembly  make sure the marks are in their proper position             Checking the percentage of the liion battery    The controller checks the battery percentage when the power is turned on               Status      Movement                  Good Battery Percentage      All LEDs blink in RED 1 time              Insufficient Battery Percentage      All LEDs blink in RED 5 times      WARNING Please immediately turn off the power and contact ROBOTIS when you encounter any of the following symptoms   When you see smoke from the product  When the LED on the Dynamixel XL320 does not blink during the ‘Actuator Test ’  When the robot has been exposed to water or any debris has gone into the parts   When you smell anything odd  When the robot is damagedGetting StartedPart ListPreparationConnect to MINIBluetooth must be installed in your computer to connect it to ROBOTIS MINI  If you do not have it installed  you must purchase a Bluetooth dongle   If you already have Bluetooth  use the method below to register ROBOTIS MINI’s Bluetooth  BT210  to your computer The instruction below is based on  Windows 7 8 8 1  For Windows 8 8 1  to open the Control Panel click on the right side of the charm bar then click Setting   Connect the Bluetooth  BT210  to your robot and turn the power on       Select ‘Control Panel’   gt ‘Hardware and Sound’   gt ‘Add a device’ on your computer            Select ‘ROBOTIS BT210’ from your list and click ‘Next ’            When there is more than one device  check the ‘Properties’ of the device by clicking on the right side of your mouse  Make sure the Unique Identifier number of your Bluetooth under the ‘Bluetooth’ tab is the same number you wish to use             Select ‘Enter the device’s pairing code’ from the Connection Option             Input ‘0000’ then click ‘Next ’            Device has been successfully added       Check Connection      Select ‘Control Panel’  gt ‘Hardware and Sound’  gt ‘View devices and printers’ on your computer             Select ‘Properties’ by right clicking on the BT210 that you just added             Check the COM port under the ‘Hardware’ tab       Operating MINIApp InstallIntroduction  amp InstallationROBOTISMINI uses a smart device to operate various motions The app requires the system specifications below System Requirements  OS  Android2 3 3  Gingerbread  or greater  Hardware  1 2GHz Dual Core or greater  RAM 1GB or greaterOpen the Play Store or App Store on your smart device   Play Store is for Android Market App Search for ‘ROBOTISMINI’ or ‘ROBOTIS’ then click to install  A window requesting for access to other files will appear  but touch Accept Bluetooth ConnectionWhen the controller is turned on and the LED of the Bluetooth  BT210  blinks  the robot and Bluetooth has successfully connected Connecting the robot with the app using BluetoothExecute the ROBOTISMINI app   Turn the robot on  then execute the ROBOTISMINI app on your smart device   If the Bluetooth on your smart device is turned off  a message will appear like the image below   Touch ‘Allow’ to activate your Bluetooth Caution If the setting of the ‘Server Client’ under setting is set to client  instead of the ‘Registered Robot’ appearing  the Run tab will appear  Please refer to the QuickStart for more information on ‘Server Client ’Check the Bluetooth  BT210  connection  From the list of ‘Registered Robot’ look for the Bluetooth number connected to your robot  This number can be found on the top portion of the Bluetooth as shown in the image below   If the same number does not exists  use the ‘Search New Robot’ function to find and register Input Bluetooth PIN number  You will need the PIN information to pair your device with the Bluetooth  The default PIN number is ‘0000’  Enter ‘0000’ touch ‘Okay’ to connect the robot and device  The image on the left will appear Assembly Check using the AppTouch  ‘Setting then Actuator Test’ to check your assembly  Once your smart device and ROBOTISMINI are connected  the image of ROBOTISMINI on the far right will appear Tap on each of the ID  and if the Bluetooth is connected and there is no problems in the actuators  the joint’s LED will blink in red  green  then blue If you tap an ID but the wrong joint lights up on the actual robot  there is an assembly problem  In this case  change the ID  or reassemble the joint into the correct position OperationThe ROBOTISMINI app uses the smart device’s functions such as the button  gesture  sensor   voice recognition  and messenger to execute the motions   Button  Use the buttons on your screen to operate the ROBOTISMINI  Gesture  Use the smart device to make particular gestures on the ROBOTISMINI  Voice Recognition  Use the voice recognition function for the ROBOTISMINI to respond to your voice   Messenger  Use another smart device to control the ROBOTISMINI  It can be connected to a different smart device using Messenger by sending commands   Remocon  Remote Controller  Displays a virtual remote controller on the screen for easier controlling of fighting games and soccer games Stop Motion  Initial Position  and Stand Up are 3 basic buttons on the Run tab Below are the functions of each button   Stop Motion  This button calls on the Motion  0 to execute endless loop motion  To stop motions  simply press this button to stop after the current motion is done executing   Initial Position  This buttons call on the Motion  1  which is the initial position command   If Motion  1 has been modified  it will run on the modified command   Stand Up  This buttons call on the Motion  2  which is the stand up command   If Motion  2 has been modified  it will run on the modified command When the robot is executing a motion  all other motions except the ‘Stop Motion’ will be ignored Control with ButtonsTouch a registered button in the ‘Button’ tab to activate a motion  Touch the ‘’Edit’ tab to Add Edit Delete  and change the location of the button       Edit Button Line    Add button line  Press the ‘Add Button’ button in the Edit’ tab to add a new line to the top line         Change button line order  Touch the right side of the line then drag up or down to move the line         Delete button line  Touch the right side of the line then drag left to delete a line             Edit Button    Edit Button Data  Touch  ‘ ’ to add a new button  Touch other existing command buttons to edit               The motion numbers are the numbers of the designated motions downloaded on the robot       If a motion number is not designated  the button name will be shown in light gray       If the button name and motion number are both deleted  it will not appear on the Run tab         Use the motion file setting to input motion call numbers  If you designate the motion file to use under ‘Motion File Setting’ in the app setting  you will see the ‘List’  in the top right corner in the button editing screen  Touch this ‘List’ to see the entire list     Select the desired motion from the list to automatically input a button name and number       Control with GesturesThe ‘Gesture’ tab uses the acceleration sensor of the smart device to enable the robot to do certain motions  For example if the user draws an O or X holding the smart device  the robot will either walk or sit down based on the motion designated   This works with the smart device held straight up 90 degrees from the ground       Move the robot by holding onto your smart device and making a gesture         Press down on the center of the screen and tilt the smart device to operate the robot       When touching the basic buttons in the screen below  it will operate the robot instead of moving to the ‘Button’ tab     Touch ‘Tilt’ at the bottom of the screen to check the movements designated by the tilts         Touch the top ‘Edit’ to add  edit  or delete gestures or use the ‘Train Gesture’ function to increase recognition rate  Also  the basic gestures for ‘Tilt’ can be edited     Register Gestures          Touch ‘Add Gesture’ button to add gestures       Input the gesture name  motion number and explanation       Touch ‘Ready’ and move the smart device in your hand at a steady speed to make a gesture                   When the movement is done there will be a ‘beep’ sound along with a short vibration and a message saying ‘Gesture learned ‘ will appear  Touch ‘Okay’                          Touch ‘Okay’ to add the gesture                   If you do not hear the Beep sound  please check the media volume                           When adding gestures  if you have already set the motion project file under ‘Setting’ the ‘List’ button will appear for easy access to add motions                       Edit Gesture          To edit a gesture touch the ‘Edit’ button       Use the same method when adding gestures to edit and finalize by touching ‘Okay’        Delete Gesture          Touch the right side of the line then drag left to delete         Edit Button          Touch the command you wish to change to edit the command       The buttons on the bottom of the screen can add up to max 3 buttons   1 line         Edit Tilt          Touch ‘Tilt’ at the bottom to edit the motion       Only the predesignated 4 directions can be used under the ‘Tilt’  function       Touch the direction to edit the name and number of the motion             The predesignated directions below should be held in your right hand 90 degrees straight from the ground to move forward  backward  left  and right    notice             Gesture Training Function     Use the gesture training function to increase the chances of recognizing registered gestures           Touch ‘Train’ for the gesture you would like to train       Touch ‘Ready’ and make a bigger gesture or tilt the smart device and or make different gestures       When the movement is done there will be a ‘beep’ sound along with a short vibration and a message saying ‘Gesture XXXXX learned ‘ will appear  Touch ‘Okay’      Use the same method to change similar movements for repeated studying       Operate with Voice RecognitionUses the Google voice recognition function to operate ROBOTISMINI Touch the MIC icon on the center of your screen then say  input   the command  To use this function  you must have internet connection access to your smart device for voice recognition Touch the ‘Edit’ button to add  edit  or delete any voice command   Add Voice Command          Touch the ‘Add Voice Command’ to add a command       After deciding the command and motion number  touch the ‘Okay’ button             Edit Voice Command          Select the voice command of the gesture to edit and touch Edit        Delete Voice Command          Touch the right side of the line then drag left to delete             Voice Recognition Training Function     Use the registered voice command to increase the chances of getting the right command by training it using the icon marked below           Select the voice command to ‘Train ’      Say the word after touching the MIC icon on your screen       When the voice is recognized  the word most similar will appear             Touch the ‘Okay’ button to register the most similar word to the relevant voice command Caution To delete a command added during the training  delete the voice command first and then reregister Voice Recognition Test To check whether the registered voice command is recognized properly  use the MIC icon under the ‘Edit’ tab to test the word  This does not operate the robot Operate with MessengerYour robot can be controlled using the various Messengers in your smart device   Does not work on all Messengers   To receive commands via Messenger  you must have internet access to your smart device Messenger  uses the notification bar of your smart device to check whether the command corresponds to the message then runs the command if it is the same Messenger uses the registered voice commands Caution Your Accessibility Setting for the ROBOTISMINI  App must be enabled Please refer to the ROBOTISMINI App Accessibility Setting   If your exact message is not displayed in the notification bar  you may not have access to your robot via Messenger Operate with Remocon  Use the buttons displayed  in the figure below to control ROBOTISMINI   The buttons on the left are used for movement and will activate the same preset motions in both modes   The numbered buttons on the right  1 6  activate different motions in Soccer Mode  offense defense  and different motions in Fight Mode  Over both modes  a total of 18 motions can be assigned to the buttons  When a motion is not assigned to a button  the button will be blue   Switch between Soccer Mode or Fight Mode by tapping the button in the red rectangle in the figure below   Soccer Mode          2 available modes  Defense and Offense                  Default buttons motions for Offense are Left Block  1   Right Block  2   Block 1  3   Block 2 4  for Defense  the default motion buttons are Left Kick  Right Kick  Left Side Kick  and Right Side Kick         Fight Mode          The default button settings for Fight Mode are Left Attack 1   Right Attack 2   Front Attack 3              Exit          Click on the X icon in the upper right hand corner to close the remocon screen             Run  amp Edit          To control your ROBOTISMINI  click on the Run tab then  click on the numbered buttons                To edit robot motions  click the Edit tab  Then click on a specific motion to edit it       App SettingThe ‘Setting’ is located on the top right corner of your device and below are the explanations for the menus Server Client SettingThis setting is for controlling one ROBOTISMINI with many smart devices  One smart device will be set as Server to connect directly with the ROBOTISMINI  and the other smart devices will be set as Client to send commands to the Server  The Server will receive the commands sent from the Clients  then send the commands to ROBOTISMINI to make it perform a motion By using the server client setting  the user can hold one smart device in each hand to control the ROBOTISMINI  The left hand device may perform gestures for left motions  and the right hand device may perform gestures for right motions This function cannot be used under mobile network connection  3G 4G LTE   The smart devices that are set under server and client setting must be connected in the same network 1  They can be connected to the same router  or 2  One device may have its WiFi hotspot function turned on  with the other devices connected to this hotspot      Server Client Setting    Only the smart device set as Server will be connected to the ROBOTISMINI via Bluetooth  so the smart devices set as Client will not show the registered robot list when the App is run           The IP Address of the smart device will be shown when Server is selected       Input this address into the Client smart devices and select the Test button               If set correctly  the Server smart device will show the message ‘Test’ when the Client performs the test                 How to set your portable  WiFi hotspot  The setting method and images can be different from those illustrated below                     Go into the following setting menu in your smart device System – Wireless  amp networks – Tethering  amp portable hotspot – and check ‘Portable WiFi hotspot’                             You can change the name of the smart device to be displayed on the other devices under the ‘Set up WiFi hotspot’ setting                 When using this function  all Server and Client devices will connect to the internet  data communication  using the Server  device  set as the hotspot   so please take caution of your data package usage             Motion Sound SettingUsers can add a sound file to be played when a certain motion number is performed  With this function  users can play a music on the smart device while performing dance motions Select ‘Add sound’ to input the specific motion number and register the sound file to be played  Registered sound files can be played  edited  or deleted from the sound list Motion File Setting‘Motion page number’ is the numbers that are given to the motions in the motion group Users can save time on checking each motion page number by registering the motion files in the ‘Motion file setting’ Once a motion file is registered  the ‘list’ button will be shown on the ‘add command’ window  Select the ‘list’ button to show the list of motion pages in the motion file  Select one of the motion pages shown  then its motion name and motion page number will be automatically inputted on the screen The default value is set to the basic motion file provided with the ROBOTISMINI Once a motion file is registered  the ‘list’ button will be shown on the ‘add command’ window  Select the ‘list’ button to show the list of motion pages in the motion file  Select one of the motion pages shown  then its motion name and motion page number will be automatically inputted on the screen Accessibility SettingAccessibility Setting is required to use the ‘Messenger’ function of the ROBOTISMINI App  The App must be able to access the message received through the messenger to verify that it is a correct command registered in the command list Once this function is activated  the ROBOTISMINI App can access the received messages that show up on the smart device’s notification bar So  if this function is deactivated  the ROBOTISMINI App won’t be able to access and read the commands sent via messenger  so the robot will not be able to carry out the command Unlike the Server Client setting  this function uses the messenger as a media of sending the command  so the smart device  not connected to the ROBOTISMINI  sending the message to the main smart device  connected to the ROBOTISMINI  doesn’t have to be connected in the same network The user must activate the ‘ROBOTISMINI’ on the accessibility setting list to activate this function Gesture Margin of Error SettingThis setting is used to adjust the gesture recognition rate when using the Gesture function  Setting the margin of error tolerance range low will require more precise gesture movement  Setting the range high will improve gesture recognition but will be more sensitive to other similar movements Please refer to ‘Operating ROBOTISMINI’ for more information on the Gesture function Actuator TestTouch ‘Setting then Actuator Test’ to check your assembly  Once your smart device and ROBOTISMINI are connected  the image of ROBOTISMINI on the far right will appear  Tap on each of the ID  and if the Bluetooth is connected and there is no problems in the actuators  the joint’s LED will blink in red  green  then blue If you tap an ID but the wrong joint lights up on the actual robot  there is an assembly problem  In this case  change the ID  or reassemble the joint into the correct position Motion OffsetOffset refers to the difference of standard value  Even when assembling the same type of robots  minor deviations exist between each of their respective motors  resulting in the final posture to be slightly different between them  Adjusting the motion offset value will compensate the deviated amount to perform motions more accurately       ROBOTISMINI Initial PositionGoing into the ‘Motion Offset’ menu will read the saved offset value in the ROBOTISMINI  and ROBOTISMINI will move into its initial pose  with the offset applied   The initial pose of ROBOTISMINI looks like the image below       If a joint’s position is not as shown on the image and is crooked  use the torque ON OFF function of the joint to adjust the joint into its correct initial position Caution Please hold up the ROBOTISMINI to accurately check the position of the joints Checking the position with the ROBOTISMINI on the ground may cause its legs or waist joints to alter Touch an ID to turn the respective joint’s torque OFF  and you will be able to physically move the joint  The image shown on the screen shows how the correct standard position of the joint should be Refer to the image to move the joint to its correct position  and select ‘Okay’ to turn the torque back ON  The app will read the adjusted value of the position to calculate and show the offset value on the screen If it is difficult to position the joint into an accurate position  touch  hold  the ID number long to go into a precise setting mode from the smart device  This way  users will be able to precisely adjust the joint position using the slide bar displayed on the screen   Touching the ‘offset reset’ button on the top will return all offset value to ‘0’   Touching the ‘initial position’ will delete all offset value in adjustment  and return the initial position to the offset value that was saved in the ROBOTISMINI Applying the changed offset to the ROBOTISMINI requires downloading  Touch the download button on the top right to download the value to the ROBOTISMINI controller InitializeThis functions returns the settings for the Button Gesture Voice to it’s default setting ProgrammingRoboPlus TaskA Task is a set of motions to perform a certain actions  RoboPlus refers to the source code that specifies tasks to be executed by the robot as  Task Code’  The robot moves according to your task codes  RoboPlus Task is a software to make writing these task codes easier RoboPlus Task Download and UsageRoboPlus R   Task can be downloaded from the ROBOTIS website under Support à Download  Please refer to the RoboPlus Task for detailed on how to use the program   Click here to learn more about RoboPlus Task   Click here to download RoboPlus Task programming exampleBelow is a program example for ROBOTIS MINI  This program is a master and slave program where the left arm makes the same motions as the right arm The example file can be downloaded at Download SectionDownload Task CodeThe composed task code must be downloaded to the DARWINMINI  Downloading will save the task code to the controller   The PC must be connected to the controller  Please refer to the section above on connecting the ROBOTIS MINI with the PC via Bluetooth       Check the port ROBOTIS MINI is connected on         If you don’t know the port  select ‘Auto Search’ If RoboPlus can’t find the controller  the following message will show up on the screen  In this case  follow the instructions on the screen             Select the Download icon  shortcut key F6          If there is an error in the program  make sure to find and to fix the error  Please refer to the rule check error message at the end of your program          Download in progress     If downloading fails  please try again from the beginning         Turning the ROBOTIS MINI controller OFF then ON will automatically run the task code downloaded on the controller  Check whether the robot operates in the way it was downloaded in RoboPlus MotionMotion data is a set of motor position and speed data  which is required to make the robot move in a certain way  The robot requires the motion file to move  so the correct file must be downloaded to the robot to perform the correct action  RoboPlus MOTION is used to program various motions The Task Code composed in RoboPlus Task is a program  Motion file  on the other hand  is a data  Task codes decide how the robot moves  and making the moves to be carried out requires motion data Roboplus Motion is the program that helps to easily make the robot motion data How to download and use RoboPlus MotionThe RoboPlus Motion program can be downloaded from the ROBOTIS homepage Further instructions on how to use it can be found on the eManual   Click here to learn more about RoboPlus Motion   Click here to download RoboPlus DARWINMINI basic motion fileThe basic ROBOTIS MINI motion file can be also downloaded on the eManual page The example file can be downloaded at Download SectionTry editing the sample file referring to the RoboPlus Motion instructions on eManual Download Motion FileDownload the edited motion file to the robot to use it in the ROBOTIS MINI App or task code Like the task code  the motion data needs to be downloaded to the controller once   The PC must be connected the controller  Please refer to the section above on connecting the DARWINMINI with the PC via Bluetooth       Click ‘connect’ on the bottom left             Select the port to connect on  and click connect         If you don’t know the port  select ‘Auto Search’         If connection is successful  the port number and connection speed will be displayed on the bottom left             Move to the motion download tab on the top to download the motion data  select the motion group to download  and click the download button             Download progress will be shown  and the ‘Download Success’ message will be shown on the bottom log window         Now  check with the ROBOTIS MINI App or task code to see if the edited motion performs the way it should CustomizeAdding Peripheral DevicesThe controller OpenCM9 04C Type used in ROBOTIS MINI has four ports to connect 5P devices   Accessories※ Please refer to our online shop to purchase the sensors above  GO TO ROBOTIS SHOPPort number for each port is written in white CautionLED Module  Use ports 2 and 3 LED will not light up when using ports 3 and 4 IR Sensor   Use ports 1 and 4Color Sensor  Use ports 2 and 3Images of ROBOTISMINI with different devices assembled Customize AppearanceThe stickers come with your package but if you want to rereprint them  please refer to the link below  You can also draw your own design  Sticker file can be downloaded at Download SectionDownload  Download Example Task Code and Motion File  Download Sticker Design  Download STL File for 3D Printer  Download STP Design FileReferencesFirmware UpdatePlease follow the procedure below to recover or update the ROBOTIS MINI’s controller  OpenCM9 04C  firmware       Separate the ROBOTIS MINI’s chest with the body to disassemble the controller             With the power off  push the user button  marked red below              Keep holding the user button  then connect the OpenCM9 04C with the PC with the mini USB cable  marked red below              When a green light shows up on the LED marked below  let go of the user button             Run RoboPlus  If the version is low  an automatic update will be run through the internet  If the automatic update doesn’t run  please download the latest version from the ROBOTIS website’s Download site             Run R  Manager  ver  1 0 32 0 or higher              Click the button on the top right to update RoboPlus to the latest version         If any updates were made  close R  Manager and open the program again         Click the controller firmware management button on the top             Click  Next              Select the port the OpenCM9 04C is connected on and click search             When the controller is found  click  Next              Click  Next              Click  Next              Click  Finish        ID Map",
      "url": "http://0.0.0.0:4000/docs/en/edu/mini/"
      } ,
  
  
      "docs-en-edu-ollo-bugkit":  {
      "title": "BUG KIT",
      "content"	 : "OLLO BUG KITIntroductionOLLO Bug Kit is the third kit among the kits for everyone  and the bug robots that play linetracing game  The robots detect lines by themselves  and control game  The robots are controlled by wireless controllers  can be built by the kit   The assembly manual is included to build 4 types of bug robots Beetles  Ladybugs  Callipogon Relictus  and Grasshoppers   Build the one and only robot for yourself Note Allinone sensor type controller CM100  and Geared Motor are included in OLLO Bug Kit  USB Downloader LN101  must be purchased to build and download the program that the users can control the bug robots directly  Please refer to Programming on how to program The Examples of 4Types of Bug Robot built according to the Assembly Manual The Examples of Game with OLLO Bug RobotsOLLO Bug Game 1 Bug Battle  Place a robot in the circle   Start the game with the whistling of the referee   Push the opponent’s robot to the outside of the circle  You Win   OLLO Bug Game 2 Bug LineTracing  Place a bug robot on the line   The robot traces the line as soon as the power is turned on   Lineprinted handout for OLLO Bug LineTracing  OLLO_LineTrace pdfMake the line to be traced by the bug using the enclosed puzzle board with various shapes The robot can go anywhere it wants Lineprinted handout for bug puzzle race  OLLO_PuzzleRacing zipGetting StartedPart List  CM100  RC100  Geared MotorHow to PlayThe Basic Bug Program is supposed to be included when OLLO Bug Kit is manufactured  How to play of the basic bug program is as below Powering BugIf you press the start button one time  the power is turned on if you press the button once again  it is turned off The bug controller  CM100  has powersaving function  if the start button is not pressed again  the power is automatically turned off in 5 minutes The powersaving function can be controlled by task code  and it is set to 5 minutes in the basic program  See How to Control with Task Code The Control Mode of the Remote ControllerIt is executed if the start button is pressed 1 or 2 times   time IR Channel 1  2 times IR Channel 2 The IR channel of RC100 remote control must be matched to control wireleslly   See How to Change the RC100 IR Channel The moving direction of  the bug robot is controlled using U   L   D   R button of RC100 If servo motor is connected to Port 3  the motor is controlled using button 1 and 3 If servo motor is connected to Port 4  the motor is controlled using button  2 and 4  Servo motor is not a basicoffered item please purchase and connect it  LineTracer ModeIf you press the start button 3 times  it is executed The robot traces the black line on the white floor If an object is detected  it stops if you clap  it traces the line again ZIGBee Wireless ControlZIGBeeZIG100 110 uses ZIGBee for wireless communication  ZIGBee  like Bluetooth  is the communication technology commonly used in Personal Area Network  PAN   The communication quality of ZIGBee is better than that of IR  so it allows many users to control their robots without interferences Caution Please note that not all products include a zigbee module and may need to be purchased separately Controller  amp ZIGBeeOLLO and Bioloid both use the RC100  which uses IR communication method  To upgrade to the Zigbee communication method  you must purchase the  ZIG110 set separately  The ZIG110 set includes one Zig100 module  which is attached to the RC100  and one Zig110 module which is attached to the Controller Note The modules in a single Zigbee set have been preconfigured to communicate with each other  Therefore  a module from one set may not work with a module from another set  Please be careful not to mix them up             ZIG100 installed in RC100      ZIG110 installed in CM100                                          ZIG110 installed in CM510      ZIG100 installed in CM5                              ApplicationsBattle BugIf you purchase and connect additional Servo Motor to OLLO Bug Kit  various types of battle bugs can be built The Basic Program for OLLO Bug is programmed to be able to control using RC100 when a servo motor is connected to port 3 or 4 If servo motor is connected to Port 3  the motor is controlled using button 1 and 3 If servo motor is connected to Port 4  the motor is controlled using button 2 and 4 CarIf you purchase Big Tire Set additionally for OLLO Bug Kit  you can build cars with the tires Other DevicesBesides the parts introduced in ‘Building Battle Bugs’ and ‘Building Cars ’  the following parts for OLLO controller  CM100  are used to build various types of robots             IR Sensor      Touch Sensor      LED Module                                    Learning ProgramPrint on the ScreenObjectiveWrite a program which prints out and checks the value of central IR sensor of the controller  CM100  on the monitor for program output window PreparationTo accomplish the learning objectives  write a task code first RoboPlus software which can pop up the monitor window for program printout and the controller CM100  which can transmit the value of central IR sensor to PC by executing task code are necessary  Moreover  USB Downloader LN101  is needed to connect PC and the controller Writing Task Code      Execute RoboPlus Task Program             Select the Controller  If you select an empty line  and then Double Click or press Enter  Selecting Controller window is popped up  Select a controller  and then press OK button             Writing Start Program  In the Select Instruction Type window  Select Program Start by Double clicking  and then press Enter             Enter Endless Loop  Use Endless Loop to read the IR sensor value repeatedly and print out on the screen  Select the empty line between  and  and Instruction Selection window pops up if you press Enter or Double click   Select Loop  gt Endless Loop  while 1               Enter Load  Use Load to read the IR sensor value and enter as Screen Display  Input in the empty line between  and  of Endless Loop by selecting Execute  gt Load  Assignment Value              Load the value of Central IR Sensor by Screen Output  Select the left parameter      among the parameters of Load instruction   Explanation Regrading Parameter   Parameter selection window is popped up as below if you double click   and then press Enter   Select Controller  gt Print with Line and press OK         As above  input Controller  gt Central IR Sensor in the right parameter               The following screen shows that all the parameters of Load instruction are entered             Save Task Code  Press Ctrl   S or Save Button to save       Download Task CodeDownload the task code written above to the controller   How to Download Task code Run Program      Popping up the monitor for program printing window  To see the screen output during the program execution  monitor for program printing window must be popped up before program execution  How to pop up the monitor for program printing window Click View Program Output button in the Program Download window  click View Program Output button in Toolbox  select View Program Output V  of Program V  menu  or Press F5 button         Executing the Program  Once the monitor for program printing window is popped up  execute the downloaded program for the controller   The internal LED is turned on by pressing the start button on the controller  and the downloaded program is executed  Check if the number values on the monitor for program printing window are changing or not by moving hands close and far from the front of central IR sensor of the controller   Move the BugObjectiveLet us move the bug forward  left  right  and backward   The bug robot can be made with OLLO Explorer and Inventor                                                  Forward      Left      Right      Backward              Left Motor ForwardRight Motor Forward      Left Motor StopRight Motor Forward      Left Motor ForwardRight Motor Stop      Left Motor BackwardRight Motor Backward      PreparationPC RoboPlus Task Program   Assembled Bug Robot  USB Downloader LN101 Writing Task CodeMove Forward      Executing RoboPlus Task and Creating program start  Please refer to See Printing Out the Screen   If RoboPlus Task is executed  the following screen can be seen             Making Forward Function  Please refer here for more information on functions   Functions must be made outside of  and  in program start  Therefore  let us start making the functions from the 6th line  First of all  select Make Function on Function  Subroutine  in the select instruction window which pops up if the 6th line is selected         The function is made as below         To designate function name  double click Input_Name part or enter the function name as Forward by pressing Enter as selected  and then press Enter again             Motor Controlling to move the bug forward  For bug  two geared motors are supposed to move the legs made of left and right joints  To move the bug forward  both motors which move the legs must spin forward  To control geared motor  the motor control value must be entered using Load instruction  Select instruction type window is popped up if you double click the empty line between  and  of Forward function   Select Execute  gt Load  Assignment value          To control the geared motor  left motor  which is connected to port 1  select the first   and enter Geared Motor Port 1         To designate the speed and the spin direction of the left motor  select the second   and enter Direction  CCW and power  1023   CCW represents counter clockwise and the direction of the left motor   Power 1023 is the maximum power value of geared motor if the power is strong  the spinning power is also strong  The speed is fast          The following image shows the control value CCW1023 is entered port 1 of the geared motor         To control port 2 of the geared motor  insert an empty line under the instruction line just entered   To insert an empty line  press Space at the desired location  The following image shows the Space is pressed after clicking the  location of Forward         As the method above  insert an instruction line which orders to spin at the power of 1023  Maximum power  and CW direction  Clockwise  to port 2 of the geared motor   In case of the right motor  CW is the forward direction              Calling Function  Please refer here for more information on functions   To execute Forward function as soon as the program of CM100 is executed  Forward function must be called in Program Start  To make the program execute continuously  Endless Loop is used   Enter Endless Loop between  and  of Program Start         Call Forward function in Endless Loop sentences   Double click an empty line of Endless Loop or press Enter to select Call function on Function  Subroutine          Double click Input_Name part or press Enter to make the list of currentlymade functions   Select Forward function or enter it directly         The following image shows the final results have been entered so far       Moving BackwardFor moving backward  simply change the direction of two motors from the forward direction  Thus  let us make Backward function by modifying the Forward function       Copying the Forward function and then pasting  Pleaser refer to 5  Copy Cut Paste   Select all the Forward function while dragging the Mouse and pressing Shift Key or Ctrl Key         In the menu popped up by rightclick  Copy by selecting Copy C  or pressing Ctrl   C         After clicking the 15th line under the Forward function  attach the function copied by clicking Paste P  in the poppedup menu or pressing Ctrl   V         The following image shows the copy and the paste of Forward function are completed             Changing the name into Backward function and the direction of the motors  Change the name of copied fuction from Forward to Backward   Doubleclick the function name part or press Enter to modify      Change the spin direction of both motors to the opposite  Doubleclick the right parameter  CW1023 or CCW1023  part or Enter to modify          In start program  change the calling function from Forward to Backward  When the program is started  Backward function is executed repeatedly    Turning LeftTo make TurnLeft function  copy the Forward function the same as Backward function is copied and change the function name to TurnLeft let the right motor  port 2  spin forward direction and stop only the left motor  port1   Enter 0 in Power regardless CW CCW  the bug robot turns left Turning RightTo make TurnRight function  copy the Forward function the same as the Backward function is copied and change the function name to TurnRight let the left motor  port 1  spin forward direction and stop only the right motor  port 2   Enter 0 in Power regardless CW CCW  the bug robot turns right Download Task CodePlease refer to Program Download on the program download procedure Program Result File   bug_move tskRun ProgramIf you turn on CM100 by pressing the start button  the bug robot continuously moves forward or backward  or it turns left or right depending on the function called from Start Program Line Tracing BugObjectiveThe degree of IR reflection varies pursuant to the colors of objects   White reflects more IR  whereas black reflects less IR  Using such characteristics  let us program the IR sensor of CM100 so that the robot can distinguish the white floor and the black line and trace the line  It is programmed in the basis of Moving the Bug  PreparationPC RoboPlus Task Program   Assembled Bug Robot  USB Downloader LN101   a white board with a black line Writing Task CodeThe algorithm of program which distinguishes the white floor and the black line and makes the bug trace the black line using left IR sensor and right IR sensor on the bottom of CM100 is as below       The right sensor detecting the black line  O   The left sensor detecting the black line  X   Turn Right    If the black line is detected only by the right sensor  it means the line is curved to the right change the robot’s moving direction to the right by stopping the right motor         The right sensor detecting the black line  X   The left sensor detecting the black line  O   Turn Left    In opposite to the case above  since the line is curved to the left  change the robot’s moving direction to the left by stopping the left motor         The right sensor detecting the black line  X   The left sensor detecting the black line  X   Forward    If both sensors do not detect the line  the robot moves forward without changing the direction since the line is located in between the sensors or the robot escaped from the line         The right sensor detecting the black line  O   The left sensor detecting the black line  O   Forward    If both sensors detect the line  the robot moves forward without changing the direction since there is a black line in width such as an intersection of crossroads    or the floor is black   Enter the code which calls different function depending on the detecting conditions of the left right IR sensors in program start  as mentioned In the previous example of Moving the Bug  and move the bug robot       Turn left if the black line is detected only in the left IR sensor  Enter IF instruction of a conditional sentence to move in different ways depending on the conditions between  and  of Endless Loop in program   Please refer here for more information on IF instruction   The screen after entering IF instruction is as below         In the case that the black line is detected only on the left IR sensor  the value of left IR sensor is less than 200  while the value of right IR sensor is greater than 200  To find such conditions  enter left IR sensor in comparison parameter 1 the first    of the conditional sentence         Since the left IR sensor value must be less than 200   lt is entered as the comparison operator between the two comparison parameters         Enter 200 in the comparison parameter 2  the second            Since the conditions must be satisfied   Left IR Sensor  lt 100   and   Right IR Sensor  gt 200    change the connecting operator to  amp amp  AND  by clicking then   If the connecting operator is changed  a conditional sentence is automatically added to the next         Complete the IF instruction enter right IR sensor on comparison parameter 1 of the second conditional sentence   gt as the comparison operator  and 200 for comparison parameter 2         If the completed conditional sentence is True  If the black line is detected only on the left IR sensor   Calls TurnLeft function             Conversely  turn right if the black line is detected only in the right IR sensor  To check the conditions continuously after the IF instruction of 1  enter ELSE IF instruction of a conditional sentence  If IF instruction conditional sentence of 1 is True  the ELSE IF instruction is not executed         Not like in 1  if the black line is detected only by the right IR sensor  the left IR sensor value is greater than 200  while the right IR sensor value is less than 200  Regarding the conditional sentence  refer to 1 and write the comparison operator in the opposite of 1   In this case  TurnRight function is called             In the cases besides 1 and 2  that it  the black line is detected by both IR sensors  or the line is not detected by both IR sensors the robot moves forward  In the case that not belongs to the conditional sentences mentioned above  enter ELSE instruction of a conditional sentence to move forward  and call Forward function       Download Task CodePlease refer to Program Download on the program download procedure Program Result File   bug_linetracer tskDownload the Handout for Line TracerRun ProgramPlace the bug on the white board with a black line and play   Check if the bug traces the line or not Sensing BugObjectiveLet us program a robot which traces the black line on the white floor like the linetracing bug and stops if an object is detected by the central IR sensor moreover  if clapping sounds are detected  it traces the black line again   It is programmed in the basis of The LineTracing Bug PreparationPC RoboPlus Task Program   Assembled Bug Robot  USB Downloader LN101   a white board with a black line Writing Task Code      Add Stop Function  If an object is detected by the central IR sensor  Stop function is added to stop the movement  Make function referring to Moving the Bug     Enter Power 0 in the Left and Right Geared Motors and make Stop function             Call Stop function if an object is detected by the central IR sensor     If the value of the central IR Sensor becomes greater than 200 by adding IF instruction in start program  an object is detected   call Stop function             Wait shortly until the bug stops completely     To use sound detection  the bug must stop completely it is assumed that if the bug moves  the sounds of the bug are detected since the moving sounds such as the motor sound are recognized by the mic of CM100 as quite loud sounds  Therefore  add the code which waits for certain time period using timer   Please refer here for more information on timer      Enter 1 second in the timer using Load instruction                 To wail until the timer becomes 0  use Conditional Stand instruction Pleaser refer here for more information on conditional stand   It is Conditional Stand  waits until the value becomes 0 by counting  while the value is greater than 0                  Wait until the clapping sounds come out through mic     If the motions are stopped because an object is detected by the central IR sensor  make the code which waits until sounds are detected in stop status  Since Sound count is not automatically initialized to 0  it must be initialized to 0 by Load instruction before waiting Please refer here for more information on sound count              Wait if the Sound Count is 0   Download Task CodePlease refer to Program Download on the program download procedure Program Result File   bug_sensor tskRun ProgramAfter executing the program  check if the bug robot stops or not when an object is detected by the central IR sensor  Later on  check if the bug moves again or not by clapping Control the BugObjectiveLet us program a robot so as to control forward  backward  left and right using RC100 controller It is programmed in the basis of The sensorresponding bug  PreparationPC RoboPlus Task Program   Assembled Bug Robot  USB Downloader LN101   RC100Writing Task Code      In the existing code  delete the surrounded part with  and  of Endless Loop in start program             Wait until new wireless data arrive using Conditional Stand instruction to receive wireless control signal of RC100 Please refer here for more information on new wireless data arrival                  If the new wireless data is arrived  enter the received wireless data in ReceivedData variable using Load instruction Please refer here for more information on Variable                      Separate the RC100 Moving Control Button value from the Received Wireless Data values     Enter U  L  D  R button values of RC100 in MovingControlKey variable by separating necessary values through Bit Operator  amp from ReceivedData values using Compute instruction  Enter Compute instruction  Please refer here for more information on Compute instruction          Enter MovingControlKey variable in Result column and then ReceivedData variable in Operation Parameter 1 select  amp  AND  as the next operator         Select U  L  D  R as RC100 button values and enter them in Operation Parameter 2 Please refer here for more information on RC100 button values          The following image shows the data are completely entered             Move forward and backward and turn left and right depending on the value of MovingControlKey  it stops if all the MovingControlKey buttons are released       Download Task CodePlease refer to Program Download on the program download procedure Program Result File   bug_rc tskRun ProgramAfter executing the program  control the robot forward  backward  left  and right using RC100 controller  Download Download Task Code OLLO_BUG_Product_EN tskNote How to Download Task codeNote How to play Bug",
      "url": "http://0.0.0.0:4000/docs/en/edu/ollo/bugkit/"
      } ,
  
  
      "docs-en-edu-ollo-explorer":  {
      "title": "OLLO EXPLORER",
      "content"	 : "OLLO EXPLORERIntroductionCreate robots using the controllers and sensors Through 12session curriculum  learn scientific principle and physics theory such as power of robot  usage of sensors  speed and force  walking  and running etc  by experiment Note For OLLO Explorer  the instructor will download the program   If you want to download and learn the program for yourself  you must purchase USB Downloader LN101  separately  If you want to build and program your robots using more peripheral devices  please purchase OLLO Inventor Part List  CM100  Geared MotorQuick StartHow to PlayFor the controller CM100  included with OLLO Explorer  a comprehensive program which can be used without downloading is installed Caution The comprehensive program in the controller will be overwritten when downloading a program  Therefore  you must download the program using USB Downloader LN101  If the button on the controller is pressed sequentially  the musical notes are played  Depending on the pressed number  the installed program can be selected Select ProgramPlease refer to the learning material in the kit for more information             Button Press      Musical Note      Chapters      Robots                  1      Do      E1Chapter 1  2                    2      Re      E1Chapter 3                    3      Mi      E1Chapter 4                    4      Fa      E2Chapter 1                    5      Sol      E2Chapter 2                    6      Ra      E2Chapter 3                    7      Si      E2Chapter 4                    8      Do      E3Chapter 1            Note The example which cannot be selected by the comprehensive program must be downloaded using USB Downloader LN101  DownloadPlease refer to Explorer Learning Material on How to Assemble or motions during the execution for each example Also  please refer to How to Download of task code for more information   Integrated example program          This program is basically included in the main controller when you purchase the goods      Please refer to the Operating Method to see how to use this program   Download OLLO_L2_Total_EN tsk        Example program of each chapter            Robots      E1                  1  Elephant      Download OLLO_L2_Elephant_EN tsk              2  Windmill      Download OLLO_L2_Windmill_EN tsk              3  Avoider      Download OLLO_L2_Avoider_EN tsk              4  Imagine      Download OLLO_L2_DistanceSensor_EN tskDownload OLLO_L2_Penguin_EN tskDownload OLLO_L2_CardGiver_EN tsk                  Robots      E2                  5  Seal      Download OLLO_L2_Seal_EN tsk              6  Line Tracer      Download OLLO_L2_Linetracer_EN tsk              7  Howitzer      Download OLLO_L2_Howitzer_EN tsk              8  Imagine      Download OLLO_L2_SoundSensor_EN tskDownload OLLO_L2_Dancing_EN tskDownload OLLO_L2_Cradle_EN tsk                  Robots      E3                  9  Lady Bug      Download OLLO_L2_Ladybug_EN tsk              10  Wheel Puppy      Download OLLO_L2_WheelPuppy_EN tsk              11  Mouse      Download OLLO_L2_Mouse_EN tsk              12  Battle Bug      Download OLLO_L2_Battlebug_EN tsk      ",
      "url": "http://0.0.0.0:4000/docs/en/edu/ollo/explorer/"
      } ,
  
  
      "docs-en-edu-ollo-inventor":  {
      "title": "OLLO INVENTOR",
      "content"	 : "OLLO INVENTORIntroductionCreate robots using the controller  geared motors  sensors  and servo motors and perform basic programming Through 12session curriculum  learn programming and experiment on wireless communication  the concept of control  sensors and various module applications Part List  RC100  LN101  Servo Motor  IR Sensor  LED Module  Touch SensorQuick StartZIGBee Wireless ControlZIGBeeZIG100 110 uses ZIGBee for wireless communication  ZIGBee  like Bluetooth  is the communication technology commonly used in Personal Area Network  PAN   The communication quality of ZIGBee is better than that of IR  so it allows many users to control their robots without interferences Caution Please note that not all products include a zigbee module and may need to be purchased separately Controller  amp ZIGBeeOLLO and Bioloid both use the RC100  which uses IR communication method  To upgrade to the Zigbee communication method  you must purchase the  ZIG110 set separately  The ZIG110 set includes one Zig100 module  which is attached to the RC100  and one Zig110 module which is attached to the Controller Note The modules in a single Zigbee set have been preconfigured to communicate with each other  Therefore  a module from one set may not work with a module from another set  Please be careful not to mix them up             ZIG100 installed in RC100      ZIG110 installed in CM100                                          ZIG110 installed in CM510      ZIG100 installed in CM5                               Download Please refer to Inventor Learning Material on How to Assemble or motions during the execution for each example Also  please refer to How to Download of task code for more information             I1      TASK Code      Description                  1  Crossing Gate      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot              2  Bump Car      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot              3  Probing Car      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot              4  Guitar      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot                  I2      TASK Code      Description                  5  Bird      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot              6  Crane      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot              7  Combat Car      DownloadDownload      Example program for assembly checkExample program for robot              8  Tank      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot                  I3      TASK Code      Description                  9  Flag Game      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot              10  Battle Bug      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot              11  Knight      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot              12  Racing Car      DownloadDownloadDownloadDownload      Example program for assembly checkExample program for programming 1Example program for programming 2Example program for robot      ",
      "url": "http://0.0.0.0:4000/docs/en/edu/ollo/inventor/"
      } ,
  
  
      "docs-en-faq":  {
      "title": "FAQ",
      "content"	 : "  Product Compatibility Guide  Download Task Code  Task Rule Check  CM 510 530 Fuse Replacement",
      "url": "http://0.0.0.0:4000/docs/en/faq/"
      } ,
  
  
      "docs-en-faq-cm-510-530-fuse":  {
      "title": "CM-510/530 Fuse Replacement",
      "content"	 : "Replacing the FuseThe fuse in the CM510 CM530 prevents it from overloading which can damage the circuit If the CM510 CM530 does not turn on with the battery but turns on when connected to the SMPS  replace your fuse ※ The size of the fuse is shown below  Use a 125V 5A 10A fuse ※ How to replace the fuse      Find the fuse on the back of the CM510 CM530             Use a pincette to replace the fuse with a new one       ",
      "url": "http://0.0.0.0:4000/docs/en/faq/cm_510_530_fuse/"
      } ,
  
  
      "docs-en-faq-download-task-code":  {
      "title": "Download Task Code",
      "content"	 : "Download Task CodeCM5If you want to use RoboPlus program for CM5  the controller used for Bioloid Beginner Comprehensive Kits   you must update the firmware  Please refer to Firmware Update of RoboPlus Manager on how to update firmware Preparation  Call the task code   tsk  from RoboPlus Task           You can open it by doubleclicking the task code file       You can open it using Open File function of RoboPlus Task       You can open it by dragging  amp dropping on RoboPlus Task         Connect the PC and the Controller with USB2Dynamixel   Turn on the power of the controller Download      Connect the controller before downloading the task code   To download the task code  the controller must be connected to the PC Please refer to controller information for information on how to connect the controller to the PC          Select the correct COM port  if you know  or else use the Automatic Search function  to easily find out the appropriate port     If RoboPlus Task is unable to find a controller  the following error message will be shown   Check if the controller is connected to the PC   See controller information on how to connect the controller    Check if the controller is turned on   Check if the correct communication port was chosen   Select the download menu If the program has an error  you must find the error and correct it   See rule check error messages   Download the program If the downloading fails  it will automatically try again from the beginning   Execute the task code and your robot will move   Turn on the controller and execute the downloaded task code Please refer to each controller information to learn how to execute the task code  CM100Preparation  Please open a task code file   tsk  to download from RoboPlus Task           You can open it by doubleclicking       You can open it by using an ‘open a file’ function of RoboPlus Task       You can open it by dragging  amp dropping  it to  the RoboPlus task with mouse         Connect the contorller CM100  with your PC by using a USB Downloader LN101    Connect 2 double AA batteries then turn the power for the controller  CM100  on Download      Connect the controller before downloading the task code  To download the task code  the controller must be connected to the PC   Please refer to controller information for information on how to connect the controller to the PC          Select the correct COM port  if you know  or else use the Automatic Search function  to easily find out the appropriate port         If RoboPlus Task is unable to find a controller  the following error message will be shown         Check if the controller is connected to the PC   Check if the controller is turned on   Check if the correct communication port was chosen       Select the download menu         If the program has an error  you must find the error and correct it   See rule check error messages         Download the program         If the downloading fails  it will automatically try again from the beginning         Execute the task code  gt Your robot will move  Turn on the controller and execute the downloaded task code   VideosDownload RoboPlus Program  for CM100 Setting Up the Port",
      "url": "http://0.0.0.0:4000/docs/en/faq/download_task_code/"
      } ,
  
  
      "docs-en-parts-communication-bt-110":  {
      "title": "BT-100/110A",
      "content"	 : "BT110 110AIntroductionNote BT100 110A is discontinued BT100 110A are Bluetooth modules that communicate via UART  The BT100 and BT110A only differ on mounting interface  The connectable parts are as follows Please refer to the explanation pages on each part on how to install    BT100  ZIG2Serial  RC100A  BT110A          CM100A  CM530  Works for Remote Control  Wireless Download      CM510  CM700  Works for Remote Control only  Use after firmware update       Warning Followings are NOT compatible with BT110A Set  Remote RC100  When affixing on wireless module  green LED lights on   Controller CM100  CM5  CM2 The BT100 110A are sold together as a set and set with factory default settings so there’s no need to do additional work in settings during mounting   Please be careful not to lose one of the set  11 communication with BT100 110A only Example  Controlling OLLO Bug using Bluetooth Communication   BT110A set is used             Installing BT110A to OLLO Bug Controller CM100A       Installing BT100 to Wireless Controller RC100A         Controlling Bioloid Premium Kit in PC using Bluetooth Communication   BT110A set is used             Connecting to the serial port of PC after installing BT100 to ZIG2Serial      Installing BT110A to Bioloid Premium Kit Controller CM510  CM530 and CM700       Caution Connect the modules while power is off  Connecting while power is on could result in malfunction Specifications            Item      Description                  Weight      BT100  2 2g  BT110A  5 2g              Dimension      BT100  18 5mm   20mm   9 8mm  3 7mm  the height excluding connector BT110A  18mm   30mm   9 1mm              Bluetooth      Bluetooth Specification 2 0 Support              Range      10M              Frequency      2 4GHz ISM Band              Bandwidth      MAX 250kbps              Default baud rate      57 600bps              Sensitivity      83dBm  Typical               Transmit Power      4dBm Typical               Bluetooth profile supported      SPP  Serial Port Profile               Operating Voltage      3 3V              Consumed Current      48mA  Max               Operating temperature      10°C   50°C              Baud rates      1 200bps   230 400bps              Antenna      Chip Antenna              Interface      UART  TTL Level               Flow Control  BT100       RTS  CTS support      Default Settings            Item      BT100 Set values      BT110A Set values                  Device Name      BT100vx x x      BT110vx x x              Pin Code  Pass key       0000      0000              Uart  baud ratedata bitparity bitstop bit       576008N1      576008N1              ROLE      MASTER      SLAVE              TIMEOUT      1sec      1sec              Connection Mode      MODE1      MODE2              Debug Char      0x21      0x21      PinoutBT100            Pin No       Name      Description      I O      Signal Level                  1      GND      Ground  0v                           2      VCC      3 3V DC      INPUT                    3      Status LED      Status LED      OUTPUT      TTL              4      FA RESET      Factory Reset Reset to default setting       INPUT      TTL              5      UART_CTS      UART Clear to Send      INPUT      TTL              6      UART_RTS      UART Ready to Send      OUTPUT      TTL              7      TXD      Transfer Data Data Out       OUTPUT      TTL              8      RXD      Receive Data Data In       INPUT      TTL      BT110A            Pin No       Name      Description      I O      Signal Level                  1      RXD      Receive Data Data In       INPUT      TTL              2      TXD      Transfer Data Data Out       OUTPUT      TTL              3      VCC      3 3V DC      INPUT                    4      GND      Ground  0v                   ",
      "url": "http://0.0.0.0:4000/docs/en/parts/communication/bt-110/"
      } ,
  
  
      "docs-en-parts-communication-bt-210":  {
      "title": "BT-210",
      "content"	 : "BT210IntroductionBT210 uses Bluetooth communication to allow the modules to interact via serial communication  UART   The compatible products are shown below Please refer to the compatible part for instructions on how to connect the device    BT210          CM100A  CM530  Wireless control  Wireless download      CM510  CM700  CM900  Wireless control  Firmware update required       CautionFollowing products are not compatible with BT210   Remote Controller  RC100  RC100A  Controller  CM100  CM5  CM2 Example  Able to control the OLLO Bug using Bluetooth communication           Connect BT210 onto the OLLO Bug controller  CM100A       Able to wirelessly control the OLLO with the Android smart phone by connecting the BT210 onto the OLLO         Using the PC to control the controller via Bluetooth communication           Connect BT210 onto the CM900 and connect onto the Bluebooth port       Able to mount the BT201 onto the Bioloid Premium kit’s controller  CM530       Caution Please be sure to connect the device while the controller is turned off  Damage may occur if the device is connected while the power is turned on Specifications            Item      Description                  Weight      4 51g              Size      18mm X 30mm X 9 1mm              Bluetooth      Bluetooth Specification 2 1 Support              Effective Communication Distance      10M              Frequency      2 4 GHz ISM Band              Bandwidth      MAX 250kbps              Default Baud rate      57600bps              Sensitivity      81dBm  Typical               Transmit Power      4dBm Typical               Bluetooth Profile Supported      SPP  Serial Port Profile               Operational Voltage      3 3V              Consumed Current      48mA  Max               Operating Temperature      40°C   85°C              Baud rate Range      1 200bps – 400 000bps              Antenna      Chip Antenna              Interface      UART  3 3V Level               Conducted Net Power      6 4dBm Class 2       Available Baudrate            Baudrate      BT210FW v12 or below      BT210FW v13 or above      BT410 BT410 Dongle                  1200      X      X      O              2400      X      X      O              4800      X      X      O              9600      O      O      O              14400      X      X      O              19200      O      O      O              28800      X      X      O              38400      O      O      O              57600      O      O      O              76800      X      X      O              115200      O      O      O              230400      O      O      O              250000      O      O      O              460800      O      O      O              921600      O      O      O              1000000      X      O      O              1382400      O      O      X              1500000      X      O      X              2000000      X      O      X              2500000      X      O      X              3000000      X      O      X              4000000      X      O      X      Communication ModeUtilizes a pairing mechanism that allows reliable 11 communication 11 Communication  When using two BT210s  it is possible to set one as the Master and the other as the Slave  use the device to communicate with each other  Also  It is possible to use the BT210 with a smart phone—with the Bluetooth capability—by setting BT210 to Slave mode and pairing the two devices to each other   When the power is initially supplied to the BT210  the blue LED blinks  Once the pairing is successful the blinking stops and the blue LED light is maintained BT210 Pairing SettingSetup      Download sketch example for the OpenCM9 04 f_SerialUSB_Serial2_Converter             Connect the BT210 to the OpenCM9 04  then run Tera Term          Download Tera Term                    Once connection is complete baud rate can be any             Go to Setup gtTerminal and check local echo            From terminal check the box and press OK  From there enter the AT and enter an integer  The OK button becomes available and will allow check of the BT210             Once setup is complete when the BT210 is connected to the CM900 pick either master or slave mode The picture show master mode       CommandsThe following are AT terminal commands for the BT210      System reset  Enter ATZ press the Enter key and the BT210 resets if settings have changed the mode will change upon reset         Mode change          Use this command to switch between master and slave modes for the BT210       AT BTROLE M  gt Master mode      AT BTROLE S  gt Slave mode      Afterwards enter ATZ to reset                   MASTER Mode                  SLAVE Mode            Peripheral device search  This is possible only in master mode  Enter AT BTINQ followed by the Enter key the device class comes as 0x1F00 SPP              Connecting devices  pairing   Once devices have been found they can be connected via its 12digit hex MAC address   for example a device with MAC address of abc2ff123458 enter ATDabc2ff123458  ignore the – sign   When asked for pin code enter 0000         Change pin code          AT BTKEY digit Pin Code      To change pin code follow the procedure below                   then enter AT BTKEY  ignore the   sign                 Output current device class  Output of SPP  serial port profile  0x1f00            Change Bluetooth device name  AT BTNAME   for name change            Device Under Test  DUT  mode  Under this mode the device is a test device and not suited for applications         Enter AT BTDUT then ATZ   make sure is in slave mode  To get out of DUT mode enter AT BTDUT one more time then ATZ    Change Baudrate  AT BTUART baudrate parity_bit stop_bit  Example AT BTUART 57600 n 1Pinout            Pin No       Name      Description      I O                  1      RXD      Receive Data Data In       INPUT              2      TXD      Transmit Data Data Out       OUTPUT              3      VCC      3 3V DC      INPUT              4      GND      Ground  0v             ",
      "url": "http://0.0.0.0:4000/docs/en/parts/communication/bt-210/"
      } ,
  
  
      "docs-en-parts-communication-bt-410-dongle":  {
      "title": "BT-410 Dongle",
      "content"	 : "BT410 DongleIntroductionBT410 Dongle converts USB 2 0 interface and Bluetooth 4 0 Low Energy standard communication interface Master  If BT410 Dongle is connected to the PC  it can be paired with a BT410 Slave module to exchange data  Please refer to each product page for instructions 1  BT410 Dongle Compatible Devices  BT410 SLAVE Module2  BT410 Dongle Incompatible Devices  BT410 Master Module  BT210 Master Module  BT210 Slave Module  BT100 110A  ZIG100 110ACaution Please make sure to turn off the controller before connecting the Bluetooth module  The device may cause malfunction or be damaged if connected while the controller is turned on Specifications            Item      Description                  Weight      7 5g              Dimension      50 5mm x 20mm x 10 5mm              Bluetooth      Bluetooth Specification 4 0 Low Energy Support              Effective Communication Distance      10M              Frequency      2 4GHz ISM Band              Bandwidth      MAX 128kbps              Default baud rate      57 600bps              Operating Voltage      5 0V              Current Consumption      25mA  Max               Operating temperature      0°C   40°C              Baud rates      1 200bps   1 000 000bps              Antenna      Chip Antenna              Interface      USB 2 0 Full Speed              Sensitivity      81dBm  Typical               Conducted Net Power      6   4dBm  Class 2       Available Baudrate            Baudrate      BT210FW v12 or below      BT210FW v13 or above      BT410 BT410 Dongle                  1200      X      X      O              2400      X      X      O              4800      X      X      O              9600      O      O      O              14400      X      X      O              19200      O      O      O              28800      X      X      O              38400      O      O      O              57600      O      O      O              76800      X      X      O              115200      O      O      O              230400      O      O      O              250000      O      O      O              460800      O      O      O              921600      O      O      O              1000000      X      O      O              1382400      O      O      X              1500000      X      O      X              2000000      X      O      X              2500000      X      O      X              3000000      X      O      X              4000000      X      O      X      CompatibilityAvailable features with BT410 Dongle and BT410 Slave pair                    Firmware RecoveryR  Manager 2 0      Firmware UpdateR  Manager 2 0      Entry      R  Scratch      TASK 2 0 Download      Motion 2 0 Download                  CM50 PLAY700       O      O            O      O                    CM150      O      O                  O                    CM200      O      O                  O      O              CM530      O      O                  O      O              OpenCM7 0      O      O      O      O      O                     OpenCM9 04      O      O                  O      O              Car Robot                  O      O                  Communication ModeUtilizes a pairing mechanism that allows reliable 11 communication 11 Communication  Once the power is supplied to the Bluetooth module  the blue LED will blink  Successful pairing will turn on the solid blue LED   Auto Pairing  When the blue LED of BT410 dongle is blinking not paired   approach the BT410 Slave module near the BT410 dongle within 10cm  to automatically pair both devices  Successfully paired devices can be paired again within the range of Bluetooth communication BT410 Dongle SettingCan reset system  change device name  and set SLAVE address  but CANNOT change mode       Connect the BT410 dongle to PC and check assigned port number from the Device Manager  Then connect using the Tera Term terminal program through the respective COM port               Run Tera Term terminal program and select New Connection    under the File menu       Download Tera Term                  Select assigned COM port for BT410 dongle                 Go to Setup  gt Serial port             Set the Baud rate to 57600             Go to Setup  gt Terminal             Enable Local echo             If an exclamation mark    is entered  OK will be returned and command mode becomes available  If entering AT on the terminal returns OK  BT410 dongle is successfully connected and ready to be configured             The command AT BTINQ DBE7DF000001 will search for the BLE devices whose MAC address is higher than DBE7DF000001             After searching for available devices with AT BTINQ command  use returned MAC address to pair with the device  For example  in order to pair with above searched device  use ATD command followed by the MAC address ATDDBE7DF00512B   AT CommandsThe followings are AT terminal commands for the BT410 Dongle       System Reset  Enter ATZ to reset BT410 dongle  If settings are modified  the modified setting will be applied on reset             Search Device  Enter AT BTINQ DBE7DF000001 to search for the Bluetooth devices whose MAC address is higher than DBE7DF000001             Auto Pairing  Unpaired BT410 Slave module can be automatically paired if it is located within 10 cm to the BT410 dongle         Disable Auto Pairing  Enter AT BTAUTOPAIR 0      A few seconds later  below message will be displayed      assets images parts communication bt410_dongle_14 png       Enable Auto Pairing  Enter AT BTAUTOPAIR 1      A few seconds later  below message will be displayed      assets images parts communication bt410_dongle_16 png   Change Baudrate  AT BTUART baudrate parity_bit stop_bit  Example AT BTUART 57600 n 1Check DriverHow to check whether the BT410 Dongle driver is installed correctly is as follows       Connect BT410 Dongle to the USB Port of PC             Select Manage in the poppedup menu shown by rightclicking My Computer             Check USB Serial Converter in Universal Serial Bus Controllers of Device Manager             Check USB Serial Port COMx  in the list of Ports COM  amp LPT   COM Port number may vary depending on each system       Install Driver ManuallyIf you installed RoboPlus  FTDI Driver  USB2Dynamixel  USB Downloader  LN101  driver  BT410 Dongle  is installed together automatically  If you didn’t install the RoboPlus yet  or if the driver is not installed appropriately  please install it manually according to following procedures       Connect a device to PC  If the driver is not installed yet  Found New Hardware Wizard will be popped up  Install from a list or specific location  Advanced  S   gt Next N             Decide the location of Driver  If RoboPlus S W has been installed automatically  the driver is in LN101 folder of RoboPlus Installation folder  Or if you want to install the newest version  download the newest version VCP driver from  FTDI Driver Download  page                 Click the Next N  button to start the installation  Installation of USB Serial Converter driver is completed             Install the USB Serial Port driver in the same way       ",
      "url": "http://0.0.0.0:4000/docs/en/parts/communication/bt-410-dongle/"
      } ,
  
  
      "docs-en-parts-communication-bt-410":  {
      "title": "BT-410",
      "content"	 : "BT410IntroductionBT410 uses Bluetooth 4 0 Low Energy communication to allow the modules to communication via serial communication  UART   The compatible products are shown below  Please refer to the respective links for instructions on how to connect with each product 1  BT410 Compatible Devices  SLAVE module          CM100A  CM150  CM200  OpenCM9 04  wireless control  wireless download  requires latest firmware       CM510  CM530  CM700  CM900  wireless control        MASTER Moudle  RC100B  NOT Compatible with           Remote  RC100  RC100A      Controller  CM100  CM5  CM2       2  BT410 Compatible Smart Devices  Compatible Smart Devices          Android  Android OS v4 4 or higher among Bluetooth 4 0 supported devices eg  Nexus 7 2nd  Galaxy S3 or higher  However  if it is a new low cost device  Bluetooth 4 0 may not be supported       iOS  iOS v8 1 or higher eg  iPhone 4S  iPod Touch 5  iPad 3rd gen  or higher         BT410 Compatible Controllers  amp F W versions          CM150  F W v23 or higher      CM200  F W v64 or higher      OpenCM9 04  F W v11 or higher  Revision E002 Requires the latest version of F W         Compatible ROBOTIS App          Android  ROBOTIS MINI App  R  m Task  R  m Task2  R  m Motion2  R  Smart2  R  IoT      iOS  ROBOTIS MINI App  R  m Task2  R m Motion2 Requires the latest version of smartphone applications  There may be additional updates depending on the OS policy        Example  Control ROBOTIS DREAM robots using Bluetooth communication          Connect the BT410 SLAVE module onto the DREAM controller  CM150        Control the DREAM robot by connecting an Android iOS smart device with BT410         Edit the motion for ROBOTIS MINI using Bluetooth communication          Connect the BT410 SLAVE onto OpenCM9 04 and run R  m Motion on an Android iOS smart device      Search for BT410 on the smart device and connect      Use the R  m Motion App to edit and download the motion for ROBOTIS MINI      Caution Please make sure to turn off the controller before connecting the Bluetooth module  The device may cause malfunction or be damaged if connected while the controller is turned on Specifications            Item      Description                  Weight      4 5              Dimension      18mm x 30mm x 9 1mm              Bluetooth      Bluetooth Specification 4 0 Low Energy Support              Effective Communication Distance      10M              Frequency      2 4GHz ISM Band              Bandwidth      MAX 128kbps              Default baud rate      57 600bps              Operating Voltage      3 3V              Current Consumption      7mA  Max               Operating temperature      0°C   40°C              Baud rates      1 200bps   1 000 000bps              Antenna      Chip Antenna              Interface      UART  3 3V Level               Sensitivity      81dBm  Typical               Conducted Net Power      6   4dBm  Class 2       Available Baudrate            Baudrate      BT210FW v12 or below      BT210FW v13 or above      BT410 BT410 Dongle                  1200      X      X      O              2400      X      X      O              4800      X      X      O              9600      O      O      O              14400      X      X      O              19200      O      O      O              28800      X      X      O              38400      O      O      O              57600      O      O      O              76800      X      X      O              115200      O      O      O              230400      O      O      O              250000      O      O      O              460800      O      O      O              921600      O      O      O              1000000      X      O      O              1382400      O      O      X              1500000      X      O      X              2000000      X      O      X              2500000      X      O      X              3000000      X      O      X              4000000      X      O      X      Compatibility                   ZIG110 100A      BT100 110A 210      BT410                  Android      X      O      O              iOS      X      X      O              PC      X      O      X              1 Master  1 Slave      O      O      O              1 Master  N Slave      O      X      X              1 Phone  1 Slave      X      O      O              1 Phone  N Slave      X      X      support later              Data Transfer Reliability      Low      High      High              Max Throughput      250kbps      250kbps      128kbps              Module FW Update      X      X      O              Default MAC Address      xxxx      BT110 100  001901 xxxxxxBT210  B863BC xxxxxx      DBE7DF xxxxxx              MAC Address Range      0   65 535      6 Byte      6 Byte      Communication ModeUtilizes a pairing mechanism that allows reliable 11 communication 11 Communication  Once the power is supplied to the Bluetooth module  the blue LED will blink  When pairing is successful  the blue LED will stay on  solid  BT410 SettingCan reset system  change device name  and set SLAVE address  but CAN NOT change mode       Download the f_SerialUSB_Serial2_Converter example for the OpenCM 9 04 using OpenCM IDE             Use the USB port to connect the OpenCM9 04 to the PC  install the driver  then connect using the Tera Term terminal program through the respective COM port           Download Tera Term                    Connection is complete if the status is similar to the image shown below  The baud rate can be any value             Go to Setup  gt Terminal and check the Local echo box             At the terminal  input   to display OK  to enter the command mode  Input AT and press enter to keep on displaying OK  which means the BT410 has successfully connected             Once terminal setup is complete  disconnect and reconnect the BT410 to the OpenCM9 04 to check the SLAVE MASTER mode it is in  The image below shows the MASTER mode             Searching for peripheral devices only works when the BT410 is in MASTER mode  As seen in the image below  input AT BTINQ and press enter to display devices nearby with the device class 0x1F00 SPP              For connecting the device  search for the device with the AT BTINQ command  then enter the Bluetooth address that is displayed  hexadecimal number  12 digits  to pair   For example  for the image above  enter the same address abc2ff123458 without the   i e  ATDabc2ff123458  then press enter to attempt a connection  Pairing won’t work if the PIN code between the devices don’t match  so please check the code first  default is 0000        AT CommandsThe followings are AT terminal commands for the BT410      System Reset  Enter ATZ press the Enter key and the BT410 resets if settings have changed the mode will change upon reset             Peripheral Device Search  Searching for peripheral devices only works when the BT410 is in MASTER mode  As seen in the image below  input AT BTINQ and press enter to display devices nearby with the device class 0x1F00 SPP              Connecting devices  pairing   For connecting the device  search for the device with the AT BTINQ command  then enter the Bluetooth address that is displayed  hexadecimal number  12 digits  to pair   For example  for the image above  enter the same address abc2ff123458 without the   i e  ATDabc2ff123458  then press enter to attempt a connection   Pairing won’t work if the PIN code between the devices doesn’t match  so please check the code first  default is 0000              Changing Bluetooth device name  AT BTNAME   NAME OF NEW DEVICE NAME            Reconfiguring pairing         Enable Disable Auto Pairing  REV2  Only applicable for MASTER module with a blue marker           Disable Enter the command AT BTAUTOPAIR 0                  After a few seconds  below message will be displayed                   Enable Enter the command AT BTAUTOPAIR 1                  After a few seconds  below message will be displayed             Change Baudrate  AT BTUART baudrate parity_bit stop_bit  Example AT BTUART 57600 n 1Note BT410’s mode is unchangeable and can only be used at its default set mode   Slave Slave or Master Master can not be paired Pinout            Pin No       Name      Description      I O                  1      RXD      Receive Data Data In       INPUT              2      TXD      Transfer Data Data Out       OUTPUT              3      VCC      3 3V DC      INPUT              4      GND      Ground  0v             ",
      "url": "http://0.0.0.0:4000/docs/en/parts/communication/bt-410/"
      } ,
  
  
      "docs-en-parts-communication-rc-100":  {
      "title": "RC-100A/100B",
      "content"	 : "RC100A 100BIntroductionNote RC100A is discontinued This is a devices to communicate with the robot via IR  ZIGbee  or Bluetooth If nothing is mounted the default communications is via IR Mount the ZIG100 to communicate via ZIGbee Mount the BT100  to communicate via Bluetooth  RC100 not supported Note The RC100 lights green and RC100A lights blue when mounted with a ZIGbee or Bluetooth module Specifications            Item      Description                  Weight      80g              Dimension      138mm x 105mm x 36mm              Operation Voltage      3 0V  DC               Power Consumption      0 07W              Battery      Alkaline LR6  AA Battery x 2              Button      11 Buttons  Including POWER MODE button               Communication Mode      IR Communication Basic Zigbee Communication  When ZIG100 is installed additionally Bluetooth Communication  When BT100 is installed additionally       How to Use  Turning the power on          POWER MODE in the middle is the power button   Red LED flickers 2 times if the button is pressed         Turning the power off          Pressing POWER MODE button for more than 1 sec  red LED filckers 3 times  4 times when ZIG100 is plugged   and then it is turned off         Automatic Powersave Mode          If RC100 is not used for more than 2 minutes   if no buttons are pressed  the power is automatically turned off         Transmitting buttonpressed status          If the button of RC100B is pressed  the packet related to the pressed button is transmitted to the receiving module which is synchronized by the connected transmitting module       Even at the moment of releasing all buttons  the packet which shows the buttons are not pressed is transmitted       Please refer to Remote Control Code Map on the packet       How to ConnectInstalled IR Module of RC100BWireless communication packet can be transmitted using IRReceiverinstalled CM100A  CM510 and CM530 RC100A and Zig100 ModuleWireless communication packet can be transmitted using ZIG100 moduleinstalled CM5  CM2  Wireless communication packet can be transmitted using ZIG110 moduleinstalled CM100A  CM510  CM530 and CM700 RC100A 100B and Bluetooth ModuleThe BT100A can be mounted onto CM100A  CM510  CM530  and CM700  and transmit data wirelessly Check Communication Mode  LED color comparison Using Builtin Infrared             RC100A 100B      RC100                  Red      Red              Blue      Green        Compatible Wireless Modules            Modules      RC100A 100B      RC100                  ZIG100 Set      O      O              ZIG110 Set      O      O              ZIG110A Set      O      O              BT110A Set      O      X              BT100A   BT210 Set      O      X      How to Set IR ChannelCan set communication channel in between 1   8 for controlling by IR wireless communication  To connect the wireless communication  the channel setting of receiver should be the same with that of sender  Following is the method for IR wireless communication channel setting   Please refer to RC100 Channel Programming for setting controller channel Install ZIG100 BT100      Open the cover of the rc100 and insert the zig100 module properly   You can insert both zig100 and bt100 into the RC100A              Insert the module as below so that  the redcircled parts can contact each other             Press firmly to insert ZIG100 BT100 module using fingers or long stick etc                 The following picture shows ZIG100 BT100 module is installed completely in RC100A           Note During an impact the zig100 bt100 may be dismounted from the rc100  In this case rc100 defaults to IR communications How to Set Broadcasting ChannelIt is possible to set  4 channels with buttons  if the ZIG100 on RC100Z was set at Broadcasting Mode  Multi Multi communication mode  Channels can be changed if you press the number buttons  1 4  together while MODE buttons are being pressed The red LED will blink as many as the channel no    when the channel is changed Caution  At initial status  it is of no use to change the channel because  it is automatically set at One One communication mode  instead of  Multi  Multi communication mode   The ZIG100 communication can be discontinued for seconds when changing the channels   When you take away batteries  the channel will be reset at initial status automatically and you need to reset it Code MapNote Button 5 and 6 are not available under IR control mode When you press the buttons on RC100  corresponding code value of each button will be sent out When more than 2 buttons are pressed  the sum of pressed code values will be sent EX1   Button U   Button 3   gt Code value of Button U  1    Code value of Button 3  64    Sending Value  65 EX2   Button 1   Button 5   gt Code value of Button 1  16    Code value of Button 5  256    Sending Value  272 ※ There are 128 combination keys usable in IR Mode ※ There are 512 combinations keys usable in Zigbee Mode Communication PacketThe RC100 uses the communication packet in the form below    represents Inverse  1’s Complement Ex   0xAA  gt 0x55   0xF0  gt 0x0FEx  DATA  0x1234  gt Packet  0xFF 0x55 0x34 0xCB 0x12 0xEDHow to Insert Batteries      Open the lid on the backside             Insert 1 battery   Please be careful with the terminal             Insert the other battery             Press firmly to insert the batteries       Note If there are problems with the RC100A’s Bluetooth or ZigBee and LED flashes try replacing the batteries with new ones Tutorials      RoboPlus TaskControl the robot via programs with RoboPlus Task        Zigbee SDKControl zigbee via Zigbee SDK  C language   ",
      "url": "http://0.0.0.0:4000/docs/en/parts/communication/rc-100/"
      } ,
  
  
      "docs-en-parts-communication-zig-110":  {
      "title": "ZIG-100/110A",
      "content"	 : "  ZIG100 110A   Introduction   introduction      assets images parts communication zig110_product jpg  Note  ZIG100 110A is discontinued   noticeZIG100 110A  using Zigbee communication  makes serial communication  UART  possible   ZIG100 and ZIG110A provide equal functions the only difference is the interface with the parts to be installed  The connectable parts are as follows   Please refer to the explanation pages on each part on how to install   ZIG100  CM5  ZIG2Serial  RC100 ZIG110A  CM100  CM510  CM530  CM700One set is composed of two units of ZIG100 110A for sale  and it can be used immediately without setting separate ID since the ID of other module has been already set from the beginning of purchase     Please be careful not to lose one of the set      Example  Controlling OLLO Bug using Zigbee Communication   ZIG110A set is used      Installing ZIG110A to OLLO Bug Controller CM100    Installing ZIG100 to Wireless Controller RC100  Controlling Bioloid Premium Kit in PC using Zigbee Communication   ZIG110A set is used      Connecting to the serial port of PC after installing ZIG100 to ZIG2Serial   Installing ZIG110A to Bioloid Premium Kit Controller CM510   CM530    Specifications   specifications  Item Description     Weight ZIG100  3 1g  ZIG110A  5 7g  Dimension ZIG100  19mm   27mm   9mm  6mm  the height excluding connector ZIG110A  18 1mm   30mm   9 1mm  Frequency 2 4GHz  Bandwidth MAX 250kbps  Operation Voltage 2 7V   3 6V  3 3V Recommended   Current Consumption 30mA  at 3 3V   Default baud rate ZIG100  57 600bps  ZIG110A  57 600bps    How to Use   howtouse    RoboPlusChaning wireless ID of others and setting to broadcasting mode can be done with the two methods as below The appropriate method can be chosen depending on the users  hardware composition      Connected to the Controller RoboPlus Manager can be executed after connecting ZIG100 or ZIG110A  If the appropriate port is selected and it is connected to the controller  the following widow can be seen  In the controller management window  if others  wireless ID is selected  the value can be set in the subsidiary control window on the right  If the Apply button is pressed after setting the desired value  the value is set          assets images parts communication zig110_01 png      Connected to ZIG2Serial RoboPlus Manager is executed after connecting ZIG100 to ZIG2Serial  ZIG2Serialconnected port is selected  and the ZIG2Serial setting icon is clicked  ZigBee setting button is clicked  and the direction indicated  in the window is proceeded  If the setting window is popped up to set the desired value  and then the value is set by clicking change button          assets images parts communication zig110_02 png     TerminalUse the terminal program for the Zig2Serial and Serial Communication to set the ZIG100 The directions here are based on the RoboPlus Terminal  Connect the ZIG100 on the Zig2Serial  then open the terminal program Open the port using the serial number of the PC which the Zig2Serial is connected       assets images parts communication zig110_03 png    While pressing on 1  Shift 1  on your keyboard also press the reset switch on the Zig2Serial  When   is input during the ZIG100’s booting  the setting mode is set to run  This screen will appear when you succeed    Baudrate  The baud rate set on the ZIG100   MyID  ZIG100’s exclusive unchangeable ID   Dest Addr  ID of the opposite party’s zigbee          assets images parts communication zig110_04 png    Set the ZIG100 using commands  Applicable commands as follows    I key  Check the ZIG100 current set value   D key  Designate the opposite party’s ZIG100 ID  Must input a hexadecimal  You can access Broadcat Communication Mode by inputting FFFF    B key  Change the ZIG100’s baud rate  Must input a hexadecimal              assets images parts communication zig110_05 png     W key  Designate Waiting Mode  This can only be done when not in Broadcast Mode    E key  End Setting Mode  End by pressing the reset switch on the Zig2Serial   Communication Mode   communicationmode Depending on the settings of ZIG100 and ZIG110A  11 communication  1N  or  NN communcation can be performed  11 Communication   From a pair of ZIG100 or the set value of ZIG110A module  If one and the other s wireless ID is pointing each other  it becomes 11 communication    If the power is impressed at the beginning  red LED flickers  and shortly it is recognized  the red LED is turned on continuously   1N Communication   ZIG100 module can be set to Waiting Mode    The module of Waiting Mode ignores others  ID    The Waiting module of other ZIG100 and ZIG110A module must be set to others  ID    Multiple ZIG100 and ZIG110A module can set Waiting module using others  ID    If the power is impressed at the beginning  red LED filickers  and then if the module of Waiting mode and the module indicating the Waiting mode module recognize each other  the red LED is turned on continuously    At this moment  once it is connected  the connection is continued unless the power is turned off    If multiple modules try to connect to the module of Waiting mode at the same time  it continues the comunication with the first connected module    How to set to Waiting mode is as below    Communicates with the initial connected module other modules  signal maintain the standby status          assets images parts communication zig110_06 png   NN Communication   ZIG100 or ZIG110A module can be set to Broadcasting mode    If it is se to Broadcasting mode  all modules set to Broadcasting mode transmits and receives their data    Generally it is used to transmit a command from a module to all other modules    ZIG110A  Broadcast channel is unchangeable  Default Value  4    ZIG100  The broadcast channel can be changed based on the zigbee s pin status   ZIG110A can be entered by setting the ID of the other party to hexadecimal FFFF    Pinout   pinout    ZIG100     assets images parts communication zig110_07 png  1  GND  Ground Level of Zigbee Module  0v 2  VCC  Supply Voltage of Zigbee Module   2 7 3 6V  3  LED  LED to inform the connection stautus of Zigbee Module4   RESET  Used to reset Zigbee Module  Also  used when it is entered Zigbee setting mode 5  RXD  Receive Signal Terminal of Zigbee Module6  TXD  Transmit Signal Terminal of Zigbee Module7  CHANNEL_SEL1  Used in Broadcasting Mode8  CHANNEL_SEL2  Used in Broadcasting Mode※ ZIG100 pin status according to the Broadcasting Channel information Channel Pin Status     1 CHANNEL_SEL1    LowCHANNEL_SEL2    Low  2 CHANNEL_SEL1    HighCHANNEL_SEL2    Low  3 CHANNEL_SEL1    LowCHANNEL_SEL2    High  4 CHANNEL_SEL1    HighCHANNEL_SEL2    High     ZIG110A     assets images parts communication zig110_08 jpg 1  RXD  Receive Signal Terminal of Zigbee Module2  TXD  Transmit Signal Terminal of Zigbee Module3  VCC  Supply Voltage of Zigbee Module   2 7 3 6V  4  GND  Ground Level of Zigbee Module  0v   Warning  Make connections to the controlled while unpowered  Making connections while the controller is powered may cause it to malfunction or and damage   noticewarning    Tutorials   tutorials  Zigbee SDK    Control zigbee via  Zigbee SDK   C language  Zigbee SDK   docs en software sdk zigbee_sdk ",
      "url": "http://0.0.0.0:4000/docs/en/parts/communication/zig-110/"
      } ,
  
  
      "docs-en-parts-communication-zig2serial":  {
      "title": "ZIG2Serial",
      "content"	 : "  ZIG2Serial   Introduction   introduction      assets images parts communication zig2serial_product png  Chaning the ID of ZIG100  the ID can be changed through  RoboPlus Manager   Serial communication with Bioloid through Zigbee communcation in PC   The program for PC must be created separately    Communication test can be done with RoboPlus Manager    Specifications   specifications  Item Description     Weight 11 12g  Dimension 56mm x 34mm x 12mm  Operating Voltage 4 5V   5 5V  Baud Rate 57 600bps    Layout   layout      assets images parts communication zig2serial_01 png  Item Description     Communication Status Display LED If there is an outgoing signal  through ZIG100 in RS232  TXD is turned on if there is an incoming signal through ZIG100  RXD is turned on   ZIG100 Connector It is to connect ZIG100 to ZIG2Serial   ZIG100 Status Display LED The status of ZIG100 is displayed  If it is turned off  ZIG100 is not connected or in set status  If it is turned on  It is connected to other ZIG100 and thecommunication is ready  If It  flickers  Other ZIG100 has not been found   Reset Switch It is used when ZIG100 is rebooted   Power Connector The power of 5V is needed to operate ZIG2Serial  The user can supply power using this connector  If it is connected to USB2Dynamixel  a separate power supply is not necessary   RS232 Connector It can be connected to RS232 port of PC     Pinout   pinout      assets images parts communication zig2serial_02 png    How to Use   howtouse     Connect to PC   connecttopc There is RS232 Connector for communication in PC it is called serial port  RS232 connector of ZIG2Serial can be connected here   If there is no serial port in PC  USB2Serial converter must be purchased      Supply Power   supplypower The power of 5V mus be supplied to operate ZIG2Serial   The power can be supplied using the power connector of ZIG2Serial   The cable for power connection must be made referring to the pin arrangement as below      assets images parts communication zig2serial_03 png   Zero ohm resistor   must be attached or connected by soldering on the location of resistor for external power to supply the external power  If  USB2Dynamixel  products of Robotis are used  those products can be used without supplying separate power since the power is supplied from USB2Dynamixel to ZIG2Serial   Warning  If the resistor for external power connection is connected  please use after removing the resistor   noticewarning     assets images parts communication zig2serial_04 png     Connect ZIG100   connectzig100 Please be careful with the direction of ZIG100 when it is connected      assets images parts communication zig2serial_05 png     Select Broadcast Channel   selectbroadcastchannel You can select the Broadcast channel on the ZIG100 by using the CHANNEL_SEL 1 2 pins   The connection status must be changed to select the channel on the Zig2Serial      assets images parts communication zig2serial_06 png  Open is eliminating the lead which is not connected  Short is using the lead to connecting it  The resistance on the R5 and R6 is 0Ω  Thus you can eliminate or short the lead  The default setting of the Zig2Serial is set at channel  1 and R5  R6  and R7 are short  Easily select channel  1 and  4 by opening and shorting the lead on R7  Note  When the ZIG100 is mounted on the CM5  the broadcast channel to set at  1  If the channel of the Zig2Serial is set differently  it will communicate with the CM5 in broadcast communication mode   notice Channel Connection Status of the Zig2Serial     1 R7    ShortR6    ShortR5    Short  2 R7    ShortR6    OpenR5    Short  3 R7    ShortR6    ShortR5    Open  4 R7    ShortR6    OpenR5    Open  4 R7    OpenR6    Don’t careR5    Don’t care    Tutorials   tutorials  RoboPlus Manager  The set value of Zig100 and Zig110 can be set through  RoboPlus Manager    Zigbee SDK  Zigbee can be controlled through  Zigbee SDK  in C language    Circuit   circuit      assets images parts communication zig2serial_07 gif    Videos   videos  RoboPlus Manager   docs en software rplus1 manager  USB2Dynamixel   docs en parts interface usb2dynamixel  Zigbee SDK   docs en software sdk zigbee_sdk ",
      "url": "http://0.0.0.0:4000/docs/en/parts/communication/zig2serial/"
      } ,
  
  
      "docs-en-parts-controller-cm-100":  {
      "title": "CM-100A",
      "content"	 : "CM100AIntroduction  This controller is used in OLLO and can connect other products such as the geared motor box  servo motor  touch sensor  LED module  IR Sensor  etc   Create a task code for control using RoboPlus Task and use it to control the movements   The CM100A controller does not support RoboPlus Motion Specifications            Item      Description                  Weight      22g              Size      42mm x 42mm x 18mm              Voltage Supply      Range  2 0V   3 5VRecommended  3 0V  AA or LR6 x 2               Consumed Electric Current      IDLE 0 04mA Play Mode 30mA Max 1000mA               Operation Temperature      5°C   70°C              Embedded Device      IR Sensor  Detects distance  x 3MIC  Detects sounds  x 1Buzzer x 1              External Device Connection Port      Communication Port  For wireless control and download  x 1Motor Connection Port  For geared motor box  x 2Multipurpose Port  For sensor and output   x 2      Layout  Start Button  When you press the start button on the CM100 and the LED inside turns on  the downloaded program is executed   IR Sensor  The programming can be performed by the sensor value from each direction because 3 units of IR sensor are installed   Upper Port   Located right next to the START button  Connects with the USB Downloader  LN101   IR Receiver  ZIG110  etc   Port 1   2  Each port number is represented in bars like I and II  The geared motor box can be connected to the 2 pin port   Port 3   4  Each port number is represented in bars like III and IIII  The IR Sensor  Touch Sensor  Servo Motor  and LED Module can be connected to the 5 pin port Connecting Power  CM100A can be connected to the power using 2 AAsize batteries   The range of voltage is 2 0V   3 5  and the recommended voltage is 3 0V   The simplified circuit composition of the power port is as follows connect     terminal of the battery to the     pins and    terminal to the    pins How to Operate  When you press the start button and the LED inside is turned on  the downloaded program is executed   Depending on the amount of time the continue button is pressed in the beginning  Number of pressed Start button will increase  Thus  if you use this parameter to program  you can arrange different movements pursuant to the number of times the start button is pressed   If you press the start button again when the controller is turned on  it will turn off Connect to PCLN101 is required to connect CM100A to PC  For more information  please refer to LN101 Wireless CommunicationYou can connect a ZIG110 wireless communication module on the CM100A ",
      "url": "http://0.0.0.0:4000/docs/en/parts/controller/cm-100/"
      } ,
  
  
      "docs-en-parts-controller-cm-150":  {
      "title": "CM-150",
      "content"	 : "CM150Introduction  Control DREAM robots  connect various components  reduction motors  servo motors  LED mobules  IR sensor  etc    Recover controller firmware with RoboPlus Manager v1 0 30 0 or higher   Write a task code and control robot’s components with RoboPlus Task  RoboPlus Motion does NOT support the CM150Specifications            Item      Description                  Weight      21g              CPU      STM32F103C8              Size      42mm x 42mm x 18mm              Voltage Supply      Range  3 2V   4 2VRecommended  3 7V  Liion Battery x1               Current Consumption      Standby 50mA Running 70mA Max 300mA               Operation Temperature      5°C   70°C              Internal I O components      IR sensor measure distance  x 3Mic Sound sensor  x 1Buzzer x 1              External I O components      4pin comunication  wireless control  amp download  x 1Micro USB port  connect to PC  x 1Motor potrs  for reduction motor  x 2Multiusage port sensor and outputs  x 2      Control TableControl Table consists of data regarding the current status and operation of controller  The user can control controller by changing data of Control Table via Instruction packet       EEPROM and RAMData in RAM area is reset to initial values whenever the power is turned on while data in EEPROM area is kept once values are set even if the power is turned off         AddressRepresents the location of data  To read from or write data to the control table the user should assign the correct address in the Instruction packet         AccessController has two kinds of data Readonly data  used mainly for sensing  and readandwrite data used for driving         Initial ValueIn case of data in the EEPROM Area  the initial values on the right side of the below Control Table are the factory default settings In case of data in the RAM Area  the initial values on the right side of the following control table are the ones when the power is turned on         SizeThe Size of data varies from 1   4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet   EEPROM Area            Address      Size      Name      Description      Access      Init Value                  0      2      Model Number      Model Number      R      400              6      1      Firmware Version      Firmware Version      R                    7      1      ID      Controller ID      RW      200              8      1      Baud Rate      Communication Baud Rate      R      1              9      1      Return Delay Time      Response Delay Time      RW      0              10      1      Status Return Level      Select Types of Status Return      RW      2      RAM Area            Address      Size      Name      Description      Access      Init Value                  21      1      Mode Number      Operation Mode      RW                    25      1      Press Counter      Counts Start Button Press      R                    26      1      Button Status      Start Button Status      R      0              30      2      My Zigbee ID      Local Zigbee ID      R                    32      2      Your Zigbee ID      Remote Zigbee ID      RW                    36      1      IR Communication Channel      IR Receiver Channel Number      RW      1              73      1      128ms Timer Value      128ms Timer Counter      RW      0              74      2      1ms Timer Value      1ms Timer Counter      RW      0              76      1      Power Save Timer Value      Power Save Timer Counter      RW      0              77      1      Random Number      Creating Random Number      RW                    79      1      Green LED      Green LED Status      RW      0              82      1      Motion LED      Motion LED Status      RW      0              84      1      Buzzer Index      Buzzer Melody Frequency      RW      0              85      1      Buzzer Time      Buzzer Play Time      RW      0              86      1      Sound Detected Count      Final Count for Detected Sound      R      0              87      1      Sound Detecting Count      Current Count for Detected Sound      R      0              91      2      Internal Right IR Sensor Value      Sensor Value of Right IR      R                    93      2      Internal Left IR Sensor Value      Sensor Value of Left IR      R                    95      2      Internal Center IR Sensor Value      Sensor Value of Center IR      R                    128      1      Port 3 Servo Mode      Servo Motor on Port 3      RW                    129      1      Port 4 Servo Mode      Servo Motor on Port 4      RW                    136      2      Port 3 Motor Speed      Speed of the Motor on Port 3      RW                    138      2      Port 4 Motor Speed      Speed of the Motor on Port 4      RW                    152      2      Port 1 Motor Speed      Speed of the Motor on Port 1      RW                    154      2      Port 2 Motor Speed      Speed of the Motor on Port 2      RW                    156      2      Port 3 Servo Position      Position of the Motor on Port 3      RW                    158      2      Port 4 Servo Position      Position of the Motor on Port 4      RW                    172      2      Port 3 IR Sensor Value      IR Sensor Value on Port 3      R                    174      2      Port 4 IR Sensor Value      IR Sensor Value on Port 4      R                    204      1      Port 3 Touch Sensor Value      Touch Sensor Value on Port 3      R                    205      1      Port 4 Touch Sensor Value c      Touch Sensor Value on Port 4      R                    212      1      Port 3 LED Module Value      Port 3 LED Module Control Value      RW      0              213      1      Port 4 LED Module Value      Port 4 LED Module Control Value      RW      0              220      2      Port 3 User Device Value      User Device Value on Port 3      RW      0              222      2      Port 4 User Device Value      User Device Value on Port 4      RW      0              236      1      Port 3 Temperature Sensor Value      Temperature Sensor Value on Port 3      R                    237      1      Port 4 Temperature Sensor Value      Temperature Sensor Value on Port 4      R                    244      1      Port 3 Ultrasonic Sensor Value      Ultrasonic Sensor Value on Port 3      R                    245      1      Port 4 Ultrasonic Sensor Value      Ultrasonic Sensor Value on Port 4      R                    252      1      Port 3 Magnetic Sensor Value      Magnetic Sensor Value on Port 3      R                    253      1      Port 4 Magnetic Sensor Value      Magnetic Sensor Value on Port 4      R                    260      1      Port 3 Motion Sensor Value      Motion Sensor Value on Port 3      R                    261      1      Port 4 Motion Sensor Value      Motion Sensor Value on Port 4      R                    268      1      Port 3 Color Sensor Value      Color Sensor Value on Port 3      R                    269      1      Port 4 Color Sensor Value      Color Sensor Value on Port 4      R                    276      1      Port 3 HydroThermo Sensor Humidity Value      Humidity Value on Port 3      R                    277      1      Port 4 HydroThermo Sensor Humidity Value      Humidity Value on Port 4      R                    284      1      Port 3 HydroThermo Sensor Temperature Value      Temperature Value on Port 3      R                    285      1      Port 4 HydroThermo Sensor Temperature Value      Temperature Value on Port 4      R                    292      2      Port 3 Brightness Sensor Value      Brightness Sensor Value on Port 3      R                    294      2      Port 4 Brightness Sensor Value      Brightness Sensor Value on Port 4      R            Note Some Addresses of the Control Table can be tested with R  Manager 2 0 Layout  Start button After a short press the LED will turn on and the loaded program runs  IR sensors  measure and program each of the integrated 3 IR sensors  Top 4pin port  located next to the Start button connect an IR receiver   Micro USB port located next to the 4pin port connect a micro USB cable to the PC   Port 1   2  shown as I and II connect reduction motors  Port  3   4  shown as III and IIII connect IR sensors  touch sensors  servo motors and LED modules Connecting Power  Power for the CM150 is supplied by a single LBS050 Liion battery  Operating voltage range 3 04 7V  3 7V recommended   Power polarity pins are shown in the diagram belowHow to Operate  Press the Start button the LED turns on and the controller runs one downloaded program  Press the Start button to turn on then press the Start N times  The controller is can run a specific parts of a program given said N number of presses   Hold the Start button for more than 1 second and it will emit 2 beep sounds  LED turns on  and the controller is under management mode  downloading not possible in this mode    Hold the Start button for more than 5 seconds and it will emit 3 beep sounds  The controller is in firmware recovery mode  To turn off the controller press the Start button  The controller automatic turnoff time is 5 seconds by defaultReference Automatic TurnoffConnect to PC  To connect the CM150 to the PC a micro USB cable is required   For more information for PC connection check the USB driver installation page Wireless CommunicationThe CM150 is compatible with BT210   BT110   ZIG110 wireless communications modules ",
      "url": "http://0.0.0.0:4000/docs/en/parts/controller/cm-150/"
      } ,
  
  
      "docs-en-parts-controller-cm-200":  {
      "title": "CM-200",
      "content"	 : "CM200Introduction  Can connect and control SMART device  reduction motors  servo motors  touch sensors  IR sensor  LED mobules  etc   Recover controller firmware with RoboPlus Manager v1 0 30 0 or higher   Write a task code and control device with RoboPlus Task  The CM200 supports RoboPlus MotionSpecifications            Item      Description                  Weight      25g              CPU      STM32F103C8              Size      54mm x 42mm x 18mm              Voltage Supply      Range  4 8V   8 4VRecommended  6 0   7 4V  Battery x 2 or Liion Battery x1               Current Consumption      Standby 80mA Running 150mA Max 300mA               Operation Temperature      5°C   70°C              Internal I O components      IR sensor measure distance  x 3Mic Sound sensor  x 1Buzzer x 1              External I O components      4pin comunication  wireless control  amp download  x 1Motor potrs  for reduction motor  x 2Multiusage port sensor and outputs  x 8      Control TableControl Table consists of data regarding the current status and operation of controller  The user can control controller by changing data of Control Table via Instruction packet       EEPROM and RAMData in RAM area is reset to initial values whenever the power is turned on while data in EEPROM area is kept once values are set even if the power is turned off         AddressRepresents the location of data  To read from or write data to the control table the user should assign the correct address in the Instruction packet         AccessController has two kinds of data Readonly data  used mainly for sensing  and readandwrite data used for driving         Initial ValueIn case of data in the EEPROM Area  the initial values on the right side of the below Control Table are the factory default settings In case of data in the RAM Area  the initial values on the right side of the following control table are the ones when the power is turned on         SizeThe Size of data varies from 1   4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet   EEPROM Area            Address      Size      Name      Description      Access      Init Value                  0      2      Model Number      Model Number      R      400              6      1      Firmware Version      Firmware Version      R                    7      1      ID      Controller ID      RW      200              8      1      Baud Rate      Communication Baud Rate      R      1              9      1      Return Delay Time      Response Delay Time      RW      0              10      1      Status Return Level      Select Types of Status Return      RW      2      RAM Area            Address      Size      Name      Description      Access      Init Value                  21      1      Mode Number      Operation Mode      RW                    25      1      Press Counter      Counts Start Button Press      R                    26      1      Button Status      Start Button Status      R      0              30      2      My Zigbee ID      Local Zigbee ID      R                    32      2      Your Zigbee ID      Remote Zigbee ID      RW                    36      1      IR Communication Channel      IR Receiver Channel Number      RW      1              66      2      Motion Play Page      Motion Play Page Number      RW      0              68      1      Motion Play Status      Motion Play Status      R                    73      1      128ms Timer Value      128ms Timer Counter      RW      0              74      2      1ms Timer Value      1ms Timer Counter      RW      0              76      1      Power Save Timer Value      Power Save Timer Counter      RW      0              77      1      Random Number      Creating Random Number      RW                    79      1      AUX LED Red       AUX LED Red  Status      RW      0              84      1      Buzzer Index      Buzzer Melody Frequency      RW      0              85      1      Buzzer Time      Buzzer Play Time      RW      0              86      1      Sound Detected Count      Final Count for Detected Sound      R      0              87      1      Sound Detecting Count      Current Count for Detected Sound      R      0              88      2      Low Battrey Sound Enable      Enable Low Battery Warning      RW      0              91      2      Internal Right IR Sensor Value      Sensor Value of Right IR      R                    93      2      Internal Left IR Sensor Value      Sensor Value of Left IR      R                    95      2      Internal Center IR Sensor Value      Sensor Value of Center IR      R                    97      1      Input Power Voltage  unit  0 1V       Measures Input Voltage      R                    128      1      Port 3 Servo Mode      Servo Motor on Port 3      RW                    129      1      Port 4 Servo Mode      Servo Motor on Port 4      RW                    136      2      Port 3 Motor Speed      Speed of the Motor on Port 3      RW                    138      2      Port 4 Motor Speed      Speed of the Motor on Port 4      RW                    152      2      Port 1 Motor Speed      Speed of the Motor on Port 1      RW                    154      2      Port 2 Motor Speed      Speed of the Motor on Port 2      RW                    156      2      Port 3 Servo Position      Position of the Motor on Port 3      RW                    158      2      Port 4 Servo Position      Position of the Motor on Port 4      RW                    172      2      Port 3 IR Sensor Value      IR Sensor Value on Port 3      R                    174      2      Port 4 IR Sensor Value      IR Sensor Value on Port 4      R                    204      1      Port 3 Touch Sensor Value      Touch Sensor Value on Port 3      R                    205      1      Port 4 Touch Sensor Value c      Touch Sensor Value on Port 4      R                    212      1      Port 3 LED Module Value      Port 3 LED Module Control Value      RW      0              213      1      Port 4 LED Module Value      Port 4 LED Module Control Value      RW      0              220      2      Port 3 User Device Value      User Device Value on Port 3      RW      0              222      2      Port 4 User Device Value      User Device Value on Port 4      RW      0              236      1      Port 3 Temperature Sensor Value      Temperature Sensor Value on Port 3      R                    237      1      Port 4 Temperature Sensor Value      Temperature Sensor Value on Port 4      R                    244      1      Port 3 Ultrasonic Sensor Value      Ultrasonic Sensor Value on Port 3      R                    245      1      Port 4 Ultrasonic Sensor Value      Ultrasonic Sensor Value on Port 4      R                    252      1      Port 3 Magnetic Sensor Value      Magnetic Sensor Value on Port 3      R                    253      1      Port 4 Magnetic Sensor Value      Magnetic Sensor Value on Port 4      R                    260      1      Port 3 Motion Sensor Value      Motion Sensor Value on Port 3      R                    261      1      Port 4 Motion Sensor Value      Motion Sensor Value on Port 4      R                    268      1      Port 3 Color Sensor Value      Color Sensor Value on Port 3      R                    269      1      Port 4 Color Sensor Value      Color Sensor Value on Port 4      R                    276      1      Port 3 HydroThermo Sensor Humidity Value      Humidity Value on Port 3      R                    277      1      Port 4 HydroThermo Sensor Humidity Value      Humidity Value on Port 4      R                    284      1      Port 3 HydroThermo Sensor Temperature Value      Temperature Value on Port 3      R                    285      1      Port 4 HydroThermo Sensor Temperature Value      Temperature Value on Port 4      R                    292      2      Port 3 Brightness Sensor Value      Brightness Sensor Value on Port 3      R                    294      2      Port 4 Brightness Sensor Value      Brightness Sensor Value on Port 4      R            Note Some Addresses of the Control Table can be tested with R  Manager 2 0 Layout  Start button After a short press the LED will turn on and the loaded program runs  IR sensors  measure and program each of the integrated 3 IR sensors  Top 4pin port  located next to the Start button connect an IR receiver  USB downloader  LN101   ZIG110A or BT210A  Port 1   2  shown as I and II connect reduction motors  Port  3   4  shown as III and IIII connect IR sensors  touch sensors  servo motors and LED modules   POWER LED  red  LED turns on when powered on  TX LED  green  Data transmission LED from controller to external device  via 4pin port   RX LED  blue  Data reception LED from external to controller  via 4pin port   AUX LED  red  usercontrolled on off functionConnecting Power  Power for the CM200 is supplied by 2 ABB030 battery or a single LBS050 Liion battery LBS040  Operating voltage range 4 88 4V  6 07 4V recommended   Power polarity pins are shown in the diagram belowHow to Operate  Press the Start button the LED turns on and the controller runs one downloaded program  Press the Start button to turn on then press the Start N times  The controller is can run a specific parts of a program given said N number of presses   Hold the Start button for more than 1 second and it will emit 2 beep sounds  LED turns on  and the controller is under management mode  downloading not possible in this mode    Hold the Start button for more than 5 seconds and it will emit 3 beep sounds  The controller is in firmware recovery mode  The controller automatic turnoff time is 5 seconds by defaultConnect to SmartphoneUse either BT210A or BT110A module to communicate between smartphone and CM200Connect to PCTo connect the CM200 to the PC LN101 is requiredWireless CommunicationThe CM200 is compatible with BT210   BT110   ZIG110 wireless communications modules ",
      "url": "http://0.0.0.0:4000/docs/en/parts/controller/cm-200/"
      } ,
  
  
      "docs-en-parts-controller-cm-5":  {
      "title": "CM-5",
      "content"	 : "CM5IntroductionNote CM5 is discontinued Specifications            Item      Description                  Weight      125 95g              CPU      ATMega128              Voltage Supply      Range  7V   12VRecommended  11 1V  3S1P LiPo               Current Consumption      Standby  50mAMax  5A Fuse               Operation Temperature      5°C   70°C              External I O Device      AX MX Series Dynamixel Connector x 2      Layout  Power Switch  The switch to connect the power   Power Jack  The socket to connect the power jack of SMPS   Start Button  The button to select the mode   Mode Button  The button to change the operation mode of CM5   PC Link Serial Cable   The port to connect the serial port of CM5 and PC using serial cable It is used for task code download or communication with PC   U   L   D   R Button  The assigned buttons used for entering purpose during the program operation commands to robots are transmitted by these buttons   Mode Display LED  LED to display current operation mode of CM5 Detailed descriptions are provided as below   Status Display LED  The LED represents the current status of CM5   Detailed descriptions are provided as below   POWER  Turned on if the power is ON flickers if it is being charged   TXD  Turned on while CM5 is transmitting the data to the outside   RXD  Turned on while CM5 is receiving the data from the outside   AUX  Assigned LED to be used by the user in the program   It can be turned on or off using task code  MANAGE   It displays Dynamixel Management Mode is in progress   It is used to set or test the operations of CM5  AX MX Dynamixel using RoboPlus Manager   It is automatically executed when RoboPlus Manager and CM5 are connected  PROGRAM   It displays the motion edit mode is in progress   It is used when the motions are editted with RoboPlus Motion   It is automatically executed when RoboPlus Motion and CM5 are connected  PLAY   It displays the task code mode is in progress   It is used after downloading the written code to CM5 with RoboPlus Task   The Start button must be pressed directly by the user to execute when PLAY LED flickers Connecting PowerA rechargeable battery is installed in CM5  If the rechargeable battery is charged  the device is ON when the power switch is set to ON  If you try to connect to external power without using the charger  the power is connected when SMPS is plugged and the power switch is set to ON   If the power is connected  the Power LED is turned on  and one of the mode LEDs flickers How to Operate  Turning the Power on  The power is turned on by moving the switch from OFF to ON ※ If the power is not turned on in spite of moving the switch to ON  the internal batteries may have been discharged Please refer to Charging to recharge  or connect the power using SMPS   Start  Move to PLAY using Mode Button to operate robots   Press START Button to execute when the LED on PLAY flickers ※ If START button is pressed  the LED on PLAY is not supposed to be flickering any more that is the normal status of the execution   End  If you want to stop the executed operations  press MODE Button to get back to waiting mode status  or turn OFF the power using Power Switch For CM5  the firmware must be updated to use Roboplus instead of the Behavior Control Programmer the old version  Please refer to Firmware Update on how to updated firmware in RoboPlus Manager   It is used to control Dynamixel and the peripherals  and it can connect Dynamixel AX MX Dynamixel… etc         Specific motions can be edited and saved through RoboPlus Motion  The saved motion  mtn file  can be always executed by RoboPlus Task  and also the motions of each part can be controlled by writing the task codes for control         RoboPlus Motion        RoboPlus Task    RoboPlus ManagerConnect to PCPC Link Serial Cable  of CM5 and Serial Port of PC must be connected using serial cable to communicaiton with PC  If you want to use Bioloid on the laptop without a serial port  you can communicate with PC using USB2Dynamixel    The USB2Dynamixel is sold separately  Wireless CommunicationZIG100 Wireless Communication Module can be connected to CM5 ChargingTo move a robot when it is not connected with SMPS  you have to use a battery  If the battery is discharged  please use by charging it according to following procedures       Connect SMSPS to CM5             Turn on the CM5 Power and press the U button      Note While the CM5 is being charged  the power LED blinks  The speed of blinking shows how much it is left before finishing the charging  It will be more faster as it completes the charging  Once the charging is done  it will blink for every 2 seconds Fuse ReplacementThe fuse prevents the over power that flows in the CM5 which can damage the circuit If the CM5 does not turn on with the battery but turns on when connected to the SMPS  replace your fuse If the fuse is disconnected  followings will happen   Can turn on the power of CM5 with SMPS only   The LED doesn’t blink even when you press the U button for charging The fuse used for CM5 is available at electric shops  Fuse Volume  220V 5A  ",
      "url": "http://0.0.0.0:4000/docs/en/parts/controller/cm-5/"
      } ,
  
  
      "docs-en-parts-controller-cm-510":  {
      "title": "CM-510",
      "content"	 : "CM510IntroductionNote CM510 is discontinued Specifications            Item      Description                  Weight      51 3g              CPU      ATMega2561              Voltage Supply      Range  6 5V   15VRecommended  11 1V  3S1P LiPo               Current Consumption      Standby  50mAExternal I O Max Current  0 9ATotal Max Current  10A Fuse               Operation Temperature      5°C   70°C              Internal I O Device      Button x 5 Reset 1  Port 5 MIC for sound detection x 1Voltage Sensor x 1              External I O Device      OLLO Compatible 5pin I O Port x 6AX MX Series Dynamixel Connector x 5      Layout  PC Link  Serial Cable   Used to connect the serial cable to the CM510 and PC via serial port  Used for communication with other PC or downloading task code   Communication Device Connection Jack  Used for wireless communicate with ZIG110  IR receiver modules or other boards  Battery Jack  Used to  connect with the battery   Power Jack  Used to connect the SMPS power supply  Power LED  ON and OFF LED status for the power  Power Switch  Used to turn the robot ON   OFF   MODE Button  Used to change the operation mode of CM510   Please read below for more information   START Button  Used to START selected mode  Please read below for more information   U   L   D   R Button  Used for input purposes when a program is playing  These buttons can be used to send commands to the robot   AX MX Serise Bus Port  Used to connect the AX MX Dynamixel in a daisy chain method   Peripheral Devices Connection Port  Used to connect Distance Measurement Sensor  Touch Sensor  IR Sensor  and peripheral devices  The port numbers for each port are represented in bars such as I   II   III  IIII   IIIII   and IIIIII   Mode Display LED  LED to display current operation mode of CM510 Detailed descriptions are provided as below  MANAGE   It displays Dynamixel Management Mode is in progress   It is used to set or test the operations of CM510  AX MX Dynamixel using RoboPlus Manager   It is automatically executed when RoboPlus Manager and CM510 are connected  PROGRAM   It displays the motion edit mode is in progress   It is used when the motions are editted with RoboPlus Motion   It is automatically executed when RoboPlus Motion and CM510 are connected  PLAY   It displays the task code mode is in progress   It is used after downloading the written code to CM510 with RoboPlus Task       The Start button must be pressed directly by the user to execute when PLAY LED flickers     Status Display LED  The LED represents the current status of CM510  Detailed discriptions are provided as below           TxD  Turned on while CM510 is transmitting the data to the outside       RxD  Turned on while CM510 is receiving the data from the outside       AUX  Assigned LED to be used by the user in the program   It can be turned on or off using task code       PinoutPowerThe pin composition of CM510 Power is as below External 5Pin PortThe pin composition of CM510 external port is as below   OUT  5V Torque Possible  Maximum Allowed Current 0 9A   VDD  5V   ADC  The analog signals from the sensor made by the user can be read   GND  NC  Not usedCommunication Device Connection PortThe functions on the pins of communication device connection port are as below   GND  Ground Level  0v   VDD   Supply Voltage   2 7 3 6V    RXD  Receive Signal Terminal  TXD   Transmit Signal Terminal3Pin Connector PortThe functions of pins on the 3pin connector port are as follows  Please refer to AXSeries Pin Assignment for more information Please be careful not to change the direction considering the angular part   GND  Ground Level  0v   VDD   Supply Voltage  It is equal to the voltage of battery   DATA   Data Transmission PinConnecting PowerThe power is applied  if the battery is connected to battery socket of CM510 or if the power switch is set to ON after connecting SMPS to power jack socket  If the power is impressed  Power LED is turned on and one of the Mode Display LEDs flickers How to Operate  Turning the power on  The power is turned on by moving the switch from OFF to ON ※ If the power is not turned on in spite of moving the switch to ON  the batteries may have been discharged Pleaser refer to Charging to recharge  or connect the power using SMPS   Start  Move to PLAY using Mode Button to operate robots   Press START Button to execute when the LED on PLAY flickers ※ If START button is pressed  the LED on PLAY is not supposed to be flickering any more that is the normal status of the execution       End   If you want to stop the executed operations  press MODE Button to get back to waiting mode stauts  or turn OFF the power using Power Switch     It is used to control Dynamixel and the peripherals  and it can connect Dynamixel AX MX Dynamixel… etc   and various parts of OLLO Touch Sensor  LED Module  IR Sensor etc         Specific motions can be edited and saved through RoboPlus Motion   The saved motion  mtn file  can be always executed by RoboPlus Task  and also the motions of each part can be controlled by writing the task codes for control     RoboPlus Motion  RoboPlus Task  RoboPlus Manager  Embedded CThe controller of CM510 can be controlled in C language   Please refer to Embedded C for more information Connect to PCPC Link Serial Cable  of CM510 and Serial Port of PC must be connected using download cable to communication with PC   If you want to communicate with PC on the laptop without serial port  you can communicate with PC using USB2Dynamixel Wireless CommunicationZIG110 Wireless Communication Module can be connected to CM510 ChargingYou may obtain Lithium polymer batteries from www robotisshopen com If the robot alarm sounds off during operations then recharge the battery During charging the charger’s red LED turns on  When complete the green LED turns on   Take the battery out  Connect the charger  ChargeCharging Red LED   Complete Green LED       You can connect the robot to an external power source through SMPS             The battery is equipped with a connector to charge the battery and another to move the robot      Charging Time and Battery Life OperatingCharging Time  When fully discharged  1 1 5 hour  Leaving the battery fully discharged for too long may reduce its lifespan drastically   Time to charge the battery depends on the status of the battery If the charging time or battery life becomes too short  you may need to replace your battery    Caution  Do NOT  keep the battery connected with a robot or a charger   If you will not use the battery for a long time from now on  please keep it HALFCHARGED   Do NOT  put the battery with an environment with high temperature or humidity Fuse ReplacementThe fuse in the CM510 CM530 prevents it from overloading which can damage the circuit If the CM510 CM530 does not turn on with the battery but turns on when connected to the SMPS  replace your fuse ※ The size of the fuse is shown below  Use a 125V 5A 10A fuse ※ How to replace the fuse      Find the fuse on the back of the CM510 CM530             Use a pincette to replace the fuse with a new one       Videos",
      "url": "http://0.0.0.0:4000/docs/en/parts/controller/cm-510/"
      } ,
  
  
      "docs-en-parts-controller-cm-530":  {
      "title": "CM-530",
      "content"	 : "CM530IntroductionSpecifications            Item      Description                  Weight      54g              CPU      STM32F103RE              Voltage Supply      Range  6V   15VRecommended  11 1V  3S1P LiPo               Current Consumption      Standby  50mAExternal I O Max Current  300mATotal Max Current  10A Fuse               Operation Temperature      5°C   70°C              Internal I O Device      Button x 5 Reset 1  Port 5 MIC for sound detection x 1Voltage Sensor x 1              External I O Device      OLLO Compatible 5pin I O Port x 6AX MX Series Dynamixel Connector x 5      Layout  PC Link  Serial Cable   Used to connect the serial cable to the CM530 and PC via USB  Used for communication with other PC or downloading task code   Communication Device Connection Jack  Used for wireless communicate with ZIG110A  BT110A  IR receiver modules or other boards  Battery Jack  Used to connect with the battery   Power Jack  Used to connect the SMPS power supply  Power LED  ON and OFF LED status for the power  Power Switch  Used to turn the robot ON   OFF   MODE Button  Used to change the operation mode of CM530  Please read below for more information   START Button  Used to START selected mode  Please read below for more information   U   L   D   R Button  Used for input purposes when a program is playing  These buttons can be used to send commands to the robot   AX MX Serise Bus Port  Used to connect the AX MX Dynamixel in a daisy chain method   Peripheral Devices Connection Port  Used to connect Distance Measurement Sensor  Touch Sensor  IR Sensor  and peripheral devices  The port numbers for each port are represented in bars such as I   II   III  IIII   IIIII   and IIIIII   Mode Display LED  LED to display current operation mode of CM530 Detailed descriptions are provided as below  MANAGE   It displays Dynamixel Management Mode is in progress   It is used to set or test the operations of CM530 and AX12A using RoboPlus Manager   It is automatically executed when RoboPlus Manager and CM530 are connected  PROGRAM   It displays the motion edit mode is in progress   It is used when the motions are editted with RoboPlus Motion   It is automatically executed when RoboPlus Motion and CM530 are connected  PLAY   It displays the task code mode is in progress   It is used after downloading the written code to CM530 with RoboPlus Task       The Start button must be pressed directly by the user to execute when PLAY LED flickers     Status Display LED  The LED represents the current status of CM530  Detailed discriptions are provided as below           TxD  Turned on while CM530 is transmitting the data to the outside       RxD  Turned on while CM530 is receiving the data from the outside       AUX  Assigned LED to be used by the user in the program   It can be turned on or off using task code       PinoutPowerThe pin composition of CM530 Power is as below External 5Pin PortThe pin composition of CM530 external port is as below   OUT  3 3V Torque Possible  Maximum Allowed Current 0 3A   VDD  5V   ADC  The analog signals from the sensor made by the user can be read   GND  OUT2  3 3V Torque Possible  Maximum Allowed Current 0 3A Communication Device Connection PortThe functions on the pins of communication device connection port are as below   GND  Ground Level  0v   VDD   Supply Voltage   2 7 3 6V    RXD  Receive Signal Terminal  TXD   Transmit Signal Terminal3Pin Connector PortThe functions of pins on the 3pin connector port are as follows  Please refer to AXSeries Pin Assignment for more information Please be careful not to change the direction considering the angular part   GND  Ground Level  0v   VDD   Supply Voltage  It is equal to the voltage of battery   DATA   Data Transmission PinConnecting PowerThe power is applied  if the battery is connected to battery socket of CM530 or if the power switch is set to ON after connecting SMPS to power jack socket  If the power is impressed  Power LED is turned on and one of the Mode Display LEDs flickers How to Operate  Turning the power on  The power is turned on by moving the switch from OFF to ON ※ If the power is not turned on in spite of moving the switch to ON  the batteries may have been discharged Pleaser refer to Charging to recharge  or connect the power using SMPS   Start  Move to PLAY using Mode Button to operate robots   Press START Button to execute when the LED on PLAY flickers ※ If START button is pressed  the LED on PLAY is not supposed to be flickering any more that is the normal status of the execution   End   If you want to stop the executed operations  press MODE Button to get back to waiting mode stauts  or turn OFF the power using Power Switch   It is used to control Dynamixel and the peripherals  and it can connect Dynamixel AX MX Dynamixel… etc   and various parts of OLLO Touch Sensor  LED Module  IR Sensor etc         Specific motions can be edited and saved through RoboPlus Motion   The saved motion  mtn file  can be always executed by RoboPlus Task  and also the motions of each part can be controlled by writing the task codes for control     RoboPlus Motion  RoboPlus Task  RoboPlus Manager  Embedded CThe controller of CM530 can be controlled in C language   Please refer to Embedded C for more information Connect to PCPC Link Serial Cable  of CM530 and Serial Port of PC must be connected using download cable to communication with PC   If you want to communicate with PC on the laptop without serial port  you can communicate with PC using USB2Dynamixel Wireless CommunicationZIG110 BT110 Wireless Communication Module can be connected to CM530 ChargingYou may obtain Lithium polymer batteries from www robotisshopen com If the robot alarm sounds off during operations then recharge the battery During charging the charger’s red LED turns on  When complete the green LED turns on   Take the battery out  Connect the charger  ChargeCharging Red LED   Complete Green LED       You can connect the robot to an external power source through SMPS             The battery is equipped with a connector to charge the battery and another to move the robot      Charging Time and Battery Life OperatingCharging Time  When fully discharged  1 1 5 hour  Leaving the battery fully discharged for too long may reduce its lifespan drastically   Time to charge the battery depends on the status of the battery If the charging time or battery life becomes too short  you may need to replace your battery    Caution  Do NOT  keep the battery connected with a robot or a charger   If you will not use the battery for a long time from now on  please keep it HALFCHARGED   Do NOT  put the battery with an environment with high temperature or humidity Fuse ReplacementThe fuse in the CM510 CM530 prevents it from overloading which can damage the circuit If the CM510 CM530 does not turn on with the battery but turns on when connected to the SMPS  replace your fuse ※ The size of the fuse is shown below  Use a 125V 5A 10A fuse ※ How to replace the fuse      Find the fuse on the back of the CM510 CM530             Use a pincette to replace the fuse with a new one       Videos",
      "url": "http://0.0.0.0:4000/docs/en/parts/controller/cm-530/"
      } ,
  
  
      "docs-en-parts-controller-cm-700":  {
      "title": "CM-700",
      "content"	 : "CM700Introduction  CM700 is a control module type controller with a CPU  TTL   RS485 communication circuit and ZIG110 connector  You cannot control dynamixels or other peripheral devices alone with the CM700  You will need a SUB board   CM700 SUB Board is composed of a power department  connector department  switch  and an additional circuit for 5 pin peripheral devices   You may refer to the connector pin layout to make your own SUB board Specifications            Item      Description                  Weight      37 3g              CPU      ATMega2561              Voltage Supply      Range  7V   35V              Current Consumption      Standby  40mAExternal I O Max Current  0 9ATotal Max Current  10A Fuse               Operation Temperature      5°C   70°C              Internal I O Device      Button x 2 Reset 1  Start 1 Voltage Sensor x 1              External I O Device      OLLO Compatible 5pin I O Port x 6Dynamixel TTL 3Pin Connector x 4Dynamixel RS485 4Pin Connector x 5      Layout  PC Link  Serial Cable   amp Communication Device Connection Port  LN101 is used to connect the CM700 and PC  It is used to download task code or communicate with PC  Also  it can be used for wireless communication module such as ZIG110 etc   or communication with other external board   Battery Socket  Socket for connecting the battery   Power LED  ON and OFF LED for the power   Power Switch  Used to turn the robot ON   OFF   MODE Button  Used to change the operation mode of CM700   Please read below for more information   START Button  Used to START selected mode  Please read below for more information   3Pin Cable Connector  Used to connect Dynamixels using 3 pin cable TTL Communication  in a daisy chain method   4Pin Cable Connector  Used to connect Dynamixels using 4 pin cable  RS485 Communication   in a daisy chain method   Peripheral Devices Connection Port  Used to connect peripheral devices such as DMS  Touch Sensor  and IR Sensor etc   Mode Display LED  LED to display current operation mode of CM700  Detailed descriptions are provided as below   MON          It displays Dynamixel Management Mode is in progress       It is used to set or test the operations of CM700 and Dynamixel using RoboPlus Manager       It is automatically executed when RoboPlus Manager and CM700 are connected         EDIT          It displays the motion edit mode is in progress       It is used when the motions are editted with RoboPlus Motion       It is automatically executed when RoboPlus Motion and CM700 are connected         PLAY          It displays the task edit mode is in progress       It is used after downloading the written code to CM700 with RoboPlus Task       The Start button must be pressed directly by the user to execute When PLAY LED flickers         Status Display LED  The LED represents the current status of CM700  Detailed discriptions are provided as below            TxD   Turned on while CM700 is transmitting the data to the outside        RxD   Turned on while CM700 is receiving the data from the outside        AUX   Assigned LED to be used by the user in the program   It can be turned on or off using task code D to be used by the user in the program   It can be turned on or off using task code       PinoutPowerThe pin composition of CM700 power is as below External 5Pin PortUsers can create a sensor to control and connect to the 5 pin peripheral device connection port  However  composing the wrong circuits may damage your controller’s circuit  so please learn more about circuit before doing so Below is the 5 pin layout information for a peripheral device   OUT  5V Output Possible  Maximum Allowed Current 0 9A   VCC  5V   ADC  The analog signals from the sensor made by the user can be read   GND  NC  Not UsedCommunication Device Connection PortThe functions of pins on the communication device connection port are as follows   TXD   Transmit Signal Terminal  RXD  Receive Signal Terminal  VCC  Supply Voltage  2 7   3 6V   GND  Ground Level  0v 3Pin Connector PortThe functions of pins on the 3pin connector port are as follows  Please refer to Pin Assignment for more information Please be careful not to change the direction considering the angular part   GND  Ground Level  0v   VDD  Supply Voltage  It is equal to the voltage of battery   DATA  Data Transmission Pin4Pin Connector PortThe functions of pins on the 4pin connector port are as follows  Pleaser refer to Pin Assignment for more information  It is compatible with 4pin of DX and EX Series  Please be careful not to change the direction considering the angular part   GND  Ground Level  0v   VDD  Supply Voltage  It is equal to the voltage of battery   DATA   Data Transmission Pin  DATA  Data Transmission PinSubBoard Connector InformationThe pin layout of the connector which connects CM700 and SUB board is as below Connecting PowerThe CM700 which consists of a microcontroller  is divided into a power department  various connectors  and SUB board  Depending on the connection of each board  the working voltage range may change so please refer to the below information to make your own battery   CM700   User’s Custom SUB BoardBecause the CM700 does not have a regulator  the power supply from the user’s custom SUB board to the CM700 must be 5V           CM700 Working Voltage  4 5   5 5 V        CM700   CM700 SUB BoardWhen connecting and using the CM700 and ROBOTIS’s SUB board only  below is the allowed power range for the SUB board           CM700   SUB Working Voltage  7   35 V        CM700   CM700 SUB Board   DynamixelsOur SUB board has a comprehensive working voltage range to use all released dynamixel lineups  Thus  the working voltage for the SUB board is restricted depending on the dynamixel you are using           When using 2 or more different types of dynamixels together  the voltage range must be where all of the dynamixels can work  Thus  the minimum voltage should be the dynamixel’s highest voltage spec and the maximum voltage should be the lowest voltage to suit the working range       For example  when using the AX12  and RX64 together  AX12  is 7   12 V  and RX64 is   18 V  Thus the working voltage would be 12V  meaning LiPo conversion would be 3 cells and NiMH would be converted in 10 cells                   Dynamixel In Use      Min  Voltage      Max  Voltage      LiPo Conversion      NiMH Conversion                  AX12A      9      12      3 cells      8   10 cells              DX117      12      18 5      3   5 cells      10   15 cells              RX10      9      12      3 cells      8   10 cells              RX28      12      18 5      3   5 cells      10   15 cells              RX64      12      18 5      3   5 cells      10   15 cells              EX106       12      18 5      3   5 cells      10   15 cells              MX Series      10      14 8      3   4 cells      9   12 cells      Connect the battery into the CM700’s battery socket  and then set the power switch to supply power  Once the power is supplied  the POWER LED will turn on  and one of the MODE LED will start blinking How to Operate  Turning the power on  The power is turned on by moving the switch from OFF to ON   Start  Move to PLAY using Mode Button to operate robots  Press START Button to execute when the LED on PLAY flickers ※ If START button is pressed  the LED on PLAY is not supposed to be flickering any more that is the normal status of the execution       End  If you want to stop the executed operations  press MODE Button to get back to waiting mode stauts  or turn OFF the power using Power Switch     It is used to control Dynamixel and the peripherals  and it can connect Dynamixel AX12A  AX18A  AXS1  DXSeries  RXSeries  EXSeries  and various parts of OLLO Touch Sensor  LED Module  IR Sensor etc         Specific motions can be edited and saved through RoboPlus Motion   The saved motion  mtn file  can be always executed by RoboPlus Task  and also the motions of each part can be controlled by writing the task codes for control     RoboPlus Motion  RoboPlus Task  RoboPlus Manager  Embedded CThe controller of CM700 can be controlled in C language   Please refer to Embedded C for more information Connect to PCFor the PC and CM700 to communicate  LN101 must be connected to CM700 Port Wireless CommunicationZIG110 wireless communication module can be connected to CM700 Fuse ReplacementThere is a fuse to prevent from damaging the circuit due to over current If the CM700 does not turn on  there is a high chance your fuse is blown  Replace the fuse right away ※ The fuse size of CM700 is as below  and you may use a product with a capacity between 125V   5A   10A   It is the same as CM510 Videos",
      "url": "http://0.0.0.0:4000/docs/en/parts/controller/cm-700/"
      } ,
  
  
      "docs-en-parts-controller-cm-900":  {
      "title": "CM-900",
      "content"	 : "CM900Introduction  CM900 is an embedded board based on STMicroelectronics’ STM32F103C8 CortexM3 MCU   The CM900 hardware and software are opensource support in Windows  Mac OSX  and Linux for convenient and easy development of robotsNote CM900 is discontinued Specifications            Item      Description                  CPU      STM32F103C8  ARM CortexM3               Operation  Voltage      5V 24V  USB 5V  DXL 12V  XLSeries 7 4V               I O      GPIO 32              Timer      4   16bit                Analog In ADC       10   12bit                Flash      64 Kbytes              SRAM      20 Kbytes              Clock      72Mhz              USB      1   2 0 FullSpeed                CAN      1              USART      3              SPI      2              I2C TWI       2              Debug      JTAG  amp SWD              DMA      7ch              3 Pin TTL      2              4 Pin RS485      2              3 Pin XLSerise      1              SIZE      60mm X 54 mm X 1 6 mm        Dynamixels cannot be driven from the USB power  Supply power for Dynamixel separately  the CM900’s power can be supplied from different sources    Check the voltage on the device’s power  Dynamixel and XL series power voltage remain the same as supplied   Dynamixel and XLSeries cannot be operated with differences in voltage Layout  Micro USB  type B   provides the CM900 with downloading and communication capabilities via PC  in addition to electrical power from USB’s 5V  Use the included USB cable or any other conventional USB cable you may likely have lying around   Reset switch  resets the CM900 CPU   BT110 ZIG110 4PIN  Connect a 4pin BT110  BT210  ZIG110  or LN101  This allows to communicate with external peripherals with serial UART communications  The LN101 is more useful than simple firmware download from the PC   2mm 2 54 mm prototyping area  located on both sides of the CM900 board with 2 0mm or 2 54mm pitch to facilitate mounting of other devices   2 mm GPIO Header   Allows the CM900’s STM32F103C8 CPU to freely interfacewith external devices   TTL 3 PIN  connect to Dynamixel via 3pin cable daisychain  TTL communications    RS485 4 PIN  connect to Dynamixel via 4pin cable daisychain  RS485 communications    Power LED  LED on when board is powered on and LED off when board is powered off   Status LED  CM900’s program verification test LED  Send high low signals to pin D16 to turn LED on off   Battery socket  socket to connect battery   DC SMPS  jack for 12V SMPS   XLSeries 3 PIN  Connect to Dynamixel XLseries via 3pin TTL communications   JTAG SWD 10 PIN  JTAG SWD terminal for other programming features via IAR  Keil USB Driver InstallNote There is no need to install drivers for Linux and Mac OS  Windows 8 startup settings  disable driver signature enforcement       Driver installation ready after the CM900 is connected to the PC via USB cable        Choose ROBOTISdrivers directory            Choose install this driver software anyways            Check for COM port number      Instructions      Connect the CM900 to the PC via USB cable        Double click on ROBOTIS CM9 exe to start program        Go to Tools  gt Serial Port and select the correct port number refer to Windows Device Manager             Select the corresponding hardware version            Pick any example        Choose 1 of the 2buttons          Check Button  compiles the code      Download Button  compiles  and then downloads      The examples are readonly                If Board is not responding appears  from Windows XP’s download  then update the USB Host Controller driver  Problems may occur if the driver version number is lower         Check USB data via serial monitor      DownloadsThe CM900 uses the ROBOTIS CM9 developmental environment to improve user experience  The IDE can be downloaded to match the OS being used the  link can be found below   Download ZIP CM900 Software for Windows XP  Vista  7  8  Download ZIP CM900 Software for OSX  tested with OS X 10 6 8   Download tar CM900 Software for Linux 64bit  tested with Ubuntu 12 04   Download tar CM900 Software for Linux 32bit  tested with Ubuntu 10 10 ",
      "url": "http://0.0.0.0:4000/docs/en/parts/controller/cm-900/"
      } ,
  
  
      "docs-en-parts-controller-controller-compatibility":  {
      "title": "",
      "content"	 : "Controller CompatibilitySupported Baudrates for Dynamixel            Baudrate bps       CM5      CM510      CM530      CM700      CM900      OpenCM9 04      OpenCR                  9600      O      O      O      O      O      O      O              57600      O      O      O      O      O      O      O              115200      O      O      O      O      O      O      O              1M      O      O      O      O      O      O      O              2M      X      X      X      X      X      X      O              3M      X      X      X      X      X      X      O              4M      X      X      X      X      X      X      O              4 5M      X      X      X      X      X      X      O      CompatibilityDynamixel            Model      CM100      CM150      CM200      CM5      CM510      CM530      CM700      CM900      OpenCM9 04  485 EXP                   AXSeries      X      X      X      O      O      O      O      O      O O               DXSeries      X      X      X      X      X      X      O      O      X O               RXSeries      X      X      X      X      X      X      O      O      X O               EXSeries      X      X      X      X      X      X      O      O      X O               MXSeries TTL       X      X      X      O      O      O      O      O      O O               MXSeries RS485       X      X      X      X      X      X      O      O      X O               XMSeries      X      X      X      X      X      X      X      X      X O               XHSeries      X      X      X      X      X      X      X      X      X O               XL320      X      X      X      X      X      X      X      O      X O       Parts            Model      CM100      CM150      CM200      CM5      CM510      CM530      CM700      CM900      OpenCM9 04  485 EXP                   Bioloid Serial Cable      X      X      X      O      O      X      X      X      X              Mini USB      X      X      X      X      X      O      X      X      X              Micro USB B       X      O      X      X      X      X      X      O      O O               LN101      O      O      O      X      X      X      O      O      O O               IRSS10      O      O      O      X      O      O      O      X      O O               TS10      O      O      O      X      O      O      O      X      O O               DMS80      X      X      X      X      O      O      O      X      O O               IR Array      X      X      X      O      O      O      O      O      O O               GS12      X      X      X      X      O      O      O      X      O O               CS10      X      O      O      X      X      O      X      X      O O               MGSS10      X      O      O      X      X      O      X      X      O O               PIR10      X      O      O      X      O      O      X      X      O O               TPS10      X      O      O      X      O      O      X      X      O O               AXS1      X      X      X      O      O      O      O      O      O O               SM10      O      O      O      X      X      O      X      X      X              GM10A      O      O      O      X      X      X      X      X      X              HSpd Geared Motor      O      O      X      X      X      X      X      X      X              LSpd Geared Motor      O      O      X      X      X      X      X      X      X              LM10      O      O      O      X      X      O      X      X      O O               IR Receiver      O      O      X      X      O      O      O      X      X              ZIG100      X      X      X      O      X      X      X      X      X              ZIG110A      O      O      O      X      O      O      O      O      O O               BT110A      O      O      O      X      O      O      O      O      O O               BT210      O      O      O      X      O      O      O      O      O O               BT410      O      O      O      X      O      O      O      O      O O               LBS040      X      O      O      X      X      X      X      X      O O               11 1V LiPo      X      X      X      X      O      O      O      O      X              9 6V NiMH      X      X      X      O      X      X      X      X      X              OBB10A      O      X      X      X      X      X      X      X      X              ABB030      X      X      O      X      X      X      X      X      X              LFU10      X      X      X      X      O      O      O      X      X              FU5      X      X      X      O      X      X      X      X      X              User Device      X      X      X      X      O      O      O      O      O O       Software            Model      CM100      CM150      CM200      CM5      CM510      CM530      CM700      CM900      OpenCM9 04  485 EXP                   R  1 0      O      O      O      O      O      O      O      X      O X               R  2 0      O      O      O      O      O      O      O      X      O X               OpenCM IDE      X      X      X      X      X      X      X      X      O      ",
      "url": "http://0.0.0.0:4000/docs/en/parts/controller/controller_compatibility/"
      } ,
  
  
      "docs-en-parts-controller-opencm485exp":  {
      "title": "OpenCM 485 EXP",
      "content"	 : "OpenCM 485 Expansion BoardIntroductionSpecifications            Item      Description                  Input voltage      5 30V              Power      SMPS  LiPo  DXL PRO 24V              Power Switch      1              Dynamixel Port      4Pin x 5  3Pin x 5              Button      2              LED      5              Size      68 mm X 66 5 mm              Weight      32g      Layout  SMPS DC Connector  For using SMPS DC Adapter to supply power to OpenCM 485 EXP board   DXL Pro Power Connector  Power connector for Dynamixel Pro  24V    LiPo battery Connector  Connector for 11 1V LiPo battery LBS10    Dynamixel TTL 3 Pin Bus  Used to connect 3Pin Cables Dynamixel TTL Bus  and for daisy chaining Dynamixels   User Button  Function of these buttons can be assigned by the user   User LED  LED that can be controlled by the user   I O header  Header pins used to mount OpenCM9 04 2 54mm pitch    Dynamixel 485 4Pin Bus  Used to connect 4Pin Cables Dynamixel TTL Bus  and for daisy chaining Dynamixels   Power Switch  Switch that powers the board and Dynamixel  Note Does not disconnect the power received via USB cable   JP1 Jumper  Jumper that determines whether the power inputted onto OpenCM 485 EXP will be supplied to OpenCM9 04 board or not Connecting OpenCM9 04      Prepare OpenCM 485 EXP and OpenCM9 04 boards  Any version of OpenCM9 04 is compatible  Solder the header onto the OpenCM9 04             OpenCM9 04 is mounted onto OpenCM 485 EXP as shown below   Caution The orientation of the connection must be correct      assets images parts controller opencm904 opencm485exp_03 jpg       Connect the USB cable onto OpenCM9 04 board             Connect Dynamixel and 12V SMPS adapter onto OpenCM 485 EXP board       Power Circuit ConnectionA power circuit block diagram of the OpenCM 485 EXP and OpenCM9 04  once mounted  is shown below OpenCM 485 EXP supplies 5V from OpenCM9 04 as default  JP1 can be used to determine if VDD power from OpeCM 485 EXP board is supplied to OpenCM9 04   OpenCM 485 EXP Power ConnectionOpenCM 485 EXP’s Dynamixel 485 bus operates as a Dynamixel bus using OpenCM9 04’s USART3 Serial3  Note OpenCM9 04’s Dynamixel TTL BUS is connected to USART1 Serial1    OpenCM9 04  amp OpenCM 485 EXP Bus ConnectionsEXP Board Programming      Support robotis com  gt Software Help  gt ROBORIS_OpenCM  MUST use V 1 0 1 or later              Extract OpenCM IDE and execute ROBOTIS_OpenCM exe file             OpenCM 485 EXP’s 485 Bus sends and receives communication packets from OpenCM9 04’s Serial3 USART3  Dynamixel Class variable MUST be set to 3 once it has been declared   Dynamixel Dxl 3    Dynamixel on Serial3  USART3   Needs to be set as 3 to used USART3 on OpenCM 485 EXP void setup     Dxl begin 1     1Mbps  void loop       Dxl writeWord 6  30  0   Dxl writeWord 2  30  0   delay 1000                 Dxl writeWord 6  30  1023   Dxl writeWord 2  30  4095   delay 1000       Click on Download button indicated below to download the program       Button  amp LEDOpenCM 485 EXP board has 2 buttons and 3 LED’s that are connected to OpenCM9 04 I O pins The OpenCM9 04 I O pin numbers for the buttons and LED’s are indicated below                    OpenCM9 04 I O                  Button1      16              Button2      17              LED1      18              LED2      19              LED3      20      Downloads  Download PDF PCB Schematic",
      "url": "http://0.0.0.0:4000/docs/en/parts/controller/opencm485exp/"
      } ,
  
  
      "docs-en-parts-controller-opencm904":  {
      "title": "OpenCM 9.04",
      "content"	 : "OpenCM 9 04Introduction  OpenCM9 04 Types Package            Item      OpenCM9 04 A Type      OpenCM9 04 B Type      OpenCM9 04 C Type                  Power Switch      X      1      1              User Button      1      1      1              2Pin Battery LBS40       X      2      2              JTAG SWD      X      1      1              Micro B USB      X      1      1              5Pin Port      X      4      4              Dynamixel TTL BUS      X      4      4              4 Pin Communication      X      1      1        OpenCM9 04 is a microcontroller board based on 32bit ARM CortexM3  The OpenCM9 04’s schematics and source codes are opensource   3 types are available Type A  amp Type B  amp Type C  The difference between Type A Type B  Type C is the availability of the connectors   Refer to the image and table above   OpenCM9 04 Accessory Set can be purchased to acquire all the necessary connector to upgrade Type A to Type B Type C    OpenCM9 04 Accessory SetNote Refer to the DARWINMINI for controller recovery  type Conly  DARWINMINI Controller Firmware UpdateSpecifications            Item      Description                  CPU      STM32F103CB  ARM CortexM3               Operation Voltage      5V   16V              I O      GPIO x 26              Timer      4  16bit               Analog Input ADC       10  12bit               Flash      128Kb              SRAM      20Kb              Clock      72Mhz              USB      1  2 0 Full Speed  Micro B Type              USART      3              SPI      2              I2C TWI       2              Debug      JTAG  amp SWD              Dynamixel TTL BUS 3pin      4              Dimensions      27mm x 66 5mm      Caution  USB power is cannot be used to operate Dynamixels  Separate power supply needs to be provided  OpenCM9 04 can operate using power supplied via USB  battery     terminal    Check the operating voltage for peripheral devices when using additional power supplies  Dynamixel or XLseries is receives the exact voltage supplied   Dynamixel and XLseries cannot be used together due to different operating voltages Control TableControl Table consists of data regarding the current status and operation of controller  The user can control controller by changing data of Control Table via Instruction packet       EEPROM and RAMData in RAM area is reset to initial values whenever the power is turned on while data in EEPROM area is kept once values are set even if the power is turned off         AddressRepresents the location of data  To read from or write data to the control table the user should assign the correct address in the Instruction packet         AccessController has two kinds of data Readonly data  used mainly for sensing  and readandwrite data used for driving         Initial ValueIn case of data in the EEPROM Area  the initial values on the right side of the below Control Table are the factory default settings In case of data in the RAM Area  the initial values on the right side of the following control table are the ones when the power is turned on         SizeThe Size of data varies from 1   4 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet   EEPROM Area            Address      Size      Name      Description      Access      Init Value                  0      2      Model Number      Model Number      R      400              6      1      Firmware Version      Firmware Version      R                    7      1      ID      Controller ID      RW      200              8      1      Baud Rate      Communication Baud Rate      R      1              9      1      Return Delay Time      Response Delay Time      RW      0              10      1      Status Return Level      Select Types of Status Return      RW      2              12      1      DXL Baud Rate      Dynamixel Communication Baud Rate      RW      3      RAM Area            Address      Size      Name      Description      Access      Init Value                  21      1      Mode Number      Operation Mode      RW                    26      1      Button Status      Start Button Status      R      0              66      2      Motion Play Page      Motion Play Page Number      RW      0              68      1      Motion Play Status      Motion Play Status      R                    73      1      128ms Timer Value      128ms Timer Counter      RW      0              74      2      1ms Timer Value      1ms Timer Counter      RW      0              77      1      Random Number      Creating Random Number      RW                    79      1      Green LED      Green LED Status      RW      0              82      1      Motion LED      Motion LED Status      RW      0              360      2      Port 1 IR Sensor Value      IR Sensor Value on Port 1      R                    366      2      Port 4 IR Sensor Value      IR Sensor Value on Port 4      R                    368      2      Port 1 DMS Sensor Value      DMS Sensor Value on Port 1      R                    370      2      Port 2 DMS Sensor Value      DMS Sensor Value on Port 2      R                    372      2      Port 3 DMS Sensor Value      DMS Sensor Value on Port 3      R                    374      2      Port 4 DMS Sensor Value      DMS Sensor Value on Port 4      R                    376      1      Port 1 Touch Sensor Value      Touch Sensor Value on Port 1      R                    377      1      Port 2 Touch Sensor Value      Touch Sensor Value on Port 2      R                    378      1      Port 3 Touch Sensor Value      Touch Sensor Value on Port 3      R                    379      1      Port 4 Touch Sensor Value      Touch Sensor Value on Port 4      R                    381      1      Port 2 LED Module Value      LED Module Control Value on Port 2      RW      0              382      1      Port 3 LED Module Value      LED Module Control Value on Port 3      RW      0              386      2      Port 2 User Device Value      User Device Value on Port 2      RW      0              388      2      Port 3 User Device Value      User Device Value on Port 3      RW      0              392      1      Port 1 Temperature Sensor Value      Temperature Sensor Value on Port 1      R                    393      1      Port 2 Temperature Sensor Value      Temperature Sensor Value on Port 2      R                    394      1      Port 3 Temperature Sensor Value      Temperature Sensor Value on Port 3      R                    395      1      Port 4 Temperature Sensor Value      Temperature Sensor Value on Port 4      R                    396      1      Port 1 Ultrasonic Sensor Value      Ultrasonic Sensor Value on Port 1      R                    397      1      Port 2 Ultrasonic Sensor Value      Ultrasonic Sensor Value on Port 2      R                    398      1      Port 3 Ultrasonic Sensor Value      Ultrasonic Sensor Value on Port 3      R                    399      1      Port 4 Ultrasonic Sensor Value      Ultrasonic Sensor Value on Port 4      R                    400      1      Port 1 Magnetic Sensor Value      Magnetic Sensor Value on Port 1      R                    401      1      Port 2 Magnetic Sensor Value      Magnetic Sensor Value on Port 2      R                    402      1      Port 3 Magnetic Sensor Value      Magnetic Sensor Value on Port 3      R                    403      1      Port 4 Magnetic Sensor Value      Magnetic Sensor Value on Port 4      R                    404      1      Port 1 Motion Sensor Value      Motion Sensor Value on Port 1      R                    405      1      Port 2 Motion Sensor Value      Motion Sensor Value on Port 2      R                    406      1      Port 3 Motion Sensor Value      Motion Sensor Value on Port 3      R                    407      1      Port 4 Motion Sensor Value      Motion Sensor Value on Port 4      R                    409      1      Port 2 Color Sensor Value      Color Sensor Value on Port 2      R                    410      1      Port 3 Color Sensor Value      Color Sensor Value on Port 3      R            Note Some Addresses of the Control Table can be tested with R  Manager 2 0 Block DiagramOpenCM9 04’s block diagram is shown below  OpenCM9 04’s schematic is based on 32bit CortexM3 core STM32F103CB microcontroller The power schematic is designed to cascade through 5V and 3 3V regulators  5V is supplied to TTL bus and 3 3V is supplied to microcontrollers  5pin port and 4pin communication port OpenCM9 04 supports USB2 0 FS  MicroB connector is used to download the program or perform data communication Pin 11 TX1   amp Pin 12 RX1  cannot be used simultaneously because USART Channel 1 is assigned to DYNAMIXEL TTL Bus USART channel 1 is registered under Dynamixel TTL Bus and cannot be used simultaneously with pin 11 TX1   amp 12 RX1  Layout  Power Switch  Switch used to control the power supplied to the board and DYNAMIXEL on off   Note the board is always powered ON when USB cable is connected        Series Battery Socket  Connects two LBS04 Lithiumion battery     Caution Do NOT charge the battery while its connected to the board because the user will short the circuit  Be sure to disconnect from the board when charging the battery     Dynamixel TTL 3 PIN  Port for daisy chaining Dynamixels that use 3pin cables  Dynamixel TTL Bus        Communication Port  Used from wired wireless communication using peripheral devices  i e  BT210  BT110A  ZIG110A  LN101  etc   OpenCM9 04’s 4pin communication port uses Serial2 USART2                4pin communication port pinmap gt                  Example  Wireless communication between OpenCM9 04 and a smartphone gt                  Example  Bluetooth communication using OpenCM9 04 and RC100                  Example  Zigbee communication using OpenCM9 04 and RC100                  Example  Wired communication using OpenCM9 04 and LN101            User Button   a button that can be controlled programmed by the user  Can be used as pin 23 or BOARD_BUTTON_PIN  It can be initialized in setup   as pinMode 23  INPUT_PULLDOWN    If OpenCM9 04 does not download the program  connect the USB cable while holding down the User Button  Status LED will stay lit and the download will be initiated               OpenCM9 04 can enter a Emergency Recovery Mode by using the User button            Ext  ADC Ref Jumper  Analog Reference voltage can be modified  Please refer to AREF section on  pg 13  Link         MicroB USB  Used to download programs onto OpenCM9 04 and used to communicate with other devices via USB while simultaneously supplying 5V to the board   Upon connecting the battery  5V power from USB is automatically disconnected and power is supplied from the battery   If excessive current is drawn  internal fuse cuts off the current drawn from the 5V USB connection to protect the user’s PC from damage             Status LED  LED used to test OpenCM9 04’s program  The LED turns ON when Pin 14 or BOARD_LED_PIN is HIGH and turns OFF when it’s LOW  PWM control is possible               Status LED Position        Reset Button  imitates the CPU to reset       JTAG SWD 4 PIN  Used to connect STLINK or other InCircuit Debugger Programmer   JTAG SWD 4pin port can be used for various developments by advanced users  STLINK connection example is shown below               Example STLINK and OpenCM9 04 connection            5pin Port  used to connect ROBOTIS 5pin devices  modules                5pin port number and instructions                  5pin cable direction                                5pin Device Type          Port 1          Port 2          Port 3          Port 4                                      IR Sensor          O          X          X          O                          DMS Sensor          O          O          O          O                          Gyro Sensor          O          O          O          O                          Touch Sensor          O          O          O          O                          Color Sensor          X          O          O          X                          Magnetic Sensor          O          O          O          O                          Temperature Sensor          O          O          O          O                          Passive IR Sensor PIR10          O          O          O          O                          LED Module          X          O          O          X                            ROBOTIS sense and LED module compatibility list            I O Header  OpenCM9 04’s CPU  can be accessed via GPIO pins     26 GPIO pins  0 25  are digital input outputs and operates at 3 3V  Digital input either HIGH 3 3V  or LOW 0V     Digital input’s maximum toggle speed is 18Mhz   With exception of pin 22  amp 23  which has a maximum toggle speed of 2Mhz     Digital pins can only tolerate up to 3 3V any voltage input greater than 3 3V may damage the OpenCM9 04   5V Tolerant Pin  10  11  12  13  14  15  16  17  18  19  20  21   The maximum current these pins can tolerate is 25mA   exception pin 22  amp 23 can only tolerate 3mA     All of OpenCM9 04’s GPIO pins can internally pullup or pulldown and can be modified via software  Pullup and pullup resistance is 40Kohm Typical                OpenCM9 04 GPIO PinMap        Serial USART   11 TX1   12 RX1   4 TX2   5 RX2   24 TX3   25 RX3   PWM  2  3  4  5  6  7  8  9  10  11  12  13  14  SPI  0 SS1   1 SCK1  6 MISO1   7 MOSI1   18 SS2   19 SCK2   20 MISO2   21 MOSI2   LED  14  BOARD_LED_PIN is defined as 14   BUTTON  23  BOARD_BUTTON_PIN is defined as 23   TWI I2C   24 SCL2   25 SDA2   RST  Pin connect to the CPU Reset signal   5V  outputs 5V when the battery is connected to the board   Does not output 5V when USB only the USB cable is connected    3 3V  outputs 3 3V when the power is supplied to the board via battery or USB cable   GND  GROUND   terminal   A0  Digital I O and analog input   A1  Digital I O and analog input  Can be used for SPI channel 1’s SCK clockpin   A2  Digital I O  analog input   amp PWM output   A3  Digital I O  analog input   amp PWM output   A4  Digital I O  analog input   amp PWM output  Used as USART2 Serial2  channel’s TXD pin and connected to 4pin communication port’s TX2   A5  Digital I O  analog input   amp PWM output  Used as USART2 Serial2  channel’s RXD pin and connected to 4pin communication RX2   A6  Digital I O  analog input   amp PWM output  Can be used as SPI channel 1’s MISO pin   A7  Digital I O  analog input   amp PWM output  Can be used as SPI channel 1’s MISO pin   A8  Digital I O  analog input   amp PWM output   A9 Digital I O  analog input   amp PWM output   D10  Digital I O  amp PWM output   D11  Digital I O  amp PWM output  USART1’s  Serial1  TX pin  Cannot be simultaneously used with the Dynamixel TTL Bus   D12  Digital I O  amp PWM output  USART1 Serial1 ’s RX pin  Cannot be simultaneously used with the Dynamixel TTL Bus   D13  Digital I O  amp PWM output   D14  Digital I O  amp PWM output  Pin connected to the Status LED  It’s predefined as BOARD_LED_PIN   D15  Digital I O   VCC      voltage of the board  There are 2 VCC    pins  Connected to the   terminal of the battery socket   GND   voltage of the board  There are 2 GND   pins  Connected to the   terminal of the battery socket   TTL  Dynamixel TTL Bus’s Data line  Used to communicate with 3pin TTL Dynamixels   D  Relevant to Dynamixel TTL Bus and used to select TX  RX   X  Dynamixel TTL Bus’s TX pin   L  Dynamixel TTL Bus’s RX pin   D16  Digital I O Pin   D17  Digital I O Pin   D18  Digital I O Pin   D19  Digital I O Pin  Can be used for SPI channel 2’s SCK clock pin   D20  Digital I O Pin  Can be used for SPI channel 2’s MOSI pin   D21  Digital I O Pin  Can be used for SPI channel 2’s MOSI pin   D22  Digital I O Pin  Maximum output current is 3mA and maximum toggle speed is 2Mhz   D23  Digital I O Pin  It’s connected to User Button  If the power is supplied while User Button is pressed  the board initiates Emergency Recovery  Download  Mode  Maximum output current is 3mA and maximum toggle speed is 2Mhz   D24  Digital I O Pin  Can be used as I2C channel 2’s SCL pin or USART3 Serial3 ’s TX pin   D25  Digital I O Pin  Can be used as I2C channel 2’s SDA pin or USART3 Serial3 ’s RX pin   5V  5V output pin  JP2 jumper can be modified to connect to AREF pin and change the default voltage to 5V   AREF  Connect to CPU’s Analog Reference pin  Voltage can be modified from 3 3V by changing the JP2 jumper  Maximum 5V   Refer to STM32F103CB datasheet for specifications    JP2 jumper location and instructions  Example Changing default Analog Reference voltage AREF  to 5V by modifying JP2Caution Check the pin supporting up to 5V once Analog Reference  AREF  has been modified to 5V Connecting PowerOpenCM board can be powered using 3 types of voltage input  LBS40 battery socket  Power supplied via   header pins  MicroB USB cableWe recommend using 2 LBS40 batteries when operating the XL320   Example OpenCM9 04  XL320  and LBS40 LiIon Battery  connection  LBS40 batteryWe recommend using   pin to power Dynamixels other than XL320   Example OpenCM9 04 and AX12 connectionAs displayed in the image below  connect towards the end of both    and it can also be connected using other power supply equipment  If you see the back side of OpenCM9 04  the    in the center is connected as displayed in image A  So  please connect as in the image below   Picture A  Example  Power Connection  Example Power supply cable  Link Avoid connecting power to the battery socket and   pin  shown below   Do not connect anincorrect battery to the battery socket  Only connect LBS40 onto the battery socket   CAUTION Remove either the battery connector or  headerpin power  CAUTION Don’t used different types of batteriesIt is possible to simultaneously connect the USB port  LBS40 battery  and   pin  Builtin protection We recommend supplying the recommended voltage of the Dynamixel when supplying power via   pin or battery  Higher voltage usage may reduce the Dynamixel’s lifespan or damage the product The OpenCM9 04’s maximum tolerable voltage is 16V voltage input greater than 16V may damage the board Dynamixel cannot operate using the power supplied via USB cable  but communication ports and I O headers can be operated normally CAUTION do NOT charge the LBS40 battery while it is connected to the board and the board is connected to the PC via USB cable Switch Assembly Type A OpenCM9 04 Type A is sold without a power switch and JP1 shorted  To add the power switch  remove the solder connection of JP1 and solder the 2 54mm pitch power switch Power switch is included in the OpenCM accessory kit or other switches with the similar pitch can be used   JP1 amp Power Switch schematics  Power is supplied to the board if JP1 is connected even without a switch  OpenCM9 04 Type A needs to have JP1 disconnected when soldering the switch for it to operate properlyConnector Assembly Type A OpenCM9 04’s Dynamixel 3Pin TTL pins are all compatible with Dynamixel 3pin TTL and XL320 3pin TTL minitype   Thus  both type of pins can be soldered and used Both types of 3pin TTL pins are included in OpenCM Accessory Set   OpenCM9 04 Type A can have 2 types of 3pin connectors soldered onto the boardDownloads  Download ZIP OpenCM 9 04 Manual  Download PDF PCB Schematic  Download PDF Top Gerber  Download PDF Bottom Gerber  Download PDF Gerber  Download Software Link OpenCM IDEDimension",
      "url": "http://0.0.0.0:4000/docs/en/parts/controller/opencm904/"
      } ,
  
  
      "docs-en-parts-display-lm-10":  {
      "title": "LED Module(LM-10)",
      "content"	 : "LM10IntroductionThe module makes light with LED  There are two types of LED Orange and Blue   ON OFF of each LED can be controlled separately through port control   Weight  4g  Dimensions  24mm x 18mm x 12mmCompatibility Guide Controller CompatibilityPinout  OUT2  The second LED can be turned on when High signal is applied   GND  NCC  Not used  VCC  OUT1  The first LED can be turned on when High signal is applied Caution Cables can may be damaged when not properly connected  i e  wrong orientation   or use of excessive force during connection Tutorials  RoboPlus Task  Please refer to LED Module section in the RoboPlus Task Videos",
      "url": "http://0.0.0.0:4000/docs/en/parts/display/lm-10/"
      } ,
  
  
      "docs-en-parts-interface-ln-101":  {
      "title": "USB Downloader(LN-101)",
      "content"	 : "USB Downloader LN101 IntroductionHow to UseUSB Downloader is used to connect the USB port of PC and the 4pin port of the controller through serial communication Serial Communication  Download Task Code written in PC using the controller  Print out the result of task code execution on the screen of PC  Virtual robot control of RoboPlusAvailable Controller  CM100  CM150  CM200  CM700  OpenCM9 04Note Difference in voltage may cause unstable LN101 connections  Ensure that both connecting equipment and PC are properly grounded Check DriverHow to check whether the USB downloader LN101  driver is installed correctly       Connect USB Downloader  LN101  to the USB Port of PC             Select Manage in the poppedup menu shown by rightclicking My Computer             Check USB Serial Converter in Universal Serial Bus Controllers of Device Manager             Check USB Serial Port COMx  in the list of Ports COM  amp LPT   COM Port number may vary depending on each system       Install Driver ManuallyIf you installed RoboPlus  FTDI Driver  USB2Dynamixel  USB Downloader  LN101  driver  is installed together automatically  If you didn’t install the RoboPlus yet  or if the driver is not installed appropriately  please install it manually according to following procedures       Connect a device to PC  If the driver is not installed yet  Found New Hardware Wizard will be popped up  Install from a list or specific location  Advanced  S   gt Next N             Decide the location of Driver  If RoboPlus S W has been installed automatically  the driver is in LN101 folder of RoboPlus Installation folder  Or if you want to install the newest version  download the newest version VCP driver from FTDI Driver Download page                 Click the Next N  button to start the installation  Installation of USB Serial Converter driver is completed             Install the USB Serial Port driver in the same way       VideosSetting up the port",
      "url": "http://0.0.0.0:4000/docs/en/parts/interface/ln-101/"
      } ,
  
  
      "docs-en-parts-interface-u2d2":  {
      "title": "U2D2",
      "content"	 : "  U2D2     assets images parts interface u2d2_product jpg    Introduction   introduction U2D2 is a small size USB communication converter that enables to control and operate DYNAMIXEL with PC    How to Use   howtouse    PC to DYNAMIXELU2D2 can be connected to the USB port of the PC with the enclosed USB cable   It supports both 3Pin TTL connector and 4Pin RS485 connector to link up with various DYNAMIXELs   U2D2 does not supply power to DYNAMIXEL  therefore  an external power supply should provide power to DYNAMIXEL   Be careful as recommended voltage for each DYNAMIXEL could be vary by model   Please refer to eManual for recommended supply voltage and power connection with various power supplies        assets images parts interface u2d2_01 png    PC to UARTU2D2 is able to connect ROBOTIS controllers that support 4Pin UART communication such as OpenCM9 04  CM150 and CM200 to the PC with the enclosed USB cable       assets images parts interface u2d2_02 png  Note  In case of unstable communication with U2D2  check if there is a reference voltage difference in the communication  Please check PC and other devices are grounded properly  Failing to do so might cause damages on the U2D2   notice   Specifications   specifications      assets images parts interface u2d2_03 png  Item Description     Weight 9g  Dimensions 48mm x 18mm x 14 6mm  Ports 3Pin TTL Level TTL Communication supported DYNAMIXEL 4Pin RS485 RS485 Communication supported DYNAMIXEL 4Pin UART Controllers that support 4Pin UART such as CM150 and CM200   Baudrate Maximum 6Mbps    Layout   layout      assets images parts interface u2d2_04 png  Ports Description     4Pin UART Convert USB and UART  3Pin TTL Level Connect to the DYNAMIXEL with 3Pin TTL Level Communication  4Pin RS485 Connect to the DYNAMIXEL with 4Pin RS485 Communication  Status LED Display status of Power supply  TxD Data write  and RxD Data Read   MicroB USB Connect to the PC with USB cable    Baudrate   baudrate  Reference BPS Actual BPS Error %       9 600 9 600 0 00  57 600 57 588 4823 0 02  115 200 115 246 0984 0 04  1 000 000 1 000 000 0 00  2 000 000 2 000 000 0 00  3 000 000 3 000 000 0 00  4 000 000 4 000 000 0 00  4 500 000 4 571 428 571 1 56  6 000 000 6 000 000 0 00 Less than 3% of the baud rate error will not affect to the UART communication   notice   Supply Power   supplypower U2D2 does not supply power to DYNAMIXEL  therefore  an external power supply should provide power to DYNAMIXEL as below Before connecting DYNAMIXEL to an external power supply  please check the recommended voltage for DYNAMIXEL % capture u2d2_warning_01 %Caution for Power Supply For a stable power supply  it is recommended to use ROBOTIS controller or SMPS2Dynamixel  When connecting cable to DYNAMIXEL  please turn off the power % endcapture % u2d2_warning_01   markdownify    Using SMPS2DynamixelIn order to operate DYNAMIXEL with SMPS2Dynamixel  please connect DYNAMIXEL to SMPS2Dynamixel  then connect SMPS to SMPS2Dynamixel as shown below image   Please compare operating voltage of DYNAMIXEL with 12V 5A ROBOTIS SMPS before supplying power      assets images parts interface u2d2_05 png     Using ROBOTIS ControllerIn order to operate DYNAMIXEL with OpenCM 485 Expansion board  please connect DYNAMIXEL to OpenCM485 Exp board  then connect battery or SMPS to the expansion board as shown below image   Please compare operating voltage of DYNAMIXEL with battery or 12V 5A ROBOTIS SMPS before supplying power   OpenCM485 EXP board will bypass the input power source to output power      assets images parts interface u2d2_06 png     Using Power SupplyIn order to operate DYNAMIXEL with Power Supply  please configure the power supply for the DYNAMIXEL before connecting cable   Please check the pinout of the cable to avoid connecting to wrong pins   How to check whether the USB downloader LN101  driver is installed correctly      assets images parts interface u2d2_07 png    Pinouts   pinouts      assets images parts interface u2d2_08 png    Data Flow Control   dataflowcontrol      assets images parts interface u2d2_09 png      assets images parts interface u2d2_10 png      assets images parts interface u2d2_11 png      assets images parts interface u2d2_12 png When data is transmitted from the USB port in PC to peripheral devices Tx   all connected device will receive an identical data On the other hand  when data is received from one of the peripheral devices Rx   it will be automatically converted as USB communication and sent to the PC  During this process  received data will not be transmitted to other peripheral devices  If data from more than two peripheral devices are received  the received data can be corrupted Therefore  when connecting 3Pin TTL Level DYNAMIXEL and 4Pin RS485 DYNAMIXEL at the same time  all connected DYNAMIXEL should have its unique ID in order to prevent receiving corrupt data  In addition  when using Bulk Read and Sync Read instructions that requires to receive data from multiple DYNAMIXELs  relevant DYNAMIXELs should be connected to the same communication channel or else the instruction will not work properly    Softwares   softwares 1  RoboPlus    RoboPlus supports Windows environment to manage controllers and DYNAMIXELs      R  Task 2 0  R  Task 2 0 can be used when downloading Task Code to the controller    R  Motion 2 0  R  Motion 2 0 can be used when downloading Motion file to the controller    R  Manager 2 0  R  Manager 2 0 is used to connect controllers or DYNAMIXELs and update firmware or test the control table     ROBOTIS homepage  http  www robotis com 2  Dynamixel Workbench    Dynamixel Workbench supports Linux environment to test control table of DYNAMIXEL     ROBOTIS GitHub  https  github com ROBOTISGIT 3  Dynamixel SDK    Dynamixel SDK supports various programming languages such as C  C    C   MATLAB  LabVIEW  Python and Java in order to help developing DYNAMIXEL control software  Dynamixel SDK provides a bundle of functions methods that can be used for operating DYNAMIXEL with protocols in the form of digital packet  Dynamixel SDK is free to download from GitHub    ROBOTIS GitHub  https  github com ROBOTISGIT    Additional Features   additionalfeatures    Internal DIP SwitchThere is a twopole switch inside of the plastic cover  This switch is set to OFF as a default  Under normal circumstances this default setting is recommended  therefore  the switch cannot be accessed without opening the case  Please open the case and set RS485 termination resistor and UART 3 3V power switch only after thoroughly understand its usage         assets images parts interface u2d2_13 png     RS485 Termination Resistor 120Ω  SwitchTransmission devices are designed to have certain impedances based on design standard and signal reflection or interference can occur when impedance do not match over the transmission lines  The termination resistors at the end of transmission lines suppress such effect by adjusting impedance and allowing constant current flow  However  the termination resistor is not a mandatory  especially in a short RS485 network with lower communication baud rate  If communication is suffering from frequent errors  the termination resistor might be required  The regular 120Ω termination resistor will be applied on the transmission line by shifting the switch to ON  If termination resistor doesn’t resolve the communication issue  the resistance value might need to be adjusted       assets images parts interface u2d2_14 png     UART 3 3V Power Supply SwitchThe peripheral device such as controllers that can be connected to the 4Pin UART usually have an external power source  therefore additional 3 3V power from the UART port  2 pin is not necessary   However  when connecting BT410 that does not have an external power source needs to be powered by the 4Pin UART port  2 pin  In this case  the UART 3 3V power switch need to be turned on   If the switch is turned on  second pin of the 4Pin UART connector will be able to supply 3 3V     Caution for Assembly     assets images parts interface u2d2_15 png  Bolt for Mount Hole  M2 Tap bolt Mount Hole Depth  Valid depth 4 7mm  Depth from the surface 5 5mm",
      "url": "http://0.0.0.0:4000/docs/en/parts/interface/u2d2/"
      } ,
  
  
      "docs-en-parts-interface-usb2dynamixel":  {
      "title": "USB2Dynamixel",
      "content"	 : "  USB2Dynamixel     assets images parts interface usb2dynamixel_product jpg    Introduction   introduction    How to Use   howtouse USB2Dynamixel is a device used to operate Dynamixel directly from PC   USB2Dynamixel is connected to USB port of PC  and 3P and 4P connectors are installed so that various Dynamixels can be conntected Also  USB2Dynamixel can be used to change from USB port to Serial port on the PC without serial port such as notebook computer  etc   The function is very useful in the cases when the Dynamixel exclusive controllers such as CM2  CM2   CM5  and CM510 are connected to USB Port  or when ZIG2Serial is connected to USB port to control robots wirelessly    Dynamixel Control Using PC     assets images parts interface usb2dynamixel_01 png    Changing Serial Port     assets images parts interface usb2dynamixel_02 png    Wireless Communication     assets images parts interface usb2dynamixel_03 png  Note  Difference in voltage may cause unstable USB2DXL connections  Ensure that both connecting equipment and PC are properly grounded   notice   Layout   layout      assets images parts interface usb2dynamixel_04 jpg      assets images parts interface usb2dynamixel_05 jpg  Name Description     Status Display LED Display power supply  TXD data writing   and RXD data reading  status   Function Selection Switch Select the communication method of TTL  RS485  and RS232   3P Connector Connect Dynamixels of AX Series through TTL communication   4P Connector Connect Dynamixels of DX  RX Series through RS485 communication   Serial Connector Change from USB port to Serial port through RS232 communication      Pinout   pinout The following pictures show the usage of connector pins used by USB2Dynamixel  If you want to use each pin for your own purpose  please use them after you learn the usage of each pin  PIN Figure of 4P   3P Cable Connctors       assets images parts interface usb2dynamixel_07 jpg  PIN Figure of Serial Connector       assets images parts interface usb2dynamixel_08 jpg    Select Communication Mode   selectcommunicationmode The communication mode can be selected by chaning the switch of USB2Dynamixel as below      assets images parts interface usb2dynamixel_06 png 1  TTL Communication  Dynamixels using 3pin port such as AX Series  AXS1 etc 2  RS485 Communication  Dynamixels using 4pin port such as DX Series  RX Series  EX Series etc 3  RS232 Communication  Controllers using serial cable such as CM5  CM510 etc    Tutorials   tutorials  USB2Dynamixel SDK  Please refer to the  USB2Dynamixel SDK     Supply Power   supplypower USB2Dynamixel does not supply power to Dynamixel  Therefore  the power must be supplied separately to operate Dynamixel as the following pictures  Please refer to the explanation page of each Dynamixel regarding proper voltages for each Dynamixel mode  % capture usb2dynamixel_warning_01 % Warning  For the stable power supply  we recommend using ROBOTIS controller or SMPS2Dynamixel  Connect your DYNAMIXEL to power supply while it’s off and turn on off with the power switch % endcapture % usb2dynamixel_warning_01   markdownify     Applying Power to the DynamixelReferring to PIN Figure  apply positive     voltage to the  2 PIN of the connector  and negative    voltage on  1 PIN of the connector   Since the 2 connectors of Dynamixels are equal   power can be applied at any of       assets images parts interface usb2dynamixel_09 jpg    Applying power between USB2Dynamixel and DynamixelIf power cannot be applied as above  apply the power between USB2Dynamixel and Dynamixel as below Separate the power cable on the  2 PIN of USB2Dynamixel connector  and then apply positive    voltage   Connect additionally Ycable to the power cable on the  1 PIN of  USB2Dynamixel connector  and then apply negative    voltage      assets images parts interface usb2dynamixel_10 jpg    Check Driver   checkdriver How to check whether the USB2Dynamixel driver is installed correctly  Note  USB2Dynamixel and LN101 uses an identical USB chipset   notice1  Connect USB2Dynamixel to the USB Port of PC       img_02  img_02 2  Select Manage in the poppedup menu shown by rightclicking My Computer       img_04  img_04 3  Check USB Serial Converter in Universal Serial Bus Controllers of Device Manager       img_05  img_05 4  Check USB Serial Port COMx  in the list of Ports COM   LPT   COM Port number may vary depending on each system       img_06  img_06    Install Driver Manually   installdrivermanually If you installed RoboPlus  FTDI Driver  USB2Dynamixel  USB Downloader  LN101  driver  is installed together automatically  If you didn t install the RoboPlus yet  or if the driver is not installed appropriately  please install it manually according to following procedures   notice1  Connect a device to PC  If the driver is not installed yet  Found New Hardware Wizard will be popped up  Install from a list or specific location  Advanced  S    Next N       img_07  img_07 2  Decide the location of Driver  If RoboPlus S W has been installed automatically  the driver is in LN101 folder of RoboPlus Installation folder  Or if you want to install the newest version  download the newest version VCP driver from  FTDI Driver Download  page       img_08  img_08           img_09  img_09 3  Click the Next N  button to start the installation  Installation of USB Serial Converter driver is completed       img_10  img_10 4  Install the USB Serial Port driver in the same way       img_11  img_11    Videos   videos Setting up the port USB2Dynamixel SDK   docs en software sdk usb2dynamixel  download_task_code   docs en software rplus1 task getting_started  programdownload task_result_print   docs en software rplus1 task getting_started  printonthescreen virtual_robot_control   docs en software rplus1 task getting_started  virtualrobotcontrol CM100   docs en parts controller cm100  CM150   docs en parts controller cm150  CM200   docs en parts controller cm200  CM700   docs en parts controller cm700  OpenCM9 04   docs en parts controller opencm904  FTDI Driver Download  http  www ftdichip com Drivers VCP htm img_01   assets images parts interface ln101 jpg img_02   assets images edu task_download_01 jpg img_03   assets images parts interface ln101_to_cm700 png img_04   assets images parts interface ln101_01 png img_05   assets images parts interface ln101_02 png img_06   assets images parts interface ln101_03 png img_07   assets images parts interface ln101_04 png img_08   assets images parts interface ln101_05 png img_09   assets images parts interface ln101_06 png img_10   assets images parts interface ln101_07 png img_11   assets images parts interface ln101_08 png",
      "url": "http://0.0.0.0:4000/docs/en/parts/interface/usb2dynamixel/"
      } ,
  
  
      "docs-en-parts-motor-gm-10a":  {
      "title": "Geared Motor(GM-10A)",
      "content"	 : "Geared Motor GM10A IntroductionIt is the motor used in OLLO it is connected to CM100  and the direction of spin and the speed of spin can be adjusted through port control It can be operated as general DC motors by connecting OLLO switch and the battery box Compatibility Guide Controller CompatibilitySpecifications  Weight  15g  Dimensions  18mm x 36mm x 24mm  Gear Ratio  701  Speed  125RPM @ 1 5V  250RPM @ 3 0V  Output on both Axles  Safety Clutch installedPinout  MOT  MOT Caution Cables can may be damaged when not properly connected  i e  wrong orientation   or use of excessive force during connection Tutorials  RoboPlus Task  Please refer to Geared Motor section in the Roboplus Task Videos",
      "url": "http://0.0.0.0:4000/docs/en/parts/motor/gm-10a/"
      } ,
  
  
      "docs-en-parts-motor-h-speed-geared-motor":  {
      "title": "High Speed Geared Motor",
      "content"	 : "High Speed Geared MotorIntroductionIt is the motor used in OLLO it is connected to CM100  and the direction of spin and the speed of spin can be adjusted through port control It can be operated as general DC motors by connecting OLLO switch and the battery box Compatibility Guide Controller CompatibilitySpecifications  Weight  15g  Dimensions  18mm x 36mm x 24mm  Gear Ratio  701  Speed  160RPM @ 1 5V  350RPM @ 3 0V  Output on both Axles  Safety Clutch installedPinout  MOT  MOT Caution Cables can may be damaged when not properly connected  i e  wrong orientation   or use of excessive force during connection Tutorials  RoboPlus Task  Please refer to Geared Motor section in the Roboplus Task Videos",
      "url": "http://0.0.0.0:4000/docs/en/parts/motor/h_speed_geared_motor/"
      } ,
  
  
      "docs-en-parts-motor-l-speed-geared-motor":  {
      "title": "",
      "content"	 : "Low Speed Geared MotorIntroductionThis motor is used in ROBOTIS DREAM LEVEL 1Compatibility Guide Controller CompatibilitySpecifications  Weight  15g  Dimensions  18mm x 36mm x 24mm  Gear Ratio  701  Speed  150RPM @ 3 7V  Output on both Axles  Safety Clutch installedPinout  MOT  MOT Caution Cables can may be damaged when not properly connected  i e  wrong orientation   or use of excessive force during connection Tutorials  RoboPlus Task  Please refer to Geared Motor section in the Roboplus Task Videos",
      "url": "http://0.0.0.0:4000/docs/en/parts/motor/l_speed_geared_motor/"
      } ,
  
  
      "docs-en-parts-motor-servo-motor":  {
      "title": "Servo Motor",
      "content"	 : "  Servo Motor     assets images parts motor servo_motor_product jpg    Introduction   introduction  It is the motor used in OLLO it is connected to CM100  and the direction of spin and the speed of spin can be adjusted through port control  If it is set to Spin Mode  it can be operated as the geared motor if it is set to Joint Mode  the motor can be moved to the designated location by setting the speed of spin Power and the value of location  It is mainly used to maintain certain angles pursuant to some conditions such as moving joints  moving steering devices  etc  Compatibility Guide   Controller Compatibility    Specifications   specifications  Weight  16g Dimensions  18mm x 36mm x 27mm with Horn  Gear Ratio  1941 Speed  85RPM @ 3 0V Position Sensor Potentiometer  Safety Clutch installed    Control Angle   controlangle  The servo motor of OLLO can control the location from 0 degree to 300 degrees  and the minimum control angle is about 0 29 degrees  300 1024   However  since the servo motor of OLLO is not as accurate as Dynamixel  and the torque is weaker than Dynamixel  it is appropriate servo motors are used for basic learning of the principles and usages not appropriate to use for the places where accurate controls are needed      assets images parts motor servo_motor_01 png    Pinout   pinout      assets images parts motor servo_motor_pinout png 1  MOT2  GND3  ADC  The current location of the motor is printed out as analog signals4  VCC5  MOT  Caution  Cables can may be damaged when not properly connected  i e  wrong orientation   or use of excessive force during connection   noticewarning   Tutorials   tutorials  RoboPlus Task  Please refer to  Servo Motor  section in the Roboplus Task  Available Addresses   Operation Mode   Speed   Position   Videos   videos  Controller Compatibility   docs en parts controller controller_compatibility  Servo Motor   docs en software rplus1 task programming_02  servomotor",
      "url": "http://0.0.0.0:4000/docs/en/parts/motor/servo_motor/"
      } ,
  
  
      "docs-en-parts-sensor-ax-s1":  {
      "title": "Integrated Sensor(AX-S1)",
      "content"	 : "Integrated Sensor AXS1 IntroductionWarning AXS1 has been discontinued   AXS1 is a sensor device  which plays the role of eyes and ears of robots   Distance of an object  Brightness of surroundings  heat  and sound detection functions are included additionally  IR remote control receptor and soundmaking functions are included   The configuration and the communication type of AXS1 are equal to AX12 ’s  but it is not operated by servo motor Specifications            Item      Specifications                  Weight      37g              Resolution      10bit 1 024               Operation Temperature      5°C    85°C              Voltage      9   12V  Recommended Voltage 11 1V               Maximum Current      40mA              Command Signal      Digital Packet              Protocol Type      Half duplex Asynchronous Serial Communication  8bit 1stop No Parity               Link  Physical       TTL Level Multi Drop  daisy chain type Connector               ID      254 ID  0 253               Communication Speed      7 843bps   1 Mbps              Feedback      Infrared Sensor  Internal Mic  Temperature  Input Voltage   IR Remocon Tx Rx Data  etc               Material      Engineering Plastic      How to CommunicateThe communication method and the hardware composition related to the communication of AXS1 are the same as Dynamixel AX series   Please refer to Dynamixel Communication on the communication method and the packet composition   Please refer to Communication Hardware Composition of AXSeries on the communication hardware Control TableControl Table consists of data regarding the current status and operation  which exists inside of Dynamixel  The user can control Dynamixel by changing data of Control Table via Instruction Packet EEPROM and RAMData in RAM area is reset to the initial value whenever the power is turned on while data in EEPROM area is kept once the value is set even if the power is turned off AddressIt represents the location of data  To read from or write data to Control Table  the user should assign the correct address in the Instruction Packet AccessDynamixel has two kinds of data Readonly data  which is mainly used for sensing  and ReadandWrite data  which is used for driving Initial ValueIn case of data in the EEPROM Area  the initial values on the right side of the below Control Table are the factory default settings  In case of data in the RAM Area  the initial values on the right side of the above Control Tables are the ones when the power is turned on Highest Lowest ByteIn the Control table  some data share the same name  but they are attached with  L  or  H  at the end of each name to distinguish the address  This data requires 16bit  but it is divided into 8bit each for the addresses  low  and  high   These two addresses should be written with one Instruction Packet at the same time EEPROM Area            Address      Data Name      Description      Access      Initial Value                  0 0x00       Model Number L       Lowest Byte of Model Number      R      13 0x0D               1 0x01       Model Number H       Highest Byte of Model Number      R      0 0x00               2 0x02       Firmware Version      Firmware Version      R                    3 0x03       ID      DYNAMIXEL ID      RW      100 0x64               4 0x04       Baud Rate      Communication Speed      RW      1 0x0x               5 0x05       Return Delay Time      Response Delay Time      RW      250 0xFA               16 0x10       Status Return Level      Select Types of Status Return      RW      2 0x02       RAM Area            Address      Data Name      Description      Access      Initial Value                  26 0X1A       Left Distance Data      The value of left IR Sensor      R                    27 0X1B       Center Distance Data      The value of central IR Sensor      R                    28 0X1C       Right Distance Data      The value of right IR Sensor      R                    29 0X1D       Light Left Data      The value of left Light Sensor      R                    30 0X1E       Light Center Data      The value of central Light Sensor      R                    31 0X1F       Light Right Data      The value of right Light Sensor      R                    32 0X20       IR Obstacle Detected      The object detected by IR      R                    33 0X21       Light Detected      Light Detected      R                    35 0X23       Sound Data      The value of current sound      R                    36 0X24       Sound Data Max Hold      The value of Max Sound      RW                    37 0X25       Sound Detected Count      The count of sound detected      RW                    38 0X26       Sound Detected Time L       Lowest byte of sound detected time      RW                    39 0X27       Sound Detected Time H       Highest byte of sound detected time      RW                    40 0X28       Buzzer Data 0      Buzzer Notes      RW                    41 0X29       Buzzer Data 1      Buzzer Ringing Time      RW                    44 0X2C       Registered      Registration of Instruction      RW      0 0X00               46 0X2E       IR Remocon Arrived      Arrival of IR Remocon Data      R      0 0X00               47 0X2F       Lock      Locking EEPROM      RW      0 0X00               48 0X30       Remocon RX Data 0      Lowest byte of received data packet      R                    49 0X31       Remocon RX Data 1      Higest byte of received data packet      R                    50 0X32       Remocon TX Data 0      Lowest byte of transmitted data packet      RW                    51 0X33       Remocon TX Data 1      Highest byte of transmitted data packet      RW                    52 0X34       IR Obstacle Detect Compare      The reference value of object detected      RW                    53 0X35       Light Detect Compare      The reference value of light detected      RW            Control Table DescriptionModel Number  0 This address stores model number of the DYNAMIXEL Firmware Version  2 This address stores firmware version of the DYNAMIXEL ID  3 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate  4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate bps       Margin of Error                  1      1M      0 000%              3      500 000      0 000%              4      400 000      0 000%              7      250 000      0 000%              9      200 000      0 000%              16      115200      2 124%              34 Default       57600      0 794%              103      19200      0 160%              207      9600      0 160%      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time  5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       Status Return Level 16 This value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the Status Packet section for Protocol 1 0 or Protocol 2 0 IR Obstacle Detect Compare ValueThe reference value is set in the estimated place where an object exists on the direction of the sensor in the IR sensor value of Dynamixel Sensor Module   If the sensor value is greater than the reference value  the bit which belongs to the sensor of IR Obstacle Detected  Address 0x20  is set to ‘1’ because the object is located within a certain distance if the sensor value is less than the reference value  the bit is set to ‘0’ since the object is not located within a certain distance IR Obstacle Detect Compare Value is assigned to two places ROM Address 0x14  and RAM Address 0x34   and when the power is turned on  the value of EEPROM is copied to RAM Light Detect Compare ValueThe reference value is set in the estimated place where a light is turned on in the lightbrightness sensor of Dynamixel Sensor Module  If the sensor value is grater than the reference value  the bit which belongs to Light Detected is set to ‘1’ because the light is brighter than a certain brightness if the sensor value is less than the reference value  the bit is set to ‘0’ since the light is not brighter than a certain brightness Light Detect Compare Value is assigned to two places ROM Address 0x15  and RAM Address 0x35   and when the power is turned on  the value of EEPROM is copied to RAM IR Distance Sensor Value  Left Center Right It is the IR sensor value of Dynamixel Sensor Module for distance measurement   If the infrared rays are emitted from the IRemitting part of AXS1  the emitted infrared rays are reflected after hitting walls or objects   The amount of the reflected rays is measured by the IRreceiving part of AXS1  and the higher value is acquired  the closer walls and objects are located   The measured values have the range of 0 255 only 255 may be appeared if any object or wall is located within a certain distance Since it is an IRmesurement type  reflection ratio may vary depending on the color and the surface texture of walls and objects the measured value can be different from the expected value Light Brightness Sensor Value  Left Center Right It is the light detection sensor value of Dynamixel Sensor Module  The concept of this sensor is similar to IR sensor value’s  but it is measured without turning on the IRemitting part it can measure only infrared rays from a light   For that reason  the light brightness sensor value can be measured from the light which emits a lot of infrared rays such as lightbulb  and also lights from a lighter or candles can be measurede   The measured value has the range of 0 255 IR Obstacle DetectedIf IR Distance Sensor value of AXS1 is greater than the reference value  a certain bit of object detection value is set to ‘1’  judging an object is detected Please refer to the table below on the bits each sensor represents             Bit      Name                  Bit 2      Object Light are detected by the right sensor              Bit 1      Object Light are detected by the central sensor              Bit 0      Object Light are detected by the left sensor      Light DetectedIf light brightness sensor value of AXS1 is greater than the reference value  a certain bit of light detected value is set to ‘1’  judging a light is detected The bit each sensor represents is equal to the object detection value   See Address 0x20 above Sound LevelThe level of the sound which is coming into the mic of AXS1 is measured and converted into numerical value  Because the sound level is fulctuated up and down as below  if there is no sound  the numerical value of 127 128  0x7F 0x80  is got  and it gets closer to 0 or 255  0xFF  as the sound gets louder  The sound level is entered about 3800 times per second Maximum Sound LevelThe loudest sound level is saved separately among the sound levels of AXS1   That is  if current sound level is louder than the saved maximum sound level  the current sound is copied as maximum sound level Therefore  the sound level lower than 128 is actually ignored  and it is assumed that the loudest sound level at the moment is accumulated and saved  See the following picutre for better understanding Be careful if the maximum sound leve becomes 255  0xFF  while being accumulated  the maximum sound level remains 255 because it cannot exceed 255   Therefore  ‘0’ must be written on the maximum sound level part to measure the maximum sound level Sound Detected CountAXS1 has a function to count 1 time if a certain level of sound is made   For instance  it is possible to count the number of claps   However  to prevent 1 clap from being counted as multiple claps  once claps are counted one time  the claps are not counted for 80msec   After the last count  the counted value is saved as sound detected count in 800msec To recognize the time when the sound detected count is increased  count the number internally  and then save the value in the sound detected count in 800msec while initializing the internal count as ‘0 ’  See the following picture for better understanding Sound Detected TimeAXS1 has a function to save the time of the moment whenever sound detected count is done   The function is provided to detect the direction of sounds  and at least 2 units of AXS1 are necessary   The function is based on the difference of soundincoming time to each of AXS1 Mics using the speed of sound  The speed of sound is about 343m sec ot 20 degrees of Celsius  Sound detected time is counted internally  Repeating the count of 0 65535   and the currently counted value is saved when sound detected count is increased   Thus  after initializing sound detected time simultaneously to ‘0’ using Broadcasting command by separating 2 units of AXS1 properly from each other  if sounds are made  the time difference between the two AXS1s occurs pursuant to the directions of sounds If the sound source is in the front  the sound is detected almost at the same time  but if the sound source is not in the front  the time difference occurs pursuant to the apart distance of AXS1   The direction of sound sources can be roughly estimated using the principle above   See the following picture for better understanding The sound counted time of AXS1 is counted about every 4 096 msec and it is counted again from ‘0 ’  Therefore  calculating by the speed of sound  the sound moves about 0 02mm per count  and the distance between two AXS1s must be within 70cm   For example  if the two AXS1s are 10cm apart  in case of using the method above  the difference of sound detected time between two AXS1s may vary up to 5000    If the difference is about 5000  it means the sound source is located at 90 degrees left or right of the two AXS1s Buzzer NotesA buzzer is installed in AXS1  and simple beep sounds can be made   Total 52 musical notes can be made in Buzzer Notes  and various notes can be made because there are whole tones and halftones in each octave   The values of Buzzer Notes are assigned as the table below Buzzer Ringing TimeAXS1 has a function to control the buzzer alarming time   It is possible to control by the unit of 0 1 second  and the minimum length is set to 0 3 seconds the time can be extended up to maximum 5 seconds   That is  if 0 3 is entered  the buzzer rings for 0 3 seconds if the value over 50 is entered  the buzzer rings only for 5 seconds regardless of the value   Moreover  if the ringing is finished  the buzzer ringing time is automatically initialized to ‘0 ’There are 2 special buzzer ringing time functions for AXS1   Firstly  the buzzer can be ringing without stopping   If 254 is entered in buzzer ringing time  and the number of desired musical notes is entered  the buzzer rings without stopping   To stop the ringing  ‘0’ is entered in buzzer ringing time Secondly  the buzzer can play special melodies   If 255 is entered in buzzer ringing time  and then the value 0 26 is entered in buzzer notes  27 melodies corresponding to each number can be played  If the ringing is finished  the buzzer ringing time is automatically initialized to ‘0 ’Registered Instruction            Value      Meaning                  0      There are no commands transmitted by REG_WRITE              1      There are commands transmitted by REG_WRITE       Note If ACTION command is executed  the value is changed into 0 Arrival of New Remocon DataIR remote controller communication is possible among other AXS1s since IR remote controller sensor is installed on the front of AXS1   The data can be transmitted by 2 byte unit IR remocon data can be transmitted to any direction since IRemitting parts are installed in 3 directions front left right  but the IR remocon data can be received only in limited angle because IR remocon sensor is installed only on the front If IR remocon data is received on the sensor  the new remocon data arrival value is changed into ‘2’ it means 2 byte is received   If the received remocon data are read  it is automatically initialized to ‘0 ’Lock            Value      Meaning                  0      EEPROM area can be modified               1      EEPROM area cannot be modified       Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 Received Remocon DataThe received data is saved in IR remocon sensor   If this value is read  the new remocon data arrival value is automatically initialized to ‘0 ’Remocon Data To Be TransmittedThe remocon data to be transmitted through the IRemitting part is written   The remocon data is transmitted as soon as the value of 2 bytes is written IR Obstacle Detect Compare ValueIR Obstacle Detect Compare Value of Address 0x14 is saved in RAM area of Control Table Currently  it is not possible to detect normally in short distance e g  within 5cm distance  the maximum value is always acquired  since  in case of IR Sensor of AXS1  infrared rays are emitted strongly to detect in long distance Therefore  AXS1 supports lowsensitive mode for acurate detection in short distance if ‘0’ is entered in IR Obstacle Detect Compare Value  it is converted to lowsensitive mode   In lowsensitive mode  the long distance sensor performance is not satisfactory  but accurate and sensitive detection is possible in short distance because it is not saturated to the maximum value Light Detect Compare ValueLight Detect Compare Value of Address 0x15 is saved in RAM Area of Control Table How to AssembleThe types of AXS1 option frames are as follows  The frame of AXS1 is compatible with the frame of AX12 12  ReferencesDrawings",
      "url": "http://0.0.0.0:4000/docs/en/parts/sensor/ax-s1/"
      } ,
  
  
      "docs-en-parts-sensor-cs-10":  {
      "title": "Color Sensor(CS-10)",
      "content"	 : "Color Sensor CS10 Introduction  This sensor detects colors   It can distinguish 6 different colors red  blue  green  yellow  white  and black   When objects are too close  less than 6 mm  or too far  more than 18 mm  the color sensor is unable measure values properly Compatibility Guide Controller CompatibilitySpecifications  Weight  4g  Dimensions  24mm x 18mm x 12mm  Sensing Range  6mm   18mmPinout  SIG1  Color singnal 1  GND  ADC  Output of color intensity analog voltage  VCC   3 3V    SIG2  Can turn on the LED by sending High Signals            SIG1      SIG2      Description                  LOW      LOW      RED color intensity              LOW      HIGH      GREEN color intensity              HIGH      LOW      BLUE color intensity              HIGH      HIGH      insignificant value      Caution Cables can may be damaged when not properly connected  i e  wrong orientation   or use of excessive force during connection Caution Make connections to the controlled while unpowered  Making connections while the controller is powered may cause it to malfunction or and damage Videos",
      "url": "http://0.0.0.0:4000/docs/en/parts/sensor/cs-10/"
      } ,
  
  
      "docs-en-parts-sensor-dms-80":  {
      "title": "Distance Sensor(DMS-80)",
      "content"	 : "Distance Sensor DMS80 Introduction  DMS80 is used to detect objects or walls within a fixed distance   The sensor is not affected by color as much as IR Sensors enabling it to measure precise distance Compatibility Guide Controller CompatibilitySpecifications  Weight  4 4g  Detecting Distance  10   80cm  Recommended Voltage Suppy  4 5   5 5VPinout  VCC 5V   GND  ADC Outputs the distance sensing value in analog signal Sensor Output  This is a graph shows the analog output voltage on RoboPlus based on the distance changes from white paper which has a reflection percentage of 90% and gray paper which has a reflection percentage of 18%   Even if the color and reflection percentage change  you can see the output value for the distance barely changes Tutorials  RoboPlus Task  Please refer to DMS80 section in the Roboplus Task ",
      "url": "http://0.0.0.0:4000/docs/en/parts/sensor/dms-80/"
      } ,
  
  
      "docs-en-parts-sensor-gs-12":  {
      "title": "Gyro Sensor(GS-12)",
      "content"	 : "Gyro Sensor GS12 Introduction  Measures angular velocity   Calculates which side the robot is tilted or is getting more power   Maintains the robot’s balance and can be used for other movement applications Compatibility Guide Controller CompatibilitySpecifications  Weight  2 8g  Size  23mm x 23mm x 10mm  Working Temperature  40°C   85°C  Angular Velocity Calculation Range  300° s   300° s  Bandwidth  140Hz  Sensitivity  3 33mV dps  Recommended Voltage Supply  4 5   5 5 VPinout  X Axis Pin          ADC  Outputs the angular velocity into analog signals       GND      VCC   5V          Y Axis Pin          VCC   5V        GND      ADC  Outputs the angular velocity value into analog signals       Sensor Output            Item      MAX             MIN                  Output Value      455      250      45              Angular Velocity       300° s      0° s      300° s              Voltage      2 23 V      1 23V      0 23V        Standard VCC Voltage Value is 5V   When the angular velocity is 0  when still   the output value is approximately 250  When it suddenly turns to one axis  the max value output is 455 and the minimum 45  showing a 300° s angular velocity  Here the mark or sign represents direction   Depending on the temperature  there may be 1% difference   There may be a difference in value depending on the standard VCC voltage value and circuit noise  Thus  we recommend to average several values before use  When sampling  the robot must not be moving        You can READ the value using the User’s Device Parameter in RoboPlus Task             You may sample it out like below  It reads 10 values per 0 1 sec and makes an average  This value can be used as the standard value       Tutorials  RoboPlus Task  Please refer to User’s Device Parameter section in the Roboplus Task ",
      "url": "http://0.0.0.0:4000/docs/en/parts/sensor/gs-12/"
      } ,
  
  
      "docs-en-parts-sensor-ir-array":  {
      "title": "IR Sensor Array",
      "content"	 : "IR Sensor ArrayIntroduction  The IR sensor array is a device with 7 mounted infrared sensors  Each IR sensor is capable of detecting black and white colors  The array is capable of emitting sounds   The IR array can perform detection at proper distances  The infrared sensors transmitters receivers  have optimal operating range of 05CM Specifications            Item      Specifications                  Weight      18g              Resolution      10bit 1 024               Operation Temperature      5°C    85°C              Voltage      7   15V  Recommended Voltage 11 1V               Maximum Current      100mA              Command Signal      Digital Packet              Protocol Type      Half duplex Asynchronous Serial Communication  8bit 1stop No Parity               Link  Physical       TTL Level Multi Drop  daisy chain type Connector               ID      254 ID  0 253               Communication Speed      7 843bps   1 Mbps              Feedback      Input Voltage  IR Sensor Data x 7      How to UseLEDThe LEDs will be turned on if the sensor value is smaller than the sensor value for black color detection Black Color Detecting CalibrationThe 3Pin connector provides power pressing the right button initializes the array with set threshold values  Press the button one more time the arrays halts autocalibration and reverts back to set threshold values  Set values    MAX_VALUE   2   MIN_VALUE    3 where MAX_VALUE is max value of sensors between the first and second button presses  and MIN_VALUE is the min value of sensors between the first and second button presses ResetPress the left button once and the IR array will reset via the supplied 3Pin cable  Note that this will not change set black detection values Communications ProtocolIR array communications and communicationsrelated hardware are shown here   Comm protocal  packet component please refer to Dynamixel comm   Comm hardware refer to the AX series Control TableControl Table consists of data regarding the current status and operation  which exists inside of Dynamixel  The user can control Dynamixel by changing data of Control Table via Instruction Packet EEPROM and RAMData in RAM area is reset to the initial value whenever the power is turned on while data in EEPROM area is kept once the value is set even if the power is turned off AddressIt represents the location of data  To read from or write data to Control Table  the user should assign the correct address in the Instruction Packet AccessDynamixel has two kinds of data Readonly data  which is mainly used for sensing  and ReadandWrite data  which is used for driving Initial ValueIn case of data in the EEPROM Area  the initial values on the right side of the below Control Table are the factory default settings  In case of data in the RAM Area  the initial values on the right side of the above Control Tables are the ones when the power is turned on Highest Lowest ByteIn the Control table  some data share the same name  but they are attached with  L  or  H  at the end of each name to distinguish the address  This data requires 16bit  but it is divided into 8bit each for the addresses  low  and  high   These two addresses should be written with one Instruction Packet at the same time EEPROM Area            Address      Data Name      Description      Access      Initial Value                  0 0x00       Model Number L       Lowest Byte of Model Number      R      74 0x4A               1 0x01       Model Number H       Highest Byte of Model Number      R      1 0x01               2 0x02       Firmware Version      Firmware Version      R                    3 0x03       ID      DYNAMIXEL ID      RW      100 0x64               4 0x04       Baud Rate      Communication Speed      RW      1 0x0x               5 0x05       Return Delay Time      Response Delay Time      RW      250 0xFA               6 0x06       IR Threshold_L 1      Low Byte of IR Sensor  1 Threshold      RW      16 0x10               7 0x07       IR Threshold_H 1      High Byte of IR Sensor  1 Threshold      RW      3 0x03               8 0x08       IR Threshold_L 2      Low Byte of IR Sensor  2 Threshold      RW      16 0x10               9 0x09       IR Threshold_H 2      High Byte of IR Sensor  2 Threshold      RW      3 0x03               10 0x0A       IR Threshold_L 3      Low Byte of IR Sensor  3 Threshold      RW      16 0x10               11 0x0B       IR Threshold_H 3      High Byte of IR Sensor  3 Threshold      RW      3 0x03               12 0x0C       IR Threshold_L 4      Low Byte of IR Sensor  4 Threshold      RW      16 0x10               13 0x0D       IR Threshold_H 4      High Byte of IR Sensor  4 Threshold      RW      3 0x03               14 0x0E       IR Threshold_L 5      Low Byte of IR Sensor  5 Threshold      RW      16 0x10               15 0x0F       IR Threshold_H 5      High Byte of IR Sensor  5 Threshold      RW      3 0x03               16 0x10       Status Return Level      Select Types of Status Return      RW      2 0x02               17 0x11       IR Threshold_L 6      Low Byte of IR Sensor  6 Threshold      RW      16 0x10               18 0x12       IR Threshold_H 6      High Byte of IR Sensor  6 Threshold      RW      3 0x03               20 0x14       IR Threshold_L 7      Low Byte of IR Sensor  7 Threshold      RW      16 0x10               21 0x15       IR Threshold_H 7      High Byte of IR Sensor  7 Threshold      RW      3 0x03       RAM Area            Address      Data Name      Description      Access      Initial Value                  24 0x18       IR Data_L 1      Low Byte of IR Sensor  1 Value      R                    25 0x19       IR Data_H 1      High Byte of IR Sensor  1 Value      R                    26 0x1A       IR Data_L 2      Low Byte of IR Sensor  2 Value      R                    27 0x1B       IR Data_H 2      High Byte of IR Sensor  2 Value      R                    28 0x1C       IR Data_L 3      Low Byte of IR Sensor  3 Value      R                    29 0x1D       IR Data_H 3      High Byte of IR Sensor  3 Value      R                    30 0x1E       IR Data_L 4      Low Byte of IR Sensor  4 Value      R                    31 0x1F       IR Data_H 4      High Byte of IR Sensor  4 Value      R                    32 0x20       IR Data_L 5      Low Byte of IR Sensor  5 Value      R                    33 0x21       IR Data_H 5      High Byte of IR Sensor  5 Value      R                    34 0x22       IR Data_L 6      Low Byte of IR Sensor  6 Value      R                    35 0x23       IR Data_H 6      High Byte of IR Sensor  6 Value      R                    36 0x24       IR Data_L 7      Low Byte of IR Sensor  7 Value      R                    37 0x25       IR Data_H 7      High Byte of IR Sensor  7 Value      R                    40 0X28       Buzzer Data 0      Buzzer Notes      RW                    41 0X29       Buzzer Data 1      Buzzer Ringing Time      RW                    42 0x2A       Auto Threshold      Set Automatic Object Detection Mode      RW      0 0x00               43 0x2B       IR Obstacle Detected      IR Object Detection      R                    44 0X2C       Registered      Registration of Instruction      RW      0 0X00               47 0X2F       Lock      Locking EEPROM      RW      0 0X00               48 0X30       IR Threshold_L 1      Low Byte of IR Sensor  1 Set Value      RW      16 0x10               49 0X31       IR Threshold_H 1      High Byte of IR Sensor  1 Set Value      RW      3 0x03               50 0X32       IR Threshold_L 2      Low Byte of IR Sensor  2 Set Value      RW      16 0x10               51 0X33       IR Threshold_H 2      High Byte of IR Sensor  2 Set Value      RW      3 0x03               52 0X34       IR Threshold_L 3      Low Byte of IR Sensor  3 Set Value      RW      16 0x10               53 0X35       IR Threshold_H 3      High Byte of IR Sensor  3 Set Value      RW      3 0x03               54 0X36       IR Threshold_L 4      Low Byte of IR Sensor  4 Set Value      RW      16 0x10               55 0X37       IR Threshold_H 4      High Byte of IR Sensor  4 Set Value      RW      3 0x03               56 0X38       IR Threshold_L 5      Low Byte of IR Sensor  5 Set Value      RW      16 0x10               57 0X39       IR Threshold_H 5      High Byte of IR Sensor  5 Set Value      RW      3 0x03               58 0X3A       IR Threshold_L 6      Low Byte of IR Sensor  6 Set Value      RW      16 0x10               59 0X3B       IR Threshold_H 6      High Byte of IR Sensor  6 Set Value      RW      3 0x03               60 0X3C       IR Threshold_L 7      Low Byte of IR Sensor  7 Set Value      RW      16 0x10               61 0X3D       IR Threshold_H 7      High Byte of IR Sensor  7 Set Value      RW      3 0x03       Control Table DescriptionModel Number  0 This address stores model number of the DYNAMIXEL Firmware Version  2 This address stores firmware version of the DYNAMIXEL ID  3 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate  4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate bps       Margin of Error                  1      1M      0 000%              3      500 000      0 000%              4      400 000      0 000%              7      250 000      0 000%              9      200 000      0 000%              16      115200      2 124%              34 Default       57600      0 794%              103      19200      0 160%              207      9600      0 160%      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time  5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       IR Detecting ThresholdSet black values for IR  1    7This value is referred when detecting black and white color             Values      Black detection      LED                  Sensor value  lt  Threshold      BIT 1      ON              Sensor value  gt set value      BIT 0      OFF      When the sensor is powered  the value in EEPROM area will be used to initialize RAM area Threshold IR sensor values  1   7 If infrared light is emitted with enough intensity it will reflect off walls  objects  the receiver will detect the reflected light  Light reflected from bright walls and objects will be read as a high value  Measured value range is 01 023 Infrared light measured from walls  objects  textures may be output differently including a difference in measurement Buzzer NotesA buzzer is installed in AXS1  and simple beep sounds can be made   Total 52 musical notes can be made in Buzzer Notes  and various notes can be made because there are whole tones and halftones in each octave   The values of Buzzer Notes are assigned as the table below Buzzer Ringing TimeAXS1 has a function to control the buzzer alarming time   It is possible to control by the unit of 0 1 second  and the minimum length is set to 0 3 seconds the time can be extended up to maximum 5 seconds   That is  if 0 3 is entered  the buzzer rings for 0 3 seconds if the value over 50 is entered  the buzzer rings only for 5 seconds regardless of the value   Moreover  if the ringing is finished  the buzzer ringing time is automatically initialized to ‘0’ There are 2 special buzzer ringing time functions for AXS1   Firstly  the buzzer can be ringing without stopping   If 254 is entered in buzzer ringing time  and the number of desired musical notes is entered  the buzzer rings without stopping   To stop the ringing  ‘0’ is entered in buzzer ringing time Secondly  the buzzer can play special melodies   If 255 is entered in buzzer ringing time  and then the value 0 26 is entered in buzzer notes  27 melodies corresponding to each number can be played  If the ringing is finished  the buzzer ringing time is automatically initialized to ‘0’ Automatic set black detection modeMode for automatic black detection setup from start to finish paramenters  From ‘0’ to ‘1’ starts from ‘1’ to ‘0’ finishes In the IR array if each IR sensor detected black value is lower than the set black valuethe values will be assigned as shown below the LED turns on             BIT      Name                  Bit 0      Black detection for IR sensor  1              Bit 1      Black detection for IR sensor  2              Bit 2      Black detection for IR sensor  3              Bit 3      Black detection for IR sensor  4              Bit 4      Black detection for IR sensor  5              Bit 5      Black detection for IR sensor  6              Bit 6      Black detection for IR sensor  7      Registered Instruction            Value      Meaning                  0      There are no commands transmitted by REG_WRITE              1      There are commands transmitted by REG_WRITE       Note If ACTION command is executed  the value is changed into 0 Lock            Value      Meaning                  0      EEPROM area can be modified               1      EEPROM area cannot be modified       Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 ",
      "url": "http://0.0.0.0:4000/docs/en/parts/sensor/ir-array/"
      } ,
  
  
      "docs-en-parts-sensor-irss-10":  {
      "title": "IR Sensor(IRSS-10)",
      "content"	 : "IR Sensor IRSS10 Introduction  It uses a method which produces infrared lights and calculates the amount reflected back   Infrared light is not suitable to measure distance between objects because even though two objects are at the same distance  the reflected amount can be varied depending on the color and brightness Compatibility Guide Controller CompatibilitySpecifications  Weight  4g  Dimensions  24mm x 18mm x 12mmPinout  SIG1  Maintains low signal  GND  ADC  Outputs the value detected from IR receiver into analog signals  VCC   3 3V    SIG2  Can turn on the LED by sending High SignalsCaution Cables can may be damaged when not properly connected  i e  wrong orientation   or use of excessive force during connection Caution Make connections to the controlled while unpowered  Making connections while the controller is powered may cause it to malfunction or and damage Sensor Output  Below is a graph representing a rough estimate of the sensor value’s changes from the white object’s distance  The sensor’s value is subject to change depending on the object’s color and surrounding environment   The IR sensor is divided into a receiver and transmitter  When an object is too close  the angle where the reflected infrared light comes is not even making it difficult to know the area which the sensor value decreases  Also  it can barely detect object further than 15cm Tutorials  RoboPlus Task  Please refer to  IR Sensor  section in the Roboplus Task Videos",
      "url": "http://0.0.0.0:4000/docs/en/parts/sensor/irss-10/"
      } ,
  
  
      "docs-en-parts-sensor-mgss-10":  {
      "title": "Magnetic Sensor(MGSS-10)",
      "content"	 : "Magnetic Sensor MGSS10 Introduction  This sensor detects magnetism   The sensor behaves as a touch sensor and detects a magnet close or far   Place the magnet approximately 5 mm in front of the sensor for touchsensorlike behavior Compatibility Guide Controller CompatibilitySpecifications  Weight  3g  Dimensions  24mm x 18mm x 12mmSensing Range  The maximum detectable distance of the magnet’s N S pole and the front of the sensor  1 5CmCaution Won’t be detected if the sensing distance is shorter than 5mmPinout  Not used  GND  ADC  magnetismdetection status  VCC  3 3V   Not usedCaution Cables can may be damaged when not properly connected  i e  wrong orientation   or use of excessive force during connection Caution Make connections to the controlled while unpowered  Making connections while the controller is powered may cause it to malfunction or and damage Tutorials  Reading Data is similar to that of IR sensor   RoboPlus Task  Please refer to IR Sensor section in the Roboplus Task Videos",
      "url": "http://0.0.0.0:4000/docs/en/parts/sensor/mgss-10/"
      } ,
  
  
      "docs-en-parts-sensor-pir-10":  {
      "title": "Passive IR Sensor(PIR-10)",
      "content"	 : "Passive IR Sensor PIR10 Introduction  Motionsensing sensor   Object motion sensing occurs within the sensor rangeCompatibility Guide Controller CompatibilitySpecifications  Weight  10g  Dimensions  18mm x 30mm x 8mm  Sensing Range  20cm   2m  Sensing Angle  45°   45°Pinout  Not used  GND  ADC  Sensor output  for moving object   VCC   3 3V    Not usedCaution Cables can may be damaged when not properly connected  i e  wrong orientation   or use of excessive force during connection Caution Make connections to the controlled while unpowered  Making connections while the controller is powered may cause it to malfunction or and damage ",
      "url": "http://0.0.0.0:4000/docs/en/parts/sensor/pir-10/"
      } ,
  
  
      "docs-en-parts-sensor-tps-10":  {
      "title": "Temperature Sensor(TPS-10)",
      "content"	 : "  Temperature Sensor TPS10      assets images parts sensors tps10_product jpg    Introduction   introduction  Sensor measures changes in temperature Sensor activates when heat is applied to object Compatibility Guide   Controller Compatibility    Specifications   specifications  Weight  18g Length  1M including cable  Sensing Temperature Range  20 degC   120 degC   Pinout   pinout 1  Not used2  GND3  ADC  Sensor output  heatsensing 4  VCC   3 3V  5  Not used Caution  Cables can may be damaged when not properly connected  i e  wrong orientation   or use of excessive force during connection   noticewarning Caution  Make connections to the controlled while unpowered  Making connections while the controller is powered may cause it to malfunction or and damage   noticewarning   Videos   videos  Controller Compatibility   docs en parts controller controller_compatibility ",
      "url": "http://0.0.0.0:4000/docs/en/parts/sensor/tps-10/"
      } ,
  
  
      "docs-en-parts-sensor-ts-10":  {
      "title": "Touch Sensor(TS-10)",
      "content"	 : "  Touch Sensor TS10      assets images parts sensors touch jpg    Introduction   introduction  This is a switch like the sensor used with OLLO to sense touch by other objects  Can be used as a bumper on cars to detect impact  Compatibility Guide   Controller Compatibility    Specifications   specifications  Weight  4g Dimensions  24mm x 18mm x 15mm   Pinout   pinout      assets images parts sensors ts10_pinout png 1  Not used2  GND3  ADC  Outputs status of switch  i e  Pressed or Not Pressed4  VCC5  Not used Caution  Cables can may be damaged when not properly connected  i e  wrong orientation   or use of excessive force during connection   noticewarning   Tutorials   tutorials  RoboPlus Task  Please refer to  Touch Sensor  section in the Roboplus Task    Videos   videos  Controller Compatibility   docs en parts controller controller_compatibility  Touch Sensor   docs en software rplus1 task programming_02  touchsensor",
      "url": "http://0.0.0.0:4000/docs/en/parts/sensor/ts-10/"
      } ,
  
  
      "docs-en-platform-manipulator-h-introduction":  {
      "title": "Manipulator-H",
      "content"	 : "ManipulatorHIntroduction  This manual applies to the Dynamixel PRObased Robotis Manipulator   All parameters in this manual are based on default values   The manipulator’s configuration is provided  The ArmSDK is based on Windows7 and Visual Studio 2010   It is strongly recommended with proficiency with Dynamixel PRO and C     The units utilized in the ArmSDK are in radians  rad  and millimeters  mm    Modifying the wiring and components or performances not stated on this guide may result on adverse operations   This manual utilizes the term arm  Manipulator  and robot interchangeably to describe product  The guide also may refer to Dynamixel Pro actuators to simply Dynamixel  servo  motor  or actuator Last Updated  5 November  2014Safety InformationDANGERInformation appearing in a DANGER concerns the protection of personnel from the immediate and imminent hazards that  if not avoided  will result in immediate  serious personal injury or loss of life in addition to equipment damage   Keep away from the robot while its moving    Do not touch with the robot with wet hands   Turn off power of the robot whenever robot is problematic WARNINGInformation appearing in a WARNING concerns the protection of personnel and equipment from potential hazards that can result in personal injury or loss of life in addition to equipment damage   Setup robot in an environment low on dust and humidity   The robot must always be attached to the based when powered on   The robot wiring must be checked prior to powering on   The robot connection to power supplly must be check prior to powering on   Do not change wiring on Robotis Manipulator while powered on CAUTIONInformation appearing in a CAUTION concerns the protection of personnel and equipment  software  and data from hazards that can result in minor personal injury or equipment damage   Keep robot’s workspace clear of object   Ensure wiring is not tangled up on every joint   Make sure USB2Dynamixel and PC does not interfere with the robot’s movingPackage Contents            Name      Quantity                  Manipulator      1              USB2Dyanmixel      1              4P Cable 500mm       2              Power Cable 1 200mm       2              4P expansion hub      1              Power expansion hub      1              Gripper optional       1              Support optional       2              Base Plate optional       1              3x8 wrench bolt      20              3x12 wrench bolt      20      LayoutDimension of ManipulatorHDimension of ManipulatorLWiring  The diagram above illustrates joints 1 6 connected in daisychain  serial  configuration with 4P Cable   Joint 1  labeled as 1st  connects to USB2Dynamixel via 4P Cable   USB2Dynamixel connects to PC via USB hub   Dynamixel Pro is powered from a a power supply via power expansion hub   Joints 5 and 6  model L42  10  S300 – R  are not separately powered instead power comes from the same 4P Cable   You may obtain more 4P or Power Cables via ROBOTIS or see section 2 2 Preparation  ii  Cable   Please refer to 2 1 Installation of Manipulator for more info Specifications            Item      Description                  DOF      6 DOF              Payload      3kg              Operating voltage      24V              Resolution      Joint 1  π rad    π rad    251000   251000  pulse Joint 2  π rad    π rad    251000   251000  pulse Joint 3  π rad    π rad    251000   251000  pulse Joint 4  π rad    π rad    251000   251000  pulse Joint 5  π rad    π rad    151875   151875  pulse Joint 6  π rad    π rad    151875   151875  pulse               Dynamixel ProModel Name      Joint 1  2  H54200S500RJoint 3  4  H54100S500RJoint 5  6  H4220S300R              Operating Range      Joint 1  π rad    π rad Joint 2  π 2 rad    π 2 rad Joint 3  π 2 rad    3π 4 rad Joint 4  π rad    π rad Joint 5  π 2 rad    π 2 rad Joint 6  π rad    π rad               Default ID      Joint 1  ID1   Joint 2  ID2   Joint 3  ID3  Joint 4  ID4   Joint 5  ID5   Joint 6  ID6               Motor type      Brushless DC Servo H54 Series  Coreless DC Motor H42 Series               Position sensor type      Absolute Encoder for Homing  Incremental Encoder for Control               Communications      RS485      DH Configuration  DH Parameter            Link      Link Length mm       Link Twist rad       Joint Offset mm       Joint Angle rad       DXL Angle rad                   1      0      π 2      0      0      0              2      265 69      0      0      0                    3      30      π 2      0      0                    4      0      π 2      258      0      0              5      0      π 2      0      0      0              6      0      0      0      0      0      Home PositionThe diagram below shows the home position of the Dynamixel PROs from Robotis Manipulator Getting StartedPrerequisite  The ArmSDK is based on Window 7 OS and Visual Studio 2010   The ArmSDK trajectory is generated from the MotionPlay class’ instance and utilizes QueryPerformanceCounter  This requires the use of a thread  in which sharing said thread may reach to 100% It is highly recommended your PC is at least dualcorebased   The Numerical IK implements Damped Least Square Method to reach target by acquiring each joint’s angle  This allows joints to go from initial position to a point and then return to its initial pose This will allow you to perform tests to the Manipulator   Allow sufficient workspace prior to setup by clearing objects in the arm’s vicinity   Always ensure the Manipulator is properly fixed to the base plate prior to operations otherwise arm movements can cause damage and physical injury   Supply power to the Manipulator after making sure all cables are properly connected  While powered on do not touch the cables as it may cause erroneous operations or and damage   When handling the Manipulator do so carefully as not to have your fingers stuck in the frames   If the Manipulator operates erroneously quickly cut off power by turning the power supply off   While the Manipulator is in operation keep out of its workspace ensure no objects enter the workspace during operations PreparationPower SupplyThe Manipulator requires 24V for operations  Ensure the power supply is capable of supplying 24V and 15A or higher 4P CableThe 4P Cable connects the Manipulator and USB2Dynamixel Power CableThe power cable supplies power to the Manipulator For additional power or 4P cables contact ROBOTIS or obtain them with the specifications listed above  USB2DynamixelThe USB2Dynamixel sends ArmSDK commands to the Manipulator  Connect the USB2Dynamixel to the PC via USB hub Product AssemblyNote The content below is based on an optional base plate and differs from the actual base plate   Rest and fix joint 1 of the Manipulator       The photo on the left is the external wiring for the arm  Label 1 shows a pair of 4P cables and power connector these connect to joint 1 as shown on the right picture         Label 2 shows a 4P connector and 4 power connectors and these connect to the power expansion hub and the 4P cable connects to the extension     Once connections are complete fix the arm to the base plate as shown on the photo above  The joint fixed to the plate is joint 1   Connect USB2Dynamixel to the hub with 4P cable connect another port of the 4P hub to the extension Caution Connect the USB2Dynamixel to the PC via USB hub  The USB hub acts as an isolator to protect the PC from any possible unexpected surges caused by arm action USB2Dynamixel Setting            Communication      Description                  TTL      AX  3pin MX communicate with 3pin Dynamixel              RS485      RX  4pin MX and Pro communicate with 4pin Dynamixel              RS232      CM5  CM510 communicate with these controllers  Communicate with other RS232 devices      Note The manipulator is based on RS485 communications so make sure to set the dongle to 485 Manipulator Test  Test the arm with Dynamixel Wizard to check for any anomalies  DynamixelWizard is included in RoboPlus suite  RoboPlus can be downloaded from ROBOTIS home page’s Support  gt Downloads http  www robotis com xe download  Caution Do NOT download RoboPlus v2 0  Use RoboPlus v1 0 for ManipulatorH       Install and run RoboPlus click on Dynamixel Wizard button to start Dynamixel Wizard       Operating the ManipulatorDanger Before starting Dynamixel Wizard ensure the arm is fixed to the base plate then extend the arm  Otherwise it may cause physical harm       USB2Dynamixel to the PC after wiring is complete  From the PC check the COM port number of USB2Dynamixel                 Select the Port Settings tab and click on the Advanced button gt change the latency time from 16  default  to 1   After changing the COM port settings supply the 24V to the arm  of course  this means wiring is complete  Caution Always ensure before powering on  While power is on do not change wires otherwise it may cause undesired operations       The picture on the left is the COM port number of USB2Dynamixel  which should be connected to the arm   Click on the   to continue            Once connected make sure that 1000000bps box is checked and DXL 2 0 is selected  Then click on Search  The arm’s default baud rate is 1 Mbps                 Once search is complete the arm’s components  Dynamixel PROs  are listed on the left  Click on an individual Dynamixel PRO to display the contents of its Control Table                 Dynamixel Pro will only move  operate  when Torque Mode is on  So always make sure the Torque Mode is on prior to sending moving commands Torque Enable is located on address number 562  A value of 1 means on and 0 means off                         Turn ‘Torque Enable’ on to all joints  The pose of the arm will become rigid  check by applying a small force   Afterwards click on joint 6         Now verify the arm moves properly by changing Goal Position  Move the end effector  joint 6   90 degrees To move joint 6 to  90 degrees set Goal Position of the Dynamixel PRO model H4220S300R to 75938 or L4210S300R to 1024   Once Goal Position has been set visually verify that joint 6 has rotated 90 degrees   To actually get Dynamixel PRO to move to its respective Goal Position  click on the Apply button after setting the value  If there is no movement  make sure Torque Enable is turned on  set to 1        Set Goal Position back to 0 to set position to its original position         Click on ID  Set the Goal Position to 1000  500 for L42 model    To actually get Dynamixel PRO to move to its respective Goal Position  click on the Apply button after setting the value  If there is no movement  make sure Torque Enable is turned on  set to 1    Set Goal Position back to 0 to set position to its original position    Do the same procedure for joint 2 through 6 Goal Position Values with Respect to Rotation  Goal Position value determines the rotational position of Dynamixel PRO             Model Name      Relationship between angle deg  and position value                  H54200S500RH54100S500R      180   180  deg  → 251000   251000              H4220S300R      180   180  deg  → 151875   151875              L5450S500R      180   180  deg  → 125700   125700              L5430S500R      180   180  deg  → 144180   144180              L4220S300R      180   180  deg  → 2048   2048      Manipulator SDK      Preparation Before using Robotis Manipulator SDK The following are prerequisites for the ArmSDK Eigen Package http  eigen tuxfamily org  version 3 0 6 or Later         Installation Package          Download and unzip Eigen Package               Start Visual Studio go to Project Properties  gt VC   Directories  gt Include Directories set Eigen’s source directory                                     Repeat procedure  i   ii  to include the examples and include directories       Once preparations are complete press the F7 key to compile and build       ExamplesArmMonitorArmMonitor allows viewing of a joint current position  target position  end effector’s pose  and joint parameters  Velocity  Acceleration  Position P  I  D Gain  Velocity P  I Gain   Change the values from the table below to see changes   Joint’s values tableNote that a press of     key denote decrease by shown units and     denote increase by shown units How to Use ArmMonitorArmMonitor01  To start ArmMonitor01  create a new project once created press the Ctrl   F5 keys to run You will need to enter the COM port number and baud rate  Simply enter the values and Succeed to open USB2Dynamixel should appear onscreen followed by Press any key to move first pose  Use the keyboard to move the arm The following table is a list of baud rate values and its corresponding speed Robotis Manipulator default value is 3  1Mbps  The following table is a list of baud rate values and its corresponding speed Robotis Manipulator default value is 3  1Mbps              Baudrate Number      baudrate                  0      2 400 bps              1      57 600 bps              2      115 200 bps              3      1 000 000 bps              4      2 000 000 bps              5      3 000 000 bps      The photo below is the arm in its arrival pose   Press the Ctrl   F5 keys simultaneously and the screen should appears like the picture above  From ArmMonitor01 change the joint’s target position and joint parameter to move the arm   Use the directional keys to move cursor  Use the ‘ ’ ‘’ keys to lower values and ‘ ’ ‘’ to increase   From the picture  from the screen output  with the red area with 1 it shows the joints current pose  Present Value  and end effector’s pose   The red area with 2 shows the target pose  Goal Value  for all joints   The red area with 3 shows the parameters of all joints  Velocity  Acceleration  Position P Gain  I Gain  D Gain  Velocity P Gain  I Gain    Values from joints 2 and 3  Calc ltrad gt and DYNAMIXEL ltrad gt  show on the red ares with 1 and 2 due to difference between point of origin and DH Configuration   Calc ltrad gt is the calculated angle from DH and DYNAMIXEL ltrad gt from the servo’s  The cursor and only control Goal Value Joint Parameter The Goal Value of Arm의 Calc ltrad gt value  enclosed by the red frame  can be increased with the‘ ’ key  The unit is  π 180 rad After adjusting the joint  check if the Manipulator follows ArmMonitor02ArmMonitor02 allows direct control of the end effector  Control the end effector is done by  ComputeIK function where it moves each joint to its solution position  rad    EndEffector pose tableTo setup and run ArmMonitor02 follow the same procedure as in ArmMonitor01 As in ArmMonitor01 you will be asked to enter COM port number and baud rate  You should also see Succeed to open USB2Dynamixel followed by Press any key to move first pose  The arm moves to its initial pose The photo below is the arm in its arrival pose The different values of the end effector depicted from the red areas with 1 and 2  from the screen output image above  is due to the difference of Dynamixel Pro’s Goal Position and Present Position values  gear backlash  and DH with the point of origin  1 shows the end effector’s pose via calculations from kinematics and 2 the actual pose Press the   key to increase the end effector’s pose value by  π 180 rad  X increases by 2mm Visually verify arm movement every time when changing position Arm Monitor Source Descriptioncmd_process cpp      void DrawPage void     printf                            Present Value of Arm                          n printf   ltCalc rad  gt    ltDXL unit  gt    ltDXL rad  gt    ltEndEffector s Pose gt n printf Joint1        X mm   n printf Joint2        Y mm   n printf Joint3        Z mm   n printf Joint4        Roll rad   n printf Joint5        Pitch rad   n printf Joint6        Yaw rad   n printf                             Goal Value of Arm                            n printf   ltCalc rad  gt    ltDXL unit  gt    ltDXL rad  gt   n printf Joint1        n printf Joint2        n printf Joint3        n printf Joint4        n printf Joint5        n printf Joint6        n printf                              Joint Parameter                             n printf  Velocity   Acceleration   Pos_P   Pos_I   Pos_D   Vel_P   Vel_I n printf Joint1              n printf Joint2              n printf Joint3              n printf Joint4              n printf Joint5              n printf Joint6              n printf  Status  n GotoCursur GOAL_JOINT1_ROW  CALC_ANGLE_RAD_COL               the above is DrawPage code for ArmMonitor             voidGotoCursur int row  int col     COORD pos col  rowSetConsoleCursorPosition GetStdHandle STD_OUTPUT_HANDLE   pos               This allows the cursor to jump between rows and columns       These 4 functions allows the directional keys to control cursor location   void MoveUpCursor    void MoveDownCursor    void MoveLeftCursor        void MoveRightCursor          void UpDownValue int dir     giOldRow   giRowgiOldCol   giColGotoCursur STATUS_ROW  STATUS_COL printf   if giRow  lt  GOAL_JOINT6_ROW UpDownGoalValue dir else if  giRow  gt GOAL_JOINT6_ROW   amp amp  giRow  lt  PARAMETER_JOINT6_ROW  UpDownJointParameter dir WriteValue  GotoCursur giOldRow  giOldCol giRow   giOldRowgiCol   giOldCol              UpDownValue allows cursor to increase decrease values             void initialize void initialize   function described below     gpArmComm   new Pro_Arm_Comm_Win                gpArmComm is a class of Pro_Arm_Comm_Win  Pro_Arm_Comm_Win includes ID and baud numrelated aspects         gpArmComm gtDXL_Set_Init_Param Port  Baud               Sets Port Number  Baudrate from pointer        gpRobotisArm gtAddJoint          double LinkLength      double LinkTwist      double JointOffset      double JointAngle      double MaxAngleInRad      double MinAngleInRad      int MaxAngleValue      int MinAngleValue      double MaxAngleLimitInRad      double MinAngleLimitInRad      unsigned int Dynamixel_ID              Input each joint’s DH joint parameters         gpArmComm gtArm_ID_Setup gpRobotisArm gtGetArmIDList                 From AddJoint rearrange ID List         gpArmKinematics   new Kinematics gpRobotisArm               gpRobotisArm gtAddJoint  RobotInfo Class  generates Kinematics Class         gpArmKinematics gtSetMaximumNumberOfIterationsForIK 60               This function calculates the IK’s max number of iterations  In this case 60         gpArmKinematics gtSetConvergenceCondition 0 001  5 0               Sets convergence for IK  1st value to determine solution second value maximum allowed         gvdGoalCalculationAngleRad resize gpRobotisArm gtGetRobotInfo   gtsize                 Setup target pose value  rad          gvdRealCalculationAngleRad resize gpRobotisArm gtGetRobotInfo   gtsize                 Current pose value  rad          gvdGoalDynamixelAngleRad resize gpRobotisArm gtGetRobotInfo   gtsize                 Target joint’s position value  rad         gvdRealDynamixelAngleRad resize gpRobotisArm gtGetRobotInfo   gtsize                 Actual joint’s position value  rad          gviGoalDynamixelAngleUnit resize gpRobotisArm gtGetRobotInfo   gtsize                 Actual joint’s target position value  value          gviRealDynamixelAngleUnit resize gpRobotisArm gtGetRobotInfo   gtsize                 Actual joint’s position value  value          gviPositionPGain resize gpRobotisArm gtGetRobotInfo   gtsize                 Position P Gain value         gviPositionIGain resize gpRobotisArm gtGetRobotInfo   gtsize                 Position I Gain value         gviPositionDGain resize gpRobotisArm gtGetRobotInfo   gtsize                 Position D Gain value         gviVelocityPGain resize gpRobotisArm gtGetRobotInfo   gtsize                 Velocity P Gain value         gviVelocityIGain resize gpRobotisArm gtGetRobotInfo   gtsize                 Velocity I Gain value         gviDynamixelVelocity resize gpRobotisArm gtGetRobotInfo   gtsize                 Velocity value         gviDynamixelAcceleration resize gpRobotisArm gtGetRobotInfo   gtsize                 Acceleration value        gvdGoalCalculationAngleRad   gpArmKinematics gtGetCurrentAngle  gvdRealCalculationAngleRad   gpArmKinematics gtGetCurrentAngle                From gpArmKinematics  mCurrentAngle  current pose value initialize gvdGoal CalculationAngleInRad and gvdRealCalculationAngleInRad         gvdAngleGapCalcandDynamixelRad resize gpRobotisArm gtGetRobotInfo   gtsize   gvdAngleGapCalcandDynamixelRad lt lt 0 0  ML_PI_2  6 4831   ML_PI  180 0  ML_PI_4   6 4831   ML_PI  180 0  0 0  0 0  0 0              This function has been introduced due to the differences between point of origin and actual joints’ point of origin from the DH Configuration Once the size of angle adjustment has been assigned per joint enter the difference between point of origin and the joint actual point of origin         gvdGoalDynamixelAngleRad lt lt0 0  ML_PI 4 0  ML_PI 4 0  0 0  ML_PI 4 0 0 0              GoalDynamixelAngleRad is the initial pose default values         gviPositionPGain fill DEFAULT_POSITION_P_GAIN gviPositionIGain fill DEFAULT_POSITION_I_GAIN gviPositionDGain fill DEFAULT_POSITION_D_GAIN               Position P  I  D Gain functions  Default P gain value is 64 I and D Gain are 0  The  fill contains every joint’s PID values individually         gpArmComm gtArm_Torque_On                This function gets initialized before moving the arm to its initial pose         gpArmComm gtArm_Set_Position_PID_Gain DEFAULT_POSITION_P_GAIN DEFAULT_POSITION_I_GAIN DEFAULT_POSITION_D_GAIN               Sets the manipulator joints’ PID gain values          gpArmTrajectory   new TrajectoryGenerator gpArmKinematics gpArmTrajectory gtSet_P2P gvdRealDynamixelAngleRadgvdAngleGapCalcandDynamixelRad gvdGoalDynamixelAngleRadgvdAngleGapCalcandDynamixelRad 5 0  1 0               The generated Kinematics  StartPose  EndPose  TotalTime  AccelTime get inputted into the trajectory  Trajectory is generated via P2P  The StartPose is the current pose and EndPose is ArmMonitor’s initial pose  TotalTime is 5 0sec where AccelTime is 1 0sec  For more information on trajectory generation  please go to 4 2 How to Program and 6 3 MotionEngine’s Trajectory Generator         gpMotionPlayer   new MotionPlay gpArmKinematics  gpArmTrajectory               MotionPlay’s CurrentTime  ElapsedTime get initialized and setp up MotionProfile  These are required variables for kinematics and trajectory’s motion         gpMotionPlayer gtSet_Time_Period 5               Motion’s time period in 5msec         _tempMotionTimer Start  gvdGoalCalculationAngleRad   gpMotionPlayer gtNextStep  ampErrorStatus gvdGoalDynamixelAngleRad   gvdGoalCalculationAngleRad   gvdAngleGapCalcandDynamixelRadgviGoalDynamixelAngleUnit   gpRobotisArm gtRad2Value gvdGoalDynamixelAngleRad CommResult   gpArmComm gtArm_Set_JointPosition gviGoalDynamixelAngleUnit gvdGoalCalculationAngleRad   gpMotionPlayer gtNextStep  ampErrorStatus gvdGoalDynamixelAngleRad   gvdGoalCalculationAngleRad   gvdAngleGapCalcandDynamixelRad_tempMotionTimer Stop  _tempMotionTimer Wait Period ㅡ _tempMotionTimer GetElapsedTime                 The functions above have set motion time periods where functions are performed via while loop during their duration First  the set Control Time Period gets matched         _tempMotionTimer Start        _tempMotionTimer Stop  _tempMotionTimer Wait Period ㅡ _tempMotionTimer GetElapsedTime                 Measure elapsed start and stop time then subtract its difference with elapsed calculated time in set Control Time Period 5msec in this case  The target pose from the current step obtained from the algorithm below         gvdGoalCalculationAngleRad   gpMotionPlayer gtNextStep  ampErrorStatus gvdGoalDynamixelAngleRad   gvdGoalCalculationAngleRad   gvdAngleGapCalcandDynamixelRadgviGoalDynamixelAngleUnit   gpRobotisArm gtRad2Value gvdGoalDynamixelAngleRad CommResult   gpArmComm gtArm_Set_JointPosition gviGoalDynamixelAngleUnit gvdGoalCalculationAngleRad   gpMotionPlayer gtNextStep  ampErrorStatus gvdGoalDynamixelAngleRad   gvdGoalCalculationAngleRad   gvdAngleGapCalcandDynamixelRad              First  NextStep gets the current step’s target angles  which are from the DH Configuration  However  the actual Dynamixel PRO start point and the DH Configuration’s differ This difference is taken into account and each joint Goal Position Value is set again with Rad2Value  the resulting Arm_Set_JointPosition moves the manipulator If successful  the manipulator’s communications Arm_Set_JointPosition returns a value of 1         gvdRealDynamixelAngleRad   gpRobotisArm gtValue2Rad gviRealDynamixelAngleUnit gvdRealCalculationAngleRad   gvdRealDynamixelAngleRad  gvdAngleGapCalcandDynamixelRad              After motion is complete it print’s the joint’s actual pose rad  and calculated pose rad          gpArmKinematics gtForward gvdRealCalculationAngleRad   ampgRealPose gpArmKinematics gtForward gvdGoalCalculationAngleRad   ampgGoalPose               Factor’s current angle and goal angle to Forward Kinematics  The end effectot’s actual and goal pose  gRealPose  gGoalPose  can be assigned         gpArmComm gtArm_Set_JointAcceleration DEFAULT_JOINT_ACCELERATION gviDynamixelAcceleration fill DEFAULT_JOINT_ACCELERATION               Sets every joint’s acceleration value individually  DEFAULT_JOINT_ACCELERATION has 4 values        gpArmComm gtArm_Set_JointVelocity DEFAULT_JOINT_VELOCITY gviDynamixelVelocity fill DEFAULT_JOINT_VELOCITY               Sets every joint’s velocity value individually  DEFAULT_JOINT_VELOCITY 9000 values         void UpDownGoalValue int dir void UpDownJointParameter int dir void UpDownValue int dir               UpdownGoalValue allows change in goal pose  UpDownJointParameter allows changes to  joint’s parameters  Velocity  Acceleration  Position P  I  D Gain   Velocity P   I Gain   UpDownValue combines both functions       SimplePtoPWarning Product may move fast with this example  When testing this example keep a safe distance while able to cut power off in case of undesired operation SimplePtoP is the end effector’s move point  from P1 to P2  How to Use SimplePtoPTo start SimplePtoP follow the same procedure for ArmMonitor  Then press the Ctrl   F5 keys to run You will be asked for COM port number and baud rate If succeeded then you will see a ‘Succeed to open USB2Dynamixel’ followed by ‘Press any key to move first pose ’ Press a key to move the arm to its initial pose Then press a key to begin P2P Motion  The photo below is the arm in its initial pose SimplePtoP displays the joints’ pose rad   In SimplePtoP prssing the ‘p’ or ‘P’ will cause motion to pause  Press the ESC key to end SimplePtoP Source Descriptionvecd P1  P2P1 resize RobotisArm GetRobotInfo   gtsize   P2 resize RobotisArm GetRobotInfo   gtsize     P1  P2 sets every joint’s position P1 fill 0 0 P1   gvdAngleGapCalcandDynamixelRadP2 fill 0 5 P2   gvdAngleGapCalcandDynamixelRad  P1 fill  P2 fill input every joint’s position rad  individually  Differences between DH Configuration’s point of origin and actual point of origin are taken into consideration so P1 and P2 are to be adjusted accordingly ArmComm Arm_Set_Position_PID_Gain 64  0  0   Joint’s Position P  I  and D gain values respectively ArmComm Arm_Set_JointVelocity 0   Joint’s velocity value  0 denotes max velocity ArmComm Arm_Set_JointAcceleration 0   Joint’s acceleration value  0 denotes max velocity ArmTrajectory ClearMF    MotionProfile clears the set space  ArmTrajectory Set_P2P P1  P2  10 0  0 5   Sets P1  P2 Start  EndPose   In this case P1 is 0 0 rad and P2 is 0 5 rad  Trajectory is from P1 to P2ArmTrajectory Set_P2P P2  P1  10 0  0 5   Sets P1  P2 Start  EndPose   In this case P1 is 0 0 rad and P2 is 0 5 rad  Trajectory is from P2 to P1MotionPlayer All_Info_Reload    MotionProfile calls Info Robot  Kinematics  Trajectory  MoionPlayer Initialize    MotionProfile  Step  are initialized MotionPlayer Set_Time_Period DEFAULT_Ctrl_TIME_PERIOD   Sets time period  For value lesser than 0 then a default value   8  gets inputted SimpleIKWarning Use of this example may pose safety risks  When testing the example keep a safe distance while able to cut power off in case of undesired operation       Allows operation of end effector’s pose via position X  Y  Z  and orientation Roll  Pitch  Yaw   The keys for SimpleIK are q  w  e  r  t  y and a  s  d  f  g  h         EndEffector Pose table              Control EndEffector      Position  gt  5mmorientation  gt   3π 180 rad      Position  gt 5mmorientation  gt  3π 180 rad                  Position X      q      a              Position Y      w      s              Position Z      e      d              Orientation Roll      r      f              Orientation Pitch      t      g              Orientation Yaw      y      h      How to Use SimpleIKTo start SimpleIK start a new project just like SimplePtoP  Then press the Ctrl   F5 ekys to begin In SimpleIK you will be asked for COM port and baud rate numbers  If succeeded you will see a ‘Succeed to open USB2Dynamixel’ followed by ‘Press any key to move first pose ’ Press a key to begin The arm moves to its initial pose as shown below This windows pops up after the arms moves to its initial pose  The values printed are the joints’ angles rad   Press the keys ex  q  w…   to move the end effector SimpleIK q key control the 3rd value Q controls the end effector position  X  by increasing delta 5mm amounts Visually verify arm movement every time when changing position Press the q and r keys 3 times each  The r key controls the end effector’s roll  The orientation  Roll  Pitch  Yaw  change by  3π 180 rad per keystroke Visually verify arm movement every time when changing position SimpleIK Source Descriptionif temp     q    DesiredPose   CurrentPose  DesiredPose x    delta  ArmKinematics ComputeIK DesiredPose   ampangle_rad  angle_rad   ampErrorStatus   if ErrorStatus    ARMSDK_NO_ERROR       cout lt ltAnswer lt ltendl    cout lt ltangle_rad lt ltendl lt ltendl    ArmComm Arm_Set_JointPosition RobotisArm Rad2Value angle_rad   gvdAngleGapCalcandDynamixelRad      else if ErrorStatus  amp ARMSDK_ACCEPTABLE_ERROR       cout lt lt No IK solution  lt ltendl    cout lt lt But the calcuation result is acceptable  lt ltendl    char answer    while true           cout lt lt Do you want make the Robot move   Y N       cin  gt gt answer      if  answer     y       answer     n       answer     Y       answer     N           break      else        cout lt lt Invaild Answer lt ltendl        if  answer     y       answer     Y          ArmComm Arm_Set_JointPosition RobotisArm Rad2Value angle_rad   gvdAngleGapCalcandDynamixelRad      else      continue    else      cout lt lt No IK Solution  lt ltendl    continue    ArmKinematics Forward angle_rad   ampCurrentPose   The code shows that by pressing the q key the program runs  A press of q moves the end effector pose in the  X  coordinate by delta  5mm  If there are no errors the end effector will move according to keystroke  All joints are in radians Press the ‘q‘ key to to goal pose by X position in delta incrememts Despite having errors and not being able to get the IK moving can be allowed  If ‘Do you want make the Robot move   Y N ’ appears onscreen press the y key to move the endeffector in the X coordinate by  5mm  Then the joints pose rad  are displayed Warning Product may go to pose fast after pressing the Y key posing a safety risk  When testing the example keep a safe distance while able to cut power off in case of undesired operation When error is too large and IK is unrealizable ‘No IK Solution‘ will be displayed the end effector will remain as is The sample code from above is broken down below ArmKinematics ComputeIK DesiredPose   ampangle_rad  angle_rad   ampErrorStatus All joints set to a desired pose by taking input from DesiredPose and angle_rad  Once DesiredPose values go to CurrentPose then the arm moves in X coordinate and DesirePose gets set again  angle_rad is CurrentPose’s consistent joints  angles  IK’s solution for desired pose joint angles and  ampangle_rad get set   ampErrorStatus is the error sent to Dynamixel ArmComm Arm_Set_JointPosition RobotisArm Rad2Value angle_rad   gvdAngleGapCalcandDynamixelRad    The ComputeIK function sets an array for joint position in  ampangle_rad ArmKinematics Forward angle_rad   ampCurrentPose   Once moved to desired pose angle_rad array  gets the end effector’s pose and runs forward kinematics then CurrentPose sets the pose  This function returns the end effectors transform matric  4x4  else if temp     r    DesiredPose   CurrentPose  matd DesiredRotation   AlgebraGetOrientationMatrix delta_angle_rad  0 0  0 0         AlgebraGetOrientationMatrix CurrentPose Roll  CurrentPose Pitch  CurrentPose Yaw   vecd DesiredRPY   AlgebraGetEulerRollPitchYaw DesiredRotation   DesiredPose Roll   DesiredRPY 0   DesiredPose Pitch   DesiredRPY 1   DesiredPose Yaw   DesiredRPY 2   ArmKinematics ComputeIK DesiredPose   ampangle_rad  angle_rad   ampErrorStatus   if ErrorStatus    ARMSDK_NO_ERROR       cout lt ltAnswer lt ltendl    cout lt ltangle_rad lt ltendl lt ltendl    ArmComm Arm_Set_JointPosition RobotisArm Rad2Value angle_rad   gvdAngleGapCalcandDynamixelRad      else if ErrorStatus  amp ARMSDK_ACCEPTABLE_ERROR       cout lt lt No IK solution  lt ltendl    cout lt lt But the caluation result is acceptable  lt ltendl    char answer    while true           cout lt lt Do you want make the Robot move   Y N       cin  gt gt answer      if  answer     y       answer     n       answer     Y       answer     N           break      else        cout lt lt Invaild Answer  lt ltendl        if  answer     y       answer     Y          ArmComm Arm_Set_JointPosition RobotisArm Rad2Value angle_rad   gvdAngleGapCalcandDynamixelRad      else      continue    else      cout lt lt No IK Solution lt ltendl    continue    ArmKinematics Forward angle_rad   ampCurrentPose   The goal pose runs IK my moving the roll gets increased by delta rad   The end effector moves to whatever the IK has solved and displays the joint poses rad  Despite having errors and not being able to get the IK moving can be allowed  If ‘Do you want make the Robot move   Y N ’ appears onscreen press the y key to turn the end effector in the roll axis by delta_angle_rad  Then the joints pose rad  are displayed A roll  rollonly  delta is   delta_angle_rad    3π 180 rad When error is too large and IK is unrealizable ‘No IK Solution‘ will be displayed the end effector will remain as is The sample code from above is broken down below  Press the r key to move the roll by delta_angle_rad The desired rotation matrix can then be obtain with the followingWhere the code is shown below matd DesiredRotation   AlgebraGetOrientationMatrix delta_angle_rad  0 0  0 0    AlgebraGetOrientationMatrix CurrentPose Roll  CurrentPose Pitch  CurrentPose Yaw   The CurrentPose’s Orientation roll increase by delta_angle_rad GoalPose DesiredRotation  vecd DesiredRPY   AlgebraGetEulerRollPitchYaw DesiredRotation   DesiredRotation’s roll  pitch  and yaw SimpleTorqueFKTurns the Manipulator joints’ torque on off  When torque goes off→on Forward Kinematics runs and putputs all joints pose rad  and end effector’s position and orientation How to Use SimpleTorqueOnOffandFKTo start SimpleTorqueOnOffandFK start a new project just like SimplePtoP  Then press the Ctrl F5 keys to begin SimpleTorqueOnOffandFK Input the COM port and baud rate numbers  If succeeded you will see a ‘Succeed to open USB2Dynamixel’ then torque gets turned off Press the Enter key turn torque on and the arm’s joints pose rad  and end effector’s pose rad  will be displayed  joints 1 through 6  Press Enter again to turn torque off and it will display ‘Torque Off ’Press the Enter key once again to turn torque on and the values be displayed again SimpleTorqueOnOffandFK Source Descriptionwhile true   char temp   _getch    if temp    27   break  else if temp    13       if gbArmTorque           ArmComm Arm_Torque_Off        stdcout lt ltTorque Off lt ltstdendl      gbArmTorque   false        else          ArmComm Arm_Torque_On        cout lt ltTorque On lt ltendl      if ArmComm Arm_Get_JointPosition  ampangle_unit     COMM_RXSUCCESS               printf Communication Error Occurredn             cout lt ltJointAngle is lt ltendl      angle_rad   RobotisArm Value2Rad angle_unit       cout lt lt angle_rad  gvdAngleGapCalcandDynamixelRad  lt ltendl lt ltendl      cout lt ltAngle of Dynamixel is lt ltendl      angle_rad   RobotisArm Value2Rad angle_unit       cout lt lt angle_rad  lt ltendl lt ltendl      cout lt ltEndEffector s Pose is lt ltendl      Pose3D CurrentPose      ArmKinematics Forward angle_rad  gvdAngleGapCalcandDynamixelRad   ampCurrentPose       cout lt ltx    lt ltCurrentPose x  lt ltendl      cout lt lty    lt ltCurrentPose y  lt ltendl      cout lt ltz    lt ltCurrentPose z  lt ltendl      cout lt ltroll    lt ltCurrentPose Roll  lt ltendl      cout lt ltpitch    lt ltCurrentPose Pitch  lt ltendl      cout lt ltyaw    lt ltCurrentPose Yaw  lt ltendl lt ltendl      gbArmTorque   true        else    continue  The program aborts without starting by pressing the Esc key While the program is running press the Enter key to toggle torque between on and off  When torque gets turned on the joints and end effector pose get outputted onscreen  This happens with every on state Press the Esc key then Enter key and the arm remains as is The sample code from above is broken down below  The joint angles and Dynamixel angles may not be the same so it must be taken into consideration  Angle of Dynamixel is the output of the actual angle of Dynamixel Manipulator SDK ProgrammingSDK DescriptionRobotInfoWhen building Manipulator at ARM SDK  you may use the Addjoint function after generating Instance of RobotInfo Class AddJoint gets values from DH Parameter and actuator’s max and min turn angle in rad and value as well as actuator ID number  min and max turn angles may not be the same as joint angle limits  KinematicsForward Kinematics FK   Inverse Kinematics IK  can be calculated once the instance for kinematics class is generated  Kinematics class get the instance from RobotInfo class ComputeIK’s factor’s the pose from end effector and joint values  as well as  initial joint angle and error for IK  The result is joint angles when the returned error status is not 0 then the IK is not properly solved The Roll φ   Pitch θ  and Yaw ψ  are calculated as Rx φ   Ry θ   Rz ψ  in the rotation transformation matrix  This is to be taken into consideration when entering the pose for ComputeIK Trajectory GeneratingThe TrajectoryGenerator class generates an instance for the arm’s trajectory  The SDK’s  Point to Point  Linear  and Circular can generate a trajectory  For armonly trajectory then only Set_PTP  Set_LIN  Set_Circular for the gripper then Set_PTPwithHand  Set_LINwithHand  Set_CIRCwithHand Velocity ProfileThe SDK’s Velocity Profile does not take max velocity and max acceleration into consideration in the Trapezoidal Velocity Profile  The initial and final velocity are always set to 0  The following methods generate velocity profile in Joint Space and Cartesian Space  where both are independent of each other Set_PTPThe Set_PTP function determines 2 poses for the manipulator  initial and final  by factoring in Trapezoidal Velocity Profile and receives velocity time and total time  Initial and final pose are in rad and joint angle in mm or rad  x  y  z  roll  pitch  yaw   When generating the trajectory it is recommended to factor in joint angles Set_LINThe Set_LIN function generates a 3point coordinates for the robot’s straight trajectory  This factors in initial and final pose for Linear Euler Interpolation for orientation Set_CIRCThe Set_CIRC function generates a 3point coordinates for the robot’s circular trajectory  This factors in initial and final pose  It sets a point of origin in the area and proceeds to trajectory via MotionPlay and vector generation Trajectory FollowingWhen moving by the generated trajectory from TrajectorGenerator class’s instance just use NextStep function from MotionPlay  MotionPlay class accounts trajectoryGenerator class The control period from MotionPlay default value is 8ms but can be changed with SetTimePeriod  If TimePeriod is 0 then 8ms default value is applied Pro_Arm_Comm_WinPro_Arm_Comm_Win utilizes DYNAMIXEL 2 0 Protocol from the Windows version of DYNAMIXEL SDK  Pro_Arm_Comm_Win’s functions utilizes DYNAMIXEL Pro’s control  i e  read write Control Table values  This is useful when writing separate code SDK FlowchartFirmware RecoveryWhen Dynamixel detection fails ensure is properly wired  If problems persists restore Dynamixel firmware  shown below  Warning After firmware restoration you will need to set ID and baud rate values again  Always make sure to set USB2Dynamixel switch to 485   Restoring firmware          From Dynamixel Wizard click on the  icon to begin       Select the corresponding COM port number for USB2Dynamixel                 Firmware restore process steps explained             Always connect one Dynamixel at a time         Pick the COM port number          With an incorrect number Dynamixel cannot be automatically detected  Always make sure to get the port number right       Click on Search             Disconnect and connect Dynamixel          The Next button should become clickable                Upon successful detection the Next button is clickable        Pick the right model          Pick the right type from the list  If not it may result in problems                    During restoration          While restoring  the LED will blink  Do not cut power off during this stage               All Control Table settings are set to default values ReferencesAMSDK DefinePose3D  Data Fields          double x  y  z      double Roll  Pitch  Yaw        Description          Position x y z  and Orientation Roll  Pitch  Yaw  elements      timeprofile  Data Fields          double ta  tc  td  totaltime      double a0 3   a1 3   a2 3       double distance  distance1      int Method        Description          Trapezoidal Velocity Profile’s elements      distance1 only used in circular trajectory       MotionPose  Data Fields          vecd StartPose  EndPose      Pose3D StartPose3D  ViaPose3D  EndPose3D      Position3D CenterPosition      int Method        Description          Declaration of manipulator step’s StartPose  EndPose and trajectory method      ViaPose and CenterPosition for circular trajectory      ARMSDK Mathstatic matd GetOrientationMatrix double Roll  double Pitch  double Yaw   Parameter          double Roll  double Pitch  double Yaw        Returns          3 x 3 Rotation Matrix        Description          orientation Roll  Pitch  Yaw  input      3 x 3 orientation matrix output      static matd GetTransformMatrix double Roll  double Pitch  double Yaw  double x  double y  double z   Parameter          double Roll  double Pitch  double Yaw      double x  double y  double z        Returns          4 x 4 Transformation Matrix        Description          orientation Roll  Pitch  Yaw   Position X  Y  Z  input      4 x 4 transform Matrix output      static vecd rot2omega mat3d Rerr   Parameter          Rotation Matrix        Returns          angular velocity array        Description          rotation matrix gets input and outputs velocity array      static vecd ConvertRad2Deg vecd q   Parameter          radian Array        Returns          Degree Array        Description           rad  gets input  change to  value  and return      static vecd GetEulerRollPitchYaw matd T   Parameter          3 x 3 rotation Matrix or 4 x 4 Transformation Matrix        Returns          3 x 1 array  Roll  Pitch  Yaw         Description          vecd rpy 3       rpy 0    atan2  T 2 1   T 2 2        rpy 1    atan2 T 2 0   sqrt T 2 1  T 2 1    T 2 2  T 2 2          rpy 2    atan2  T 1 0   T 0 0        MotionEngineError hvoid ErrorCheck int Error   Parameter          int Error        Return          void        Description          No error ARMSDK_NO_ERROR 0x00       IK solution does not exist ARMSDK_NO_IK_SOLUTION 0x01       No IK solution and allowable error ARMSDK_ACCEPTABLE_ERROR 0x02       Joints’ next and previous step large difference in angle ARMSDK_TOO_MUCH_ANGLE_CHANGE 0x04       Angle or not within JointData’s limit ARMSDK_OUT_OF_JOINT_RANGE 0x08 The 5 types of ERROR      JointData hvoid SetJointID unsigned int ID   Parameter          unsigned int ID        Return          void        Description          Assign Joint ID      void SetJointAngle double JointAngle   Parameter          double JointAngle        Return          void        Description          Set Joint Angle      void SetMinAngleInRad double MinAngleInRad   Parameter          double MinAngleInRad        Return          void        Description          Set actuator min angle rad       Value utilized in 6 3 MotionEngine  iii  RobotInfo’s rad2value function      void SetMaxAngleInRad double MaxAngleInRad   Parameter          double MaxAngleInRad        Return          void        Description          Set actuator max angle rad       Value utilized in 6 3 MotionEngine  iii  RobotInfo’s rad2value function      void SetMinAngleInValue int Min_AngleValue   Parameter          int Min_AngleValue        Return          void        Description          Set actuator min value      utilized in 6 3 MotionEngine  iii  RobotInfo’s rad2value  value2rad functions      void SetMaxAngleInValue int Max_AngleValue   Parameter          int Max_AngleValue        Return          void        Description          Set actuator max value      Utilized in 6 3 MotionEngine  iii  RobotInfo’s rad2value  value2rad functions      void SetMinAngleLimitInRad double MinAngleLimitInRad   Parameter          double MinAngleLimitInRad        Return          void        Description          Set joint min angle rad       Also sets the value      void SetMaxAngleLimitInRad double MaxAngleLimitInRad   Parameter          double MaxAngleLimitInRad        Return          void        Description          Set joint max angle rad       Also sets the value      unsigned int GetID void   Parameter          void        Return          unsigned int  ID         Description          Returns joint ID  number       void SetJointDataDH double LinkLength  double LinkTwist  double JointOffset  double JointAngle   Parameter          double LinkLength  double LinkTwist      double JointOffset  double JointAngle        Return          void        Description          Set Manipulator’s joint DH parameters in DH Configuration      double GetJointAngle void   Parameter          void        Return          double current Angle        Description          Returns joint angle limit rad       double GetMinAngleInRad void   Parameter          void        Return          MinAngle rad  of Actuator        Description          SetMinAngleInRad returns actuator min angle rad       double GetMaxAngleInRad void   Parameter          void        Return          MaxAngle rad  of Actuator        Description          SetMaxAngleInRad returns actuator max angle rad       int GetMinAngleInValue void   Parameter          void        Return          MinAngle value  of Actuator        Description          SetMinAngleInValue returns actuator min angle value       int GetMaxAngleInValue void   Parameter          void        Return          MaxAngle value  of Actuator        Description          SetMaxAngleInValue returns actuator max angle value       double GetMinAngleLimitInRad void   Parameter          void        Return          MinAngle rad  of Joint        Description          SetMinAngleLimitInRad returns joint min angle rad       double GetMaxAngleLimitInRad void   Parameter          void        Return          MaxAngle rad  of Joint        Description          SetMaxAngleLimitInRad returns joint max angle rad       int GetMinAngleLimitInValue void   Parameter          void        Return          MinAngle value  of Joint        Description          SetMinAngleLimitInRad returns joint min angle value       int GetMaxAngleLimitInValue void   Parameter          void        Return          MaxAngle value  of Joint        Description          SetMaxAngleLimitInRad returns joint max angle value       matd GetTransformMatirx void   Parameter          void        Return          matd TransformMatrix of each Link        Description          Returns transform matrix for each link      RobotInfo hint AddJoint  double LinkLength  double LinkTwist  double JointOffset  double JointAngle  double MaxAngleInRad  double MinAngleInRad  int MaxAngleValue   int MinAngleValue  double MaxAngleLimitInRad  double MinAngleLimitInRad  unsigned int Dynamixel_ID   Parameter          LinkLength  LinkTwist  JointOffset  JointAngle – DH parameter      MaxAngleInRad  Maximum Angle of Actuator not Joint Limit       MinAngleInRad – Minimum Angle of Actuator not Joint Limit       MaxAngleInValue – AngleValue corresponding to the Maxangle      MinAngleInValue – AngleValie corresponding to the Minangle      MaxAngleLimitInRad – Maximum Joint Angle Limit of Actuator      MinAngleLimitInRad – Minimum Joint Angle Limit of Actuator        Return          Error Value        Description          Sets joint’s DHParameter and JointParameter values      Error of 0 is no error and 1 when there is error       Error happens when min value is greater than max value      JointData GetJointInfo int joint_number   Parameter          int Joint_number        Return          JointData        Description          Returns JointData from AddJoint      stdvector  GetRobotInfo void   Parameter          JointData        Return          address of robotInfo        Description          Returns address values from RobotInfomation      void ClearRobotInfo void   Parameter          void        Return          void        Description          Clears out RobotInfo      veci GetArmIDList void   Parameter          void        Return          ID List of Robot Actuators        Description          Returns joint ID in aray form inAddJoint      veci Rad2Value vecd q   Parameter          double array of Actuators Angle Rad         Return          int array of Actuators Angle Value         Description          Transforms joint’s rad to value       vecd Value2Rad veci q   Parameter          int array of Actuators Angle Value         Return          double array of Actuators Angle Rad         Description          Transforms joint’s value to rad       Kinematics hvoid RobotInfoReload void   Parameter          void        Return          void        Description          Calls RobotInfo      matd Forward vecd angle   Parameter          Angle of All Joints rad         Return          4x4 TransformMatrix form        Description          RobotInfoReload calls joints angles runs FK and returns end effector’s transformation matrix      matd Forward vecd angle  Pose3D  pose   Parameter          Angle of All Joints rad         Return          4x4 EndEffector’s TransformMatrix form        Description          RobotInfoReload calls joint angles runs FK and returns end effector’s transformation matrix  It also sets pose pointer   pose       void SetMaximumNumberOfIterationsForIK unsigned int max_num   Parameter          unsigned int max_num for IK        Return          void        Description          Sets IK’s number of iterations for solution      void SetConvergenceCondition double max_error  double max_acceptable_error   Parameter          double max_error  double max_acceptable_error        Return          void        Description          IK’s amount of telorable error       The first input value is max convergence error  A lesser value than max can allow solution       The second value is max allowable error acceptable as long as is lower than value entered  When value exceeds then there is no solution        matd Jacobian void   Parameter          void        Return          Matrix of Jacobian        Description          Returns jacobian for IK solution      vecd CalcError Pose3D _desired  matd _current   Parameter          Pose3D goalPose  TransformMatrix of EndEffector        Return          Error between Goal and Currnet Pose        Description          Compares end effector’s goal pose and current pose      void ComputeIK Pose3D _desired   vecd  q_rad  vecd Initangle_rad  int  ErrorStatus   Parameter          Pose3D goalPose  vecd initangle  int ErrorStatus        Return          void        Description          get jacobian’s Damped Least Square Method for IK solution      _desired is end effector’s desired pose       q_rad sets joints pose after running IK      Initangle_rad is joint angles prior to running IK      ErrorStatus is pointer for error type      ErrorStatus                   No error ARMSDK_NO_ERROR 0x00           No solution from IK ARMSDK_NO_IK_SOLUTION 0x01           no solution from IK  allowable error ARMSDK_ACCEPTABLE_ERROR 0x02           joint angles exceed JointData’s set angles ARMSDK_OUT_OFF_JOINT_RANGE 0x08                     TrajectoryGenerator hvoid KinematicsInfoReload void   Parameter          void        Return          void        Description          Calls Kinematics info      void Set_P2P vecd StartPose  vecd EndPose  double TotalTime  double AccelTime   Parameter          vecd StartPose   vecd EndPose      double TotalTime   double AccelTime        Returns          void        Description          sets P2P trajectory fromStartPose  EndPose  TotalTime  AccelTime      void Set_P2P Pose3D StartPose  Pose3D EndPose  double TotalTime  double AccelTime   Parameter          Pose3D StartPose   Pose3D EndPose      double TotalTime   double AccelTime        Returns          void        Description          Sets P2P trajectory from StartPose  EndPose  TotalTime  AccelTime      void Set_LIN vecd StartPose  vecd EndPose  double TotalTime  double AccelTime   Parameter          vecd StartPose   vecd EndPose      double TotalTime   double AccelTime        Returns          void        Description          Sets linear trajectory from StartPose  EndPose  TotalTime  AccelTime      void Set_LIN Pose3D StartPose  Pose3D EndPose  double TotalTime  double AccelTime   Parameter          Pose3D StartPose   Pose3D EndPose      double TotalTime   double AccelTime        Returns          void        Description          Sets linear trajectory from StartPose  EndPose  TotalTime  AccelTime      void Set_CIRC vecd StartPose  vecd ViaPose  vecd EndPose  double TotalTime  double AccelTime   Parameter          vecd StartPose   vecd ViaPose   vecd EndPose      double TotalTime   double AccelTime        Returns          void        Description          Sets circular trajectory from StartPose  ViaPose  EndPose  TotalTime  AccelTime       void Set_CIRC Pose3D StartPose  Pose3D ViaPose  Pose3D EndPose  double TotalTime  double AccelTime   Parameter          Pose3D StartPose   Pose3D EndPose      double TotalTime   double AccelTime        Returns          void        Description          Sets circular trajectory fom StartPose  ViaPose  EndPose  TotalTime  AccelTime      void Set_P2PwithHand vecd StartPose  vecd EndPose  veci Hand1  veci Hand2  double TotalTime  double AccelTime   Parameter          vecd StartPose   vecd EndPose      veci Hand1   veci Hand2      double TotalTime   double AccelTime        Returns          void        Description          Sets P2P trajectory from StartPose  EndPose  Start HandPose  End HandPose  TotalTime  AccelTime      void Set_P2PwithHand Pose3D StartPose  Pose3D EndPose  veci Hand1  veci Hand2  double TotalTime  double AccelTime   Parameter          Pose3D StartPose   Pose3D EndPose      veci Hand1   veci Hand2      double TotalTime   double AccelTime        Returns          void        Description          Sets P2P trajectory from StartPose  EndPose  Start HandPose  End HandPose  TotalTime  AccelTime      void Set_LINwithHand vecd StartPose  vecd EndPose  veci Hand1  veci Hand2  double TotalTime  double AccelTime   Parameter          vecd StartPose   vecd EndPose      veci Hand1   veci Hand2      double TotalTime   double AccelTime        Returns          void        Description          Sets linear trajectory from StartPose  EndPose  Start HandPose  End HandPose  TotalTime  AccelTime       void Set_LINwithHand Pose3D StartPose  Pose3D EndPose  veci Hand1  veci Hand2  double TotalTime  double AccelTime   Parameter          Pose3D StartPose   Pose3D EndPose      veci Hand1   veci Hand2      double TotalTime   double AccelTime        Returns          void        Description          Sets linear trajectory from StartPose  EndPose  Start HandPose  End HandPose  TotalTime  AccelTime      void Set_CIRCwithHand vecd StartPose  vecd ViaPose  vecd EndPose  veci Hand1  veci Hand2  double TotalTime  double AccelTime   Parameter          vecd StartPose   vecd EndPose   vecd ViaPose      veci Hand1   veci Hand2      double TotalTime   double AccelTime        Returns          void        Description          Sets circular trajectory from StartPose  ViaPose  EndPose  Start HandPose  End HandPose  TotalTime  AccelTime      void Set_CIRCwithHand Pose3D StartPose  Pose3D ViaPose  Pose3D EndPose  veci Hand1  veci Hand2  double TotalTime  double AccelTime   Parameter          Pose3D StartPose   Pose3D ViaPose   Pose3D EndPose      veci Hand1   veci Hand2      double TotalTime   double AccelTime        Returns          void        Description          Sets circular trajectory from StartPose  ViaPose  EndPose  Start HandPose  End HandPose  TotalTime  AccelTime      void ClearMF void   Parameter          void        Returns          void        Description          Clears out motion profile      double GetMotionTotalTime void   Parameter          void        Returns          TotalTime in sec        Description          Returns motion run time      MotionPlay hvoid All_Info_Reload void   Parameter          void        Returns          void        Description          Calls motion’s Info RobotInfo  Kinematics  Trajectory       void initialize void   Parameter          void        Returns          void        Description          Initializes motion profile  done time  step  current time      void Set_Time_Period int MilliSecond   Parameter          int MilliSecond        Returns          void        Description          Provides period time for motion      vecd NextStepAtTime double CurrentTime  int  ErrorStatus   Parameter          double CurrentTime      int  ErrorStatus        Returns          Joint Angle of next Step        Description          Returns next Goal Joint Angle array      ErrorStatus is pointer for error type      veci NextStepAtTimeforHand double CurrentTime   Parameter          CurrentTime  current time in sec        Returns          Angle Value array of Fingers for next step        Description          Returns following Goal Joint Angle array for hand      Assumes hand is attached to arm            vecd CalcIK Pose3D desiredPose  int  ErrorStatus     Parameter          Pose3D desiredPose   int  ErrorStatus        Returns          Joint Angle of desiredPose        Description          Returns desired pose of end effector via IK      ErrorStatus is pointer for error type                  no error ARMSDK_NO_ERROR 0x00           No solution from IK ARMSDK_NO_IK_SOLUTION 0x01           no solution from IK  allowable error ARMSDK_ACCEPTABLE_ERROR 0x02           joint angles exceed JointData’s set angles ARMSDK_OUT_OFF_JOINT_RANGE 0x08                     vecd NextStep int  ErrorStatus   Parameter          ErrorStatus        Returns          Angle rad array for next step        Description          Returns next motion’s joint angles      ErrorStatus is pointer for error type      veci NextStepforHand void   Parameter          void        Returns          Angle Value array of Fingers for next step        Description          Returns hand’s next motion position      vecd GetCurrentAngle void   Parameter          void        Returns          All Joint Angle rad         Description          Returns robot’s current pos rad  array      Pose3D GetCurrentEndPose void   Parameter          void        Returns          Pose3D of EndEffector        Description          Returns end effector’s current pose      double Get_CurrentTime void   Parameter          void        Returns          double CurrentTime        Description          Returns current time      RobotisLibPro_Arm_Comm_win hvoid DXL_Set_Init_Param int portnum  int baudnum   Parameter          int portnum  int baudnum        Returns          void        Description          Sets Dynamixel comms from portnum and baudnum      int DXL_Open    Parameter          void        Returns          void        Description          Opens access comms to DYNAMIXEL_Set_Init_Param      SerialPort  DXL_Get_Port void   Parameter          void        Returns          PortNumber        Description          Returns SerialPort pointer address      void DXL_Close void   Parameter          void        Returns          void        Description          End communications with Dynamixel      void Arm_ID_Setup veci Arm_ID_LIST   Parameter          array of ID List        Returns          void        Description          Sets arm’s ID list      int Arm_Torque_On void   Parameter          void        Returns          Communication Result        Description          Turn torque on every joint      COMM_RXSUCCESS return of 1      int Arm_Torque_Off void   Parameter          void        Returns          Communication Result        Description          Turns torque off on every joint      COMM_RXSUCCESS return of 1      int Arm_Set_JointPosition veci position   Parameter          joint angle array        Returns          Communication Result        Description          Sets joint angles      COMM_RXSUCCESS return of 1      int Arm_Set_JointVelocity veci velocity   Parameter          int joint velocity array        Returns          Communication Result        Description          Sets joint valocities      COMM_RXSUCCESS return of 1      int Arm_Set_JointVelocity int velocity   Parameter          int joint velocity        Returns          Communication Result        Description          Sets joint velocities      COMM_RXSUCCESS return of 1      int Arm_Set_JointAcceleration veci accel   Parameter          int joint Acceleration array        Returns          Communication Result        Description          Sets joint accelerations      COMM_RXSUCCESS return of 1      int Arm_Set_JointAcceleration int accel   Parameter          int joint Acceleration        Returns          Communication Result        Description          Sets joint accelerations      COMM_RXSUCCESS return of 1      int Arm_Set_Position_PID_Gain int P_Gain  int I_Gain  int D_Gain   Parameter          int joint Position P  I  D gain        Returns          Communication Result        Description          Sets joints’ PID gain values      COMM_RXSUCCESS return of 1      int Arm_Set_Position_PID_Gain int id  int P_Gain  int I_Gain  int D_Gain  int  ErrorStatus   Parameter          int id  int joint Position P  I  D gain        Returns          Communication Result        Description          Sets joints’ PID gain values      ErrorStatus is error pointer      COMM_RXSUCCESS return of 1      int Arm_Get_JointPosition veci  position   Parameter          joint position array        Returns          Communication Result        Description          Access position array and gets joint positions      COMM_RXSUCCESS return of 1      int Arm_Get_JointCurrent veci  torque   Parameter          joint current array        Returns          Communication Result        Description          Reads joint’s electrical current flow and saves in   torque  return pointer      COMM_RXSUCCESS return of 1      int Arm_LED_On void   Parameter          void        Returns          Communication Result        Description          Turns joints’ LED on      COMM_RXSUCCESS return of 1      int Arm_LED_Off void   Parameter          void        Returns          Communication Result        Description          Turns joints’ LED off      COMM_RXSUCCESS return of 1      int Arm_LED_On int r  int g  int b   Parameter          int r  int g  int b        Returns          Communication Result        Description          Controls DYNAMIXEL Pro’s RGB LED      r  g  b  rage is 0 255 each      COMM_RXSUCCESS return of 1      int Arm_Red_LED_On void int Arm_Green_LED_On void int Arm_Blue_LED_On void   Parameter          void        Returns          Communication Result        Description          turns joints’ LED on to red Arm_Red_LED_On       turns joints’ LED on to green Arm_Green_LED_On       turns joints’ LED on to blue Arm_Blue_LED_On       COMM_RXSUCCESS return of 1      void Gripper_ID_Setup veci Gripper_ID_List   Parameter          ID array        Returns          void        Description          Sets ID for gripper       int Gripper_Ping void   Parameter          void        Returns          Communication Result        Description          Pings comm to gripperGripper      COMM_RXSUCCESS return of 1      int Gripper_Torque_On void   Parameter          void        Returns          Communication Result        Description          Turns gripper torque on      COMM_RXSUCCESS return of 1      int Gripper_Torque_Off void   Parameter          void        Returns          Communication Result        Description          Turns gripper torque off      COMM_RXSUCCESS return of 1      int Gripper_Get_Joint_Value veci  value   Parameter          Joint value array stored in address        Returns          Communication Result        Description          Access gripper’s angles from stored address      COMM_RXSUCCESS return of 1      int Gripper_Set_Joint_Value veci value   Parameter          Joint value array        Returns          Communication Result        Description          Sets gripper joint value      COMM_RXSUCCESS return of 1      TimerMotionTimer htime measurement fromQueryPerformanceCountervoid Start void   Parameter          void        Returns          void        Description          Sets start time      void Stop void   Parameter          void        Returns          void        Description          Stops time measurement      double GetElapsedTime void   Parameter          void        Returns          ElapsedTime in milliseconds        Description          Returns time from start to stop      void Wait double millisec   Parameter          millisecond  waiting time in milliseconds you want        Returns          void        Description          Waits amount of time msec  for standby      Mass PropertyCoordinateTotal Mass  5 551gLink 1  Mass g   1 030  Center of Gravity mm           x  0      y  1      z  1 1        Inertia Tensor g   mm2           Ixx Ixy Ixz  1 4957303e 06 0 0000000e 00 0 0000000e 00      Iyx Iyy Iyz  0 0000000e 00 4 5009641e 05 1 0959043e 04      Izz Izy Izz  0 0000000e 00 1 0959043e 04 1 4874997e 06        Principal Moments g   mm2           I1  4 4998065e 05      I2  1 4876155e 06      I3  1 4957303e 06      Link 2  Mass g   1 404  Center of Gravity mm           x  17 9      y  0 3      z  206 9        Inertia Tensor g   mm2           Ixx Ixy Ixz  1 0627201e 07 1 2357497e 04 1 2920605e 06      Iyx Iyy Iyz  1 2357497e 04 1 0014640e 07 1 5798255e 05      Izz Izy Izz  1 2920605e 06 1 5798255e 05 1 9568681e 06        Principal Moments g   mm2           I1  1 7653895e 06      I2  1 0017530e 07      I3  1 0815789e 07      Link 3  Mass g   1 236  Center of Gravity mm           x  0 2      y  0 3      z  387 9        Inertia Tensor g   mm2           Ixx Ixy Ixz  3 1318491e 06 –6 0760429e 03 2 4765806e 04      Iyx Iyy Iyz  6 0760429e 03 2 9193915e 06 4 2823763e 04      Izz Izy Izz  2 4765806e 04 4 2823763e 04 9 2402606e 05        Principal Moments g   mm2           I1  9 2282696e 05      I2  2 9201652e 06      I3  3 1322745e 06      Link 4  Mass g   491  Center of Gravity mm           x  0      y  1 5      z  514 3        Inertia Tensor g   mm2           Ixx Ixy Ixz  3 9670485e 05 –3 3867048e 00 4 7608394e 01      Iyx Iyy Iyz  3 3867048e 00 2 3556702e 05 3 9098238e 03      Izz Izy Izz  4 7608394e 01 3 9098238e 03 2 9647894e 05        Principal Moments g   mm2           I1  2 3531708e 05      I2  2 9672886e 05      I3  3 9670487e 05      Link 5  Mass g   454  Center of Gravity mm           x  0      y  0 8      z  591 5        Inertia Tensor g   mm2           Ixx Ixy Ixz  4 7548066e 05 0 0000000e 00 0 0000000e 00      Iyx Iyy Iyz  0 0000000e 00 3 9961989e 05 1 4840847e 04      Izz Izy Izz  0 0000000e 00 1 4840847e 04 1 9795791e 05        Principal Moments g   mm2           I1  1 9687159e 05      I2  4 0070622e 05      I3  4 7548066e 05      ",
      "url": "http://0.0.0.0:4000/docs/en/platform/manipulator_h/introduction/"
      } ,
  
  
      "docs-en-platform-op-development":  {
      "title": "DARwIn-OP",
      "content"	 : "DevelopmentGetting ReadyConnect to OPDirect ConnectionYou may connect to DARWINOP directly with conventional USB keyboard  USB mouse and HDMIcompatible display Via Wired EthernetFrom your computer go to your ethernet port settings and set the following  DHCP  autoor  DHCP  manual  IP  192 168 123 100   you can choose 192 168 123 2   192 168 123 255    Subnet mask  255 255 255 0  Default gateway  192 168 123 1Then connect an ethernet cable from PC to DARWINOP Via Wireless EthernetYou may also connect to DARWINOP via wireless LAN You may need to be familiar with network settings to successfully connect to DARWINOP wirelessly Connecting to DARWINOP wirelessly may be differentdepending on the access point wireless router Example Procedure  firsttime connection   Connect to DARWINOP either directly or via wired LAN  If connected via wired LAN access DARWINOP with remote desktop  VNC   Access DARWINOP’s Ubuntu’s desktop  Access network connections  on the upper right part of the desktop  and select the wireless SSID  Make sure you established connection  Afterwards you will need to check for DHCP assigned IP address  Open a terminal window and type ifconfig  Check for inet addr under wlan0  it is highly recommended that you write this number down    Use this number to connect to DARWINOP wirelessly  You may connect via any method using this number  VNC  PuTTY  SAMBA drive  ZOC  etc    You can save the wifi settings by properly shutting down DARWINOP  Shutdown information can be found here  The shutdown procedure is essential so that wifi connection settings are saved in the PC  The next time connecting to DARWINOP wirelessly you may skip steps 1 through 8 Attention  It is possible to establish wireless connection to DARWINOP automatically as long as the the wireless IP address remains unchanged  You may need to peridically check for any changes in your access point wireless router’s DHCP  Please consult your access point wireless router for further information   It is highly recommended that wifi signal strength remains above 50% for optimized throughput  A weak signal may adversely affect wifi performance  for example MJPEG streaming    Make sure that there are no other devices operating that cause harmful interference with the wifi signal  for example microwave ovens    If you have trouble connecting wirelessly you may need to check wifi settings by connecting to DARWINOP directly or via wired LAN  or checking the settings of your access point wireless router Terminal Client  SSH You may use existing terminal client software  i e  PuTTY  ZOC  etc  to connect to DARWINOP   Example with PuTTY          Execute PuTTY      On IP address input  192 168 123 1      Select SSH as the connection type      For user name input  darwin      For password input  111111  that is six 1’s       ROBOTIS recommends that users connect via terminal client Remote Desktop  VNC You may connect via remote desktop if you prefer graphical interfaces   Example with Ultra VNC Viewer          Excute Ultra VNC Viewer      On IP address input  192 168 123 1      For password input  111111  that is six 1’s       Accessing DARWINOP via remote desktop may result inslower performance  This is a limitation from Intel’s platform SambaSamba server is installed in DARWINOP  Samba is an implementation of the SMB CIFS protocol for Unix systems  providing support for crossplatform file and printer sharing with Microsoft Windows  OS X  and other Unix systems   Example with Microsoft Windows           Execute File explorer      Type 192 168 123 1 on the address bar      root directory is root directory      of DARWINOP      You can map network drive Source CodeYou may find the source code directory at  darwin from DARWINOP’s PC The preinstalled source code may be updated without prior notice  Please check for updates periodically You may obtain updated source code at the followinghttps  sourceforge net projects darwinop files You may also update the source code via Subversion with the command svn up from the directory  darwin in DARWINOP  This method assumes DARWINOP has internet access Terminate Demo Program      If you wish to run other programs  such as the tools  customization  continue running DARwInOP without the preinstalled demo program then you need to terminate the demo program         The operating chapter mentions the RESET button and its function exclusively for the sub controller  However  the camera and executable program  the demo program  are not controlled by the sub controller therefore  whenever you press the reset button the camera and program will remain unaffected and continue running   Killing the demo program is necessary to free up PC resources taken by the camera and executable To initiate a kill process following the procedure below  Open the terminal window  from DARwInOP or terminal client   Optain root user permission by typing ‘sudo su’ at the command line   Enter the password ‘111111’  six ones   assuming you’re under darwin username   Keep in mind that keystrokes are not shown on this step   Type ‘killall demo’ Once the kill process is complete you may rerun the demo program or any other programs How to stop the demo program from running automatically every time DARwInOP is turned on The PC inside DARwInOP is set to run the demo program by default  However  users wishing to prevent this operation may do so by the following procedure  Go to the directory  etc  With a text editor open the file rc local  You shoud be root user    The file content looks like the image below   Modify the file by adding   at the beggining of the  darwin Linux project demo demoAfterwards the contents should look like the image belowAdding the   sign means that the line has been commented out  After insertion of the   sign save the changes  On the next booting of DARwInOP the demo program will no longer run automatically Execute Demo ProgramIf you encounter an error with one or more actuators  LED blinking  during the demonstration program then you should immediately stop You may rerun the program without shutting down and restarting DARWINOP To rerun the demo program follow the procedure below  Press RESET on DARWINOP   Connect to DARWINOP either directly or via networking  recommended    Obtain root user privileges  sudo su procedure  The illustration above depicts the reexecution of the demo programNote  the execute command is   demo  amp instead of the normal   demo  the line below reads  1  10223What do point 1 and point 2 mean   Executing   demo  amp instead of   demo means that the demo program is background process therefore allows you to close the current working terminal window and end any connections with DARWINOP while the program runs  The  amp sign makes it a background process    1  means only one process for demo is running and 10223 is the process number in Ubuntu To end the demo program you may perform the killall procedure or just run kill 10223  in this case  FrameworkCM730 ReferencesPlatformCM730 ClassInterface classes for CM730 port control  Each platform gets its matching classesInterfacesvirtual bool OpenPort   Opens CM730 port   Arguments  None  Return  Returns true on success  On error  false is returned virtual void ClosePort   Closes CM730 port   Arguments  None  Return  Nonevirtual void ClearPort   Discards data received but not read   Arguments  None  Return  Nonevirtual int WritePort  unsigned char  packet  int numPacket  Writes up to numPacket bytes from the buffer pointed packet to CM730 port   Arguments            Name      Type      Description                  packet      unsigned char       write buffer pointer              numPacket      int      the number of bytes to write        Return  On success  the number of bytes written is returned  On error  1 is returned virtual int ReadPort  unsigned char  packet  int numPacket  Attempts to read up to numPacket bytes from CM730 port into the buffer starting at packet   Arguments            Name      Type      Description                  packet      unsigned char       read buffer pointer              numPacket      int      the number of bytes to read        Return  On success  the number of bytes read is returned  On error  1 is returned virtual void LowPriorityWait   Waits for lowpriority Semaphore   Arguments  None  Return  Nonevirtual void MidPriorityWait   Waits for middlepriority Semaphore   Arguments  None  Return  Nonevirtual void HighPriorityWait   Waits for highpriority Semaphore   Arguments  None  Return  Nonevirtual void LowPriorityRelease   Returns lowpriority Semaphore   Arguments  None  Return  Nonevirtual void MidPriorityRelease   Returns middlepriority Semaphore   Arguments  None  Return  Nonevirtual void HighPriorityRelease   Returns highpriority Semaphore   Arguments  None  Return  Nonevirtual void SetPacketTimeout  int lenPacket  Sets packet reception timeout   Arguments            Name      Type      Description                  lenPacket      int      Waits for Packet bytes        Return  Nonevirtual bool IsPacketTimeout   Gets Packet timeout occurence   Arguments  None  Return  Return true on timeout virtual double GetPacketTime     Arguments  None  Return  Return packet time virtual void SetUpdateTimeout  int msec  Sets timeout refresh in control table   Arguments            Name      Type      Description                  msec      int      refresh time        Return  Nonevirtual bool IsUpdateTimeout   Gets refresh timeout occurence   Arguments  None  Return  Retrun true on timeout updated virtual double GetUpdateTime     Arguments  None  Return  Return updated time virtual void Sleep  int msec  makes the calling process sleep until msec milliseconds have elapsed   Arguments            Name      Type      Description                  msec      int      timeout setting value  milliseconds         Return  NoneCM730 ClassCommunication with CM730 board Class platform porting is necessary for proper functionality Enermerations  amp DefinesCommunication ResultOutput message of during link between Dynamixel and CM730             Name      Description                  SUCCESS      Successful communicationa with Dynamixel              TX_CORRUPT      Problems with Instruction Packet              TX_FAIL      Port error  failed to send Instruction Packet              RX_FAIL      Port error  failed to receive Status Packet              RX_TIMEOUT      Timeout Status  failed to receive Packet  please check connections               RX_CORRUPT      Status Packet error  bad communications link       Error bit flagStatus Packet Error flag            Name      Value      Bit      Description                  INPUT_VOLTAGE      1  0x01       1      Input Voltage range in over the limit               ANGLE_LIMIT      2  0x02       2      Set Angle limit problem s                OVERHEATING      4  0x04       3      Internal overheating               RANGE      8  0x08       4      Set value s  out of range               CHECKSUM      16  0x10       5      Instruction Packet Checksum error               OVERLOAD      32  0x20       6      Excessive load detected               INSTRUCTION      64  0x40       7      Invalis Instruction Packet Instruction       Special IDSpecial ID’s            Name      Value      Description                  ID_CM      200      ID for Sub Controller              ID_BROADCAST      254      Communication with all connected device      AddressControl Table Address            Name      Address      Description                  P_MODEL_NUMBER_L      0  0x0       Lowest byte of model number              P_MODEL_NUMBER_H      1  0x1       Highest byte of model number              P_VERSION      2  0x2       Information on the version of firmware              P_ID      3  0x3       ID of CM730              P_BAUD_RATE      4  0x4       Baud Rate of CM730              P_RETURN_DELAY_TIME      5  0x5       Retrun Delay Time              P_RETURN_LEVEL      16  0x10       Status Return Level              P_DXL_POWER      24  0x18       Dynamixel Power              P_LED_PANNEL      25  0x19       LED of back pannel              P_LED_HEAD_L      26  0x1A       Low byte of Head LED              P_LED_HEAD_H      27  0x1B       High byte of Head LED              P_LED_EYE_L      28  0x1C       Low byte of Eye LED              P_LED_EYE_H      29  0x1D       High byte of Eye LED              P_BUTTON      30  0x1E       Button              P_GYRO_Z_L      38  0x26       Low byte of Gyro Zaxis              P_GYRO_Z_H      39  0x27       High byte of Gyro Zaxis              P_GYRO_Y_L      40  0x28       Low byte of Gyro Yaxis              P_GYRO_Y_H      41  0x29       High byte of Gyro Yaxis              P_GYRO_X_L      42  0x2A       Low byte of Gyro Xaxis              P_GYRO_X_H      43  0x2B       High byte of Gyro Xaxis              P_ACCEL_X_L      44  0x2C       Low byte of Accelerometer Xaxis              P_ACCEL_X_H      45  0x2D       High byte of Accelerometer Xaxis              P_ACCEL_Y_L      46  0x2E       Low byte of Accelerometer Yaxis              P_ACCEL_Y_H      47  0x2F       High byte of Accelerometer Yaxis              P_ACCEL_Z_L      48  0x30       Low byte of Accelerometer Zaxis              P_ACCEL_Z_H      49  0x31       High byte of Accelerometer Zaxis              P_VOLTAGE      50  0x32       Present Voltage              P_LEFT_MIC_L      51  0x33       Low byte of Left Mic  ADC value              P_LEFT_MIC_H      52  0x34       High byte of Left Mic  ADC value              P_ADC2_L      53  0x35       Low byte of ADC 2              P_ADC2_H      54  0x36       High byte of ADC 2              P_ADC3_L      55  0x37       Low byte of ADC 3              P_ADC3_H      56  0x38       High byte of ADC 3              P_ADC4_L      57  0x39       Low byte of ADC 4              P_ADC4_H      58  0x3A       High byte of ADC 4              P_ADC5_L      59  0x3B       Low byte of ADC 5              P_ADC5_H      60  0x3C       High byte of ADC 5              P_ADC6_L      61  0x3D       Low byte of ADC 6              P_ADC6_H      62  0x3E       High byte of ADC 6              P_ADC7_L      63  0x3F       Low byte of ADC 7              P_ADC7_H      64  0x40       High byte of ADC 7              P_ADC8_L      65  0x41       Low byte of ADC 8              P_ADC8_H      66  0x42       High byte of ADC 8              P_RIGHT_MIC_L      67  0x43       Low byte of Right Mic  ADC value              P_RIGHT_MIC_H      68  0x44       High byte of Right Mic  ADC value              P_ADC10_L      69  0x45       Low byte of ADC 10              P_ADC10_H      70  0x46       High byte of ADC 10              P_ADC11_L      71  0x47       Low byte of ADC 11              P_ADC11_H      72  0x48       High byte of ADC 11              P_ADC12_L      73  0x49       Low byte of ADC 12              P_ADC12_H      74  0x50       High byte of ADC 12              P_ADC13_L      75  0x51       Low byte of ADC 13              P_ADC13_H      76  0x52       High byte of ADC 13              P_ADC14_L      77  0x53       Low byte of ADC 14              P_ADC14_H      78  0x54       High byte of ADC 14              P_ADC15_L      79  0x55       Low byte of ADC 15              P_ADC15_H      80  0x56       High byte of ADC 15      ConstructionsCM730 PlatformCM730  platform    Arguments            Name      Type      Description                  platform      PlatformCM730            Methodsbool Connect   Links CM730   Arguments  None  Return  true  sucess   false  failure void Disconnect   Releases CM730   Arguments  None  Return  Noneint Ping  int id  int  error  Check the existance of Dynamixel with selected id   Arguments            Name      Type      Description                  id      int      Dynamixel ID for checking              error      int       Status packet error        Return  Communication Resultint ReadByte  int address  int  pValue  int  error  Reads unit byte from CM730 Control Table value  Arguments            Name      Type      Description                  address      int      Control Table address              pValue      int       saves read values              error      int       Status packet error        Return  Communication Resultint ReadByte  int id  int address  int  pValue  int  error  Reads unit byte from CM730 Control Table value  Arguments            Name      Type      Description                  id      int      Dynamixel ID              address      int      Control Table address              pValue      int       saves read values              error      int       Status packet error        Return  Communication Resultint ReadWord  int address  int  pValue  int  error  Reads 2 bytes from CM730 Control Table value  Arguments            Name      Type      Description                  address      int      Control Table address              pValue      int       saves read values              error      int       Status packet error        Return  Communication Resultint ReadWord  int id  int address  int  pValue  int  error  Reads 2 bytes from CM730 Control Table value  Arguments            Name      Type      Description                  id      int      Dynamixel ID              address      int      Control Table address              pValue      int       saves read values              error      int       Status packet error        Return  Communication Resultint ReadTable  int start_addr  int end_addr  unsigned char  table  int  error  Reads 2 bytes from CM730 Control Table value  Arguments            Name      Type      Description                  start_addr      int      Control table start address              end_addr      int      Control table end address              table      unsigned char       Read data buffer              error      int       Status packet error        Return  Communication Resultint ReadTable  int id  int start_addr  int end_addr  unsigned char  table  int  error  Reads CM730 Control Table value from start_addr to end_addr  Arguments            Name      Type      Description                  id      int      Dynamixel ID              start_addr      int      Control table start address              end_addr      int      Control table end address              table      unsigned char       Read data buffer              error      int       Status packet error        Return  Communication Resultint WriteByte  int address  int value  int  error  Writes unit byte to CM730 Control Table  Arguments            Name      Type      Description                  address      int      Control Table address              value      int      write value              error      int       Status packet error        Return  Communication Resultint WriteByte  int id  int address  int  pValue  int  error  Writes unit byte to CM730 Control Table  Arguments            Name      Type      Description                  id      int      Dynamixel ID              address      int      Control Table address              value      int      write value              error      int       Status packet error        Return  Communication Resultint WriteWord  int address  int value  int  error  Writes 2 bytes to CM730 Control Table  Arguments            Name      Type      Description                  address      int      Control Table address              value      int      write value              error      int       Status packet error        Return  Communication Resultint WriteWord  int id  int address  int value  int  error  Writes 2 bytes to CM730 Control Table  Arguments            Name      Type      Description                  id      int      Dynamixel ID              address      int      Control Table address              value      int      write value              error      int       Status packet error        Return  Communication Resultint SyncWrite  int start_addr  int each_length  int number  int  pParam    Arguments            Name      Type      Description                  start_addr      int                    each_length      int                    number      int                    pParam      int               Return  Communication Resultint MakeWord  int lowbyte  int highbyte    Arguments            Name      Type      Description                  lowbyte      int                    highbyte      int              Return  2 bytes integer valueint GetLowByte  int word    Arguments            Name      Type      Description                  word      int              Return  low byteint GetHighByte  int word    Arguments            Name      Type      Description                  word      int              Return  high byteint MakeColor  int red  int green  int blue    Arguments            Name      Type      Description                  red      int                    green      int                    blue      int              Return  color valueMath ReferencesMatrix3D ClassEnumerations  amp Definesm00  m01 … m32  m33Matrix3D hold data maps into a 4x4 matrix array  This array allows usage of enum to access each element m m00   m m01   m m02   m m03  m m10   m m11   m m12   m m13  m m20   m m21   m m22   m m23  m m30   m m31   m m32   m m33 The matrix is represented as follows m 0   m 1   m 2   m 3  m 4   m 5   m 6   m 7  m 8   m 9   m 10   m 11  m 12   m 13   m 14   m 15 MAXNUM_ELEMENTThe maximum number of an arrayConstructionsMatrix3D     Arguments  NoneMatrix3D  const Matrix3D  ampmat    Arguments            Name      Type      Description                  mat      const Matrix3D amp      copy Matrix3D      Data Memberspublic double m MAXNUM_ELEMENT matrix element arrays are defined by MAXNUM_ELEMENT Methodsvoid Identity   Matrix initialization   Arguments  None  Return  Nonebool Inverse   Computes inverses   Arguments  None  Return  true  success   false  failure void Scale  Vector3D  ampscale  Convertion and scaling  Arguments            Name      Type      Description                  scale      Vector3D amp      x  y  z coordinates scaling factor        Return  Nonevoid Rotate  double angle  Vector3D  ampaxis  Rotation conversion   Arguments            Name      Type      Description                  angle      double      rotating angle  in degree units               axis      Vector3D amp      rotating axis        Return  Nonevoid Translate  Vector3D  ampoffset  Motion conversion   Arguments            Name      Type      Description                  angle      double      rotating angle  in degree units               axis      Vector3D amp      rotating axis        Return  NonePoint3D Transform  Point3D  amppoint  Point conversion   Arguments            Name      Type      Description                  point      Point3D amp      point conversion        Return  Conversion resultsvoid SetTransform  Point3D  amppoint  Vector3D  ampangle  Clears conversion information of position and angle information  defaults to existing conversion    Arguments            Name      Type      Description                  point      Point3D amp      Origin coordinates  x  y  z               angle      Vector3D amp      Rotating axis  x  y  z         Return  NoneOperatorsMatrix3D amp operator    const Matrix3D  ampmat   Copies the value of the current matrixMatrix3D amp operator     const Matrix3D  ampmat   Copies the value of the current matrixMatrix3D amp operator    const Matrix3D  ampmat   Returns current matrix operation resultsIncludes   include Point h   include Vector hPlane3D ClassPlane3D point class for 3D operationsConstructionsPlane3D     Arguments  NonePoint2D ClassPoint2D point class for 2D operationsConstructionsPoint2D     Arguments  NonePoint2D  double x  double y    Arguments            Name      Type      Description                  x      double      xcoordinate              y      double      ycoordinate      Point2D  const Point2D  amppoint    Arguments            Name      Type      Description                  point      const Point2D amp      copies Point      Data Memberspublic double X  Xcoordinate valuepublic double Y  Ycoordinate valueMethodsstatic public double Distance  Point2D  amppt1  Point2D  amppt2  Returns the distance between 2 points  Arguments            Name      Type      Description                  pt1      Point2D amp      Point1 distance              pt2      Point2D amp      Point2 distance        Return  Distance between 2 pointsOperatorspublic Point2D amp operator     const Point2D  amppoint  public Point2D amp operator      const Point2D  amppoint  public Point2D amp operator     const Point2D  amppoint  public Point2D amp operator      const double value  public Point2D amp operator     const double value  public Point2D amp operator      const double value  public Point2D amp operator      const double value  public Point2D operator     const Point3D  amppoint  public Point2D operator    const Point2D  amppoint  public Point2D operator     const double value  public Point2D operator    const double value  public Point2D operator     const double value  public Point2D operator     const double value  Point3D ClassPoint3D point class for 3D operationsConstructionsPoint3D     Arguments  NonePoint3D  double x  double y  double z    Arguments            Name      Type      Description                  x      double      xcoordinate              y      double      ycoordinate              z      double      zcoordinate      Point3D  const Point3D  amppoint    Arguments            Name      Type      Description                  point      const Point3D amp      copies Point      Data Memberspublic double X  Xcoordinate valuepublic double Y  Ycoordinate valuepublic double Z  Zcoordinate valueMethodsstatic public double Distance  Point3D  amppt1  Point3D  amppt2  Returns the distance between 2 points   Arguments            Name      Type      Description                  pt1      Point3D amp      Point1 distance              pt2      Point3D amp      Point2 distance        Return  distance between 2 pointsOperatorspublic Point3D amp operator     const Point3D  amppoint  public Point3D amp operator      const Point3D  amppoint  public Point3D amp operator     const Point3D  amppoint  public Point3D amp operator      const double value  public Point3D amp operator     const double value  public Point3D amp operator      const double value  public Point3D amp operator      const double value  public Point3D operator     const Point3D  amppoint  public Point3D operator    const Point3D  amppoint  public Point3D operator     const double value  public Point3D operator    const double value  public Point3D operator     const double value  public Point3D operator     const double value  Vector3D ClassVector class point for 3D operationsConstructionsVector3D     Arguments  NoneVector3D  double x  double y  double z    Arguments            Name      Type      Description                  x      double      xcoordinate              y      double      ycoordinate              z      double      zcoordinate      Vector3D  const Point3D  amppt1  const Point3D  amppt2    Arguments            Name      Type      Description                  pt1      const Point3D amp      Vector initial position              pt2      const Point3D amp      Vector final position      Vector3D  const Vector3D  ampvector    Arguments            Name      Type      Description                  vector      const Vector3D amp      copies Vector      Data Memberspublic double X  Xcoordinate valuepublic double Y  Ycoordinate valuepublic double Z  Zcoordinate valueMethodspublic double Length   Calculates vector length  Arguments  None  Return  Vector lengthpublic void Normalize   Normalizes the vector  Arguments  None  Return  Nonepublic double Dot  Vector3D  ampvector  Performs vector dot products  Arguments            Name      Type      Description                  vector      Vector3D amp      Vector dot product        Return  Returns dot productspublic Vector3D Cross  const Vector3D  ampvector  Performs vector cross products  Arguments            Name      Type      Description                  vector      const Vector3D amp      vector cross product        Return  Returns cross productspublic double AngleBetween  Vector3D  ampvector  Computes the angle between vectors  Arguments            Name      Type      Description                  vector      Vector3D amp      Angles between vectors        Return  Value  0   180  in degrees public double AngleBetween  Vector3D  ampvector  Vector3D  ampaxis  Returns the angle between vectors axes  Arguments            Name      Type      Description                  vector      Vector3D amp      Angle between Vector              axis      Vector3D amp      Angle between coordinates axes        Return  Value  180   180  in degreesOperatorspublic Vector3D amp operator     const Vector3D  ampvector    Copies the current vector valuepublic Vector3D amp operator      const Vector3D  ampvector    Sum of the results of 2 operations of current vectorpublic Vector3D amp operator     const Vector3D  ampvector    Subtraction of the results of 2 operations of current vectorpublic Vector3D amp operator      const double value  public Vector3D amp operator     const double value  public Vector3D amp operator      const double value  public Vector3D amp operator      const double value  public Vector3D operator     const Vector3D  ampvector    Vector sum operationpublic Vector3D operator    const Vector3D  ampvector    Vector subtraction operationpublic Vector3D operator     const double value  public Vector3D operator    const double value  public Vector3D operator     const double value  public Vector3D operator     const double value  Includes   include Point hminINI ReferenceMININI is a minimal INI file parserminIni is a programmer’s library to read and write INI files in embedded systems The minIni library is distributed unter the Apache License  version 2 0  plus an aceptance clause to explicitly permit static linking of the library for commercial applications Get more informations  http  www compuphase com minini htmMotion ReferencesJointData ClassMotion Class shares data between classesEnermerations  amp DefinesJoint ID  Joint ID is the same as Dynamixel IDCompliance Slopeenum value can be used with Compliance Slope            Name      Value                  SLOPE_HARD      16              SLOPE_DEFAULT      32              SLOPE_SOFT      64              SLOPE_EXTRASOFT      128      ConstructionsJointData     Arguments  NoneMethodsvoid SetEnable  int id  bool enable  Sets ID’s in Joint Enable   Arguments            Name      Type      Description                  id      int      Joint ID              enable      bool      use availability        Return  Nonevoid SetEnableHeadOnly  bool enable  Sets ID’s  the sample line below only enables the ID’s for the head and neck  Head ID    ID_HEAD_PAN  ID_HEAD_TILT   Arguments            Name      Type      Description                  enable      bool      use availability        Return  Nonevoid SetEnableRightArmOnly  bool enable  Sets the ID  the sample line below only enables the ID’s for the right arm  Right Arm ID    ID_R_SHOULDER_PITCH  ID_R_SHOULDER_ROLL  ID_R_ELBOW   Arguments            Name      Type      Description                  enable      bool      use availability        Return  Nonevoid SetEnableLeftArmOnly  bool enable  Sets the ID  the sample line below only enables the ID’s for the left arm  Left Arm ID    ID_L_SHOULDER_PITCH  ID_L_SHOULDER_ROLL  ID_L_ELBOW   Arguments            Name      Type      Description                  enable      bool      use availability        Return  Nonevoid SetEnableRightLegOnly  bool enable  Sets the ID  the sample line below only enables the ID’s for the right leg  Right Leg ID    ID_R_HIP_YAW  ID_R_HIP_ROLL  ID_R_HIP_PITCH  ID_R_KNEE  ID_R_ANKLE_PITCH  ID_R_ANKLE_ROLL   Arguments            Name      Type      Description                  enable      bool      use availability        Return  Nonevoid SetEnableLeftLegOnly  bool enable  Sets the ID  the sample line below only enables the ID’s for the left leg  Left Leg ID    ID_L_HIP_YAW  ID_L_HIP_ROLL  ID_L_HIP_PITCH  ID_L_KNEE  ID_L_ANKLE_PITCH  ID_L_ANKLE_ROLL   Arguments            Name      Type      Description                  enable      bool      use availability        Return  Nonevoid SetEnableUpperBodyWithoutHead  bool enable  Sets the ID  the sample lines below only enables the ID’s for the upper body without the head  Right Arm ID    ID_R_SHOULDER_PITCH  ID_R_SHOULDER_ROLL  ID_R_ELBOW Left Arm ID    ID_L_SHOULDER_PITCH  ID_L_SHOULDER_ROLL  ID_L_ELBOW   Arguments            Name      Type      Description                  enable      bool      use availability        Return  Nonevoid SetEnableLowerBody  bool enable  Sets the ID  the sample lines below only enables the ID’s for the lower body  Right Leg ID    ID_R_HIP_YAW  ID_R_HIP_ROLL  ID_R_HIP_PITCH  ID_R_KNEE  ID_R_ANKLE_PITCH  ID_R_ANKLE_ROLL Left Leg ID    ID_L_HIP_YAW  ID_L_HIP_ROLL  ID_L_HIP_PITCH  ID_L_KNEE  ID_L_ANKLE_PITCH  ID_L_ANKLE_ROLL   Arguments            Name      Type      Description                  enable      bool      use availability        Return  Nonevoid SetEnableBodyWithoutHead  bool enable  Sets the ID  the sample lines below only enable the body’s ID without the head and neck  Right Arm ID    ID_R_SHOULDER_PITCH  ID_R_SHOULDER_ROLL  ID_R_ELBOW Left Arm ID    ID_L_SHOULDER_PITCH  ID_L_SHOULDER_ROLL  ID_L_ELBOW Right Leg ID    ID_R_HIP_YAW  ID_R_HIP_ROLL  ID_R_HIP_PITCH  ID_R_KNEE  ID_R_ANKLE_PITCH  ID_R_ANKLE_ROLL Left Leg ID    ID_L_HIP_YAW  ID_L_HIP_ROLL  ID_L_HIP_PITCH  ID_L_KNEE  ID_L_ANKLE_PITCH  ID_L_ANKLE_ROLL   Arguments            Name      Type      Description                  enable      bool      use availability        Return  Nonevoid SetEnableBody  bool enable  Sets the ID  the sample lines below set all ID’s in use individually  Head ID    ID_HEAD_PAN  ID_HEAD_TILT Right Arm ID    ID_R_SHOULDER_PITCH  ID_R_SHOULDER_ROLL  ID_R_ELBOW Left Arm ID    ID_L_SHOULDER_PITCH  ID_L_SHOULDER_ROLL  ID_L_ELBOW Right Leg ID    ID_R_HIP_YAW  ID_R_HIP_ROLL  ID_R_HIP_PITCH  ID_R_KNEE  ID_R_ANKLE_PITCH  ID_R_ANKLE_ROLL Left Leg ID    ID_L_HIP_YAW  ID_L_HIP_ROLL  ID_L_HIP_PITCH  ID_L_KNEE  ID_L_ANKLE_PITCH  ID_L_ANKLE_ROLL   Arguments            Name      Type      Description                  enable      bool      use availability        Return  Nonepublic bool GetEnable  int id  Returns the ID s  of Joint Enable   Arguments            Name      Type      Description                  id      int      determines use availability of joint ID        Return  true falsepublic void SetValue  int id  int value  Sets ID joint value   Arguments            Name      Type      Description                  id      int      sets joint ID              value      int      sets motor value        Return  Noneint GetValue  int id  Returns ID joint value   Arguments            Name      Type      Description                  id      int      returns joint ID        Return  Motor value setvoid SetAngle  int id  double angle  Sets ID joint angle   Arguments            Name      Type      Description                  id      int      sets joint ID              angle      double      sets angle value        Return  Nonedouble GetAngle  int id  Returns ID joint angle   Arguments            Name      Type      Description                  id      int      returns joint ID        Return  Angle value setvoid SetRadian  int id  double radian  Sets ID joint angle in radians   Arguments            Name      Type      Description                  id      int      sets joint ID              radian      double      sets angle value in radians        Return  Nonedouble GetRadian  int id  Returns ID joint angle in radians   Arguments            Name      Type      Description                  id      int      returns joint ID        Return  Sets angle values in radiansvoid SetSlope  int id  int cwSlope  int ccwSlope  Sets ID of CW CCW  clockwise counterclockwise  compliance slopes   Arguments            Name      Type      Description                  id      int      sets Joint ID              cwSlope      int      sets CW  clockwise  compliance slope value              ccwSlope      int      sets CCW  counterclockwise  compliance slope value        Return  Nonevoid SetCWSlope  int id  int cwSlope  Sets ID of CW compliance slope   Arguments            Name      Type      Description                  id      int      sets joint ID              cwSlope      int      sets CW compliance slope value        Return  Noneint GetCWSlope  int id  Returns CW compliance slope   Arguments            Name      Type      Description                  id      int      returns joint ID        Return  Sets CW compliance slope valuevoid SetCCWSlope  int id  int ccwSlope  Sets ID of CCW compliance slope   Arguments            Name      Type      Description                  id      int      sets joint ID              ccwSlope      int      sets CCW compliance slope value        Return  Noneint GetCCWSlope  int id  Returns ID of CCW Compliance Slope   Arguments            Name      Type      Description                  id      int      returns Joint ID        Return  Sets CCW Compliance Slope valueKinematics ClassRobot Kinematics class informationConstructionsKinematics     Arguments  NoneData Membersstatic const double CAMERA_DISTANCE   mm static const double EYE_TILT_OFFSET_ANGLE   degree static const double LEG_SIDE_OFFSET  Gap between both feet  mm static const double THIGH_LENGTH  Thigh length  mm static const double CALF_LENGTH  Calf length  mm static const double ANKLE_LENGTH  Ankle length  mm static const double LEG_LENGTH  Leg length  mm   LEG_LENGTH   THIGH_LENGTH   CALF_LENGTH   ANKLE_LENGTHMethodsKinematics  GetInstance    Arguments  None  Return  Kinematics private unique instanceIncludes   include Matrix h   include JointData hAction ClassEnermerations  amp DefinesMax Numbers  enum Maximum values of each properties             Name      Value      Description                  MAXNUM_PAGE      256      Maximum number of page              MAXNUM_STEP      7      Maximum number of step              MAXNUM_NAME      13      Maximum length of page name      Schedule type  enum             Name      Value      Description                  SPEED_BASE_SCHEDULE      0x0                    TIME_BASE_SCHEDULE      0x0a            Bit mask  enum Position value bit mask             Name      Value      Description                  RANGE_BIT_MASK      0x03FF      Position value bit mask              INVALID_BIT_MASK      0x4000      Invalid position value bit mask              TORQUE_OFF_BIT_MASK      0x2000      Torque off bit mask      struct PAGEHEADERHeader structure   total 64 bytes             Name      Type      Length      Description                  name      unsigned char        14      page name              reserved1      unsigned char      1      reserved 1              repeat      unsigned char      1      repeat count              schedule      unsigned char      1      schedule              reserved2      unsigned char        3      reserved 2              stepnum      unsigned char      1      Number of step              reserved3      unsigned char      1      reserved 3              speed      unsigned char      1      Speed              reserved4      unsigned char      1      reserved 4              accel      unsigned char      1      Acceleration time              next      unsigned char      1      Link to next              exit      unsigned char      1      Link to exit              reserved5      unsigned char        4      reserved 5              checksum      unsigned char      1      checksum              slope      unsigned char        31      CW CCW compliance slope              reserved6      unsigned char      1      reserved 6      struct STEPStep Structure  total 64 bytes             Name      Type      Length      Description                  position      unsigned short        62      Joint position              pause      unsigned char      1      Pause time              time      unsigned char      1      Time      struct PAGEPage Structure  total 512 bytes             Name      Type      Length      Description                  header      PAGEHEADER      64      Joint position              step      STEP        448      Pause time      Data Membersbool DEBUG_PRINT  Enable Disable debugging message print Methodsstatic Action  GetInstance   Method to obtain global reference for Instance   Arguments  None   Return  pointer of Action’s unique instance void Initialize   Initialize   Arguments  None  Return  Nonevoid Process   Process   Arguments  None  Return  Nonebool LoadFile  char  filename  Load action information from designated action file   Arguments            Name      Type      Description                  filename      char       Action file name to be read        Return  On success  true is returned  On fail  false is returned bool CreateFile  char  filename  Create a file with assigned file name and save action information   Arguments            Name      Type      Description                  filename      char       file name of the action file to create        Return  On success  true is returned  On fail  false is returned bool Start  int iPage  Play action in the page   Arguments            Name      Type      Description                  iPage      int      page number of the action to play        Return  On success  true is returned  On fail  false is returned bool Start  char  namePage  Play the action in the page name   Arguments            Name      Type      Description                  namePage      char       page name of the action to play        Return  On success  true is returned  On fail  false is returned bool Start  int index  PAGE  pPage    Arguments            Name      Type      Description                  index      int                    pPage      PAGE               Return  On success  true is returned  On fail  false is returned void Stop   Stop playback   Arguments  None  Return  Nonevoid Brake     Arguments  None  Return  Nonebool IsRunning     Arguments  None  Return  On action is running  true is returned  On action is stoped  false is returned bool IsRunning  int  iPage  int  iStep    Arguments            Name      Type      Description                  iPage      int                     iStep      int               Return  On action is running  true is returned  On action is stoped  false is returned bool LoadPage  int index  PAGE  pPage    Arguments            Name      Type      Description                  index      int                    pPage      PAGE               Return  On success  true is returned  On fail  false is returned bool SavePage  int index  PAGE  pPage    Arguments            Name      Type      Description                  index      int                    pPage      PAGE               Return  On success  true is returned  On fail  false is returned void ResetPage  PAGE  pPage    Arguments            Name      Type      Description                  pPage      PAGE               Return  NoneHead ClassMethodsstatic Head  GetInstance   Method to obtain global reference for instance   Arguments  None  Return  Pointer of Head class unique instancevoid Initialize   Method to initialize variables and move head to default position   Arguments  None  Return  Nonevoid Process     Arguments  None  Return  Nonedouble GetTopLimitAngle     Arguments  None  Return  Top limitdouble GetBottomLimitAngle     Arguments  None  Return  Bottom limitdouble GetRightLimitAngle    Arguments  None  Return  Right limitdouble GetLeftLimitAngle     Arguments  None  Return  Left limitdouble GetPanAngle     Arguments  None  Return  Present pan angle valuedouble GetTiltAngle     Arguments  None  Return  Present pan angle valuevoid MoveToHome     Arguments  None  Return  Nonevoid MoveByAngle  double pan  double tilt    Arguments            Name      Type      Description                  pan      double      pan angle value              tilt      double      tilt angle value        Return  Nonevoid MoveByAngleOffset  double pan  double tilt    Arguments            Name      Type      Description                  pan      double      pan angle value              tilt      double      tilt angle value        Return  Nonevoid InitTracking     Arguments  None  Return  Nonevoid MoveTracking  Point2D err    Arguments            Name      Type      Description                  err      Point2D              Return  Nonevoid MoveTracking     Arguments  None  Return  Nonevoid LoadINISettings  minIni  ini    Arguments            Name      Type      Description                  ini      minIni               Return  Nonevoid LoadINISettings  minIni  ini  const stdstring  ampsection    Arguments            Name      Type      Description                  ini      minIni                     section      const stdstring amp              Return  Nonevoid SaveINISettings  minIni  ini    Arguments            Name      Type      Description                  ini      minIni               Return  Nonevoid SaveINISettings  minIni  ini  const stdstring  ampsection    Arguments            Name      Type      Description                  ini      minIni                     section      const stdstring amp              Return  NoneWalking ClassEnermerations  amp DefinesWalking PhasePhase number            Name      Value                  PHASE0      0              PHASE1      1              PHASE2      2              PHASE3      3      Data Membersdouble X_OFFSETdouble Y_OFFSETdouble Z_OFFSETdouble A_OFFSETdouble P_OFFSETdouble R_OFFSETdouble PERIOD_TIMEdouble DSP_RATIOdouble X_MOVE_AMPLITUDEdouble Y_MOVE_AMPLITUDEdouble Z_MOVE_AMPLITUDEdouble A_MOVE_AMPLITUDEbool A_MOVE_ATM_ONbool BALANCE_ENABLEdouble BALANCE_KNEE_GAINdouble BALANCE_ANKLE_PITCH_GAINdouble BALANCE_HIP_ROLL_GAINdouble BALANCE_ANKLE_ROLL_GAINdouble Y_SWAP_AMPLITUDEdouble Z_SWAP_AMPLITUDEdouble ARM_SWING_GAINint PELVIS_OFFSETint HIP_PITCH_OFFSETMethodsstatic Walking  GetInstance   method to obtain global reference for Instance   Arguments  None  Return  pointer of Walking’s unique instance int GetCurrentPhase     Arguments  None  Return  Current phase number double GetBodySwingY     Arguments  None  Return  Y axis body swing value double GetBodySwingZ     Arguments  None  Return  Z axis body swing value void Initialize   Initialize   Arguments  None  Return  Nonevoid Start     Arguments  None  Return  Nonevoid Stop     Arguments  None  Return  Nonevoid Process     Arguments  None  Return  Nonebool IsRunning     Arguments  None  Return  On walking is running  true is returned  On walking is stoped  false is returned void LoadINISettings  minIni  ini    Arguments            Name      Type      Description                  ini      minIni               Return  Nonevoid LoadINISettings  minIni  ini  const stdstring  ampsection    Arguments            Name      Type      Description                  ini      minIni                     section      const stdstring amp              Return  Nonevoid SaveINISettings  minIni  ini    Arguments            Name      Type      Description                  ini      minIni               Return  Nonevoid SaveINISettings  minIni  ini  const stdstring  ampsection    Arguments            Name      Type      Description                  ini      minIni                     section      const stdstring amp              Return  NoneMotionManager ClassMotion Module management classMethodsstatic MotionManager  GetInstance   Method to obtain global reference for Instance   Arguments  None   Return  pointer of MotionManager’s unique instance bool Initialize  CM730  cm730  Initialize   Arguments            Name      Type      Description                  cm730      CM730               Return  On success  true is returned  On fail  false is returned bool Reinitialize   Reinitialize   Arguments  None   Return  On success  true is returned  On fail  false is returned void Process   Periodically performs a called function   Arguments  None  Return  Nonevoid SetEnable  bool enable  Enable the motion manager  Arguments            Name      Type      Description                  enable      bool              Return  Nonebool GetEnable   Get enable status  Arguments  None  Return  Enable statusvoid AddModule  MotionModule  module  Manager updates Motion Module   Arguments            Name      Type      Description                  module      MotionModule       updates Motion Module        Return  Nonevoid RemoveModule  MotionModule  module  Removes Motion Module from Manager   Arguments            Name      Type      Description                  module      MotionModule       removes Motion Module        Return  NoneIncludes   include  ltlist gt   include MotionStatus h   include MotionModule h   include CM730 hMotionStatus ClassMotion Module Feedback controlfor each status classData Membersstatic const int FALLEN_F_LIMIT  Forward fallen acceleration sensor value limitstatic const int FALLEN_B_LIMIT  Backward fallen acceleration sensor value limitstatic const int FALLEN_MAX_COUNT  Countstatic JointData m_CurrentJointsstatic int FB_GYROstatic int RL_GYROstatic int FB_ACCELstatic int RL_ACCELstatic int BUTTON  Button value static int FALLEN  Fallen status value Includes   include JointData hVision ReferencesBallFollower ClassConstructionsBallFollower     Arguments  NoneData Membersint KickBall  Ball position for kicking    1  Right  0  No ball  1  Left  Methodsvoid Process  Point2D ball_pos  Process  Arguments            Name      Type      Description                  ball_pos      Point2D              Return  NoneBallTracker ClassConstructionsBallTracker     Arguments  NoneData MembersColorFinder finder  ColorFinder class for ball searchingPoint2D ball_position  Ball position search via ColorFindeMethodsvoid LoadINISettings  minIni  ini    Arguments            Name      Type      Description                  ini      minIni               Return  Nonevoid LoadINISettings  minIni  ini  const stdstring  ampsection    Arguments            Name      Type      Description                  ini      minIni                     section      const stdstring amp              Return  Nonevoid SaveINISettings  minIni  ini    Arguments            Name      Type      Description                  ini      minIni               Return  Nonevoid SaveINISettings  minIni  ini  const stdstring  ampsection    Arguments            Name      Type      Description                  ini      minIni                     section      const stdstring amp              Return  Nonevoid LoadINISettings  minIni  ini    Arguments            Name      Type      Description                  ini      minIni               Return  Nonevoid LoadINISettings  minIni  ini  const stdstring  ampsection    Arguments            Name      Type      Description                  ini      minIni                     section      const stdstring amp              Return  Nonevoid SaveINISettings  minIni  ini    Arguments            Name      Type      Description                  ini      minIni               Return  Nonevoid Process  Image  camImg    Arguments            Name      Type      Description                  camImg      Image               Return  NoneColorFinder ClassConstructionsColorFinder     Arguments  NoneColorFinder  int hue  int hue_tol  int min_sat  int min_val  double min_per  double max_per    Arguments            Name      Type      Description                  hue      int      Hue value              hue_tol      int      Tolerance in hue  differential                 min_sat      int      Minimum saturation  chroma  value              min_val      int      Minimum brightness  lumina  value              min_per      double      Minimum color pixel filtering              max_per      double      Maximum color pixel filtering      Data Membersint m_hue  Hue value for color   0   360  int m_hue_tolerance  Tolerance value for color  hue differential      0   180  int m_min_saturationint m_min_valuedouble m_min_percentdouble m_max_percentstdstring color_sectionImage  m_resultMethodsvoid LoadINISettings  minIni  ini    Arguments            Name      Type      Description                  ini      minIni               Return  Nonevoid LoadINISettings  minIni  ini  const stdstring  ampsection    Arguments            Name      Type      Description                  ini      minIni                     section      const stdstring amp              Return  Nonevoid SaveINISettings  minIni  ini    Arguments            Name      Type      Description                  ini      minIni               Return  Nonevoid SaveINISettings  minIni  ini  const stdstring  ampsection    Arguments            Name      Type      Description                  ini      minIni                     section      const stdstring amp              Return  NonePoint2D amp GetPosition  Image  hsv_img    Arguments            Name      Type      Description                  hsv_img      Image               Return  Finds position through color Image ClassConstructionsImage  int width  int height  int pixelsize    Arguments            Name      Type      Description                  width      int      Image pixel width              height      int      Image pixel height              pixelsize      int      bytes of pixel      Data Membersstatic const int YUV_PIXEL_SIZE  YUYV type image’s pixel sizestatic const int RGB_PIXEL_SIZE  RGB type image’s pixel sizestatic const int HSV_PIXEL_SIZE  HSV type image’s pixel sizeunsigned char  m_ImageData  pointer to aligned image dataint m_Width  image width in pixelsint m_Height  image height in pixelsint m_PixelSize  pixel size in bytesint m_NumberOfPixels  number of pixelsint m_WidthStep  size of aligned image row in bytesint m_ImageSize  image data size in bytes   image gtm_Height image gtm_WidthStep OperatorsImage amp operator    Image  ampimg FrameBuffer ClassConstructionsFrameBuffer  int width  int height    Arguments            Name      Type      Description                  width      int      Image buffer pixel width              height      int      Image buffer pixel height      Data MembersImage  m_YUVFrame  YUYV image frame bufferImage  m_RGBFrame  RGB image frame bufferImage  m_HSVFrame  HSV image frame bufferImgProcess ClassMethodsstatic void YUVtoRGB  FrameBuffer  buf    Arguments            Name      Type      Description                  buf      FrameBuffer               Return  Nonestatic void RGBtoHSV  FrameBuffer  buf    Arguments            Name      Type      Description                  buf      FrameBuffer               Return  Nonestatic void Erosion  Image  img    Arguments            Name      Type      Description                  img      Image               Return  Nonestatic void Erosion  Image  src  Image  dest    Arguments            Name      Type      Description                  src      Image               Return  Nonestatic void Dilation  Image  img    Arguments            Name      Type      Description                  img      Image               Return  Nonestatic void Dilation  Image  src  Image  dest    Arguments            Name      Type      Description                  src      Image               Return  Nonestatic void HFlipYUV  Image  img    Arguments            Name      Type      Description                  img      Image               Return  Nonestatic void VFlipYUV  Image  img    Arguments            Name      Type      Description                  img      Image               Return  NoneLinux Platform PortingTo enable motion under other platforms classes need to createdMotionManager for PlatformMotionManager implements inheritance MotionManager periodic timer process requires Timer from Platform  by periodic calling  PlatformCM730PlatformCM730 implements inheritance  PlatformCM730 classes communicate with the subboard  subcontroller’s   Communications is performed at the platform level and necessary for control  PlatformCM730 classes can be implemented by virtual method   Port control methods          OpenPort      ClosePort      ClearPort      WritePort      ReadPort        MultiThread for semaphore methods          LowPriorityWait      MidPriorityWait      HighPriorityWait      LowPriorityRelease      MidPriorityRelease      HighPriorityRelease        Communications Timeout check methods          SetPacketTimeout      IsPacketTimeout      SetUpdateTimeout      IsUpdateTimeout      Camera for PlatformThe camera acquires image data  The framework’s image’s data classes are ImgGray and ImgColor  The camera captures data and converts is to ImgColor class Etc classIf  necessary  you may create your own platformdependent sources  For examaple  Network communications class source LinuxActionScript ClassData Membersstatic bool m_stopstatic bool m_is_runningMethodsstatic int ScriptStart  const char  filename    Arguments            Name      Type      Description                  filename      const char       action script file name        Return  Nonestatic int PlayMP3  const char  filename    Arguments            Name      Type      Description                  filename      const char       mp3 file name        Return  NoneCameraSettings ClassConstructionsCameraSettings     Arguments  NoneData Membersint brightnessint contrastint saturationint gainint exposureLinuxCamera ClassData MembersFrameBuffer  fbufferMethodsstatic LinuxCamera  GetInstance   method to obtain global reference for Instance   Arguments  None  Return  pointer of LinuxCamera’s unique instance int Initialize  int deviceIndex    Arguments            Name      Type      Description                  deviceIndex      int              Return  On success  1 is returned int v4l2GetControl  int control    Arguments            Name      Type      Description                  control      int              Return  control’s value int v4l2SetControl  int control  int value    Arguments            Name      Type      Description                  control      int                    value      int              Return  On success  0 is returned  On fail  1 is returned int v4l2ResetControl  int control    Arguments            Name      Type      Description                  control      int              Return  On success  0 is returned  On fail  1 is returned void LoadINISettings  minIni  ini    Arguments            Name      Type      Description                  ini      minIni               Return  Nonevoid SaveINISettings  minIni  ini    Arguments            Name      Type      Description                  ini      minIni               Return  Nonevoid SetCameraSettings  const CameraSettings amp newset    Arguments            Name      Type      Description                  newset      const CameraSettings amp              Return  Noneconst CameraSettings amp GetCameraSettings     Arguments  None  Return  Current camera settingsvoid SetAutoWhiteBalance  int isAuto    Arguments            Name      Type      Description                  isAuto      int              Return  Noneunsigned char GetAutoWhiteBalance     Arguments  None  Return  Auto white balance valuevoid CaptureFrame     Arguments  None  Return  NoneLinuxCM730 ClassConstructionsLinuxCM730  const char  name    Arguments            Name      Type      Description                  name      const char       port name      Methodsvoid SetPortName  const char  name    Arguments            Name      Type      Description                  name      const char       port name        Return  Noneconst char  GetPortName     Arguments  None  Return  Port namebool OpenPort     Arguments  None  Return  On success  true is returned  On fail  false is returned void ClosePort     Arguments  None  Return  Nonevoid ClearPort     Arguments  None  Return  Noneint WritePort  unsigned char  packet  int numPacket    Arguments            Name      Type      Description                  packet      unsigned char                     numPacket      int      packet length in byte        Return  Number of sending bytesint ReadPort  unsigned char  packet  int numPacket    Arguments            Name      Type      Description                  packet      unsigned char                     numPacket      int      packet length in byte        Return  Number of reading bytesvoid LowPriorityWait     Arguments  None  Return  Nonevoid MidPriorityWait     Arguments  None  Return  Nonevoid HighPriorityWait     Arguments  None  Return  Nonevoid LowPriorityRelease     Arguments  None  Return  Nonevoid MidPriorityRelease     Arguments  None  Return  Nonevoid HighPriorityRelease     Arguments  None  Return  Nonevoid SetPacketTimeout  int lenPacket    Arguments            Name      Type      Description                  lenPacket      int              Return  Nonebool IsPacketTimeout     Arguments  None  Return  On timeout  true is returned  On waiting  false is returned double GetPacketTime     Arguments  None  Return  Calculated packet time void SetUpdateTimeout  int msec    Arguments            Name      Type      Description                  msec      int      timeout value        Return  Nonebool IsUpdateTimeout     Arguments  None  Returndouble GetUpdateTime     Arguments  None  Returnvirtual void Sleep  int Miliseconds    Arguments            Name      Type      Description                  Miliseconds      int      sleep time in miliseconds        Return  NoneLinuxMotionTimer ClassMethodsstatic void Initialize  MotionManager  manager    Arguments            Name      Type      Description                  manager      MotionManager               Return  Nonestatic void Start     Arguments  None  Return  Nonestatic void Stop     Arguments  None  Return  Nonestatic bool IsRunning     Arguments  None  Return  On timer is running  true is returned  On timer is stoped  false is returned static void msleep  int Miliseconds    Arguments            Name      Type      Description                  Miliseconds      int              Return  NoneLinuxSocket ClassConstructionsLinuxSocket     Arguments  NoneData Membersstatic const int MAXHOSTNAMEstatic const int MAXCONNECTIONSstatic const int MAXRECVMethodsbool create     Arguments  None  Return  On success  true is returned  On fail  false is returned bool bind  const int port    Arguments            Name      Type      Description                  port      const int              Return  On success  true is returned  On fail  false is returned bool listen    const  Arguments  None  Return  On success  true is returned  On fail  false is returned bool accept  LinuxSocket amp new_socket   const  Arguments            Name      Type      Description                  new_socket      LinuxSocket amp              Return  On success  true is returned  On fail  false is returned bool connect  const stdstring host  const int port    Arguments            Name      Type      Description                  host      const stdstring                    port      const int              Return  On success  true is returned  On fail  false is returned bool send  const stdstring s   const  Arguments            Name      Type      Description                  s      const stdstring              Return  On success  true is returned  On fail  false is returned bool send  void  data  int length   const  Arguments            Name      Type      Description                  data      void                     length      int              Return  On success  true is returned  On fail  false is returned int recv  stdstring amp s   const  Arguments            Name      Type      Description                  s      stdstring amp              Returnint recv  void  data  int length   const  Arguments            Name      Type      Description                  data      void                     length      int              Returnvoid set_non_blocking  const bool b    Arguments            Name      Type      Description                  b      const bool              Return  Nonebool is_valid    const  Arguments  None  Return  On socket is valid  true is returned  On socket is invalid  false is returned LinuxSocketException ClassConstructionsLinuxSocketException  stdstring s    Arguments            Name      Type      Description                  s      stdstring            Methodsstdstring description     Arguments  None  ReturnLinuxServer ClassConstructionsLinuxServer     Arguments  NoneLinuxServer  int port    Arguments            Name      Type      Description                  s      stdstring            Methodsvoid accept  LinuxServer amp sock    Arguments            Name      Type      Description                  sock      LinuxServer amp              Return  None bool send  unsigned char  data  int length    Arguments            Name      Type      Description                  data      unsigned char                     length      int              Return  On success  true is returned  On fail  false is returned int recv  unsigned char  data  int length    Arguments            Name      Type      Description                  data      unsigned char                     length      int              ReturnOperatorsconst LinuxServer amp operator  lt lt   const stdstring amp s   const  Sendconst LinuxServer amp operator  lt lt   const int amp i   const  Sendconst LinuxServer amp operator  gt gt   const stdstring amp s   const  ReadStreamer  Get more informations http  sourceforge net projects mjpgstreamer Linux TutorialsThe following are required libraries for tools and tutorials   g    GNU C   Compiler   manpagesdev  describes the Linux programming interface  including Linux system and library calls   libjpeg62dev  library for JPEG files   libncurses5dev  contains the header files  static libraries and symbolic links for developers You may install the abovementioned libraries by typing the line below at the command prompt   sudo aptget install g   manpagesdev libjpeg62dev libncurses5devTutorial source path   darwin Linux project tutorialBuilddarwin@darwin   cd  darwin Linux project tutorial read_write darwin@darwin darwin Linux project tutorial read_write  makemake C          build   g   o read_write main o          lib darwin a lpthread lrtdarwin@darwin darwin Linux project tutorial read_write Execute dev ttyUSB0 requires root user priviledges  To obtain root user privileges typedarwin@darwin darwin Linux project tutorial read_write  sudo su sudo  password for darwin   input 111111  root@darwin darwin Linux project tutorial read_write    read_writeRead WriteMain classes used in the tutorial  LinuxCM730  Inherited class from PlatformCM730 for the Linux platform  Use this class to control a usbtoserial port file resource   CM730  generates Read   Write packet  PlatformCM730 class inherited from the CM730  Results sent to packet processing class Source code review  Construct LinuxCM730 and CM730 class  LinuxCM730 linux_cm730  dev ttyUSB0   CM730 cm730  amplinux_cm730   Call connect   function to open port and turn on the Dynamixel power   if cm730 Connect      false     printf Fail to connect CM730 n   return 0    Read 2 bytes value Gyro sensor value  from CM730 control table   printf GFB   if cm730 ReadWord CM730P_GYRO_Y_L   ampvalue  0     CM730SUCCESS   printf %3d  value   else  printf    Read 2 bytes value Present position  from Dynamixel control table and write the mirroring value   printf  ID %d   JointDataID_R_SHOULDER_PITCH   if cm730 ReadWord JointDataID_R_SHOULDER_PITCH  RX28MP_PRESENT_POSITION_L   ampvalue  0     CM730SUCCESS     printf %4d  value   cm730 WriteWord JointDataID_L_SHOULDER_PITCH  RX28MP_GOAL_POSITION_L  RX28MGetMirrorValue value   0     else  printf  Resultroot@darwin darwin Linux project tutorial read_write    read_writeRead Write Tutorial for DARwInGFB512 GRL512 AFB504 ARL508 BTN0 ID 1  394 ID 3  444 ID 5  492  GFB  Gyro sensor Y axis value  GRL  Gyro sensor X axis value  AFB  Acceleration sensor Y axis value  ARL  Acceleration sensor X axis value  BTN  Button status value  ID     Present position value of dynamixel ID  Reads position values for the right arm  From values’ data the left arm mirrors the right arm Tutorial ProcedureNote Before you begin ensure that DARWINOP is in a stable kneeling position  During this tutorial torque from all actuators will be released Press the RESET button and ensure you’ve perform the killall procedure  if necessary  DARWINOP’s head LED must be in green and eye LED in blue before you begin Go to the directory  darwin Linux project tutorial read_writeLook for the file read_write If not type make and the compiler will autogenerate read_write Execute the read write by typing   read_write Once running the read write you will see the following  Grab DARWINOP’s right hand and move it around  You should notice that the left hand mimics the movement of the right hand   You should also notice that the head and eye LED constantly change color   You should also notice that the actuators controlling the left arm are stiff while all other actuators are loose   During this tutorial please exercise caution when moving the right arm as DARWINOP may fall due to the released torque from the rest of the body   GFB  GRL  AFB  ARL values will change if you move DARWINOP’s torso To do so grab DARWINOP by the handle and gently swing it around You should see the values change To end the tutorial hold the CONTROL key and press the C key  Afterwards press the RESET button from DARWINOP The head LED returns to blue and eye LED to green Camera Capture  amp ViewMain classes for the tutorial  minIni  settings from ini files for loading and saving   LinuxCamera  Camera initialization  settings change  and capture classes    mjpg_streamer  compresses YUV image to jpeg  The web server streaming class allows view and control on a web browser page via command Source code reviewMinIni class from the camera settings minIni  ini   new minIni INI_FILE_PATH Camera device number generates LinuxCamera class  MinIni class reads settings values LinuxCameraGetInstance   gtInitialize 0 LinuxCameraGetInstance   gtLoadINISettings ini mjpg_streamer class confirms images mjpg_streamer  streamer   new mjpg_streamer CameraWIDTH  CameraHEIGHT LinuxCamera class allows mjpg_streamer to stream frame captures on web browser while 1 LinuxCameraGetInstance   gtCaptureFrame  streamer gtsend_image LinuxCameraGetInstance   gtfbuffer gtm_YUVFrame ResultConnect to DARwInOP via IP address and port 8080 to stream motion images from the camera  You may experience memory leaks with Chrome  Camera’s gain and exposure values can be can be changed by clicking the buttons Tutorial ProcedureNote Before you begin  ensure that DARwInOP is in a stable kneeling position  During this tutorial torque from all actuators will be released Press the RESET button and ensure you’ve perform the killall procedure  if necessary  DARWINOP’s head LED must be in green and eye LED in blue before you begin Go to the directory  darwin Linux project tutorial cameraLook for the file camera_tutorial  If not type make and the compiler will autogenerate camera_tutorial Execute the camera tutorial by typing   camera_tutorial Once running the camera tutorial you will see the followingFrom your computer open a web browser  Firefox recommended  do not use Chrome due to memory leak  and type http  192 168 123 18080 on the address bar The IP address 192 168 123 1 is the default IP address assuming you’ve established a wired LAN connection with DARwInOP From your browser you can modify GAIN and EXPOSURE values   The default values for GAIN is 255 and EXPOSURE is 1000   Lowering gain values will decrease image brightness  Lowering exposure values will increase image contrast To end the tutorial hold the CONTROL key and press the C key  Afterwards press the RESET button from DARwInOP The head LED returns to blue and eye LED to green Close the web browser You may view the changes you’ve made by viewing the config ini file from the current working directory   darwin Linux project tutorial camera Image ProcessingMain classes for the tutorial  ColorFinder  HSV color space filters specific colors  ColorFinder finds the center of mass of the filtered pixels and returns the location  This process is done internally Source code reviewColorFinder class is generated by capture image  Image capture generates ColorFinder by by finding the center of mass of pixels by pixel position from a given color  Also  minIni class sets the default value of the color ColorFinder  finder   new ColorFinder  finder gtLoadINISettings ini mjpg_streamer allows colors adjustment via web browser for ball_finder and ColorFinder httpdball_finder   finderFrom GetPosition function image color values from HSV color space Point2D returns the value for center of mass pos   finder gtGetPosition LinuxCameraGetInstance   gtfbuffer gtm_HSVFrame ResultThe preset allows location of center of mass for ball color root@darwin darwin Linux project tutorial color_filtering    color_filteringposx 169 000000  posy 104 000000From the capture screen color RGB 255  0  0   color  replacement is shownTutorial procedureNote Before you begin  ensure that DARwInOP is in a stable kneeling position  During this tutorial torque from all actuators will be released Press the RESET button and ensure you’ve perform the killall procedure  if necessary  DARWINOP’s head LED must be in green and eye LED in blue before you begin Go to the directory  darwin Linux project tutorial color_filteringLook for the file color_filtering  If not type make and the compiler will autogenerate color_filtering Execute the image processing tutorial by typing   color_filtering Once tutorial is running you will see the following screenFrom your computer open a web browser  Firefox recommended  do not use Chrome due to memory leak  and type http  192 168 123 18080 on the address bar The IP address 192 168 123 1 is the default IP address and assuming you’ve established a wired LAN connection with DARWINOP The following values are the default values for the ball  Hue 356  Tolerance 15  Minimum Saturation 50  Minimum Value 10  Gain 255  Exposure 1000You can change the color of the ball to the desired color by manipulating the parameters Example chang the ball color from red  default  to blue  Please refer to the table here for reference for values for blue Under default values for the ball DARWINOP would view a blue ball like the image above   After manipulating the values DARWINOP would view a blue ball like the image above  Notice that a bright reddish orange patch covers most of the blue ball  The orange patch over blue is an indication that DARWINOP detects blue as the target color   You will also notice the change in values for posx and posy  This is because DARWINOP is able to detect the ball therefore calculate the position of center of mass for the ball color   posx is the value for center of mass in horizontal position  posy is the value for center of mass in vertical position   If you remove the ball you will see the values for posx and posy return to 1 000000The following table represents change in values from red ball  default  to blue ball                   red  default       blue  new values       reference blue  from Color and White Balance Calibration                   Hue      356      217      225              Tolerance      15      15      15              Minimum Saturation      50      43      45              Minimum Value      10      0      0              Gain      255      255      255              Exposure      1000      1000      1000      Note Remember that these values are in accordance to the HSV color space  The values assigned for the colors are arbitrary and you may choose any values to suit your needs To end the tutorial hold the CONTROL key and press the C key  Afterwards press the RESET button from DARWINOP Close the web browser You may view the changes you’ve made by viewing the config ini file from the current working directory   darwin Linux project tutorial color_filtering  Head ControlMain classes for the tutorial  BallTracker  transfer image capture from HSV color space Ball location is possible via ColorFinder class  The head module controls head pan and tilt  aligns head in front of the ball    MotionManager  modules are inherited from MotionModule class  The module calls Process   function to calculate each joint values  The values are merged for synchronized writing   Head  modules are inherited from MotionModule class  The module allows head pan and tilt   LinuxMotionTimer  MotionManager calls Process   function at regular intervals Source code reviewBallTracker class performs ball tracking  Also  the minIni class sets color values  where the values can be manipulated via web browser BallTracker tracker   BallTracker  tracker LoadINISettings ini httpdball_finder    amptracker finderCreate Dynamixel control CM730 class and Head class initializes MotionManager class LinuxCM730 linux_cm730 U2D_DEV_NAME CM730 cm730  amplinux_cm730 if MotionManagerGetInstance   gtInitialize  ampcm730     false printf Fail to initialize Motion Manager n return 0MotionManager class registers Head class and initializes the timer  Only the head moves by tracking body joints are disabled  Afterwards MotionManager is enabled MotionManagerGetInstance   gtAddModule  MotionModule  HeadGetInstance   LinuxMotionTimerInitialize MotionManagerGetInstance   MotionStatusm_CurrentJoints SetEnableBody false MotionStatusm_CurrentJoints SetEnableHeadOnly true MotionManagerGetInstance   gtSetEnable true Trackertracker Process LinuxCameraGetInstance   gtfbuffer gtm_HSVFrame ResultHead pan and tilt joints aim at the center of mass of the captured color  the head is centered around the color Tutorial ProcedureNote Before you begin  ensure that DARwInOP is in a stable kneeling position  During this tutorial torque from all actuators will be released Press the RESET button and ensure you’ve perform the killall procedure  if necessary  DARWINOP’s head LED must be in green and eye LED in blue before you begin Go to the directory  darwin Linux project tutorial head_trackingLook for the file head_tracking  If not type make and the compiler will autogenerate head_tracking Execute the head control tutorial by typing   head_tracking Once running the tutorial you will see the followingDARWINOP’s head LED will change from green to amber   DARWINOP tracks the red ball  However  the body remains still and only the head moves  Dynamixel ID 19 and 20    To get DARWINOP track the ball place the ball at a distance approximately 1 to 1 5 feet away from the head  Placing the ball too close to DARWINOP will cause the head to move out of control You may also change the color DArwInOP tracks by opening our web browser From your computer open a web browser  Firefox recommended  do not use Chrome due to memory leak  and type http  192 168 123 18080 on the address bar the IP address 192 168 123 1 is the default IP address and assuming you’ve established a wired LAN connection with DARWINOP By Default DARWINOP will track a red ball Please refer to the table here for ball  red  blue  and yellow If you replace the red ball with another color DARWINOP will ignore itAs you adjust the color of the ball  from the web browser  you can also see DARWINOP’s camera track the ball in realtime once values are properly adjusted Over the course of the head control tutorial you will notice that the actuators LED blink as if they have an error  Disregard this notification during this tutorial To end the tutorial hold the CONTROL key and press the C key Press the RESET button on DARWINOP Close your web browser You may view the changes you’ve made by viewing the config ini file from the current working directory   darwin Linux project tutorial color_filtering  Walking ControlMain classes for the tutorial  Head control  main class  BallFollower Source code reviewHead tracking from BallTracker class and ball following generates BallFollower class BallTracker tracker   BallTracker  tracker LoadINISettings ini httpdball_finder    amptracker finderBallFollower follower   BallFollower  Port initialization and opening  dynamixel power onLinuxCM730 linux_cm730 U2D_DEV_NAME CM730 cm730  amplinux_cm730 if MotionManagerGetInstance   gtInitialize  ampcm730     false printf Fail to initialize Motion Manager n return 0MotionManager head tracking registers head and walking modules  then timers are initialized MotionManagerGetInstance   gtAddModule  MotionModule  HeadGetInstance   MotionManagerGetInstance   gtAddModule  MotionModule  WalkingGetInstance   LinuxMotionTimerInitialize MotionManagerGetInstance   Walking init captures poses int n   0int param JointDataNUMBER_OF_JOINTS   5 int wGoalPosition  wStartPosition  wDistancefor int id JointDataID_R_SHOULDER_PITCH id ltJointDataNUMBER_OF_JOINTS id   wStartPosition   MotionStatusm_CurrentJoints GetValue id wGoalPosition   WalkingGetInstance   gtm_Joint GetValue id if  wStartPosition  gt wGoalPosition  wDistance   wStartPosition  wGoalPositionelsewDistance   wGoalPosition  wStartPosition wDistance  gt gt  2if  wDistance  lt 8  wDistance   8 param n      idparam n      CM730GetLowByte wGoalPosition param n      CM730GetHighByte wGoalPosition param n      CM730GetLowByte wDistance param n      CM730GetHighByte wDistance cm730 SyncWrite RX28MP_GOAL_POSITION_L  5  JointDataNUMBER_OF_JOINTS  1  param Walking module disables parts of the head  MotionManager enables them WalkingGetInstance   gtm_Joint SetEnableHeadOnly false MotionManagerGetInstance   gtSetEnable true Head tracking and ball following loop tracker Process LinuxCameraGetInstance   gtfbuffer gtm_HSVFrame follower Process tracker ball_position ResultBall is tracked by head tracking  Walking towards the ball via walking module Tutorial ProcedureNote Before you begin  ensure that DARwInOP is in a stable kneeling position  During this tutorial torque from all actuators will be released Press the RESET button and ensure you’ve perform the killall procedure  if necessary  DARWINOP’s head LED must be in green and eye LED in blue before you begin Go to the directory  darwin Linux project tutorial ball_followingLook for the file ball_following  If not type make and the compiler will autogenerate ball_following Execute the walking control tutorial by typing   ball_following The following message will appear on screen and DARWINOP will stand up from its kneeling position   DARWINOP’s head LED will change from green to amber   Place the ball  default red  in front of DARWINOP   Press the ENTER key to continue  DARWINOP will walk towards the ball  but will not perform the kick   Watch the display as DARWINOP walks towards the ball but halts when is ready to kick   The line following Start to press ENTER  is DARWINOP surrent status  This line changes with DARWINOP’s motion   KICK  Right STOP means that DARWINOP is ready to kick the ball with its right foot but has halted   Move the ball a little and DARWINOP will resume walking until is gets close enough ready to kick You may also change the ball color DArwInOP tracks by opening our web browser From your computer open a web browser  Firefox recommended  do not use Chrome due to memory leak  and type http  192 168 123 18080 on the address bar the IP address 192 168 123 1 is the default IP address and assuming you’ve established a wired LAN connection with DARWINOP To end the tutorial hold the CONTROL key and press the C key Press the RESET button on DARWINOP Close your web browser You may view the changes you’ve made by viewing the config ini file from the current working directory   darwin Linux project tutorial ball_following  Action ControlMain classes for the tutorial  ActionAction script file consisting of page number and MP3 file path  The OS reads the script file then executes the action and mp3 file playback  based from the script    LinuxActionScript class  MotionModule’s action is processed by Action class  MotionManager Timer is synchronizes with the action’s process Source code reviewAction loads the saved file ActionGetInstance   gtLoadFile MOTION_FILE_PATH CM730 class creates action’s play  MotionManager initializes and registers Action class LinuxCM730 linux_cm730  dev ttyUSB0 CM730 cm730  amplinux_cm730 if MotionManagerGetInstance   gtInitialize  ampcm730     false   printf Fail to initialize Motion Manager n   return 0MotionManagerGetInstance   gtAddModule  MotionModule  ActionGetInstance   LinuxMotionTimer is initialized and MotionManager is enabled LinuxMotionTimerInitialize MotionManagerGetInstance   MotionManagerGetInstance   gtSetEnable true Init pose page 1  is initilalized and waits until action is complete ActionGetInstance   gtStart 1 while ActionGetInstance   gtIsRunning    usleep 8 1000 LinuxActionScript class passes and initializes the script file  then waits for the execution and completion from the script LinuxActionScriptScriptStart script asc while LinuxActionScriptm_is_running    1  sleep 10 ResultExecution of the prescripted sequence action and mp3 playback from the script file Tutorial ProcedureNote Before you begin  ensure that DARwInOP is in a stable kneeling position  During this tutorial torque from all actuators will be released Press the RESET button and ensure you’ve perform the killall procedure  if necessary  DARWINOP’s head LED must be in green and eye LED in blue before you begin Go to the directory  darwin Linux project tutorial action_scriptLook for the file action_script  If not type make and the compiler will autogenerate action_script Execute the tutorial by typing   action_script Once running the tutorial you will see the following  Follow the instructions by pressing the ENTER key   DARWINOP stands up   The head LED goes from green to amber   DARWINOP performs Interactive Motion Mode once   The script outputs the action page and sound mp3 file on screen sequentially   The order goes as follows          Thank You      Introduction      WOW       Sit down      Stand up      Clap please       OOPS       Bye bye             Once DARWINOP finishes Interactive Motion Mode the tutorial ends automatically   DARWINOP’s head LED returns to green  but its body remains in standing position Grab DARWINOP’s handle Press the RESET button on DARWINOP to release torque from all actuators Carefully place DARWINOP in kneeling position FSRMain classes used on the tutorial  LinuxCM730  Inherited class from PlatformCM730 for the Linux platform  Use this class to control a usbtoserial port file resource   CM730  generates Read   Write packet  PlatformCM730 class inherited from the CM730  Results sent to packet processing class   mjpg_streamer  compresses YUV image to jpeg  The web server streaming class allows view and control on a web browser page via command Source code reviewConstruct LinuxCM730 and CM730 classLinuxCM730 linux_cm730 U2D_DEV_NAME CM730 cm730  amplinux_cm730 Call connect   function to open port and turn on the Dynamixel power if MotionManagerGetInstance   gtInitialize  ampcm730     false   printf Fail to initialize Motion Manager n   return 0MotionManager head tracking registers head and walking modules  then timers are initialized WalkingGetInstance   gtLoadINISettings ini MotionManagerGetInstance   gtAddModule  MotionModule  HeadGetInstance   MotionManagerGetInstance   gtAddModule  MotionModule  WalkingGetInstance   LinuxMotionTimer  motion_timer   new LinuxMotionTimer MotionManagerGetInstance   motion_timer gtStart  Walking init captures poses int n   0int param JointDataNUMBER_OF_JOINTS   5 int wGoalPosition  wStartPosition  wDistancefor int id JointDataID_R_SHOULDER_PITCH id ltJointDataNUMBER_OF_JOINTS id     wStartPosition   MotionStatusm_CurrentJoints GetValue id   wGoalPosition   WalkingGetInstance   gtm_Joint GetValue id   if  wStartPosition  gt wGoalPosition      wDistance   wStartPosition  wGoalPosition  else    wDistance   wGoalPosition  wStartPosition     wDistance  gt gt  2  if  wDistance  lt 8      wDistance   8     param n      id  param n      CM730GetLowByte wGoalPosition   param n      CM730GetHighByte wGoalPosition   param n      CM730GetLowByte wDistance   param n      CM730GetHighByte wDistance cm730 SyncWrite RX28MP_GOAL_POSITION_L  5  JointDataNUMBER_OF_JOINTS  1  param Read  amp print FSR valueleft_fsr_x   cm730 m_BulkReadData FSRID_L_FSR  ReadByte FSRP_FSR_X left_fsr_y   cm730 m_BulkReadData FSRID_L_FSR  ReadByte FSRP_FSR_Y printf  LX%3d  MAX_FSR_VALUEleft_fsr_x printf  LY%3d  MAX_FSR_VALUEleft_fsr_y    right_fsr_x   cm730 m_BulkReadData FSRID_R_FSR  ReadByte FSRP_FSR_X right_fsr_y   cm730 m_BulkReadData FSRID_R_FSR  ReadByte FSRP_FSR_Y printf  RX%3d  right_fsr_x printf  RY%3d  right_fsr_y In cm730 m_BulkReadData the MakeBulkReadPacket   function from  darwin Framework src CM730 cpp for reading FSR values if Ping FSRID_L_FSR  0     SUCCESS   m_BulkReadTxPacket PARAMETER 3 number 1    10    length  m_BulkReadTxPacket PARAMETER 3 number 2    FSRID_L_FSR    id  m_BulkReadTxPacket PARAMETER 3 number 3    FSRP_FSR1_L    start address  number  if Ping FSRID_R_FSR  0     SUCCESS   m_BulkReadTxPacket PARAMETER 3 number 1    10    length  m_BulkReadTxPacket PARAMETER 3 number 2    FSRID_R_FSR    id  m_BulkReadTxPacket PARAMETER 3 number 3    FSRP_FSR1_L    start address  number  The weight from both feet shown with each feet showing its weight centered  red   sign  int r_position_x    98  MAX_FSR_VALUEright_fsr_x  MAX_FSR_VALUE    24int r_position_y    160  MAX_FSR_VALUEright_fsr_y  MAX_FSR_VALUE    40int l_position_x    98 left_fsr_x MAX_FSR_VALUE    198int l_position_y    160 left_fsr_y MAX_FSR_VALUE    40memcpy img_send gtm_ImageData  img_position gtm_ImageData  LinuxCameraGetInstance   gtfbuffer gtm_RGBFrame gtm_ImageSize if left_fsr_x    255  amp amp left_fsr_y    255 draw_target img_send  l_position_x  l_position_y  255  0  0 if right_fsr_x    255  amp amp right_fsr_y    255 draw_target img_send  r_position_x  r_position_y  255  0  0  if left_fsr_x    255  amp amp left_fsr_y    255  amp amp right_fsr_x    255  amp amp right_fsr_y    255 draw_target img_send   l_position_x r_position_x  2   l_position_y r_position_y  2  0  0  255 streamer gtsend_image img_send Result  LX  Left foot center point of the Xaxis force  LY  Left foot center point of the Yaxis force  RX  Right foot center point of the Xaxis force  RY  Right foot center point of the Yaxis forceConnect to DARWINOP via IP address and port 8080 the red cross represent the weight centered on each foot while the blue cross for both feet combined DARWINOP can be aimed at several directions LX  LY  RX  RY  These values are modifiable Press the space bar to goggle walking on and off Tutorial ProcedureNote Before you begin  ensure that DARwInOP is in a stable kneeling position  During this tutorial torque from all actuators will be released Press the RESET button and ensure you’ve perform the killall procedure  if necessary  DARWINOP’s head LED must be in green and eye LED in blue before you begin Go to the directory  darwin Linux project tutorial fsrLook for the file fsr  If not type make and the compiler will autogenerate fsr Execute the fsr by typing   fsr While running the fsr program yo may view the results as described above To end the tutorial hold the CONTROL key and press the C key  Afterwards press the RESET button from DARWINOP The head LED returns to blue and eye LED to green ToolsTools  such as action editor  walking tuner  etc  can be found at  darwin Linux projectIf you wish to use the tools is recommended that you connect to DARWINOP via SSH  Please go to A  Ready for example on how to connect Action EditorAction Editor allows the user to control and edit DARWINOP’s motions and poses via command line  This process is done by manipulating values of the MX28 actuator s  For more information about the MX28  please refer to MX28 manual For more information about Actuator ID Map of DARWINOP  please refer to ID Map Before getting into Action Editor be aware of the motion data file residing in the source code Motion FileThe motion file is a file that contains DARWINOP’s poses and motion data  The data is read and written as position of the MX28 so manipulating editing the file is a robotlowlevel task  Since the motion file data is binaries file you cannot view its contents directly  You can view its contents with Action Editor or RoboPlus Motion ROBOTIS currently supplies 2 motion files with the source code  They are located in  darwin Data directory  These are  ‘motion_1024 bin’ for MX28 position sensor at 10bit resolution  300 degrees available   ‘motion_4096 bin’ for MX28 position sensor at 12bit resolution  360 degrees available The motion file contains 256 pages  Each page can store up to 7 stages  or steps  of motion data  In the basic motion file provided not all pages are used  You may add you own motion if you like by making use of the empty pages   Page number is the listed page number  If you want to create new motion poses you may use any empty page  Page title we recommend you use a page title if you will make use on an empty page   Current position This is the current position of the MX28 for each ID  This data is represented by STP7 in Action Editor and Pose of Robot by Roboplus  Sometimes the position may read as      in Action Editor or OFF in Roboplus Motion  This means position of the MX28 is not being read  and torque is off  If you turn an MX28 off you will not get current position reading until you turn it back on You can turn off any or all MX28 at will  This is very convenient to make robot poses rather than entering position values For example if you want to make a new robot pose simply turn any MX28 off  make the robot pose  and turn the MX28 s  back on at that robot pose  Once turning on you’ll get the pose values   Steps or stages each page can store up to 7 steps  from STP0 to STP6  However  some motions may require more than 7 stages to perform completely  Simply use multiple pages  and link them with Next  Note that STP7 in Roboplus is rightmost colum labeled Pose of the Robot   Next is a link to indicate whether or not motion continues at a different page  To continue motions just list the page number where motion is to be continued  Number 0 indicates motion does not continue onto another page  default value   Linking page does not have to the in numerical order allowing you to link from one page to any other page   Play Count is the number of times the motion of the page is to be played   Example page 239 has a play count of 4 times then has a link to page 240  This means that motions on page 239 will be executed 4 times then move on to page 240 and continue with the motions on page 240   Exit There may be times when a motion is stopped  If that’s the case the robot may be in an unstable position  Exit is much like Next  so Exit should be linked to a page where DARWINOP can return to a stable pose  Number 0 indicates no link to exit page linked  default value  Tip when calling a motion requires multiple pages we strongly suggest that you call that motion from the starting page  For example talk2 starts at page 41 and ends at page 47 this means you should call page 41 when calling talk2  Calling the subsequent pages for talk2  i e  page 43  may cause the robot to perform abnormally It is strongly advised that you test your newlycreated or edited motions for the sake of DARWINOP’s stability  by making small incremental changes in position  speed time  and pause values Please use whichever program is most convenient for you  However  you may end up working with both  Always remember to save your work Contents and description of the motion file used for the demo programs Although there are many pages occupied with data  Not all pages are actually set in motion by DARWINOP  here is a list of the pages used along with a brief description of each page             page number      page title      brief description of page      number of pages      notes                  1      init      DARWINOP initial standing pose      1                     4      hi      DARWINOP bowing greet      1                     12      rk      DARWINOP doing a right kick  from Soccer mode       1                     13      lk      DARWINOP doing a left kick  from Soccer mode       1                     15      sit down      DARWINOP on its knees      1                     23      d1      DARWINOP yes  go   from Interactive mode       1                     24      d2      DARWINOP wow   from Iteractive mode       1                     27      d3      DARWINOP ooops   from Interactive mode       1                     38      d2      DARWINOP bye bye  from Interactive mode       2  38 and 39       starting page              41      talk2      DARWINOP introduction  partial  from Interactive mode       7  41 through 47       starting page              54      init      DARWINOP clap please  from Interactive mode       4  54 55 56 58       starting page  excludes page 57      Getting Started with Action EditorWarning Before running Action Editor please verify angle resolution the actuators are currently loaded with For example  if the actuators resolution is 1024 then you can only work with motion file for 1024resolution  motion_1024 bin Running another file may damage DARWINOP If you are unsure about which angle resolution the actuators are currently loaded with then refer to dxl_monitor To install the proper resolution for the actuator then refer to firmware_installer Action editor can be found at  darwin Linux project action_editorYou can modify DARWINOP motion data as done in a terminal window   To read and write data go to the directory  darwin Linux project action_editor  Make sure that there is an executable file named action_editor Please note that when running action editor the program will open the file motion_4096 bin by default The illustrations below are from the motion file ‘motion_1024 bin’ and ‘motion_4096 bin’ Remember that motion files are located at  darwin Data  If there is no said file then create it by typing make  The compiler will automatically generate the file   Run the program by typing   action_editor  You will notice DARWINOP’s head LED changes from green to amber   Reminder remember the current angle resolution for the actuators   Once in the program type help for further information  From there you may follow the options given to you   To exit the program type exit Please note the following  STP7 is the current value of the actuators       means that torque has been released   PauseTime is the pause for motion playback for step STP x    Time x 8msec  is the time period for DARWINOP to complete step STP x   Each time unit account for 8ms of time After typing help the following list will appear The menu options are very extensive so you may not be able to memorize every command  At any time you type help to invoke the options list   exit exits the program  After exiting the program press the RESET button on DARwinOP   re refreshes the screen   b moves to the previous page   n moves to the next page   page  index  moves to the  index  page  For example typing page 5 outputs data from page 5 on screen   list outputs a list of pages   new initializes current page by clearing all actuator position data   copy  index  copies data from page  index  to current page  For example if you are on page 5 and want to copy page 9 then type copy 9   set  value  sets position value on chosen actuator  For example If you want ID19  head pan  to have a value of 512 then using the keyboard’s directional keys place the cursor on ID19 and type set 512   save saves any changes you’ve made  the saved motion file  motion bin can be found at  darwin Data   play plays motion s  of current page       name changes the name of the current page  You can view the name of the page at the top right portion of the screen  For example  page 2 is titled ok to change the name type name and press the ENTER key  name will appear at the bottom of the screen  Input the desired name for the page  good for instance  and press the ENTER key again               before changing the page name                  after changing the page name to good             w  index  overwrites STP index  with data from STP7  the very first column on the page   For example page 4 has data on 4 steps  4 columns excluding STP7   typing w 1 overwrites STP1 data with STP7 data               before typing w 1                  after applying w 1  Notice that STP1 data is identical to STP7         i inserts data from STP7 to STP0  Moves data from STP x  to STP x   1  if any   i  index  inserts data from STP7 to STP index   Moves data from STP index  to STP index   1  if any   m  index   index2  moves data from  index2  to  index    d  index  deletes data from STP index   Moves data from STP index  to STP index  1    on off turns on off torque from all Dynamixels       on off  index1   index2   index3  … turns torque on off from ID index1  ID index2  ID index3   For example off 20 releases torque from ID20  Notice that STP7 for ID20 will read         Typing on 20 turns torque from ID20 on again and the screen outputs the current position data of ID20               Before off 20 command  Value of ID20 is 549  observe STP7                    ID20 is off  Type re to refresh the screen  During this time you may manually move the head up and down                   ID20 is on again after typing on 20  notice the value of ID20 is 624 and not 453  the head has been tilted upwards a bit   Type re to refresh the screen       Example motion editing with Action EditorLet’s modify DARWINOP’s pose when kneeling  Let’s change the position of the left arm during kneeling  Dynamixels for the left arm are ID 2  4  and 6 Tip Before you begin you may want to make a copy of motion_4096 bin file and save it elsewhere  If you don’t like with the changes you’ve made you can always revert back to the original data by overwriting the file   Run Action Editor  Find the page where the kneeling  sit down  motion is by typing list  Notice that the motion data is on page 15   Exit the list and go tp page 15 by typing page 15 With the current data values from page 15 DARWINOP’s pose will look like this  Do so by typing play  Once on page 15 edit the values on ID 2  4  6  One of the easiest ways to edit values is to release the torque on Dynamixels from the left arm   release the torque on ID 2  4  and 6 by typing off 2 4 6  after getting the desired pose turn torque on again by simple typing on  Afterwards match the values for ID2  ID4  ID6 on STP0 match those from STP7  save your work    Type play and you you will notice the newly updated values for ID 2  4  and 6  The values translate into DARWINOP pose as following  Type save if you want this pose to be new sitting pose whenever DARWINOP is kneeling  sit down  Dynamixel MonitorYou may be able to reset the MX28 actuators should you encounter an error in motion  actuator s  is are  malfunctioning  or perceive that actuator s  is are  malfunctioning Go to the directory  darwin Linux project dxl_monitorMake sure that there is an executable file named dxl_monitor If there is no said file then create it by typing make the compiler will automatically generate the file Run the program by typing   dxl_monitorOnce in the program type help for information To exit the program type exitAfter inputting help the screen outputs the offered option   exit exits the program  After exiting the program press the RESET button on DArwInOP   scan outputs the current status of all Dynamixels   id  ID  go to Dynamixel ID ID   The default ID is ID200  CM730 controller   For example  if you wish to go to ID20  head tilt  then type id 20 Now the current working ID is ID20   d displays the current control table of the CM730 and all Dynamixels  Use this option if there is are  any anomaly anomalies  with DARWINOP   reset defaults the value of current Dynamixel  Use this option if the current actuator has an operating error or is malfunctioning   reset all defaults the value of all Dynamixels  Use this option if the current s  or all Dymanixel s  has have  operating error s  or is are  malfunctioning   wr  ADDR   VALUE  writes value  VALUE  to address  ADDR  of current Dynamixel  For further information on Dynamixel addresses and values click here  For example  go to ID18  left ankle roll  and type wr 25 1  This means that address 25  LED  has been turned on  1   You will notice that the actuator on DARWINOP left foot LED is turned on  To turn the LED off type wr 25 0 If all goes well you will see Success to write   on off turns torque on off off current Dynamixel   on off all turns torque on off of all Dynamixels To check the currently operating angle resolution perform the following  Select an eactuator by typeing id  ID number   For example id 3  Type d to display the control table  Look for CW_ANGLE_LIMIT  CCW_ANGLE_LIMIT  and GOAL_POSITON  if all of these values show 1023 or less  then resolution is 1024  if any of these values is between 0 and 4095 then the resolution is 4096  There may be an occasion that a given actuator may display values of 1023 or lower but you may not be sure whether the resolution is either 1024 or 4096  In such case make verifications on several actuators If all the verified values are 1023 or lower  then the resolution is 1024 If any of the values display larger than 1023 then the resolution is 4096   ALL Dynamixel actuators installed in DARWINOP are set to either 1024 or 4096 resolution  Some actuators being set at 1024 and others at 4096 is not allowed  in such case the demo program will not run   To ensure all Dynamixel actuators installed in DARWINOP are at the same resolution please refer to the firmware installer procedure This illustration indicates a resolution of 1024 This illustration indicates a resolution of 4096 RoboPlusFor DARWINOP support with RoboPlus Motion and Dynamixel’s MX28 at 4096resolution you need version 1 0 23 0Warning  RoboPlus Motion currently does not have a 3D model of DARWINOP  Please refrain from using the Pose Utility tab   Please refrain from using available Bioloid robots in the Pose Utility tab  i e  Humanoid Type A   as none of these robots have matching kinematics nor dimensions with DARWINOP  Doing so it may damage the robot   Do not save any changes into a motion   mtn  file  using the save as option   The  mtn file used for Bioloid robot is incompatible with DARWINOP RoboPlus is a graphical alternative to Action Editor  You may use either program to edit DARWINOP’s motion  You may use Roboplus at one point and continue the same work with Action Editor and viceversa  In fact Roboplus Motion can perform the exact same functions of Action Editor Please refer to the motion file here You may find RoboPlusrelated files at  darwin Linux project roboplusHowever  to properly execute this program DARWINOP must be connected to a computer via wired wireless LAN with RoboPlus 1 0 23 0 or above Note This section assumes that the actuators installed in DARWINOP are set at the resolution of 1024  MX28 firmware version 26 0x1A     RoboPlus currently does not support MX28 angle resolution of 4096   MX28 firmware version 27 0x1B  or higher   This option allows you to edit DARWINOP’s motion file with RoboPlus Motion   Mac and Linux versions of RoboPlus are currently unavailable so this option will only work with Windowsbased computers To modify motion data with RoboPlus perform the following  Go to  darwin Linux project roboplus  Type make to create an executable file if there is no executeble file  Once executable file is complete type   roboplus  the head LED will change from green to amber   From your PC start RoboPlus and select RoboPlus Motion  On Port select TCP IP and connect robot  Once connected you may edit motion data   When finished disconnect DARWINOP from RoboPlus  Disconnected followed by Waiting messages will appear at the terminal window    You may close RoboPlus from your PC and abort the program by holding the CONTROL key and pressing the C key  once you abort the program the head LED will return to green  The following illustrations will guide you to properly set the parameters for a successful connection with RoboPlus The illustrations on IP  under the TCP IP tab  assumes you’ve establiched a connection with DARWINOP via wired LAN under default settings You may save any changes into a motion bin file  The directory is  darwin Data motion_4096 binExample of motion editing with RoboPlusLet’s change DARWINOP’s sitting pose further by changing the pose of the left arm  Let’s continue the work from Action Editor  Remember that you may continue any work done with Action Editor with Roboplus and viceversa Tips Before you begin you may want to make a copy of motion_4096 bin file and save it elsewhere  If you don’t like with the changes you’ve made you can always revert back to the original data by overwriting the file When interfacing with DARWINOP wirelessly make sure you  remember the IP address assigned by DHCP   have a strong wifi communications signal between your wireless access point router and DARWINOP  have a strong wifi communications signal between your wireless access point router and your computer   keep devices that adversely affect communications signal between your access point router and DARWINOP and computer  i e  operating microwave ovens  active bluetooth devices    make sure you remember the IP address assigned by DHCP  If you don’t remember type ifconfig   Run Roboplus from DARWINOP2  After running Roboplus from DARWINOP run RoboPlus Motion from your PC  In RoboPlus Motion click on Tool T  and select Option O   If necessary change the IP address to the one assigned by DHCP  Ensure that the port number is 6501  On Port make sure to select TCP IP as the port  Then click on the connect icon   Proceed with editing  For more information on RoboPlus Motion click here   To save changes click on the save icon or go to File F    gt Save S   Do not select Save As A   because the mtn file is not compatible with DARWINOP  When saving the changes the file is motion_4096 bin  located at  darwin Data directory  You may continue making changes with Action Editor Walking TunerWarning Before you change any value s  it is highly recommended that you become very familiar and proficient with DARWINOP  ROBOTIS is not responsible for any damages caused as result of changes in value due to lack or user expertise or user negligence Walk tuning files can be found at  darwin Linux project walk_tunerYou may modify DARWINOP’s pace and other walking related items Before starting walking pace tuner ensure that DARWINOP is in the kneeling position Tip change value s  in small increments  Large increments may cause DARWINOP to perform unexpectedly Tip Hold DARWINOP via the handle at all times during this program To tune walking parameters go to the directory  darwin Linux project walk_tuner  Make sure that there is an executable file named walk_tuner   If there is no said file then create it by typing make the compiler will automatically generate the file   Run the program by typing   walk_tuner  You will notice DARWINOP’s head LED changes from green to amber   DARWINOP will stand up   Once in the program type help for information   From there you may follow the options given to you   To exit the program type exit  You will see a message Terminate Walking Tuner  If so program has successfully ended   Hold DARWINOP so you prevent it from falling press the RESET button to release torque from all actuators The following screen will appear after executing the programEnsure you resize the window so that information displayed on screen is not truncated Command linebased  This screen is truncated  notice that Y offset  mm  has the OFF option instead of 5   To undo truncation just resize the window and type re to refresh the screen It is very important to have a proper size window for this program  Any misread in values due to improper window size by the user could result in undesired consequences   A properly resized window  notice that Y offset mm  properly display the value of 5  whereas Walking Mode  on off  displays OFF Type help to bring the help menu   exit exits the program  re refreshes the screen  save saves any changes made    darwin Data config ini     mon outputs and updates DARWINOP’s gyroscope and accelerometer values on screenPressing the space bar will reset the values enclose by   and  To observe changes in value for the gyroscope and accelerometer push DARWINOP gently and slightly forward  backwards  to the left  to the right grab DARWINOP by the carrying handle and shake it very slightly To end and return to the starting screen press the ESC key  The values from the screen are factorydefault values  These values are arbitrary  Use the up or down directional keys to scroll up or down Use the   to decrease switch values Use the   key to increase switch values Hold the shift key and press   or   to decrease or increase values by 10x       Walking mode on off  Turns DARWINOP walking on and off         X offset  mm  DARWINOP’s offset in the xdirection  front and back              Y offset  mm  DARWINOP’s offset in the ydirection  left and right              Z offset  mm  DARWINOP’s offset in the zdirection  up and down              Roll x  offset  degree  DARWINOP’s roll offset  xcoordinate              Pitch y  offset  degree  DARWINOP’s pitch offset  ycoordinate              Yaw z  offset  degree  DARWINOP’s yaw offset  zcoordinate              Hip pitch offset  motor  DARWINOP’s pitch offset  ycoordinate  at the hip level  Values are for Dynamixel position values for ID11 and ID12         Auto balance  on off  Turns DARWINOP balancing on and off       Period time  msec  Time required for DArwInOp to complete two full steps  left and right foot             DSP  Double Stance Period  ratio time ratio of both feet on ground to one foot  either left or right  on ground             Step forward back  mm  Differential distance  xdirection  between DARWINOP’s left and right foot during walk             Step right left  mm  Differential distance  ydirection  between DARWINOP’s left and right foot during walk             Step Direction  degree  Direction of DARWINOP’s stepping  towards left or right   The head also aims at the direction             Turning aim on off DARWINOP aims at a point while stepping to the left or right             Foot height  mm  This is DARWINOP’s foot elevation during walk             Swing right left  mm  This is DARWINOP’s swing to either left or right during walk             Swing top down  mm  This is DARWINOP’s up and down body swing during walk             Pelvis offset  motor  DARWINOP’s roll offset  xcoordinate  at the pelvis level  Values are for Dynamixel position values for ID9 and ID10         Arm swing gain Arm swing gain with respect to Step forward back  If the left left moves forward then the right arm swings   Balance knee gain Gain with respect to the gyroscope pitch   Balance ankle pitch gain Gain with respect to the gyroscope pitch  Balance hip roll gain Gain with respect to the gyroscope roll       Balance ankle roll gain Gain with respect to the gyroscope roll         P gain Gain with respect to P  proportional  band for the MX28   I gain Gain with respect to I  integral  action for the MX28   D gain Gain with respect to D  differential  action MX28 For more information on the MX series click here Web browserbasedOne advantage of web browserbased walk tuner is the ability to tune DARWINOP’s walking with a conventional web browser  This option also allows you tune walking from a wifi capable mobile device and away from your desk  Another advantage of webbased browser is that it offers the flexibility to tune walking parameters regardless of device  and operating system  You can tune walking with basically any device with wifi and an internet browser  You may start tuning from one device and continue tuning work with another  You may perform walk tuner via wired or wireless LAN connection  However  with mobile devices you’ll need to be connected wirelessly Make sure to run Walk TunerAccessing walk tuner from a computer  wired wireless   Ensure that Walk Tuner is running  Open your web browser          If you are interfacing with DARWINOP via wired LAN then type http  192 168 123 18080 on the address bar      If you are interfacing with DARWINOP via wifi then type http  IPaddressfromDHCP8080 on the address bar      Tip If you cannot remember the IP address provided by DHCP then on a new terminal window type ifconfig When interfacing with DARWINOP wirelessly make sure you  remember the IP address assigned by DHCP   have a strong wifi communications signal between your wireless access point router and DARWINOP  have a strong wifi communications signal between your wireless access point router and your computer   keep devices that adversely affect communications signal between your access point router and DARWINOP and computer  i e  operating microwave ovens  active bluetooth devices    For this example  you need to type http  192 168 0 1798080 on the address bar   However  there may be times when some or all fields are empty  In any case simply double click on the empty area s  and the initial value will appear   Clicking on the  lt button decreases the value by 1 unit  Clicking on the  gt button increases the value by 1 unit  Clicking on the  lt lt button decreases the value by 10 units  Clicking on the  gt gt button decreases the value by 10 unitsAccessing Walk Tuner from a mobile device or tablet  via wifi interface   Ensure that Walk Tuner is running2  Ensure that you know the IP address provided by DHCPHere are some sample screenshots  from an iOS device  from a tablet  QNX You may also notice the same missing fields as in the computerbased web browser  However  double clicking double tapping the screen will only magnify decrease the display  In this case increase a value by 1 unit and decrease it again by 1 unit the browser will display the initial value Firmware InstallerSoftware version 1 2 0 or higherFirmware installer can be found at  darwin Linux project firmware_installerTo download firmware software into the sub controller or actuator at the directory  darwin Linux project firmware_installer  Make sure that there is an executable file named firmware_installer   Input h or help argument for usage   If there is no said file then create it by typing make the compiler will automatically generate the file   Ensure that cm730_0x12 hex and mx28_0x1C_4096 hex are present   Run the program by typing   firmware_installer      By default the installer will choose cm730_0x12 hex and mx28_0x1C_4096   To load mx28_0x1A_1024 hex then you must type     firmware_installer a mx28_0x1A_1024 hex  Install the CM730 firmware by selecting the first option   Press the CM730’s RESET button   Ensure that download succeed   To install the firmware for the RX28M actuators select the second option from firmware_installer   Press the CM730’s RESET button   The installer automatically lists connected ID’s and installs the firmware of each ID individually  Afterwards verify success You may install your own firmware by typing  firmware_installer c YOUR_CM_FIRMWARE hex a YOUR_MX_FIRMWARE hexthis process assumes that YOUR_CM_FIRMWARE hex and YOUR_MX_FIRMWARE hex are located at  darwin Linux project firmware_installer If your firmware file is located elsewhere then you needs to specify its location by typing  firmware_installer c  DIRECTORY SUBDIRECTORY         YOUR_CM_FIRMWARE hex a  DIRECTORY SUBDIRECTORY         YOUR_MX_FIRMWARE hex Software version 1 1 0 or lowerFirmware installer can be found at  darwin Linux project firmware_installerTo download firmware software into the sub controller or actuator at the directory  darwin Linux project firmware_installer  Make sure that there is an executable file named firmware_installer   Input h or help argument for usage   If there is no said file then create it by typing make the compiler will automatically generate the file   Ensure that cm730_rx28m_4096 hex and cm730_rx28m_1024 hex are present   Run the program by typing   firmware_installer      By default the installer will choose cm730_4096 hex  To load cm730_1024 hex thenyou must type     firmware_installer f cm730_1024 hex  Install the CM730 firmware by selecting the first option  This option also includes installation firmware for the MX28 actuators  Please note that Dynamixel firmware will only be installed into the controller   Press the CM730’s RESET button   The installer will assign 2 blocks of 128KB each for firmware download  Ensure that both blocks succeed   To install the firmware for the MX28 actuators  from controller to actuators  select the second option from firmware_installer  Note that this option installs the firmware that is currently installed on the CM730 sub controller  This process does not include any actuator firmware installed in the main controller  PC    Press the CM730’s RESET button   The installer automatically lists connected ID’s and installs the firmware of each ID individually  Afterwards verify success You may install your own firmware by typing  firmware_installer f YOUR_FIRMWARE hexThis process assumes that YOUR_FIRMWARE hex is located at  darwin Linux project firmware_installer If your firmware file is located elsewhere then you needs to specify its location by typing  firmware_installer f  DIRECTORY SUBDIRECTYRY         YOUR_FIRMWARE hex Offset TunerThe purpose of offset tuner is to offset DARWINOP’s poses  Changes made in Offset Tuner will affect DARWINOP when running other programs  i e  demo programs   This program is practical to make some changes on DARWINOP when performing under certain environmental conditions WarningBefore you change any value s  it is highly recommended that you become very familiar and proficient with DARWINOP and the MX28  Remember that changes made with Offset Tuner affects DARWINOP’s performance Some motions may need to be edited as a result of Offset Tuner  Use Action Editor to edit the motions  i e  when trying to get up after falling  Improper modifications with Offset Tuner may affect DARWINOP’s performance adversely ROBOTIS is not responsible for any damages caused as result of changes in value due to lack of user expertise or user negligence Offset tuning files can be found at  darwin Linux project offset_tunerBefore starting walking pace tuner ensure that DARWINOP is in the kneeling position To tune walking parameters go to the directory  darwin Linux project offset_tuner  Make sure that there is an executable file named offset_tuner   If there is no said file then create it by typing make the compiler will automatically generate the file   Run the program by typing   offset_tuner  You will notice DARWINOP’s head LED change from green to amber   DARWINOP will stand up  Please be very cautious as DARWINOP can fall while standing up   Once in the program type help for information   From there you may follow the options given to you   To exit the program type exit  You may see a message are you sure   y n  Press the y key to confirm  Press the n key to cancel  This message will appear if you make changes but have not save such changes Offset tuner allows you to manipulate the MX28 position values For more information about the MX28  please refer to MX28 manual For more information about Actuator ID Map of DARWINOP  please refer to ID Map Ensure that you have a properly sized windowAfterwards the following window appears  GOAL is the value set for the Dynamixel ID  For more information about Goal refer to dxl_monitor  If you modify this value MODVAL value will modify automatically  For example if you decrease ID 11 by 13 units then MODVAL from ID 11 will automatically decrease its value by 13 units  Changes made here will not be saved   OFFSET is the value set for the Dynamixel offset  to change poses edit Offset value s   This is the difference between MODVAL and GOAL  You may edit this value directly or via MODVAL  Changes made here can be saved  MODVAL This is the new goal position  This is the modified value  You may edit this value directly or via OFFSET  Changes made here can only be saved as OFFSET values  PRSPOS is current position of the Dynamixel ID  This PRSPOS may change after a screen refresh or running the program at a different time  This is the current position value   ERRORS is the difference between PRSPOS and MODVAL   P_GAIN is the value set for P  proportional  gain  You can modify the P gain value in this program but cannot save changes   I_GAIN is the value set for I  Integral  gain  You can modify the P gain value in this program but cannot save changes   D_GAIN is the value set for P  differential  gain  You can modify the P gain value in this program but cannot save changes type help and the following window appears  exit exits the program  After exiting the program press the RESET button on DARwinOP   re refreshes the screen   set  value  sets position value on chosen actuator  You may set the offset on OFFSET of the new value in MODVAL  If change value in MODVAL OFFSET value will automatically change and viceversa  Use the directional arrows to select the value you wish to change   pgain  value  sets the P  proportional  parameters on all Dynamixels   igain  value  sets the P  integral  parameters on all Dynamixels   dgain  value  sets the P  differential  parameters on all Dynamixels   save saves any changes you’ve made    darwin Data config ini    The config ini file only contain changes made in OFFSET  either directly or via MODVAL    on off turns on off torque from all Dynamixels   on off  index1   index2   index3  … turns torque on off from ID index1  ID index2 ID index3   For example if you type off 13 16 19 then torque from ID 13  16  and 19 will be released   Pressing the   key will decrease value by 1 unit  Holding the shift key     will decrease value by 10 units  Use the directional arrows to select the value you wish to change   Pressing the   key will increase value by 1 unit  Holding the shift key     will increase value by 10 units  Use the directional arrows to select the value you wish to change Example with Offset TunerLet’s make some changes of the upper body so that DARWINOP appears in a more relaxed pose The ID’s involved in this change are 1  2  5  and 6 Once you run the program you will notice that DARWINOP remains in the standing pose and the following screen provides information on the MX28 at the current poseThe current pose may not look as relaxed so let’s make some changes in the arm joints Use the directional keys to move the cursor over to the OFFSET column  Use the   key to decrease  hold the shift key     key to decrease by 10 units at a time   Use the   key to increase  hold the shift key     key to increase by 10 units at a time   Make the appropriate changes for ID’s 1  2  5  and 6 You can visually see the changes of pose on DARWINOP as you increase decrease the values DARWINOPs standing pose is now more relaxed The following screenshot is information on the MX28 with the new poseNotice that only OFFSET on ID’s 1  2  5  and 6 has been changed  During the changes if you think the errors are too large  like ERRORS of 8 for ID 1 and 8 for ID 2  then adjust the P I D gain values  Please keep in mind that changes in P I D gain values will not be saved Type save to save changes  to view the saved file go to  darwin Data and read the config ini file by typing cat config iniAs you can see only OFFSET values are saved Since this is an offset tuner program any position data on ID’s 1  2  5  and 6 from the motion_4096 bin file will be offset by the amount edited  In other words any other program will be affected by the changes  i e  the demo program  Notice the arms as DARWINOP pursues the ball  Compare this pose with an unedited version of the offset Another picture showing DARWINOP with the new arm pose Let’s compare 2 DARWINOP’s  left DARWINOP unchanged  right DARWINOP with the edited offset   Both DARWINOP running under Interactive Mode of the demo program synchronized Notice how the changes take effect as soon as the demo program is loaded Select Interactive Mode on both DARwIn’s and press the Start button simultaneously Both are about to say thank you  notice the arms from each DARwIn   The DARwIn on the right appears more relaxed The arms and shoulders from DARwIn on the right are affected as a result of Offset Tuner As both DARwIn’s announce wow ",
      "url": "http://0.0.0.0:4000/docs/en/platform/op/development/"
      } ,
  
  
      "docs-en-platform-op-getting-started":  {
      "title": "DARwIn-OP",
      "content"	 : "IntroductionCongratulations on purchasing DARWINOP  DARWINOP will lead you to the robot world with virtually unlimited research possibilities and opportunities  Read this guide before getting with DARWINOP What is DARWINOP Safety InformationCaution Exercise safety when using this product  Robotis is not responsible  in any ways  for any accidents due to user negligence   Please read the instructions carefully before getting started   This product may not be suitable for children aged below 15   Do not use any other tools other than the ones provided with the kit   Face the robot away from you during operations   Do not place your fingers at the robot’s joints   Do not operate robot near water or direct sunlight Getting StartedPackage Contents  Fullyassembled DARWINOP robot  3 battery packs  1 battery pack charger  1 DC power supply  1 power cable  1 ethernet cable  2 wrenches  2 screwdrivers  1 set of spare cables  1 set of spare bolts and nuts  1 red ball  1 set of color patches  7 individual   1 USB thumb drive  with installed recovery software   1 quick start guide  1 CD with RoboPlus software  2 spare fusesLayoutCharging BatteryCharging StatusCaution If the connection is unstable  please unplug the battery pack completely and plug the battery pack again Caution Only use the supplied battery charger  Charging the battery pack with any other charger may cause damages Battery Hot SwapOne distinguishing feature of DARWINOP is its ability to change the battery pack without the need of shutting down To switch battery pack  while operating  perform the following      Connect the DC power to the DC jack             Disconnect the battery cable from the battery jack             Unscrew the thumbscrew from the battery compartment door             Remove the battery pack             Insert a fullycharged battery pack close and screw the thumbscrew             Connect the battery cable to the battery jack The connector is a standard deans jack with the same dimensions              Remove DC power from the DC jack       OperatingPreparationThe following procedure takes you through the set up process       Set DARWINOP in the kneeling position as illustrated below      Caution Setting DARWINOP in any position other than kneeling may cause physical damages       If DC power  12V  supply is used to provide power to DARWINOP  Connect the AC plug of your power adapter into a power outlet and the DC connector into DARWINOP’s DC jack  The DC jack is located at the back and lower right side of DARWINOP             If Battery Pack  11 1V  is used instead of the DC power supply  You can select either DC power supply or battery pack to power on DARWINOP  If you want to use the battery pack please follow the steps below     Ensure the battery pack is fully charged   Open the battery back compartment door  unscrew the thumbscrew  and insert the battery pack   Close and secure the compartment  screw the thumbscrew  afterwards   Connect the battery pack cable to the battery power jack   Disconnect DC power supply Note To prevent unexpected shut down ensure that DARWINOP is connected to at least 1 active power source      assets images platform op op_003 jpg       Switching On  Turn rocker switch on located on the back lower right side of DARWINOP       Once power is on the following will take place sequentially            Status      Description                        The eye LED is turned onPower is on                    The head LED is turned on greenThe PC inside DARWINOP operating system is booting                    The head LED is turned on amberDemo program is loaded and DARWINOP is ready to operate                    Demo program is loaded and DARWINOP is ready to operate      Demo ProgramDARWINOP comes with preconfigured 4 modes of operations  Demonstrationready mode  Autonomous Soccer mode  Interactive Motion mode  Vision Processing modeDARWINOP defaults to Demonstrationready mode when turned on To switch between modes  press the MODE button  DARWINOP announces each mode with each pressing  Each mode has its own indicating LED To run each mode  press START button  After pressing START DARWINOP will stand up and begin operations RESET ButtonThe RESET button resets the actuators  not the entire robot  Please keep in mind that the demo program is still running in the main controller Caution The RESET button powers off all actuators  It is highly recommended that DARWINOP is set at kneeling position before pressing RESET or hold DARWINOP by its carrying handle  Pressing the RESET button while DARWINOP is moving may result in damages the the actuator s  or and robot itself Demonstration Ready ModeThis is the default mode when you turn DARWINOP on  LED 1  red   LED 2  blue  and LED 3  green  are on the head LED changes from green to amber and DARWINOP announces demonstrationready mode  DARWINOP is ready for action Note DARWINOP remains in kneeling position and does not move under this mode  This is the bestsuited mode to change power source If you wish to completely end the demo program without turning DARWInOP off please refer here Autonomous Soccer ModeDARWINOP pursues and kicks a red ball  you can change the ball color   playing a soccer by itself  When DARWINOP falls down  either on its back or belly  it gets up resumes ball search and pursuit Start Autonomous Soccer Mode      Press the MODE button until the LED 1  red  is on  DARWINOP announces Autonomous soccer mode         Press the START button to begin  DARWINOP will stand up and announce Start soccer demonstration   Right after then DARWINOP announces either          sensor calibration complete if you hear this message DARWINOP is ready to run under Soccer mode      sensor calibration failed if you hear this message DARWINOP will remain standing until gyroscope sensors are properly calibrated followed by sensor calibration complete announcement  If sensor calibration cannot be completed then run demo program again         When DARWINOP sees the ball it walks towards the ball  Once the ball is close DARWINOP kicks the ball with either left or right foot  If DARWINOP falls during ball pursuit or kick it gets back up Stop Autonomous Soccer ModePress the MODE button DARWINOP returns to DemonstrationReady Mode Interactive Motion ModeDARWINOP performs preprogrammed motions sequentially while talking Start Interactive Motion Mode      Press the MODE button until LED 2  blue  is on  DARWINOP announces Interactive motion mode         Press the START button to begin  DARWINOP will stand up and announce Start motion demonstration   DARWINOP performs the following actions sequentially                                                1  Thank you      2  Introduction      3  Wow      4  Sit Down                                              5  Stand Up      6  Clap      7  Oops      8  Bye Bye      Stop Interactive Motion ModePress the MODE button DARWINOP returns to DemonstrationReady Mode Image Processing ModeDARWINOP performs the same motions as Interactive motion mode  but individually  depending on the color s  card  Use the supplied color cards Color Card SetYou may download the cards from here Start Vision Processing Mode  Press the MODE button until the LED 3  green  is on  DARWINOP announces Vision processing mode   Press the START button to begin  DARWINOP announces Start vision processing demonstration and gets up   Select a color s  card and place it in front of DARWINOP  The card should be approximately 15cm  about 6in  in front of DARWINOP Stop Vision Processing ModePress the MODE button DARWINOP returns to DemonstrationReady Mode If you experience difficulties with DARWINOP reading the card you may need to adjust color and white balance  For more information refer to Camera CalibrationCamera CalibrationIf it the lighting around DARWINOP is too bright or dark  it maybw difficult to operate DARWINOP You may change settings for color and white balance You may modify color settings to change ball color for Soccer Mode To be able to manipulate color settings you must  Connect to DARWINOP via ether wired or wireless LAN   Check on the ‘Obtain an IP address automatically’ menu from Internet Protocol  TCP IP  properties of ‘Local area connection properties’  Have a web browser Firefox  recommenced  or Internet Explorer The following procedure to access color settings assumes a connection via wired LAN  Ensure you have a proper connection with DARWINOP   Open up your computer’s web browser Note Please abstain from using Chrome web browser as it can cause memory leaks   On the address line type http  192 168 123 18080  Click on the increment decrement buttons until you have desired settings  You can see the changes visually The following values are the default values                    Ball      Red      Yellow      Blue                  Hue 0   360       356      0      60      225              Tolerance 0   180       15      15      15      15              Minimum Saturation 0   100       50      55      45      45              Minimum Value 0   100       10      0      0      0              Gain 0   255       255      255      255      255              Exposure 0   10 000       1 000      1 000      1 000      1 000      HSV Color SpaceThe HSV Hue  Saturation  Value  model  also known as HSB  Hue  Saturation  Brightness   define color space in terms of three constituent componentsHue Scale  Hue          The color type  such as red  blue  or yellow       Ranges from 0360  but normalized to 0100% in some applications         Saturation  chroma           The vibrancy of the color      Ranges from 0100%      This is sometimes called the purity by analogy to the colorimetric quantities excitation purity and colorimetric purity      The lower the saturation of a color the more faded its appearance thus useful to define desaturation as the qualitative inverse of saturation        Value  intensity           The brightness of the color      Ranges from 0100%      How do you know if color calibration for the ball has been properly adjusted for the desired color The illustration above depicts the ball covered in a patch of orange and green at the bottom right   Orange means that color calibration has been properly matched to the color of the ball desired  In this particular case the color of the ball is blue However  there is also a patch of green at the lower right portion of the ball   Green means that the hue tolerance range between the ball settings and one of the other colors settings  blue in this case  overlap Recall that the default hue for blue is 225 with a tolerance of 15  This gives blue a hue range from 210 to 240 In this example the hue value for the ball has been changed to 216  for a blue ball  with tolerance at 15  This gives the ball hue range from 201 to 231 Values between 210 and 231 overlap  This means that the hue value s  at the lower right portion of the ball is between 210 and 231 ShutdownTo shut down the computer inside DARWINOP perform one of the following1  Press the depression button  1st depression   located on the front left side of the chest  3 times 2  If you can connect a monitor and see the screen  click on darwin  located at the top right corner of the screen  and then click on Shut Down DARWINOP will announce ‘byebye and begin shutdown procedureDARWINOP’s head LED will blink on and off  OS shutdown   Once the head LED stops blinking and remains off you may cut the power off  The eye LED’s remain on  Ignore the eye LED’s turn power off Note If you cut the power off while the head LED blink  then DARWINOP may have problems turning on the next time ",
      "url": "http://0.0.0.0:4000/docs/en/platform/op/getting_started/"
      } ,
  
  
      "docs-en-platform-op-maintenance":  {
      "title": "DARwIn-OP",
      "content"	 : "MaintenanceFuse ReplacementThere may be a time when you turn the rocker switch on DARWINOP may not power up at all regardless of power source  DC  battery   If that’s the case then this is most likely caused by a blown or defective fuse The fuse is rated at 12V  volts  and 10A  amps   Replacing the fuse requires requires disassembly of DARWINOP’s main body and expose the subcontroller CM730  Once the subcontroller is exposed locate the fuse  The diagram below shows the fuse location enclosed by the red rectangle Carefully remove the fuse with a pair of tweezers  Afterwards carefully insert a new fuse Warning Improper care during removal or insertion of the fuse may result in damage s  to the fuse housing or and other components of the subcontroller Cm730 Hardware MaintenanceYou can find Assembly  Wiring and Fabrication manuals here courtesy of RoMeLa MaintenanceRobotis recommends that DARWINOP users perform preventive maintenance once every 1200 minutes  20 hours  worth of motion Robots are moving mechanical parts and preventive maintenance is necessary to keep robots in optimum conditions Perform maintenance in a welllit and dry place Neglect may result in unnecessary and costly damage ProcedureEvery single screw and nut should be tightened Overtightening is not necessary and may be counterproductive as it may damage the threading of the bolts and wrenches Disassembling DARWINOPRemove the battery Remove the plastic skin on DARWINOP  This includes the head and body If your DARWINOP includes FSR units on its feet then you should also remove the plastic casing from the feet Divide DARWINOP into the following groups sections  Upper body and neck  ID 1  2  and 19  frames  2 elbow shoulder  neck  sub controller  4 short interactuator Disconnect any connection between sub controller and main controller Disconnect any cables between the arms and upper body Remove arms from upper body   Head  IS 20  frames  head frame  USB camera   Each arm  ID 3 5 right  ID 4 6 left  frames  hand  elbow shoulder  and actuator lateral   Torso  ID 7  8  9  10  frames  main controller  groin  2 dxlmain controller bumper  power sitch pcb  power sitch  l lower back  2 hip  4 long interactuator Disconnect cables from legs to torso  Remove legs from torso Main controller does not need to be detached from forso   Each thigh  ID 11 right thigh  ID 12 left thigh  frames  2 actuator lateral  thigh   Knee and lower leg  ID 13  15 right  ID 14  16 left  frames  leg  actuator lateral  Foot  ID 17 right  ID 18 left  frame  2 long inter actuator  foot  ankleWiringEnsure that all connections are properly secured Ensure that the long cables are laid flat free of twists Replace cables whenever the protective coat has a cut leaving the wire s  exposed to air CleaningPlease ensure that the actuators  main controller and sub controller are free of dust  Although dust may not harm the internal components of both main controller and sub controller under dry condition  humidity may cause static potentially doing costly permanent damage to the controllers The recommended tools to remove dust  dirt and debris compressed air blower  or a nonmetallic soft brushDynamixel ReplacementThere may be an instance where you will need to replace a Dynamixel actuator due to failure  The following page will guide you on how to replace a Dynamixel actuator To replace an MX28 on DARWINOP you need to complete the following procedures   Proper installation of horn  bearing set to the new MX28   Proper ID and baud rate setting Please refer to the Assembly Guide for reference during replacement procedure Proper Installation of Horn and Bearing SetEvery MX28 on DARWINOP comes comes installed with the horn  front side of actuator   Some of the MX28’s come with the bearing set  rear side of actuator  installed as well  You will need a wrench for 2 5mm thick bolt  provided  Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL For more information on the bearing set please click here  Note that the bearing set is for the RX28  which will fit perfectly on the MX28 as they both share the exact physical dimensions Proper ID and baud rate settingMethod AYou have USB2Dynamixel and a Robotis dedicated robot controller  CM5  CM510  or CM700   Provide power to new MX28  That is connect one TTL port from the MX28 to the controller then power on the controller   Connect the other TTL port of the MX28 to the USB2Dynamixel dongle  Make sure to set the switch to TTL on the dongle    Connect the dongle to an open USB port in your PC  Run Dynamixel Wizard   Change the ID number from 1 to the proper number   Change the baud rate from 34  576000 bps  to 1  1 Mbps    After replacement is done  Run DXL Monitor and reset all Dynamixels Click Dynamixel Wizard for more information Method BYou have USB2Dynamixel but do not have a Robotis dedicated robot controller  CM5  CM510  or CM700  Steps 2 through 5 from Method A remains unchanged  Step 1 needs to be modified for proper power supply You will need 2 separate 3pin TTL cables  they come supplied with every DARWINOP   The following procedure is recommended      Open the Interface panel of DARWINOP  back cover   Carefully remove the plastic back panel to prevent any damages to the interface board cables         Disconnect both Interface Board cables     Temporarily disconnect ALL currently connected cables  You can choose any TTL port  Do not disconnect the power cable from subcontroller to main controller  Doing so will not allow Dynamixel Wizard proper Dynamixel search       Connect a spare TTL cable to any open port and the other end to the new MX28         Connect a second TTL cable to the other port of the MX28  Connect the other end of the cable to the USB2Dynamixel controller  Afterwards connect USB2Dynamixel to the PC         Turn the switch on on DARWINOP and let Ubuntu load  this process may take up to 2 minutes    Note The head LED will remain green and will not turn amber  The demo program will not run automatically         Connect to DARWINOP and run Dynamixel Monitor   Once Dynamixel Monitor is running all actuators will show as fail even with the new MX28 connected  Do not exit Dynamixel Monitor  Leave the program running     On Windows run Dynamixel Wizard   Change address 4  baud rate  from the default value of 34 to 1  You must perform this operation with Dynamixel Wizard as Dynamixel Monitor does not support this function currently  If you do not change the baud rate then Dynamixel Monitor will fail to scan the actuator   Change address 3  ID  from the default value of 1 to the desired value  You may also use Dynamixel Monitor to change ID as well Note RoboPlus Manager does not currently support the CM730 controller because it lacks the Serial Connector input Once the baud rate value is set to 1 you may return to Dynamixel Monitor and type scan to verify success on baud rate change  the first attempt may show the new actuator as fail if so type scan again until OK shows on screen  Once all changes are made you still need to exit Dynamixel Monitor and Shut down DARWINOP properly Once shut down and powered off replace the Dynamixel actuator and restore all connections Once connections are restored return to DXL Monitor and reset all Dynamixels If you are replacing 2 or more Dynamixel then you must perform this procedure again as Dynamixel Wizard will show errors when multiple Dynamixels with the same ID and same baud rate are connected Once the actuator has been replaced it is highly recommended that you update the firmware with Firmware Installer so that ALL Dynamixels are matched with the same firmware Method CYou do not have USB2Dynamixel controller nor a Robotis dedicated robot controller  CM5  CM510  or CM700  Ensure you perform proper horn installation and proper bearing set installation  if applicable  Example 1Replace the the right elbow  ID 5  with a new actuator without disconnecting the remaining actuators If so let’s assume we need to replace the right elbow  ID 5  and already replaced the actuator before performing the software changes  Run DXL Monitor You will see the following appear on screen  Despite installing the new actuator replacement for ID 5 the software still displays as fail  Now its time to make the proper changes   Go to ID 1 by typing id 1 and temporarily assign a different ID number  You may assign numbers between 21 and 199 but refrain from numbers between 1 and 20 let’s say change to 39 so type wr 3 39   Notice that the command prompt changed from ID1 R_SHOULDER_PITCH to ID39 UNKNOWN   Return to the CM730 command prompt by typing id 200   Type scan and notice the extra ID on ID 39  You’ll also notice that ID 1 and 5 failed   Type the command wr 4 34 while remaining in ID 200  This means that the communications baud rate between the CM730 and MX28 switched from 1Mbps to 576000 bps   Type scan and the following will appear onscreen  Notice that all actuators fail except ID 1  remember that the default values on a new Dynamixel is ID 1 and baud rate 34   Notice that ID 39 does not appear anymore  No need to worry this is because ID 39 does not currently have a specific function in DARWINOP and the baud rate of said ID is 1 Mbps whereas the current baud rate between the CM730 and and MX28 is 57600 bps   go to ID 1 by typing id 1  The command prompt will change from ID 200 to ID 1  change the baud rate from 34 to 1 by typing wr 4 1  Once baud rate of the new actuator matches with the rest of the actuators return to to ID 200 by typing id 200  Change the baud rate between CM730 and MX28 back to 1 Mbps by typing wr 4 1  Return to ID 1 by typing id 1 change the ID from 1 to desired ID  In this case to ID 5 by typing wr 3 5  Return to ID 200 and type scan  Notice that ID 5 has been set  but ID 1 still failed and there’s ID 39  Go to ID 39 by typing id 39  Remember that ID 39 is a temporary ID change for ID 1  Now its time to revert the change back   Go to ID 39 by typing id 39  Restore ID 1 again by typing wr 3 1  Return to ID 200 and run scan   Run reset all and all DARWINOP will be back to normal again Repeat the same procedure again if replacing more than 1 actuator Example 2Replace the the right elbow  ID 5  with a new actuator with less software manipulation Just like Method B disconnect all Dynamixels from the CM730 but do not disconnect the power from CM730 to Main Controller  However in this case instead of the need for 2 3pin TTL cables you’ll only need 1   Connect the new actuator to any TTL port   Turn DARWINOP on and run DXL Monitor  Do not worry about setting DARWINOP in the kneeling position during this procedure as the demo program will fail to run automatically due to the disconnected Dynamixels  Please set DARWINOP in a stable position  either sitting or laying down on its belly    Run scan and you will notice that all ID’s will fail  Change the baud rate on ID 200 from 1 Mbps to 57 600 bps by typing wr 4 34  Run scan again and you’ll notice the OK on ID 1  remember that all new Dynamixels have default values 1 for ID and 34 for baud rate    Go to ID 1  Change the baud rate of ID 1 from 57 600 bps to 1 Mbps by typing wr 4 1  Return to ID 200 and change the baud rate back to 1 Mbps  Return to ID 1 and make the ID change  In this case change to ID 5 by typing wr 3 5  Return to ID 200   The ID change is done  Shut down DARWINOP properly  power off  Perform replacement  restore all connections and turn DARWINOP on again  Remember to set DARWINOP in the kneeling position as all actuators are connected and the demo program will run automatically   Perform the killall procedure to end the demo program  Run DXL Monitor and reset all Dynamixels For multiple Dynamixels  you may only repeat steps 3 through 9  You can disconnect the actuator after step 9  connect the new Dynamixel and run from step 3 again Once done replacing Dynamixel s  and settings set appropriately run Firmware Installer  Select option 2 and you are done  This is an important final step because it sets the angle limits on the joints DARWINOP is back to normal again Example 1 requires less hardware work but more programming work  as well as keeping careful track of changes made during programming and repeating the entire process for multiple Dynamixels Example 2 requires more hardware work  unscrewing screwing disconnecting connecting   but less on software work Pick the method that most convenient for you Note The reset all procedure at the end is necessary because DXL Monitor will set the angle limits on all Dynamixels  Setting angle limits is a robot safety mechanism to prevent joints from overextending  therefore preventing damage to the robot Pressing the reset button on DARWINOP will reset settings of the subcontroller CM730 to default values  For example  If the CM730 has the baud rate changed from 1 Mpbs to 576000 bps  pressing the reset button will change the baud rate back to 1Mpbs  default    If the eye LED has been changed from blue to orange  pressing the reset button will change the color back to blue  default  Controller ConnectionSometimes you may find DARWINOP irresponsive despite the main controller  fitPC  and subcontroller  CM730  operating normally  In such case it may be a rare connection loss between the main controller and suncontroller The main controller and suncontroller are connected by a physically modified USB connection  Although USB is quite reliable  just like any other USB device you may lose connection You can verify the connection by the following  Hardware component          Verify proper physical connection between main controller and subcontroller        Software component          Running any program from the source code should output a message about CM730 not detected       go the the ‘ dev’ directory  type ls and look for ttyUSB0  If its not there then there’s a connection loss  In such case simply restart DARWINOP       If problem persists contact ROBOTIS for an RMA Procedure Camera ConnectionThere may be an instance when DARWINOP’s main controller may lose connection with the camera  Please ensure that the USB camera cable is properly connected to the the camera and main controller To verify camera connection with Linux OS perform the following   On a terminal window go to the ‘ dev’ directory   Type ls and you’ll see a list of devices and look for ‘video0’ This is the camera as an USB device If you do not see a ‘video0’ device then you may need to replace the camera cable and or camera  in such case you may replace the USB cable  the camera  or contact ROBOTIS for an arrangement Note If you lose physical mechanical  connection between the main controller and subcontroller  then you automatically lose camera connection  This is because the USB cable for the CM730 and camera share the same molex connection Self Maintenance ChecklistYou may run your own maintenance check should DARWINOP have some anomalies Power does not turn onCheck and proceed  Does DARWINOP eyes turn blue when turning power on           yes                  Check for fan noise                    no  but Cm730 powers on                  Check the LED cable from CM730 to eye  If the cable is defective then post your problem here                       Can you hear fan noise from the back of DARWINOP           yes                  Check for LED’s                    no  but CM730 powers on                  Check the cable from CM730 to Interface board  back   if the cable is defective contact us for an arrangement                     no  and CM730 is not getting power                  If that’s the problem then post the problem here                     Note If the CM730 does not get any power then the FitPC will not get any power   Does the head LED turn on           yes                  Check for Ubuntu does not start symptom                     no  but CM730 and FitPC turn on fine                  If the cable is defective then post your problem here                     no  but CM730 turns on fine                  Check the physical connection between CM730 and FitPC followed by connecting a HDMI DVI display  mouse  and keyboard and operate DARWINOP’s PC  Check for Ubuntu does not start symptom                     Ubuntu does not start  Connect a HDMI DVI display  mouse  and keyboard and operate PC           Operate PC from DARWINOP        Does the FitPC’s main screen with the Intel Atom logo appear           yes  the PC is still good                   You may use Linux’s advanced settings to restore the OSor  use the provided USB thumbdrive and restore OS                     no                  post your problem here                     Demo program does not work when turning DARWINOP on  Properly shut down DARWINOP and restart again  If this happens again more then twice then check the following          There are a few ways to Shut down DARWINOP         Do you have the most updated firmware version of the CM730 and MX28 installed   Run Dynamixel Monitor…   are all Dynamixel OK           no                  Install the latest firmware                    yes                  There’s a chance that the baud rate of any of the MX28’s is are not properly set to 1 Mbps    Use Dynamixel Monitor to check if address 4  baud rate  is set at value 1  If any MX28 is not set at 1 Mbps then set it to 1 Mbps                     yes  the MX28 had the latest version of firmware  baud rate was 1 Mbps and ID was properly set  But  after some time Dynamixel Monitor shows as fail                   In this case post your issue here                       Check Connections  Make sure that the main controller and the subcontroller are physically connected  Make sure to check          the camera      camera cable      cable connection to camera      cable connection to main crontroller      make sure they are physically connected      run this procedure       Specific joint s  doesn’t don’t work  Are cables around the joint worn out           yes                  Replace cable s   Keep in mind due to the nature of the daisy chain  serial  network of Dynamixel some MX28 may appear as malfunctioning  not working at all     The MX28 connected directly to the CM730 are most significant If any most significant MX28 or connecting TTL cable to said MX28 go defective then all connected lesser significant MX28 s  will appear malfunctioning as well    The following is the connection order from most significant to least significant ID1  gt ID3  gt ID5 ID2  gt ID4  gt ID6 ID19  gt ID20 ID7  gt ID9  gt ID11  gt ID13  gt ID15  gt ID17 ID8  gt ID10  gt ID12  gt ID14  gt ID16  gt ID18   For example  if ID 13 does bad then ID15 and ID17 will appear to go bad  However  ID11  ID9  and ID7 remain unaffected                     no                  Use DXL Monitor to check status of the MX28 s   As a precautionary measure it is strongly advised th check the lesser significant MX28 first and work your way up to the defective MX28  If you ran all checks and the MX28 still malfunctions then post your problem here                     Unusual motions DARWINOP behaves strangely   Check the robot limbs  Are there any defective frames           Look for any bad frames around the defective area  There’s a chance that bolt s  and nut s  may have come loose  Tighten them and check the status of the MX28 and check for proper position sensor  horn  alignment  For any defective frames post your problem here       Slow or choppy motions  Battery conditions  if DARWINOP is running only under battery           DARWINOP has been programmed to beep if battery power is low  However  in noisy environments you may not be able to hear such beeps  Keep an eye for any slow  strange  or choppy motions         Linux OS conditions  The OS from the fitPC has been optimized so that DARWINOP can perform smoothly   There’s a chance that there are too many programs running in the background   Likely causes          turning on automatic updates while DARWINOP is operating      actively running remote desktop during operations      setting a veryhigh display resolution  i e  1080p       any program process that takes too many fitPC resources      any combination from a to d   Please bear in mind that this is a limitation of Intel Atom’s system design and not from Linux OS  nor the fitPC  nor ROBOTIS         Interfacing conditions          We strongly recommend interfacing with DARWINOP via SSH terminal rather than remote desktop  However  if remote desktop is a must then close any background programs from Ubuntu and use conventional screen resolutions  i e  1024x768        DARWINOP cannot see find the ball1 Check Color and White Balance Settings  Color and white balance settings are always an issue with image processing this includes DARWINOP  You must always check lighting conditions in your working environment  With this issue in mind we have provided a color and white balance calibration testing program Head and eye LED do not turn on nor the LED’s from the back of DARWINOP  Please refer to the Layout of the LED’s  Please see Power does not turn on symptom Can’t get any sound from DARWINOP  Check in the following order if any of these solutions solves the audio issue you may not need to run the remaining tests           There may be an instance when audio may have been disabled If that’s the case you can reenable audio by a simple Ubuntu restart or you may need to enable audio again via control center  If this does not solve the issue move on to the next resolution       if audio capabilities have disappeared from Ubuntu then you may need to reenable it by installing Ubuntu’s audio drivers  If this does not solve the issue move on to the next resolution       If Ubuntu’s audio capabilities are fine then you need to check the volume level on Ubuntu  make sure that the volume level is at least 75%  If audio capabilities on Ubuntu and volume levels are fine then move on to the next resolution       Check the audio speaker  located in chest  and CM730  check the audio cable between FitPC and CM730  In this case you may need to replace the speaker  If a replacement is necessary please post your issue here       RecoveryRecovery Ubuntu 9 10 Install Ubuntu 9 10Note Reference http  www fitpc2 com wiki index php title Installing_Ubuntu_9 10  Prepare Installation Media          You can use USB CDROM Drive or USB Flash drive  diskonkey  as installation media      Download Ubuntu 9 10 Desktop installation      If you are using USB CDROM  burn downloaded image directly on CD       If you are using USB Flash drive  1GB would be enough  Download usbcreator to create bootable installation flash drive         Installation of generic Ubuntu 9 10 Desktop          Standard Ubuntu installation  choose timezone  partitions  username  password etc       Unplug USB CDROM   USB Flash drive and reboot      Login using previously selected username and password      Reference  https  help ubuntu com 9 10 installationguide i386 index html      Note Please note that the command used in Linux operating system is case sensitive   Required system changes          Remember to enter sodu su at the command line to gain writing privelges otherwise file editing will not happen       Add the following lines to  etc apt sources list      In this case enter gedit  etc apt sources list  if using gedit              Repository for fitPC2 users provided by Compulab deb http  fitpc2 com download ubuntu dists karmic binary  debsrc http  fitpc2 com download ubuntu dists karmic source         Connect DARWINOP to the internet via ethernet       Refresh update manager      sudo aptget update            Install kernel image  kernel headers  graphic drivers and media player for HD playback      wget http  www robotis com download linux darwin linuxheaders2 6 3134fitpc2ir1 deb  wget http  www robotis com download linux darwin linuximage2 6 3134fitpc2ir1 deb  sudo dpkg i   deb  sudo aptget install xserverxorgvideopoulsbo mplayervaapi mplayerskins        Don’t restart here  Select Restart Later        Optional  If you want to get the kernel source      wget http  www robotis com download linux darwin linuxsource2 6 3134fitpc2ir1 deb         Optional  You may install w32codecs  libdvdcss2 and other usefull packages from Medibuntu repository       Comment out sndhdaintel options in  etc modprobe d alsabase conf      Power down HDA controllers after 10 idle seconds  options sndhdaintel power_save 10 power_save_controller N            Remove generic image and sources that are not fully compatible with fitPC2i       sudo aptget purge linuxgeneric linuximagegeneric linuxheadersgeneric linuximage  uname r  linuxheaders  uname r   amp amp sudo aptget autoremove        Restart fitPC2i  Ubuntu 9 10 is now installed Additional Software InstallationAfter installing ubuntu 9 10 you must install the following softwares  For Development                  Install g   compiler          sudo aptget install g                              Install Functions manuals          sudo aptget install manpagesdev                            Install Libraries          sudo aptget install libjpeg62dev libncurses5dev                      For Connections                  Install SSH server          sudo aptget install opensshserver                    Install Samba server                  On Ununtu’s desktop go to Applications  gt Ubuntu Software Center and search for sambaDownload Samba and install it  Configure samba server                     Configure VNC server  Install FreeNX https  help ubuntu com community FreeNX   etc        Miscellaneous Utilities      Subversion  Source code version control system client program      sudo aptget install subversion            madplay  Decode and play MPEG audio FILE s    This program must be installed for demo program       sudo aptget install madplay            guvcview  a simple GTK  interface for capturing and viewing video from devices supported by the Linux UVC driver       sudo aptget install guvcview      CM730 Firmware InstallationRefer to Firmware Installer section MX28 settingsRefer to Dynamixel Monitor section Use reset all command Recovery Linux Mint 9 Install Linux Mint 9Note Reference http  www fitpc com wiki index php Installing_Linux_Mint_9  Prepare Installation Media          You can use USB CDROM Drive or USB Flash drive  diskonkey  as installation media      Download Linux Mint 9 Isadora  Gnome CD  32bit       If you are using USB CDROM  burn downloaded image directly on CD       If you are using USB Flash drive  1GB would be enough  use Startup Disk Creator utility to create LiveUSB         Installation of generic Linux Mint 9          Standard Linux Mint installation choose timezone  partitions  username  password etc       Unplug USB CDROM   USB Flash drive and reboot      Login using previously selected username and password      Note Please note that the command used in Linux operating system is case sensitive   Required system changes          Remember to enter sodu su at the command line to gain writing privelges otherwise file editing will not happen       Add the following lines to  etc apt sources list      In this case enter gedit  etc apt sources list  if using gedit              Repository for fitPC2 users provided by Compulab deb http  fitpc2 com download ubuntu dists lucid binary  debsrc http  fitpc2 com download ubuntu dists lucid source         Connect DARWINOP to the internet via ethernet       Refresh update manager      sudo aptget update            Install kernel image  kernel headers  graphic drivers and media player for HD playback      wgethttp  www robotis com download linux darwin linuxheaders2 6 35 4robotis_r1_i386 deb  wget http  www robotis com download linux darwin linuximage2 6 35 4robotis_r1_i386 deb  wget http  www robotis com download linux darwin xserverxorgvideopoulsbo_1 51742_i386 deb  sudo dpkg i   deb  sudo updateinitramfs c k 2 6 35 4robotis  sudo updategrub2  sudo aptget install mplayervaapi mplayerskins        Don’t restart here  Select Restart Later        Optional  If you want to get the kernel source      wget http  www robotis com download linux darwin linuxsource2 6 35 4robotis_r1_all deb            Remove generic image and sources that are not fully compatible with fitPC2i       sudo aptget purge linuxgeneric linuximagegeneric linuxheadersgeneric linuximage  uname r  linuxheaders  uname r   amp amp sudo aptget autoremove        Restart fitPC2i  Linux Mint 9 is now installed Additional Software InstallationAfter installing Linux Mint 9 you must install the following software  For Development                  Install g   compiler          sudo aptget install g                              Install Functions manuals          sudo aptget install manpagesdev                            Install Libraries          sudo aptget install libjpeg62dev libncurses5dev                      For Connections                  Install SSH server          sudo aptget install opensshserver                    Install Samba server                  On Ununtu’s desktop go to Applications  gt Ubuntu Software Center and search for sambaDownload Samba and install it  Configure samba server                     Configure VNC server  Install FreeNX https  help ubuntu com community FreeNX   etc        Miscellaneous Utilities      Subversion  Source code version control system client program      sudo aptget install subversion            madplay  Decode and play MPEG audio FILE s    This program must be installed for demo program       sudo aptget install madplay            guvcview  a simple GTK  interface for capturing and viewing video from devices supported by the Linux UVC driver       sudo aptget install guvcview      CM730 Firmware InstallationRefer to Firmware Installer section MX28 settingsRefer to Dynamixel Monitor section Use reset all command Clonezilla RecoveryYou can recover the operating system in DARWINOP via Clonezilla  The recovery software is the same as the factorydefault preinstalled with DARWINOP Note Download the recovery image from here  Choose recovery image          Check DARWINOP SSD capacity before downloading the corresponding image        How to check DARWINOP’s SSD capacity          Turn on DARWINOP and press the ‘F2’ key to enter the BIOS menu               From the menu enter Primary Master 4GB NANDrive PM                      Check the capacity as shown below  Then download a matching image                   SSD Capacity 3 6GB      SSD Capacity 4GB                              NEW Create Recovery USB  Create a Clonezilla Live USB via Tuxboot  http  tuxboot org download filesonsf php   Oldfiles folder  gt 2 0 15 folder select and download clonezillalive2 0 15i486 iso  Select predownloaded and look for the file clonezillalive2 0 15i486 isothen click OKOnce complete click on Exit  Place the image under  home partimag of your thumbdrive  That is copy into the directory DARwIn_Recovery_20120319OLD USB Flash Memory PreparationGo to http  clonezilla org liveusb php for instructions on Clonezilla live USB flash The provided image file is located in the directory DARwIn_Recovery_date of recovery creation  yyymmdd  from the USB thumbdriveBoot SequenceConnect the USB thumbdrive into a USB port power on DARWINOP and press the F2 key to access Phoenix tm  Setup Utility  DARWINOP’s PC system BIOS  Select the Boot tab and in Boot order select USB CDROM as top priority After boot selection go to the Exit tab and select Exit Saving Changes  pick yes Operating System Recovery with Clonezilla  The first option from Clonezilla Select default menu  Clonezilla live  Default settings  VGA 800x600   Choose language English  default   en_US UTF8 English  Configuring consoledata keymap  Select the default option from the menu  Don’t touch keymap  Start Clonezilla Select the default option from the menu  Start_Clonezilla Start Clonezilla  Clonezilla Select the following  deviceimage work with disks or partitions using images  Mount Clonezilla image directory this is the partition where Clonezilla will perform recovery  local_dev Use local device  Ex hard drive  USB drive   Press the ENTER key after selection   Clonezilla  Opensource Clone System  OCS    Mode Select the following  sdb1 3925MB_vfat In_USB_DISK_ _usbSMI_USB_DISK_AA0000000000115401  Ensure you see the term sdb1 and vfat along with the size if your USB thumbdrive   Clonezilla  Opensource Clone System  OCS     Select default menu    Top_directory_in_the_local_device   Press Enter to continue……  Clonezilla  Opensource Clone System  OCS   Select default menu  Beginner Beginner mode Accept the default options  Clonezilla Select mode Select the following  restoredisk Restore_an_image_to_local_disk                              Clonezilla  Opensource Clone System  OCS           Mode restoredisk                      Clonezilla  Opensource Clone System  OCS    Mode restoredisk  Select the destination partition  sda 4096MB_4GB_NANDrive__ata4GB_NANDrive_0000000000R1Y19998XU   lt Press Enter to continue……  gt Press the ENTER key   lt Are you sure you want to continue     gt press the Y key   lt Let me ask you again  Are you sure you want to continue     gt confirm by pressing the Y key   Partclone after completeing restoration   lt Press Enter to continue……  gt press the ENTER key   You can either power off or reboot gt Make sure you remove the USB thumbdrive  after making your selection VideoNEW USB Flash Memory Preparation  Select either of the following          From Mount Clonezilla image directory select                  skip and pick Use existing  home partimag  writable device  E g  hard disk USB drive                     From Clonezilla Select mode                  select restoredisk pick Restore_an_image_to_local_disk                      Then press EnterUSB Flash Memory PreparationGo to http  clonezilla org liveusb php for instructions on Clonezilla live USB flash The provided recovery image file is located in the directory home partimag DARwIn_Recovery_ date of recovery creation yyyymmdd  From the USB thumbdrive Boot SequenceConnect the USB thumbdrive into a USB port Power on DARWINOP and press the F2 key to access Phoenix tm  Setup Utility  DARWINOP’s PC system BIOS   Select the Boot tab and in Boot order  Select USB HDD as top priority After boot selection go to the Exit tab and select Exit Saving Changes  pick Yes Operating System Recovery with Clonezilla  The first option from Clonezilla Select the default option from the menu          Clonezilla live  Default settings  VGA 800x600         Choose language English  default           en_US UTF8 English        Configuring consoledata Select the default option from the menu          Don’t touch keymap        Start Clonezilla Select the default option from the menu          Start_Clonezilla  Start Clonezilla        Clonezilla Select the default option from the menu          deviceimage  work with disks or partitions using images        Mount Clonezilla image directory Select the following          skip Use existing  home partimag  Writable device  E g  hard disk USB drive        lt Press Enter to continue…… gt  Press Enter key        Clonezilla – Opensource Clone System  OCS   Select the default option from the menu          Beginner Beginner mode Accept the default options        Clonezilla Select mode Select the following          restoredisk  Restore_an_image_to_local_disk        Clonezilla – Opensource Clone System  OCS    Mode restoredisk  Choose the image file to restore          Ex  DARwIn_Recovery_20120319  201203161405_sda        Clonezilla – Opensource Clone System  OCS    Mode restoredisk  Choose the target disk          Sda 4096MB_4GB_NANDrive__ata4GB_NANDrive_0000000000R1Q199982a       lt Press Enter to continue ……  gt  Press Enter key       lt Are you sure you want to continue     y n   gt  Press ‘Y’ key and Press Enter key       lt Let me ask you again  Are you sure you want to continue     y n   gt  Press ‘Y’ key and Press Enter key        Starting to restore image to device  Wait until done   After completing restoration           lt Press Enter to continue… gt  Press Enter key         Now you can choose to Choose 0 or 1           0  Poweroff       1  Reboot        Make sure you remove the USB thumbdrive  and reboot the DARWINOP ",
      "url": "http://0.0.0.0:4000/docs/en/platform/op/maintenance/"
      } ,
  
  
      "docs-en-platform-op-references":  {
      "title": "DARwIn-OP",
      "content"	 : "ReferencesBrochureDownload PDF Outside pages  1  4 Download PDF Inside pages  2  3 Specifications  Main controller  powered by Intel Atom Z530 CPU  clocked @ 1 6GHz   Sub controller  powered by STMicroelectronics CortexM3 STM32F103RE  clocked at 73MHz    Camera          2MP HD webcam with up to 1600x1200 resolution  720pcapable       30 fps      YUV  capture format       Carl Zeiss focus       Link Overall SpecificationsDownload PDF DiagramsHardware SpecificationsCore Component Specifications  Main Controller  fitPC2i             Feature      Specifications                  CPU      Intel Atom Processor Z530  1 6Ghz @533MHz FSB L2512KB dynamic sizing  L132KB IC  24KB DC  Intel Deep Power Down C6  technology support              Chipset      Poulsbo US15 Intel System Controller Hub  INTEL SCH               Memory      1GB DDR2  533MHz  64bit              Solid State Disk      3 6GB NAND flash disk              Display Interface      SDVO based DVI interface up to 1920x1080   Hotplug support               Audio      Realtek ALC260  High Definition Audio  Line Out  shared linein   micin              Ethernet      based on Gigabit PCIExpress controller Realtek RTL8111              WiFi      802 11 b g n capabilities  using RaLink RT3070 USB module  Up to 150Mbps  2 4GHz band               USB      2 external USB ports              BIOS      Phoenix SecureCore BIOS              SDIO slot      mini SD connector supporting SDIO1 1 and MMC4 1              Active consumption      57W depending on CPU load              Dimensions      104 x 96 x 23 mm              MTBF       gt 100 000 hours              Operation temperature      0°C to 70°C              Storage temperature      40°C to 85°C              Relative humidity      10% to 90%  operation 5% to 95%  storage       You may download CompuLab’s reference guide with detailed specifications here You can also get information on the speaker  microphones  and camera   Sub Controller  CM730           STMicroelectronics 32F103RE ARM Cortex 32bit CPU  clocked @ 72MHz       Actuator Interface  TTL or RS485  5x  each       Converters  USBtoSerial  ADC         Actuator  Dynamixel MX28           Stall torque 24kgf cm @ 12V      Maxon REMax customized DC motor      1931 reduction ratio      Up to 3Mbps buffered TTL interface      User programmable PID Gain      Up to 4096 resolution absolute encoder      Dynamixel Protocol 1 0        Interface          3 buttons      7 LED’s  2EA  15bit RGB  userprogrammable         Sensors          IMUs  3axis accelerometers  3axis gyroscope  both intrgrated into sub controller       Image  2MP Logitech C905  HD Camera       OPTION  Force 4 FSR per foot        Battery  LiPo           Voltage  11 1V      Capacity  1000 mAh      Discharge  10C      Dimension  70 x 35 x 15      Weight  83g      PCM embedded to protect from over charge  over discharge  and excess current         PCB Schematics          Download PDFHead PCB Schematic      Download PDFInterface Back Panel  PCB Schematic      Download PDFPower Schematic      Sub Controller  Download ZIP Framework  Download PDF Schematics  Download ZIP Reference GuideYou can also get information about the  gyroscope and accelerometer How to convert TTL to RS485Simply apply the 2 changes below to change the comm  method   Yellow Rectangle  Change location of resistance          RS24 Short  3P      R25 Short  4P        Red Rectangle  Must change connector           Not sold separately by ROBOTIS       For more information on the connector  please refer to the link below http  support robotis com en techsupport_eng htm product dynamixel dxl_connector htmFeatures            Feature      Specifications                  CPU      STMicroelectronics 32F103RE ARM Cortex 32bit CPU  clocked @ 72MHz  512KB Flash  64KB SRAM                Interface      5 x LED   2 x RGB LED  3 x Button  1 x Buzzer              External ports      13 x ADC  I O Ports              Sensor      3axis gyroscope   3axis accelerometer  supply voltage sensor              Communication      USB Port  Serial Port   5x TTL Ports  for Dynamixel               Audio  amp Mic Amp      Audio amp gain  20  mic amp gain  2027              ETC      Dynamixel Power Control Unit  Head board port  Interface board port               External supply voltage      8V   16 8v              Current consumption      Maximum 150mA   Standby 50mA              Dimensions      80 0mm x 75 0mm x 20 0mm              Operation temperature      65°C to  80°C              Weight      51g      Control TableControl Table consists of data regarding the current status and operation of CM730  The user can control CM730 by changing data of Control Table via Instruction packet EEPROM and RAMData in RAM area is reset to initial values whenever the power is turned on while data in EEPROM area is kept once values are set even if the power is turned off AddressRepresents the location of data  To read from or write data to the control table the user should assign the correct address in the Instruction packet AccessCM730 has two kinds of data Readonly data  used mainly for sensing  and readandwrite data used for driving Initial ValueIn case of data in the EEPROM Area  the initial values on the right side of the below Control Table are the factory default settings In case of data in the RAM Area  the initial values on the right side of the following control table are the ones when the power is turned on Highest Lowest ByteIn the Control table  some data share the same name  but they are attached with  L  or  H  at the end of each name to distinguish the address  This data requires 16bit  but it is divided into 8bit each for the addresses  low  and  high   These two addresses should be written with one Instruction Packet simutaneously EEPROM Area            Address      Name      Description      Access      Init Value                  0  0X00       Model Number L       model number low byte      R      0 0X00               1  0X01       Model Number H       model number high byte      R      115  0X73               2  0X02       Version of Firmware      firmware version      R                    3  0X03       ID      Dynamixel ID      RW      200  0XC8               4  0X04       Baud Rate      Dynamixel baud rate      RW      1  0X01               5  0X05       Return Delay Time      Return Delay Time      RW      0  0X0               16  0X10       Status Return Level      Status Return Level      RW      2  0X02       RAM Area            Address      Name      Description      Access      Init Value                  24  0X18       Dynamixel Power      Dynamixel On Off      RW      0  0X00               25  0X19       LED Pannel      LED Pannel On Off      RW      0  0X00               26  0X1A       LED 5  L       LED 5 low byte      RW      0  0X00               27  0X1B       LED 5  H       LED 5 high byte      RW      0  0X01               28  0X1C       LED 6  L       LED 6 low byte      RW      0  0X00               29  0X1D       LED 6  H       LED 6 high byte      RW      0  0X01               30  0X1E       Button      Button status      R                    38  0X26       Gyro_Z L       Gyroscope Zaxis low byte      R                    39  0X27       Gyro_Z H       Gyroscope Zaxis high byte      R                    40  0X28       Gyro_Y L       Gyroscope Yaxis low byte      R                    41  0X29       Gyro_Y H       Gyroscope Yaxis high byte      R                    42  0X2A       Gyro_X L       Gyroscope Xaxis low byte      R                    43  0X2B       Gyro_X H       Gyroscope Xaxis high byte      R                    44  0X2C       ACC_X L       Accelerometer Xaxis low byte      R                    45  0X2D       ACC_X H       Accelerometer Xaxis high byte      R                    46  0X2E       ACC_Y L       Accelerometer Yaxis low byte      R                    47  0X2F       ACC_Y H       Accelerometer Yaxis high byte      R                    48  0X30       ACC_Z L       Accelerometer Zaxis low byte      R                    49  0x31       ACC_Z H       Accelerometer Zaxis high byte      R                    50  0X32       Present Voltage      Current Voltage      R                    51  0X33       MIC 1  L       Mic 1 low byte      R                    52 0x34       MIC 1  H       Mic 1 high byte      R                    53 0x35       ADC 2 L       ADC channel 2 low byte      R                    54 0x36       ADC 2 H       ADC channel 2 high byte      R                    55 0x37       ADC 3 L       ADC channel 3 low byte      R                    56 0x38       ADC 3 H       ADC channel 3 high vyte      R                    57 0x39       ADC 4 L       ADC channel 4 low byte      R                    58 0x3A       ADC 4 H       ADC channel 4 high byte      R                    59 0x3B       ADC 5 L       ADC channel 5 low byte      R                    60 0x3C       ADC 5 H       ADC channel 5 high byte      R                    61 0x3D       ADC 6 L       ADC channel 6 low byte      R                    62 0x3E       ADC 6 H       ADC channel 6 high byte      R                    63 0x3F       ADC 7 L       ADC channel 7 low byte      R                    64 0x40       ADC 7 H       ADC channel 7 high byte      R                    65 0x41       ADC 8 L       ADC channel 8 low byte      R                    66 0x42       ADC 8 H       ADC channel 8 high byte      R                    67 0x43       MIC 2  L       Mic 2 low byte      R                    68 0x44       MIC 2  H       Mic 2 high byte      R                    69 0x45       ADC 10 L       ADC channel 10 low byte      R                    70 0x46       ADC 10 H       ADC channel 10 high byte      R                    71 0x47       ADC 11 L       ADC channel 11 low byte      R                    72 0x48       ADC 11 H       ADC channel 11 high byte      R                    73 0x49       ADC 12 L       ADC channel 12 low byte      R                    74 0x4A       ADC 12 H       ADC channel 12 high byte      R                    75 0x4B       ADC 13 L       ADC channel 13 low byte      R                    76 0x4C       ADC 13 H       ADC channel 13 high byte      R                    77 0x4D       ADC 14 L       ADC channel 14 low byte      R                    78 0x4E       ADC 14 H       ADC channel 14 high byte      R                    79 0x4F       ADC 15 L       ADC channel 15 low byte      R                    80 0x50       ADC 15 H       ADC channel 15 high byte      R            Address Function HelpModel NumberRepresents the Model Number Firmware VersionRepresents the firmware version IDIs a unique number to identify Dynamixel Values range from 0  0x00  to 253  0xFD   Value 254  0xFE  is used as the Broadcast ID If the Broadcast ID is used to transmit Instruction Packet  then it can command to all Dynamixels Note Please be careful not to duplicate the ID of connected Dynamixels Baud RateRepresents the communication speed  0  0x00  to 254  0xFE  can be used for it  This speed is calculated by using the below formula Speed BPS    2000000  Data 1             Data      Set BPS      Target BPS      Tolerance                  1      1000000 0      1000000 0      0 000 %              3      500000 0      500000 0      0 000 %              4      400000 0      400000 0      0 000 %              7      250000 0      250000 0      0 000 %              9      200000 0      200000 0      0 000 %              16      117647 1      115200 0      2 124 %              34      57142 9      57600 0      0 794 %              103      19230 8      19200 0      0 160 %              207      9615 4      9600 0      0 160 %      Note Maximum Baud Rate error of 3% is within the tolerance of UART communication Return Delay TimeIs the delay time per data value that takes from the transmission of Instruction packet until the return of Status packet 0  0x00  to 254  0xFE  can be used  The delay time per data value is 2 microseconds  usec  If the data value is delayed by 10  20 usec the initial value is 250  0xFA   i e   0 5 msec  Status Return LevelDecides how to return Status packet  There are three possibilities            Value      Return of Status Packet                  0      No return against all commands  Except PING Command               1      Return only for the READ command              2      Return for all commands      Note When Instruction packet is Broadcast ID  Status packet is not returned regardless of Status return level Dynamixel Power            Value      Meaning                  0      Turn off the power of all Dynamixels connected to CM730               1      Turn on the power of all Dynamixels connected to CM730       LED Pannel            BIT      7   3      2      1      0                  Value      X      LED4      LED3      LED2      If each bit is SET  applicable LED lights up If each bit is RESET  applicable LED goes off EX  When the LED Panel   3  00000101   the LED4 and LED2 light up LED5   LED6            BIT      15      14   10      9   5      4   0                  Value      X      the value of blue light      the value of green light      the value of red light      LED HEAD  LED EYE is 3 color LED  It can represent the value of 32 steps by colors It can be represent by controling the value of light by colors BUTTON STATUS            BIT      7   2      1      0                  Value      X      the state value of START button      the state value of MODE button      It is the value which represents the state of buttons If the bit is SET  it represents that the button is pressed If the bit is RESET  it represents that the button isn’t pressed GYRO   ACCThe following picture is the direction of axis at CM730 The Gyroscope and Accelerometer is 10mm distant respectively from the central axis of Dawin   The positions of central axis and sensor at Dawin  Gyroscope  Accelerometer                                    The Gyroscope axis in the DARWINOP      The Accelerometer axis in DARWINOP      GYRO_X  GYRO_Y  GYRO_ZThey represent the angular velocity values of Xaxis  Yaxis  Zaxis respectively The observable maximum velocity is 500DPS   500DPS The following graph shows the process that angular velocity represents to value in reality ACC_X  ACC_Y  ACC_ZThey represent the acceleration values of Xaxis  Yaxis  Zaxis respectively The observable maximum velocity is 4g    4g The following graph shows the process that acceleration represents to value in reality PRESENT VOLTAGEPresent  input  voltage This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 MIC 1   MIC 2They are the wave values of MIC on the ears at HEAD PCB It is the value of ADC  and its range is 0 1023 ADC 2   ADC15They are ADC values of ADC channel connected external port J8  CM730 has ADC of 10BIT RESOLUTION Its range is 0 1023FSR Force Sensing Resister             Feature      Specifications                  Voltage      9V 12V              Running Temperature      5°C    80°C              Command Signal      Digital Packet              Protocol Type      Half duplex Asynchronous Serial Communication  8bit 1stop No Parity               Link  Physical       TTL Level Multi Drop  daisy chain type Connector               ID      254 ID  0 253               Communication Speed      7 843bps   3 Mbps              Feedback      Position  Temperature  Load  Input Voltage  etc               Standby current      50 mA      Control TableControl Table consists of data regarding the current status and operation of Dynamixel  The user can control Dynamixel by changing data of Control Table via Instruction packet EEPROM and RAMData in RAM area is reset to initial values whenever the power is turned on while data in EEPROM area is kept once values are set even if the power is turned off AddressRepresents the location of data  To read from or write data to the control table the user should assign the correct address in the Instruction packet AccessDynamixel has two kinds of data Readonly data  used mainly for sensing  and readandwrite data used for driving Initial ValueIn case of data in the EEPROM Area  the initial values on the right side of the below Control Table are the factory default settings In case of data in the RAM Area  the initial values on the right side of the following control table are the ones when the power is turned on Highest Lowest ByteIn the Control table  some data share the same name  but they are attached with  L  or  H  at the end of each name to distinguish the address  This data requires 16bit  but it is divided into 8bit each for the addresses  low  and  high   These two addresses should be written with one Instruction Packet simutaneously EEPROM Area            Address      Name      Description      Access      Init Value                  0  0X00       Model Number L       Lowest byte of model number      R      84  0X54               1  0X01       Model Number H       Highest byte of model number      R      1  0X01               2  0X02       Version of Firmware      Information on the version of firmware      R                    3  0X03       ID      ID of Dynamixel      RW      100  0X64               4  0X04       Baud Rate      Baud Rate of Dynamixel      RW      34  0X22               5  0X05       Return Delay Time      Return Delay Time      RW      250  0XFA               16  0X10       Status Return Level      Status Return Level      RW      2  0X02       RAM Area            Address      Name      Description      Access      Init Value                  25  0X19       LED      LED On Off      RW      0  0X00               26  0X1A       FSR1_L      Lowest byte of FSR 1 sensor data      R                    27  0X1B       FSR1_H      Highest byte of FSR 1 sensor data      R                    28  0X1C       FSR2_L      Lowest byte of FSR 2 sensor data      R                    29  0X1D       FSR2_H      Highest byte of FSR 2 sensor data      R                    30  0X1E       FSR3_L      Lowest byte of FSR 3 sensor data      R                    31  0X1F       FSR3_H      Highest byte of FSR 3 sensor data      R                    32  0X20       FSR4_L      Lowest byte of FSR 4 sensor data      R                    33  0X21       FSR4_H      Highest byte of FSR 4 sensor data      R                    34  0X22       FSR_Central_X      Center point of the Xaxis force      R                    35  0X23       FSR_Central_Y      Center point of the Yaxis force      R                    42  0X2A       Present Voltage      Current Voltage      R                    44  0X2C       Registered      Means if Instruction is registered      R      0  0X00               47  0X2F       Lock      Locking EEPROM      RW      0  0X00       Address Function HelpModel NumberRepresents the Model Number Firmware VersionRepresents the firmware version IDIs a unique number to identify Dynamixel Values range from 0  0x00  to 253  0xFD   Value 254  0xFE  is used as the Broadcast ID If the Broadcast ID is used to transmit Instruction Packet  then it can command to all Dynamixels when it’s searched as Unknown Device  change the baudrate to 1 1000000  Connect with DARWINOP after setting the ID as 111 for the right foot and 112 for the left Note Please be careful not to duplicate the ID of connected Dynamixels Baud RateRepresents the communication speed  0  0x00  to 254  0xFE  can be used for it  This speed is calculated by using the below formula Speed BPS    2000000  Data 1             Data      Set BPS      Target BPS      Tolerance                  1      1000000 0      1000000 0      0 000 %              3      500000 0      500000 0      0 000 %              4      400000 0      400000 0      0 000 %              7      250000 0      250000 0      0 000 %              9      200000 0      200000 0      0 000 %              16      117647 1      115200 0      2 124 %              34      57142 9      57600 0      0 794 %              103      19230 8      19200 0      0 160 %              207      9615 4      9600 0      0 160 %      Note Maximum Baud Rate error of 3% is within the tolerance of UART communication Return Delay TimeIs the delay time per data value that takes from the transmission of Instruction packet until the return of Status packet 0  0x00  to 254  0xFE  can be used  The delay time per data value is 2 microseconds  usec  If the data value is delayed by 10  20 usec the initial value is 250  0xFA   i e   0 5 msec  Status Return LevelDecides how to return Status packet  There are three possibilities            Value      Return of Status Packet                  0      No return against all commands  Except PING Command               1      Return only for the READ command              2      Return for all commands      Note When Instruction packet is Broadcast ID  Status packet is not returned regardless of Status return level LED            Value      Meaning                  0      Turns LED off              1      Turns LED on                                    Diagram 1      FSR1 FSR2 FSR3 FSR4FSR sensor data  Diagram 1 shows the location of each sensor Value range is 0   65535  Each value has 1 1000 N units For example  FSR1 has a load of 9 8N 1kgf  the value of FSR1 is 9800 The smallest measurement load is 0 493N The measurement range is 0 493 N   65 535N FSR_Central_X  FSR_Central_YDARWINOP’s load is at the center of the foot Value range is 0   254 When no load is present values will read 255 Diagram 1 shows of the center point of each foot Present VoltageCurrent input voltage  This value is 10 times larger than the actual voltage  For example  when 10V is supplied the data value is 100  0x64  Registered Instruction            Value      Meaning                  0      There are no commands transmitted by REG_WRITE              1      There are commands transmitted by REG_WRITE      Note If ACTION command is executed  the value is changed into 0 Lock            Value      Meaning                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 Mechanical SpecificationsActuator ID MapDownload PDF ID MapCamera  Logitech C905   Carl Zeiss® optics with autofocus  Native 2MP HD sensor  HD video capture  up to 1600x1200@10fps  1280x720@30fps   720p widescreen mode with recommended system  Up to 8megapixel photos  enhanced from native 2MP sensor   Microphone with Logitech® RightSound™ technology  HiSpeed USB 2 0 certified  Output  MJPG  YUYVDimensionsDARWINOP dimensions illustrated in both SI and Imperial units Weight 2 9kg  6 39lb Total height 454 5mm  17 90in   Download PDF Dimensions  Download ZIP 3D CAD Files  Download PDF Assembly Manual  Download PDF Wiring Manual  Download PDF Fabrication ManualDynamicsInformation regarding DARWINOP’s dynamics can be found here  DARWINOP_Dynamics zip  Download ZIP 3D CAD FilesKinematicsDownload ZIP DARWINOP KinematicsSoftware SpecificationsMain ControllerRecovery SoftwareEvery DARWINOP robot comes equipped with a USB thumb drive loaded with factorydefault setting recovery software Please visit the link periodically for updatesDownload Recovery SoftwareSource CodeYou can update the source code for DARWINOP via Subversion The source code also contains the color cards Download Source CodeSub Controller CM730 Download CM730 InformationSoftware Update InfoFramework Release NoteFramework source code download  SourceForge DARWINOP frameworkVer 1 6 0  2013 04 11  New Additions          Webots controller can be compiled into DARwinOP       DARWINOP can be controller from Webots GUI       MX28 cpp  Camera cpp added to ensure compatibility with Webots         Modifications          CM730  Image  Imgprocess  LinuxCamera  JointData  Action  Kinematics added Webots functionality      MX28 h values now reside in MX28 cpp      Camera h values now reside in Camera cpp      Ver 1 5 0  2012 03 19  New Additions          FSR firmware has been added       FSR tutorial has been adde        Modifications          LinuxMotionTimer has been changed to use clock_nanosleep function       Ver 1 4 0  2012 01 16  Modifications          MX28 firmware updated       Standup motion changed       Cannot change the camera gain exposure value from a web page bug fixed       offset tuner ‘set’ command bug fixed       Ver 1 3 0  2011 09 20  New Additions          offset_tuner added       webbased walk_tuner added         Modifications          CM730 firmware updated       roboplus support 4096 resolution MX28 firmware ver 27 or higher        dxl_monitor  can change baudrate  control table addr 4       Getup motion changed       read_write tutorial  left arm P gain value changed   1  gt 8       Ver 1 2 0  2011 06 01  New Additions          BulkRead instruction added       Support for FSR sensor         Modifications          Actuator Model name changed  RX28M  gt MX28       MX28 firmware updated       dxl_monitor  can change ID  control table addr 3       Getup motion changed       Sensor calibration routine changed   use standard deviation       demo  amp walk_tuner share the config ini file    darwin Data config ini       action_editor  command line bug fixed   can’t input space or number linux terminal backspace bug fixed       walk_tuner  linux terminal backspace bug fixed       read_write  at the start  torque off the right arm       firmware installer  seperate firmware of the controller and actuator      Ver 1 1 0  2011 04 08  New Additions          firmware_installer  CM730  amp RX28M firmware installer        Modifications          CM730 firmware updated   ver 0x11       RX28M firmware updated  ver 0x1B       Action class  type casting bug fixed       dxl_monitor  CM730 control table dump bug fixed       action_editor  command line first char backspace bug fixed    save command bug fixed       walk_tuner  command line first char backspace bug fixed       some minor bug fixed       Ver 1 0 1  2011 03 28  Modifications          LinuxCM730 class  move semaphore initial code to constructor      action_script  standup motion page number changed from 16 to 1      demo  at the start of soccer mode  reset the gyro sensor calibration      Some walking parameters changed       action_editor  page 255 access problem fixed       Walking class  Y move amplitude bug fixed       Ver 1 0 0  2011 02 01  First ReleaseCM730 Firmware Release NoteCM730 Firmware source code download  SourceForge CM730 FirmwareVer 19  0x13   2011 08 26  New Additions          Reset Instruction added         Modifications          Baudrate bug fixed       Increase TX RX LED turn on time       Mic  Control table address changed   67  gt 53       Battery alarm bug fixed       Read   Bulk Read Instruction process routine optimized       Ver 18  0x12   2011 04 26  New Additions          BulkRead instruction added         Modifications          LED bug fixed       Ver 17  0x11   2011 04 08  New Additions          Low battery alarm added         Modifications          USB recognition method changed  interrupt  gt polling       Ver 16  0x10   2011 02 28  First ReleaseMX28 Firmware Release NoteDynamixel firmware is NOT an open source software Ver 30  0x1E   2012 01 05  New Additions          The new hardware was applied       added selfcalibration algorithms       added calibration data protection algorithms         Modifications          CPU main clock was updated to 72MHz       fixed EEPROM bug       Ver 29  0x1D   2011 05 18  Modifications          Wheel mode bug fixed       Ver 28  0x1C   2011 05 02  Modifications          PID Resolution 4 times increase       P gain default value changed   8  gt 32       Ver 27  0x1B   2011 04 11  New Additions          PID Control        Modifications          Resolution changed from 1024 to 4096       Ver 26  0x1A   2011 02 28  First ReleaseFSR Firmware Release NoteFSR firmware is NOT an open source software Ver 17  0x11   2012 03 08  First ReleaseLinksDownload DARWINOP Logo ImagesSites  ROBOTIS http  www robotis com   SourceForge http  www sourceforge net projects darwinop   Collaborating Partners          Robotics and Mechanics Laboratory  RoMeLa http  www romela org        University of Pennsylvania GRASP Laboratories http  www grasp upenn edu        Webots simulator for DARWINOP by Cyberbotics http  www cyberbotics com overview       Recommended Tools  PC          Remote Desktop Real VNC http  www realvnc com        SSH Slient PuTTY http  www putty org    ZOC http  www emtec com zoc         MAC          Remote Desktop Chicken of the VNC http  www macupdate com app mac 9517 chickenofthevnc       SSH client RBrowser http  www rbrowser com          iOS          There are many remote desktop and SSh client apps for iOS devices  The listed ones below are free of charge       Remote Desktop Mocha VNC Lite http  itunes apple com us app mochavnclite id284984448 mt 8       SSH client SSH Mobile Free http  itunes apple com us app sshmobilefree id481718124 mt 8         Android          There are several free of charge apps for the Android platform      Remote Desktop http  slodive com freebies androidremotedesktopapps       SSH client http  www androidzoom com android_applications ssh client free        Blackberry          SSH client BBSSH http  www bbssh org        Text Editor Tutorials  VI          A convenient tool for screenbased editing  Extremely useful to write code  VI comes installed with DARWINOP  as well as  incorporated onto the restore USB thumbdrive       Tutorials http  www gentoo org doc en viguide xml        Emacs          VI may seem very complicated to a lot of users  Emacs is an alternative to VI while being extremely useful as well for writing code  Emacs does not come preinstalled with DARWINOP but it can easily be installed and its memory footprint is negligible       Installation      Ensure DARWINOP’c PC has internet access  On a command line type      sudo aptget install emacs      Tutorials  http  www gnu org s emacs tour         gedit          GUIbased  either connected via remote desktop or directly via HDMI DVI display        Just like VI gedit is incorporated with DARWINOP  gedit is useful for users that want a GUIbased text editor and is just as useful for writing code       Tutorials http  live gnome org Gedit      VideosDARWINOP Webots simulatorCyberbotics WebotsIEEERAS Humanoids Conference 2010  Individual Presentations and Workshop   Presentation by Dr  Dennis Hong   Presentation by ROBOTIS’ CEO   Presentation by JK Han   Presentation by ROBOTIS’ VP   Presentation by Dr  Daniel Lee   UPenn workshop IEEERAS Humanoids Conference 2010  Third Party clips   Dr  Dennis Hong Interview while DARWINOP performs Interactive Mode at the conference   At IEEE RAS Humanoids DARWINOPInnoRobo 2011 Lyon  France  Recorded by a visitorRoboCup 2011  Istanbul  Turkey   Team DARwin defeats the defending world champion  semifinal    Team DARwin becomes world champion  final  Popular Sciencehttp  www popsci com technology article 201107 videodarwinopwantstecatenotbudlightOther Third Party Clips  From Virginia Tech’s RoMeLa  Chasing and Kicking the ball  From a fan  DARWINOP in Japan  An independent opinion  Back on it feet  DAREINOP’s software  DARWINOP with gripper demo",
      "url": "http://0.0.0.0:4000/docs/en/platform/op/references/"
      } ,
  
  
      "docs-en-platform-op-simulation":  {
      "title": "DARwIn-OP",
      "content"	 : "   Simulation   simulation DARWINOP 3D Simulator     assets images platform op op_165 jpg     Webots Installation   webotsinstallation Determine whether you have 32bit or 64bit OS     Windows Version Check   windowsversioncheck      Windows 32bit1  Click on the  Start  button2  Point to  Computer  and  right click  on it3  Click on  Properties        assets images platform op op_166 gif  4  Look for  System type 5  It displays  32bit Operation System This means you have 32bit Windows     assets images platform op op_167 gif       Windows 64bit1  Click on the  Start  button2  Point to  Computer  and  right click  on it3  Click on  Properties        assets images platform op op_168 gif  4  Look for  System type 5  it displays 64bit Operating SystemThis means you have 64bit Windows     assets images platform op op_169 gif       Windows 32bit vs 64bitLet’s find out another another way to indicate whether you have Windows 32bit or Windows 64bit1  Click on the  Start  button2  And click on  Computer   left click this time        assets images platform op op_170 gif 3  Click on  C    A  64bit Windows has 2 folders named Program Files  x86  and Program Files    On 64bit Windows Webots is stored in Program Files  x86        assets images platform op op_171 gif    B  32bit Windows only has Program Files    On 32bit Windows Webots is stored in Program Files       assets images platform op op_172 gif      Install Webots   installwebots      Download Webots1  Visit www cyberbotics com2  Click on Download       assets images platform op op_173 gif     Option A  Click on the Windows logo   Option B  Click on Windows       assets images platform op op_174 gif  3  Click on the link for file       assets images platform op op_175 gif This message will appear at the bottom of your web browser Click on Save to download file     assets images platform op op_176 gif       Install Webots  For 32bit Windows For 64bit Windows  use  CProgram Files  x86 Webots For 32bit Windows  use  CProgram FilesWebots  Once downloading is complete its time to install Webots  Let’s find the installation file located in the downloads destination  normally the Downloads directory  1  Click on the  Start  button2  And click on  Computer   left click this time        assets images platform op op_177 gif  3  Under the Favorites option  upper left part of window 4  Click on ‘Downloads’ and you will be moved to the Downloads directory       assets images platform op op_178 gif    Move to the  Downloads  directory 5  find file6  Doubleclick on file to begin installation       assets images platform op op_179 gif    A security warning will appear  7  Simply click on  Run  to begin installation       assets images platform op op_180 gif  8  Click on  Next        assets images platform op op_181 gif    From the Select Destination Location window     Make sure the installation path reads  CProgram FilesWebots      If not  then manually specify it to  CProgram FilesWebots   9  Then click on Next       assets images platform op op_182 gif    From Select Start Menu Folder window     Make sure the destination folder reads  Cyberbotics      If not  then manually specify it to  Cyberbotics   10  Then click on Next       assets images platform op op_183 gif    From the Ready to Install window     The Destination location and Start Menu Folder are set  11  click on Install       assets images platform op op_184 gif          assets images platform op op_185 gif    Once the green bar is full  Completing the Webots Setup Wizard will appear 12  Click on Finish to finish installing Webots  You have now finished installing Webots       assets images platform op op_186 gif      Run Webots   runwebots      Running WebotsOnce installation is complete the newly extracted folder will automatically pop up Once installation is complete go to1  Click on the Start button2  Go to My Computer       assets images platform op op_187 gif     WEBOTS_HOME is     64bit Windows  CProgram Files  x86 Webots     32bit Windows  CProgram FilesWebots 3  Go to  WEBOTS_HOME projects robots darwinop worlds4  Pick any of the 4 ‘walk’ ‘symetry’ ‘visual_tracking’ or ‘soccer’ by doubleclicking       assets images platform op op_188 gif  5  After doubleclicking on the world file Webots will automatically start       assets images platform op op_189 gif       Webots GUI     assets images platform op op_190 gif  Scene tree  Contains the elements of the simulation world 3D window  Contains the visual rendering of the scene tree Console  Command line window displaying output values Text editor  Displays text files such as robot programs      Creating a new projectNow that Webots is running you can create your own DARWINOP based simulation project   You may have noticed that the simulation automatically begins when Webots starts  the timer runs    The simulation must be stopped before creating a new project  1  Click on the Stop button2  Click on the Revert Simulation button3  The simulation resets and you will see the model in an inactive state4  Click on an empty line from the automatically opened controller file from the Text editor 5  Make a small change  i e  press the space bar on an empty line 6  Click on the Save or Save As icon  A small window will pop up asking you save changes elwhere  Click on OK7  Pick a place other than  WEBOTS_HOME  i e  My Documents mywebotsproject 8  Click on Copy and the set of files will copy to the assigned directory 9  Finally click on Close      assets images platform op op_191 gif      assets images platform op op_192 gif      assets images platform op op_193 gif      assets images platform op op_194 gif      Working with your projectNotice that the working directory contains a few separate subdirectories   controllers contains subdirectories  where each subdirectory contains the robot model’s program  There is no limit on the number of program subdirectories   worlds contains world file s   There is no limit on the number of world files allowed inside this subdirectory   doc  new in Webots v7 1 x  contains documentation on crosscompilation feature that allows user to run Webots code on a real DARWINOP  please go to the crosscompilation for more details         assets images platform op op_195 gif Go into the controllers subdirectory and there are a few that were automatically created when you created your working project   Each program subdirectory contains at least one cpp  C    file that contains the main loop of the controller   You create separate subdirectories and write programs in languages other languages      assets images platform op op_196 gif You may write programs with any text editor or any IDE asides from the integrated text editor from Webots GUI if you wish   However  compiling and building the code will only work with the Webots GUI     Cross Compile   crosscompile      Getting the Sources   gettingthesources      Using this guideThis guide assumes you are familiar with Webots and requires some knowledge of Webots’ software APIs This guide assumes user familiarity with the terms controller and worldPlease use this guide in conjunction with Webots user guide and reference guide You can download both guides from www cyberbotics com     assets images platform op op_197 gif       Getting the sources1  Visit www github com2  Click on Search tab3  Input crosscompilation on the search bar4  Click on the search button       assets images platform op op_198 gif 5  scroll and look for  darwinop webotscrosscompilation         assets images platform op op_199 gif Once in the source page you may download the source directly as a  zip file 6  Click on the zip button to download the source to your PC  Once downloaded decompress the file        assets images platform op op_200 gif  The unzipped file will look something like this  Its now time to transfer these files to the real robot      assets images platform op op_201 gif      Transferring the Sources   transferringthesources Connect to DARWINOP via wired or wireless LAN 1  Click on the Start button2  Go to My Computer       assets images platform op op_202 gif The PC from DARWINOP can act as a Samba drive  3  If connected via wired LAN access the PC by inputting  192 168 123 1      If connected via wifi then use the IP address assigned to DARWINOP from your router     For more information on connecting to DARWINOP click  here   en platform op getting_started  connecttoop        assets images platform op op_203 gif  4  Double click on root directory5  You will be prompted to enter the username and password    User name   darwin      Password   111111         assets images platform op op_204 gif    Once inside DARwinOP’s SSD drive look for a directory named   darwin       This is the location of DARWINOP’s software  Framework library and C   sources  6  Double click on   darwin   directory       assets images platform op op_205 gif    Once inside darwin directory you will see the usual subdirectories  7  Create a subdirectory to transfer the crosscompilation sources  Let’s say   webotssources   8  Transfer the unzipped contents crosscompilation sources to   webotssources          assets images platform op op_206 gif  9  Transfer  copy  the unzipped contents crosscompilation sources to   webotssources          assets images platform op op_207 gif      Setting Up the Sources   settingupthesources Open up a terminal window  either via remote desktop or SSH   For more information click  here   en platform op getting_started  connecttoop   Make sure you have root user privileges   Make sure to update DARWINOP’s Framework library to the latest version  1  From the terminal window go to   webotssources  2  Merge the Modified DARWINOP Framework library with the default Framework by inputting     cp –R   resources projects robots darwinop libraries darwin darwin    darwin        assets images platform op op_208 gif   After merging its time to recompile the Framework and default sources 3  Go to   darwin Linux build  directory4  Type   make cleanmake         assets images platform op op_209 gif  5  Go to   darwin Linux project demo  directory6  Type   make distcleanmake         assets images platform op op_210 gif  7  Allow users without root user privileges to manipulate the contents of  darwin directory by entering     chown darwin darwin  darwin        assets images platform op op_211 gif  8  Create a new directory in   darwin Linux project      Lets say webots  mkdir webots 9  go into the webots subdirectory   cd webots         assets images platform op op_212 gif  10  In the newlycreated webots subdirectory its time to copy   include      src      lib      transfer    and   controllers   from webotssources   For src  cp –r  darwin webotssources resources projects robots darwinop libraries manegers src        For include  cp –r  darwin webotssources resources projects robots darwinop libraries manegers include        For lib  cp –r  darwin webotssources resources projects robots darwinop libraries manegers lib        For transfer  cp –r  darwin webotssources resources projects robots darwinop transfer        For controllers  cp –r  darwin webotssources projects robots darwinop controllers            assets images platform op op_213 gif  11  Type   ls   and there should be 5 directories       assets images platform op op_214 gif  12  Its time to compile the wrapper library  Go to transfer lib subdirectory   cd transfer lib  13  Type   make   to compile and build the wrapper library       assets images platform op op_215 gif 14  Its time to compile the managers library  From the transfer lib subdirectory go to webots lib subdirectory   cd       lib  15  Type   make –f Makefile darwinop   to compile and build the managers library 16  Type   ls   and look for a file named managers a       assets images platform op op_216 gif  Crosscompilation sources are now set  Its time to compile Webots controller files for the virtual model and run them in the real robot      Compiling Webot Controller   compilingwebotcontroller You can run the very same controller file used on the virtual model in the real robot 1  From the webots lib subdirectory go to webots controllers   cd    controllers  2  Type ls and there will be a list of subdirectories  Each directory contains the exact same controller   cpp  file from the Webots simulator  Let’s have a look at Soccer       assets images platform op op_217 gif    From the Soccer controller directory you may notice the precompiled contents are the same     There is a Soccer cpp  Soccer hpp  main cpp  config ini  Makefile  Makefile darwinop    Take a look at the controller subdirector from your DARWINOP Webots project for the simulator  Both contain exactly the same files        assets images platform op op_218 gif          assets images platform op op_219 gif       Soccer cpp in the real robot         assets images platform op op_220 gif     Soccer cpp in Webots GUI    The exact same code will run in both virtual model and real robot with as little differences as possible    You may have noticed there are 2 Makefiles  You can safely assume Makefile darwinop is the Makefile to compile Webots controller in the real robot  3  To compile the controller in the real robot input the following command       make –f Makefile darwinop       4  You should see an executable after completion     chmod 755 soccer that is the executable file being soccer       assets images platform op op_221 gif     Run the controller in Webots simulator first  Then do the same in the real robot   To run the Webots controller simply enter    soccer    To end the program Hold the  Control  key then press the  C  key   To run the Webots controller as a background process enter    soccer     To kill the soccer program running as a background process enter  killall soccer    To decompile the build then you would need to clean it by  make clean –f Makefile darwinop      Create   Run Custom Controller   createruncustomcontroller Let’s say you want to modify the ‘walk’ controller  but you want to do so as a different controller from walk  You also want to expand robot control by adding side step functionality You want to do all the testing in Webots GUI  none in the real robot  before porting your code to the real robot  1  Go to your DARWINOP Webots project directory2  From the controllers subdirectory make a duplicate of the walk directory  and its contents  and let’s say mywalk        assets images platform op op_222 gif  3  Go into your newlycreated mywalk directory and do the following   on every file change anything with  walk  to  my_walk    rename  walk cpp  and  walk hpp  to  my_walk cpp  and  my_walk hpp   There may be some postbuild files   c   d  exe  from the previous build of walk  Feel free to manually delete them4  From the  worlds  subdirectory create duplicate of  walk wbt  and rename it  my_walk wbt        assets images platform op op_223 gif    Once you made all the changes for all files     Start Webots by doubleclicking on my_walk wbt the simulation will begin with the previous walk controller loaded to the model  Stop the controller and revert the simulation 5  From the text editor open the controller file  mywalk cpp   and in the main loop  mywalkrun    add 2 more cases as you see in the image below     Pressing the  A  key the model will sidestep to the left   Pressing the  S  key the model will sidestep to the right    Hint  setYAmplitude double  deals with sidesteps       assets images platform op op_224 gif    Save your changes 6  From the scene tree expand the DARWINOP node  On controller change  walk  to  my walk      Save changes to the world       assets images platform op op_225 gif  After saving your world return to the text editor   Compile your new controller and run it in the simulator   You should be able to sidestep left and right in addition of being able to turn the model normally      assets images platform op op_226 gif  Now its time to transfer  my_walk  to the real robot   The easiest way to do so is by accessing DARWINOP via Samba drive as done previously   Once inside go to root directory  darwin  Linux  project  webots  controllers   Copy your  my_walk  directory from your Webots project to  controllers  directory in DARWINOP      assets images platform op op_227 gif There will be some postbuild files   o   d  exe  etc  created during the simulation  Feel free to delete these as they are irrelevant in the real robot   You may choose to delete the   Makefile   as well because its not necessary in the real robot but must keep  Makefile darwinop       assets images platform op op_228 gif Feel free to delete the highlighted files  They are not useful in the real robot You can verify that the transfer process was OK by Going to the  controllers  directory Type ls to see the contents Then go to  my_walk  directory compile the controller  make –f Makefile darwinop      assets images platform op op_229 gif When executing this  controller  in particular do not use SSH client  PuTTY  instead use remote desktop  VNC   Otherwise the program will halt with a segmentation fault error      assets images platform op op_230 gif ",
      "url": "http://0.0.0.0:4000/docs/en/platform/op/simulation/"
      } ,
  
  
      "docs-en-platform-op2-getting-started":  {
      "title": "ROBOTIS-OP2",
      "content"	 : "IntroductionWhat is OP2 Open Platform Humanoid ProjectROBOTIS OP2  as known as DARWIN 2 or DARWINOP2  has been upgraded with greater computational performance compare to ROBOTIS OP  as known as DARwInOP  Despite the change in name the robot may be colloquially still be called Darwin  The only major change comes from the upgrade in computational power When ROBOTIS OP was first released it was stated that it supported Windows OS This claim is  and remains  technically true  However  in practice installing Windows is impossible due to the 4GB cap of the embedded SSD from ROBOTIS OP’s PC The scant 4GB made difficult installing the later releases of Ubuntu and significant workaround was required to be able to install the later Linux releases ROBOTIS OP2 upgrade is aimed at eliminating the difficulties relating to computing from the previous generation You can now focus your efforts more into developing the robot and less on devoting resources for computing   Visual differences with ROBOTIS OP          Other than the color difference  the overall appearance remains unchanged             Here are some mechanical differences           New mini HDMI port connector on the ROBOTIS OP2      Location of the ports      ROBOTIS OP2 no longer has the 3 5mm microphone and audio jacks                  Here are some mechnamical differences        Advantages of ROBOTIS OP2 compared to ROBOTIS OP          Userreplaceable SSD      Userreplaceable RAM      Significantly increased computation power      Reduced size of the PC      Reduced size of the management controller  CM730 ⇨ CM740         Hardware Spec Comparison                   DARWIN OP      ROBOTIS OP2                  CPU      Intel Atom Z530@1 6GHz single core      Intel Atom N2600@1 6GHz dual core              RAM      1GB DDR2 fi xed capacity       up to 4GB DDR3204pin SODIMM module userreplaceable               Storage      4GB NAND flash IDE100 fixed capacity       halfsize mSATA module  32GB  userreplaceable               LAN speed      100 Mbps      1 Gbps              Installable OS      Linux only  32bit       any Linux release  32bit any Windows release  32bit               wifi      802 11g      802 11n  2 4GHzonly       ROBOTIS OP2 is an affordable  miniaturehumanoidrobot platform with advanced computational power  sophisticated sensors high payload capacity  and dynamic motion ability to enable many exciting research and education activities Safety InformationCaution ROBOTIS will not be responsible for any loss or damage whatsoever caused resulting fromuser’s negligence or misuse of the product   Read the instruction carefully before getting started   Not suitable for children under 15 years old   Do not use any other tools other than those provided in the kit   Keep the robot away from your face and body when the robot is operating   Prevent from getting your fingers stuck between frames   Do not place the robot near water  heat or fire   Only use the battery and charger included in the kit   Gears must be replaced after long excessive use Package ContentsCheck your ROBOTIS OP2 package for the following items Note Korean version offers a different type of charger LayoutCharging BatteryPlease charge the battery pack according to the following procedure Battery Hot SwapOne distinguishing feature of ROBOTIS OP2 is its ability to change the battery without the need of shutting down To replace the battery during operation  please follow the procedures below Quick StartPower OnExecute Demo ProgramRunning Demonstration ProgramsDemonstration Ready ModeAutonomous ModeInteractive Motion ModeVision Processing ModeCamera CalibrationPower OffProgramming GuideConnect to OP2Development EnvironmentSource CodeYou may find the source code directory at  robotis from ROBOTIS OP2’s PC The preinstalled source code may be updated without prior notice  Please check for updates periodically You may obtain updated source code at the following website https  sourceforge net projects darwinop files We strongly suggest you to practice the included tutorial programs installed at ‘ robotis Linux project tutorial’ in ROBOTIS OP2’s PC FrameworkSoftware UtilitiesRecovery SoftwareThe supplied USB thumb drive contains the same software that comes preinstalled with ROBOTISOP2 You may obtain updates softwares at the link below http  support robotis comSoftware updates may be performed without prior notice  Please check the site periodically forupdate information Useful InformationYou may download other ROBOTIS OP2related items athttps  sourceforge net projects darwinop files   For any other inquiries send us an email           International  contactus2@robotis com      Korea  korea@robotis com        Third party terminal client          PuTTY  http  www chiark greenend org uk  sgtatham putty       VNC  http  www realvnc com       ZOC  http  www emtec com zoc       RBrowser  for Mac users   http  www rbrowser com       Chicken of the VNC  for Mac users   http  sourceforge net projects cotvnc       MiscellaneousSystem Block DiagramID MapWarrantyROBOTIS OP2 includes the following warrantyA  90 days warranty against manufacture defects  RMA required   B  Local Maintenance Service  by local partner   1 years     Reinstallation of S W and fi rmware  Replacement for cable gear screw  RMA required – exempt from faulty return   Replacement for faulty frame cover actuator  RMA required C  Core System Maintenance Service  by ROBOTIS   1 years  Replacement for faulty PC subboards  RMA required   Maintenance for actuator subboards  RMA required   Maintenance for PC  RMA required  additional fee applies D  Parts replacement for malfunctions during normal operation for 1 years   Please download RMA  Return Material Authorization  http  en robotis com index service_04 php tab 4 No return shipping will be accepted without a RMA number issued by ROBOTIS    Customers who require extended warranty period may purchase another 1 year warrantyfrom ROBOTIS before their standard warranty period is over Important Notice      Product registration is required for all customers  http  support robotis com        Parts replacement can only be done through RMA Return Material Authorization  application         After the initial 90 days  shipping fee is not covered under warranty     Warranty does NOT cover ordinary wear tear  any accident or damage caused by followings           Physical damage equivalent to dropping the robot from 20cm or higher      Disabling system safety function  DYNAMIXEL Overload Shutdown       Dangerous movement  jump  roll  fi ght  or excessive operation without rest      Any liquid or unauthorized chemical material to the robot      Unauthorized power or electric shock applied to the robot      Improvising core system programming area         Direct checkup service  Evaluation  maintenance and quality assurance of assembled robot can be provided by ROBOTIS only   RMA is required and additional fee may apply  Service will not be rendered for seriously customized hardware Sub Controller CM740   Download ZIP Framework  Download PDF Schematics  Download ZIP Reference GuideYou can also get information about the  gyroscope and accelerometer             Feature      Specifications                  CPU      STMicroelectronics 32F103RE ARM Cortex 32bit CPU  clocked @ 72MHz  512KB Flash  64KB SRAM                Interface      1x LED   1 x Buzzer              External ports      3 x ADC  I O Ports              Sensor      3axis gyroscope   3axis accelerometer  supply voltage sensor              Communication      USB Port  Serial Port   5x TTL Ports  for Dynamixel               Audio  amp Mic Amp      Audio amp gain  20  mic amp gain  2027              ETC      Dynamixel Power Control Unit  Head board port  Interface board port               External supply voltage      8V   14 8v              Current consumption      Maximum 200mA   Standby 130mA              Dimensions      80 0mm x 43 0mm x 20 0mm              Operation temperature      65°C to  80°C              Weight      26g      Control TableControl Table consists of data regarding the current status and operation of CM740  The user can control CM740 by changing data of Control Table via Instruction packet EEPROM and RAMData in RAM area is reset to initial values whenever the power is turned on while data in EEPROM area is kept once values are set even if the power is turned off AddressRepresents the location of data  To read from or write data to the control table the user should assign the correct address in the Instruction packet AccessCM740 has two kinds of data Readonly data  used mainly for sensing  and readandwrite data used for driving Initial ValueIn case of data in the EEPROM Area  the initial values on the right side of the below Control Table are the factory default settings In case of data in the RAM Area  the initial values on the right side of the following control table are the ones when the power is turned on Highest Lowest ByteIn the Control table  some data share the same name  but they are attached with  L  or  H  at the end of each name to distinguish the address  This data requires 16bit  but it is divided into 8bit each for the addresses  low  and  high   These two addresses should be written with one Instruction Packet simutaneously EEPROM Area            Address      Name      Description      Access      Init Value                  0  0X00       Model Number L       model number low byte      R      0 0X00               1  0X01       Model Number H       model number high byte      R      116  0X74               2  0X02       Version of Firmware      firmware version      R                    3  0X03       ID      Dynamixel ID      RW      200  0XC8               4  0X04       Baud Rate      Dynamixel baud rate      RW      1  0X01               5  0X05       Return Delay Time      Return Delay Time      RW      0  0X0               16  0X10       Status Return Level      Status Return Level      RW      2  0X02       RAM Area            Address      Name      Description      Access      Init Value                  24  0X18       Dynamixel Power      Dynamixel On Off      RW      0  0X00               25  0X19       LED Pannel      LED Pannel On Off      RW      0  0X00               26  0X1A       LED 5  L       LED 5 low byte      RW      0  0X00               27  0X1B       LED 5  H       LED 5 high byte      RW      0  0X01               28  0X1C       LED 6  L       LED 6 low byte      RW      0  0X00               29  0X1D       LED 6  H       LED 6 high byte      RW      0  0X01               30  0X1E       Button      Button status      R                    38  0X26       Gyro_Z L       Gyroscope Zaxis low byte      R                    39  0X27       Gyro_Z H       Gyroscope Zaxis high byte      R                    40  0X28       Gyro_Y L       Gyroscope Yaxis low byte      R                    41  0X29       Gyro_Y H       Gyroscope Yaxis high byte      R                    42  0X2A       Gyro_X L       Gyroscope Xaxis low byte      R                    43  0X2B       Gyro_X H       Gyroscope Xaxis high byte      R                    44  0X2C       ACC_X L       Accelerometer Xaxis low byte      R                    45  0X2D       ACC_X H       Accelerometer Xaxis high byte      R                    46  0X2E       ACC_Y L       Accelerometer Yaxis low byte      R                    47  0X2F       ACC_Y H       Accelerometer Yaxis high byte      R                    48  0X30       ACC_Z L       Accelerometer Zaxis low byte      R                    49  0x31       ACC_Z H       Accelerometer Zaxis high byte      R                    50  0X32       Present Voltage      Current Voltage      R                    51  0X33       MIC 1  L       Mic 1 low byte      R                    52 0x34       MIC 1  H       Mic 1 high byte      R                    53 0x35       ADC 2 L       ADC channel 2 low byte      R                    54 0x36       ADC 2 H       ADC channel 2 high byte      R                    55 0x37       ADC 3 L       ADC channel 3 low byte      R                    56 0x38       ADC 3 H       ADC channel 3 high vyte      R                    57 0x39       ADC 4 L       ADC channel 4 low byte      R                    58 0x3A       ADC 4 H       ADC channel 4 high byte      R                    59 0x3B       ADC 5 L       ADC channel 5 low byte      R                    60 0x3C       ADC 5 H       ADC channel 5 high byte      R                    61 0x3D       ADC 6 L       ADC channel 6 low byte      R                    62 0x3E       ADC 6 H       ADC channel 6 high byte      R                    63 0x3F       ADC 7 L       ADC channel 7 low byte      R                    64 0x40       ADC 7 H       ADC channel 7 high byte      R                    65 0x41       ADC 8 L       ADC channel 8 low byte      R                    66 0x42       ADC 8 H       ADC channel 8 high byte      R                    67 0x43       MIC 2  L       Mic 2 low byte      R                    68 0x44       MIC 2  H       Mic 2 high byte      R                    69 0x45       ADC 10 L       ADC channel 10 low byte      R                    70 0x46       ADC 10 H       ADC channel 10 high byte      R                    71 0x47       ADC 11 L       ADC channel 11 low byte      R                    72 0x48       ADC 11 H       ADC channel 11 high byte      R                    73 0x49       ADC 12 L       ADC channel 12 low byte      R                    74 0x4A       ADC 12 H       ADC channel 12 high byte      R                    75 0x4B       ADC 13 L       ADC channel 13 low byte      R                    76 0x4C       ADC 13 H       ADC channel 13 high byte      R                    77 0x4D       ADC 14 L       ADC channel 14 low byte      R                    78 0x4E       ADC 14 H       ADC channel 14 high byte      R                    79 0x4F       ADC 15 L       ADC channel 15 low byte      R                    80 0x50       ADC 15 H       ADC channel 15 high byte      R            Address Function HelpModel NumberRepresents the Model Number Firmware VersionRepresents the firmware version IDIs a unique number to identify Dynamixel Values range from 0  0x00  to 253  0xFD   Value 254  0xFE  is used as the Broadcast ID If the Broadcast ID is used to transmit Instruction Packet  then it can command to all Dynamixels Note Please be careful not to duplicate the ID of connected Dynamixels Baud RateRepresents the communication speed  0  0x00  to 254  0xFE  can be used for it  This speed is calculated by using the below formula Speed BPS    2000000  Data 1             Data      Set BPS      Target BPS      Tolerance                  1      1000000 0      1000000 0      0 000 %              3      500000 0      500000 0      0 000 %              4      400000 0      400000 0      0 000 %              7      250000 0      250000 0      0 000 %              9      200000 0      200000 0      0 000 %              16      117647 1      115200 0      2 124 %              34      57142 9      57600 0      0 794 %              103      19230 8      19200 0      0 160 %              207      9615 4      9600 0      0 160 %      Note Maximum Baud Rate error of 3% is within the tolerance of UART communication Return Delay TimeIs the delay time per data value that takes from the transmission of Instruction packet until the return of Status packet 0  0x00  to 254  0xFE  can be used  The delay time per data value is 2 microseconds  usec  If the data value is delayed by 10  20 usec the initial value is 250  0xFA   i e   0 5 msec  Status Return LevelDecides how to return Status packet  There are three possibilities            Value      Return of Status Packet                  0      No return against all commands  Except PING Command               1      Return only for the READ command              2      Return for all commands      Note When Instruction packet is Broadcast ID  Status packet is not returned regardless of Status return level Dynamixel Power            Value      Meaning                  0      Turn off the power of all Dynamixels connected to CM740               1      Turn on the power of all Dynamixels connected to CM740       LED Pannel            BIT      7   3      2      1      0                  Value      X      LED4      LED3      LED2      If each bit is SET  applicable LED lights up If each bit is RESET  applicable LED goes off EX  When the LED Panel   3  00000101   the LED4 and LED2 light up LED5   LED6            BIT      15      14   10      9   5      4   0                  Value      X      the value of blue light      the value of green light      the value of red light      LED HEAD  LED EYE is 3 color LED  It can represent the value of 32 steps by colors It can be represent by controling the value of light by colors BUTTON STATUS            BIT      7   2      1      0                  Value      X      the state value of START button      the state value of MODE button      It is the value which represents the state of buttons If the bit is SET  it represents that the button is pressed If the bit is RESET  it represents that the button isn’t pressed GYRO   ACCThe following picture is the direction of axis at CM740 The Gyroscope and Accelerometer is 10mm distant respectively from the central axis of Dawin   The positions of central axis and sensor at Dawin  Gyroscope  Accelerometer                                    The Gyroscope axis in the ROBOTISOP2      The Accelerometer axis in ROBOTISOP2      GYRO_X  GYRO_Y  GYRO_ZThey represent the angular velocity values of Xaxis  Yaxis  Zaxis respectively The observable maximum velocity is 500DPS   500DPS The following graph shows the process that angular velocity represents to value in reality ACC_X  ACC_Y  ACC_ZThey represent the acceleration values of Xaxis  Yaxis  Zaxis respectively The observable maximum velocity is 4g    4g The following graph shows the process that acceleration represents to value in reality PRESENT VOLTAGEPresent  input  voltage This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 MIC 1   MIC 2They are the wave values of MIC on the ears at HEAD PCB It is the value of ADC  and its range is 0 1023 ADC 2   ADC15They are ADC values of ADC channel connected external port J8  CM740 has ADC of 10BIT RESOLUTION Its range is 0   1 023",
      "url": "http://0.0.0.0:4000/docs/en/platform/op2/getting_started/"
      } ,
  
  
      "docs-en-platform-op3-getting-started":  {
      "title": "ROBOTIS-OP3",
      "content"	 : "IntroductionWhat is OP3 Open Platform Humanoid ProjectROBOTIS OP3 is the latest miniature humanoid robot platform from ROBOTIS that succeeds ROBOTIS OP aka DARWIN OP  and ROBOTIS OP2 aka DARWIN 2 or DARWIN OP2   One of the noticeable changes of ROBOTIS OP3 is made in actuator by replacing MX28 actuators with XM430 actuators  Another significant change is also made in internal PC by replacing Atom based SBC Single Board Computer  with Intel i3 based NUC  With the XM430 which supports Dynamixel Protocol 2 0  OP3 has improved torque along with current based control and loaded with various functions  Intel NUC allows highly improved computing power that supports 64bit OS and Bluetooth 4 1  In addition  OP3 is developed under ROS Robot Operating System  to utilize various packages in ROS ecosystem  All these hardware improvements and ROS support allows developers to focus more on research and development compare to the preceding robots   Physical Differences from ROBOTIS OP2          ROBOTIS OP3 does not come with a design skin  however  3D modeling files are provided in order to support 3D print for the default design skin           OP3 looks quite different from OP2 as default skin is not provided  Users can download design skin files Downloaded skin files can be used for 3D printing ROBOTIS OP3 is loaded Intel NUC with i3 processor to achieve significant improvement in computing power OP3 supports HDMI and Display Port DP  while OP2 only supports mini HDMI There are 1 RGB LED and 3 LEDs  4 buttons on the back of OP3  From left to right  each button stands for Mode  Start  User  Reset   Here are some mechanical differences           New mini HDMI port connector on the ROBOTIS OP2      Location of the ports      ROBOTIS OP3 no longer has the 3 5mm microphone and audio jacks                  Moderate changes have been made in the back panel of OP3         Advantages of developing with ROBOTIS OP3 compared to ROBOTIS OP2As mentioned above  there are several changes in OP3 and advantages of the new OP3 are listed as follows          New Actuators higher torque       Increase of SSD capacity      Increase of RAM capacity      Dramatic improvement in computational power      Replacing Mini HDMI with HDMI      User friendly subcontroller CM730 → OpenCR       Improved camera        Hardware Spec Comparison                   ROBOTIS OP2      ROBOTIS OP3                  Actuator      MX28      XM430W350              CPU      Intel Atom N2600@1 6GHz dual core      Intel Core i3 processordual core              RAM      2GB DDR3 SODIMM 1066MHz userreplaceable       8GB DDR4 SODIMMs 2133MHz 32GB maximum  userreplaceable               Storage      halfsize mSATA module  32GB  userreplaceable       M 2 SSD module  128GB  userreplaceable               Compatible OS      any Linux release  32bit any Windows release  32bit       any Linux release  32bit 64bit any Windows release  32bit 64bit               Networking      Realtek 10 100 1000 Mbps Ethernet802 11n  2 4GHzonly       Intel 10 100 1000 Mbps Ethernet802 11ac  2 4GHz  5GHz Bluetooth 4 1              Camera      Logitech C905  1600x1200       Logitech C920  1920x1080       ROBOTIS OP3 is an affordable  miniature humanoid robot platform with advanced computational power  sophisticated sensors  high payload capacity  and dynamic motion ability to enable many exciting research and education activities   Actuator Spec Comparisons                   MX28      XM430W350                  Weight      77g      82g              Dimension      35 6mm x 50 6mm x 35 5mm      28 5mm x 46 5mm x 34 0mm              Gear Ratio      193  1      353 5  1              Stall Torque      2 5 N m      4 1 N m              Stall Current      1 4 A      2 3 A              No Load Speed      55 RPM      46 RPM              Protocol      1 0 Only      1 0  2 0        XM430 series actuator is easier to assemble and maintain as well as supporting various control algorithms           Reduced size and increased torque      Metal case with integrated assembly bolt taps      Hollow back case with cable cover      6 operating modes      Currentbased torque control      Profile control for smooth motion planning        ROBOTISOP3 Specifications                   ROBOTIS OP3                  Height      About 510mm              Weight      About 3 5kg  without skin cover               DOF      20              Actuator      XM430W350R              Main Controller      INTEL NUC i3Intel Core i3 processor dual core8GB RAM DDR4 SODIMMs 2133MHz128GB M 2 SSD              Sub Controller      OpenCR              Camera      Logitech C920 HD Pro Webcam              IMU Sensor      3Axis Gyroscope  3Axis Accelerometer  3Axis Magnetometer              Battery      Lipo 3cell 11 1v 1800mA              IO Device      RGB LED x 1  LED x 3  Red  Green  Blue   Button x 4  Speaker x 1              Installable OS      any Linux release  32bit 64bit any Windows release  32bit 64bit               DevelopmentEnvironment      OS  Linux  64bit C    ROS  Dynamixel SDK      Safety InformationCaution ROBOTIS will not be responsible for any loss or damage whatsoever caused resulting fromuser’s negligence or misuse of the product   Read the instruction carefully before getting started   Not suitable for children under 15 years old   Do not use any other tools other than those provided in the kit   Keep the robot away from your face and body when the robot is operating   Prevent from getting your fingers stuck between frames   Do not place the robot near water  heat or fire   Only use the battery and charger included in the kit   Gears must be replaced after long excessive use Package ContentsCheck your ROBOTIS OP3 package for the following items LayoutCaution Layout of the front and back panel is subject to change depends on the selected builtin PC Charging BatteryPlease charge the battery pack according to the following procedure Battery Hot SwapThe battery of ROBOTISOP3 can be replaced without shutting down the robot To replace battery during operation  please follow the below procedure Quick StartPower OnThe following procedure takes you through the set up process Warning Manually configuring ROBOTIS OP3’s ready pose other than the above pose may cause mechanical damages when posing for initial stance Connect the AC plug of the power adapter into a power outlet and plug the DC connector into ROBOTIS OP3’s DC jack The DC jack is located on the back panel of ROBOTIS OP3 You can select either the DC power supply or battery pack to power ROBOTIS OP3 If you want to use the battery pack  please follow the below procedure   Ensure the battery pack is fully charged   Open the battery compartment door  unscrew the thumbscrew  and insert the battery pack   Connect the battery cable to the battery power jack   Close and secure the compartment door  screw the thumbscrew  afterwards   Disconnect DC power supply Note To prevent unexpected shutdown  ensure that ROBOTIS OP3 is connected with at least one active power source Pushing the power switch to the right will power up the ROBOTIS OP3  to the right  power on  to the left  power off Once Power is on  the following procedure will be sequentially executed Execute Demo ProgramRunning Demonstration ProgramsROBOTIS OP3 is loaded with the following preconfigured operation modes   DemonstrationReady Mode  Autonomous Soccer Mode  Vision Processing Mode  Interactive Motion ModeDemonstrationReady mode is set as a default mode when ROBOTIS OP3 is turned on Press MODE button to navigate the mode ROBOTIS OP3 will verbally announce the selected mode when pressing the button The indicating LED will also change its color to the corresponding operation mode Press START button to run the selected mode After pressing START ROBOTIS OP3 will stand up and begin operations RESET ButtonThe RESET button only resets actuators and the OpenCR subcontroller  not the entire system  Please keep in mind that the demo program is still running in the main controller when RESET button is pressed Pressing RESET button will disable torque on all actuator  It is highly recommended to set ROBOTIS OP3 for kneeling pose before pressing RESET button or hold ROBOTIS OP3 using its carrying handle Demonstration Ready ModeThe DemonstrationReady mode is a default mode when ROBOTIS OP3 is turned on  LED 1  red   LED 2  green  and LED 3  blue  will be lit The chest LED will switch the color from red to green while ROBOTIS OP3 verbally announces Demonstrationready mode Now ROBOTIS OP3 is ready for action ROBOTIS OP3 stays in kneeling pose and does not move while in this mode This is the most recommended mode to change the power source Autonomous ModeROBOTIS OP3 follows and kicks a red ball  user can change the color of ball  and plays soccer by itself If ROBOTIS OP3 falls down  either on its back or belly  it will stand up and resume ball tracking  then pursuit   Start Autonomous Soccer Mode                  Press MODE button until LED1 red  is lit   ROBOTIS OP3 will verbally announce Autonomous soccer mode                             Press START button to begin   ROBOTIS OP3 will stand up and walk around to find the ball ROBOTISOP3 will verbally announce Start soccer demonstration                    When ROBOTIS OP3 sees a ball with the matching color  it will walk toward the ball   If ROBOTIS OP3 gets close enough to the ball  ROBOTIS OP3 will kick the ball with one of its feet   If ROBOTIS OP3 falls down during pursuit or kick  it will stand up and resume               Stop Autonomous Soccer Mode          Press MODE button until LED 3 blue  is lit  ROBOTIS OP3 will verbally announce Interactive motion mode       Interactive Motion ModeROBOTIS OP3 performs preprogrammed motions sequentially while talking   Start Interactive Motion Mode                  Press MODE button until LED 3 blue  is lit  ROBOTIS OP3 will verbally announce Interactive motion mode                     Press START button to begin  ROBOTIS OP3 will stand up and announce Start motion demonstration       ROBOTIS OP3 will perform following actions sequentially             Stop Interactive Motion Mode          If MODE button is pressed for at least 2 seconds  ROBOTISOP3 will return to demonstrationready mode       Vision Processing ModeThe new vision processing demo for ROBOTIS OP3 is Face detection and tracking  ROBOTIS OP3 is developed with ROS Therefore various ROS packages such as face detecting package can be applied for vision processing mode to track recognized face in front of the robot Please refer the below website link Face detecting  https  github com phil333 face_detection  Start Vision Processing Mode                  Press MODE button until LED 2 green  is lit  ROBOTIS OP3 will verbally announce Vision processing mode                     Press START button to begin  ROBOTIS OP3 will verbally announce Start vision processing demonstration and stand up       The target face should be located approximately 90cm 36  away from ROBOTIS OP3   If ROBOTIS OP3 detects the target face  chest LED will be lit in white whereas the LED will be off if ROBOTIS OP3 doesn’t detect the face   ROBOTIS OP3 will keep track on the first recognized target face         Stop Vision Processing Mode          If MODE button is pressed for at least 2 seconds  ROBOTISOP3 will return to DemonstrationReady mode         ETC          Modifying parameters of the ‘face_detection’ package might improve recognition of the face  Please refer to the following website for more details       face_detection package  https  github com ROBOTISGIT face_detection      usb_cam package  http  wiki ros org usb_cam      Camera CalibrationIf ambient light of ROBOTIS OP3 is either too dim or too bright  user can adjust camera setting for optimizing acquired image from the camera The color of the ball for soccer demo can also be modified from the setting Please refer to the wiki manual from below link https  github com ROBOTISGIT ROBOTISDocuments wikiPower OffPlease perform below procedures in order to shutdown the computer inside ROBOTIS OP3       Press PC power button which is located on the bottom side of the chest  ROBOTIS OP3 will verbally announce byebye and initiate shutdown process         When the internal computer of ROBOTIS OP3 is turned off  blue LED at the chest will be off  After the blue LED is turned off  shutdown the main power with the switch in the back of the robot         If ROBOTIS OP3 does not announce byebye then you may need to force shutdown by holding the power button until the blue LED at the chest turns off   Note If power supply is cut off before the blue LED is turned off  ROBOTIS OP3 may have problems in the next startup Programming GuideConnect to OP3From your computer go to WiFi Setting and set to obtain an IP address automatically using DHCP Then connect to ROBOTIS OP3 wifi network SSID  ROBOTISOP3share   Password is 11111111 Example  SSH Client  for Windows   Execute SSH client program  ex PuTTY   Input ROBOTIS OP3’s IP address 10 42 0 1  Select SSH as a connection type and open the connection   Input ROBOTIS OP3’s user name  robotis  Input ROBOTIS OP3’s Password  111111Example SSH Client  for Linux   Open the terminal window   Input the following SSH command with ROBOTIS OP3’s user name and IP address    ssh robotis@10 42 0 1  Input ROBOTIS OP3’s Password  111111Example VNC client  for Windows   Users who are familiar to graphical interface may use remote desktop softwares   Execute VNC client program  ex Ultra VNC Viewer   Input the ROBOTIS OP3’s IP address  10 42 0 1  Input the ROBOTIS OP3’s Password  111111Development EnvironmentThe following is the list of tools for source code development   OS  Linux  64bit   Compiler  GNU project C and C   Compiler  Catkin  Programming Language  C  For more detailed information  please refer to the ROBOTIS OP3 WIKI  https  github com ROBOTISGIT ROBOTISDocuments wikiSource CodeYou may find the source code directory at  robotis from ROBOTIS OP3’s PC The preinstalled source code may be updated without prior notice  Please check for updates periodically  You may obtain updated source code from the below GitHub links   https  github com ROBOTISGIT DynamixelSDK  https  github com ROBOTISGIT ROBOTISFramework  https  github com ROBOTISGIT ROBOTISFrameworkmsgs  https  github com ROBOTISGIT ROBOTISMath  https  github com ROBOTISGIT ROBOTISOP3  https  github com ROBOTISGIT ROBOTISOP3Common  https  github com ROBOTISGIT ROBOTISOP3Demo  https  github com ROBOTISGIT ROBOTISOP3msgs  https  github com ROBOTISGIT ROBOTISOP3Tools  https  github com ROBOTISGIT ROBOTISUtilityFrameworkThe following flow diagram represent class breakdown and data pipelines You may modify the framework at  home robotis catkin_ws src ROBOTISFramework For more information  please refer to the ROBOTIS OP3 WIKI https  github com ROBOTISGIT ROBOTISDocuments wikiSoftware UtilitiesUser who wishes to customize or diagnose ROBOTIS OP3 should establish a connection with the robot via SSH or Remote Desktop VNC  The tools are located in the following directory home robotis catkin_ws src ROBOTISOP3 ROBOTISOP3ToolsIn the directory you can find code for Recovery SoftwareThe supplied USB thumb drive contains the software preinstalled to ROBOTIS OP3 You may obtain updated software from the link below https  github com ROBOTISGIT ROBOTISDocuments wikiSoftware may be updated without prior notice  Please check for updates periodically Useful InformationYou can download other ROBOTIS OP3related items and more detailed information from the wiki manual https  github com ROBOTISGIT ROBOTISDocuments wiki  For any inquiries send us an email           International  contactus2@robotis com      Korea  korea@robotis com        Third party terminal client          PuTTY  http  www chiark greenend org uk  sgtatham putty       RealVNC  http  www realvnc com       MiscellaneousSystem Block DiagramThe below diagram illustrates the overall system structure of ROBOTIS OP3   Main Controller is powered by Intel i3 dualcore Intel NUC i3   Sub Controller is powered by STMicroelectronics CortexM7 32F746GT6  clocked at 216MHz    Camera          1080p Full HD movie recording      Carl Zeiss® optics with 20step autofocus      Builtin dual stereo mics with noise reduction      H 264 video encoding      ID MapThe following diagram illustrates the default ID number of actuators in ROBOTIS OP3 WarrantyROBOTIS OP3 includes the following warrantyA  90 days warranty against manufacture defects  RMA required   B  Local Maintenance Service  by local partner   1 years     Reinstallation of S W and firmware  Replacement for cable gear screw  RMA required – exempt from faulty return   Replacement for faulty frame cover actuator  RMA required C  Core System Maintenance Service  by ROBOTIS   1 years  Replacement for faulty PC subboards  RMA required   Maintenance for actuator subboards  RMA required   Maintenance for PC  RMA required  additional fee applies D  Parts replacement for malfunctions during normal operation for 1 years   Please download RMA  Return Material Authorization  http  en robotis com index service_04 php tab 4 No return shipping will be accepted without a RMA number issued by ROBOTIS    Customers who require extended warranty period may purchase another 1 year warrantyfrom ROBOTIS before their standard warranty period is over Important Notice      Product registration is required for all customers  http  support robotis com        Parts replacement can only be done through RMA Return Material Authorization  application         After the initial 90 days  shipping fee is not covered under warranty     Warranty does NOT cover ordinary wear tear  any accident or damage caused by followings           Physical damage equivalent to dropping the robot from 20cm or higher      Disabling system safety function  DYNAMIXEL Overload Shutdown       Dangerous movement  jump  roll  fi ght  or excessive operation without rest      Any liquid or unauthorized chemical material to the robot      Unauthorized power or electric shock applied to the robot      Improvising core system programming area         Direct checkup service  Evaluation  maintenance and quality assurance of assembled robot can be provided by ROBOTIS only   RMA is required and additional fee may apply  Service will not be rendered for seriously customized hardware Sub Controller OpenCR Control TableControl Table consists of data regarding the current status and operation of OpenCR  The user can control OpenCR by changing data of Control Table via Instruction packet EEPROM and RAMData in RAM area is reset to initial values whenever the power is turned on while data in EEPROM area is kept once values are set even if the power is turned off AddressRepresents the location of data  To read from or write data to the control table the user should assign the correct address in the Instruction packet AccessOpenCR has two kinds of data Readonly data  used mainly for sensing  and readandwrite data used for driving Initial ValueIn case of data in the EEPROM Area  the initial values on the right side of the below Control Table are the factory default settings In case of data in the RAM Area  the initial values on the right side of the following control table are the ones when the power is turned on Highest Lowest ByteIn the Control table  some data share the same name  but they are attached with  L  or  H  at the end of each name to distinguish the address  This data requires 16bit  but it is divided into 8bit each for the addresses  low  and  high   These two addresses should be written with one Instruction Packet simutaneously EEPROM Area            Address      Name      Description      Access      Init Value                  0  0X00       Model Number L       model number low byte      R      0 0X00               1  0X01       Model Number H       model number high byte      R      116  0X74               2  0X02       Version of Firmware      firmware version      R                    3  0X03       ID      OpenCR ID      RW      200  0XC8               4  0X04       Baud Rate      Dynamixel baud rate      RW      1  0X01               5  0X05       Return Delay Time      Return Delay Time      RW      0  0X0               16  0X10       Status Return Level      Status Return Level      RW      0  0X00       RAM Area            Address      Name      Description      Access      Init Value                  24  0X18       Dynamixel Power      Dynamixel On Off      RW      0  0X00               25  0X19       LED      LED Pannel On Off      RW      0  0X00               26  0X1A       LED_RGB L       LED 5 low byte      RW      0  0X00               27  0X1B       LED_RGB H       LED 5 high byte      RW      0  0X00               28  0X1C       Buzzer L       LED 6 low byte      RW      0  0X00               29  0X1D       Buzzer H       LED 6 high byte      RW      0  0X00               30  0X1E       Button      Button status      R                    31  0X1F       Voltage      Power Voltage      R                    32  0X20       Gyro_Z L       Gyroscope Zaxis low byte      R                    33  0X21       Gyro_Z H       Gyroscope Zaxis high byte      R                    34  0X22       Gyro_Y L       Gyroscope Yaxis low byte      R                    35  0X23       Gyro_Y H       Gyroscope Yaxis high byte      R                    36  0X24       Gyro_X L       Gyroscope Xaxis low byte      R                    37  0X25       Gyro_X H       Gyroscope Xaxis high byte      R                    38  0X26       ACC_X L       Accelerometer Xaxis low byte      R                    39  0X27       ACC_X H       Accelerometer Xaxis high byte      R                    40  0X28       ACC_Y L       Accelerometer Yaxis low byte      R                    41  0X29       ACC_Y H       Accelerometer Yaxis high byte      R                    42  0X2A       ACC_Z L       Accelerometer Zaxis low byte      R                    43  0X2B       ACC_Z H       Accelerometer Zaxis high byte      R                    44  0X2C       Roll L       IMU Roll low byte      R                    45  0X2D       Roll H       IMU Roll high byte      R                    46  0X2E       Pitch L       IMU Pitch low byte      R                    47  0X2F       Pitch H       IMU Pitch high byte      R                    48  0X30       Yaw L       IMU Yaw low byte      R                    49  0x31       Yaw H       IMU Yaw high byte      R                    50  0X32       IMU_Control      IMU Control      RW      0x00      Address Function HelpModel NumberRepresents the Model Number Firmware VersionRepresents the firmware version IDIs a unique number to identify Dynamixel Values range from 0  0x00  to 252  0xFC   Value 254  0xFE  is used as the Broadcast ID If the Broadcast ID is used to transmit Instruction Packet  then it can command to all Dynamixels Note Do NOT assign an identical ID for DYNAMIXELs in the same network Baud RateRepresents the communication speed  0  0x00  to 254  0xFE  can be used for it  This speed is calculated by using the below formula Speed BPS    2000000  Data 1             Data      Set BPS      Target BPS      Tolerance                  1      1000000 0      1000000 0      0 000 %              3      500000 0      500000 0      0 000 %              4      400000 0      400000 0      0 000 %              7      250000 0      250000 0      0 000 %              9      200000 0      200000 0      0 000 %              16      117647 1      115200 0      2 124 %              34      57142 9      57600 0      0 794 %              103      19230 8      19200 0      0 160 %              207      9615 4      9600 0      0 160 %      Note Maximum Baud Rate error of 3% is within the tolerance of UART communication Return Delay TimeReturn Delay Time will set a timer to hold a Status Packet transmission for a received Instruction Packet This data has a multiplier of 2μsec  therefore set value will be multiplied by 2 microseconds For example  if Return Delay Time is set to 10  a Status Packet will be transmitted after 20 microseconds after receiving an Instruction Packet Available data values range from 0  0x00  to 254  0xFE  Status Return LevelStatus Return Level decides whether to return a Status Packet or not for an Instruction Packet There are three options as below table If an Instruction Packet has a Broadcast ID  Status Packet will not be returned regardless of Status Return Level             Value      Return of Status Packet                  0      No return against all commands  Except PING Command               1      Return only for the READ command              2      Return for all commands      Note When Instruction packet is Broadcast ID  Status packet is not returned regardless of Status return level Dynamixel Power            Value      Meaning                  0      Turn off the power of all Dynamixels connected to OpenCR               1      Turn on the power of all Dynamixels connected to OpenCR       LED Pannel            BIT      7   3      2      1      0                  Value      X      LED3      LED2      LED1      For each set bit  corresponding LED will be turned on For each reset bit  corresponding LED will be turned off LED_RGB            BIT      15      14   10      9   5      4   0                  Value      X      LED_B      LED_G      LED_R      Chest LED is a tricolor LED and the color can be represented with RGB values Buzzer            Value      Description                  0   65535      Frequency Hz  of Buzzer      If the Buzzer value is set to 0  the buzzer will be turned off BUTTON STATUS            BIT      7   4      3      2      1      0                  Value      X      BUTTON_S4      BUTTON_S3      BUTTON_S2      BUTTON_S1      For each bit set to 1  the button is being pressed For each bit set to 0  the button is released VOLTAGEThis value stands for the input voltage of the controller with a multiplier of 10 For example  when 10V is supplied to the controller  the Voltage value will be 100 GYRO X Y ZThe following image represents the direction of Gyro axis of OpenCR Each arrow represents the orientation of gyroscope axis The data range is 2000dps    2000dps The following graph shows relation between actual data value and angular velocity value Acceleration X Y ZThe following picture represents the direction of accelerometer axis of OpenCR Each arrow represents the orientation of accelerometer axis The data range is 2g    2g The following graph shows relation between actual data value and acceleration value IMU_ControlThis data controls roll   pitch   yaw offset values for the IMU sensor             BIT      7   4      3      2      1      0                  Value      X      Gyro      Yaw      Pitch      Roll      For each bit set to 1  corresponding roll  pitch  yaw  gyro values will be used for calculating offset values The calculation will take for 2 seconds and then each bit will be reset to 0 GPIO Pin Assignments            Pin      Assignments                  PIN_LED_R      Red LED pin              PIN_LED_G      Green LED pin              PIN_LED_B      Blue LED pin              PIN_LED_1      LED output 1              PIN_LED_2      LED output 2              PIN_LED_3      LED output 3              PIN_BUTTON_S1      Button Input S1              PIN_BUTTON_S2      Button Input S2              PIN_BUTTON_S3      Button Input S3              PIN_BUTTON_S4      Button Input S4  Reset Dynamixel Power       ",
      "url": "http://0.0.0.0:4000/docs/en/platform/op3/getting_started/"
      } ,
  
  
      "docs-en-platform-thormang3-getting-started":  {
      "title": "THORMANG3",
      "content"	 : "IntroductionCongratulations on purchasing THORMANG THORMANG will lead you to the robot world with virtually unlimited research possibilities and opportunities Read this guide thouroughly before getting with THORMANG THORMANG3 User Guide Wiki  Download ZIP thormang3_stp zip  Download ZIP sim_for_thormang3_stl zipWhat is THORMANG3 THOR  Tactical Hazardous Operations Robot  is an affordable  full size humanoid robot platform with advancedcomputational power  sophisticated sensors  high payload capacity  and dynamic motion abilities to enable many exciting researches and educational activities Package Contents  THORMANG3 fullyassembled  × 1  Battery packs in robot  × 1  Battery charger × 1  Wrench set × 1  Screwdrivers × 2  Spare cables  Spare bolts and nuts  USB ×1  Carrying Case × 1  Carabiner and rope × 2  Lift × 1  Wireless  DLink DIR806A  × 1LayoutSpecificationsHardware            Feature      Description                  DOF      29              Actuator      200W x 10   100W x 11   20W x 8              Computer      Intel® NUC with Intel® Core™ i5 Processor DDR4 RAM 8GB   M 2 SSD 128GB  x2              Wireless router      Dlink DIR806A x 1              Sensor      Logitech C920 HD Camera x 1Intel Realsense Option  x 1Hokuyo UTM30LXEW Option  x 1F T ATi Mini58SI2800120 x 2IMU MicroSrain 3DMGX425 x 1              Battery      22V  22000mA x 118 5V  11000mA x 1              Height      137 5cm              Weight      42Kg      SoftwareThe followings are source code development environments   OS  Linux  Ubuntu LTS 64bit  with ROS  Robot Operating System   Compiler  GNU project C and C   Compiler  Programming Language  C  Safety InformationROBOTIS is not responsible for any damages or losses resulting from any accidents caused by user’s negligence   Read the instructions carefully before getting started   Parental guide is necessary for users under 15 years old   Do not use tools other than those provided in the kit   Keep away from the action radius of the robot when the robot is moving   Prevent from getting your fingers stuck in any moving parts   Do not keep the robot near water  heat  or fire   Do not use batteries or chargers other than provided in the kit   Gears must be replaced after long excessive use Quick StartUnpacking      Open the case and remove the sponge  Red dot Direction of the robot’s head            Take out shock absorption sponge  Charger supply  Consumables box             Close the case  The head should face up  Red dot Direction of the robot’s head            Open the box and hang the carabiners on the lift                Hang the ibolt on the carabiners  Drag the upper body out of the case  Yellow dot Location of the ibolt            The robot will come out naturally via the lift  Please use your hands to take out the robot’s legs             Raise the lift and take out the battery charger box  Yellow square is the Battery charger box          Power On      Hang THORMANG on the lift  Raise THORMANG’s feet off the ground          Using power supply  Plug into the power supply 18V  over 10A  to provide power to pc cable   Plug into the power supply 24V  over 30A  to provide power to body cable Using Battery Pack instead of the power supply   You can select either the power supply or battery pack to supply power on THORMANG   If you want to use the battery pack  please follow the steps below           Ensure the battery packs are fully charged       Open the battery compartment door  unscrew the thumbscrew  and insert the battery packs  Close and secure the compartment  screw the thumbscrew        Connect battery connectors with two battery power connectors                 First  witch on three switches on the power board  and then turn on the MPC and PPC             Release the Estop button  If the Estop button is pressed  the system is inactive       Connect to THORMANG3Open the network setting page of your computer and set the IP address of your computer to be in the same network with THROMANG3 Example 10 17 3 xxx   Connection Information          MPC  Motion PC  IP Address  10 17 3 30      PPC  Perception PC  IP Address  10 17 3 35      MPC  amp PPC user name  robotis      MPC  amp PPC password  111111      Example with SSH Client  Windows   Execute SSH client program  ex PuTTY   Input THORMANG 3 MPC’s IP address  10 17 3 30  Select SSH as a connection type and then open the connection   Input THORMANG 3 MPC’s user name  robotisInput THORMANG 3 MPC’s password  111111ROBOTIS recommends users to connect with THROMANG3 via SSH client Example SSH Client  Ubuntu   Open the terminal window   Type the following SSH command with the MPC’s user name and IP address    ssh –l robotis 10 17 3 30  Input the MPC’s password  111111Example VNC client  Windows   Execute VNC client program  e g  Ultra VNC Viewer   Input the MPC’s IP address  10 17 3 30  Input the MPC’s password  111111Basic OperationBasic Manipulation Demo      Connect to the PPC with SSH client program  IP 10 17 3 35        ssh 10 17 3 35 l robotis  password 111111             The following command will execute the manipulation demo        rosrun thormang3_manipulation_demo thormang3_manipulation_demo            5 commands are programmed and can be executed from  the terminal window           demo 1  go to initial pose  from base module            rostopic pub 1  robotis manipulation_demo command std_msgs String ini_pose            demo 2  set manipulation module      rostopic pub 1  robotis manipulation_demo command std_msgs String set_mode            demo 3  go to manipulation base pose  Joint Space Control      rostopic pub 1  robotis manipulation_demo command std_msgs String base_pose            demo 4  move right arm  without torso   Task Space Control      rostopic pub 1  robotis manipulation_demo command std_msgs String right_arm            demo 5  move left arm  with torso   Task Space Control      rostopic pub 1  robotis manipulation_demo command std_msgs String left_arm      Basic Walking Simple Demo      Connect to the PPC with SSH client program  IP 10 17 3 35         ssh 10 17 3 35 l robotis password 111111                The following command will execute the walking demo        rosrun thormang3_walking_demo thormang3_walking_demo               5 commands are programmed and can be executed from the terminal window           demo 1  go to initial pose  from base module            rostopic pub 1  robotis walking_demo command std_msgs String ini_pose            demo 2  set manipulation module      rostopic pub 1  robotis walking_demo command std_msgs String set_mode            demo 3  enable disable balance algorithm – Balance ON   OFF      rostopic pub 1  robotis walking_demo command std_msgs String balance_on    rostopic pub 1  robotis walking_demo command std_msgs String balance_off            demo 4  walk forward – One step forward walking  balance should be turned on      rostopic pub 1  robotis walking_demo command std_msgs String forward            demo 5  walk backward – One step backward walking  balance should be turned on       rostopic pub 1  robotis walking_demo command std_msgs String backward      Power Off      Hang THORMANG on the lift            Press the EStop button Turn off the DXL power             After both PCs are turned off  switch off three switches on the power board       Battery Charge  Connect all battery sockets in to the battery charger sockets           Channel 1 connect the yellow jack      Channel 2 has a white terminal              Connect the DC power supply to the battery charger       Insert the AC plug of the DC power supply into the power socket                 Power on and check the settings  See the below images  The different settings to match the settings by pressing the button             Connect the white male charging connector to the female connector of the battery  Connect the battery’s white balance connector to the cell balance connector 6 pin connector              Connect the yellow male charging connector to the female connector of the battery   Connect the battery’s white balance connector to the cell balance connector 7 pin connector              Select channel A  Then  press and hold the START button when the cursor is on the Charge option  When the screen changes  press ENTER to start charging battery if configuration is fine             Select channel A  Then  press and hold the START button when the cursor is on the Charge option  When the screen changes  press ENTER to start charging battery if configuration is fine         Melody is played  when the battery is fully charged   press the ESC button and unplug all connectors Note Each 4 channels can be charged independently Repacking      Put the battery charger box into the case             Pack the robot by placing its feet first  Please be careful with the handling to prevent damage to the robot’s arm             Bend the robot’s head forward  If the lift doesn’t go down  separate the lift and carabiners            Refer to the pictures Put the sponge for arm and head protection             Refer to the pictures for robot arm arrangement  Put the sponge for upper body and knee protection             Cover the case with the sponge and close the lid       Getting StartedOS InstallUbuntu 16 04 LTS is installed on PCs in the THORMANG3 and the PC for Remote Control Version Note Install Ubuntu DesktopNetwork SettingThis section explains how to configure the network for MPC Motion PC  and PPC Perception PC  of the robot  as well as the WiFi switch and the OPC Operating PC  Access Point SettingAccess Point AP  Information  Model  DLink DIR806A  Account          user  admin              password  admin        Reference DIR806A Product Manual            AP Server  Router Mode Orange light   IP Address  10 17 3 1  WiFi Name  2 4G   THORMANGSxx  xx  number   WiFi Name  5G   THORMANGSxx5G  xx  number   WiFi Password  11111111AP in THORMANG3  Repeater Mode Green light PC SettingMPC  Motion PC   IP Address  10 17 3 30  Netmask  255 255 255 0  Gateway  10 17 3 1PPC  Perception PC   IP Address  10 17 3 35  Netmask  255 255 255 0  Gateway  10 17 3 1OPC  Operating PC   IP Address  10 17 3 100  Netmask  255 255 255 0  Gateway  10 17 3 1ROS InstallROS Robot Operating System  is required in order to control THORMANG3  Currently THORMANG3 is developed and tested with Kinetic Kame version of ROS Note Install ROSROS Environment SettingNote Environment Setting ReferenceNote ROS Network Setup ReferenceNetwork Setting ExampleAbove configuration has to be repeatedly done whenever a new terminal window is created  The following method will load configuration file when creating a terminal window  ROS Network setup is also performed when the configuration file is loaded System configuration  PPC Perception PC   core PC          IP  10 17 3 35        MPC Motion PC           IP  10 17 3 30        OPC Operation PC           IP  10 17 3 100      Example setting for PPC  Open the bash file with an editor to apply configuration        gedit    bashrc        Append below contents at the end of the  bashrc file        Set ROS Kinetic source  opt ros kinetic setup bash source   catkin_ws devel setup bash       Set ROS Network        PPC CORE 10 17 3 35  export ROS_MASTER_URI http  10 17 3 3511311   local ROS IP export ROS_IP 10 17 3 35        Use below command to apply modified configuration or open a new terminal window        source    bashrc      Example setting for MPC  Open the bash file with an editor to apply configuration        gedit    bashrc        Append below contents at the end of the  bashrc file        Set ROS Kinetic source  opt ros kinetic setup bash source   catkin_ws devel setup bash       Set ROS Network        PPC CORE 10 17 3 35  export ROS_MASTER_URI http  10 17 3 3511311   local ROS IP export ROS_IP 10 17 3 30        Use below command to apply modified configuration or open a new terminal window        source    bashrc      Example setting for OPC  Open the bash file with an editor to apply configuration        gedit    bashrc        Append below contents at the end of the  bashrc file        Set ROS Kinetic source  opt ros kinetic setup bash source   catkin_ws devel setup bash       Set ROS Network        PPC CORE 10 17 3 35  export ROS_MASTER_URI http  10 17 3 3511311   local ROS IP export ROS_IP 10 17 3 100        Use below command to apply modified configuration or open a new terminal window        source    bashrc      Time SynchronizationIn order to run the ROS on multiple PCs  each PC clock has to be synchronized  The following script file comes in handy for this synchronization procedure  PPC time becomes the reference for synchronization  and perform below procedures only for MPC and OPC   Create the script file with an editor        gedit   timesync        Copy and paste below contents to the script file         bin sh sudo date set  2 secs  sudo ntpdate 10 17 3 35 sudo hwclock w PPC 10 17 3 35         Modify the script file permission Add execute permission        sudo chmod  x timesync        Run the script file to sync time for PPC  MPC and OPC          timesync        If NTP socket is running  Stop the ntp service and sync time         sudo service ntp stop      timesync      ROBOTIS ROS Package InstallThis section introduces how to install the ROBOTIS ROS Package for THORMANG3   ROBOTISFramework  DXL SDK based Framework for ROBOTIS platforms  ROBOTISFrameworkmsgs  ROS Messages used in the ROBOTISFramework  ROBOTISTHORMANGMPC  ROS Packages for the Motion PC of THORMANG3  ROBOTISTHORMANGPPC  ROS Packages for the Perception PC of THORMANG3  ROBOTISTHORMANGOPC  ROS Packages for the Operating PC of THORMANG3  ROBOTISTHORMANGCommon  Common ROS Packages for THORMANG3  ROBOTISTHORMANGmsgs  ROS Messages used in the ROBOTIS THORMANG3 packages  ROBOTISTHORMANGTooMPC InstallationInstall the ROBOTIS ROS Package from the MPC  The ROS Package is installed by default   Download Packages from GitHub to the source folder in the catkin workspace        cd   catkin_ws src   git clone https  github com ROBOTISGIT DynamixelSDK git   git clone https  github com ROBOTISGIT ROBOTISMath git   git clone https  github com ROBOTISGIT ROBOTISFramework git   git clone https  github com ROBOTISGIT ROBOTISFrameworkmsgs git   git clone https  github com ROBOTISGIT ROBOTISTHORMANGMPC git   git clone https  github com ROBOTISGIT ROBOTISTHORMANGCommon git   git clone https  github com ROBOTISGIT ROBOTISTHORMANGmsgs git   git clone https  github com ROBOTISGIT ROBOTISTHORMANGTools git        After installing all dependent packages  go to the workspace and build  Use j1 option when building for the first time        cd   catkin_ws   catkin_make j1        Find ft_calibration_data yaml and ft_data yaml from provided USB and copy them to thormang3_manager config  PPC InstallationInstall the ROBOTIS ROS Package from the PPC  The ROS Package is installed by default   Download Packages from GitHub to the source folder in the catkin workspace        cd   catkin_ws src   git clone https  github com ROBOTISGIT ROBOTISFrameworkmsgs git   git clone https  github com ROBOTISGIT ROBOTISTHORMANGmsgs git   git clone https  github com ROBOTISGIT ROBOTISTHORMANGPPC git        After installing all dependent packages  go to the workspace and build  Use j1 option when building for the first time        cd   catkin_ws   catkin_make j1      OPC InstallationInstall the ROBOTIS ROS Package from the OPC   Download Packages from GitHub to the source folder in the catkin workspace        cd   catkin_ws src   git clone https  github com ROBOTISGIT ROBOTISFrameworkmsgs git   git clone https  github com ROBOTISGIT ROBOTISTHORMANGOPC git   git clone https  github com ROBOTISGIT ROBOTISTHORMANGmsgs git   git clone https  github com ROBOTISGIT ROBOTISTHORMANGCommon git            After installing all dependent packages  go to the workspace and build  Use j1 option when building for the first time     Note Dependencies  qtros  map_server  nav_msgs  humanoid_nav_msgs  sbpl  octomapros    Note sbpl needs to be installed manually  Please follow the sbpl install instruction        sudo apt install roskineticmapserver   sudo apt install roskinetichumanoidnavmsgs   sudo apt install roskineticoctomap roskineticoctomapmsgs roskineticoctomapros roskineticoctomapserver   sudo apt install roskineticqtros   cd   catkin_ws src   git clone https  github com AravindaDP humanoid_navigation git   cd   catkin_ws   catkin_make j1            Troubling Shot for libGL in 64bit Ubuntu    Reference  Link  UpdateWhen the source is modified  update  amp build is necessary   Go to the folder where source is copied and run the pull command  ex  ROBOTISTHORMANGOPC        cd   catkin_ws src ROBOTISTHORMANGOPC   git pull        Build       cd   catkin_ws   catkin_make      Additional ROS Package InstallThe followings are required ROS Packages for THORMANG3 when installing desktopfull ROS Packages for MPCInstall below ROS Packages from the MPC  The Package is installed by default urg_node  ROS Package for Lidar  cd   catkin_ws src  git clone https  github com rosdrivers urg_node  git clone https  github com rosdrivers urg_c  git clone https  github com rosperception laser_procReference  http  wiki ros org urg_nodeROS Packages for PPCInstall the below ROS Package from the PPC  The Package is installed by default uvc_camera  ROS Package for USB camera  sudo apt install libv4ldev  cd   catkin_ws src  git clone https  github com ktossell camera_umdReference  http  wiki ros org uvc_camerarealsenseReference  http  wiki ros org RealSense",
      "url": "http://0.0.0.0:4000/docs/en/platform/thormang3/getting_started/"
      } ,
  
  
      "docs-en-platform-thormang3-thormang3-operation":  {
      "title": "THORMANG3",
      "content"	 : "   THORMANG3 Operation   thormang3operation     Preparation   preparation     Time Synchronization  MPC   Reference   ROS network Setup  5  Timing issues  http  wiki ros org ROS NetworkSetup Timing_issues 2C_TF_complaining_about_extrapolation_into_the_future 3F 1  Connect to the   MPC Motion PC      via ssh      1  Run below command on the terminal                  ssh robotis@10 17 3 35             2  Input password         111111       via VNC     2  Synchronize time with the   PPC Perception PC        If this is the first synchronization  create the script file        1  Create the script file with an editor                    gedit   timesync                     2  Copy below contents in the script file            bash          bin sh      sudo date set  2 secs       sudo ntpdate 10 17 3 35      sudo hwclock w                   3  Modify the script file permission Add execute permission                    sudo chmod  x timesync                    4  Execute the script file to synchronize time                      timesync                      If this is not the first synchronization  execute the script file                  timesync           roscore  PPC 1  Connect to the   PPC     via ssh      1  Run below command on the terminal                  ssh robotis@10 17 3 35             2  Input password          111111          via VNC     2  Launch  roscore  http  wiki ros org roscore     Execute below command on the Terminal               roscore            If  roscore  is terminated while it is running  relaunch  roscore    thormang3 sensors  and  thormang3 manager      thormang3 sensors  PPC 1  Connect to the   PPC    2  Execute  thormang3_sensors launch  https  github com ROBOTISGIT ROBOTISTHORMANGPPC blob master thormang3_sensors launch thormang3_sensors launch  file           roslaunch thormang3_sensors thormang3_sensors launch         Reference   thormang3_sensors     THORMANG3 Manager  MPC Turn on the actuator power before executing THORMANG3 Manager   1  Connect to the   MPC    2  Get superuser permission           sudo bash        3  Execute  thormang3_manager launch  https  github com ROBOTISGIT ROBOTISTHORMANGMPC blob master thormang3_manager launch thormang3_manager launch  file           roslaunch thormang3_manager thormang3_manager launch         Reference   thormang3_manager   4  If program is loaded  torque of the actuator will be turned on      How to check thormang3 working      Reference 1   How to execute Simple Demonstration         Reference 2   How to execute OPC s GUI program      Simple Demo   simpledemo      Manipulation Simple Demo   manipulationsimpledemo Simple demo of the  thormang3_manipulation_module        Install   Build   Note  Reference   PPC Installation     notice     Usage1  Connect to the PPC with SSH client program  IP 10 17 3 35              ssh 10 17 3 35 l robotis        2  You can execute simple demo with the following command             rosrun thormang3_manipulation_demo thormang3_manipulation_demo        3  There are 5 commands for simple demonstration       demo 1  go to initial posture  from base module                 rostopic pub 1  robotis manipulation_demo command std_msgs String ini_pose            demo 2  set manipulation module               rostopic pub 1  robotis manipulation_demo command std_msgs String set_mode            demo 3  go to manipulation initial posture  Joint Space Control               rostopic pub 1  robotis manipulation_demo command std_msgs String base_pose            demo 4  move right arm  without torso   Task Space Control               rostopic pub 1  robotis manipulation_demo command std_msgs String right_arm            demo 5  move left arm  with torso   Task Space Control               rostopic pub 1  robotis manipulation_demo command std_msgs String left_arm            Walking Simple Demo   walkingsimpledemo Simple demo of the  thormang3_walking_module      Install   Build   Note  Reference   PPC Installation     notice     Usage1  Connect to the PPC with SSH client program  IP 10 17 3 35              ssh 10 17 3 35 l robotis        2  You can execute simple demo with the following command             rosrun thormang3_walking_demo thormang3_walking_demo_node        3  There are 5 commands for simple demonstration       demo 1  go to initial posture  from base module                 rostopic pub 1  robotis walking_demo command std_msgs String ini_pose          demo 2  set manipulation module              rostopic pub 1  robotis walking_demo command std_msgs String set_mode          demo 3  make balance algorithm enable disable – Balance ON   OFF              rostopic pub 1  robotis walking_demo command std_msgs String balance_on        rostopic pub 1  robotis walking_demo command std_msgs String balance_off             demo 4  walk forward – One step forward walking  balance should be turned on               rostopic pub 1  robotis walking_demo command std_msgs String forward              demo 5  walk backward – One step backward walking  balance should be turned on               rostopic pub 1  robotis walking_demo command std_msgs String backward               GUI Program   guiprogram How to monitor and control THORMANG3 from the remote      What is OPC   whatisopc      assets images platform thormang3 thormang3_046 png Operating PC is used to control the robot from the outside      Recommended PC Info  1  OS     Ubuntu 16 04 LTS  2  ROS Robot Operating System      version  kinetic     installation DesktopFull    http  wiki ros org kinetic Installation Ubuntu  http  wiki ros org indigo Installation Ubuntu      environment setting   http  wiki ros org ROS Tutorials InstallingandConfiguringROSEnvironment  http  wiki ros org ROS Tutorials InstallingandConfiguringROSEnvironment   3  ROBOTIS ROS Package      Reference   OPC Installation       ROBOTISTHORMANGOPC     ROSOTISTHORMANGCommon      OPC Network setting      Reference   Example Setting for OPC    IP Address  Static IP address is recommended      ex      IP address 10 17 3 100    Netmask  255 255 255 0    Gateway  10 17 3 1 ROS network environment setting    Reference   ROS Network Setup  http  wiki ros org ROS NetworkSetup   1  Open the bash file to configure environment               gedit    bashrc       2  Append below contents at the end of the   bashrc  file               Set ROS Kinetic    source  opt ros kinetic setup bash    source   catkin_ws devel setup bash          Set ROS Network           PPC CORE 10 17 3 35     export ROS_MASTER_URI http  10 17 3 3511311       local ROS IP    export ROS_IP 10 17 3 100             ROS_MASTER_URI  PPC 10 17 3 35         ROS_IP  OPC 10 17 3 100   3  Use below command to apply modified configuration or open a new terminal window                source    bashrc            Visualized Monitoring   visualizedmonitoring      Related ROS Packages  1  RViz    RViz is a 3D visualization tool for robots  Rviz visualizes robot s posture  camera image  pointcloud and sensor data       Reference  http  wiki ros org rviz2  Robot Model    ROS uses URDF Unified Robot Description Format  robot model information       Reference  http  wiki ros org urdf  3  TF    TF is generated from Robot model information and each joint data  User can identify Robot s posture and relative position of each frame with TF       Reference  http  wiki ros org tf4  Other sensor related Packages    uvc_camera  urg_node  etc        Run monitoring THORMANG3  1  Launch ROS program for THORMANG3      Reference   How to run THORMANG3 s program 2  Synchronize time with the PPC Perception PC      If this is the first synchronization  create the script file        Create a script file with an editor                    gedit   timesync                  Copy below contents in the script file                      bin sh      sudo date set  2 secs       sudo ntpdate 10 17 3 35      sudo hwclock w                     PPC 10 17 3 35        Modify the script file permission Add execute permission                    sudo chmod  x timesync              Execute the script file to synchronize time                      timesync            If this is not the first synchronization  execute the script file                  timesync       3  Run Visualization Tool    User can monitor the robot with below command            roslaunch thormang3_description thormang3_opc launch          assets images platform thormang3 thormang3_047 png      Remote Control GUI Demo    remotecontrolguidemo Demo program for remote control is provided   Walking  manipulation  head control are provided   1  Run thormang3 demo    The following command will launch the demo program                roslaunch thormand3_demo thormang3_demo launch       2  Basic Operations  3  Switching Modes    The framework of THORMANG3 is consisted of multiple modules     Switching mode will decide which module to use   4  Move to  Mode  tab  5  Click the mode at the top to activate  6  Check all joints are switched to selected mode            assets images platform thormang3 thormang3_048 png 7  Initial Posture    In order to operate the robot safely  the robot should be operated from the initial posture     Click  Robot Init Pose  button at the top of demo program Effective regardless of current mode            assets images platform thormang3 thormang3_049 png          assets images platform thormang3 thormang3_050 png      Calibrate FT Sensors   calibrateftsensors Instructions about how to calibrate FT Sensors on THORMANG3 s feet  Balance Algorithm for walking works well when FT Sensors are calibrated         Install   Build   Note  Reference   OPC Installation     notice     Run   Reference   How to execute OPC s GUI program      Usage  1  Move to Robot Init Pose   Click  Robot Init Pose  button on the top            assets images platform thormang3 thormang3_051 jpg 2  Measure FT Air     After reaching to Robot Init Pose  click  FT Air  button to measure the Force Torque value in the air      THORMANG3 must be hanging on the lift for this procedure            assets images platform thormang3 thormang3_052 jpg 3  Measure FT Ground       After completing previous procedure  click  FT Ground  button to measure the Force Torque on the ground        THORMANG3 must be standing on the ground for this procedure            assets images platform thormang3 thormang3_053 jpg        Measured values are displayed on the left of GUID          If measured Fz value on the ground is greater than the measured value in the air by more than around 210N  it is normal          If the value is smaller than around 210N  repeat 1 3 procedure from above   4  Apply Init FT   After completing above procedures  click  Apply Init FT  button    Measured Force Torque values in the air and on the ground are transmitted to  thormang3_feet_ft_module  and FT Sensor calibration is completed          assets images platform thormang3 thormang3_054 jpg 5  Save FT Calibration   If you want to save current calibration  click  Save FT calibration  button          assets images platform thormang3 thormang3_055 jpg      Operate Head Module   operateheadmodule Instructions about controlling head of THORMANG3   Lidar data 2D  can be assembled to PointCloud 3D  by moving the head with Head Control Mode    User can manipulate head joints to move the sensor attached head        How to operate Head Control module   Assemble LaserScan    1  Change the Mode    2  Assemble    Click  Make PointCloud  button in the  Basic Control  of the demo program                assets images platform thormang3 thormang3_056 png   3  Check the pointcloud      Assembled pointcloud can be seen on the RViz screen        Execute Visualization Tool       Add topic         Click  Add  button on the Display window on the left          Select  By topic  tab on the new window         Select   robotis sensor assembled_scan PointCloud2        Check PointCloud on the 3D screen                 assets images platform thormang3 thormang3_057 png  Head Joint Control    1  Change the Mode    2  Select  Head Control  tab of the demo program     3  Change the value for specific joint            assets images platform thormang3 thormang3_058 png      Operate Manipulation Module   operatemanipulationmodule Instructions about how to operate the manipulation module on the OPC GUI program      How to operate the Manipulation moduleManipulation Control Mode can control and receive feedback of the upper body      assets images platform thormang3 thormang3_059 png       Joint Space Control 1  Change the Mode     Click  Manipulation  tab of the demo program   2  Manipulation Initial Pose       Click  Manipulation Init Pose  in the  Joint Control  3  Update the value of specific joint        Select desired joint from  Joint Name         Write target value in  Joint Value  deg          Click  Set Destination Joint Angle  button      4  Obtain current joint value        Select desired joint from  Joint Name         Click  Get Current Joint Angle  button          Task Space Control    1  Change the Mode     Click  Manipulation  tab of the demo program   2  Manipulation Initial Pose       Click  Manipulation Init Pose  in the  Joint Control  3  Write the target value of End effector      Select a specific group in the  Forward Kinematics  tab        write target value in the  Inverse Kinematics  tab        Click  Set Destination Position  button      4  Obtain current value of End effector    Select a specific group in the  Forward Kinematics  tab        Click  Get Current Position  button          Gripper Control    1  Change the Mode     Click  Manipulation  tab of the demo program   2  Manipulation Initial Pose       Click  Manipulation Init Pose  in the  Joint Control  3  Gripper Operation    Select a specific group in the  Gripper  tab        Click  ON     OFF  buttons      Operate Walking Module   operatewalkingmodule      Walking with  thormang3_demo  and  thormang3_foot_step_generator Examples to control walking by using  thormang3_demo  and  thormang3_foot_step_generator     Structure looks like the below figure        assets images platform thormang3 thormang3_060 jpg       Install   Build   Note  Reference   OPC Installation     notice      Run   Reference   How to execute OPC s GUI program        Usage1  Move to Robot Init Pose   Click the  Robot Init Pose  button            assets images platform thormang3 thormang3_061 png 2  FT Sensor Calibration   FT sensor calibration is important for the walking operation    FT Sensor calibration is recommended when there are significant environmental changes such as motor replacement and temperature change    FT Sensor calibration can be done as below       Reference   How to calibrate feet ft sensors 3  Set Mode   Click the  Walking Module  button to switch to Walking Mode          assets images platform thormang3 thormang3_062 jpg 4  Balance On    Select the  Walking  tab from the demo program    Click  On  button in the  Balance Control             assets images platform thormang3 thormang3_063 png        Balance is turned on by configuring  Balance Parameter  with the   robotis walking set_balance_param  service      Balance Parameter is updated with the saved value in the  thormang3_foot_step_generator data balance_param yaml           assets images platform thormang3 thormang3_064 jpg 5  Walking Control   Configure Walking Parameters on the right of the  Direction Walking  panel    After configuring parameters  clicking one of Walking Directions will initiate walking of THORMANG3          assets images platform thormang3 thormang3_065 jpg        The procedure flows as below          assets images platform thormang3 thormang3_066 jpg      Walking with  thormang3_demo  and  footstep_planner A walking example that follows StepData using  footstep_planner       assets images platform thormang3 thormang3_067 jpg       Install   Build   Note  Reference   OPC Installation     notice      Run  Execute  thormang3_demo  as below   Reference   How to execute OPC s GUI program  Execute  footstep_planner        Usage1  Basic Operation   Sequentially proceed 1 4 of  Usage  from above Walking with  thormang3_demo  and  thormang3_foot_step_generator     2  Add Visualization   Click the  Add  button on the Rviz window    Select the  By Topic  tab and select the   demo foot_step_marker MarkerArray   then click  OK           assets images platform thormang3 thormang3_068 jpg 3  Interactive Marker   Click the  Publish Point  button on the Rviz window    Click one of the THORMANG s feet on the Rviz window          assets images platform thormang3 thormang3_069 jpg      Click  Set Marker  button      The Interactive Marker is activated on the Rviz window as below figure          assets images platform thormang3 thormang3_070 jpg 4  StepData Planning   Move the Interative Marker and click  Publish Pose  button       Walking  tab of the  thormang3_demo  GUI should be selected ahead            assets images platform thormang3 thormang3_071 jpg        After checking Get Pose for Step message from the GUI and activated  Plan  button  click  Plan  button            assets images platform thormang3 thormang3_072 jpg        When planning is completed  planned StepData can be seen on the Rviz GUI window            assets images platform thormang3 thormang3_073 jpg 5  Start Walking   Confirm planned StepData from the  thormang3_demo  GUI and click  GO   button          assets images platform thormang3 thormang3_074 jpg  Usage   docs en platform thormang3 thormang3_ros_packages  thormang3_walking_module    Offset Tuner   offsettuner Instruction about how to run the Thormang3 offset tuner program         Execute in MPC   executeinmpc Execute the offset tuner server first  thormang3_manager should be terminated to run the offset tuner program       roslaunch thormang3_offset_tuner_server thormang3_offset_tuner_server launch        Execute in OPC   executeinopc Execute the offset tuner GUI program      rosrun thormang3_offset_tuner_client thormang3_offset_tuner_client        How to use GUI program   howtouseguiprogram      assets images platform thormang3 thormang3_075 png    Gazebo Simulation   gazebosimulation     Install Gazebo   installgazebo ROSGazebo Package Installation    Gazebo with ROS Gazebo Tutorials  http  gazebosim org tutorials cat connect_ros     Additional InstallationIf rosindigodesktopfull was used to install  the following packages need to be installed      aptget install rosindigoroscontrol  aptget install rosindigoroscontrollers  aptget install rosindigogazeboroscontrol       Run Simulation   runsimulation How to set up   execute gazebo simulation    Recommendation  If Gazebo is running on the OPC  realtime factor can be decreased  therefore  it is recommended to use a separate PC for Gazebo     How to execute  The command to call THORMANG3 in Gazebo     roslaunch thormang3_gazebo robotis_world launch        assets images platform thormang3 thormang3_076 png      thormang3_manager  for Gazebo   Configure simulation setting in the launch file of the thormang3_manager                  Launch thormang3_manager            roslaunch thormang3_manager thormang3_manager launch      Please refer to below tutorials for the rest procedures     How to run THORMANG3 s program    References   references     Router Setting   routersetting 1  Router Reset    To reset the router  press the front button for 10 seconds     Front button is MODE CHANGE button    Orange LED  Router Mode   Green LED  Repeater Mode   Red LED  AP Mode         assets images platform thormang3 thormang3_077 jpg 2  Connect to Router     Default WiFi Name     2 4G  dlink806az     5G   dlink806a 5Gz   Administrator Account Setting     Name  admin     Password  admin 3  Change Language   Connect to Router via WiFi or Wired    Open the browser and connect to ‘192 168 1 1’  Insert Administrator Account Info    Click 상세 설정 Details     Click Menu 도구 Tools    관리자 설정 Administrator     Select Language 영어 English  and click APPLY button    Select 예 and click APPLY button   The language has been changed          assets images platform thormang3 thormang3_078 jpg        4  Disable the IPTV Availability     In order to use Port 4  IPTV Availability should be disabled To use Port 4 must disable IPTV Availability       Advanced   IPTV IGMP   IPTV Availability   Select Disable   Click APPLY button   Reboot the router          assets images platform thormang3 thormang3_079 jpg     LiDAR IP Setting   lidaripsetting  Model  UTM30LXEW  Download IP address changing tool    https  www hokuyoaut jp 02sensor 07scanner download products utm30lxew   Reset the IP Setting    Pressing the button in the sensor’s body will reset the IP setting     1  Remove the rubber cap that covers the IP reset button            assets images platform thormang3 thormang3_080 jpg    2  Press the switch inside the hole for more than 3 seconds  using a thin stick            assets images platform thormang3 thormang3_081 jpg  Restart the sensor when the LED blinks  the IP setting will be completed   The following table shows the network settings after the reset  Item Description     IP 192 168 0 10  Subnet 255 255 255 0  Gateway address 192 168 0 1  TCP IP Port 10940   Change the IP Setting  1  Below is the screen shot of IP changer’s screen shot            assets images platform thormang3 thormang3_082 jpg   2  Change the IP address and push Update button   The Update button can be pushed only when the sensor is connected             assets images platform thormang3 thormang3_083 jpg     System Block Diagram   systemblockdiagram      assets images platform thormang3 thormang3_046 png     Technical Specifications   technicalspecifications 1  PC    nuc5i5RYK  http  www intel com content www us en nuc productsoverview html     Technical Product Specification  http  www intel com content www us en support boardsandkits 000005545 html            assets images platform thormang3 thormang3_084 png 2  Actuators    H54200S500R  x10    H54100S500R  x11    H4220S300R  x8         assets images platform thormang3 thormang3_085 jpg 3  Sensors   6axis forcetorque sensor  ATi Mini58SI2800120  http  www atiia com products ft ft_models aspx id Mini58            assets images platform thormang3 thormang3_086 jpg       IMU sensor  MicroSrain 3DMGX425  http  www microstrain com inertial 3dmgx425               assets images platform thormang3 thormang3_087 jpg       LIDAR  Hokuyo UTM30LXEW  https  www hokuyoaut jp 02sensor 07scanner download products utm30lxew              assets images platform thormang3 thormang3_088 jpg         HD Camera  Logitech C920 HD  http  www logitech com enus product hdprowebcamc920                 assets images platform thormang3 thormang3_089 jpg         Depth camera  Intel RealSense R200  https  software intel com enus realsense r200camera                 assets images platform thormang3 thormang3_090 jpg  4  Batteries   LiPo 22 2V  22000mAh x 1EA http  www maxamps com proddetail php prod Lipo22000222Pack       xt60 plug         assets images platform thormang3 thormang3_091 jpg       LiPo 18 5V  11000mAh x 1EA http  www maxamps com proddetail php prod Lipo11000185Pack         no plug12awg           assets images platform thormang3 thormang3_092 jpg   Chargers hitec smart charger h4  hitec e power box 30a     http  hitecrcd com products chargers dcdcchargers h4dcdcfourportmulticharger product    http  hitecrcd com products chargers epowerbox30amppowersupply product        assets images platform thormang3 thormang3_093 jpg     ID Map   idmap      assets images platform thormang3 thormang3_094 jpg     Physical Properties   physicalproperties      Link Measurements   linkmeasurements      assets images platform thormang3 thormang3_095 jpg      assets images platform thormang3 thormang3_096 jpg  body x y z       Groundorigin   807 5  origin27 0 0 170 5   head x y z       2728 0 0 229  2829 0 45 39  29cam 68 2 45 56  29lidar 0 45 106 75  29decam 68 9 45 17   L_Arm x y z R_Arm x y z           272 0 152 160 271 0 152 160  24 57 60 39 13 57 60 39  46 57 33 0 35 57 33 0  68 30 187 57 57 30 187 57  810 171 30 57 79 171 30 57  1012 39 0 45 911 39 0 45  1214 45 45 45 1113 45 45 45  1430 87 7 58 3 0 1331 87 7 31 7 0  3030_2 0 26 6 0 3131_2 0 26 6 0   L_Leg x y z R_Leg x y z           base16 0 93 18 base15 0 93 18  1618 57 0 75 1517 57 0 75  1820 57 33 0 1719 57 33 0  2022 0 60 300 1921 0 60 300  2224 0 60 300 2123 0 60 300  2426 57 33 0 2325 57 33 0  2626_2 57 0 87 2525_2 57 0 87      Mass   Inertia   massinertia      Whole robot Mass   41 6 kg     assets images platform thormang3 thormang3_096 jpg                Body     assets images platform thormang3 thormang3_097 jpg       Head     assets images platform thormang3 thormang3_098 jpg       Right Arm     assets images platform thormang3 thormang3_099 jpg      assets images platform thormang3 thormang3_100 jpg      assets images platform thormang3 thormang3_101 jpg        Left Arm     assets images platform thormang3 thormang3_102 jpg      assets images platform thormang3 thormang3_103 jpg      assets images platform thormang3 thormang3_104 jpg        Right Leg     assets images platform thormang3 thormang3_105 jpg      assets images platform thormang3 thormang3_106 jpg       assets images platform thormang3 thormang3_107 jpg        Left Leg     assets images platform thormang3 thormang3_108 jpg      assets images platform thormang3 thormang3_109 jpg       assets images platform thormang3 thormang3_110 jpg       Joint   Angle Limit   jointanglelimit      assets images platform thormang3 thormang3_111 jpg      Head Joint     assets images platform thormang3 thormang3_112 jpg  Id Name Range degrees       28 head_y Z  90 to 90  29 head_p Y  60 to 87       Body Joint     assets images platform thormang3 thormang3_113 jpg  Id Name Range degrees       27 torso_y Z  90 to 90  15 r_leg_hip_y Z  90 to 40  16 l_leg_hip_y Z  40 to 90       Right_Arm Joint     assets images platform thormang3 thormang3_114 jpg      assets images platform thormang3 thormang3_115 jpg      assets images platform thormang3 thormang3_116 jpg  Id Name Range degrees       1 r_arm_sh_p1 Y  150 to 150  3 r_arm_sh_r X  90 to 90  5 r_arm_sh_p2 Y  120 to 30  7 r_arm_el_y Z  90 to 45  9 r_arm_sh_wr_r X  150 to 150  11 r_arm_sh_wr_y Z  90 to 90  13 r_arm_sh_wr_p Y  90 to 90       Left_Arm Joint     assets images platform thormang3 thormang3_117 jpg      assets images platform thormang3 thormang3_118 jpg  Id Name Range degrees       2 l_arm_sh_p1 Y  150 to 150  4 l_arm_sh_r X  90 to 90  6 l_arm_sh_p2 Y  30 to 120  8 l_arm_el_y Z  45 to 90  10 l_arm_sh_wr_r X  150 to 150  12 l_arm_sh_wr_y Z  90 to 90  14 l_arm_sh_wr_p Y  90 to 90       Right_Leg Joint     assets images platform thormang3 thormang3_119 jpg  Id Name Range degrees       17 r_leg_hip_r X  30 to 45  19 r_leg_hip_p Y  40 to 85  21 r_leg_kn_p Y  166 to 30  23 r_leg_an_p Y  85 to 40  25 r_leg_an_r X  35 to 90       Left_Leg Joint     assets images platform thormang3 thormang3_120 jpg  Id Name Range degrees       18 l_leg_hip_r X  45 to 30  20 l_leg_hip_p Y  85 to 40  22 l_leg_kn_p Y  30 to 166  24 l_leg_an_p Y  40 to 85  26 l_leg_an_r X  90 to 35  H54200S500R   docs en dxl pro h54200s500r  H54100S500R   docs en dxl pro h54100s500r  H4220S300R   docs en dxl pro h4220s300r  MPC Installation   docs en platform thormang3 getting_started  mpcinstallation PPC Installation   docs en platform thormang3 getting_started  ppcinstallation OPC Installation   docs en platform thormang3 getting_started  opcinstallation ROBOTISTHORMANGOPC   docs en platform thormang3 thormang3_ros_packages  opcpackages ROSOTISTHORMANGCommon   docs en platform thormang3 thormang3_ros_packages  commonpackages Example Setting for OPC   docs en platform thormang3 getting_started  rosenvironmentsetting How to execute Simple Demonstration   docs en platform thormang3 thormang3_operation  simpledemo How to execute OPC s GUI program   docs en platform thormang3 thormang3_operation  guiprogram How to run THORMANG3 s program   docs en platform thormang3 thormang3_operation  thormang3operation How to calibrate feet ft sensors   docs en platform thormang3 thormang3_operation  calibrateftsensors thormang3_sensor   docs en platform thormang3 thormang3_ros_packages  thormang3sensors thormang3_manager   docs en platform thormang3 thormang3_ros_packages  thormang3_manager thormang3_manipulation_module   docs en platform thormang3 thormang3_ros_packages  thormang3_manipulation_module thormang3_walking_module   docs en platform thormang3 thormang3_ros_packages  thormang3_walking_module thormang3_feet_ft_module   docs en platform thormang3 thormang3_ros_packages  thormang3_feet_ft_module thormang3_demo   docs en platform thormang3 thormang3_ros_packages  thormang3demo thormang3_foot_step_generator   docs en platform thormang3 thormang3_ros_packages  thormang3footsetpgenerator Balance Parameter   docs en platform thormang3 thormang3_ros_packages  thormang3walkingmodulemsgs thormang3_foot_step_generator data balance_param yaml   docs en platform thormang3 thormang3_ros_packages  thormang3footsetpgenerator footstep_planner   docs en platform thormang3 thormang3_ros_packages  humanoidnavigation",
      "url": "http://0.0.0.0:4000/docs/en/platform/thormang3/thormang3_operation/"
      } ,
  
  
      "docs-en-platform-thormang3-thormang3-ros-packages":  {
      "title": "THORMANG3",
      "content"	 : "   THORMANG3 ROS Packages   thormang3rospackages     MPC Packages   mpcpackages      thormang3_manager   thormang3_manager  thormang3_manager  is a package to apply ROBOTIS Framework to THORMANG3  Refer to the below link to create a new robot manager      Download   Build Reference    MPC Installation   notice     RunExecute the program with a  launch file in order to load ROS parameters  The command should be executed from the root account to configure the attribute of Thread      sudo bash sudo  password for robotis  roslaunch thormang3_manager thormang3_manager launch        ROS API Launch Parameters     gazebo  bool  default false     Configure whether to the program run in gazebo mode      gazebo_robot_name  string  default      Configure the robot name for joint_state topic name when running in gazebo mode       ex  If thormang3 is the gazebo_robot_name   thormang3 joint_states will be subscribed      offset_file_path  string  default      This path indicates the location of the file that contains offset data of each joint and initial posture data for offset adjustment      robot_file_path  string  default      This path indicates the location of  robot file that contains robot data      init_file_path  string  default      This path indicates the location of the file that contains initialization information of each joint      ft_data_path  string  default      This path indicates the location of the file that contains calibration matrix and unloaded voltage information of the FT sensor      ft_calibration_data_path  string  default      This path indicates the location of the file that contains the reference value for FT sensor calibration      thormang3_kinematics_dynamics   thormang3_kinematics_dynamics  thormang3_kinematics_dynamics  is a kinematics and dynamics library that provides joint   link information and basic robotics function  To use this library  it is necessary to set the  CMakeList txt  and  package xml  of each moduleIn  CMakeList txt     find_package  thormang3_kinematics_dynamics  target_link_libraries  thormang3_kinematics_dynamics     In  package xml     thormang3_kinematics_dynamics        Functions1  LinkData cpp     name  Joint name     parent  Parent joint ID     sibling  Sibling joint ID     child  Child joint ID     mass  Mass     relative_position  Joint relative position  relative to parent      joint_axis  Joint axis vector  relative to parent      center_of_mass  Center of mass  Link Local      inertia  Moment of Inertia  Link Local      joint_limit_max  Joint upper limit     joint_limit_min  Joint lower limit     joint_angle  Joint angle     joint_velocity  Joint velocity     joint_acceleration  Joint acceleration     position Link position     orientation  Link orientation     transformation  Link transformation matrix2  ThorMang3KinematicsDynamics cpp   THORMANG3 joint   link information       c      ThorMang3KinematicsDynamics TREE_SELECT tree           Find kinematics tree     arguments  start joint id     return value  vector   n x 1         c      stdvector findRoute  int to            Find kinematics tree     arguments  start joint id and end joint id     return value  vector   n x 1         c      stdvector findRoute  int from   int to            Calculate total mass     arguments  start joint id     return value  total mass       c      double TotalMass  int joint_ID            Calculate center of mass     arguments  start joint id     return value  3 x 1 matrix       c      EigenMatrixXd CalcMC  int joint_ID      EigenMatrixXd CalcCOM  EigenMatrixXd MC            Calculate forward kinematics     arguments  start joint id       c      void ForwardKinematics  int joint_ID            Calculate forward kinematics     arguments  vector   n x 1       return value  6 x n matrix       c      EigenMatrixXd CalcJacobian  stdvector idx            Calculate inverse kinematics     arguments  end joint id  target position  target orientation  max iteration  calculation error     return value  true or false       c      bool InverseKinematics      int to       EigenMatrixXd tar_position  EigenMatrixXd tar_orientation       int max_iter                  double ik_err            Calculate inverse kinematics     arguments  start joint id  end joint id  target position  target orientation  max iteration  calculation error     return value  true or false       c      bool InverseKinematics      int from                      int to       EigenMatrixXd tar_position  EigenMatrixXd tar_orientation       int max_iter                  double ik_err            Calculate inverse kinematics for leg     arguments  output  target position  x y z   target orientation  roll pitch yaw      return value  true or false       c      bool InverseKinematicsforLeg      double  out       double x     double y      double z       double roll  double pitch  double yaw            Calculate inverse kinematics for right leg     arguments  output  target position  x y z   target orientation  roll pitch yaw      return value  true or false       c      bool InverseKinematicsforRightLeg      double  out       double x     double y      double z       double roll  double pitch  double yaw           Calculate inverse kinematics for left leg     arguments  output  target position  x y z   target orientation  roll pitch yaw      return value  true or false       c      bool InverseKinematicsforLeftLeg      double  out       double x     double y      double z       double roll  double pitch  double yaw             thormang3_action_module   thormang3_action_module  thormang3_action_module  is one of the Motion Module  This module can load and play a motion file The motion file is edited with thormang3_action_editor     Download   Build   Reference    MPC Installation     notice     ROS API      Subscribed Topics       robotis action page_num   std_msgs Int32        The page number will be played       If user send a page number between 1   255  the page will be played       If user send 1  the action will be stopped       If user send 2  the action will be broken stop immediately       robotis action start_action   thormang3_action_module_msgs StartAction        The page number and joint names will be played       Published Topics       robotis status   robotis_controller_msgs StatusMsg        The message indicates status of the action_module       Services     robotis action is_running   thormang3_action_module_msgs IsRunning        The service that checks whether THORMANG3 s action is being played or not      thormang3_base_module   thormang3_base_module  thormang3_base_module  is a module for initial posture  This module is included in thormang3_manager as a library      Download   Build   Reference    MPC Installation     notice  The Motion Module is used in the manager as a form of library    Reference   Creating new robot manager    notice     ROS API      Subscribed Topics     robotis base ini_pose   std_msgs String        A command to take the initial posture This command is effective even when the base module is inactive        Published Topics     robotis enable_ctrl_module   std_msgs String        A base_module activation topic to take the initial posture      robotis status   robotis_controller_msgs StatusMsg        A message that contains the status of base_module      thormang3_manipulation_module   thormang3_manipulation_module THORMANG3 manipulation module for the upper body      Download   Build   Reference    MPC Installation     notice     ROS API      Subscribed Topics     robotis manipulation ini_pose_msg   std_msgs String       A message to take the initial posture      robotis manipulation joint_pose_msg   thormang3_manipulation_module_msgs JointPose       A message to move to the target point in the Joint Space      robotis manipulation kinematics_pose_msg   thormang3_manipulation_module_msgs KinematicsPose       A message to move to the target pose in the Task Space       Published Topics     robotis status   robotis_controller_msgs StatusMsg       A status message of THORMANG3      Services     robotis manipulation get_joint_pose   thormang3_manipulation_module_msgs GetJointPose       A service that reads the pose of specific joint      robotis manipulation get_kinematics_pose   thormang3_manipulation_module_msgs GetKinematicsPose       A service that reads the pose of end effector from a specific kinematics group      thormang3_walking_module   thormang3_walking_module      assets images platform thormang3 thormang3_walking_module_diagram jpg As seen from the above figure  thormang3_walking_module is one of the MotionModules from ROS Framework THROMANG3 can be controlled with Topics and Services Users can designate almost all Step Parameters  thormang3_walking_module_msgs StepData 1  Pattern Generation    thormang3_walking_module includes online walking pattern generator     The pattern is generated from Foot Step Data input          assets images platform thormang3 thormang3_walking_module_algorithm_diagram jpg 2  Balance Algorithm    The balance algorithm is included as shown below  thormang3_walking_module_msgs BalanceParam          assets images platform thormang3 thormang3_walking_module_balance_diagram jpg      Download   Build   Reference    MPC Installation     notice     ROS API      Subscribed Topics     robotis sensor imu imu   sensor_msgs Imu       Current data of the IMU Sensor      Published Topics     robotis status  robotis_controller_msgs StatusMsg       Status message of THORMANG3      Services     robotis walking get_reference_step_data  thormang3_walking_module_msgs GetReferenceStrpData       A service that collects current location of THORMANG3 in the Global from the Walking Module      robotis walking add_step_data  thormang3_walking_module_msgs AddStepDataArray       A service that adds StepData created by the user      robotis walking walking_start  thormang3_walking_module_msgs WalkingStart       A service that commands to start walking      robotis walking is_running  thormang3_walking_module_msgs IsRunning       A service that checks whether THORMANG3 is walking or not      robotis walking set_balance_param  thormang3_walking_module_msgs SetBalanceParam       A service that can set Balance Algorithm parameters      robotis walking remove_existing_step_data  thormang3_walking_module_msgs RemoveExistingStepData       A service that deletes existing StepData      thormang3_head_control_module   thormang3_head_control_module This module is to control the head  This module is included in the Thormang3 Manager as a library      Download   Build   Reference    MPC Installation     notice Reference   Creating new robot manager  notice     ROS API      Subscribed Topics     robotis head_control move_lidar  std_msgs String       The command moves the head in order to obtain Lidar data      robotis head_control move_lidar_with_range  std_msgs Float64       This command scans up and down a given range at the current head position to generate 3D lidar data      robotis head_control set_joint_states  sensor_msgs JointState       The message controls joints that are connected to the head      robotis head_control set_joint_states_time  thormang3_head_control_module_msgs HeadJointPose       The message moves head joints for given time       Published Topics     robotis sensor move_lidar  std_msgs String       This message reports the head movement to the Node which assembles LiDAR data      robotis status  robotis_controller_msgs StatusMsg       The message indicates status of the head_control_module      ati_ft_sensor   ati_ft_sensor This is a library to use ForceTorque Sensor FT Sensor  of ATI Inc in the ROS   The library can load saved Calibration Matrix and Unloaded Voltage from the YAML File   The library does not include functions to communicate with hardwares  It can convert voltage output from the FT sensor to N or Nm      Functions1  ATIForceTorqueSensorTWE Class   cppbool Initialize const stdstring  ft_data_path                 const stdstring  ft_data_key                 const stdstring  ft_frame_id                 const stdstring  ft_raw_publish_name                 const stdstring  ft_scaled_publish_name       arguments        ft_data_path  Location of the YAML file to save Calibration Matrix and Unloaded Voltage       ft_data_key         The key to read data from YAML         Key format used to read YAML looks like  ft_data_key   _calibration_matrix 와 _ft_data_key   _unload         For example  if ft_right_foot_calibration_matrix and ft_right_foot_unload are saved in the YAML  ft_data_key should be ft_right_foot        ft_frame_id  The frame_id to publish sensor outputs       ft_raw_publish_name  The topic name for raw outputs       ft_scaled_publish_name  The topic name for scaled outputs   description  The function that configures variables in the Class according to Arguments   return value  Indicates Initialization success failure result    cppvoid SetScaleFactor double ft_scale_factor       arguments      ft_scale_factor  The gain value for calculating scaled output     Refer to the SetScaleParam function    description  Function sets the scale gain of the FT sensor   return value  void    cppvoid SetNullForceTorque EigenMatrixXd ft_null       arguments      ft_null  Null value for calculating scaled output     Refer to the SetScaleParam function   description  Function sets null value of the FT sensor   return value  void    cppvoid SetScaleParam double ft_scale_factor  EigenMatrixXd ft_null       arguments      ft_scale_factor  The gain value for calculating scaled output     ft_null  Null value when calculating scaled output   description      Function sets Parameter for calculating scaled output     The scaled output can be calculated as below      ft_scaled   ft_scale_factor    ft_raw  ft_null    return value  void    cppvoid SetCurrentVoltageOutput double voltage0  double voltage1  double voltage2  double voltage3  double voltage4  double voltage5       arguments      voltage0  The output voltage of the FT sensor  0     voltage1  The output voltage of the FT sensor  1     voltage2  The output voltage of the FT sensor  2     voltage3  The output voltage of the FT sensor  3     voltage4  The output voltage of the FT sensor  4     voltage5  The output voltage of the FT sensor  5   description  Function sets internal variables for the output voltage of the FT sensors and converts them to force torque    return value  void    cppvoid SetCurrentVoltageOutput EigenMatrixXd _voltage       arguments      voltage  The 6x1 matrix form of output voltage of the FT sensor   description  Function sets internal variables for the output voltage of the FT sensors and converts them to force torque    return value  void    cppEigenMatrixXd GetCurrentForceTorqueRaw        arguments  void   description  Return the most recent Raw Force and Torque of the voltage calculated from the SetCurrentVoltageOutput function    return value  Raw Force   Raw Torque   EigenMatrixXd ft   GetCurrentForceTorqueRaw     force_x   ft coeff 0 0    force_y   ft coeff 1 0    force_z   ft coeff 2 0    torque_x   ft coeff 3 0    torque_y   ft coeff 4 0    torque_z   ft coeff 5 0     cppEigenMatrixXd GetCurrentForceTorqueScaled        arguments  void   description  Return the most recent Scaled Force and Torque of the voltage calculated from the SetCurrentVoltageOutput function    return value  Scaled Force   Scaled Torque   EigenMatrixXd ft   GetCurrentForceTorqueScaled     force_x   ft coeff 0 0    force_y   ft coeff 1 0    force_z   ft coeff 2 0    torque_x   ft coeff 3 0    torque_y   ft coeff 4 0    torque_z   ft coeff 5 0     cppvoid GetCurrentForceTorqueRaw double  _force_x_N    double  _force_y_N    double  _force_z_N                               double  _torque_x_Nm  double  _torque_y_Nm  double  _torque_z_Nm       arguments  The return pointer of Raw Force and Raw Torque   description  Return the most recent Raw Force and Torque of the voltage calculated from the SetCurrentVoltageOutput function    return value  void    cppvoid GetCurrentForceTorqueScaled double  _force_x_N    double  _force_y_N    double  _force_z_N                                  double  _torque_x_Nm  double  _torque_y_Nm  double  _torque_z_Nm       description  Return the most recent Scaled Force and Torque of the voltage calculated from the SetCurrentVoltageOutput function    return value  void    cppvoid SetCurrentVoltageOutputPublishForceTorque double _voltage0  double _voltage1  double _voltage2                                                double _voltage3  double _voltage4  double _voltage5       arguments      voltage0  The output voltage of the FT sensor  0     voltage1  The output voltage of the FT sensor  1     voltage2  The output voltage of the FT sensor  2     voltage3  The output voltage of the FT sensor  3     voltage4  The output voltage of the FT sensor  4     voltage5  The output voltage of the FT sensor  5   description  Function sets internal variables for the output voltage of the FT sensors and converts them to force torque  then publish the converted force torque    return value  void    cppvoid SetCurrentVoltageOutputPublish EigenMatrixXd _voltage       arguments      voltage  The 6x1 matrix form of output voltage of the FT sensor   description  Function sets internal variables for the output voltage of the FT sensors and converts them to force torque  then publish the converted force torque    return value  void     thormang3_feet_ft_module   thormang3_feet_ft_module The sensor module of THORMANG3 that uses ati_ft_sensor library   Acquired sensor values when the robot is hanging on the lift and standing on the ground can be used for the Calibration feature      Download   Build   Reference    MPC Installation     notice     ROS API1  Subscribed Topics     robotis feet_ft ft_calib_command   std_msgs String       FT Calibration Command2  Published Topics     robotis status   robotis_controller_msgs StatusMsg       The status message of THORMANG3     robotis feet_ft both_ft_value   thormang3_feet_ft_module_msgs BothWrench       Both Wrench     robotis sensor ft_right_foot raw   geometry_msgs WrenchStamped       raw output from the force torque sensor on the right foot     robotis sensor ft_right_foot scaled   geometry_msgs WrenchStamped       scaled output from the force torque sensor on the right foot     robotis sensor ft_right_foot raw  geometry_msgs WrenchStamped       raw output from the force torque sensor on the left foot     robotis sensor ft_right_foot scaled  geometry_msgs renchStamped       scaled output from the force torque sensor on the left foot     thormang3_balance_control   thormang3_balance_control Library for using Balance Algorithm of THORMANG3 in ROS  There is two kinds of algorithm      Download   Build   Reference    MPC Installation     notice     Functions and Variables      BalanceLowPassFilter Class   void initialize double control_cycle_sec_  double cut_off_frequency     arguments      control_cycle_sec  control cycle in sec of motion module     cut_off_frequency  cut off frequency for low pass filter description  the function that configures variables in the class according to arguments return value  void   void setCutOffFrequency double cut_off_frequency     arguments      cut off frequency  desired cut off frequency for filtering  If cut_off_frequency is less than 0  filtering is not performed  description  the function for setting cut off frequency return value  void   double getCutOffFrequency void     arguments  void description  the function for getting set cut off frequency return value  current set cut off frequency   double getFilteredOutput double present_raw_value     arguments      present_raw_value  raw value description  the function for filtering and getting its result return value  filtered value       Damping Controller Class   double getFeedBack double present_sensor_output       arguments        present_sensor_output  present sensor output   description  the function for calculating damping control and getting its result   return value  result calculated by damping controller   double desired_      description  desired value for damping controller   double gain_      description  gain for damping controller   double time_constant_sec_      description  time constant for damping controller   double output_      description  result of damping controller   double control_cycle_sec_      description  control cycle in sec of motion module       BalancePDController Class   double getFeedBack double present_sensor_output       arguments        present_sensor_output  present sensor output   description  the function for calculating PD control and getting its result   return value  result calculated by PD controller   double desired_      description  desired value for PD controller   double p_gain_      description  P gain for PD controller   double d_gain_      description  D gain for PD controller       BalanceControlUsingDampingConroller Class   void initialize const int control_cycle_msec       arguments        control_cycle_msec  control cycel of motion module in milliseconds   description  the function that configures variables in the class according to arguments   return value  void   void setGyroBalanceEnable bool enable       arguments        enable  true or false   description  The function that turns on or off the balance algorithm with gyro   return value  void   void setOrientationBalanceEnable bool enable       arguments        enable  true or false   description  The function that turns on or off the balance algorithm with orientation from IMU sensor   return value  void   void setForceTorqueBalanceEnable bool enable       arguments        enable  true or false   description  The function that turns on or off the balance algorithm with force and torque from ft sensor   return value  void   void process int  balance_error  EigenMatrixXd  robot_to_cob_modified  EigenMatrixXd  robot_to_right_foot_modified  EigenMatrixXd  robot_to_left_foot_modified       arguments        balance_error  the one of below values would be returned           BalanceControlErrorNoError   0   There is no error            BalanceControlErrorBalanceLimit   0   The modification value by the balance algorithm is greater than the maximum modification        robot_to_cob_modified  the center of body modification calculated by balance algorithm       robot_to_right_foot_modified  the right foot modification calculated by balance algorithm       robot_to_left_foot_modified  the left_foot of body modification calculated by balance algorithm   description  calculating balance algorithm using desired values and sensor outputs   return value  void   void setDesiredPose const EigenMatrixXd  robot_to_cob  const EigenMatrixXd  robot_to_right_foot  const EigenMatrixXd  robot_to_left_foot       arguments        robot_to_cob  desired pose of center of body with respect to robot s local coordinate       robot_to_right_foot  desired pose of right foot with respect to robot s local coordinate       robot_to_left_foot  desired pose of left foot with respect to robot s local coordinate   description  the function for setting desired pose of right foot  left foot and center of body   return value  void   void setDesiredCOBGyro double gyro_roll  double gyro_pitch       arguments        gyro_roll  desired x directional angular velocity with respect robot s local coordinate       gyro_pitch  desired y directional angular velocity with respect robot s local coordinate   description  the function for setting desired angular velocity   return value  void   void setDesiredCOBOrientation double cob_orientation_roll  double cob_orientation_pitch       arguments        cob_orientation_roll  desired roll angle in radian of robot s local coordinate       cob_orientation_pitch  desired pitch angle in radian of robot s local coordinate   description  the function for setting desired robot s orientation   return value  void   void setDesiredFootForceTorque double r_force_x_N       double r_force_y_N        double r_force_z_N                                double r_torque_roll_Nm  double r_torque_pitch_Nm  double r_torque_yaw_Nm                                double l_force_x_N       double l_force_y_N        double l_force_z_N                                double l_torque_roll_Nm  double l_torque_pitch_Nm  double l_torque_yaw_Nm       arguments        r_force_x_N  desired x directional force on right foot with respect to robot s local coordinate       r_force_y_N  desired y directional force on right foot with respect to robot s local coordinate       r_force_z_N  desired z directional force on right foot with respect to robot s local coordinate       r_torque_roll_Nm  desired x directional torque on right foot with respect to robot s local coordinate       r_torque_pitch_Nm  desired y directional torque on right foot with respect to robot s local coordinate       r_torque_yaw_Nm  desired z directional torque on right foot with respect to robot s local coordinate       l_force_x_N  desired x directional force on left foot with respect to robot s local coordinate       l_force_y_N  desired y directional force on left foot with respect to robot s local coordinate       l_force_z_N  desired z directional force on left foot with respect to robot s local coordinate       l_torque_roll_Nm  desired x directional torque on left foot with respect to robot s local coordinate       l_torque_pitch_Nm  desired x directional torque on left foot with respect to robot s local coordinate       l_torque_yaw_Nm  desired x directional torque on left foot with respect to robot s local coordinate   description  the function for setting desired force in newton and torque in newtonmeter on feet   return value  void   void setCurrentGyroSensorOutput double gyro_roll  double gyro_pitch       arguments      gyro_roll  current x directional angular velocity with respect robot s local coordinate     gyro_pitch  current y directional angular velocity with respect robot s local coordinate   description  the function for setting current angular velocity from IMU sensor   return value    void setCurrentOrientationSensorOutput double cob_orientation_roll  double cob_orientation_pitch       arguments        cob_orientation_roll  current roll angle in radian of robot s local coordinate       cob_orientation_pitch  current pitch angle in radian of robot s local coordinate   description  the function for setting current orientation from IMU sensor   return value  void   void setCurrentFootForceTorqueSensorOutput   double r_force_x_N       double r_force_y_N        double r_force_z_N     double r_torque_roll_Nm  double r_torque_pitch_Nm  double r_torque_yaw_Nm     double l_force_x_N       double l_force_y_N        double l_force_z_N     double l_torque_roll_Nm  double l_torque_pitch_Nm  double l_torque_yaw_Nm         arguments        r_force_x_N  current x directional force on right foot with respect to robot s local coordinate       r_force_y_N  current y directional force on right foot with respect to robot s local coordinate       r_force_z_N  current z directional force on right foot with respect to robot s local coordinate       r_torque_roll_Nm  current x directional torque on right foot with respect to robot s local coordinate       r_torque_pitch_Nm  current y directional torque on right foot with respect to robot s local coordinate       r_torque_yaw_Nm  current z directional torque on right foot with respect to roboti s local coordinate       l_force_x_N  current x directional force on left foot with respect to robot s local coordinate       l_force_y_N  current y directional force on left foot with respect to robot s local coordinate       l_force_z_N  current z directional force on left foot with respect to robot s local coordinate       l_torque_roll_Nm  current x directional torque on left foot with respect to robot s local coordinate       l_torque_pitch_Nm  current x directional torque on left foot with respect to robot s local coordinate       l_torque_yaw_Nm  current x directional torque on left foot with respect to robot s local coordinate   description  the function for setting current force and torque from forcetorque sensor on both feet   return value  void   void setMaximumAdjustment   double cob_x_max_adjustment_m  double cob_y_max_adjustment_m  double cob_z_max_adjustment_m     double cob_roll_max_adjustment_rad  double cob_pitch_max_adjustment_rad  double cob_yaw_max_adjustment_rad     double foot_x_max_adjustment_m  double foot_y_max_adjustment_m  double foot_z_max_adjustment_m     double foot_roll_max_adjustment_rad  double foot_pitch_max_adjustment_rad  double foot_yaw_max_adjustment_rad         arguments        cob_x_max_adjustment_m  the maximum x directinal linear modification of center of body       cob_y_max_adjustment_m  the maximum y directinal linear modification of center of body       cob_z_max_adjustment_m  the maximum z directinal linear modification of center of body       cob_roll_max_adjustment_rad  the maximum x directinal angular modification of center of body       cob_pitch_max_adjustment_rad  the maximum y directinal angular modification of center of body       cob_yaw_max_adjustment_rad  the maximum z directinal angular modification of center of body       foot_x_max_adjustment_m  the maximum x directinal linear modification of foot       foot_y_max_adjustment_m  the maximum y directinal linear modification of foot       foot_z_max_adjustment_m  the maximum z directinal linear modification of foot       foot_roll_max_adjustment_rad  the maximum x directinal angular modification of foot       foot_pitch_max_adjustment_rad  the maximum y directinal angular modification of foot       foot_yaw_max_adjustment_rad  the maximum z directinal angular modification of foot   description  the function for setting maximum modification   return value  void   void setCOBManualAdjustment   double cob_x_adjustment_m  double cob_y_adjustment_m  double cob_z_adjustment_m       arguments        cob_x_adjustment_m  the x offset of center of body       cob_y_adjustment_m  the y offset of center of body       cob_z_adjustment_m  the z offset of center of body   description  the function for setting manual modification of center of body   return value  void   double getCOBManualAdjustmentX        arguments  void   description  the function for getting x directional manual modification of center of body   return value  x directional manual modification of center of body   double getCOBManualAdjustmentY        arguments  void   description  the function for getting y directional manual modification of center of body   return value  y directional manual modification of center of body   double getCOBManualAdjustmentZ        arguments  void   description  the function for getting z directional manual modification of center of body   return value  z directional manual modification of center of body   void setGyroBalanceGainRatio double gyro_balance_gain_ratio       arguments      gyro_balance_gain_ratio  gyro balance gain   description  the function for setting gyro balance gain   return value  void   double getGyroBalanceGainRatio void       arguments  void   description  the function for getting set gyro balance gain   return value  current set gyro balance gain   DampingController foot_roll_angle_ctrl_      description  damping controller for foot using roll angle   DampingController foot_pitch_angle_ctrl_      description  damping controller for foot using pitch angle   DampingController right_foot_force_x_ctrl_      description  damping controller for foot using force x on right foot   DampingController right_foot_force_y_ctrl_      description  damping controller for foot using force y on right foot   DampingController right_foot_force_z_ctrl_      description  damping controller for foot using force z on right foot   DampingController right_foot_torque_roll_ctrl_      description  damping controller for foot using torque x on right foot     DampingController right_foot_torque_pitch_ctrl_      description  damping controller for foot using torque y on right foot     DampingController left_foot_force_x_ctrl_      description  damping controller for foot using force x on left foot   DampingController left_foot_force_y_ctrl_      description  damping controller for foot using force y on left foot     DampingController left_foot_force_z_ctrl_      description  damping controller for foot using force z on left foot     DampingController left_foot_torque_roll_ctrl_      description  damping controller for foot using torque x on left foot     DampingController left_foot_torque_pitch_ctrl_      description  damping controller for foot using torque y on left foot       BalanceControlUsingPDController Class   void initialize const int control_cycle_msec       arguments        control_cycle_msec  control cycel of motion module in milliseconds   description  the function that configures variables in the class according to arguments   return value  void   void setGyroBalanceEnable bool enable       arguments        enable  true or false   description  The function that turns on or off the balance algorithm with gyro   return value  void   void setOrientationBalanceEnable bool enable       arguments        enable  true or false   description  The function that turns on or off the balance algorithm with orientation from IMU sensor   return value  void   void setForceTorqueBalanceEnable bool enable       arguments        enable  true or false   description  The function that turns on or off the balance algorithm with force and torque from ft sensor   return value  void   void process   int  balance_error    EigenMatrixXd  robot_to_cob_modified   EigenMatrixXd  robot_to_right_foot_modified    EigenMatrixXd  robot_to_left_foot_modified       arguments        balance_error  the one of below values would be returned       BalanceControlErrorNoError   0   There is no error        BalanceControlErrorBalanceLimit   0   The modification value by the balance algorithm is greater than the maximum modification        robot_to_cob_modified  the center of body modification calculated by balance algorithm       robot_to_right_foot_modified  the right foot modification calculated by balance algorithm       robot_to_left_foot_modified  the left_foot of body modification calculated by balance algorithm   description  calculating balance algorithm using desired values and sensor outputs   return value  void   void setDesiredPose   const EigenMatrixXd  robot_to_cob    const EigenMatrixXd  robot_to_right_foot    const EigenMatrixXd  robot_to_left_foot       arguments        robot_to_cob  desired pose of center of body with respect to robot s local coordinate       robot_to_right_foot  desired pose of right foot with respect to robot s local coordinate       robot_to_left_foot  desired pose of left foot with respect to robot s local coordinate   description  the function for setting desired pose of right foot  left foot and center of body   return value  void   void setDesiredCOBGyro double gyro_roll  double gyro_pitch       arguments        gyro_roll  desired x directional angular velocity with respect robot s local coordinate       gyro_pitch  desired y directional angular velocity with respect robot s local coordinate   description  the function for setting desired angular velocity   return value  void   void setDesiredCOBOrientation   double cob_orientation_roll  double cob_orientation_pitch       arguments        cob_orientation_roll  desired roll angle in radian of robot s local coordinate       cob_orientation_pitch  desired pitch angle in radian of robot s local coordinate   description  the function for setting desired robot s orientation   return value  void   void setDesiredFootForceTorque   double r_force_x_N       double r_force_y_N        double r_force_z_N   double r_torque_roll_Nm  double r_torque_pitch_Nm  double r_torque_yaw_Nm   double l_force_x_N       double l_force_y_N        double l_force_z_N   double l_torque_roll_Nm  double l_torque_pitch_Nm  double l_torque_yaw_Nm       arguments        r_force_x_N  desired x directional force on right foot with respect to robot s local coordinate       r_force_y_N  desired y directional force on right foot with respect to robot s local coordinate       r_force_z_N  desired z directional force on right foot with respect to robot s local coordinate       r_torque_roll_Nm  desired x directional torque on right foot with respect to robot s local coordinate       r_torque_pitch_Nm  desired y directional torque on right foot with respect to robot s local coordinate       r_torque_yaw_Nm  desired z directional torque on right foot with respect to robot s local coordinate       l_force_x_N  desired x directional force on left foot with respect to robot s local coordinate       l_force_y_N  desired y directional force on left foot with respect to robot s local coordinate       l_force_z_N  desired z directional force on left foot with respect to robot s local coordinate       l_torque_roll_Nm  desired x directional torque on left foot with respect to robot s local coordinate       l_torque_pitch_Nm  desired x directional torque on left foot with respect to robot s local coordinate       l_torque_yaw_Nm  desired x directional torque on left foot with respect to robot s local coordinate   description  the function for setting desired force in newton and torque in newtonmeter on feet   return value  void   void setCurrentGyroSensorOutput double gyro_roll  double gyro_pitch       arguments        gyro_roll  current x directional angular velocity with respect robot s local coordinate       gyro_pitch  current y directional angular velocity with respect robot s local coordinate   description  the function for setting current angular velocity from IMU sensor   return value    void setCurrentOrientationSensorOutput double cob_orientation_roll  double cob_orientation_pitch       arguments        cob_orientation_roll  current roll angle in radian of robot s local coordinate       cob_orientation_pitch  current pitch angle in radian of robot s local coordinate   description  the function for setting current orientation from IMU sensor   return value  void   void setCurrentFootForceTorqueSensorOutput   double r_force_x_N       double r_force_y_N        double r_force_z_N   double r_torque_roll_Nm  double r_torque_pitch_Nm  double r_torque_yaw_Nm   double l_force_x_N       double l_force_y_N        double l_force_z_N   double l_torque_roll_Nm  double l_torque_pitch_Nm  double l_torque_yaw_Nm       arguments        r_force_x_N  current x directional force on right foot with respect to robot s local coordinate       r_force_y_N  current y directional force on right foot with respect to robot s local coordinate       r_force_z_N  current z directional force on right foot with respect to robot s local coordinate       r_torque_roll_Nm  current x directional torque on right foot with respect to robot s local coordinate       r_torque_pitch_Nm  current y directional torque on right foot with respect to robot s local coordinate       r_torque_yaw_Nm  current z directional torque on right foot with respect to robot s local coordinate       l_force_x_N  current x directional force on left foot with respect to robot s local coordinate       l_force_y_N  current y directional force on left foot with respect to robot s local coordinate       l_force_z_N  current z directional force on left foot with respect to robot s local coordinate       l_torque_roll_Nm  current x directional torque on left foot with respect to robot s local coordinate       l_torque_pitch_Nm  current x directional torque on left foot with respect to robot s local coordinate       l_torque_yaw_Nm  current x directional torque on left foot with respect to robot s local coordinate   description  the function for setting current force and torque from forcetorque sensor on both feet   return value  void   void setMaximumAdjustment   double cob_x_max_adjustment_m   double cob_y_max_adjustment_m   double cob_z_max_adjustment_m   double cob_roll_max_adjustment_rad  double cob_pitch_max_adjustment_rad  double cob_yaw_max_adjustment_rad   double foot_x_max_adjustment_m  double foot_y_max_adjustment_m  double foot_z_max_adjustment_m   double foot_roll_max_adjustment_rad  double foot_pitch_max_adjustment_rad  double foot_yaw_max_adjustment_rad       arguments        cob_x_max_adjustment_m  the maximum x directinal linear modification of center of body       cob_y_max_adjustment_m  the maximum y directinal linear modification of center of body       cob_z_max_adjustment_m  the maximum z directinal linear modification of center of body       cob_roll_max_adjustment_rad  the maximum x directinal angular modification of center of body       cob_pitch_max_adjustment_rad  the maximum y directinal angular modification of center of body       cob_yaw_max_adjustment_rad  the maximum z directinal angular modification of center of body       foot_x_max_adjustment_m  the maximum x directinal linear modification of foot       foot_y_max_adjustment_m  the maximum y directinal linear modification of foot       foot_z_max_adjustment_m  the maximum z directinal linear modification of foot       foot_roll_max_adjustment_rad  the maximum x directinal angular modification of foot       foot_pitch_max_adjustment_rad  the maximum y directinal angular modification of foot       foot_yaw_max_adjustment_rad  the maximum z directinal angular modification of foot   description  the function for setting maximum modification   return value  void   void setCOBManualAdjustment double cob_x_adjustment_m  double cob_y_adjustment_m  double cob_z_adjustment_m       arguments        cob_x_adjustment_m  the x offset of center of body       cob_y_adjustment_m  the y offset of center of body       cob_z_adjustment_m  the z offset of center of body   description  the function for setting manual modification of center of body   return value  void   double getCOBManualAdjustmentX        arguments  void   description  the function for getting current set x directional manual modification of center of body   return value  x directional manual modification of center of body   double getCOBManualAdjustmentY        arguments  void   description  the function for getting current set y directional manual modification of center of body   return value  y directional manual modification of center of body   double getCOBManualAdjustmentZ        arguments  void   description  the function for getting current set z directional manual modification of center of body   return value  z directional manual modification of center of body   BalancePDController foot_roll_gyro_ctrl_      description  PD controller for foot using x directional gyro   BalancePDController foot_pitch_gyro_ctrl_      description  PD controller for foot using y directional gyro   BalancePDController foot_roll_angle_ctrl_      description  PD controller for foot using roll angle   BalancePDController right_foot_force_x_ctrl_      description  PD controller for foot using x directional force on right foot   BalancePDController right_foot_force_y_ctrl_      description  PD controller for foot using y directional force on right foot   BalancePDController right_foot_force_z_ctrl_      description  PD controller for foot using z directional force on right foot   BalancePDController right_foot_torque_roll_ctrl_      description  PD controller for foot using x directional torque on right foot   BalancePDController right_foot_torque_pitch_ctrl_      description  PD controller for foot using y directional torque on right foot   BalancePDController left_foot_force_x_ctrl_      description  PD controller for foot using x directional force on left foot   BalancePDController left_foot_force_y_ctrl_      description  PD controller for foot using y directional force on left foot   BalancePDController left_foot_force_z_ctrl_      description  PD controller for foot using z directional force on left foot   BalancePDController left_foot_torque_roll_ctrl_      description  PD controller for foot using x directional torque on left foot   BalancePDController left_foot_torque_pitch_ctrl_      description  PD controller for foot using y directional torque on left foot   BalanceLowPassFilter roll_gyro_lpf_      description  Low Pass Filter for x directional angular velocity from IMU   BalanceLowPassFilter pitch_gyro_lpf_      description  Low Pass Filter for y directional angular velocity from IMU   BalanceLowPassFilter roll_angle_lpf_      description  Low Pass Filter for roll angle from IMU   BalanceLowPassFilter pitch_angle_lpf_      description  Low Pass Filter for pitch angle from IMU   BalanceLowPassFilter right_foot_force_x_lpf_      description  Low Pass Filter for x directional force from forcetorque sensor on right foot   BalanceLowPassFilter right_foot_force_y_lpf_      description  Low Pass Filter for y directional force from forcetorque sensor on right foot   BalanceLowPassFilter right_foot_force_z_lpf_      description  Low Pass Filter for z directional force from forcetorque sensor on right foot   BalanceLowPassFilter right_foot_torque_roll_lpf_      description  Low Pass Filter for x directional torque from forcetorque sensor on right foot   BalanceLowPassFilter right_foot_torque_pitch_lpf_      description  Low Pass Filter for y directional torque from forcetorque sensor on right foot   BalanceLowPassFilter left_foot_force_x_lpf_      description  Low Pass Filter for x directional force from forcetorque sensor on left foot   BalanceLowPassFilter left_foot_force_y_lpf_      description  Low Pass Filter for y directional force from forcetorque sensor on left foot   BalanceLowPassFilter left_foot_force_z_lpf_      description  Low Pass Filter for z directional force from forcetorque sensor on left foot   BalanceLowPassFilter left_foot_torque_roll_lpf_      description  Low Pass Filter for x directional torque from forcetorque sensor on left foot   BalanceLowPassFilter left_foot_torque_pitch_lpf_      description  Low Pass Filter for y directional torque from forcetorque sensor on left foot     imu3dmgx4   imu3dmgx4 This module is for the IMU Sensor MicroStrain 3DMGX425    This module exists in a separated Node  and this module is launched along with the thormang3_manager when executing  launch file of the thormang3_manager   This is the modified version of KumarRobotics imu_3dm_gx4      Download   Build Reference    MPC Installation      ROS API      Published Topics  robotis sensor imu imu   sensor_msgs Imu   Present output of the IMU Sensor    PPC Packages   ppcpackages      thormang3_sensors   thormang3_sensors Thormang3 sensor related package   This package contains sensor related launch files   The package also includes a node for assembling Laserscan LaserScan to PointCloud      Download   Build   Reference    PPC Installation     notice       RunExecute Launch file     roslaunch thormang3_sensors thormang3_sensors launch    thormang3_sensors launch   thormang3_pointcloud launch     scan_to_scan_filter_chain   laser_filters  http  wiki ros org laser_filters    Filter LaserScan topics     laser_scan_assembler   laser_assembler  http  wiki ros org laser_assembler    The service assembles LaserScan     assemble_laser_node  thormang3_sensors   Create PointCloud from Assemble Service   thormang3_realsense launch  Contains Intel RealSense configuration and launch the program    thormang3_web_cam launch  Contains Web Camera configuration and launch the program      ROS API  assemble_laser_node      Subscribed Topics  robotis sensor move_lidar   std_msgs String      Configures start and end time to assemble LaserScan    Set the start time when receiving start message     Set the end time and assemble Pointcloud when receiving end message       Published Topics  robotis sensor assembled_scan   sensor_msgs PointCloud2      Assembled PointCloud      Services Called  robotis sensor service assemble_scan2   laser_assembler AssembleScan2      Get assembled PointCloud from the Service with LaserScan start end parameters      thormang3_simple_demo   thormang3_simple_demo      thormang3_manipulation_demoThormang3 manipulation simple demonstration      Download   Build   Reference    PPC Installation     notice        RunReference  Manipulation Simple Demo from  How to execute Simple Demonstration       ROS API       Subscribed Topics  robotis manipulation_demo command    std_msgs String      The topic to run various Manipulation simple demo commands        Published Topics  robotis base ini_pose   std_msgs String      The topic to take initial posture of the Base Module  robotis enable_ctrl_module   std_msgs String      The topic to set upper body of the robot with the Manipulation Module  robotis manipulation ini_pose_msg   std_msgs String      The topic to take initial posture of the Manipulation Module  robotis manipulation kinematics_pose_msg   thormang3_manipulation_module_msgs KinematicsPose       The topic to take initial posture of the Manipulation Module     thormang3_walking_demoThormang3 Walking simple demonstration      Download   Build   Reference    PPC Installation     notice        Run Reference   Walking Simple Demo of  How to execute Simple Demonstration       ROS API       Subscribed Topics  robotis status   robotis_controller_msgs StatusMsg      Status message of THORMANG3 robotis walking_demo command   std_msgs String      Command for walking simple demo       Published Topics robotis base ini_pose   std_msgs String      The command delivered to the thormang3_base_module to take the initial posture   robotis enable_ctrl_module   std_msgs String      The topic to set lower body of the robot with the Walking Module        Services Called  robotis walking get_reference_step_data   thormang3_walking_module_msgs GetReferenceStrpData      The service obtains current location of THORMANG3 from the Walking Module in the Global space   robotis walking add_step_data   thormang3_walking_module_msgs AddStepDataArray      The service adds StepData created by the user   robotis walking set_balance_param   thormang3_walking_module_msgs SetBalanceParam      The service sets parameters related to the Balance Algorithm     OPC Packages   opcpackages      humanoid_navigation   humanoid_navigation   Reference   http  wiki ros org humanoid_navigation  Source   https  github com AravindaDP humanoid_navigation  Prerequisite Packages   map_server  humanoid_nav_msgs  nav_msgs  sbpl  etc Packages Installation     sudo aptget install roskineticmapserver  sudo aptget install roskinetichumanoidnavmsgs  sudo aptget install roskineticnavmsgs  sudo aptget install roskineticoctomap   sudo aptget install roskineticoctomapmsgs  sudo aptget install roskineticoctomapros  sudo aptget install roskineticoctomapserver    Building and Installing from source   sbpl  https  github com sbpl sbpl  https  github com sbpl sbpl       footstep_plannerThe footstep planner for humanoids or bipedal robots   Reference    http  wiki ros org footstep_planner  http  wiki ros org footstep_planner       RUN     roslaunch footstep_planner thormang3_footstep_planner launch         Configurations config footsteps_thormang3 yaml  Footstep configuration of THORMANG3 config planning_params_thormang3 yaml config planning_params yaml  Configuration of planner parameters     gridmap_2d  Reference    http  wiki ros org gridmap_2d  http  wiki ros org gridmap_2d      humanoid_localization  Reference    http  wiki ros org humanoid_localization  http  wiki ros org humanoid_localization      thormang3_demo   thormang3_demo The package for THORMANG3 demonstration   Initial posture  walking  manipulation  head control are available with this package   Feet ft calibration  Pointcloud conversion are available with this package      assets images platform thormang3 thormang3_037 png      Download   Build   Reference    OPC Installation     notice     Run  Execute the launch file       roslaunch thormang3_demo thormang3_demo launch    Configuration file used in  thormang3_demo  config demo_config yaml       id_joint  id and joint name tables    module_list  Module name displayed on each joint in the demo program     module_button  Modules to configure with the manager  index  module name        ROS API        Subscribed Topics    robotis feet_ft both_ft_value   thormang3_feet_ft_module_msgs BothWrench      FT value for calibration  robotis status   robotis_controller_msgs StatusMsg      Status message of THORMANG3  robotis present_joint_ctrl_modules   robotis_controller_msgs JointCtrlModule      Joint modules that are currently in use  robotis present_joint_states   sensor_msgs JointState  http  docs ros org api sensor_msgs html msg JointState html      Degree of each joint Unit in Degree   robotis demo pose   geometry_msgs Pose  http  docs ros org api geometry_msgs html msg Pose html      Pose that are used for Walking and Manipulation      Published Topics  robotis set_joint_ctrl_modules   robotis_controller_msgs JointCtrlModule      Configuring each joint modules  configure for each joint  Not recommended to use   robotis enable_ctrl_module   std_msgs String  http  docs ros org api std_msgs html msg String html      Configure modules to control  robotis base ini_pose   std_msgs String  http  docs ros org api std_msgs html msg String html      Initial posture of Thormang3  robotis feet_ft ft_calib_command   std_msgs String  http  docs ros org api std_msgs html msg String html      FT Calibration related command  robotis head_control move_lidar   std_msgs String  http  docs ros org api std_msgs html msg String html      Head movement command for assembling LaserScan   robotis head_control set_joint_states   sensor_msgs JointState  http  docs ros org api sensor_msgs html msg JointState html      Control for separate head joints  robotis demo foot_step_marker   visualization_msgs MarkerArray  http  docs ros org api visualization_msgs html msg MarkerArray html      Visualized footstep messages created by  footstep_planner  http  wiki ros org action fullsearch footstep_planner   robotis manipulation ini_pose_msg   std_msgs String  http  docs ros org api std_msgs html msg String html      Initial posture command for Manipulation  robotis manipulation joint_pose_msg   thormang3_manipulation_module_msgs JointPose      Control the robot in Joint Space  robotis manipulation kinematics_pose_msg   thormang3_manipulation_module_msgs KinematicsPose      Control the robot in Task Space  robotis thormang3_foot_step_generator walking_command   thormang3_foot_step_generator FootStepCommand      Create footsteps from the foot_step_generator with the walking parameter and direction   robotis thormang3_foot_step_generator footsteps_2d   thormang3_foot_step_generator Step2DArray      2D step array to create footsteps for THORMANG3  robotis thormang3_foot_step_generator balance_command   std_msgs Bool  http  docs ros org api std_msgs html msg Bool html      Balance On Off of THORMANG3     Services Called    robotis get_present_joint_ctrl_modules   robotis_controller_msgs GetJointModule      Obtains module that is currently in use for each joint   plan_footsteps   humanoid_nav_msgs PlanFootsteps  http  docs ros org api humanoid_nav_msgs html srv PlanFootsteps html      Creates footsteps from map and footstep_planner  robotis manipulation get_joint_pose   thormang3_manipulation_module_msgs GetJointPose      Obtains joint pose of selected manipulation group   robotis manipulation get_kinematics_pose   thormang3_manipulation_module_msgs GetKinematicsPose      Obtains end effector pose of selected manipulation group      Parameters    demo_config  string  default  config demo_config yaml     Configuration file path of the demo program      thormang3_action_script_player   thormang3_action_script_player The Node that can play a action script   The default action script is in the thormang3_action_script_player script action_script yaml   The user can specify the path of the action script file via rosparameter   The thormang3_action_script_player is used with  thormang3_action_module  thormang3_action_module  and  ros_mpg321_player  https  github com ROBOTISGIT ROBOTISUtility         Download   Build   Reference    OPC Installation     notice     Run  thormang3_action_script_player runs with thormang3_demo     Reference   Remote Control GUI Demo    If user wants to run thormang3_action_script_player separately  user can run it from OPC with the following command      rosrun thormang3_action_script_player thormang3_action_script_player        How to write action scriptThe default action script file is in the thormang3_action_script_player script action_script yaml   The action script has the following structure      script2      cmd1 cmd_name play   cmd_arg 2     cmd2 cmd_name sleep  cmd_arg 1800     cmd3 cmd_name mp3    cmd_arg  home robotis Music thormang_mp3 hello_kor mp3     cmd4 cmd_name sleep  cmd_arg 1100     cmd5 cmd_name mp3    cmd_arg  home robotis Music thormang_mp3 i_am_thormang_kor mp3   The action script is a list of cmd   and scripts are executed in order of cmd    cmd  has two parameters  one is cmd_name  and the othrer is cmd_arg   There are below four cmd_name in the action script       play    Play cmd_name means to execute action  User can specify the page number to execute as cmd_arg       mp3    mp3 cmd_name means to play sound file  User can specify the sound file path to play as cmd_arg     Because  ros_mpg321_player  https  github com ROBOTISGIT ROBOTISUtility  is excuted in PPC  the sound file has to be in PPC       wait    wait cmd_name means to wait until finish of action playing  There is no cmd_arg for wait cmd_name       sleep    sleep cmd_name means to wait for a certain amount of time  User can specify the wait time as cmd_arg        ROS API        Subscribed Topics    robotis demo action_index   std_msgs Int32      The action script number to play         Parameters    action_script_file_path  string  default  thormang3_action_script_player script action_script yaml     The location of action script file        thormang3_foot_step_generator   thormang3_foot_step_generator The Node that can create a basic Step Data   Based on the simple Parameter from Topic  the package creates StepData and transmit it to  thormang3_walking_module           Download   Build   Reference    OPC Installation     notice     Run    Reference   How to operate walking module      ROS API        Subscribed Topics    robotis status   robotis_controller_msgsStatus      Status message of THORMANG3  robotis thormang3_foot_step_generator walking_command   thormang3_foot_step_generatorFootStepCommand      The topic includes walking type and step length     robotis thormang3_foot_step_generator footsteps_2d   thormang3_foot_step_generatorStep2DArray      Planar walking step data contains x  y  theta and moving_foot_flag         Services Called    robotis walking get_reference_step_data   thormang3_walking_module_msgsGetReferenceStepData      The service obtains current location of THORMANG3 in the Global space from the Walking Module     robotis walking add_step_data   thormang3_walking_module_msgsAddStepDataArray      The service adds StepData created by the User     robotis walking set_balance_param   thormang3_walking_module_msgsSetBalanceParam      The service initiates walking     robotis walking is_running   thormang3_walking_module_msgsIsRunning      The service checks whether the robot is walking or not        ROS Message Type     FootStepCommand msg    Step2D msg    Step2DArray msg      thormang3_offset_tuner_client   thormang3_offset_tuner_client The GUI Node that can adjust offset of THORMANG3 It is used with the  thormang3_offset_tuner_server       Download   Build   Reference    OPC Installation     notice     Run       rosrun thormang3_offset_tuner_client thormang3_offset_tuner_client        ROS API      Published Topics  robotis offset_tuner joint_offset_data   thormang3_offset_tuner_msgsJointOffsetData JointOffsetData msg         The topic transfers Joint offset     robotis offset_tuner torque_enable   thormang3_offset_tuner_msgsJointTorqueOnOffArray JointTorqueOnOffArray msg        The topic executes Torque on off command     robotis offset_tuner command   std_msgsString  http  docs ros org api std_msgs html msg String html        The topic transfers other commands save  initial posture  etc           Services  robotis offset_tuner get_present_joint_offset_data   thormang3_offset_tuner_msgsGetPresentJointOffsetData GetPresentJointOffsetData srv      The service obtains saved joint offset      Parameters     ROBOTISTHORMANGMPC thormang3_manager config offset yaml      Saved offset value       Common Packages   commonpackages      thormang3_description   thormang3_description Thormang3 URDF Model Make a URDF Model   URDFROS Wiki  http  wiki ros org urdf  Package   doc  document for Thormang3 joint   link information   launch  launch file to execute Rviz   meshes  STL files of Thormang3 s each parts   src  ROS node for Rviz to publish imaginary gripper joint   urdf  urdf   xacro files for Thormang3 model     thormang3_gazebo   thormang3_gazebo Thormang3 Gazebo Simulation Gazebo with ROS   Connect to ROS  http  gazebosim org tutorials cat connect_ros  Package   config  ros controller for gazebo   launch  launch files to execute gazebo simulation   worlds  simulation environments    Tools Packages   toolspackages      thormang3_offset_tuner_server   thormang3_offset_tuner_server THORMANG3 Offset Tuner Node   Data related to the Offset can be Tuned  Loaded and Saved    It is used with the  thormang3_offset_tuner_client         Download   Build   Reference    MPC Installation     notice     Run  Execute the launch file        roslaunch thormang3_offset_tuner_server thormang3_offset_tuner_server launch        ROS API      Subscribed Topics  robotis base send_tra   std_msgs String      The topic informs the start and end of trajectory following     robotis offset_tuner joint_offset_data   thormang3_offset_tuner_msgs JointOffsetData      The topic updates joint offset related parameters     robotis offset_tuner torque_enable   thormang3_offset_tuner_msgs JointTorqueOnOffArray      The topic transfers Torque enable disable command for joints   robotis offset_tuner command   std_msgs String  http  docs ros org api std_msgs html msg String html      The topic transfers command to the  thormang3_offset_tuner_client       save      Saves current offset to yaml     ini_pose  Take the initial posture for offset tuning       Services robotis offset_tuner get_present_joint_offset_data   thormang3_offset_tuner_msgs GetPresentJointOffsetData      The service obtains current offset data from the  thormang3_offset_tuner_client         thormang3_action_editor   thormang3_action_editor THORMANG3 Action Editor Node   The action file can be edited by this action editor    The action file will be used with  thormang3_action_module  thormang3_action_module       Action FileThe action file is in the thormang3_action_module data folder  The action file is a file that contains THORMANG3’s poses and time data   The data is written that the positions of dynamixels which converted from original resolution to 4095 resolution And the action file is binaries file you cannot view its contents directly  User can view its contents with thormang3_action_editor   ROBOTIS currently supplies a default action file with the source code  They are located in thormang3_action_module data directory     The action file contains 256 pages  Each page can store up to 7 stages  or steps  of action data  In the default action file provided not all pages are used  User can add user s own action by using of the empty pages         Download   Build   Reference    MPC Installation     notice     Run  Execute the launch file on the MPC      roslaunch thormang3_action_editor thormang3_action_editor launch        UI     assets images platform thormang3 thormang3_038 jpg    Page number   Page number is the listed page number  If user wants to create a new action poses  user can use any empty page      Page title   We d like to recommend to user that they use a page title  if they will make a new action on an empty page      Current position   This is the current position of dynamixels which converted from original resolution to 4095 resolution  This data is represented by STP7 in thormang3_action_editor  Sometimes the position may read as  in thormang3_action_editor  This means position of the dynamixel is not being read  or its torque is off      If user turn a dynamixel off  user cannot get current position reading until user turn it back on     User can turn off any or all dynamixels  This is very convenient to make robot poses rather than entering position values     For example  if user wants to make a new robot pose  user simply turns any dynamixels off  makes the robot pose  and turn the dynamixels back on at that robot pose  Once turning on  user will get the pose values      Steps or stages   Each page can be stored up to 7 steps  from STP0 to STP6  However  some actions may be required more than 7 stages to perform completely  It can be resolved by simply using multiple pages and link them with Next      Next   Next indicates whether or not action continues at a different page  To continue actions  just list the page number where action is to be continued  Number 0 indicates that action does not continue onto another page  default value   Linking page does not have to the in numerical order allowing you to link from one page to any other page      Play Count   Play Count is the number of times the action of the page is to be played      Exit   There may be times when an action is stopped  In this case  the robot may be in an unstable position  Exit is much like Next  so Exit should be linked to a page where THORMANG3 can return to a stable pose if Exit is 0  it means that there is  no link to exit page linked  default value       Tip  When calling an action requires multiple pages  we strongly suggest that user call that action from the starting page  For example clap starts at page 7 and ends at page 8  This means you should call page 7 when calling clap  Calling the page 8 may cause the robot to perform abnormally      STP7   STP7 column is the current position of the dynamixels which converted to 4095 resolution from its original resolution   means that torque has been released      PauseTime   PauseTime is the pause for motion playback for step STP x       Time x 8msec     Time is the time period for THORMANG3 to complete step STP x   Each time unit account for 8ms of time     It is strongly advised that when user tests user’s own newlycreated or edited actions  there should be small incremental changes in position  speed time  and pause values for the sake of THORMANG3 s stability        The Contents of The Default Action FileThe below table shows the contents of the default action file     page number   page title   brief description of page                               number of pages              1        walki_init   initial standing pose                                          1                2           hello     greeting                                                       1                3         thank_you   Thank you                                                      1                4            yes      yes                                                            1                5             no      no                                                             1                6         fighting    fighting                                                       1                7           clap      clap                                                           2                9          S_H_RE     ready for shaking hands                                        1               10            S_H      shaking hands                                                  1               11          S_H_END    move to initialpose fram ready pose for shaking hands          1               12         scanning    looking around                                                 1               13         ceremony    ceremony                                                       1              Basic Command of Action EditorAfter typing help  the commend list will appear as shown below        assets images platform thormang3 thormang3_039 jpg    exit   exits the program      re   refreshes the screen      b   moves to the previous page      n   moves to the next page      page  index    moves to the  index  page  For example typing page 5 outputs data from page 5 on screen      list   outputs a list of pages      new   initializes current page by clearing all actuator position data      copy  index    copies data from page  index  to current page  For example if you are on page 5 and want to copy page 9 then type copy 9      set  value    sets position value on chosen actuator  For example If you want ID19  head pan  to have a value of 512 then using the keyboard s directional keys place the cursor on ID19 and type set 512      save   saves any changes you ve made  the saved motion file  motion_4096 bin can be found at thormang3_action_module data      play   plays motion s  of current page      name   changes the name of the current page  You can view the name of the page at the top right portion of the screen  For example  page 2 is titled hello to change the name type name and press the ENTER key  name will appear at the bottom of the screen  Input the desired name for the page  good for instance  and press the ENTER key again      i   inserts data from STP7 to STP0  Moves data from STP x  to STP x   1  if any      i  index    inserts data from STP7 to STP index   Moves data from STP index  to STP index   1  if any      m  index   index2    moves data from  index2  to  index       d  index    deletes data from STP index   Moves data from STP index  to STP index  1       on off   turns on off torque from all Dynamixels      on off  index1   index2   index3  …    turns torque on off from ID index1  ID index2  ID index3   For example off 20 releases torque from ID20  Notice that STP7 for ID20 will read     Typing on 20 turns torque from ID20 on again and the screen outputs the current position data of ID20        Example Action editing with thormang3_action_editor1  Run the thormang3_action_editor on MPC  2  Find the page where the walking_init page is by typing list           assets images platform thormang3 thormang3_040 jpg 3  Exit the list and go to any blank page by typing page  x  for example  page 15           assets images platform thormang3 thormang3_041 jpg 4  And copy the page 1 to page  x               assets images platform thormang3 thormang3_042 jpg 5  Go to walking_init pose by typing play           assets images platform thormang3 thormang3_043 jpg 6  Turn off the torque of ID 2  4 and 8 by typing off 2 4 8           assets images platform thormang3 thormang3_044 jpg 7  After getting the desired pose turn torque on again by simple typing on  And insert the pose to step 1 by typing i 1           assets images platform thormang3 thormang3_045 jpg 8  Edit Pause Time  Time of STP1 and Page Step as shown below            assets images platform thormang3 thormang3_046 png 9  Type play and check the THORMANG3 s action      THORMANG msgs Package   thormangmsgspackage      thormang3_action_module_msgs   thormang3_action_module_msgs The followings are Messages and Services used for the  thormang3_action_module   ROS Message Type   StartAction msg  ROS Service Type   IsRunning srv      thormang3_feet_ft_module_msgs   thormang3_feet_ft_module_msgs Message used in the  thormang3_feet_ft_module   ROS Message Type   BothWrench msg      thormang3_manipulation_module_msgs   thormang3_manipulation_module_msgs Messages and Services used in the  thormang3_manipulation_module  ROS Message Type    JointPose msg     KinematicsPose msg  ROS Service Type    GetJointPose srv     GetKinematicsPose srv      thormang3_walking_module_msgs   thormang3_walking_module_msgs Messages and Services used in the  thormang3_walking_module   ROS Message Type    BalanceParam msg     DampingBalanceParam msg     JointFeedBackGain msg     PoseXYZRPY msg     PoseZRPY msg     RobotPose msg     StepData msg     StepPositionData msg     StepTimeData msg     WalkingJointStatesStamped msg  ROS Service Type    AddStepDataArray srv     GetReferenceStepData srv     IsRunning srv     RemoveExistingStepData srv     SetBalanceParam srv     SetDampingBalanceParam srv     SetJointFeedBackGain srv     StartWalking srv      thormang3_head_control_module_msgs   thormang3_head_control_module_msgs Messages used in the  thormang3_head_control_module  ROS Message Type   HeadJointPose msg      thormang3_offset_tuner_msgs   thormang3_offset_tuner_msgs The following are Messages and Service used for the thormang3_offset_tuner_server and the  thormang3_offset_tuner_client   ROS Message Type    JointOffsetData msg     JointOffsetPositionData msg     JointTorqueOnOff msg     JointTorqueOnOffArray msg  ROS Service Type    GetPresentJointOffsetData srv  MPC Installation   docs en platform thormang3 getting_started  mpcinstallation PPC Installation   docs en platform thormang3 getting_started  ppcinstallation OPC Installation   docs en platform thormang3 getting_started  opcinstallation std_msgs Int32  http  docs ros org api std_msgs html msg Int32 html std_msgs String  http  docs ros org api std_msgs html msg String html thormang3_action_module_msgs StartAction  https  github com ROBOTISGIT ROBOTISDocuments wiki StartAction msg StartAction msg  https  github com ROBOTISGIT ROBOTISDocuments wiki StartAction msg robotis_controller_msgs StatusMsg  https  github com ROBOTISGIT ROBOTISDocuments wiki StatusMsg msg thormang3_action_module_msgs IsRunning  https  github com ROBOTISGIT ROBOTISDocuments wiki  thormang3_action_module_msgs IsRunning srv IsRunning srv  https  github com ROBOTISGIT ROBOTISDocuments wiki  thormang3_action_module_msgs IsRunning srv sensor_msgs PointCloud2  http  docs ros org api sensor_msgs html msg PointCloud2 html laser_assembler AssembleScan2  http  docs ros org api laser_assembler html srv AssembleScans2 html How to execute Simple Demonstration   docs en platform thormang3 thormang3_operation  simpledemo How to operate walking module   docs en platform thormang3 thormang3_ros_packages  thormang3_walking_module thormang3_offset_tuner_client   docs en platform thormang3 thormang3_ros_packages  thormang3offsettunerclient thormang3_manipulation_module_msgs KinematicsPose  https  github com ROBOTISGIT ROBOTISDocuments wiki KinematicsPose msg KinematicsPose msg  https  github com ROBOTISGIT ROBOTISDocuments wiki KinematicsPose msg thormang3_walking_module_msgs GetReferenceStrpData  https  github com ROBOTISGIT ROBOTISDocuments wiki GetReferenceStepData srv GetReferenceStepData srv  https  github com ROBOTISGIT ROBOTISDocuments wiki GetReferenceStepData srv thormang3_walking_module_msgs AddStepDataArray  https  github com ROBOTISGIT ROBOTISDocuments wiki AddStepDataArray srv AddStepDataArray srv  https  github com ROBOTISGIT ROBOTISDocuments wiki AddStepDataArray srv thormang3_walking_module_msgs SetBalanceParam  https  github com ROBOTISGIT ROBOTISDocuments wiki SetBalanceParam srv SetBalanceParam srv  https  github com ROBOTISGIT ROBOTISDocuments wiki SetBalanceParam srv thormang3_walking_module_msgsIsRunning  https  github com ROBOTISGIT ROBOTISDocuments wiki IsRunning srv thormang3_feet_ft_module_msgs BothWrench  https  github com ROBOTISGIT ROBOTISDocuments wiki BothWrench msg BothWrench msg  https  github com ROBOTISGIT ROBOTISDocuments wiki BothWrench msg robotis_controller_msgs JointCtrlModule  https  github com ROBOTISGIT ROBOTISDocuments wiki JointCtrlModule msg thormang3_manipulation_module_msgs JointPose  https  github com ROBOTISGIT ROBOTISDocuments wiki JointPose msg JointPose msg  https  github com ROBOTISGIT ROBOTISDocuments wiki JointPose msg thormang3_foot_step_generator FootStepCommand  https  github com ROBOTISGIT ROBOTISDocuments wiki FootStepCommand msg thormang3_foot_step_generator Step2DArray  https  github com ROBOTISGIT ROBOTISDocuments wiki Step2DArray msg robotis_controller_msgs GetJointModule  https  github com ROBOTISGIT ROBOTISDocuments wiki GetJointModule srv thormang3_manipulation_module_msgs GetJointPose  https  github com ROBOTISGIT ROBOTISDocuments wiki GetJointPose srv GetJointPose srv  https  github com ROBOTISGIT ROBOTISDocuments wiki GetJointPose srv thormang3_manipulation_module_msgs GetKinematicsPose  https  github com ROBOTISGIT ROBOTISDocuments wiki GetKinematicsPose srv GetKinematicsPose srv  https  github com ROBOTISGIT ROBOTISDocuments wiki GetKinematicsPose srv thormang3_walking_module_msgsGetReferenceStepData  https  github com ROBOTISGIT ROBOTISDocuments wiki GetReferenceStepData srv Remote Control GUI Demo    docs en platform thormang3 thormang3_operation  guiprogram thormang3_walking_module   docs en platform thormang3 thormang3_ros_packages  thormang3_walking_module thormang3_action_module   docs en platform thormang3 thormang3_ros_packages  thormang3_action_module thormang3_feet_ft_module   docs en platform thormang3 thormang3_ros_packages  thormang3_feet_ft_module thormang3_manipulation_module   docs en platform thormang3 thormang3_ros_packages  thormang3_manipulation_module thormang3_head_control_module   docs en platform thormang3 thormang3_ros_packages  thormang3_head_control_module thormang3_offset_tuner_server   docs en platform thormang3 thormang3_ros_packages  thormang3offsettunerserver robotis_controller_msgsStatus  https  github com ROBOTISGIT ROBOTISDocuments wiki StatusMsg msg FootStepCommand msg  https  github com ROBOTISGIT ROBOTISDocuments wiki FootStepCommand msg Step2D msg  https  github com ROBOTISGIT ROBOTISDocuments wiki Step2D msg Step2DArray msg  https  github com ROBOTISGIT ROBOTISDocuments wiki Step2DArray msg thormang3_offset_tuner_msgsJointOffsetData JointOffsetData msg  https  github com ROBOTISGIT ROBOTISDocuments wiki JointOffsetData msg thormang3_offset_tuner_msgs JointOffsetData  https  github com ROBOTISGIT ROBOTISDocuments wiki JointOffsetData msg JointOffsetData msg  https  github com ROBOTISGIT ROBOTISDocuments wiki JointOffsetData msg JointOffsetPositionData msg  https  github com ROBOTISGIT ROBOTISDocuments wiki JointOffsetPositionData msg thormang3_offset_tuner_msgsJointTorqueOnOffArray JointTorqueOnOffArray msg  https  github com ROBOTISGIT ROBOTISDocuments wiki JointTorqueOnOffArray msg thormang3_offset_tuner_msgs JointTorqueOnOffArray  https  github com ROBOTISGIT ROBOTISDocuments wiki JointTorqueOnOffArray msg JointTorqueOnOffArray msg  https  github com ROBOTISGIT ROBOTISDocuments wiki JointTorqueOnOffArray msg thormang3_offset_tuner_msgsGetPresentJointOffsetData GetPresentJointOffsetData srv  https  github com ROBOTISGIT ROBOTISDocuments wiki GetPresentJointOffsetData srv thormang3_offset_tuner_msgs GetPresentJointOffsetData  https  github com ROBOTISGIT ROBOTISDocuments wiki GetPresentJointOffsetData srv GetPresentJointOffsetData srv  https  github com ROBOTISGIT ROBOTISDocuments wiki GetPresentJointOffsetData srv BalanceParam msg  https  github com ROBOTISGIT ROBOTISDocuments wiki BalanceParam msg DampingBalanceParam msg  https  github com ROBOTISGIT ROBOTISDocuments wiki DampingBalanceParam msg JointFeedBackGain msg  https  github com ROBOTISGIT ROBOTISDocuments wiki JointFeedBackGain msg PoseXYZRPY msg  https  github com ROBOTISGIT ROBOTISDocuments wiki PoseXYZRPY msg PoseZRPY msg  https  github com ROBOTISGIT ROBOTISDocuments wiki PoseZRPY msg RobotPose msg  https  github com ROBOTISGIT ROBOTISDocuments wiki RobotPose msg StepData msg  https  github com ROBOTISGIT ROBOTISDocuments wiki StepData msg StepPositionData msg  https  github com ROBOTISGIT ROBOTISDocuments wiki StepPositionData msg StepTimeData msg  https  github com ROBOTISGIT ROBOTISDocuments wiki StepTimeData msg WalkingJointStatesStamped msg  https  github com ROBOTISGIT ROBOTISDocuments wiki WalkingJointStatesStamped msg RemoveExistingStepData srv  https  github com ROBOTISGIT ROBOTISDocuments wiki RemoveExistingStepData srv SetDampingBalanceParam srv  https  github com ROBOTISGIT ROBOTISDocuments wiki SetDampingBalanceParam srv SetJointFeedBackGain srv  https  github com ROBOTISGIT ROBOTISDocuments wiki SetJointFeedBackGain srv StartWalking srv  https  github com ROBOTISGIT ROBOTISDocuments wiki StartWalking srv HeadJointPose msg  https  github com ROBOTISGIT ROBOTISDocuments wiki HeadJointPose msg JointTorqueOnOff msg  https  github com ROBOTISGIT ROBOTISDocuments wiki JointTorqueOnOff msg",
      "url": "http://0.0.0.0:4000/docs/en/platform/thormang3/thormang3_ros_packages/"
      } ,
  
  
      "docs-en-platform-turtlebot3-appendix-dynamixel":  {
      "title": "TurtleBot3",
      "content"	 : "Appendix  DYNAMIXELOverviewDYNAMIXEL XSeries is a new lineup of high performance networked actuator module  which has been widely used for building various types of robots with reliability and expandability Two different types of DYNAMIXEL is adopted in TurtleBot3 Burger and Waffle as they have different requirements DYNAMIXEL XSeries shares its design  therefore  users can replace actuators depend on applications   Basic Feature          Improved Torque with Compact Size      Enhanced Durability and Expandability      Hollow Back Case Minimizes Cable Stress  3wayrouting       Direct Screw Assembly to the Case  without Nut Insert       Improved Heat Sink Featuring Aluminum Case        Various Control Functions          6 Operating Modes      CurrentBased Torque Control  4096 steps  2 69mA step       Profile Control for Smooth Motion Planning      Trajectory Data and Moving Status  InPosition  Following Error  etc        Energy Saving  Reduced Current from 100mA to 40mA       Note  Control Functions may vary by modelsSpecifications            Items      XL430W250  for Burger       XM430W210  for Waffle                   Microcontroller  lttd colspan 2 gt ST CORTEXM3  STM32F103C8 @ 72Mhz  32bit                                                                      lt td gt                            Position Sensor  lttd colspan 2 gt Contactless Absolute Encoder  12bit  360°                                                                 lt td gt                            Motor      Cored Motor      Coreless Motor              Baud Rate      9600 bps   4 5 Mbps                     Control Modes      Velocity  Position  Extended Position  PWM      Velocity  Position  Extended Position  PWM  Current  Currentbase Position              Gear Ratio      258 5  1      212 6  1              Stall Torque      1 0 N m  @ 9V  1A       2 7 N m  @ 11 1V  2 1A                      1 4 N m  @ 11 1V  1 3A       3 0 N m  @ 12V  2 3A                      1 5 N m  @ 12V  1 4A       3 7 N m  @ 14 8V  2 7A               No Load Speed      47rpm  @ 9V       70rpm  @ 11 1V                      57rpm  @ 11 1V       77rpm  @ 12V                      61rpm  @ 12V       95rpm  @ 14 8V               Communication      TTL Level Multi Drop Bus      TTL Level   RS485 Multi Drop Bus              Material      Engineering Plastic      Full Metal Gear  Metal Body  Engineering Plastic              Standby Current      52mA      40mA      More information for actuators can be found at below ROBOTIS eManual links       XL430W250        XM430W210  ",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/appendix_dynamixel/"
      } ,
  
  
      "docs-en-platform-turtlebot3-appendix-lds-01":  {
      "title": "TurtleBot3",
      "content"	 : "Appendix  LDS01Overview360 Laser Distance Sensor LDS01 is used for both TurtleBot3 Burger and TurtleBot3 Waffle  The LDS01 LASER Distance Sensor  is a sensor which collects a set of distance data and send them to the host for the Simultaneous Localization and Mapping  SLAM  technique SpecificationsGeneral Specifications            Items      Specifications                  Operating supply voltage      5V DC ±5%              Light source      Semiconductor Laser Diode λ 785nm               LASER safety      IEC608251 Class 1              Current consumption      400mA or less  Rush current 1A               Detection distance      120mm   3 500mm              Interface      3 3V USART  230 400 bps  42bytes per 6 degrees  Full Duplex option              Ambient Light Resistance      10 000 lux or less              Sampling Rate      1 8kHz              Dimensions      69 5 W  X 95 5 D  X 39 5 H mm              Mass      Under 125g      Measurement Performance Specifications            Items      Specifications                  Distance Range      120   3 500mm              Distance Accuracy  120mm   499mm       ±15mm              Distance Accuracy 500mm   3 500mm       ±5 0%              Distance Precision 120mm   499mm       ±10mm              Distance Precision 500mm   3 500mm       ±3 5%              Scan Rate      300±10 rpm              Angular Range      360°              Angular Resolution      1°      Detail Specification DocumentThe following link contains information about basic performance  measurement performance  mechanism layout  optical path  data information  pin description and commands Here is the detail specification document  pdfNote  The 360 Laser Distance Sensor LDS01 for TurtleBot3 uses molex 510210800 and 530480810 instead of the basic housing and connector    for LDS  Molex 510210800  http  www molex com pdm_docs sd 510210800_sd pdf    for USB2LDS  Molex 530480810   http  www molex com pdm_docs sd 530480810_sd pdf LDS for TurtleBot3The 360 Laser Distance Sensor LDS01 is used for both TurtleBot3 Burger and TurtleBot3 Waffle Introduction VideoROS Hector SLAM demo using only a 360 Laser Distance Sensor LDS01 made by HLDS  HitachiLG Data Storage  ROS Gmapping and Cartographer SLAM demo using TurtleBot3 and 360 Laser Distance Sensor LDS01 User GuideWe are offering ROS package for LSD  The hls_lfcd_lds_driver package provides a driver for HLS HitachiLG Sensor  LFCD LDS Laser Distance Sensor  Note  Due to firmware update  after buy it on Oct  2017   the sensor is running directly when power in on Installation  sudo aptget install roskinetichlslfcdldsdriverSet Permission for HLSLFCD LDS  sudo chmod a rw  dev ttyUSB0Run hlds_laser_publisher Node  roslaunch hls_lfcd_lds_driver hlds_laser launchRun hlds_laser_publisher Node with RViz  roslaunch hls_lfcd_lds_driver view_hlds_laser launch",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/appendix_lds_01/"
      } ,
  
  
      "docs-en-platform-turtlebot3-appendix-opencr1-0":  {
      "title": "TurtleBot3",
      "content"	 : "Appendix  OpenCR1 0OverviewOpenCR1 0 is a main controller board of the TurtleBot3  OpenCR1 0 Opensource Control module for ROS  is developed for ROS embedded systems to provide completely opensource hardware and software  Everything about the board Schematics  PCB Gerber  BOM and the firmware source code for the TurtleBot3 are free to distribute under opensource licenses for users and the ROS community The STM32F7 series is a main chip inside the OpenCR1 0 board which is based on a very powerful ARM CortexM7 with floating point unit  The development environment for OpenCR1 0 is wide open from Arduino IDE and Scratch for young students to traditional firmware development for the expert OpenCR1 0 provides digital and analog input output pins that can interface with extension board or various sensors  Also  OpenCR1 0 features various communication interfaces USB for connecting to PC  UART  SPI  I2C  CAN for other embedded devices OpenCR1 0 can provide a best solution when using with a SBC  It supports 12V  5V  3 3V power outputs for SBCs and sensors  It also supports hot swap power inputs between battery and SMPS OpenCR1 0 will be the best solution for implementing your embedded control design Specification            Items      Specifications                  Microcontroller      STM32F746ZGT6   32bit ARM Cortex®M7 with  FPU  216MHz  462DMIPS               Sensors      Gyroscope 3Axis  Accelerometer 3Axis  Magnetometer 3Axis  MPU9250               Programmer      ARM Cortex 10pin JTAG SWD connector                     USB Device Firmware Upgrade  DFU                      Serial              Extension pins      32 pins  L 14  R 18   Arduino connectivity                     Sensor module x 4 pins                     Extension connector x 18 pins              Communication circuits      USB  MicroB USB connector USB 2 0 Host Peripheral OTG                      TTL  B3BEHA   Dynamixel                      RS485  B4BEHA   Dynamixel                      UART x 2  20010WS04                      CAN  20010WS04               LEDs and buttons      LD2  red green   USB communication                     User LED x 4  LD3  red   LD4  green   LD5  blue                      User button  x 2              Powers      External input source                     5 V  USB VBUS   724 V  Battery or SMPS                      Default battery  LIPO 11 1V 1 800mAh 19 98Wh                     Default SMPS 12V 5A                     External output source                     12V@1A SMW25002   5V@4A 526702A   3 3V@800mA 20010WS02                      External battery Port for RTC  Real Time Clock   Molex 530470210                      Power LED LD1  red  3 3 V power on                      Reset button x 1  for power reset of board                      Power on off switch x 1              Dimensions      105 W  X 75 D  mm              Mass      60g        Hot swap power switch between shore power 12V  5A SMPS  and mobile power battery  from OpenCR1 0 board enables UPS Uninterrupted Power Supply  feature User GuideRun serial_node package  rosrun rosserial_python serial_node py __name turtlebot3_core _port  dev ttyACM0 _baud 115200Testing  rostopic echo  imu  header    seq 179    stamp      secs 1486448047      nsecs 147523921    frame_id imu_link  orientation    x 0 0165222994983    y 0 0212152898312    z 0 276503056288    w 0 960632443428  orientation_covariance  0 0024999999441206455  0 0  0 0  0 0  0 0024999999441206455  0 0  0 0  0 0  0 0024999999441206455   angular_velocity    x 2 0    y 1 0    z 1 0  angular_velocity_covariance  0 019999999552965164  0 0  0 0  0 0  0 019999999552965164  0 0  0 0  0 0  0 019999999552965164   linear_acceleration    x 528 0    y 295 0    z 16648 0  linear_acceleration_covariance  0 03999999910593033  0 0  0 0  0 0  0 03999999910593033  0 0  0 0  0 0  0 03999999910593033   Open Source SoftwareYou can modify the downloaded source code and share it with your friends   OpenCR1 0 Software https  github com ROBOTISGIT OpenCROpen Source HardwareIf you want to manufacture your own OpenCR1 0  you can download necessary files such as PCB Gerber  BOM  When the board is ready firmware source code can be burned into the MCU   OpenCR1 0 Hardware https  github com ROBOTISGIT OpenCRHardwareWiki Site for More Information  OpenCR1 0 Wiki https  github com ROBOTISGIT OpenCR wiki",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/appendix_opencr1_0/"
      } ,
  
  
      "docs-en-platform-turtlebot3-appendix-opensource":  {
      "title": "TurtleBot3",
      "content"	 : "Appendix  OpenSourceSoftware   TurtleBot3 Software   https  github com ROBOTISGIT turtlebot3  https  github com ROBOTISGIT turtlebot3_simulations  https  github com ROBOTISGIT turtlebot3_applications      https  github com ROBOTISGIT turtlebot3_msgs     OpenCR1 0 Firmware   TurtleBot3 Burger  Waffle and Friends      https  github com ROBOTISGIT OpenCR     Reference Software for TurtleBot3   https  github com turtlebot  https  github com ROBOTISGIT DynamixelSDK  https  github com ROBOTISGIT dynamixelworkbench  https  github com ROBOTISGIT hls_lfcd_lds_driverHardware   Circuit and PCB Gerber of OpenCR1 0       https  github com ROBOTISGIT OpenCRHardware     TurtleBot3 Hardware   TurtleBot3 Burger Model https  goo gl SZRdMd  TurtleBot3 Waffle Model https  goo gl wCDvVI  TurtleBot3 OpenManipulator Chain Model https  goo gl xgxh2G  TurtleBot3 Segway Model https  goo gl rbmqLB  TurtleBot3 Conveyor Modelhttps  goo gl HSSqp7  TurtleBot3 Monster Modelhttps  goo gl oW8UXY  TurtleBot3 Tank Model https  goo gl M722Ff  TurtleBot3 Omni Model https  goo gl 2LBJik  TurtleBot3 Mecanum Model https  goo gl 3aTdg9  TurtleBot3 Bike Model https  goo gl JMntH1  TurtleBot3 Road Train Model https  goo gl fsH5L2  TurtleBot3 Real TurtleBot Modelhttps  goo gl wtcHxE      TurtleBot3 Carrier Modelhttps  goo gl bXzBTJ     OpenManiapulator Hardware   OpenManiapulator Chain Modelhttps  goo gl Wv3KON  OpenManiapulator SCARA Modelhttps  goo gl oVsK8m",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/appendix_opensource/"
      } ,
  
  
      "docs-en-platform-turtlebot3-appendix-realsense":  {
      "title": "TurtleBot3",
      "content"	 : "Appendix  RealSense™OverviewIntel® RealSense™ is a platform for implementing gesturebased humancomputer interaction techniques  It consists of series of consumer grade 3D cameras together with an easy to use machine perception library  The Intel® RealSense™ R200 camera is a USB 3 0 device that can provide color  depth  and infrared video streams  The TurtleBot3 Waffle model adopts Intel® RealSense™ R200 to enable 3D SLAM and navigation  and it is possible to apply various applications such as gesture recognition  object recognition and scene recognition based on 3D depth information obtained using RealSense™’s innovative Active Stereo Technology SpecificationsTechnical Specifications            Items      Specifications                  RGB Video Resolution      1920 x 1280  2M              IR Depth Resolution      640 x 480  VGA              Laser Projector      Class 1 IR Laser Projector  IEC 6082512007 Edition 2               Frame Rate      30 fps  RGB   60 fps  IR depth               FOV  FieldofView       77°  RGB   70°  IR depth   Diagonal Field of View              Range      0 3m   4 0m              Operating Supply Voltage      5V  via USB port               USB Port      USB 3 0              Dimensions      101 56mm length x 9 55mm height x 3 8mm width              Mass      Under 35g      Minimum System Requirements            Items      Specifications                  Processors      4th Generation and future Intel® Core™ processors              Disk Storage      1GB              Memory      2GB              Interface      USB 3 0                     Ubuntu 14 04 and 16 04 LTS  GCC 4 9 toolchain               Operating System      Windows 8 1 and Windows 10  Visual Studio 2015 Update 2               for SDK      Mac OS X 10 7   Clang toolchain                      Ostro      Here is the detail specification document Intel® RealSense™ DatasheetIntel® RealSense™ R200 for TurtleBot3The Intel® RealSense™ R200 is applied on TurtleBot3 Waffle Introduction VideoThe TurtleBot3 Waffle uses Intel® RealSense™ Camera R200 as a default vision sensor  Check this video out that shows how Intel® RealSense™ Camera R200 can be used in TurtleBot3 Waffle User GuideIntel® RealSense™ packages enable the use of Intel® RealSense™ R200  F200  SR300 and ZR300 cameras with ROS  Below table describes packages required to operate Intel® RealSense™  You will be guided to install these packaged in the next section             Package      Description                  librealsense      Underlying library driver for communicating with Intel® RealSense™ camera              realsense_camera      ROS Intel® RealSense™ camera node for publishing camera      InstallationWarning  There are installation prerequisites for the Intel® RealSense™ package installation in http  wiki ros org librealsense TurtleBot  The following commands will install relevant Intel® RealSense™ packages on your ROS system   sudo aptget install linuxheadersgeneric  sudo aptget install roskineticlibrealsense  sudo aptget install roskineticrealsensecameraRun realsense_camera Node TurtleBot  Run the following command  roslaunch realsense_camera r200_nodelet_default launchWhile the realsense_camera node is running  you can view various data from Intel® RealSense™ by launching rqt_image_view  Remote PC  Run the following command  rqt_image_viewOnce the gui application is appeared on the screen  you can select data topic name related to Intel® RealSense™ from drop down menu at the top of the application  Optional  To Try as the Example Video Shows TurtleBot  Input ctrl   c to quit the previously run camera node  then run other realsense_camera node  roslaunch realsense_camera r200_nodelet_rgbd launch TurtleBot  Run turtlebot3_bringup node to get datas for doing SLAM  roslaunch turtlebot3_bringup turtlebot3_robot launch Remote PC  Run turtlebot3_slam node to do SLAM  roslaunch turtlebot3_slam turtlebot3_slam launch Remote PC  Run RViz  rosrun rviz rviz d  rospack find turtlebot3_slam  rviz turtlebot3_slam rviz Remote PC  Click Panels  Views to open the view window Remote PC  Click TopDownOrtho  rviz  and change it into XYOrbit  rviz  Remote PC  Click add  By topic and find the PointCloud2 type  points topic in  camera depth  then click it Remote PC  Click PointCloud2 type topic on the left window  then change Color Transformer from Intensity to AxisColor  This will show the depth of each points by color description  Remote PC  Click add  By topic and find the Image type  image_color topic in  camera rgb  then click it  This will show the view of the rgb cameraReferences  Intel® RealSense™ Datasheet https  software intel com sites default files managed d7 a9 realsensecamerar200productdatasheet pdf  Data ranges https  software intel com enus articles intelrealsensedataranges  Intel® RealSense™ SDK https  software intel com enus intelrealsensesdk  Purchase https  click intel com realsense html",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/appendix_realsense/"
      } ,
  
  
      "docs-en-platform-turtlebot3-applications":  {
      "title": "TurtleBot3",
      "content"	 : "ApplicationsThis chapter shows some demos using Turtlebot3 In order to implement these demos  you have to install the turtlebot3_applications package Note  Turtlebot3 has been tested on Ubuntu 16 04 and ROS Kinetic Kame Tip  The terminal application can be found with the Ubuntu search icon on the top left corner of the screen  Shortcut key for terminal is CtrlAltT  Remote PC  Go to ROS source directory   home  catkin_ws src  and clone the turtlebot3_applications repository   cd   catkin_ws src  git clone https  github com ROBOTISGIT turtlebot3_applications git Remote PC  catkin_make to install the new package   cd   catkin_ws  amp amp catkin_makeTurtleBot Follower DemoNote  The follower demo was implemented only using a 360 Laser Distance Sensor LDS01  a classification algorithm is used based on previous fitting with samples of person and obstacles positions to take actions  It follows someone in front of the robot within a 50 centimeter range and 140 degrees Note  Running the follower demo in an area with obstacles may not work well  Therefore  it is recommended to run the demo in an open area without obstacles  TurtleBot  In order to run the demo  parameter in LIDAR launch file has to be modified  In the below example  Pluma is used to edit the launch file  In the param tag with frame_id as a name  replace base_scan to odom and save the file as shown in the below images   pluma   catkin_ws src turtlebot3 turtlebot3_bringup launch turtlebot3_lidar launchNote  Turtlebot Follower Demo requires scikitlearn  NumPy and ScyPy packages  Remote PC  Install scikitlearn  NumPy and ScyPy packages with below commands   sudo aptget install pythonpip  sudo pip install U scikitlearn numpy scipy  sudo pip install upgrade pip Remote PC  When installation is completed  run roscore on the remote pc with below command   roscore TurtleBot  Launch the Turtlebot3_bringup  roslaunch turtlebot3_bringup turtlebot3_robot launch Remote PC  Move to turtlebot3_follower source directory  cd   catkin_ws src turtlebot3_applications turtlebot3_follower src Remote PC  Launch turtlebot3_follow_filter with below command   roslaunch turtlebot3_follow_filter turtlebot3_follow_filter launch Remote PC  Launch turtlebot3_follower with below command   rosrun turtlebot3_follower follower pyTurtleBot Panorama Demo Using Raspberry Pi Camera ModuleNote  The turtlebot3_panorama demo uses pano_ros for taking snapshots and stitching them together to create panoramic image Note  Panorama demo requires to install Raspicam package  Instructions for installing this package can be found at https  github com UbiquityRobotics raspicam_nodeNote  Panorama demo requires to install OpenCV and cvbridge packages  Instructions for installing OpenCV can be found at http  docs opencv org 2 4 doc tutorials introduction linux_install linux_install html TurtleBot  Launch the Raspberry Pi cam V2  roslaunch raspicam_node camerav2_1280x960 launch Remote PC  Launch Panorama with below command   roslaunch turtlebot3_panorama panorama launch Remote PC  To start the panorama demo  please enter below command   rosservice call turtlebot3_panorama take_pano 0 360 0 30 0 0 3Parameters that can be sent to the rosservice to get a panoramic image are      mode for taking the pictures           0  snap amprotate  i e  rotate  stop  snapshot  rotate  stop  snapshot  …       1  continuous  i e  keep rotating while taking snapshots       2  stop taking pictures and create panoramic image        total angle of panoramic image  in degrees  angle interval  in degrees  when creating the panoramic image in snap amprotate mode  time interval  in seconds  otherwise  rotating velocity  in radians s  Remote PC  To view the result image  please enter below command   rqt_image_view image  turtlebot3_panorama panoramaAutomatic Docking TODO ",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/applications/"
      } ,
  
  
      "docs-en-platform-turtlebot3-autonomous-driving":  {
      "title": "TurtleBot3",
      "content"	 : "Autonomous DrivingNote  Turtlebot3 has been tested on Ubuntu 16 04 and ROS Kinetic Kame We are currently doing several projects related with the keywords Autonomous Driving and TurtleBot3sTurtleBot3 AutoIn the video  TurtleBot3 gets its eye by attaching a  40 Raspberry Pi Camera and adopts open source from MIT DuckieTown engineering to track the lane and soon  In January  2018   official autonomous driving package for turtlebot3 will be released Join in AutoRaceAutoRace is a competition for autonomous driving robot platforms  To provide various conditions for robot application development  the game gives as less structural regulation as possible  Entire contents are opened in software  source codes for referee system  wise and hardware  stp   dwg files of game map  wise Whole robots and even the referee system in the field is run by ROS  so it would support to make many kinds of contents further Get opened source of what is participated in each competitions AutoRace  RBIZ Challenge 2017      Details of track map and referee system  with sources provided                   track map  https  github com ROBOTISGIT autorace_track                    referee system  https  github com ROBOTISGIT autorace_referee                  Participants sources              Place      Team      Source link                  1      RealRiceThief      https  github com KoG8 Turtlebot_RealRiceThief              2      IronHeart      https  github com kijongGil Ironheart              3      Robit      https  github com ROBITGIT turtlebot3_autoRace_2017              4      Loading      https  github com Kihoon0716 self_driving_turtlebot3              5      RunHoney      https  github com hyunoklee turtlebot3_RBIZ              6      Sherlotics      https  github com minbaekkim turtlebot_autorace              7      FastAndFurious      https  github com kts006 deu_racer              8      BonoBono      https  github com Gaeul BonobonoTurtlebot              9      BeginAgain      https  github com yhna beginagain              10      Hanzo      https  github com DeokYun autorace              11      Codis      will be released soon              12      Zero      https  github com dongwan123 zero_turtlebot_competition              13      CanDynamix      https  github com candynamix can_dynamix              14      Cena      retire              15      TogetherChaChaCha      retire        VideosOfficial Teaser  1Official Teaser  2Official Final VideoVideo  Team RealRiceThief  1st Place Video  Team Sherlotics  Introduction video ",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/autonomous_driving/"
      } ,
  
  
      "docs-en-platform-turtlebot3-bringup":  {
      "title": "TurtleBot3",
      "content"	 : "BringupNote  This instruction was tested on Ubuntu 16 04 and ROS Kinetic Kame Warning  This instruction is intended to be run on the remote PC  If you are following the instruction on TurtleBot  please do NOT run roscore command Warning  Make sure that IP address on each device is set correctly Warning  When the battery voltage is lower than 11V  the buzzer alarm will continuously sound and actuators will be disabled  The battery must be recharged when the buzzer alarm sounds Note  Before start bringup TurtleBot3  We recommend you add export command to bashrc depend on your TurtleBot3 burger or waffle   gedit    bashrc  source    bashrcBringup TurtleBot3Note  The terminal application can be found with the Ubuntu search icon on the top left corner of the screen  Shortcut key for terminal is CtrlAltT  Remote PC  Run roscore   roscoreTurtleBot3 Burger TurtleBot  Bring up basic packages to start TurtleBot3 applications   roslaunch turtlebot3_bringup turtlebot3_robot launchTip  If you want to launch Lidar sensor and core separately  please use below commands   roslaunch turtlebot3_bringup turtlebot3_lidar launch  roslaunch turtlebot3_bringup turtlebot3_core launchNote  If lost sync with device error message is displayed on the terminal window  the sensor device of TurtleBot3 might not be securely connected  Remote PC  Run RViz  export TURTLEBOT3_MODEL burger  roslaunch turtlebot3_bringup turtlebot3_model launchTurtleBot3 Waffle TurtleBot  Bring up basic packages to start TurtleBot3 applications   roslaunch turtlebot3_bringup turtlebot3_robot launchTip  If you want to launch Lidar sensor  Intel® RealSense™ R200 and core separately  please use below commands   roslaunch turtlebot3_bringup turtlebot3_lidar launch  roslaunch turtlebot3_bringup turtlebot3_realsense launch  roslaunch turtlebot3_bringup turtlebot3_core launchNote  If lost sync with device error message is displayed on the terminal window  sensor devices of the TurtleBot3 might not be securely connected  Remote PC  Run RViz  export TURTLEBOT3_MODEL waffle  roslaunch turtlebot3_bringup turtlebot3_model launchIn the next chapter  you will be able to test TurtleBot3 with various teleoperation methods ",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/bringup/"
      } ,
  
  
      "docs-en-platform-turtlebot3-contact-us":  {
      "title": "TurtleBot3",
      "content"	 : "Contact USAbout Open RoboticsOpen Robotics is an independent nonprofit organization founded by members of the global robotics community  The mission of Open Robotics is to support the development  distribution  and adoption of open source software for use in robotics research  education  and product development   Address  170 S Whisman Rd  Building D  Suite A  Mountain View  CA 94041  USA  EMail  turtlebot@osrfoundation orgAbout ROBOTISROBOTIS was derived from a simple response to the question  What is a Robot  Thus  ROBOTIS   ROBOT IS…There are many answers to this question  but we strive to develop and apply products that would impact our daily lives and make robots more personal rather than an intelligent appliance  Imaginations can become reality through personal robots US Office  Address 26228 Enterprise Ct Lake Forest  CA 92630  USA  Tel  19493770377  Fax  19492425112  Web http  en robotis com   EMail america@robotis comChina Office  Address Room 1103  Building B  Jiajing Tiancheng  Chaoyang District   100102  Beijing  China  Tel  861057267179  Web http  cn robotis com   EMail china@robotis comJapan Office  Address BIZ SMART 8F 1 Chome106 Kajichō  Chiyodaku  Tōkyōto  Tel  81343303660  Web http  jp robotis com   EMail japan@robotis comKorea Office  Address 1505  Gasan Digital1ro 145  Ace High End Tower 3   Geumchungu  Seoul  South Korea  Tel 827086712609  Fax 827082301336  Web http  wwww robotis com   EMail ost@robotis comAbout OST  Open Source Team   Members  Ashe Kim  Daniel Seon  Darby Lim  Hancheol Cho  Jason Jin  Leon Jung  M  Y  Will Son  Yoonseok Pyo  Alumni  Christopher Tatsch  Yoshihiro Shibata  Supporter  JangHo Kim  Jinwook Kim  Woosik Yang  OROCA  Collaboration Team  Open Robotics  Intel  OROCA  Onshape  OSUWe are Open Source Team in ROBOTIS HQ  With open source hardwares and softwares  our robot friends are hoping to enrich our lives  We mainly develop and support Dynamixel SDK  OpenManipulator  OpenCM  OpenCR and OpenAutonomousCar Our favorite platform is ROS    We are delighted to be in charge of developing TurtleBot3  the official reference platform for ROS  and in the future we will be the team that can support you to get closer to your robot dreams   GitHub  https  github com ROBOTISGIT  EMail  ost@robotis com",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/contact_us/"
      } ,
  
  
      "docs-en-platform-turtlebot3-faq":  {
      "title": "TurtleBot3",
      "content"	 : "FAQHow to download the STL files of TurtleBot3You can download it in the following way We released the TurtleBot3 Friends hardware design file at the link below http  turtlebot3 robotis com en latest friends htmlSo  you can download the STL files directly from each Onshape address as shown in the following figures   Sign in   If you do not have an ID  you have to create one    Click the toggle tab manager  A menu will appear on the left side of the browser    Click the Parts folder  Rightclick on the icon of the file you want to download   Click the Export…  Finally  you can download the output file type you want Intel® Joule™ USBC port is not recognized on Windows 10Some users have reported that the USBC port is not recognized on Windows 10 when they were trying to update BIOS Please check below link that describes the solution that worked out Thanks for rknlhrqy and VRAORESEARCH    https  discourse ros org t turtlebot3successfullyuploadalternativeubuntudesktop1604tojoule 2224  https  communities intel com thread 109766Can I charge the battery when the battery is connected to Turtlebot3 Charging and discharging the battery at the same is NOT recommended and this may void the warranty of the product  If Turtlebot3 needs to be turned on while charging replacing battery  please follow below procedure  Connect SMPS 12V 5A to OpenCR http  www robotisshopen com  act shop_en goods_view ampGS 1366 ampGC GD0B0102   Disconnect the depleted battery from OpenCR  Connect the depleted battery to battery charger or replace the depleted battery with a fully charged battery  Connect the fully charged battery to OpenCR  Disconnect SMPS 12V 5A from OpenCRIntel® Joule™ freezes while booting installationIf BIOS firmware is not properly installed  this might happen  Please burn the BIOS firmware 193 release version again   Turn off the Joule   Proceed BIOS firmware  193 update https  software intel com enus flashingthebiosonjoule  using file from the below link  Make sure that you see the message in the red box Download BIOS Firmware  193  https  downloadmirror intel com 26206 eng joulefirmware20170219193public zip",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/faq/"
      } ,
  
  
      "docs-en-platform-turtlebot3-features":  {
      "title": "TurtleBot3",
      "content"	 : "FeaturesWorld’s Most Popular ROS PlatformTurtleBot is the most popular open source robot for education and research  The new generation TurtleBot3 is a small  low cost  fully programmable  ROS based mobile robot  It is intended to be used for education  research  hobby and product prototyping Affordable CostTurtleBot was developed to meet the costconscious needs of schools  laboratories and companies  TurtleBot3 is the most affordable robot among the SLAMable mobile robots equipped with a 360 ampdeg Laser Distance Sensor LDS01 Small SizeThe dimension of TurtleBot3 Burger is only 138mm x 178mm x 192mm  L x W x H   Its size is about 1 4 of the size of the predecessor  Imagine keeping TurtleBot3 in your backpack and develop your program and test it anywhere you go ROS StandardThe TurtleBot brand is managed by Open Robotics  which develops and maintains ROS  Nowadays  ROS has become the goto platform for all the roboticists around the world  TurtleBot can be integrated with existing ROSbased robot components  but TurtleBot3 can be an affordable platform for whom want to get started learning ROS ExtensibilityTurtleBot3 encourages users to customize its mechanical structure with some alternative options open source embedded board  as a control board   computer and sensors  Turtlebot3 Burger is a twowheeled differential drive type platform but it is able to be structurally and mechanically customized in many ways Cars  Bikes  Trailers and so on  Extend your ideas beyond imagination with various SBC  sensors and motors on a scalable structure Modular Actuator for Mobile RobotTurtleBot3 is able to get a precise spatial data by using 2 DYNAMIXELs in the wheel joints  DYNAMIXEL XM series can be operated by one of 6 operating modes XL series 4 operating modes  Velocity control mode for wheels  Torque control mode or Position control mode for joint  etc  DYNAMIXEL can be used even to make a mobile manipulator which is light but can be precisely controlled with velocity  torque and position control  DYNAMIXEL is a core component that makes TurtleBot3 perfect  It is easy to assemble  maintain  replace and reconfigure Open Control Board for ROSThe control board is opensourced in hardware wise and in software wise for ROS communication  The open source control board OpenCR1 0 is powerful enough to control not only DYNAMIXELs but also ROBOTIS sensors that are frequently being used for basic recognition tasks in cost effective way  Various sensors such as Touch sensor  Infrared sensor  Color sensor and a handful more are available  The OpenCR1 0 has an IMU sensor inside the board so that it can enhance precise control for countless applications  The board has 3 3V  5V  12V power supplies to reinforce the available computer device lineups Strong Sensor LineupsTurtleBot3 Burger uses enhanced 360° LiDAR  9Axis Inertial Measurement Unit and precise encoder for your research and development  TurtleBot3 Waffle is equipped with an identical 360° LiDAR as well but additionally proposes a powerful Intel® RealSense™ with the recognition SDK  This will be the best hardware solution for making a mobile robot Open SourceThe hardware  firmware and software of TurtleBot3 are open source which means that users are welcomed to download  modify and share source codes  All components of TurtleBot3 are manufactured with injection molded plastic to achieve low cost  however  the 3D CAD data is also available for 3D printing The 3D CAD data is released via Onshape which is a fullcloud 3D CAD editor  Users can get an access with a web browser on desktop PC  laptop and even portable devices  Onshape allows to draw 3D models and to assemble them with colleagues Besides  for the users who want to make OpenCR1 0 board by themselves  all details of the OpenCR1 0 board such as schematics  PCB gerber files  BOM and firmware source code are fully opened under the opensource licenses for users and ROS community You can modify downloaded source code and hardware to share it with your friends ",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/features/"
      } ,
  
  
      "docs-en-platform-turtlebot3-friends":  {
      "title": "TurtleBot3",
      "content"	 : "FriendsIn the video  watch how TurtleBot3 can be assembled and reassembled with a few additional parts  The waffle plate which is the biggest part among TurtleBot3 components can be assembled in various sizes and shapes  thanks to its diverse holes for bolts and nuts With this openended component  handful of TurtleBot3 friends with various characteristics could be built  You can create a totally new robot that is never seen before TurtleBot3 Friends List  TurtleBot3 Friends Car  TurtleBot3 Friends OpenManipulator Chain  TurtleBot3 Friends Segway  TurtleBot3 Friends Conveyor  TurtleBot3 Friends Monster  TurtleBot3 Friends Tank  TurtleBot3 Friends Omni  TurtleBot3 Friends Mecanum  TurtleBot3 Friends Bike  TurtleBot3 Friends Road Train  TurtleBot3 Friends Real TurtleBot  TurtleBot3 Friends CarrierGet source codes and make friends  Go to Examples → turtlebot3 → turtlebot3_friends Note  Any suggestions and ideas for TurtleBot3 Friends Project are always welcomed  Tell us about your creative TurtleBot3 Friends  We can introduce your friend to the world through this wiki page   EMail  ost@robotis comTurtleBot3 Friends Car  Type RC Car  Features About 12 gear ratio  differential gears want to make Car be in the Formula E   Components Two Dynamixel X 430 Series  One for steering  one for driving   an OpenCR1 0 Board  a RC100 Remote Controller with BT410 masterslave Bluetooth modules  TurtleBot3 Chassis and Battery  OLLO plastic frames   Hardware Due to the complex hardware configuration  it will be released as a later improved version     Software Examples → turtlebot3 → turtlebot3_friends → turtlebot3_car  VideoTurtleBot3 Friends OpenManipulator Chain  Type Manipulator 4 DOF   1 Gripper  Features Compatible with TurtleBot3 Waffle and it has linear gripper for pick and place   Components Four Dynamixel X 430 Series  Four for joints  one for gripper   an OpenCR1 0 Board  3D printed chassis   BOM Please refer to the OpenManipulator Wiki  Hardware https  goo gl xgxh2G  TB3 Waffle   OpenManipulator Chain   Hardware https  goo gl Wv3KON  OpenManipulator Chain   Software https  github com ROBOTISGIT open_manipulator  We are preparing for OpenCR Example   VideoTurtleBot3 Friends Segway  Type Segway robot  Features Balancing with only two DYNAMIXEL by applying PID controller   Components Two Dynamixel X 430 Series  All for balancing   an OpenCR1 0 Board  TurtleBot3 Chassis and Battery  3D printed chassis   BOM https  goo gl XPgJkZ  Hardware https  goo gl rbmqLB  Software Examples → turtlebot3 → turtlebot3_friends → turtlebot3_segway  VideoTurtleBot3 Friends Conveyor  Type 4 Wheel parallel translation vehicle  Features 4 Joints and 4 wheels will become a futuristic technology on transportation society by overcoming fuelconsuming mechanics   Components Eight Dynamixel X 430 Series  Four for steering  four for driving   an OpenCR1 0 Board  a RC100 Remote Controller with BT410 masterslave Bluetooth modules  TurtleBot3 Chassis and Battery  3D printed chassis   BOM https  goo gl XPgJkZ  Hardware https  goo gl HSSqp7  Software Examples → turtlebot3 → turtlebot3_friends → turtlebot3_conveyor  VideoTurtleBot3 Friends Monster  Type 4WD Car  Features 4 Big wheels let it be strong in the rough terrain or even a big difference of elevation   Components Four Dynamixel X 430 Series  All for driving   an OpenCR1 0 Board  a RC100 Remote Controller with BT410 masterslave Bluetooth modules  TurtleBot3 Chassis and Battery  3D printed chassis   BOM https  goo gl XPgJkZ  Hardware https  goo gl oW8UXY  Software Examples → turtlebot3 → turtlebot3_friends → turtlebot3_monster  VideoTurtleBot3 Friends Tank  Type Caterpillar  Features Caterpillar units which are connected and assembled on sprocket wheels make it be strong in the rough terrain   Components Two Dynamixel X 430 Series  All for driving   an OpenCR1 0 Board  a RC100 Remote Controller with BT410 masterslave Bluetooth modules  TurtleBot3 Chassis and Battery  Caterpillar Unit  3D printed chassis   BOM https  goo gl XPgJkZ  Hardware https  goo gl M722Ff  Software Examples → turtlebot3 → turtlebot3_friends → turtlebot3_tank  VideoTurtleBot3 Friends Omni  Type Omni wheel  Features Omni wheels have additional discs around the circumference make it laterally driveable   Components Three Dynamixel X 430 Series  All for driving   an OpenCR1 0 Board  a RC100 Remote Controller with BT410 masterslave Bluetooth modules  TurtleBot3 Chassis and Battery  3D printed chassis   BOM https  goo gl XPgJkZ  Hardware https  goo gl 2LBJik  Software Examples → turtlebot3 → turtlebot3_friends → turtlebot3_omni  VideoTurtleBot3 Friends Mecanum  Type Mecanum wheel  Features Mecanum wheels have additional discs around the circumference make it laterally driveable   Components Four Dynamixel X 430 Series  All for driving   an OpenCR1 0 Board  a RC100 Remote Controller with BT410 masterslave Bluetooth modules  TurtleBot3 Chassis and Battery  3D printed chassis   BOM https  goo gl XPgJkZ  Hardware https  goo gl 3aTdg9  Software Examples → turtlebot3 → turtlebot3_friends → turtlebot3_mechanum  Video See in the video TurtleBot3 Friends Omni above TurtleBot3 Friends Bike  Type 3DOF Motorcycle  Features Cute 3wheeled bikey reveals its existence on the Car film as a brother of the Car   Components Three Dynamixel X 430 Series  One for steering  two for driving   an OpenCR1 0 Board  a RC100 Remote Controller with BT410 masterslave Bluetooth modules  TurtleBot3 Chassis and Battery  3D printed chassis   BOM https  goo gl XPgJkZ  Hardware https  goo gl JMntH1  Software Examples → turtlebot3 → turtlebot3_friends → turtlebot3_bike  Video See in the videos TurtleBot3 Friends Car and TurtleBot3 Friends monster above TurtleBot3 Friends Road Train  Type Road train  Features Road train can connect vehicles and it can serve various things    Components Two Dynamixel XM430 Series  two for driving   an OpenCR1 0 Board  a RC100 Remote Controller with BT410 masterslave Bluetooth modules  TurtleBot3 Chassis and Battery  3D printed chassis   BOM https  goo gl XPgJkZ  Hardware https  goo gl fsH5L2  Software Examples → turtlebot3 → turtlebot3_friends → turtlebot3_road_train  VideoTurtleBot3 Friends Real TurtleBot  Type 8DOF legged robot  a k a  Real TurtleBot   Features A real TurtleBot will make most of the fanpics in the turtlebot society    Components Ten Dynamixel X 430 Series  Four for leg joint  another four for shoulder joint  two for head   an OpenCR1 0 Board  a RC100 Remote Controller with BT410 masterslave Bluetooth modules  TurtleBot3 Chassis and Battery  3D printed chassis   BOM https  goo gl XPgJkZ  Hardware https  goo gl wtcHxE  Software Examples → turtlebot3 → turtlebot3_friends → turtlebot3_realturtlebot  VideoTurtleBot3 Friends Carrier  Type 2 Wheel mobile based platform as service robot  Features 2 wheeled mobile platform will serve whatever you wants   Components A TurtleBot3 Waffle  6 supports for 4th layer  another 6 supports for 5th layer construction  extra Waffle Plates in each layers  customized 3D printed wheel and ball caster   BOM https  goo gl XPgJkZ  Hardware https  goo gl bXzBTJ  Software Examples → turtlebot3 → turtlebot3_waffle → turtlebot3_waffle  Video",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/friends/"
      } ,
  
  
      "docs-en-platform-turtlebot3-hardware-setup":  {
      "title": "TurtleBot3",
      "content"	 : "Hardware SetupMain ComponentsPart ListTurtleBot3 has two different models Burger and Waffle  The following list shows their components  The big differences between two models are the Motor  the SBC Single Board Computer  and the Sensors Chassis Parts            Part Name      Burger      Waffle                  WafflePlate      8      24              Plate Support M3x35mm      4      12              Plate Support M3x45mm      10      10              PCB Support      12      12              Wheel      2      2              Tire      2      2              Ball Caster      1      2      Motor            Part Name      Burger      Waffle                  DYNAMIXEL  XL430W250T       2      0              DYNAMIXEL  XM430W210T       0      2      Board            Part Name      Burger      Waffle                  OpenCR1 0      1      1              Raspberry Pi 3      1      0              Intel® Joule™      0      1              USB2LDS      1      1      Sensor            Part Name      Burger      Waffle                  LDS  HLSLFCD2       1      1              Intel® Realsense™ R200      0      1      Memory            Part Name      Burger      Waffle                  MicroSD Card      1      0      Cable            Part Name      Burger      Waffle                  Raspberry Pi 3 Power Cable      1      0              Intel® Joule™ Power Cable      0      1              LiPo Battery Extension Cable      1      1              DYNAMIXEL to OpenCR Cable      2      2              USB Cable      2      2      Power            Part Name      Burger      Waffle                  SMPS 12V5A      1      1              A C Cord      1      1              LIPO Battery 11 1V 1800mAh      1      1      Tools            Part Name      Burger      Waffle                  Screw driver      1      1              Rivet tool      1      1              USB3 0 HUB      0      1              LIPO Battery charger      1      1      Miscellaneous            Part Name      Burger      Waffle                  PH_M2x4mm_K      8      8              PH_T2x6mm_K      4      8              PH_M2x12mm_K      0      4              PH_M2 5x8mm_K      16      12              PH_M2 5x12mm_K      0      18              PH_T2 6x12mm_K      16      0              PH_M2 5x16mm_K      4      4              PH_M3x8mm_K      44      140              NUT_M2      0      4              NUT_M2 5      20      18              NUT_M3      16      96              Rivet_1      14      20              Spacer      4      4              Bracket      5      8              Adapter Plate      1      1              Rivet_2      2      2      Assembly ManualTurtleBots3 is delivered as unassembled parts in the boxes  Follow the instructions to assemble TurtleBot3   Download PDF Assembly manual for TurtleBot3 Burger  Download PDF Assembly manual for TurtleBot3 WaffleAssembly VideoIf it is difficult to assemble with the assembly manual  please refer to the following assembly video TurtleBot3 BurgerTurtleBot3 WaffleBasic OperationYou can use PUSH SW 1 and PUSH SW 2 buttons to see whether your robot has been properly assembled  This process tests the left and right DYNAMIXELs and the OpenCR1 0 board   After assembling TurtleBot3  connect the battery to OpenCR1 0 and turn on the power switch  You can see that the Power LED of OpenCR1 0 turns on   Place the robot on the floor  For the test  safety radius of 1 meter  about 40 inches  is recommended   Press and hold PUSH SW 1 for a few seconds to command the robot to move 30 centimeters  about 12 inches  forward   Press and hold PUSH SW 2 for a few seconds to command the robot to rotate 180 degrees in place Open Source HardwareCore components of Turtlebot3 are the followings Chassis  Motors  Wheels  OpenCR1 0  SBC Computer  Sensor and Battery  The chassis are Waffle Plates that holds other components  The Waffle Plate plays an important role as a chassis although its size is as small as your palm  Waffle plate is manufactured with injection mold method to lower the manufacturing cost  However  the CAD data of waffle plate for 3D printing is also available via Onshape  Turtlebot3 Burger is a Twowheeled differential drive type platform  but it is customizable structurally and mechanically in many ways Cars  Bikes  Trailers and so on The CAD data is released to the Onshape  which is a fullcloud 3D CAD editor  Get access through a web browser from your PC or from portable devices  OnShape allows drawing and assemblying parts with coworkers   TurtleBot3 Burger 3D Model https  goo gl n3bGNr  TurtleBot3 Waffle 3D Model https  goo gl wCDvVI",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/hardware_setup/"
      } ,
  
  
      "docs-en-platform-turtlebot3-joule-software-setup":  {
      "title": "TurtleBot3",
      "content"	 : " Short  Install Linux on TurtleBot3 Waffle  Intel® Joule™ In this section  the Alternative Ubuntu Desktop 16 04 LTS will be installed on Intel® Joule™  Remote PC  Download Ubuntu image Alternative Ubuntu 16 04 for Intel® Joule™ from the below link   http  people canonical com  platform snappy tuchuck desktopfinal tuchuckxenialdesktopiso201703170 iso Remote PC  In order to make a bootable installation USB drive  please follow the Alternative install Ubuntu Desktop 16 04 LTS  section from the below link   https  developer ubuntu com core getstarted inteljoule Remote PC  Before getting started  The board needs to have its BIOS updated to BIOS version  193 to install Ubuntu Image  Download BIOS version  193 and flash the BIOS into the Joule by following instructions in the below link   https  software intel com enus flashingthebiosonjouleWarning  Updating to the latest BIOS 1J2 or higher  may cause unexpected problem of Intel® Joule™ with Ubuntu 16 04 LTS  Please use only the recommended BIOS version  193 Warning  Intel® Joule™ comes with passive heatsink in the package  It is recommended to use the heatsink  In order to operate Joule without the heatsink  please follow the extra instruction https  software intel com enus node 721471 Long  Install Linux on TurtleBot3 Waffle  Intel® Joule™  Intel® Joule™  Connect micro HDMI to HDMI cable  power connector supplied by OpenCR1 0  USB devices including Bootable USB drive  mouse and keyboard  You might need a USB hub to plug multiple USB devices into Joule  Intel® Joule™  Installation will be proceeded as shown in below images  When Joule is turned on  monitor will blink about 3 times after 5 seconds  and print menu screen  Press F7 to go to Boot Manager  Intel® Joule™  Select USB Device  Intel® Joule™  Select Erase disk and install Ubuntu then continue  Intel® Joule™  Intel® Joule™ has two different disk drives 16GB micro SD Card and 16GB eMMC  In this instruction  it is highly recommended to install Alternarive Ubuntu for Joule on the 16GB eMMC  Select MMC SD card  2  mmcblk1   15 7 GB MMC 016G32 then continue  Intel® Joule™  Installation will take about 10 minutes  Intel® Joule™  When installation is completed  click Restart Now  Intel® Joule™  Remove bootable USB drive from Joule  Intel® Joule™  Don’t press any key  It will boot from 16GB eMMC which is a default boot device  Intel® Joule™  Finish the rest of settings ",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/joule_software_setup/"
      } ,
  
  
      "docs-en-platform-turtlebot3-license":  {
      "title": "TurtleBot3",
      "content"	 : "LicenseSoftware LicenseMain software is released under the Apache 2 0 license However  some of the sources are under the licenses 3Clause BSD License or GPLv3 Hardware LicenseTurtleBot3 is an open source hardware project as described by the Open Source Hardware Statement of Principles and Definition v1 0 Documents LicenseDocuments are released under the CC BY 4 0 ",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/license/"
      } ,
  
  
      "docs-en-platform-turtlebot3-manipulation":  {
      "title": "TurtleBot3",
      "content"	 : "ManipulationNote  This instruction was tested on Ubuntu 16 04  Linux Mint 18 1 and ROS Kinetic Kame Note  If you want more specfic information about OpenManipulator  you would follow official wiki page of OpenManipulator  https  github com ROBOTISGIT open_manipulatorTip  The terminal application can be found with the Ubuntu search icon on the top left corner of the screen  Shortcut key for terminal is CtrlAltT Install dependent packages for the OpenManipulator   sudo aptget install roskineticroscontrollers roskineticgazebo  roskineticmoveit  roskineticdynamixelsdk roskineticdynamixelworkbenchtoolbox roskineticrobotismath roskineticindustrialcore  cd   catkin_ws src   git clone https  github com ROBOTISGIT open_manipulator git  cd   catkin_ws  amp amp catkin_makeIf catkin_make command is completed without any errors  the preparation for OpenManipulator is done Gazebo  3D Below command will load the OpenManipulator on Gazebo environment   roslaunch open_manipulator_gazebo open_manipulator_gazebo launchIn order to control OpenManipulator  please use topic publish with below command in a new terminal window   rostopic pub  open_manipulator_chain joint2_position command std_msgs Float64 data 1 0 onceIn order to run OpenManipulator simulation with MoveIt   open a new terminal window and enter below command   roslaunch open_manipulator_moveit open_manipulator_demo launch use_gazebo trueIn order to control gripper  please use topic publish with below command in a new terminal window   rostopic pub  robotis open_manipulator gripper std_msgs String data  grip_on  oncePlatformBelow command will load the OpenManipulator with DYNAMIXEL Xseries   roslaunch open_manipulator_dynamixel_ctrl dynamixel_controller launchIn order to run OpenManipulator simulation with MoveIt   open a new terminal window and enter below command   roslaunch open_manipulator_moveit open_manipulator_demo launchTurtleBot3 Waffle with OpenManipulatorInstall dependent packages for the OpenManipulator   cd   catkin_ws src  git clone https  github com ROBOTISGIT turtlebot3 git  cd   catkin_ws  amp amp catkin_makeBelow command will load the TurtleBot3 Waffle with OpenManipulator on Rviz   roslaunch open_manipulator_with_tb3 open_manipulator_chain_with_tb3_rviz launch",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/manipulation/"
      } ,
  
  
      "docs-en-platform-turtlebot3-navigation":  {
      "title": "TurtleBot3",
      "content"	 : "NavigationNote  This instruction was tested on Ubuntu 16 04 and ROS Kinetic Kame version Warning  Make sure to run the Bringup instruction before performing Navigation Warning  The navigation uses the a data created in SLAM  Please make sure to have a map data Warning  Be careful when testing the robot on the table as the robot might fall The Navigation locates TurtleBot3 to the calculated position in the map by combining actual sensor data and anticipated position data Perform NavigationTip  The terminal application can be found with the Ubuntu search icon on the top left corner of the screen  Shortcut key for terminal is CtrlAltT  Remote PC  Launch the navigation file If you have TurtleBot3 Burger   export TURTLEBOT3_MODEL burger  roslaunch turtlebot3_navigation turtlebot3_navigation launch map_file  HOME map yamlIf you have TurtleBot3 Waffle   export TURTLEBOT3_MODEL waffle  roslaunch turtlebot3_navigation turtlebot3_navigation launch map_file  HOME map yaml Remote PC  Launch the Rviz   rosrun rviz rviz d  rospack find turtlebot3_navigation  rviz turtlebot3_nav rviz Remote PC  Before starting the navigation  RViz should be updated with initial location and pose of TurtleBot3  To upate the initial data  follow the instruction below   Click the 2D Pose Estimate button   Click on the approxtimate point in the map where the TurtleBot3 is located and drag the cursor to indicate the direction where TurtleBot3 faces Every green arrow stands for an expected position of TurtleBot3  The laser scanner will draw approximate figures of wall on the map  If the drawing doesn’t show the figures incorrectly  repeat localizing the TurtleBot3 from clicking 2D Pose Estimate button above  Remote PC  If TurtleBot3 is localized  it will automatically create the path to the target position  In order to set a goal position  follow the instruction below   Click the 2D Nav Goal button   Click on a specific point in the map to set a goal position and drag the cursor to the direction where TurtleBot should be facing at the end Setting a goal position might fail if the path to the goal position cannot be created If you wish to stop the robot before it reaches to the goal position  set the current position of TurtleBot3 as a goal position Reference doc http  wiki ros org turtlebot_navigation Tutorials Autonomously%20navigate%20in%20a%20known%20map",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/navigation/"
      } ,
  
  
      "docs-en-platform-turtlebot3-opencr1-0-software-setup":  {
      "title": "TurtleBot3",
      "content"	 : "OpenCR1 0 Software SetupWarning  The contents in this chapter corresponds to the Remote PC  your desktop or laptop PC  which will control TurtleBot3  Do NOT apply this instruction to your TurtleBot3 Note  OpenCR1 0 is preloaded with the software needed to run your specific TurtleBot3 model Burger or Waffle   Refer to the information below only if you want to modify the existing software or write new software for OpenCR1 0 Note  This instruction was tested on Ubuntu 16 04 and ROS Kinetic Kame and OpenCR1 0 software setup can be done from Intel® Joule™ OpenCR1 0 controls DYNAMIXELs with instructions from the SBC  To be able to control DYNAMIXELs  a specific firmware should be installed on the board  See the descriptions and configure the settings ArduinoIDE Settings for OpenCR1 0Following instructions will setup OpenCR1 0 Arduino development environment on the Remote PC USB Port SettingsTip  The terminal application can be found with the Ubuntu search icon on the top left corner of the screen  Shortcut key for terminal is CtrlAltT  Remote PC  The following commands allow to use OpenCR1 0 USB port for uploading Arduino IDE program without acquiring root permission   wget https  raw githubusercontent com ROBOTISGIT OpenCR master 99opencrcdc rules  sudo cp   99opencrcdc rules  etc udev rules d   sudo udevadm control reloadrules  sudo udevadm triggerCompiler Settings Remote PC  OpenCR1 0 libraries are designed for 32bit platform  therefore  64bit PC requires 32bit compiler for Arduino IDE   sudo aptget install libncurses5devi386Install Arduino IDE Remote PC  Download the latest version of Arduino IDE from official Arduino homepage and install the program  OpenCR1 0 supports Arduino IDE 1 6 12 or later  OpenCR1 0 has also been tested with Arduino IDE 1 8 1   https  www arduino cc en Main Software Remote PC  Extract downloaded file to desired folder and execute the install file in the folder from the terminal  The below example uses tools folder in the root directory       This folder will act as Arduino IDE folder   cd   tools arduino1 8 1    install sh Remote PC  Open the script file with below command   gedit    bashrc Remote PC  Append below Arduino IDE path information at the end of the bashrc file  It is recommended to use gedit editor   Use another editor if necessary   export PATH  PATH HOME tools arduino1 8 1 Remote PC  Last but not least  source the bashrc file to apply changes   source    bashrcRun Arduino IDE Remote PC  In order to run Arduino IDE on Linux platform  enter below command on the terminal   arduino Remote PC  If the program is installed and configured correctly  you’ll be able to see GUI program as below Porting OpenCR1 0 to Arduino IDEPreferences Remote PC  When Arduino IDE is running  go to File → Preferences from the menu of the program  When the Preferences window appears  copy and paste following link to the Additional Boards Manager URLs textbox   This step may take about 20 min    https  raw githubusercontent com ROBOTISGIT OpenCR master arduino opencr_release package_opencr_index jsonInstall OpenCR1 0 Package from Boards Manager Remote PC  Go to Tools → Board → Boards Manager  Remote PC  Type OpenCR into the textbox to find the OpenCR by ROBOTIS package  If the package is found  click Install  Remote PC  When the package installation is completed  INSTALLED text will be appeared next to the package name  Remote PC  See if OpenCR Board is now in the list of Tools → Board  Select OpenCR Board to import OpenCR Board source Port Setting Remote PC  This section shows how to setup the USB port for program upload  OpenCR1 0 should be connected to the PC with the USB port   Remote PC  Select Tools → Port →  dev ttyACM0 Warning  The last digit value 0 in the string  dev ttyACM0 might be different depend on the USB connection environment Writing Bootloader  can be skipped Note  This section is not necessary until there is new updates in the OpenCR bootloader  Once the bootloader is burned on the board  IT DOESN’T NEED EXTRA BURNING The STM32F7xx  which is used for the main MCU of OpenCR1 0  supports DFU Device Firmware Upgrade   This enables builtin bootloader of the MCU to boot with the DFU protocol by using USB  primarily for the bootloader initialization  the recovery mode and the bootloader update  The biggest advantage of using bootloader with USB is that JTAG equipment is not required  Therefore  writing the new firmware by using the DFU mode which is embedded in the MCU will not require writing   debugging equipment such as STLink Programmer Setting Remote PC  Go to Tools → DFUUTILEntering the DFU Mode Remote PC  Press Boot button at first  then press Reset button after few seconds while Boot button is pressed  Keeping Boot button pressed  release Reset button at second  Finally  release Boot button slowly  This enables user to activate the DFU mode  Remote PC  If you successfully entered to DFU mode  you will be able to find STMicroelectronics STM Device in DFU Mode text string when lsusb is entered in the terminal Download the Bootloader Remote PC  Go to Tools → Burn Bootloader to download the bootloader  Remote PC  When download is completed  press Reset button again OpenCR1 0 Firmware Settings for ROSAdd TurtleBot3 Firmware to OpenCR1 0OpenCR1 0 firmware  or the source  for ROS is to control DYNAMIXEL and sensors in the ROS  The firmware is located in OpenCR example which is downloaded by the board manager If you have TurtleBot3 Burger  Remote PC  Go to File → Examples → turtlebot3 → turtlebot3_burger → turtlebot3_core If you have TurtleBot3 Waffle  Remote PC  Go to File → Examples → turtlebot3 → turtlebot3_waffle → turtlebot3_core  Remote PC  Click Upload button to upload the firmware to OpenCR1 0 Note  If error occurs while uploading firmware  go to Tools → Port and check if correct port is selected  Press Reset button on the OpenCR1 0 and try to upload the firmware again  Remote PC  When firmware upload is completed  jump_to_fw text string will be printed on the screen ",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/opencr1_0_software_setup/"
      } ,
  
  
      "docs-en-platform-turtlebot3-overview":  {
      "title": "TurtleBot3",
      "content"	 : "OverviewTurtleBot3TurtleBot3 is a new generation mobile robot that is modular  compact and customizable  Let’s explore ROS and create exciting applications for education  research and product development The goal of TurtleBot3 is to drastically reduce the size and lower the price of the platform without sacrificing capability  functionality  and quality  Optional parts such as chassis  computers and sensors are available  and TurtleBot3 can be customized in various ways  TurtleBot3 is willing to be in the center of the maker movement by applying the latest technical advances of the SBC Single Board Computer   the Depth sensor and 3D printing technology TurtleBot3 is a collaboration project among Open Robotics  ROBOTIS  and more partners like Intel  Onshape  OROCA  The Open Robotics is in charge of software and community activities  while ROBOTIS is in charge of manufacturing and global distribution  We need more partners who can provide technology  educational service or distribution in each country News  11 30 2017 Robot Gift Guide 2017  IEEE Spectrum  11 07 2017 10 Memorable ROSbased Robots  Robotics Trends  11 07 2017 TurtleBot 3 and Friends A Lower Barrier of Entry for Exploring A I  Robotics  ThomasNet  10 24 2017 Announcing the Arm TechCon Innovation Award Finalists  arm TechCon  10 13 2017 Top 10 Open Source Linux Robots  Linux com  09 22 2017 TurtleBot3 AutoRace on ROSCon2017  PDF  Video  09 21 2017 Introducing OpenManipulator the full open robot platform on ROSCon2017  PDF  Video  07 16 2017 The TurtleBot3 Teacher Learn the ROS platform with this robot kit  IEEE Spectrum  06 16 2017 Turtlebot3  the Open Source Ubuntu ROSBased Robot Kit  Open Electronics  06 14 2017 Open Source TurtleBot 3 Robot Kit Runs Ubuntu and ROS on Raspberry Pi  Linux com  06 09 2017 Ubuntudriven TurtleBot gets a major rev with a Pi or Joule in the driver’s seat  LinuxGizmos com  05 31 2017 The Turtlebot 3 has launched  Ubuntu  05 29 2017 All the Latest  Most Exciting Robotics Research From ICRA 2017  IEEE Spectrum  05 17 2017 The Silicon Valley Startup Creating Robot DNA  Bloomberg  05 02 2017 Handson With TurtleBot 3  a Powerful Little Robot for Learning ROS  IEEE Spectrum  12 28 2016 Celebrating 9 Years of ROS  ROBOHUB  10 13 2016 Advances in robotics made easier by forthcoming 3D printed TurtleBot  3D Printing Industry  10 12 2016 Robotis and OSRF Announce TurtleBot 3 Smaller  Cheaper  and Modular  IEEE Spectrum  09 21 2016 Introducing the Turtlebot3 on ROSCon2016  PDF  Video  03 26 2013 TurtleBot Inventors Tell Us Everything About the Robot  IEEE Spectrum",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/overview/"
      } ,
  
  
      "docs-en-platform-turtlebot3-pc-software-setup":  {
      "title": "TurtleBot3",
      "content"	 : "PC Software SetupWarning  The contents in this chapter corresponds to the Remote PC  your desktop or laptop PC  which will control TurtleBot3  Do NOT apply this instruction to your TurtleBot3 Note  This instruction was tested on Ubuntu 16 04 and ROS Kinetic Kame Install Ubuntu on Remote PC  Desktop or Laptop PC  Remote PC  Download Ubuntu 16 04 on the remote PC from the following link   https  www ubuntu com download desktopIf you need more help for installing Ubuntu  check out the stepbystep guide from the link below   https  www ubuntu com download desktop installubuntudesktopInstall ROS on Remote PC Remote PC  There are two ways to install ROS  If you prefer manual installation  please take the second method In order to develop source code from the remote PC  please configure ROS environment after completing ROS installation First MethodInstall ROS by using a simple installation script fileTip  The terminal application can be found with the Ubuntu search icon on the top left corner of the screen  Shortcut key for terminal is CtrlAltT   sudo aptget update  sudo aptget upgrade  wget https  raw githubusercontent com ROBOTISGIT robotis_tools master install_ros_kinetic sh  amp amp chmod 755   install_ros_kinetic sh  amp amp bash   install_ros_kinetic shSecond MethodYou can start from 1 2 Setup your sources list and keep following the instruction until 1 7 Getting rosinstall from below ROS installation instruction link   http  wiki ros org kinetic Installation UbuntuNote  In order to check which packages are installed  please check this link out  https  raw githubusercontent com ROBOTISGIT robotis_tools master install_ros_kinetic shConfigure ROS EnvironmentIf you are going to modify or develop source code from the remote PC  you’ll have to configure ROS environment  Simple instructions are described in the below link and it will take a couple minutes   http  wiki ros org ROS Tutorials InstallingandConfiguringROSEnvironmentInstall Dependent packages Remote PC  The next step is to install dependent packages for TurtleBot3 control   sudo aptget install roskineticjoy roskineticteleoptwistjoy roskineticteleoptwistkeyboard roskineticlaserproc roskineticrgbdlaunch roskineticdepthimagetolaserscan roskineticrosserialarduino roskineticrosserialpython roskineticrosserialserver roskineticrosserialclient roskineticrosserialmsgs roskineticamcl roskineticmapserver roskineticmovebase roskineticurdf roskineticxacro roskineticcompressedimagetransport roskineticrqtimageview roskineticgmapping roskineticnavigation  cd   catkin_ws src   git clone https  github com ROBOTISGIT turtlebot3_msgs git  git clone https  github com ROBOTISGIT turtlebot3 git  cd   catkin_ws  amp amp catkin_makeIf catkin_make command is completed without any errors  the preparation for TurtleBot3 is done Network ConfigurationROS requires IP addresses in order to communicate between TurtleBot3 and the remote PC  Remote PC  Enter the below command on the terminal window of the remote PC to find out the IP address of the remote PC   ifconfigText strings in the rectangle is the IP address of the Remote PC  Remote PC  Enter the below command   gedit    bashrcModify the address of localhost with the IP address acquired from the above terminal window  Remote PC  Then  source the bashrc with below command   source    bashrc",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/pc_software_setup/"
      } ,
  
  
      "docs-en-platform-turtlebot3-rpi3-software-setup":  {
      "title": "TurtleBot3",
      "content"	 : "SBC Software SetupInstall Linux on TurtleBot3 Burger  Raspberry Pi 3 Warning  The SDcard should have at least 8 GB of empty space in order to install Linux on TurtleBot3  Remote PC  Download Ubuntu MATE 16 04 on the Raspberry Pi 3 from the link below   https  ubuntumate org download  Remote PC  In order to install Ubuntu MATE from an image file  it is recommended using GNOME Disks with Restore Disk Image… option  which natively supports XZ compressed image   sudo aptget install gnomediskutilityTip  It is recommended using GNOME Disks  but other applications such as ddrescue on Linux can be used   sudo aptget install gddrescue xzutils  unxz ubuntumate16 04 2desktoparmhfraspberrypi img xz  sudo ddrescue D force ubuntumate16 04 2desktoparmhfraspberrypi img  dev sdxTip  It is recommended using GNOME Disks  but other applications such as Win32 Disk Imager on Windows can be used  https  sourceforge net projects win32diskimager ",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/rpi3_software_setup/"
      } ,
  
  
      "docs-en-platform-turtlebot3-sbc-common-software-setup":  {
      "title": "TurtleBot3",
      "content"	 : "Install ROS and Packages  Burger and Waffle Warning  The contents in this chapter corresponds to the SBC of TurtleBot3  Raspberry Pi 3 or Intel® Joule™  which will be the main computer of TurtleBot3  Do NOT apply this instruction to your Remote PC  your desktop PC or laptop  Note  This instruction takes about 2 hours to install ROS and TurtleBot3 related packages  Elapsed time may vary depending on network environment  TurtleBot  There are two ways to install ROS  If you prefer manual installation  please take the second method First Method TurtleBot  Install ROS by using a simple installation script file Tip  The terminal application can be found with the Ubuntu search icon on the top left corner of the screen  Shortcut key for terminal is CtrlAltT  TurtleBot Burger   sudo aptget update  sudo aptget upgrade  wget https  raw githubusercontent com ROBOTISGIT robotis_tools master install_ros_kinetic_rp3 sh  amp amp chmod 755   install_ros_kinetic_rp3 sh  amp amp bash   install_ros_kinetic_rp3 sh TurtleBot Waffle   sudo aptget update  sudo aptget upgrade  wget https  raw githubusercontent com ROBOTISGIT robotis_tools master install_ros_kinetic sh  amp amp chmod 755   install_ros_kinetic sh  amp amp bash   install_ros_kinetic shNote  After install ROS  please reboot Raspberry Pi or Intel® Joule™ Second Method TurtleBot  You can start from 1 2 Setup your sources list and keep following the instruction until 1 7 Getting rosinstall from below ROS installation instruction link   http  wiki ros org kinetic Installation UbuntuNote  In order to see which packages are installed  please check this link out  https  raw githubusercontent com oroca orocarospkg kinetic ros_install shInstall Dependent Packages TurtleBot  The next step is to install dependent packages for TurtleBot3 control   sudo aptget install roskineticjoy roskineticteleoptwistjoy roskineticteleoptwistkeyboard roskineticlaserproc roskineticrgbdlaunch roskineticdepthimagetolaserscan roskineticrosserialarduino roskineticrosserialpython roskineticrosserialserver roskineticrosserialclient roskineticrosserialmsgs roskineticamcl roskineticmapserver roskineticmovebase roskineticurdf roskineticxacro roskineticcompressedimagetransport roskineticrqtimageview roskineticgmapping roskineticnavigation  cd   catkin_ws src  git clone https  github com ROBOTISGIT hls_lfcd_lds_driver git  git clone https  github com ROBOTISGIT turtlebot3_msgs git  git clone https  github com ROBOTISGIT turtlebot3 git  cd   catkin_ws  amp amp catkin_makeIf catkin_make command is completed without any errors  the preparation for TurtleBot3 is done USB Settings  Burger and Waffle  TurtleBot  The following commands allow to use USB port for OpenCR1 0 without acquiring root permission   cd   catkin_ws src turtlebot3  sudo cp   99turtlebot3cdc rules  etc udev rules d   sudo udevadm control reloadrules  sudo udevadm triggerNetwork Configuration  Burger and Waffle ROS requires IP addresses in order to communicate between TurtleBot3 and remote PC  TurtleBot  Enter the below command on the terminal window of the SBC in TurtleBot3 to find out the IP address of TurtleBot3   ifconfigTexts in the rectangle is the IP address of the TurtleBot  TurtleBot  Enter the following command   gedit    bashrc TurtleBot  Replace the localhost in the ROS_MASTER_URI address with the IP address acquired from Remote PC Network Configuration  Also replace the localhost in the ROS_HOSTNAME address with the IP address acquired from the above terminal window  which is the IP address of TurtleBot3  TurtleBot  Then  source the bashrc with below command   source    bashrc",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/sbc_common_software_setup/"
      } ,
  
  
      "docs-en-platform-turtlebot3-sbc-software-setup":  {
      "title": "TurtleBot3",
      "content"	 : "SBC Software SetupNote  An SBC SingleBoard Computer  is a complete computer built on a single circuit board with microprocessor s   memory  input output  I O  and other features required as a fully functional computer  TurtleBot3 uses Raspberry Pi  TB3 Burger  and Intel® Joule™  TB3 Waffle  as SBC Note  This instruction was tested on Ubuntu 16 04 and ROS Kinetic Kame Install Linux on TurtleBot3 Burger  Raspberry Pi 3 Install Linux on TurtleBot3 Waffle  Intel® Joule™ Install ROS and Packages  Burger and Waffle USB Settings  Burger and Waffle Network Configuration  Burger and Waffle ",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/sbc_software_setup/"
      } ,
  
  
      "docs-en-platform-turtlebot3-simulation":  {
      "title": "TurtleBot3",
      "content"	 : "   Simulation   simulation      assets images platform turtlebot3 software remote_pc_and_turtlebot png   Warning    The contents in this chapter corresponds to the  Remote PC   your desktop or laptop PC  which will control TurtleBot3  Do   NOT   apply this instruction to your TurtleBot3   noticewarning  Note    This instruction was tested on Ubuntu 16 04 and ROS Kinetic Kame   noticeinfo    TurtleBot3 Fake Node Implementation   turtlebot3fakenodeimplementation   Tip    The terminal application can be found with the Ubuntu search icon on the top left corner of the screen  Shortcut key for terminal is CtrlAltT   noticeinfoInstall dependent packages for TurtleBot3 Simulation   Note    turtlebot3_simulation package requires   TurtleBot3    http  turtlebot3 robotis com en latest pc_software html installdependentpackages  package as a prerequisite   noticeinfo    bash  cd   catkin_ws src   git clone https  github com ROBOTISGIT turtlebot3_simulations git  cd   catkin_ws    catkin_make    TurtleBot3 fake node  is a very simple simulation node that can be run without having an actual robot  You can even control the virtual TurtleBot3 in RViz with a teleop node     bash  export TURTLEBOT3_MODEL burger  roslaunch turtlebot3_fake turtlebot3_fake launch       bash  roslaunch turtlebot3_teleop turtlebot3_teleop_key launch       Stage  2D    stage2d  TODO     Gazebo  3D    gazebo3d   Tip    The terminal application can be found with the Ubuntu search icon on the top left corner of the screen  Shortcut key for terminal is CtrlAltT   noticeinfo  Warning    If you are running Gazebo for the first time on your  Remote PC   it takes a bit longer than usual   noticewarningYou should set Turtlebot3 model parameter  Select either burger or waffle for the model parameter in the below command     bash  export TURTLEBOT3_MODEL burger   Below command will load TurtleBot3 on the default Gazebo environment  TurtleBot3 empty world      bash  roslaunch turtlebot3_gazebo turtlebot3_empty_world launch        assets images platform turtlebot3 simulation turtlebot3_empty_world png If you wish to load more interesting map  please use below command instead of above command    TurtleBot3 world  is a map consists of simple objects that makes up the shape of TurtleBot3 symbol         bash  export TURTLEBOT3_MODEL burger  roslaunch turtlebot3_gazebo turtlebot3_world launch        assets images platform turtlebot3 simulation turtlebot3_world_bugger png      assets images platform turtlebot3 simulation turtlebot3_world_waffle png In order to control TurtleBot3 with a keyboard  please launch teleoperation feature with below command in a new terminal window     bash  roslaunch turtlebot3_teleop turtlebot3_teleop_key launch   In order to run TurtleBot3 simulation that autonomously navigates around the map  open a new terminal window and enter below command     bash  export TURTLEBOT3_MODEL burger  roslaunch turtlebot3_gazebo turtlebot3_simulation launch   RViz visualizes published topics while simulation is running  You can launch RViz in a new terminal window by entering below command     bash  export TURTLEBOT3_MODEL burger  roslaunch turtlebot3_gazebo turtlebot3_gazebo_rviz launch        assets images platform turtlebot3 simulation turtlebot3_gazebo_rviz png ",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/simulation/"
      } ,
  
  
      "docs-en-platform-turtlebot3-slam":  {
      "title": "TurtleBot3",
      "content"	 : "   SLAM   slam   Note    This instruction was tested on  Ubuntu 16 04  and  ROS Kinetic Kame    noticeinfo  Warning    Make sure to run the  Bringup   bringup  instruction before performing SLAM   noticewarning  Tip    It is recommended to use a joystick pad instead of the keyboard for easier control   noticeinfoThe Simultaneous Localization and Mapping  or SLAM  is a technique to draw a map by estimating current location in an arbitrary space The SLAM is a wellknown feature of TurtleBot from its predecessors  The video here shows you how accurately TurtleBot3 can draw a map with its compact and affordable platform   Date 2016 11 29  Robot TurtleBot3 Burger  Sensor Laser Distance Sensor  Packages Gmapping   Cartographer  Place ROBOTIS Labs   HQ  15thfloor corridor  Duration 55 minutes  Distance Total 351 meters  Date 2017 04 20  Robot TurtleBot3 Burger and Waffle  Sensor 360 Laser Distance Sensor LDS01  Packages Gmapping  Place ROBOTIS HQ Education Room  Duration About 4 minutes  Distance Total 15 meters    Create a Map with Teleoperation   createamapwithteleoperation   Tip    The terminal application can be found with the Ubuntu search icon on the top left corner of the screen  Shortcut key for terminal is CtrlAltT   noticeinfo   Remote PC    Open a new terminal and launch the SLAM file If you have TurtleBot3 Burger     bash  export TURTLEBOT3_MODEL burger  roslaunch turtlebot3_slam turtlebot3_slam launch   If you have TurtleBot3 Waffle     bash  export TURTLEBOT3_MODEL waffle  roslaunch turtlebot3_slam turtlebot3_slam launch      Remote PC    Visualize the model in 3D with RViz     bash  rosrun rviz rviz d  rospack find turtlebot3_slam  rviz turtlebot3_slam rviz      Remote PC    Teleoperation with Keyboard    bash  roslaunch turtlebot3_teleop turtlebot3_teleop_key launch       Save the Map   savethemap    Remote PC    Open a new terminal and run the map saver node     bash  rosrun map_server map_saver f   map     map pgm   and   map yaml   files will be created in the      directory     HOME  directory    home    ",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/slam/"
      } ,
  
  
      "docs-en-platform-turtlebot3-specifications":  {
      "title": "TurtleBot3",
      "content"	 : "   Specifications   specifications      assets images platform turtlebot3 hardware turtlebot3_models png     Hardware Specifications   hardwarespecifications   Items                                Burger                      Waffle                           Maximum translational velocity       0 22 m s                    0 26 m s                     Maximum rotational velocity          2 84 rad s  162 72 deg s    1 82 rad s  104 27 deg s     Maximum payload                      15kg                        30kg                         Size  L x W x H                      138mm x 178mm x 192mm       281mm x 306mm x 141mm        Weight    SBC   Battery   Sensors    1kg                         1 8kg                        Threshold of climbing               10 mm or lower                          Expected operating time              2h 30m                      2h                           Expected charging time               2h 30m                                  MCU                                  32bit ARM Cortex®M7 with FPU  216 MHz  462 DMIPS    IMU                                  Gyroscope 3 AxisAccelerometer 3 AxisMagnetometer 3 Axis   Power connectors                     3 3V   800mA5V   4A12V   1A   Expansion pins                       GPIO 18 pinsArduino 32 pin   Peripheral                           UART x3  CAN x1  SPI x1  I2C x1  ADC x5  5pin OLLO x4   Dynamixel ports                      RS485 x 3  TTL x 3   Audio                                Several programmable beep sequences   Programmable LEDs                    User LED x 4   Status LEDs                          Board status LED x 1Arduino LED x 1Power LED x 1   Buttons and Switches                 Push buttons x 2  Reset button x 1  Dip switch x 2   Battery                             Lithium polymer 11 1V 1800mAh   19 98Wh 5C   PC connection                       USB   Firmware upgrade                    via USB   via JTAG   Power adapter  SMPS                 Input  100240V  AC 50 60Hz  1 5A @maxOutput  12V DC  5A     Dimension and Mass   dimensionandmass      Data of TurtleBot3 Burger   dataofturtlebot3burger      assets images platform turtlebot3 hardware_setup turtlebot3_dimension1 png      Data of TurtleBot3 Waffle   dataofturtlebot3waffle      assets images platform turtlebot3 hardware_setup turtlebot3_dimension2 png     Components   components      SBC   sbc Raspberry Pi 3 Model B  https  www raspberrypi org products raspberrypi3modelb Intel® Joule™  http  ark intel com products 96414 IntelJoule570xDeveloperKit     Sensor   sensor 360 Laser Distance Sensor LDS01  http  turtlebot3 robotis com en latest appendix_lds htmlIntel® Realsense™ R200  https  software intel com enus RealSense R200Camera     Control Board   controlboard OpenCR1 0  http  turtlebot3 robotis com en latest appendix_opencr html     Actuator   actuator Dynamixel X series  http  en robotis com index product php cate_code 10121110",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/specifications/"
      } ,
  
  
      "docs-en-platform-turtlebot3-teleoperation":  {
      "title": "TurtleBot3",
      "content"	 : "   Teleoperation   teleoperation      assets images platform turtlebot3 software remote_pc_and_turtlebot png   Note    This instruction was tested on  Ubuntu 16 04  and  ROS Kinetic Kame    noticeinfo  Warning    Make sure to run the  Bringup   bringup  instruction before performing Teleoperation   noticewarning  Warning    Be careful when testing the robot on the table as the robot might fall   noticewarning  Tip    The teleoperation is supposed to be running on the remote PC    Follow the instruction on your Remote PC     noticeinfoTurtleBot3 can be teleoperated by various devices  It is tested with several wireless devices such as PS3  XBOX 360  ROBOTIS RC100 and etc  Examples shown here except the LEAP Motion  can be launched by ROS on Ubuntu mate 16 04 with Raspberry Pi 3 and OpenCR1 0 which controls DYNAMIXEL     Keyboard   keyboard   Tip    The terminal application can be found with the Ubuntu search icon on the top left corner of the screen  Shortcut key for terminal is CtrlAltT   noticeinfo   Remote PC    Launch the file for simple teleoperation test     bash  roslaunch turtlebot3_teleop turtlebot3_teleop_key launch      Remote PC    If the program is successfully launched  the following instruction will be appeared to the terminal window     bash  Control Your Turtlebot3     Moving around          w     a    s    d          x  w x  increase decrease linear velocity  a d  increase decrease angular velocity  space key  s  force stop  CTRLC to quit       RC100   rc100 The settings for ROBOTIS RC100 controller is included in the OpenCR1 0 firmware     PS3 Joystick   ps3joystick    Remote PC    Connect PS3 Joystick to the remote PC via Bluetooth or with USB cable    Remote PC    Install packages for teleoperation using PS3 joystick     bash  sudo aptget install roskineticjoy roskineticjoystickdrivers roskineticteleoptwistjoy      Remote PC    Launch teleoperation packages for PS3 joystick     bash  roslaunch teleop_twist_joy teleop launch       XBOX 360 Joystick   xbox360joystick    Remote PC    Connect XBOX 360 Joystick to the remote PC with Wireless Adapter or USB cable    Remote PC    Install packages for teleoperation using XBOX 360 joystick     bash  sudo aptget install xboxdrv roskineticjoy roskineticjoystickdrivers roskineticteleoptwistjoy      Remote PC    Launch teleoperation packages for XBOX 360 joystick     bash  sudo xboxdrv silent  roslaunch teleop_twist_joy teleop launch       Wii Remote   wiiremote    Remote PC    Connect Wii remote to the remote PC via Bluetooth    Remote PC    Install packages for teleoperation using Wii remote     bash  sudo aptget install roskineticwiimote libbluetoothdev libcwiiddev       bash  cd   catkin_ws src  git clone https  github com rosdrivers joystick_drivers git    cd   catkin_ws    catkin_make      Remote PC    Run teleoperation packages for Wii remote     bash  rosrun wiimote wiimote_node  rosrun wiimote teleop_wiimote       Nunchuk   nunchuk  TODO     Android App   androidapp Download  ROS Teleop  rosteleop  and run the application     LEAP Motion   leapmotion    Remote PC    Connect LEAP motion to the remote PC via Bluetooth    Remote PC    Install packages for teleoperation using LEAP motion  https  www leapmotion com setup https  developer leapmotion com downloads sdkpreview    bash  leapd  LeapCommandPanel  git clone git@github comwarp1337 rosleapmotion git      Remote PC    Run teleoperation package for LEAP motion     bash  rosrun leap_motion sender py       Myo   myo  TODO  rosteleop  https  play google com store apps details id com github rosjava android_apps teleop indigo",
      "url": "http://0.0.0.0:4000/docs/en/platform/turtlebot3/teleoperation/"
      } ,
  
  
      "docs-en-software-mobile-app-mini-app":  {
      "title": "ROBOTIS MINI APP",
      "content"	 : "ROBOTIS MINI APPPlease refer to Operating MINI section ",
      "url": "http://0.0.0.0:4000/docs/en/software/mobile_app/mini_app/"
      } ,
  
  
      "docs-en-software-opencm-ide-api-reference":  {
      "title": "OpenCM IDE",
      "content"	 : "API ReferencesEEPROM ClassThe STM32 microprocessor of OpenCM9 04 will read and write user data directly on the flash memory Flash memory reads and writes by unit of a page so the EEPROM Class can be used to permanently save user data by unit of bytes Flash memory also preserves its data even if the power is turned off From the total of 128Kbyte of flash memory of the OpenCM9 04  the EEPROM Class can only use 2Kbyte  0x0801F800 0x08001FFFF   2Kbyte corresponds to 2 Pages class EEPROMThis is the EEPROM Class  and since it is not predefined you need to create an instance variable in order to use it void EEPROMbegin  Performs initialization for the access of the flash memory  In order to use EEPROM this must be performed in setup   uint16 EEPROMwrite int vAddress  int data This is the method used to write on the 2kbyte of EEPROM field assigned to the flash memory of STM32  EEPROM data is composed as an addressdata pair  The address uses an unsigned integer value of 2 bytes arbitrarily and saves them in order   vAddress  A virtual address value composed of an unsigned integer value of 2 bytes  Access is made by vAddress when reading data   data  2byte data to be saved in the virtual address vAddress  int EEPROMread int vAddress Reads and returns the data saved in the virtual address vAddress void EEPROMerase int page Erases EEPROM by unit of a page 1Kbyte  void EEPROMeraseAll  Erases all the pages of EEPROM ExampleAn instance variable of the EEPROM Class has to be defined in order to use the EEPROM memory  It is provided in the form of a library so it is necessary to write  include EEPROM h  include EEPROM hEEPROM myEEPROM include EEPROM hEEPROM myEEPROMvoid setup      myEEPROM begin    for int i 0i  lt 10i       myEEPROM write i i 2      write i 2 to virtual address 0 9  void loop   for int i 0i  lt 10i       SerialUSB print EEPROM Example        SerialUSB println myEEPROM read i       read data from virtual address 0 9  BKP ClassThe STM32 microprocessor of OpenCM9 04 contains ten Backup Register BKP  memories of 16bit each that can save user data The Backup Register memory preserves the data as long as the power is maintained so even if the processor is restarted by a hard or soft reset the data will be preserved However completely removing the power will make the data disappear  The BKP memory is very useful when using data from previous operational conditions even after a system reset class BKPThis is the BKP Backup Register  Class  and since it is not predefined you need to create an instance variable in order to use it void BKPbegin  Set up a BKP object for controlling backup register  This method must be called before attempting to use the BKP object  typically  you call this in your setup   function  uint16 BKPwrite uint8 reg  uint16 wData This is the method used to save 2byte 16bit  data on the Backup Register   reg  This is the Backup Register address and a value between 1 and 10 can be used   wData  This signifies the 2byte 16bit  data to be saved in the Backup Register void BKP write uint8 reg  uint8 bData This is the method used to save a 1byte data on the Backup Register   reg  This is the Backup Register address and a value between 1 and 10 can be used   bData  This signifies a 1byte 8bit  data to be saved in the Backup Register void BKP write uint8 reg  int wData This is the method used to save an Integer 4byte  data on the Backup Register  It does not save the whole of the 4bytes but rather only the loworder 2bytes  so you must be cautious of data loss   reg  This is the Backup Register address and a value between 1 and 10 can be used   wData  This signifies a Integer data to be saved in the Backup Register void BKPenable  You must use enable   in order to write data in the Backup Register  However reading data can be done regardless of the use of enable   void BKPdisable  You must use disable   after you are done writing in the Backup Register  Again  reading data can be done regardless of the use of disable   ExampleAn instance variable of the BKP Class has to be defined in order to use the BKP memory  It is provided in the form of a library so it is necessary to write  include BKP h  include BKP hBKP BKP_MEMORYYou must use the enable   method to activate the Backup Register in order to have write access to the BKP memory  After you finish with the write access you must use the disable   method to deactivate the Backup Register  You can use the read   method to read data regardless of the use of enable   or disable   void setup       Initialize clock and registers for BKP    BKP_MEMORY begin       If you want to write data to BKP registers  you need to execute enable method     BKP_MEMORY enable    for i 1 i lt11i       BKP_MEMORY write i i 10   CM900 and CM904 has only 1 10 BKP registers 16bit        After writing data  must be disabled writing data to BKP Register  BKP_MEMORY disable  void loop   for i 1 i lt11i          You can check the data written in setup   using SerialUSB      SerialUSB print BKP Memory example           Just to read data from BKP  pass BKP register number 1 10  to read   method       SerialUSB println BKP_MEMORY read i    RC100 ClassThis is a Class that facilitates the use of RC100 in OpenCM9 04 and CM900  It can be operated in two modes as shown below   Remote control using Zigbee or Bluetooth  Remote control using InfraredEach button of the RC100 is already defined as shown below  making them convenient to use  define RC100_BTN_U        1  define RC100_BTN_D        2  define RC100_BTN_L         4  define RC100_BTN_R        8  define RC100_BTN_1        16  define RC100_BTN_2        32  define RC100_BTN_3        64  define RC100_BTN_4        128  define RC100_BTN_5        256  define RC100_BTN_6        512 class RC100This is the RC100 Class  and since it is not predefined you need to create an instance variable in order to use it void RC100begin int num Initializes Serial2 in order to use the RC100   num  Decides the operation mode of RC100  When set to 1 it will operate by Zigbee or Bluetooth wireless module  and when set to 2 it will operate by Infrared wireless module void RC100end void Finishes the use of devices of the RC100 Class  It disables the Serial2 device int RC100available  If there is a received data from the RC100  then it returns the number of bytes of the received data int RC100readData  Returns the analyzed data of the received data packet int RC100writeData int data Sends a packet data to the RC100  The RC100 cannot receive data so it is used when exchanging data in RC100 packets with a PC or smart device void RC100writeRaw byte temp Sends raw data as it is  not as a packet data byte RC100readRaw void Receives raw data as it is without packet analysis ExampleAn instance variable of the RC100 Class has to be defined in order to use the RC100 Class  It is provided in the form of a library so it is necessary to write  include RC100 h  include RC100 hRC100 ControllerAs with the Serial device  you use the available   method to detect whether there is any received data and then use the readData   method to receive the real data that has been processed from the received packet data  include  ltRC100 h gtRC100 Controller define WIRELESS_MODE    1 define IR_MODE          2void setup      pinMode BOARD_LED_PIN  OUTPUT   Controller begin IR_MODE     RC100 init as IR modeint RcvData  0void loop   if Controller available         RcvData   Controller readData      패킷 데이터를 분석한 실제 데이터를 받아온다       SerialUSB print RcvData          SerialUSB println RcvData       if RcvData  amp RC100_BTN_1       digitalWrite BOARD_LED_PIN LOW     RC100의 버튼1을 누르면 Status LED ON      delay 100      digitalWrite BOARD_LED_PIN HIGH InterruptattachInterrupt  Used to specify a function to call when an external interrupt occurs void attachInterrupt uint8 pin  voidFuncPtr handler  ExtIntTriggerMode mode Registers an interrupt handler on a pin  The interrupt will be triggered on a given transition on the pin  as specified by the mode parameter  The handler runs in interrupt context  The new handler will replace whatever handler is currently registered for the pin  if any Parameters  pin  OpenCM GPIO pin number   handler  Function to run upon external interrupt trigger  The handler should take no arguments  and have void return type   mode  Type of transition to trigger on  e g  falling  rising  etc   ExtIntTriggerMode enum  The kind of transition on an external pin which should trigger an interrupt           RISING  To trigger an interrupt when the pin transitions LOW to HIGH       FALLING  To trigger an interrupt when the pin transitions HIGH to LOW       CHANGE  To trigger an interrupt when the pin transitions from LOW to HIGH or HIGH to LOW  i e   when the pin changes        Note You should set the pin mode of your desired pin to an input mode  e g  INPUT  INPUT_PULLUP  INPUT_PULLDOWN   Because the function will run in interrupt context  inside of it  delay   won’t work  and the value returned by millis   will not increment  Serial data received while in the function may be lost  You should declare as volatile any global variables that you modify within the attached function Return Values  NoneExampleThe following example blinks the LED any time pin 0 changes from HIGH to LOW or vice versa volatile int state   LOW    must declare volatile  since it s                             modified within the blink   handlervoid setup       pinMode BOARD_LED_PIN  OUTPUT     pinMode 0  INPUT     attachInterrupt 0  blink  CHANGE void loop       digitalWrite BOARD_LED_PIN  state void blink       if  state    HIGH          state   LOW     else     state must be LOW        state   HIGH    In this example  the function blink   is the interrupt handler  Whenever the state on pin 0 changes  blink   gets called It reacts to the change by changing the state variable to LOW if it is HIGH  and to HIGH if it is LOW  It then exits letting the board get back to calling loop    Since loop   sets the LED pin to whatever state is  changing the voltage on pin 0 will toggle the LED Serial  SerialUSB attachInterrupt methodYou can attach a user interrupt using the attachIntterupt method in Serial1 2 3 and SerialUSB void HardwareSerialattachInterrupt voidFunctionPtrUart handler Attach user interrupt to Serial devices  ROBOTIS implementedtypedef void   voidFuncPtrUart  byte  void HardwareSerialdetachInterrupt void Disable user interrupt to Serial devices  ROBOTIS implementedvoid USBSerialattachInterrupt voidFuncPtrUsb handler Attach user interrupt to USB peripheral typedef void   voidFuncPtrUsb  byte   byte  void USBSerialdetachInterrupt void Disable user interrupt to USB peripheral See  Serial  SerialUSBdetachInterrupt  Used to disable an interrupt specified with attachInterrupt   void detachInterrupt uint8 pin Parameters  pin  Number of pin to configureReturn Values  Noneinterrupts  Reenables interrupts  after they’ve been disabled by noInterrupts     Interrupts allow certain important tasks to happen in the background  and certain interrupts are enabled by default Some functions will not work while interrupts are disabled  and both incoming and outgoing communication may be ignored Interrupts can slightly disrupt the timing of code  however  and may be disabled for particularly critical sections of code void interrupts  Parameters  NoneReturn Values  NoneExamplevoid setup   void loop     noInterrupts       critical  timesensitive code here  interrupts       other code herenolnterrupts  Disables interrupts  Interrupts allow certain important tasks to happen in the background and are enabled by default Some functions will not work while interrupts are disabled  and incoming communication may be ignored Interrupts can slightly disrupt the timing of code  however  and may be disabled for particularly critical sections of code void noInterrupts  Parameters  NoneReturn Values  NoneExamplevoid setup   void loop     noInterrupts       critical  timesensitive code here  interrupts       other code hereLicense and AttributionPortions of this page were adapted from the Maple Reference Documentation  which is released under aCreative Commons AttributionShareAlike 3 0 License GPIOpinMode  Configure behavior of a GPIO pin void pinMode uint8 pin  WiringPinMode mode Parameters  pin  Number of pin to configure   mode  Mode corresponding to desired pin behavior WiringPinMode enum            OUTPUT  Basic digital output when the pin is HIGH  the voltage is held at  3 3v  Vcc  and when it is LOW  it is pulled down to ground       OUTPUT_OPEN_DRAIN  In open drain mode  the pin indicates low by accepting current flow to ground and high by providing increased impedance  An example use would be to connect a pin to a bus line  which is pulled up to a positive voltage by a separate supply through a large resistor   When the pin is high  not much current flows through to ground and the line stays at positive voltage when the pin is low  the bus drains to ground with a small amount of current constantly flowing through the large resistor from the external supply  In this mode  no current is ever actually sourced from the pin       INPUT  Basic digital input  The pin voltage is sampled when it is closer to 3 3v  Vcc  the pin status is high  and when it is closer to 0v  ground  it is low  If no external circuit is pulling the pin voltage to high or low  it will tend to randomly oscillate and be very sensitive to noise  e g   a breath of air across the pin might cause the state to flip        INPUT_ANALOG  This is a special mode for when the pin will be used for analog  not digital  reads  Enables ADC conversion to be performed on the voltage at the pin       INPUT_PULLUP  The state of the pin in this mode is reported the same way as with INPUT  but the pin voltage is gently pulled up towards  3 3v  This means the state will be high unless an external device is specifically pulling the pin down to ground  in which case the gentle pull up will not affect the state of the input       INPUT_PULLDOWN  The state of the pin in this mode is reported the same way as with INPUT  but the pin voltage is gently pulled down towards 0v This means the state will be low unless an external device is specifically pulling the pin up to 3 3v  in which case the gentle pull down will not affect the state of the input       INPUT_FLOATING  Synonym for INPUT       PWM  This is a special mode for when the pin will be used for PWM output  a special case of digital output        PWM_OPEN_DRAIN  Like PWM  except that instead of alternating cycles of LOW and HIGH  the voltage on the pin consists of alternating cycles of LOW and floating  disconnected        Return Values  NoneExampleThis example uses pinMode   to set up the pin connected to the builtin LED as an output  Once this is done digitalWrite   can be used to turn the pin HIGH and LOW  which turn the LED on and off void setup       pinMode BOARD_LED_PIN  OUTPUT          sets the LED pin as outputvoid loop       digitalWrite BOARD_LED_PIN  HIGH       sets the LED on    delay 1000                             waits for a second    digitalWrite BOARD_LED_PIN  LOW        sets the LED off    delay 1000                             waits for a secondArduino CompatibilityOn OpenCM  pinMode   supports the INPUT and OUTPUT modes in the same way as Arduino  however  remember that the OpenCM  as a 3 3V device  will only drive 3 3V to an OUTPUT pin that has been set HIGH  instead of 5V like on Arduino  INPUT_ANALOG and PWM modes were added because the OpenCM doesn’t separate the analog and digital pins the same way Arduino does Unlike on Arduino  you must call pinMode   to set up a pin for these purposes before a call to  e g   analogRead    This should only add a few lines to your setup   function digitalWrite  Write a HIGH or a LOW value to a pin configured as OUTPUT  The pin must have its mode set to OUTPUT or OUTPUT_OPEN_DRAIN  If the pin has been configured as an OUTPUT with pinMode   its voltage will be set to the corresponding value 3 3V for HIGH  and 0V  ground  for LOW void digitalWrite uint8 pin  uint8 value Parameters  pin  Pin to write to   value  Either LOW  write a 0  or HIGH  write a 1            see pinMode        Return Values  NoneSee Also  pinMode  링크   digitalRead 링크   BOARD_LED_PIN 링크   toggleLED    링크   togglePin    링크 ExampleThe following example sets the builtin LED pin to HIGH  makes a onesecondlong delay  sets the pin back to LOW  and delays again  causing a blinking pattern  you could also use toggleLED   void setup     pinMode BOARD_LED_PIN  OUTPUT          sets the digital pin as outputvoid loop     digitalWrite BOARD_LED_PIN  HIGH       sets the LED on  delay 1000                             waits for a second  digitalWrite BOARD_LED_PIN  LOW        sets the LED off  delay 1000                             waits for a seconddigitalRead  Reads the value from a specified digital pin  either HIGH or LOW  The pin must have its mode set to one of INPUT  INPUT_PULLUP  and INPUT_PULLDOWN  If the pin isn’t connected to anything  digitalRead   can return either HIGH or LOW  and this will change in a way that seems random  uint32 digitalRead uint8 pin Parameters  pin  Pin to read from  see pinMode   Return Values  LOW 0  or HIGH 1  ExampleThe following example turns the LED on or off when the button is pressedvoid setup     pinMode BOARD_LED_PIN  OUTPUT   pinMode BOARD_BUTTON_PIN  INPUT_PULLDOWN void loop     int val   digitalRead BOARD_BUTTON_PIN       reads the input pin  digitalWrite BOARD_LED_PIN  val    write val to BOARD_LED_PINanalogRead  Read an analog value from pin  This function blocks during ADC conversion  and has 12 bits of resolution  The pin must have its mode set to INPUT_ANALOG Reads the value from the specified analog pin  The OpenCM boards contain 16channel  12bit analog to digital converters This means that a converter will map input voltages between 0 and 3 3 volts into integer values between 0 and 4095 However  a number of factors interfere with getting full accuracy and precision The Arduino board contains a 6 channel  8 channels on the Mini and Nano  16 on the Mega   10bit analog to digital converter with an input voltage range of 0V–5V This means that it will map input voltages between 0 and 5 volts  which is larger than OpenCM’s range of 0V3 3V  into integer values between 0 and 1023  which is smaller than the OpenCM’s range of 0–4095  uint16 analogRead uint8 pin Parameters  pin  Pin to read from  see pinMode   The pin parameter is the number of the analog input pin to read from The pins which support analog to digital conversion have ANALOG IN printed in silkscreen above them in the OpenCM9 04 PCB’s TOPside Return Values  Converted voltage  in the range 0–4095   i e  a 12bit ADC conversion  Exampleint analogPin   3        Potentiometer wiper  middle terminal  connected                          to analog pin 3  outside leads to ground and  3 3V                           You may have to change this value if your board                          cannot perform ADC conversion on pin 3 int val   0              variable to store the value readvoid setup     pinMode analogPin  INPUT_ANALOG     set up pin for analog inputvoid loop     val   analogRead analogPin        read the input pin  SerialUSB println val             print the value  for debugging with  delay 100                         a serial monitoranalogWrite  analogWrite   is used to create a PWM wave on a pin  You can use this to make an LED get brighter or dimmer  control a servomotor  etc   analogWrite   is an alias for pwmWrite  you must set up the pin for PWM output using pinMode    with argument PWM  This also means that you can’t later call digitalRead   or digitalWrite   on that pin unless some time in between  you use pinMode   to reconfigure that pin for INPUT or OUTPUT see the pinMode   page for more information  void analogWrite uint8 pin  uint16 duty_cycle Parameters  pin  PWM output pin  duty_cycle  Duty cycle to set  Using Arduino’s analogWrite    the duty cycle ranges between 0–255  always off – always on   Using OpenCM’s analogWrite   or pwmWrite    the duty cycle ranges from 0–65 535 by defaultReturn Values  NoneExampleSets the output to the LED proportional to the value read from the potentiometerint analogPin   3       potentiometer connected to analog pin 3void setup     pinMode BOARD_LED_PIN  PWM       sets the LED pin as output  pinMode analogPin  INPUT_ANALOG     sets the potentiometer pin as                                       analog inputvoid loop     int val   analogRead analogPin            read the input pin  analogWrite BOARD_LED_PIN  val   16      analogRead values go from 0                                         to 4095  pwmWrite values                                         from 0 to 65535  so scale roughlyArduino CompatibilityThe frequency of the PWM signal  i e   the frequency of a complete on off cycle  on the Arduino is approximately 490 Hz On the Maple  the frequency is configurable  defaulting to about 1100 Hz  or 1 1 KHz  This is because the PWM frequency is the frequency of the timer which controls PWM output on the particular pin  the PWM tutorial has the details  If your application definitely requires Arduino’s PWM frequency  then the steps are  Figure out which timer controls PWM output on your pin  your board’s Timer Pin Map is your friend here    Let’s say it’s timer n  where n is some number  You’ll then need to put HardwareTimer timer n  with your variables  as described in the HardwareTimer reference   In your setup    put timer setPeriod 2041   This will set the timer’s period to approximately 2041 microseconds  which is a frequency of approximately 490 Hz Be aware that this will change the period for the entire timer  and will affect anything else in your program that depends on that timer  The important examples are timer interrupts and PWM See Also  PWM  pwmWrite  togglepin  Switches a digital output pin from HIGH to LOW  or from LOW to HIGH  The pin must have its mode set to OUTPUT void togglePin uint8 pin Parameters  pin  the pin to toggle  If the pin is HIGH  set it LOW  If it is LOW  set it HIGH  see pinMode   Return Values  NoneSee Also  toggleLED  ExampleThis example uses togglePin   to pin 14  pin 14 is connected to builtin LED void setup       pinMode 14  OUTPUT          sets pin 14 as outputvoid loop       togglePin 14     toggles pin 14 every 100ms intervals    delay 100                          toggleLED  Toggle the builtin LED switch it from off to on  or on to off The LED must its mode set to OUTPUT  This can be accomplished portably over  OpenCM9 04 and CM900 by calling pinMode BOARD_LED_PIN  OUTPUT  before calling this function void toggleLED  Parameters  None see pinMode   Return Values  NoneExampleThis example sets up the board’s LED pin for output  then toggles the LED every 100 millisecondsvoid setup       pinMode BOARD_LED_PIN  OUTPUT void loop       toggleLED      delay 100 See Also  BOARD_LED_PIN  togglePin  License and Attribution Portions of this page were adapted from the Leaflabs Reference Documentation  which is released under a Creative Commons AttributionShareAlike 3 0 License OLLO ClassThis is a Class that facilitates the use of the 5pin port of OpenCM9 04  Does not support CM900 class OLLOThis is the OLLO Class  and since it is not predefined you need to create an instance variable in order to use it void OLLObegin int devNum Initializes the OLLO Class   devNum  Inputs the number of the 5pin port of OpenCM9 04 void OLLObegin int devNum  OlloDeviceIndex device_index Initializes the OLLO Class   devNum  Inputs the number of the 5pin port of OpenCM9 04   device_index  Specifies the type of device connected to the 5pin port  For the OlloDeviceIndex data type please refer below typedef enum OLLO_DEVICE_INDEX     IR_SENSOR     TOUCH_SENSOR     GYRO_SENOSR     DMS_SENSOR     PIR_SENSOR     MAGNETIC_SENSOR     COLOR_SENSOR     ULTRASONIC_SENSOR     LED_DISPLAY     TEMPERATURE_SENSOROlloDeviceIndexvoid OLLObegin int devNum  OlloDeviceIndex device_index  voidFuncPtr handler Initializes the OLLO Class  This initialization method is useful when using a touch sensor in an interrupt method   devNum  Inputs the number of the 5pin port of OpenCM9 04   device_index  Specifies the type of device connected to the 5pin port   handler  Designates the interrupt handler to be connected with the touch button  sensor  Please refer below for the handler’s function prototype int OLLOread int devNum Reads and returns the ADC value of the device connected to the corresponding port   devNum  Inputs the number of the 5pin port of OpenCM9 04 int OLLOread int devNum  OlloDeviceIndex device_index Reads and returns the ADC value of the device connected to the corresponding port  devNum  Inputs the number of the 5pin port of OpenCM9 04   device_index  Specifies the type of device connected to the 5pin port void OLLOwrite int devNum  uint8 leftVal  uint8 rightVal This is a method to digitally output the SIG1  SIG2 pins of the corresponding port  This method is useful when the device to be used is an LED Display   devNum  Inputs the number of the 5pin port of OpenCM9 04   1 4   leftVal  Sets the SIG1 pin as HIGH LOW  You can put in either 0 or 1   rightVal  Sets the SIG2 pin as HIGH LOW  You can put in either 0 or 1 void OLLOwrite int devNum  uint8 leftVal  uint8 centerVal  uint8 rightVal This is a method to digitally output the SIG1  ADC  SIG2 pins of the corresponding port   devNum  Inputs the number of the 5pin port of OpenCM9 04   1 4   leftVal  Sets the SIG1 pin as HIGH LOW  You can put in either 0 or 1   centerVal  Sets the ADC pin as HIGH LOW  You can put in either 0 or 1   rightVal  Sets the SIG2 pin as HIGH LOW  You can put in either 0 or 1 void OLLOwriteLED int devNum  uint8 leftVal  uint8 rightVal This is a method to control the LED module   devNum  Inputs the number of the 5pin port of OpenCM9 04   1 4   leftVal  Used to turn the left LED on off  The LED is turned on when set as LOW  and the LED is turned off when set as HIGH   rightVal  Used to turn the right LED on off  The LED is turned on when set as LOW  and the LED is turned off when set as HIGH ExampleAn instance variable of the OLLO Class has to be defined in order to use the OLLO memory  It is provided in the form of a library so it is necessary to write  include OLLO h  include OLLO h OLLO myOLLOThe instructions to use the basic sensor is shown below  include  ltOLLO h gtOLLO myOLLO define PORT1 1 define PORT2 2void setup      myOLLO begin PORT1     Performs basic initialization of Port 1 myOLLO begin PORT2     Performs basic initialization of Port 2 void loop   SerialUSB print XAxis ADC      SerialUSB print myOLLO read PORT1     read XAxis ADC value from OLLO port 1  SerialUSB print   YAxis ADC      SerialUSB println myOLLO read PORT1     read YAxis ADC value from OLLO port 2  delay 60    Prevents fast output An example of using the IR Sensor module is shown below  include  ltOLLO h gtOLLO myOLLO define PORT1 1void setup      myOLLO begin PORT1  IR_SENSOR   Initializes Port 1 as an IR sensor module void loop   SerialUSB print IR Sensor ADC      SerialUSB println myOLLO read PORT1  IR_SENSOR     read ADC value from OLLO port 1delay 60    Prevents fast output  include  ltOLLO h gtOLLO myOLLOvoid setup    myOLLO begin 3   LED Display Module must be connected at port 3 void loop      write  port number  left LED blue   right LED yellow     myOLLO write 3 1 0    or use myOLLO writeLED 3 1 0   delay 100   myOLLO write 3 0 1    or use myOLLO writeLED 3 0 1   delay 100 The Color Sensor is initialized with COLOR_SENSOR The read   method returns the following result  The color value that is detected from Color Read  is output   0  gt Error  1  gt White  2  gt Black  3  gt Red  4  gt Green  5  gt Blue  6  gt Yellow include  ltOLLO h gtOLLO myOLLOvoid setup    myOLLO begin 2 COLOR_SENSOR   OLLO Color Module must be connected at port 2   void loop    SerialUSB print COLOR Read      SerialUSB println myOLLO read 2  COLOR_SENSOR    delay 100 Serial ClassSerial Class Seial1  Serial2  Serial3 All of the Serial 1 2 3  objects are instances of the HardwareSerial class  which is documented in this section   This means that you can use any of these functions on any of Serial1  Serial2  and Serial3  class HardwareSerialSerial port class  Predefined instances are Serial1  Serial2  and Serial3 void HardwareSerialbegin unsigned int baud Set up a HardwareSerial object for communications  This method must be called before attempting to use theHardwareSerial object  typically  you call this in your setup   function  void HardwareSerialend  Disables the USART associated with this object  allowing any associated communication pins to be used for other purposes unsigned int HardwareSerialavailable  Returns the number of bytes available for reading unsigned char HardwareSerialread  Returns the next available  unread character  If there are no available characters you can check this withavailable   the call will block until one becomes available void HardwareSerialflush  Throw away the contents of the serial port’s receiver  RX  buffer  That is  clears any buffered characters  so that the next character read is guaranteed to be new void HardwareSerialprint unsigned char b Print the given byte over the USART void HardwareSerialprint char c Print the given character over the USART  7bit clean characters are typically interpreted as ASCII text void HardwareSerialprint const char  str Print the given nullterminated string over the USART void HardwareSerialprint int n Print the argument’s digits over the USART  in decimal format  Negative values will be prefixed with a ‘‘character void HardwareSerialprint unsigned int n Print the argument’s digits over the USART  in decimal format void HardwareSerialprint long n Print the argument’s digits over the USART  in decimal format  Negative values will be prefixed with a ‘‘character void HardwareSerialprint unsigned long n Print the argument’s digits over the USART  in decimal format void HardwareSerialprint long n  int base Print the digits of n over the USART  in base base  which may be between 2 and 16   The base value 2 corresponds to binary  8 to octal  10 to decimal  and 16 to hexadecimal  Negative values will be prefixed with a’‘ character void HardwareSerialprint double n Print n  accurate to 2 digits after the decimal point void HardwareSerialprintln char c Like print c   followed by rn void HardwareSerialprintln const char  c Like print c   followed by rn void HardwareSerialprintln unsigned char b Like print b   followed by rn void HardwareSerialprintln int n Like print n   followed by rn void HardwareSerialprintln unsigned int n Like print n   followed by rn void HardwareSerialprintln long n Like print n   followed by rn void HardwareSerialprintln unsigned long n Like print n   followed by rn void HardwareSerialprintln long n  int base Like print n  b   followed by rn void HardwareSerialprintln double n Like print n   followed by rn void HardwareSerialprintln  Prints rn over the USART void HardwareSerialwrite unsigned char ch Sends one character over the USART  This function is currently blocking  This is a lowlevel function  One of the print   or println   functions is likely to be more useful when printing multiple characters  when formatting numbers for printing  etc void HardwareSerialwrite const char  str Send the given nullterminated character string over the USART  This is a lowlevel function  One of the print   or println   functions is likely to be more useful when printing multiple characters  when formatting numbers for printing  etc void HardwareSerialwrite void  buf  unsigned int size Writes the first size bytes of buf over the USART  Each byte is transmitted as an individual character  This is a lowlevel function  One of the print   or println   functions is likely to be more useful when printing multiple characters  when formatting numbers for printing  etc int HardwareSerialtxPin  Return the number of the TX  transmit  pin int HardwareSerialrxPin  Return the number of the RX  receive  pin void HardwareSerialattachInterrupt voidFunctionPtrUart handler Attach user interrupt to Serial devices  ROBOTIS implementedvoid HardwareSerialdetachInterrupt void Disable user interrupt to Serial devices  ROBOTIS implementedArduino CompatibilityUnlike the Arduino  none of the OpenCM’s serial ports is connected to the USB port on the OpenCM board  If you want to communicate using the builtin USB port  use SerialUSB instead  You will need an additional USBtoserial adapter to communicate between a USART and your computer Getting StartedFirst  decide which serial port you wish to use  and connect its pins to the device you’re communicating with   The TX and RX pins for a serial port are labeled on your board’s silkscreen for example  serial port 3 has pins labeled RX3  You can easily use the communication module with the 4pin communication port   The variable for controlling a serial port is the word Serial  plus the serial port’s number  For example   you can control serial port 1 with the variable Serial1  serial port 2 with Serial2  and so on In order to get started using your serial port  you’ll first need to turn it on  Do this by calling your serial port’s begin   function  giving it the baud rate you wish it to communicate at  Put this call to begin   in your setup    like in the following exampleOne common use for serial ports is to print strings and other debugging information to a computer  You can print numbers or strings using print   and println   in your loop  void setup          57600 is the baud rate to use   The baud rate determines how       fast the communication goes     Serial2 begin 57600 void loop          Communicate using Serial2 here Serial2 print First  print this string   Then print a number      Serial2 print 42     Serial2 print    You can print floating point values  too      Serial2 print 3 14     Serial2 println   Using println   instead of print   ends the line      Serial2 println This sentence starts on a new line  void setup       Initialize Serial2 as 57600 bps  Serial2 begin 57600 char temp 0void loop     if Serial2 available        if data is available from Serial2      temp   Serial2 read       read one byte data from Serial2      Serial2 print temp        print out the data to Serial2 device  void setup      Serial2 Serial initialize  Serial2 begin 57600     You can attach your serial interrupt    or  also detach the interrupt by detachInterrupt void  method  Serial2 attachInterrupt serialInterrupt   pinMode BOARD_LED_PIN  OUTPUT     toggleLED_Pin_Out  Serial Interrupt type must have the below prototype  void interrupt_name  byte variable void serialInterrupt byte buffer   Serial2 print  char buffer void loop    toggleLED    delay 50 SerialUSB classUsed for communication between the OpenCM board and a computer In addition to three serial ports  the OpenCM’s STM32 microprocessor includes a dedicated USB peripheral This peripheral is used to emulate a regular serial port for use as a terminal and download a program to the board Library access to the emulated serial port is provided through the SerialUSB object You can mostly use SerialUSB as a dropin replacement for Serial1  Serial2  and Serial3 WarningThe SerialUSB functionality includes a 50 millisecond timeout for writes  and does not try to detect if the USB host is really connected  or just enumerated and initialized This means that if you have a number of calls to one of the SerialUSB write   or print   functions in your code  and you are not monitoring SerialUSB on a computer  your program will run much slower than if it is being monitored or totally disconnected  run off of a battery  You can avoid this behavior by deciphering the port status using the DTR and RTS line status  the behavior of these control lines is platform dependent and we no longer interpret them by default  The SerialUSB object is an instance of the USBSerial class  which is documented in this section This means that you can use any of these functions by writing SerialUSB functionName arguments…  For example  to print the message hello  world   you can write USBSerial println hello world   class USBSerialEmulated serialoverUSB class  SerialUSB is the predefined  singleton  instance USBSerialbegin  Set up the USB peripheral for emulated serial communication  The peripheral is configured this way by default calling this function should only be necessary if you have disabled the peripheral using SerialUSB end   USBSerialend  Disables the USB peripheral  Note that using this function will terminate all USB communications between the OpenCM and the PC in particular  it implies that you won’t be able to download any new programs without resetting the board or using recovery mode unsigned int USBSerialavailable  Returns the number of bytes available for reading unsigned char USBSerialisConnected  Returns 1 if USB is connected to host or PC   otherwise returns 0 unsigned char USBSerialread  Returns the next available  unread character  If there are no available characters  you can check this with available   the call will block until one becomes available USBSerialprint unsigned char b Print the given byte over the USB connection USBSerialprint char c Print the given character over the USB connection  7bit clean characters are typically interpreted as ASCII text USBSerialprint const char  str Print the given nullterminated string over the USB connection USBSerialprint int n Print the argument’s digits over the USB connection  in decimal format  Negative values will be prefixed with a ‘‘ character USBSerialprint unsigned int n Print the argument’s digits over the USB connection  in decimal format USBSerialprint long n Print the argument’s digits over the USB connection  in decimal format  Negative values will be prefixed with a ‘‘ character USBSerialprint unsigned long n Print the argument’s digits over the USB connection  in decimal format USBSerialprint long n  int base Print the digits of n over the USB connection  in base base  which may be between 2 and 16   The base value 2 corresponds to binary  8 to octal  10 to decimal  and 16 to hexadecimal  Negative values will be prefixed with a ‘‘ character USBSerialprint double n Print n  accurate to 2 digits after the decimal point USBSerialprintln char c Like print c   followed by rn USBSerialprintln const char  c Like print c   followed by rn USBSerialprintln unsigned char b Like print b   followed by rn USBSerialprintln int n Like print n   followed by rn USBSerialprintln unsigned int n Like print n   followed by rn USBSerialprintln long n Like print n   followed by rn USBSerialprintln unsigned long n Like print n   followed by rn USBSerialprintln long n  int base Like print n  b   followed by rn USBSerialprintln double n Like print n   followed by rn USBSerialprintln  Prints rn over the USB connection USBSerialwrite unsigned char ch Sends one character over the USB connection  This function is currently blocking  although nonblocking writes are a planned future extension This is a lowlevel function  One of the print   or println   functions is likely to be more useful when printing multiple characters  when formatting numbers for printing  etc USBSerialwrite const char  str Send the given nullterminated character string over the USB connection This is a lowlevel function  One of the print   or println   functions is likely to be more useful when printing multiple characters  when formatting numbers for printing  etc USBSerialwrite void  buf  unsigned int size Writes the first size bytes of buf over the USB connection  Each byte is transmitted as an individual character  This is a lowlevel function  One of the print   or println   functions is likely to be more useful when printing multiple characters  when formatting numbers for printing  etc void USBSerialattachInterrupt voidFuncPtrUsb handler Attach user interrupt to USB peripheral typedef void   voidFuncPtrUsb  byte   byte   void USBSerialdetachInterrupt void Disable user interrupt to USB peripheral ExampleSafe print This function should run smoothly and not block the LED should blink at roughly the same speed whether being monitored  running from battery  or connected but not monitored  define LED_PIN BOARD_LED_PINvoid setup          Set up the LED to blink        pinMode LED_PIN  OUTPUT void loop          LED will stay off if USB is disconnected battery power  etc    and       will blink quickly if USB is plugged     if SerialUSB isConnected            digitalWrite LED_PIN  1         delay 100 digitalWrite LED_PIN  0     delay 100 volatile int nCount 0void setup       Initialize USB Serial  SerialUSB begin  void loop       print Hello World   to PC though USB Virtual COM port  SerialUSB println Hello World     SerialUSB print nCount       display nCount variable and increase nCount   SerialUSB println nCount     SerialUSB print rn       delay 1000 void setup       Initialize USB Serial  SerialUSB begin  char temp 0void loop     if SerialUSB available        if data is available from USB      temp   SerialUSB read       read one byte data from SerialUSB      SerialUSB print temp        print out the data  void setup       Initialize USB Serial  SerialUSB begin  char temp 0void loop     if SerialUSB available        if data is available from USB      temp   SerialUSB read       read one byte data from SerialUSB      SerialUSB print temp        print out the data  void setup      USB Serial initialize  SerialUSB begin      You can attach your serialUSB interrupt    or  also detach the interrupt by detachInterrupt void  method  SerialUSB attachInterrupt usbInterrupt   pinMode BOARD_LED_PIN  OUTPUT     toggleLED_Pin_Out  SerialUSB Interrupt type must have the below prototype  void interrupt_name  byte  buffer  byte nCount   USB max packet data is maximum 64byte  so nCount can not exceeds 64 bytes  int i 0void usbInterrupt byte  buffer  byte nCount   SerialUSB print nCount     SerialUSB println nCount   for unsigned int i 0 i  lt nCounti       printf_SerialUSB_Buffer N _receive_Data    SerialUSB print  char buffer i    SerialUSB println  void loop    toggleLED    delay 100 License and AttributionPortions of this page were adapted from the Maple Reference Documentation  which is released under a Creative Commons AttributionShareAlike 3 0 LicenseAPIpinMode  Configure behavior of a GPIO pin void pinMode uint8 pin  WiringPinModemode Parameters  pin  Number of pin to configure   mode  Mode corresponding to desired pin behavior Return Values  NoneExampleThis example uses pinMode   to set up the pin connected to the builtin LED as an output  Once this is done digitalWrite   can be used to turn the pin HIGH and LOW  which turn the LED on and off void setup     pinMode BOARD_LED_PIN  OUTPUT          sets the LED pin as outputvoid loop     digitalWrite BOARD_LED_PIN  HIGH       sets the LED on  delay 100                             waits for a second  digitalWrite BOARD_LED_PIN  LOW        sets the LED off  delay 100                             waits for a secondUtilitiesmillis  Returns the number of milliseconds since the board began running the current program  This number will overflow  go back to zero  after approximately 50 days uint32 millis void Parameters  None  See micros   링크  Return Values  Returns time  in milliseconds  since the beginning of program execution  On overflow  restarts at 0 ExampleThe following time prints the value returned by millis   roughly once per secondunsigned int timevoid setup   void loop     SerialUSB print Time    time   millis       prints time since program started  SerialUSB println time      wait a second so as not to send massive amounts of data  delay 1000 Since the return value for millis   is an unsigned long  overflow errors may occur if you try to do math with other data types  such aschars Also See  micros  delay  delayMicrosecondsmicros  Returns the number of microseconds since the board began running the current program  This number will overflow  go back to zero   after approximately 70 minutes Note There are 1 000 microseconds in a millisecond  and 1 000 000 microseconds in a second uint32 micros void Parameters  None  See millis   Return Values  Returns time  in microseconds  since the beginning of program execution  On overflow  restarts at 0 Exampleunsigned int timevoid setup   void loop     SerialUSB print Time    time   micros       prints time since program started  SerialUSB println time      wait a second so as not to send massive amounts of data  delay 1000 Also See  millis    delay    delayMicroseconds  delay  Pauses the program for at least a given number of milliseconds   There are 1000 milliseconds in a second  Interrupts  etc  may cause the actual number of milliseconds to exceed ms  However  this function will return no less than ms milliseconds from the time it is called void delay unsigned long ms Parameters  ms  the number of milliseconds to delay   See delayMicroseconds   Return Values  NoneExamplevoid setup          set up the builtin LED pin for output    pinMode BOARD_LED_PIN  OUTPUT void loop       digitalWrite BOARD_LED_PIN  HIGH       sets the LED on    delay 1000                             waits for a second    digitalWrite BOARD_LED_PIN  LOW        sets the LED off    delay 1000                             waits for a second                                              See Also  millis    micros    delayMicroseconds  delayMicroseconds  Pauses the program for the amount of time  in microseconds  specified as parameter There are a thousand microseconds in a millisecond  and a million microseconds in a second Interrupts  etc  may cause the actual number of microseconds to exceed us However  this function will return no less than us microseconds from the time it is called void delayMicroseconds uint32 us Parameters  us  the number of microseconds to delay Return Values  NoneExampleThe following example shows how to read IR sensor module in ROBOTIS OLLO library void setup       pinMode 17  OUTPUT          sets the EmittingLED pin as outputpinMode 2  INPUT_ANALOG void loop       digitalWrite 7  HIGH       turn on emitting LED    delayMicroseconds 15                waits for 15us    int adc_value  anologRead 2         read ADC value from receiving LED    SerialUSB print IR ADC          print out ADC valueSerialUSB println adc_value digitalWrite 7  LOW     turn off emitting LED                                              Arduino CompatibilityROBOTIS cannot guarantee it will behave as the Arduino implementation down to the microsecond  especially for smaller values of us The longest time delayMicroseconds   can delay is bounded by its argument type and the STM32 clock rate to be  2 32  1    12 microseconds  or less than 6 minutes  For longer pauses  use of delay   is possible See Also  millis  micros  delaymin   Macro  Calculates the minimum of two numbers  define min a b                   a  lt b   a  b  Parameters  a  the first number may be any number or numeric expression  b  the second number may be any number or numeric expression Return Values  The smaller of the two numbers ExamplesensVal   min sensVal  100     assigns sensVal to the smaller of sensVal or 100                                ensuring that it never gets above 100 Perhaps counterintuitively  max   is often used to constrain the lower end of a variable’s range  while min   is used to constrain the upper end of the range Warning Because of the way min   is implemented  avoid using other functions inside the parentheses  It may lead to incorrect resultsmin a    100       avoid this  yields incorrect resultsa                 use this instead min a  100        keep other operations outside min  Arduino CompatibilityThe OpenCM version of min   is compatible with Arduino and Maple See Also  max    constrain  max   Macro  Calculates the maximum of two numbers  define min a b                   a  lt b   a  b  Parameters  a   the first number may be any number or numeric expression   b  the second number may be any number or numeric expression Return Values  The larger of the two parameter values ExamplesensVal   max senVal  20     assigns sensVal to the larger of sensVal or 20                               effectively ensuring that it is at least 20 Perhaps counterintuitively  max   is often used to constrain the lower end of a variable’s range  while min   is used to constrain the upper end of the range Warning Because of the way max   is implemented  avoid using other functions inside the parentheses  It may lead to incorrect resultsmax a–  0       avoid this  yields incorrect resultsa–              use this instead max a  0         keep other operations outside max  Arduino CompatibilityThe OpenCM version of max   is compatible with Arduino and Maple See Also  min    constrain  abs   Macro  computes the absolute value of a number  define abs x     x   gt 0     x    x  Parameters  x  the number Return Values  x  if x is greater than or equal to 0   x  if x is less than 0 Warning Because of the way abs   is implemented  avoid using other functions or causing side effects inside the parentheses  as it may lead to incorrect resultsabs a         avoid this  yields incorrect resultsabs a           use this instead a               keep other operations outside abs  Arduino CompatibilityMaple’s implementation of abs   is compatible with Arduino constrain   Macro  Constrains a number to be within a range constrain x  a  b Parameters  x  the number to constrain  a  the lower end of the range  b   the upper end of the rangeReturn Values  x if x is between a and b  a if x is less than a  b if x is greater than bExample   limits range of sensor values to between 10 and 150sensVal   constrain sensVal  10  150 See Also  min    max  map  Remaps a number from one range to another That is  a value equal to fromStart gets mapped to toStart  a value of fromEnd to toEnd  and other values are mapped proportionatelyDoes not constrain value to lie within  fromStart  fromEnd  If a start value is larger than its corresponding end  the ranges are reversed  so map n  1  10  10  1  would reverse the range  1 10  Negative numbers may appear as any argument long map long value  long fromStart  long fromEnd  long toStart  long toEnd Parameters  value  the value to map   fromStart  the beginning of the value’s current range   fromEnd  the end of the value’s current range   toStart   the beginning of the value’s mapped range   toEnd   the end of the value’s mapped range Return Values  the mapped value Example   Map an ADC reading  12 bits  to 16bit PWM  0 to 65 535    void setup       pinMode 0  INPUT_ANALOG     pinMode 9  PWM void loop       int val   analogRead 0     val   map val  0  4095  0  65535     analogWrite 9  val Discussionmap   does not constrain values to within the range  because outofrange values are sometimes intended and useful The constrain  macro may be used either before or after this function  if limits to the ranges are desired Note that the lower bounds of either range may be larger or smaller than the upper bounds so that map   may be used to reverse a range of numbers for exampley   map x  1  50  50  1 The function also handles negative numbers well  so that this exampley   map x  1  50  50  100 is also valid The map   function uses integer math  its arguments and return values all have type long   so it will not generate fractions when the math might indicate that it should do so  Fractional remainders are truncated  and are not rounded or averaged See Also  constrain  pow  Calculates the value of a number raised to a power double pow double x  double y Compute an exponentiation Parameters  x  the base  This value cannot be zero if y  lt  0  This value cannot be negative if y is not an integral value   y  the exponent Return Values  x raised to the power y Examplevoid setup       void loop    for int i 0i lt8i         SerialUSB println pow 2 i      print out 2 i      delay 100     sqrt  Calculates the square root of a number  Compute the square root of a number double sqrt double x Compute an exponentiation Parameters  x  The number whose square root to find  This value cannot be negative Return Values  The square root of x  The return value is never negative Arduino CompatibilityThe Maple versino of sqrt   is compatible with Arduino sin  Calculates the sine of an angle  in radians double sin double x Compute an exponentiation Parameters  x  The radian measure of the angle Return Values  The sine of x  This value will be between 1 and 1 Arduino CompatibilityThe OpenCM version of sin   is compatible with Arduino See Also  cos  tan  float  doublecos  Calculates the cosine of an angle  in radians double cos double x Compute an exponentiation Parameters  x  The radian measure of the angle Return Values  The cosine of x  This value will be between 1 and 1 Arduino CompatibilityThe OpenCM version of cos   is compatible with Arduino See Also  cos  tan  float  doubletan  Calculates the tangent of an angle  in radiansdouble tan double x Compute an exponentiation Parameters  x  The radian measure of the angle Return Values  The tangent of x  There are no limits on the return value of this function Arduino CompatibilityThe OpenCM version of tan   is compatible with Arduino See Also  cos  tan  float  doublerandomSeed  randomSeed   initializes the pseudorandom number generator  causing it to start at an arbitrary point in its random sequence  This sequence  while very long  and random  is always the same void randomSeed unsigned int seed Parameters  seed  the number used to initialize the seed cannot be zero Return Values  NoneExampleThe following sketch initializes the random seed based on an ADC reading of pin 0 If this pin is unconnected  the Sketch should print different values to the serial monitor each time it is runlong randNumbervoid setup     pinMode 0  INPUT_ANALOG   randomSeed analogRead 0  void loop     randNumber   random 300   SerialUSB println randNumber   delay 50 If it is important for a sequence of values generated by random   to differ  on subsequent executions of a sketch  use randomSeed   to initialize the random number generator with a fairly random input  such as analogRead   on an unconnected pin Conversely  it can occasionally be useful to use pseudorandom sequences that repeat exactly This can be accomplished by callingrandomSeed   with a fixed number  before starting the random sequence See Also  random  random  The random   function generates pseudorandom numbersrandom long max Same as a call to random 0  max  random long min  long max Generate a pseudorandom number with given lower and upper bounds Parameters  min  Lower bound on the returned value  inclusive  max  Upper bound on the returned value  exclusiveReturn Values  A pseudorandom number in the range  min  max ExampleThe following sketch initializes the random seed based on an ADC reading of pin 0  If this pin is unconnected  the Sketch should print different values to the serial monitor each time it is runlong randNumbervoid setup     pinMode 0  INPUT_ANALOG   randomSeed analogRead 0  void loop     randNumber   random 300   SerialUSB println randNumber   delay 50 See Also  randomSeed  lowByte  Extracts the loworder  rightmost  byte of a variable  e g  a word  lowByte x Parameters  x  a value of any type  However  if a nonintegral type is used  the results will be strange Return Values  The low byte’s value  this will be between 0 and 255  ExampleThis example uses lowByte  highByte to send 1 byte  at a time  to the Goal position address on the Dynamixel control table Dynamixel Dxl 1 void setup       Dxl begin 1 int goal_pos   1023void loop   Dxl writeByte 1 30  lowByte goal_pos      Dxl writeByte 1 31  highByte goal_pos       delay 1000                             waits for a secondhighByte   Macro  Extracts the second lowest byte of an integral data type highByte x Parameters  x  a value of any integral type Return Values  Second lowest byte in xExampleThis example uses lowByte  highByte to send 1 byte  at a time  to the Goal position address on the Dynamixel control table Dynamixel Dxl 1 void setup       Dxl begin 1 int goal_pos   1023void loop   Dxl writeByte 1 30  lowByte goal_pos      Dxl writeByte 1 31  highByte goal_pos       delay 1000                             waits for a secondOther exampleint x   0xDEADBEEFSerialUSB println x  HEX     prints BEbitRead   Macro  Gets the value of a bit in a number bitRead x  n Parameters  x  the number from which to read the bit   n  which bit to read  starting at 0 for the leastsignificant  rightmost  bitReturn Values  The value of the bit  0 or 1  See Also  bit    bitWrite    bitSet    bitClear  bitWrite   Macro  Writes a bit of a numeric variable bitWrite x  n  b Parameters  x  the numeric variable whose bit to write   n  which bit of the number to write  starting at 0 for the leastsignificant  rightmost  bit   b  the value to write to the bit  0 or 1  Return Values  NoneSee Also  bit    bitWrite    bitSet    bitClear  bitSet   Macro  Sets  writes a 1 to  a bit of a numeric variable bitSet x n Parameters  x  the numeric variable whose bit to set  n  which bit to set  starting at 0 for the leastsignificant  rightmost  bitReturn Values  NoneSee Also  bit    bitRead    bitWrite    bitClear  bitClrear   Macro  Clears  writes a 0 to  a bit of a numeric variable bitClear x  n Parameters  x  the numeric variable whose bit to clear  n  which bit to clear  starting at 0 for the leastsignificant  rightmost  bitReturn Values  NoneSee Also  bit    bitRead    bitWrite    bitSet  bit   Macro  Computes the value of an  unsigned  integer with the specified bit set  bit 0  is 1  bit 1  is 2  bit 2  is 4  then 8  16  32  etc   bit n Parameters  n  the bit to set Return Values  The value of an integer with the given bit set See Also  bitRead    bitWrite    bitSet    bitClear  License and Attribution Portions of this page were adapted from the Maple Reference Documentation  which is released under aCreative Commons AttributionShareAlike 3 0 License ",
      "url": "http://0.0.0.0:4000/docs/en/software/opencm_ide/api_reference/"
      } ,
  
  
      "docs-en-software-opencm-ide-getting-started":  {
      "title": "OpenCM IDE",
      "content"	 : "IntroductionThe ROBOTIS OpenCM is a development Software and download tool for the OpenCM9 04 embedded board Sources of the ROBOTIS OpenCM are released under licenses of their respective authors Copyright  c   ROBOTIS Co   Ltd  Modified or newlycreated codes are released under the GNUGPL or LGPL licenses For more information on the OpenCM9 04 refer to the Appendix section of the emanuals   GNU GPL  GNL LGPLOpenCM9 04 Software DownloadOpenCM9 04 uses the ROBOTIS OpenCM Integrated Developmental Environment  IDE  to allow users to program with ease The download link for the ROBOTIS OpenCM IDE can be found below   Windows XP  Vista  7  8  32bit 64bit  ROBOTISv1 0 4windows zip   Mac OS X  Tested in OS X 10 12 2  ROBOTIS_OpenCMv1 0 3macosx zip   Linux 64bit  Tested in Ubuntu 12 04  ROBOTIS_OpenCMv1 0 2linux64 tgz   Linux 32bit  Tested in Ubuntu 10 10  ROBOTIS_OpenCMv1 0 2linux32 tgzGetting StartedInstall SoftwareWindowsPrepare the OpenCM9 04 and USB cableFor the cable you must prepare an Android phone pad MicroB type USB cable   This is included as a component of the package for the B type  and for the A type you must purchase through an accessory kit  Android smartphone cable is supported    MicroB USB cable  same as Android smartphoneDownload the Windows release for ROBOTIS OpenCM IDEDownload the latest version from the ROBOTIS Emanual support robotis com  site and unzip the file in an adequate directory  which will contain the execution file ROBOTIS_OpenCM exe and the USB driver folder drivers  as shown below   Directory structure after unzipping the fileNote that the ROBOTIS OpenCM is a portable program that only needs to be unzipped and executed without the need for any separate installation process  If you wish to remove the program  you simply need to delete the directly fully Connect the OpenCM9 04 to the PCFor the installation of the USB driver  simply connect the OpenCM9 04 to the PC using the USB cable as shown below   Figure 2 4 14 Connecting the OpenCM9 04 to the PCHowever we do recommend you avoid connecting to a USB hub that is in use with many other USB devices  and instead you connect to the PC directly  There can be rare cases in which if there is not enough electric current from the USB hub then the download can fail Driver InstallationFor Window 8 or 10  go to PC settings  gt Update and recovery  gt Recovery  gt Advanced startup  gt Troubleshoot  gt Advanced options  gt Startup Settings  gt Restart  gt Select 7  Disable driver signature enforcement  and then restart and then install using Run as administrator In the previous step  connecting the OpenCM board to the PC will make a device called ROBOTIS Virtual COM Port appear in the Device Manager Rightclick on that device and select Update Driver Software Next select Browse my computer for driver software Click on Browse and select the directory that you unzipped above ROBOTISdrivers  Click Next and the installation proceeds If the USB driver is installed successfully  a message will appear that says Windows has successfully updated your driver software as shown below At this stage it is important to check in the Device Manager what COM Port number the ROBOTIS Virtual COM Port has just been installed as Connecting to another USB port may change the COM Port number so if you connected to another port then check again and proceed to download Run ROBOTIS_OpenCM exeIn the unzipped directory ROBOTIS  doubleclick on the file ROBOTIS_OpenCM exe This will execute the ROBOTIS OpenCM tool as shown below Open the Example BlinkGo to File → Examples → 01 Basics → b_BlinkSelect the BoardIn Tools → Board  select ROBOTIS OpenCM9 04 Select the Serial PortMake sure you select the COM Port number that you checked in the previous step Proceed to DownloadClick on the Download button as shown below  As the download begins the board’s green LED is continuously turned on  Once the download is complete the board resets and the Blink example is executed  and the LED blinks Note If the power turns on for the board and the green LED is continuously turned on then restart the Download  Please refer to the Emergency Recovery Mode Force Download  section MAC OS XDownload the Mac OS X release for ROBOTIS OpenCMDownload the installation image file dmg  for Mac OS X from the Emanual When the download finishes  doubleclick on the dmg file below and proceed to Mount After mounting  when an installation window appears  click on the Robotis icon with the mouse and drag it to Application Then the installation will proceed as below Run the ROBOTIS OpenCMUsing Finder  look in the Application folder to find the ROBOTIS app application package and doubleclick on it to run the program As in the figure below  select the Open button The ROBOTIS OpenCM is executed as shown below Open the Example BlinkGo to File → Examples → 01  Basics → b_BlinkSelect BoardSelect ROBOTIS OpenCM9 04 Select Serial Port Select tty usbmodemXXX  The number on the end is different for each PC Proceed to DownloadClick on the Download button as shown below  As the download begins the board’s green LED is continuously turned on  Once the download is complete the board resets and the Blink example is executed  and the LED blinks Note If the board’s green Status LED does not turn on even after clicking on the Download button  press on the User button and while keeping the button pressed connect the USB to the PC Note If the power turns on for the board and the green LED is continuously turned on then restart the Download  Please refer to the Emergency Recovery Mode Force Download  section LinuxDownload the Linux release for ROBOTIS OpenCMIf the Linux you are using is 32bit then download the Linux 32 bit package  and if it is 64bit then download the Linux 64 bit package from the eManual After downloading  use the following command to unzip the file  The description below is an example for when using 32bit If you unzip the file it will create a ROBOTIS folder as shown below Install JRE Java Runtime Environment Same as for Arduino  the ROBOTIS OpenCM tool is a program that has been developed using Java and therefore requires JRE Java Runtime Environment   The Windows package includes JRE inside but the Linux version does not include it If it is installed then proceed to the next step  The way to check if JRE is installed is to use java –version in Terminal as shown below If you get a message as above then you need to install JAVA JRE Java Runtime Environment  or JDK Here is how you install openjdk7jreheadless  sudo aptget install openjdk7jreNow that Java JRE has been successfully installed  you can run ROBOTIS OpenCM Install i386 Library  Linux 64bit In order to use in Linux 64bit OS  you need to install ia32libs  sudo dpkg –addarchitecture i386 sudo aptget update sudo aptget install ia32libsIf the installation completes successfully  the Processing trigger runs properly as shown below Run ROBOTIS OpenCMAs shown below  doubleclicking ROBOTIS_OpenCM or entering   ROBOTIS_OpenCM in Terminal and pressing Enter will run the program Click on the Execute button Then the program will run as shown below Open the Example BlinkGo to File → Examples → 01  Basics → b_BlinkSelect BoardIn Tools → Board  select ROBOTIS OpenCM9 04 Select Serial PortThe serial port is shown as ttyACMX  where X is a different number for each PC The Linux Mac OS X releases have the USB CDC Driver included in the kernel  so unlike the Windows release you can run the program right away without the need to install a driver separately Proceed to DownloadClick on the Download button as shown below As the download begins the board’s green LED is continuously turned on  Once the download is complete the board resets and the Blink example is executed  and the LED blinks Note If the board’s green Status LED does not turn on even after clicking on the Download button  press on the User button and while keeping the button pressed connect the USB to the PC Note If the power turns on for the board and the green LED is continuously turned on then restart the Download  Please refer to the Emergency Recovery Mode Force Download  section OpenCM IDERun the ProgramIf you run the program the following screen appears             Item      Description                  Menu      You can select from File  Edit  Sketch  Tools  and Help               Toolbar      You can select from a list of shortcut icons of frequently used functions                     Executes only the compilation and prints a message on the status bar or console stating whether it was fail or success                    Executes compilation and proceeds to download right away  Make sure the board is connected when using this function                    Creates a new file                    Opens a file                    Saves the current file                    Runs the serial monitor              Editor      This is the field where you edit the source               Status Bar      This is the field where it shows the progress of the requested function visually               Console      Shows the current cursor location’s line number and the selected board and COM Port               Tab Menu      This is the menu that you select when adding or removing a tab       A Look at Some ExamplesThe ROBOTIS OpenCM IDE provides some simple examples of functions provided by the OpenCM hardware board  and you can check the File  e g  Examples menu to see the various examples shown below Code Editing FunctionAuto Highlight FunctionWhen typing code  registered keywords will be highlighted in yellow or blue automatically  as opposed to the usual black  as shown below Registered API will change colors as shown below  so that you can check if the name of the API you are trying to use is typed correctly You can also modify or add to the Auto highlight function at any time in the keyword txt file located in the directory below Using the Auto Format FunctionBy using the function in Tools → Auto Format  codes that have been typed jumbled or messy are automatically organized neatly Codes such as below are automatically organized neatly by pressing Ctrl T Adding and Removing CommentsSelect Edit → Comment Uncomment as shown below or press the hotkey Ctrl   to comment the entire line  and press the hotkey again to uncomment the line If you select a block as shown above and then press Ctrl   it will comment the entire block as shown below If you press Ctrl   again it will uncomment the selected lines Increase and Decrease IndentIf you select Edit → Increase Indent Decrease Indent you can control the indentation level from the current cursor  You can also press the hotkeys Ctrl  to move one tab to the right  or press Ctrl  to move one tab to the left Pressing Ctrl  repeatedly will move the cursor to the right one tab at a time as shown below Compile and DownloadAfter you write your code it is useful when programming to use the Compile menu in order to check that the code you wrote is grammatically correct and has no errors If the build is successful then in the status window below in the build’s binary size section it will show the maximum binary size  and the share proportional to the size as 0% If you have modified the codes in the Core directory shown below  you must delete the Object files that were previously created ROBOTIShardwarerobotiscoresrobotisDo this by selecting the Tools → Clean Objects menu and then build again  It will take a long time to build the first time  but from the second time on it will be fast again since it will reuse the Object files from the first build The Object files are saved in each corresponding board directory inside the Core directory shown below If the whole code is compiled properly with no errors you can now download  Simply click on the down arrow and it will compile and download all at once When the download finishes successfully there will be a message that says Done downloading in the status bar and the downloaded code will be executes directly in OpenCM9 04 Using the Serial MonitorROBOTIS OpenCM provides a terminal program  similar to Windows’s hyper terminal or TeraTerm  by default as an Addon program If you wish to communicate with the selected COM1 port then click on the serial monitor icon located on the upperright side of the toolbar to open the serial monitor  You can also use the hotkey Ctrl   Shift   M to open the serial monitor Precautions Regarding the Serial MonitorWhen OpenCM9 04 is downloading  USB communication will not be available  Do not open the serial monitor when downloading is in progress    If it is a different COM port then it does not matter  PreferencesManage your settings preferences in File → Preferences       Sketchbook location  This is the user’s default work directory  Sketch files will be saved and opened from this directory             Editor language This changes the font of the program to a different language             Show verbose output during  If you check Compilation then it will show a detailed output during the compilation process  If you check Download then it will show a detailed output of the download process  after the compile has finished  Compile and download can become slower when using this option  so we recommend you do not use it unless it is essential to use it   LibrariesInstalling LibrariesThe installation method of libraries is the same as for Arduino  The library’s path is inside the IDE folder as libraries    ROBOTISlibraries In the case of Mac  access the path below Documents ROBOTIS librariesAs above  organize the libraries folder so that inside there are files RC100 cpp  RC100 h with the same name as the folder RC100  You can put in code written with C file in the utility folder The examples folder is for sketch examples composed of the corresponding library  Examples are also organized as folders  and the folder name and the ino file name must be the same to be recognized Recovery ModeIf you are unable to download and the message Board is not responding shows up  please try using the recovery mode to force the download If you force the download once  the board should be recovered and normal downloads will be possible again Hold down the User Button on the OpenCM9 04 and connect the board to a PC using an USB cable Please have any other power source disconnected  and just connect to the USB while having the User Button held down   Hold down the User Button when entering recovery mode When successful  the green LED should stay on as shown in the image below  When the download is completed the board will reset and the LED will turn off If unable to download  you must remove any code that may disturb the USB interrupt in the code you wrote ExamplesEEPROM Flash In the CPU of EEPROM Flash  Library OpenCM9 04  which is STM32F103CB  there is a 128kbyte flash memory The flash memory is where we save the programming in binary format and also run it  The flash memory is a nonvolatile memory so even if the power is turned off the saved data does not disappear However flash reads and writes data by unit of a page so it can be relatively inconvenient for saving one or two bytes However its speed is fast  Therefore in OpenCM9 04 we have created a separate library called the EEPROM emulator to save user data in the unit of bytes Example include EEPROM hint iEEPROM CM9_EEPROMvoid setup        CM9_EEPROM begin    Serial2 begin 57600     Serial2 println       Start OpenCM9 04 EEPROM Memory Test                void loop      delay 1000     for i 0i  lt 10i           Serial2 print EEPROMExample             Serial2 println CM9_EEPROM read i   HEX    read data from virtualaddress 0 9    if Serial2 available           Serial2 read             Serial2 println                   EEPROM Writing Start                              for i 0 i lt10i         CM9_EEPROM write i i 2         write i 2 to virtual address 0 9                If you compile the code above and download it  it will read the values of the EEPROM virtual addresses from 0 9 through Serial2 as shown below Since there are no data all values will be printed as 0xffff In contrast with the BKP  the initialization of the flash memory will set all bits to 1 Therefore 0xffff is printed  And pressing any key will input a value between 0 12 to the virtual addresses 0 9 Now press the Reset button to restart Now we unplug the power and plug in again to check Sensor ModuleAll Robotis sensor modules can be connected to 5pin ports  Please refer to the OpenCM9 04 Hardware Manual for the connection method For the Atype you will need to separately solder the 5pin connector  but for the Btype and Ctype the 5pin connector will already be embedded Please note that the pins assigned to the 5pin are also shared with the 40pin IO on both sides  so in the header you must not use the IO pins assigned to the ports used below For example  if you connect the IR sensor to Port 1  you must not use Pins 2  6  and 7 in the header IR Sensor Module      Connectivity The way it works  as explained in the Emanual  is if High is given to SIG2 MOT    the transmitter LED is turned on and its infrared is detected by the detector LED and is shown as ADC  It is recommended that you connect the infrared sensor module to the Ports 1  4 of SIG2 that have a transistor circuit  Ports 2  3 will have a low ADC value  The figure below shows when it is connected to Port 1  The direction for the connector is to connect the gray cord to the USB  You can read the maximum value of the ADC value if you read it after approximately 10 15us  And the properties of the ADC values that can be detected according to their distance are shown below  so this must be taken into consideration for use  It is not possible to detect objects that are farther than 15cm and object that are too close will reflect the infrared and the angle entering the detector LED will not be valid and result in a section that the sensor values will fall  This corresponds to the section between 0 1 5cm         Confirming Operation Open ROBOTIS OpenCM’s Example – gt 07  Sensors – gt IR_Read  After downloading  open the serial monitor and place the object maximum when white  close and you will be able to see the ADC values as shown below             Operation Code The IR sensor can perform IR sensing as long as it controls the pin that corresponds to the SIG2 and the ADC port  The OLLO library is already coded with this principle         Check that Pins 2  6  7 are assigned to Port 1  In setup    initialize Pins 6  7 that are assigned to SIG1 2 to LOW and initialize Pin 2 to analog input         In function readIR  set SIG2 Pin 7  as HIGH to turn the transmitter LED as ON and if you read the analog value after 15us you can read the optimal ADC value  And if you send SIG2 again as LOW then one cycle will be finished  It does not matter if there is nothing 30us afterwards  The OLLO library is already coded with this principle so you can easily use it   DMS Sensor Module      Connectivity By default  you approve voltage using the 3 middle pins of the 5 pins and afterwards read the ADC value to utilize it  It has the advantage that even if the color and reflectivity change compared to the infrared sensor  there is virtually no change to the output value corresponding to the distance  There is no difference connecting to any of the 5pin sensor ports of OpenCM9 04  The DMS sensor does not use SIG1  2 so it does not distinguish ports  Below it was connected to Port 2 and the example code is explained based on Port 2         Confirming Operation In File – gt Examples – gt 07  Sensors  you can download example OLLO_DMS_Read and check using the serial monitor             Operation Code Sensors such as the DMS sensor module which are comprised of 3 pins from the 5 pin only need to keep on Reading the analog input  They do not need a separate initial code       Gyro Sensor      Connectivity and Sensor Internal Structure The Robotis gyro sensor can also be connected to Pin 5 of OpenCM9 04 to measure the angular speeds of X  Y  rotational acceleration          Connect the gyro sensor module of OpenCM9 04 to Pins 1 and 2 of the 5pin port  Connect the Xaxis pint to Port 1 and the Yaxis pin to Port 2 as shown in the connectivity below         Operation Code Download from Examples  gt 07  Sensors  gt OLLO_Gyro_Read and open the serial monitor to check the rotational acceleration of the X and Yaxis in ADC as shown below  Initialize Port 1 connected to the Xaxis pin and Port 2 connected to the Yaxis pin and in the loop  read the ADC value of the rotational acceleration of the X and Yaxis in a 60ms cycle         As for the DMS sensor module  you simply need to read the analog pin value from the loop       LED Module      Connectivity and Internal Structure The LED module is not a sensor module but simple a module to use 2 LED’s as a display format  By looking at the circuit diagram you can tell that it is being controlled in a Current Sink method where MOT  will be OFF when HIGH  and ON when LOW  The SIG2 pins of Ports 1 and 4 of OpenCM9 04 does not turn LOW so there is a restriction in using the LED module  so use Ports 2 and 3 of the 5pin ports  The figure below shows an example of using Port 3 to connect the LED module         Confirming Operation In File  gt Examples  gt 07  Sensors  download and run example OLLO_LED_Blink and you will see that both LED’s from each side will blink alternatively  The LED module does not need the ADC pin so you only need to use pins SIG1 and 2  You can use the LED module by initializing Port 3 in setup   as shown below       Touch Sensor      Connectivity and Internal Structure The touch sensor works by detecting whether it has been touched  just as a button  when it is simply pressed from the top  You can also use it simply as a button  The circuit diagram is also nothing more than a frequently used button circuit  When the button is pressed it returns HIGH and when the button is released it returns LOW  You connect it to Port 2 of OpenCM9 04         Operation Code Download OLLO_TOUCH_Read from the OLLO library and open the serial monitor to check the result  1 means the button is not pressed  and if the button is pressed than the value 0 will be output  The touch sensor only uses the middle 3 pins of the 5 pins as well  We recommend using the ADC pin by declaring it as a digital input  Since the touch sensor does not have an internal Pulldown circuit you must define INPUT_PULLDOWN as a Pulldown option  The OLLO library will internally initialize the pins of the 5pin sensor in this way           Digital I OConnect the LED to Pin 13 Connect the LED and resistor to OpenCM9 04 as shown below  Connect to Port 13 For digital output you must use pinMode 13  OUTPUT  in setup   to set Pin 13 as OUTPUT  And use the function digitalWrite   to assign HIGH LOW value digitalWrite 13  HIGH    Outputs HIGH to Pin 13 digitalWrite 13 LOW     Outputs LOW to Pin 13 When Pin 13 is assigned as LOW  it becomes a GND negative terminal  and an electric current is formed so the LED turns on  On the contrary  if Pin 13 is assigned as HIGH it becomes 3 3V and there is no electric current formed so the LED turns off  This is the principle by which you can write a sketch code that will make the LED blink void setup    pinMode 13  OUTPUT void loop    digitalWrite 13  HIGH   delay 100    delay of 0 1 second  delay 100    delay of 0 1 second  delay 100    delay of 0 1 secondYou will see the LED blink every 0 1 second Let us make the Status LED blink In OpenCM9 04 you can even test using the green Status LED builtin to the board without having to connect the LED as in the example above The Status LED is connected to Pin 14 and you can use the predefined function BOARD_LED_PIN to control it  This provides the advantage that if you write a sketch code using BOARD_LED_PIN then even if the board is changed you do not have to modify the code  Open an example file by selecting File – gt Examples – gt 01  Basics – gt b_Blink_LED If you download it then the green Status LED will blink Let us receive a digital input in Pin 7 Connect the button and pulldown resistor as shown below  Use Port 7 to receive the digital input For digital input on the I O Pin of OpenCM9 04 you must use pinMode 7  INPUT  in setup   to configure Pin 7 as INPUT  Then receive HIGH LOW values with the function digitalRead   as shown below int value   digitalRead 7     Reads Pin 7 and assigns it to the variable value Now it checks with the entire code  If the button is pressed then HIGH will be detected  and if the switch is separated then LOW will be detected The reason why LOW is detected when the button is separated is because there is a GND connected to the pulldown resistorvoid setup       pinMode 7  INPUT   SerialUSB begin    void loop      int value   digitalRead 7   if   value    HIGH     SerialUSB println HIGH Detected    else    SerialUSB println LOW Detected    delay 100      If you change the circuit above to a pullup circuit as shown below  it will work in the opposite way  If the button is pressed then LOW will be detected  and if it is separated then HIGH will be detected The reason why HIGH is detected when the button is separated is because there is a 3 3V voltage connected to the pullup resistor Let us receive digital input without either pullup or pulldown resistors In OpenCM9 04 it is possible to configure a switch circuit in digital input without a pulldown or pullup resistor  The 26 GPIO Pins in OpenCM9 04 have internal input Pullup Pulldown resistors that you can configure with the software If you need an internal pullup you can configure as pinMode 7  INPUT_PULLUP  and if you need a pulldown circuit you can configure as pinMode 7  INPUT_PULLDOWN  If you define as INPUT then it would mean digital input made as floating so there will need to be an exterior pullup or pulldown circuit  Let us look at an example The circuit shown below is a circuit that receives digital input through Pin 7 but the button is directly connected to GND  In this case we can define Pin 7 as INPUT_PULLUP in order for the button to work normally In this case if the button in pressed then LOW will be detected  and if the switch is separated then HIGH will be detected due to the internal pullup void setup       pinMode 7  INPUT_PULLUP   SerialUSB begin    void loop      int value   digitalRead 7   if   value    HIGH     SerialUSB println HIGH Detected    else    SerialUSB println LOW Detected    delay 100   For the opposite case connect the button directly to the 3 3V as shown in the connectivity below In this case if the button is pressed then HIGH will be detected  and if the switch is separated then LOW will be detected due to the internal pulldown void setup       pinMode 7  INPUT_PULLDOWN   SerialUSB begin    void loop      int value   digitalRead 7   if   value    HIGH     SerialUSB println HIGH Detected    else    SerialUSB println LOW Detected    delay 100   Let us receive an input using the User Button Similar to the builtin Status LED  there is a builtin User Button that can be used without the need to make a separate button circuit  If you look at the circuit diagram you can see the builtin pulldown input being used The User Button is connected to Pin 23 so you can designate Pin 23 directly or use BOARD_BUTTON_PIN void setup       pinMode BOARD_BUTTON_PIN  INPUT_PULLDOWN   SerialUSB begin    void loop      int value   digitalRead BOARD_BUTTON_PIN   if   value    HIGH     SerialUSB println HIGH Detected    else    SerialUSB println LOW Detected    delay 100   If you download you will see that when the User Button is pressed then HIGH will be input  and if the switch is separated then LOW will be input due to the internal pulldown circuit Let us toggle the Status LED If the current output of Pin 1 is HIGH then it will change to LOW  and if it is currently LOW then it will change to HIGH digitalWrite 1  HIGH     Pin 1 which was HIGH will become LOW again togglePin 1     Pin 1 which was HIGH will become LOW again We can now easily write the LED Blink example by using this principle  Let us simply use togglePin   with the Status LED void setup       pinMode BOARD_LED_PIN  OUTPUT      void loop       togglePin BOARD_LED_PIN   delay 100    Delay 0 1 secondThe LED will blink with a 0 1 second interval  Note that using toggleLED   which only toggles BOARD_LED_PIN will achieve the same actions Analog I OFor analog input  it is important to note that only Pins 0 9 located in the OpenCM9 04 silk screen’s ANALOG IN area will support analog input  Analog output is substituted by PWM Output using TIMER Pin 3 receives analog input by a variable resistor Connect a variable resistor to Pin 3 and a voltage of 3 3V as shown below For the analog input in Pin 3  use pinMode 3  INPUT_ANALOG  to configure the Pin Mode as analog input and you are now ready  Use analogRead   to read analog values through Pin 3 as we configured int value   analogRead 3     Reads analog input through Pin 0 and assigns it to the variable value Here the value that is assigned to the variable value is a 12bit ADC value between 0   4 095  Let us output the ADC value that is read through the entire code void setup    pinMode 3  INPUT_ANALOG   void loop    int value   analogRead 3   SerialUSB println value       let us output the value   delay 100    delay time for USB transferLet us perform analog output PWM  to Pin 6 We can control the LED using PWM outputted to Pin 6  Connect the LED and resistor using a breadboard and connect to Pin 6 as shown below Configure Pin 6 to analog using pinMode 6  PWM   Use analogWrite   to PWM Output to Pin 6 as configured analogWrite 6  10000 Analog output is substituted by PWM Output  PWM’s Duty cycle is controlled through the second argument  Here we have used the value 10000 but the duty cycle can be set to a value between 0  65535  The value 0 represents a 0% duty cycle and the value 65535 represents a 100% duty cycle Now it checks the entire code void setup    pinMode 6  PWM   void loop    for int i 1 i  lt 7 i       analogWrite 6  i 10000   generate pwm as 10000   60000 scale    delay 100   By controlling the second argument of analogWrite   we can implement PWM with a variety of Duty Cycles as shown below Let us perform Dimming so that the Status LED will turn off slowly The Status LED is connected to Pin 14 which is also capable of PWM output  Open an example file by selecting File – gt Examples – gt 01  Basics – gt f_Led_Fadin If you download to OpenCM9 04 it will make the Status LED repeatedly turn on and off slowly Serial CommunicationOpenCM9 04 has a total of 4 serial devices  There are Serial1  Serial2  Serial3  and SerialUSB  but Serial1 is assigned exclusively as a Dynamixel communication port so there are restrictions for using it  Serial 2 is for using Bluetooth devices with 4 pin ports such as BT210 and BT110A  Serial3 is shown at the backside of the PCB as TX3 24   RX3 25  The SerialUSB is very important in OpenCM9 04  It performs the firmware download for ROBOTIS OpenCM and also performs data communication as do Serials 1 2 3  The instructions to use it is almost the same as for Serials 1 2 3 Let us send data using a serial device Using LN101 connect the 4 pin communication port to the PC as shown below  Use RoboPlus Terminal or a serial monitor in the PC to open the COM port You must perform an initialization for the Serial 2 device as shown below and then perform the following examples in loop   void setup    Serial2 begin 57600 void loop      Test example code Sending data can be done using print   and println   methods  where the print   method will print without changing lines and the println   method will print as well as change lines Serial2 print Hello World This is OpenCM9 04 Let us print the Hello World string through the Serial2 TX2  RX2  device Serial2 print OpenCM9 04 is the first product of OpenCM Series Serial2 println  println   ends this line Seirla2 println This is new line println   will change lines and print as a new line   You can check the printing as shown below Serial2 print 12 This will print 12 as a decimal number int abc   128Seial2 print abc This will print the value 128 of variable abc Serial2 print abc  16 This will print the value 128 of variable abc as a hexadecimal value  0x80 will be printed Serial2 print abc  2 This will print the value 128 of variable abc as a binary value  In the same way  if you set the second argument as 8 then it will print as an octal value  and if there is no second argument then by default it will print as a decimal value Serial2 println 3 14 This will print 3 14 as a Double type and then change lines  It will print to 2 decimal places  You can also define a variable Double and then print it double  var   1 234Serial2 println var This will print the analog values read from Pin 0  1  and 2 through Serial 2 in their respective order  If you use many print   and println   methods then you can print neatly as shown below int sensorValue0 0int sensorValue1 0int sensorValue2 0sensorValue0   analogRead 0 sensorValue1   analogRead 1 sensorValue2   analogRead 2 Serial2 print Sensor0     Serial2 print sensorValue0 Serial2 print  Sensor1     Serial2 print sensorValue1 Serial2 print  Sensor2     Serial2 println sensorValue2 At last If you change lines by using the println   method only for printing sensorValue2 then you can achieve a neat printing of the 3 analog inputs Let us receive data using a serial device We will implement an Echo function using a serial device  When data comes to the Serial 2 device through a chartype variable temp then we will save the data using the read   method and print right away using the print   method to implement the Echo function char temp   0loop    if   Serial2 available        temp   Serial2 read      Serial2 print temp       The entire code is shown below void setup    Serial2 begin 57600 byte temp   0  void loop    if   Serial2 available        temp   Serial2 read      Serial2 print temp   Let us implement it in an interrupt driven method as shown below  The interrupt of a Serial device is configured as a function that does not have a return type and contains one bytetype argument  And here if we print the data given by the print   method right away then we have implemented the Echo function  You can implement and use in any location without separately defining a prototype void serialInterrupt byte buffer     Serial2 print buffer Inside setup   we can configure the implemented serialInterrupt   as a function pointer format using attachInterrupt   Serial2 attachInterrupt serialInterrupt    The entire code for inputting data of Serial 2 using the interrupt is shown below void setup    Serial2 begin 57600   Serial2 attachInterrupt serialInterrupt void serialInterrupt byte buffer     Serial2 print buffer   void loop      Code is not necessary Let us print data using the SerialUSB device Use the MicroB USB connector of OpenCM9 04 to connect directly to the PC as shown below  In this example we communicate with the PC only using OpenCM9 04 without any device such as LN101 You must perform an initialization for the SerialUSB device as shown below and then perform the following examples in loop    There is no designation of Baud rate void setup    SerialUSB begin  void loop      Test example codeThe instructions to use it is almost the same as for the Serial devices  You can control it in the same way by using print   and println   methods SerialUSB print CM900 is the first product of CM9 Series   SerialUSB println  println   ends this line   SeirlaUSB println This is new line     This will print 12 as a decimal number    cSerialUSB print 12   This will print through an inttype variable int abc   128  SerialUSB print abc   This time we will print the value of variable abc as a hexadecimal value SerialUSB print abc  16   This will print the value 128 of variable abc as a hexadecimal value  which is 0x80 SerialUSB print abc  2   This will print the value 128 of variable abc as a binary value  In the same way  if you set the second argument as 8 then it will print as an octal value  and if there is no second argument then by default it will print as a decimal value SerialUSB println 3 14   This will print 3 14 as a Double type and then change lines  It will print to 2 decimal places  You can also define a variable Double and then print it double  var   1 234  SerialUSB println var   Let us receive data using the Serial USB device We will implement an Echo function using the Serial USB device  When data comes to the Serial USB device through a chartype variable temp then we will save the data using the read   method and print right away using the print   method to implement the Echo function char temp   0  loop      if   SerialUSB available          temp   SerialUSB read      SerialUSB print temp   The entire code is shown below void setup    SerialUSB begin  byte temp   0  void loop    if   SerialUSB available        temp   SerialUSB read      SerialUSB print temp   Let us implement it in an interrupt driven method as shown below  The interrupt of the Serial USB device is configured as a function that does not have a return type and contains a bytetype argument and a byte  argument  And here if we print the data given by the print   method right away then we have implemented the Echo function  If you write data to the USB COM Port through the PC’s terminal it will send 1 byte at a time so it is sufficient to set nCount  1 and Echo only the Index 0 data of the buffer void usbInterrupt byte nCount  byte  buffer   SerialUSB print buffer 0  Inside setup   we can configure the implemented usbInterrupt   as a function pointer format using attachInterrupt  SerialUSB attachInterrupt usbInterrupt We can leave the loop   function as an empty function as shown below void loop  The entire code for using the Interrupt of the SerialUSB device is shown below void setup    SerialUSB begin    SerialUSB attachInterrupt usbInterrupt void usbInterrupt  byte nCount  byte  buffer     SerialUSB print buffer 0    void loop      Code is not necessary External InterruptLet us write a code that turns the LED off and on when the signal input to Pin 7 changes  Connect the switch connected to the 3 3V to Pin 7 as shown below  We will use the internal input pulldown option without using the external pulldown circuit  In the same way connect the LED and resistor to the 3 3V and then connect it to Pin 13  Be cautious of the direction of the LED Let us use a global variable to make a flag and apply the method of toggling the flag in the interrupt routine whenever the signal from Pin 7 changes volatile int state   LOWIn setup   we will configure the external interrupt with the attachInterrupt   function and define the related Pin 7 as INPUT_PULLDOWN in pinMode pinMode 7  INPUT_PULLDOWN attachInterrupt 7  LedChange  CHANGE We will implement LedChange    as a void LedChange  void  type void LedChange     if state    HIGH   state   LOW  else  state  HIGH  loop      digitalWrite BOARD_LED_PIN  state The entire code is shown below Dynamixel InstructionsThe Dynamixel used in the example below will be under the premise that ID 1 and the communication speed have all been initialized to 1Mbps  Even though the Dynamixel class has not been defined explicitly  we will assume that is has been predefined as shown below Dynamixel Dxl 1     Dynamixel Bus on Serial1 USART1 Let us read the model number and firmware version of AX12A In the Emanual the address value of the model number and firmware version in the Control Table is shown below In AX12A  for which the ID number is 1  we will read from address number 0 which corresponds to the model number’s loworder byte and from address number 2 which corresponds to the firmware version information  They are all 1 byte so we can use a bytetype variable byte nModel   Dxl readByte 1  0     First we read the model numberbyte vFirmware   Dxl readByte 1  2     Then we read the firmware version We will print as below SerialUSB print Model Number   SerialUSB print nModel SerialUSB print  Firmware Ver   SerialUSB println vFirmware We will read the internal temperature of AX12A  for which the ID number is 1 The address value that corresponds to the internal temperature of AX12A in the Control Table is shown below Using the same method we will read one byte using readByte   byte temp   Dxl readByte 1  43 SerialUSB print Current Temperature   SerialUSB println temp Let us configure the ID as 2 for AX12 We will record 1 byte in the address number 3  which corresponds to the Dynamixel ID  using the method writeByte   void setup    Dxl begin 1   delay 1000      It is good to give about 1 second of delay   Dxl writeByte 1  3  2    Changes the ID number 1 of the Dynamixel to ID number 2void loop    Dxl writeByte 2  25  1     LED Blinking using the changed ID number  delay 100   Dxl writeByte 2  25  0   delay 100 If the change in ID number successfully finishes the Dynamixel’s LED will blink Let us change the Baud Rate to 57600 bps The communication speed of the Dynamixel can be changed by using the Baud rate in address number 4  Similar to change the ID number we will use the writByte   method  If we utilize the Dynamixel speed computation of 57 600bps then the index value comes out as 34  For the Dynamixel 2 0 protocol please refer to the new Baud rate table  for 57600bps the index value will be 1 void setup    Dxl begin 1   delay 1000      It is good to give about 1 second of delay   Dxl writeByte 1  4  34     34   57600 bps  Dxl begin 34     Initializes to the changed Baud rate  delay 1000 void loop    Dxl writeByte 1  25  1     delay 100   Dxl writeByte 1  25  0   delay 100 Since the Baud rate has been modified we need to initialize the Bus again to Dxl begin 34  Let us check whether the Dynamixel for which ID number is 1 has moved or not We can check the current movement status of AX12A by using the value 46 0x2E  in the Control Table byte bMoving   Dxl readByte 1  46 If the Dynamixel with ID number 1 is currently moving then the value 1 will be returned for the variable bMoving  and if it is not moving then the value 0 will be returned Let us move the AX12A Dynamixel to a location of 150 degrees To move the Dynamixel to the desired location  150 degrees  we need to input the desired location to the address that corresponds to the Goal Position  It is composed of 2 bytes  a loworder byte and a highorder byte  as shown below  and instead of accesses them individually we recommend recording 2 bytes  1 word  to the loworder byte 30 0x1E  using writeWord   In the Emanual we can check that the location that corresponds to 150 degrees it matched to 512 as shown below Dxl writeWord 1  30  512 Now check if the communication was successful using the function Dxl getResult   For each RX64 let us move them each to the following locations and speeds  After we finish moving them we will return them all to their original location of 0  This action will be repeated continuously Let us create a Sync Write packet data that we will send to each Dynamixel  We will create a Sync Write packet data for the 0 location and another packet data to save the goal position and speed  define PACKET_LEN 12 define NUM_OF_DATA 2int SyncPage1 PACKET_LEN    1  010  150   2  220  360   3  020  170  4  220  380int SyncPage2 PACKET_LEN    1  0  0   2  0  0   3  0  0  4  0  0void loop    Dxl syncWrite 30  NUM_OF_DATA  SyncPage1  PACKET_LEN   delay 1000   Dxl syncWrite 30  NUM_OF_DATA  SyncPage2  PACKET_LEN   delay 1000 Let us restrict the movement angle to 0 150 degrees If the CCW Angle Limit is 0x3FF then it is 300 degrees  so we will send 0x200 which corresponds to 150 degrees using the writeByte   method Caution If you set the CCW Angle Limit in number 8 to 0 then it will change to wheel mode and you will not be able to control the Goal position Dxl writeWord 1  8  0x200 if  Dxl getResult      COMM_RXSUCCESS      Check if the communication was successful…Let us configure the movement voltage to 10V   17V The data for 10V is 100 0x64   and the data for 17V is 170 0xAA   so we use the writeByte   method for each of them to record the lower and upper limits  The Control Table addresses for them are lowerrange voltage  12 0x0C  and upperrange voltage   13 0x0D  respectively Dxl writeByte 1  12  100 Dxl writeByte 1  13  170 if  Dxl getResult      COMM_RXSUCCESS      Check if the communication was successful…Let us limit the torque to only 50% of its maximum value We will configure the MAX Torque value from its maximum value 0x3FF to 50% which is 0x1FF  We will write the data to the Max Torque’s lowerorder byte address 14 0x0E  using writeByte   Dxl writeByte 1  14  0x1FF    if  Dxl getResult      COMM_RXSUCCESS      Check if the communication was successful…You need to turn the power off and then restart the power for the Max Torque to change Let us move to the Position of 180 degrees with speed 57RPM Moving Speed  Address 32 0x20      512 0x200 Goal Position  Address 30 0x1E      512  0x200   We will access data by units of words as shown below  Dxl writeWord 1  32  512      Configure the speed as 57 RPM Dxl writeWord 1  30  512       Move to location 180 degreesif  Dxl getResult      COMM_RXSUCCESS      Check if the communication was successful…Move AX12 which has ID number 0 to location of 0 degrees  and move AX12 which has ID number 1 to location of 300 degrees   We will start with borth AX12 in the same position Similar to Syncwrite  we will create a Packets directly using the setTxPacketXXX   method  In this case we will make a Packet using INST_REG_WRITE and INST_ACTION  Note that the location of 1 degrees corresponds to 0  and the location of 300 degrees corresponds to 1023 0x3FF  ID 0  Instruction   INST_REG_WRITE  Address   30 0x1E   Data   0ID 1  Instruction   INST_REG_WRITE  Address   30 0x1E   Data   1023Dxl setTxPacketId 0     We specify the control of ID number 0 Dxl setTxPacketInstruction INST_REG_WRITE Dxl setTxPacketParameter 0  30     Goal Position AddressDxl setTxPacketParameter 1  Dxl getLowByte 0      Low ByteDxl setTxPacketParameter 2  Dxl getHighByte 0      High ByteDxl setTxPacketLength 5     Total data length   Data length   3Dxl txrxPacket  if  Dxl getResult      COMM_RXSUCCESS      Check if the communication was successful…Sending packet for the second DynamixelDxl setTxPacketId 1 Dxl setTxPacketInstruction INST_REG_WRITE Dxl setTxPacketParameter 0  30     Goal Position AddressDxl setTxPacketParameter 1 Dxl getLowByte 1023     Low ByteDxl setTxPacketParameter 2  Dxl getHighByte 1023     High ByteDxl setPacketLength 5 Dxl txrxPacket  if  Dxl getResult      COMM_RXSUCCESS      Check if the communication was successful…To execute the Instruction that was on standby in the registers of Dynamixels number 0 and 1  send the Packet INST_ACTION Dxl setTxPacketId BROADCAST_ID Dxl setTxPacketInstruction INST_ACTION Dxl setTxPacketLength 2 Dxl txrxPacket  if  Dxl getResult      COMM_RXSUCCESS      Check if the communication was successful…We recommend checking if the communications was successful after creating and sending each Packet RC100How to connect OpenCM9 04 using RC100 by using OpenCM’s RC100 library we can control OpenCM9 04 remotely  Below you can see the various wireless connections that you can make between OpenCM9 04 and RC100 The RC100 library will only work normally if a communication model is connected to the 4 pin communication port of OpenCM9 04 Please refer to the RC100 for information on the RC100 communication packet Bluetooth connection using RC100B   BT100 or BT210  Connecting to the RC100 controller using BluetoothZigBee connection using RC100B   ZIG100 ZIG110A  Connecting OpenCM9 04 and the RC100 controller using ZigBeeInfrared connection using RC100B   IR Receiver OIR10Please refer to OIR10 for information on infrared communication methods for RC100A or RC100B Bluetooth connection using an Android smartphone   BT210For Android smartphones you can use the R  m Task application’s RC100 simulation to send RC100 packets  You can download R m Task through Google Play   Connecting OpenCM9 04 and your smartphone using Bluetooth – using the RC100 feature of R m TaskLet us make the Status LED of OpenCM9 04 blink when Button 1 of RC100 is pressed The RC100 library is used to process the RC100 packets in OpenCM9 04 The RC100 library can be started in 2 modes  the wireless communication mode and the infrared communication mode Wireless communication mode 1  – Bluetooth module BT210 BT110A   ZigBee module ZIG110A Infrared communication mode 2  – Infrared receiver OIR10 We will initialize to the RC100 library using the wireless communication mode  include  ltRC100 h gtRC100 ControllerController begin 1     RC100 init as remote modePlease refer below for defining each button of RC100  define RC100_BTN_U  1  define RC100_BTN_D  2  define RC100_BTN_L  4  define RC100_BTN_R  8  define RC100_BTN_1  16  define RC100_BTN_2  32  define RC100_BTN_3  64  define RC100_BTN_4  128  define RC100_BTN_5  256  define RC100_BTN_6  512 If the packet data read using the RC100 library is Button 1 then output the Status LED to LOW if Controller available   RcvData   Controller readData  if RcvData  amp RC100_BTN_1   digitalWrite BOARD_LED_PIN  LOW The entire code is shown below  and you can open the same code by selecting File  gt Examples  gt RC100  gt RC100_LED_Control In the same way  we will make the Status LED blink using the OIR10 Infrared receiver We will initialize the Infrared communication mode to the number 2 as shown below  include  ltRC100 h gtRC100 ControllerController begin 2     RC100 init as IR modeThe remaining actions are the same as the previous example BKP LibraryThe BKP Memory always preserves the data as long as the power is kept on so it is useful for temporarily saving user data or important data and then  after returning from reset  accessing the data again  The OpenCM board provides API for the BKP Memory as an external library  Select File  gt Examples  gt  BKP  gt ReadWrite as shown below Once you select the examples the following codes appear Example ExplanationIn setup   we initialize the BKP Memory and initialize the Serial2 device to 57600bps  Then print Start OpenCM9 04 BKP Memory Test through Serial2 and start loop   STM32F103CB of OpenCM is composed of a BKP Memory with a total of ten 16bit registers In loop   we will output data from addresses 1 to 10 with a 1 second interval  and when include BKP hBKP BKP_MEMORYint ivoid setup       Initialize clock and registers for BKP    BKP_MEMORY begin    Serial2 begin 57600   Serial2 println Start OpenCM9 04 BKP Memory Test void loop   delay 1000  for i 1 i lt11i      Serial2 print BKP Memory Read       Serial2 println BKP_MEMORY read i    if Serial2 available          BKP_MEMORY enable     for i 1 i lt11i        BKP_MEMORY write i i 10           BKP_MEMORY disable   An important property of the BKP Memory is that even if you press Reset and the CPU restarts  the BKP Memory values will remain the same However if you unplug the power and then plug in the power again the data will disappear  Below you can check the property of the BKP Memory using the output value ",
      "url": "http://0.0.0.0:4000/docs/en/software/opencm_ide/getting_started/"
      } ,
  
  
      "docs-en-software-rplus1-dynamixe-wizard":  {
      "title": "Dynamixel Wizard",
      "content"	 : "IntroductionDynamixel Wizard helps the users manage Dynamixel more easily The main roles of the program are as follows  Manage Dynamixel’s firmware   Check Dynamixel’s status   Set up the necessary modes Connecting Dynamixel  Connect Dynamixel to PC through USB2Dynamixel           Please refer to USB2Dynamixel for how to connect       The appropriate power cable for Dynamixel must be connected separately             Select the communication port         If the relevant port is appeared as In Use  then Dynamixel Wizard cannot be used         Search Dynamixel  The search range can be set  if necessary             Check the searched Dynamixel in the list on the left             Start the management   Please refer to how to manage for each Dynamixel        Firmware UpdateFirmware is a program installed in Dynamixel  and it controls Dynamixel Dynamixel Wizard automatically detects a new firmware through internet and always keeps it updated How to update Dynamixel Firmware      If Dynamixel is searched  the icon of Dynamixel is checked  and it announces the update is possible as below  Select the relevant Dynamixel  and then click firmware update button             The firmware update is started with simple messages  Especially  please be careful not to disconnect or turn off the power during the update             The name of currently connected Dynamixel model and firmware information can be checked             If Next button is clicked  the firmware update is started  Please be careful not to disconnect or turn off the power until the update is completed             The installation result of Dynamixel firmware is checked       Firmware RecoveryIf any problems occur in Dynamixel firmware  Dynamixel Wizard can restore the firmware Caution Every data value will be initialized after the firmware restoration  Please check once again the ID and Baud rate before executing the program if you restored the firmware Please check the mode on the USB2Dynamixel  3 pin cables should be set to TTL and 4 pin cables should be set to the RS485 switch How to Restore Dynamixel Firmware      Execute Dynamixel Firmware Restoration Wizard  Execute Dynamixel Firmware Wizard by clicking firmware restoration button on the tools  When COM port is connected  the corresponding button will be inactivated  Then  please disconnect the port  and start the firmware restoration wizard             Dynamixel Firmware Restoration Wizard is started with simple messages             Connect only 1 Dynamixel when Dynamixel firmware is being restored             Select Dynamixel Connection Port Dynamixel cannot be searched automatically because the firmware is not recognized  Therefore  the users must set the Dynamixel connected port manually   Since Dynamixel cannot be recognized if the port is in use  finish other programs  and then continue the procedure  Select USB2Dynamixelconnected port and press Search button             Turn off the power of Dynamixel and then turn it back on  Turn off the power of Dynamixel for restoration and then turn it on again to detect Dynamixel             If Dynamixel search is succeeded  you can see the window as below             Select Dynamixel Firmware If Dynamixel is found  the information of downloadable firmware is appeared   The users must select the correct model because the model name cannot be recognized automatically in Dynamixel firmware restoration mode  If an incorrect model is chosen  it is not operated normally             Restore Firmware Click Next button to start firmware restoration   Please be careful not to disconnect or turn off the power until it is completed             Check Dynamixel Firmware Restoration Result       Test and SetupManagement WindowThe window for Dynamixel test and set up is as below If the search is complete   the searched Dynamixel is appeared on the left of the list When the correct Dynamixel is selected from the list to test setup as below  a appropriate management window is displayed on the right The window helps the users manage Dynamixel more easily   Please refer to Dynamixel manual for more information regarding each function MX Series CalibrationIf during gear replacement the horn’s position becomes misaligned position can be realigned with calibration Attention This feature is only available in the MX series MX Series Calibration Procedure      Connect hardware Connect the MX hardware to USB2Dynamixel  Select the switch to either TTL or RS485  Use a separate power supply for the calibration adapter             Run Dynamixel Wizard and click on the calibration icon  Click on the calibration icon before selecting the COM port            Begin Dynamixel calibration            Connect only one Dynamixel at a time             Select Dynamixel connection port  If the firmware does not allow connection then automatic connection is not possible  In such case select the port manually and connect  If Dynamixel cannot be detected by the port due use by another program then close that other program and start again  Select the port and click on the search icon             Dynamixel power on off Turn power off and on for search  A message will pop for successful search             Select connected Dynamixel                Install Dynamixel calibration firmware             Select first position             Select second position            Select third position            Select fourth position            Calibration complete      Videos",
      "url": "http://0.0.0.0:4000/docs/en/software/rplus1/dynamixe_wizard/"
      } ,
  
  
      "docs-en-software-rplus1-manager":  {
      "title": "R+ Manager 1.0",
      "content"	 : "IntroductionRoboPlus Manager is used to handle devices used by a robot Major functions of this program are as follows Manage controller firmware   Update and Restore Inspect the status of the controller and peripheral devices   Test Set the required modes   Settings InstallDownload RoboPlusRoboPlus is a software to create a customized programme for every ROBOTIS product RoboPlus System Requirements  OS  Windows XP Service Pack 2 or above   Vista  7  32 64bit  8  32 64bit   32bit x86  or 64bit  x64  processor with over 800MHz  Graphic card with 3D acceleration  System memory over 512MB  Hard disk with the extra space of 500MBNote To execute RoboPlus   NET FrameWork 3 5 or higher version is required  When installing RoboPlus  if the automatic installation of  NET FrameWork fails   NET FrameWork must be installed separately RoboPlus Install FailureMost reason for installation failure is caused by  NET Framework install error  Please manually intsall Windows Installer 3 1 and  NET Framework 3 5Windows installer and  NET Framework can be downloaded from Microsoft Download Center Download Windows installer 3 1   NET Framework 3 5Getting StartedConnect Controller  Connect controller to the PC   Please refer to each controller information for connecting the controller to the PC        Select the communication port to use  Use the Automatic Search function to easily select the appropriate port         If the chosen communication port is being used by another program  you must first find and stop the program         If RoboPlus Manager is unable to find a controller  the following error message will be shown               Check if the controller is connected to the PC   See controller information for information on how to connect the controller        Check if the controller is turned on       Check if the correct communication port was chosen         Start management   Please refer to the managing information of each controller  Firmware ManagementFirmware UpdateFirmware is the program installed in the controller  and is used to execute  tsk programs or to manage the controller RoboPlus Manager automatically connects to the internet and searches for firmware updates Updating Controller Firmware      When the controller is connected  the controller’s firmware version will be retrieved  If a newer firmware is available  it will ask whether to download the latest firmware             When the ‘OK’ button is pressed  it will begin updating the firmware             You can check your controller’s model number and firmware version             Press the Next button to begin updating your firmware  Be careful not to turn the power off or disconnect the cable while the firmware is being updated             Once the firmware has been updated  Press the Finish button to return to the controller maintenance page       Firmware RecoveryWhen there is a problem with the controller’s firmware  RoboPlus Manager can be used to recover the firmware For CM150 and CM200  you will need the latest RoboPlus Manager  ver  1 0 31 0 or higher  to execute the recovery Recover Controller Firmware      Connect the controller to the PC using LN101             Run RoboPlus Manager and open the controller firmware management wizard  On the menu bar  click the firmware management button to run the firmware wizard   CM150 and CM200 require some presteps prior to proceeding  Please refer to the message below                  Select the port number for connecting the controller  Because the firmware is broken  the controller cannot be automatically found  So  you must manually select the port number the controller is connected to  The controller cannot be found if the port is being used  so please close other programs before proceeding  Select the port number then click search             Turn OFF then turn ON the controller  this process can be skipped for CM150 and CM200   Turn OFF and turn ON the controller to proceed with the recovery        Check the controller information  When the controller is found  the information for the firmware to be downloaded will be displayed  Please check whether the model name is the same as the name of the connected controller  the version on the controller information is the version of the boot loader  not the firmware             Firmware Recovery            Check the results of the firmware recovery      VideoHow to UseControllersCM5When the CM5 controller is connected to RoboPlus Manager  the following screen is displayed The controller and its peripheral devices are listed in the left window   In the right window is the controller management window If the controller’s firmware version is older than that of RoboPlus Manager  it can be updated   Please refer to the Firmware Update section CM510When the CM510 controller is connected to RoboPlus Manager  the following screen is displayed The controller and its peripheral devices are listed in the left window   In the right window is the controller management window If the controller’s firmware version is older than that of RoboPlus Manager  it can be updated   Please refer to the Firmware Update section CM530When the CM530 controller is connected to RoboPlus Manager  the following screen is displayed The controller and its peripheral devices are listed in the left window   In the right window is the controller management window If the controller’s firmware version is older than that of RoboPlus Manager  it can be updated   Please refer to the Firmware Update section CM700When the CM700 controller is connected to RoboPlus Manager  the following screen is displayed The controller and its peripheral devices are listed in the left window   In the right window is the controller management window    Please refer to the Test page  If the controller’s firmware version is older than that of RoboPlus Manager  it can be updated    Please refer to the Firmware Update section General Detail SearchRoboPlus Manager has two search modes General Search  Search for Dynamixels connected at 1Mbps   Search speed is fast because it searches for only Dynamixels connected at 1Mbps   Dynamixels connected at other speeds are not found Detail Search  Search for Dynamixels connected at every possible communication speed   Search speed is slower because it searches for Dynamixels connected at different communication speeds   The Dynamixel that are not connected at 1Mbps are automatically adjusted to 1Mbps Note If a Dynamixel is no longer detected after a detailed search  there might be an ID duplication   In this case  connect only the undetected device  and change its ID to an unused one   Refer to the ID Setup section  Aux LEDThis parameter is used to turn the controller’s Aux LED on or off CharacteristicThe controller’s Aux LED can be manipulated using the On Off button Corresponding RoboPlus Task Command  Parameter  Aux LED  Constants  True FalseButtonThis parameter is used to read the controller’s button status  whether it is pressed  CharacteristicWhen a button on the controller is pressed  you can see which button has been pressed Corresponding RoboPlus Task Command  Parameter  Button  Constant ButtonTimerThis parameter is used to set or read the controller’s timer Characteristics  The timer can be set and the actual time can be checked   Timer value is between 0 and 255   When the timer is set  it will start to count every 0 128 seconds  and you will be able to see how much time is left Corresponding RoboPlus Task Command  Parameter  Timer  Constants  Timer ValuesHigh Resolution TimerInternally the controller sets a counter this is the parameter for the high resolution timer This timer is set for every 1ms  useful for more accurate timing Characteristics  The timer can be set and the actual time can be checked   Timer value is between 0 and 65535  Timers shows 1 unit for every 1ms  When the timer is set  it will start to count every 0 001 seconds  and you will be able to see how much time is left Corresponding RoboPlus Task Command  Parameter  HR Timer  Constants  Timer ValuesRemocon IDThe parameter is used to set or read the ID of the ZigBee communication module that communicates with the robot’s Zigbee module Characteristics  This parameter is meaningful only when ZigBee module is connected   The ID is a number between 0 and 65535   When the opponent’s ID is set to 65535  data is sent to all ZigBee modules  regardless of ID   For 11 communication  the ID’s of both ZigBee modules must be correct Corresponding RoboPlus Task Command  Parameter  Remocon ID  Constant  NumberMy IDThis parameter is used to read the ID of the ZigBee module installed in my robot Characteristics  If a ZigBee module is not installed  0 will be returned   If a ZigBee module is installed  its ID is read  a number between 0 and 65534  Corresponding RoboPlus Task Command  Parameter  My IDSound CountSounds can be detected using the microphone in the controller Characteristics  When a sound louder than a certain threshold  such as a clap  is made near the controller  it will be detected by the controller’s microphone   The maximum number of sounds counted is 255   When sounds are no longer detected  the number of detected sounds will be input into the Sound Count parameter   Because Sound Count is not initialized automatically  the user must reset it to 0 before use Corresponding RoboPlus Task Command  Parameter  Sound CountCurrent Sound CountIt is also possible to know how many sounds have been counted by the controller’s microphone so far Characteristics  The maximum number of sounds counted is 255   The parameter value is increased in realtime whenever a sound is detected   If a new sound is not detected for a certain period  the value of the Current Sound Count parameter is passed to the Sound Count parameter  and the Current Sound Count parameter is reset to 0 Corresponding RoboPlus Task Command  Parameter  Current SoundBuzzer IndexThis parameter is used to set the musical note played by the controller’s buzzer Characteristics  Depending on what the Buzzer Time is set to  Buzzer Index can be set to play a musical note or a melody   Please refer to the Buzzer Time parameter for information on sound modes   If the Buzzer Time parameter is not set to melody mode  a melody will not be played even if it is selected   In musical note mode  the note will be played for the length set as Buzzer Time   In melody mode  when a melody is set  it is played to the end   There are 16 melodies  015  and 27 musical notes  026    If the Buzzer Time is 0  the parameter is automatically set to 3 and the note is played Corresponding RoboPlus Task Command  Parameter  Buzzer Type  Constants  Melody  Scale Values Buzzer TimeThis parameter is used to set the sound mode and how long the note or melody will be played Characteristics  If the Buzzer Time parameter is set to a  value between 0 and 50  the sound mode is set to musical note mode   The note will be played for the length set as Buzzer Time   If the Buzzer Time parameter is set to 255  the sound mode is set to melody mode   When the note or melody finishes playing  Buzzer Time is automatically reset to 0 Corresponding RoboPlus Task Command  Parameter  Buzzer Time  Constant Numbers  Melody  Scale ValuesExterior I O DevicesThe controller supports exterior I O devices  such as IR sensors  touch sensors  and DMS sensors Characteristics  Most devices support only reads  but a few also allow writes   After connecting and setting up an exterior I O device  you can check its values   For user’s devices  you can set which values are returned   Exterior I O devices are not recognized automatically  so the user must manually set the device   IR sensors  touch sensors  DMS Sensors  and user’s devices are supported   If you read without connecting a device  a random value will be returned  This value is meaningless   When the port and device are set  the address will be set automatically  This address can be used during programing Corresponding RoboPlus Task Command  Parameter  User’s DevicesDynamixelIn the program as shown below  users can set up and test Dynamixels   Dynamixels found using the Scan or Search function are listed   All devices connected to the controller  including sensors such as AXS1  are detected      Choose an actuator to manage from the list on the left   Parameters that can be set and tested for each device are shown in the table   Clicking on a Dynamixel Name ID  will call a subwindow to set or test the parameter  The subwindow simplifies the process of setting the parameter for the user   The image above is a screen shot of RoboPlus manager when the Goal Position parameter is clicked   A subwindow is shown on the lower right hand corner when any row is clicked   However  no subwindow will be displayed if only values need to be shown Note When an actuator with an ID in ① is double clicked  the actuator is selected and its LED will blink for a moment  This is used to check where the actuator is located Note Actuators can be managed in a group ID SetupEach Dynamixel has its own ID  and the controller manages each Dynamixel using its ID   This parameter is used to manage the Dynamixel’s ID  Please refer to Dynamixel Management for more information about changing ID Characteristics  Once this value is set  it will be saved  even when the power is turned off   Click on the ID list to see a list of ID’s that can be changed   Values not shown in the ID list are being used by other Dynamixels   An ID may be any number between 0 and 253  except 200  which is reserved for the controller Position Limit and ModeThis parameter is used to limit the position of the actuator or to set the movement mode  Please refer to Changing the Movement Mode for more information about changing Movement Mode Characteristics  Once this value is set  it will be saved even when the power is turned off   The position limitation value for both clockwise and counterclockwise rotation can be set  and its value affects the value of the Goal Position parameter   The actual angle for the set value is displayed Movement Mode  Wheel Mode          When both the CW Postition Limitation Value and  CCW Position Limitation Value are set to 0  the movement mode is set to Wheel Mode  Endless Rotation Mode        When the Wheel Mode button is pressed  the position limitation values are automatically set to 0         Joint Mode          The actuator will operate in Joint Mode in all other cases       Drive ModeTis parameter is used to set the drive mode of EX actuators   Depending on the drive mode  the Ex actuator’s special modes  such as dual mode and reverse mode can be used   Please refer to EXseries Dual Mode Setting for detailed information about drive mode Characteristics  Master Slave and Normal Reverse modes can be set   The setting values of an actuator in slave mode will be synchronized with the setting values of the master actuator   When the Master Slave mode is set  the control table will be updated to reflect the mode  For example  in slave mode  the position value cannot be set   Therefore  RoboPlus Manager does not display tables for unnecessary values     In reverse mode  the position values are reversed  Position values 0 and 4095 have opposite meanings as goal position values  Temperature SettingThis parameter is used to set the temperature limit for Dynamixel movement Characteristics  Once this value is set  it will be saved even when the power is turned off   The actual temperature for the set value is displayed   If the actuator’s temperature goes over the limit  the LED will blink or the actuator will stop moving depending on the setting   Unless otherwise specified  it is recommended to use the default value TemperatureThis parameter is used to read the Dynamixel’s current temperature Characteristic  The Dynamixel’s temperature is returned in realtime Corresponding RoboPlus Task Command  Parameter  TemperatureVoltage SettingThis parameter is used to set the voltage limit for Dynamixel movement Characteristics  Once this value is set  it will be saved even when the power is turned off   The actual voltage for the set value is displayed   The maximum voltage value and minimum voltage value can be set   If the actuator’s voltage exceeds the limit  the LED will blink or the actuator will stop moving depending on the setting   Unless otherwise specified  it is recommended to use the default value VoltageThis parameter is used to read the Dynamixel’s current voltage Characteristic  The Dynamixel’s voltage is returned in realtime Corresponding RoboPlus Task Command  Parameter  VoltageAlarm  amp ShutdownThe LED alarm or shutdown operation can be set for specific cases Parameter Characteristics  Once this value is set  it will be saved even when the power is turned off   The actuator can be set to automatically stop its movements using the shutdown operation   By using the shutdown operation  Dynamixels can be protected from problematic situations  such as current overloads  overheating  and abnormal movements   The LED alarm or shutdown operation can be triggered by the following errors           Instruction Error  A wrong command is received       Overload Error  The current load is larger than the limit       Checksum Error  The checksum of the received command is incorrect       Range Error  The received command requires movements that are outside the actuator’s boundaries       Overheating Error  The actuator’s current temperature is higher than the maximum operating temperature      Angle Limit Error  The actuator has moved farther than its limit       Input Voltage Error  The input voltage is lower than the minimum possible voltage or has exceeded the maximum possible voltage      Torque EnableThis parameter is used to turn the actuator on or off Characteristics  If the value is 0  the actuator’s torque  is turned off  i e  the horn is free to rotate    If the value is 1  the actuator’s torque is turned on   The torque can easily be turned on or off using the On Off command   If the goal position is set when the actuator is turned off  the actuator will automatically turn on and this parameter will be set to 1 Corresponding RoboPlus Task Command  Parameter  Torque Enable  Constants  True  FalseLEDThis parameter is used to turn the Dynamixel’s LED on or off Characteristics  If the value is 0  the LED is turned off   If the value is 1  it is turned on   The LED can easily be turned on or off using the On Off command   The LED cannot be manipulated when the LED alarm is triggered Corresponding RoboPlus Task Command  Parameter  LED  Constants  True FalseCW CCW MarginThis parameter is used to set the actuator’s compliance margin Parameter Characteristics  The margin designates the area around the goal position that receives no torque   Set appropriate values for CW CCW slope  torque limit   and CW CCW margin  for smoother movements Corresponding RoboPlus Task Command  Parameter  CW CCW MarginCW CCW SlopeThis parameter is used to set the actuator’s compliance slope Parameter Characteristics  The slope value will be created at both CW CCW  directions  and the output level will be set near the target position   If you set the lower slope value  it will reach to the target position by reducing the initial power NOT that much  On the contrary  if you set the higher value  it will reach the target position by reducing considerable powers as it reaches to the goal   If you set the lower slope value  it will resist with maximum power not to stray from target position   Even if you set the higher value  it will resist with more and more power if it is strayed too much from target position   Compliance Slope will be changed into 7 Data representative values according to the input Data  In other words  if you input 25  in real operation  16 the representative value of 25  will be used             Level      Real Data Value      Representative Data Value                  1      0  0x00    3 0x03       2  0x02               2      4 0x04    7 0x07       4  0x04               3      8 0x08  15 0x0F       8  0x08               4      16 0x10  31 0x1F       16  0x10               5      32 0x20  63 0x3F       32  0x20               6      64 0x40  127 0x7F       64  0x40               7      128 0x80  254 0xFE       128  0x80         Appropriate Compliance Slope  Power control  and the Compliance Margin values will make it possible to create smoother movement Corresponding RoboPlus Task CommandParameter  CW CCW SlopeGoal PositionThis parameter is used to set the actuator’s goal position Characteristics  The value can be set using a jog dial   When this value is set  the actuator will immediately move to the goal position   The value is affected by moving speed position limitation  CW CCW slope  and CW CCW margin parameters   Even when the torque is turned off  as soon as the value is set  it will be turned on   When the center position button is pressed  the value is set to the center position Corresponding RoboPlus Task Command  Parameter   Goal Position  Constants  Position ValuesMoving SpeedThis parameter is used to set the speed of the actuator Characteristics  In joint mode  the speed is affected by compliance slope and compliance margin values   In joint mode  set the value as 0 to output at maximum power   In wheel mode  endless rotation mode   the speed and rotating direction depend on the moving speed value   The movement mode can be set using the position limitation parameter   The control used to set the speed is different for each mode Corresponding RoboPlus Task Command  Parameter Moving Speed  Constants  Motor Control ValuesTorque LimitThis parameter is used to set the maximum load on the actuator Characteristic  The LED alarm may be triggered or the movement may be stopped depending on the torque limit  LED alarm  and shutdown settings Corresponding RoboPlus Task Command  Parameter  Torque LimitPresent PositionThis parameter is used to read the actuator’s current position Characteristic  The value changes in realtime to reflect the actuator’s movement Corresponding RoboPlus Task Command  Parameter   Present PositionPresent SpeedThis parameter is used to read the actuator’s current speed Characteristic  The value changes in realtime to reflect the actuator’s movement Corresponding RoboPlus Task Command  Parameter  Present SpeedPresent LoadThis parameter is used to read the actuator’s current load Characteristics  The value changes in realtime to reflect the actuator’s movement   When the motor is turned off  this value is meaningless RoboPlus Task Referring Command  Parameter   Present Load MovingThis parameter is used to determine whether the actuator is currently moving or not Characteristic  If the value is 0  it is not moving  If the value is 1  it is moving Corresponding RoboPlus Task Command  Parameter MovingSensed CurrentThis parameter is used to check the current being consumed CharacteristicsEXSeries  If the value is 512  the current is 0 ampere   That is  there is no current flowing   If the value is larger than 512  the current is rotating the motor clockwise  and the size of the current is proportional to the size of the data   1   aprroximately 10 mA   For example  if the data is 612  1A  612512 100   gt 100x10mA   1 000mA  is being used to rotate the motor in the clockwise direction   If the value is smaller than 512  the current is rotating the counterclockwise  and the size of the current is proportional to the size of the data   1   aprroximately 10 mA   For example  if the data is 312  2A  512312  200   gt 200x10mA   2 000mA  is being used to rotate the motor in the counterclockwise direction MXSeries  If the value is 2 048  the currnet is 0 ampere   That is  there is no current flowing   If current flows in normal direction then output values are larger than 2 048   If current flows in the opposite direction then output values are smaller than 2 048  Current flow values are proportional to data values  value unit of 1   4 5mA units   For example if data reads 2 148 then 2 148  2 048   100  gt 100 x 4 5mA   450mA  The output current is 450mA in the normal direction Corresponding RoboPlus Task Command  Parameter   Sensed CurrentPID GainFor MXSeries actuator PID values read write availabilityCharacteristics  P gain refers to the value of proportional band   I gain refers to the value of integral action   D Gain refers to the value of derivative action   Gains values are in between 0 254 Corresponding RoboPlus Task Command  Parameter  PID GainIR Left Center RightFor AXS1 these parameters are used to read the DMS sensor value Characteristics  The current DMS sensor value of AXS1 can be read   The reflection angle of IR rays are measured  so objects the same distance away may return different values due to their color or surrounding light   The sensor value is between 0 and 255 Corresponding RoboPlus Task Command  Parameter  IR Left Center RightLight Left Center RightFor AXS1 this parameter is used to read the light brightness Characteristics  The current light brightness value of AXS1 can be read   The infrared rays emitted by nearby light sources such as candles and light bulbs can be measured   The sensor value is between 0 and 255 Corresponding RoboPlus Task Command  Parameter  Light Left Center RightObject DetectedFor AXS1 this parameter is used to determine whether an object is detected Characteristics  If an object is detected within a certain distance  specific bits are set as 1   From the left  the first bit represents the left sensor  the second bit represents the center sensor  and the third bit represents the right sensor   Values are returned as a combination of the bits RoboPlus Task Referring Command  Parameter  Object Detected  Constants  Binary numbersObject Detection ThresholdFor AXS1 this parameter is used to set the object detection threshold Characteristics  Set the object detection threshold to be used when determining whether an object is detected or not   The value is between 0 and 255   There is a shortrange detection mode and a longdistance detection mode   The shortrange detection mode is activated when the threshold value is set as Corresponding RoboPlus Task Command  Parameter  Object Detection ThresholdLight DetectedFor AXS1 this parameter is used to determine whether a light is detected Characteristics  If the AXS1’s IR sensor value is greater than the light detection threshold value  set the bits as 1   From the left  the first bit represents the left sensor  the second bit represents the center sensor  and the third bit represents the right sensor   Values are returned as a combination of the bits Corresponding RoboPlus Task Command  Parameter  Light Detected  Constants  Binary numbersLight Detection ThresholdFor AXS1 this parameter is used to set the light detection threshold Characteristics  Set the threshold to be used when determining whether a light is detected or not   The value is between 0 and 255 Corresponding RoboPlus Task Command  Parameter  Light Detection ThresholdSound DataFor AXS1 this parameter is used to read the volume of the sound detected Characteristics  Reads the volume of the sound being detected by AXS1   If no sounds are detected  the returned  value will be near 127   When sounds are detected  the value will change according to the volume   The louder the sound  the more the value will fluctuate from 127 to 0 and 255 is not clear  Whether the value will go up or down to sound value    The value is between 0 and 255 Corresponding RoboPlus Task Command  Parameter  Sound DataSound Max DataFor AXS1 this parameter is used to read the volume of the loudest sound detected Characteristics  Reads the maximum sound data detected by AXS1   If the detected volume is louder than the volume of the loudest sound up to that point   the max sound data is replaced with the detected value   The value is between 0 and 255   Because Sound Max Data is not initialized automatically  the user must reset it to 0 before use Corresponding RoboPlus Task Command  Parameter  Sound Max DataSound CountTheAXS1 is equipped with a function to count sounds louder than a certain threshold   For example  it is possible to count claps   This parameter is used to read or initialize the number of detected sounds Characteristics  Sound Count uses numbers between 0 and 255   When sounds are no longer detected  the number of detected sounds will be input into the Sound Count parameter   Because Sound Count is not initialized automatically  the user must reset it to 0 before use Corresponding RoboPlus Task Command  Parameter  Sound CountBuzzer IndexAXS1 is equipped with a buzzer   This parameter is used to set the musical note played by the buzzer Characteristics  After setting Buzzer Time  set Buzzer Index to play a sound using the buzzer   There are 52 musical notes that can be played  051    There are 27 melodies that can be played  026    Depending on what the Buzzer Time is set to  Buzzer Index can be set to play a musical note or a melody Corresponding RoboPlus Task Command  Parameter  Buzzer IndexBuzzer TimeAXS1 is equipped with a buzzer   This parameter is used to set how long the sound is played by the buzzer Characteristics  After setting Buzzer Time  set Buzzer Index to play a sound using the buzzer   Buzzer Time can be set to a value between 0 and 50   Each value represents 0 1 second   When it is set to 254  the sound will play without end   When it is set to 255  melodies will be played   When the melody finishes playing  Buzzer Time is reset to 0 Corresponding RoboPlus Task Command  Parameter  Buzzer TimeIR Sensor ValueFor IR Sensor Array these parameters are used to read the current IR sensor value Characteristics  Can read IR array’s current sensor values   The IR array’s receivers can detect walls and obstacles by measuring the amount of infrared reflection bouncing back  The closer the object the higher the value   The sensor value is between 0 and 1023 Corresponding RoboPlus Task Command  Parameter  IR Sensor ValueAuto Threshold ModeFor IR Sensor Array Setting for start set for automatic detection for set black Characteristics  Once LED’s blink when turned on and set values are on   When crossing between white and black the IR sensors automatically set values   Powers off when turned off Corresponding RoboPlus Task Command  Parameter  Auto Threshold ModeIR Obstacle DetectedFor IR Sensor Array Paramenters to determine IR array obstacle valuesCharacteristics  In the IR array if each IR sensor detected black value is lower than the set black valuethe values will be assigned as shown below the LED turns on   Output values are in decimal number             Binary value      Decimal value      Black detection                  0000001      1      Black detection for IR sensor  1              0000010      2      Black detection for IR sensor  2              0000100      4      Black detection for IR sensor  3              0001000      8      Black detection for IR sensor  4              0010000      16      Black detection for IR sensor  5              0100000      32      Black detection for IR sensor  6              1000000      64      Black detection for IR sensor  7      Corresponding RoboPlus Task Command  Parameter  IR Obstacle DetectedSet IR ThresholdFor IR Sensor Array Determine set values for black and white for the IR array Characteristics  Setting infrared values for presence of obstacles   Overall set values can be set by automatic parameter setting   Values range from 0 to 1 023 Corresponding RoboPlus Task Command  Parameter  Set IR ThresholdZIG2SerialFollow these steps to manage the Zig100 module through RoboPlus Manager using Zig2Serial       Attach Zig100 to Zig2Serial and connect Zig2Serial to the PC’s serial port  Please refer to ZIG2Serial for connection  If your PC does not have a serial port  you may use USB2Dynamixel  as in the picture below             Select the port to which Zig2Serial is connected and click the Zig2Serial Management icon   Unlike with a controller  this port cannot be detected automatically              The following screen is displayed when the Zig2Serial Management icon is pressed   Click the Zigbee Setting button             Press the reset button within 3 seconds of clicking OK         When the Zigbee module is connected  a window to set functions is displayed           Can check my ID and remote ID       Can change the remote ID       Can set to Broadcast mode       Can set to Wait mode                 If no ZIg100 module is detected  check whether the module has been connected properly         You can send receive data to from other wireless communication modules or create and send RC100 remote control signals ",
      "url": "http://0.0.0.0:4000/docs/en/software/rplus1/manager/"
      } ,
  
  
      "docs-en-software-rplus1-motion":  {
      "title": "R+ Motion 1.0",
      "content"	 : "IntroductionWhat is a Motion A motion is a set of actuator position and speed data necessary for robot movements In order for the robot to move  a motion file is required   A suitable motion file must be downloaded for the assembled robot A motion file is identified by the icon below  and its file extension is  mtn What is the relationship between a motion and task code A task code file is a program while a motion file is data   For better understanding  let us think about MP3 players and MP3 files  If there were no MP3 players  you will not be able to listen to music because MP3 file could not be played   The result is the same when there is an MP3 player but no MP3 file   If you want to make your robot move  you need a task code file   If the task code downloaded into your robot uses motions  you must download the motion file as well   If no motions are used in the task code  you do not need the motion file Note To use motions in a task code  the motion file must be downloaded InstallDownload  RoboPlus RoboPlus is a software to create a customized programme for every ROBOTIS product RoboPlus System Requirements  OS  Windows XP Service Pack 2 or above   Vista  7  32 64bit  8  32 64bit   32bit x86  or 64bit  x64  processor with over 800MHz  Graphic card with 3D acceleration  System memory over 512MB  Hard disk with the extra space of 500MBNote To execute RoboPlus   NET FrameWork 3 5 or higher version is required  When installing RoboPlus  if the automatic installation of  NET FrameWork fails   NET FrameWork must be installed separately RoboPlus Install FailureMost reason for installation failure is caused by  NET Framework install error  Please manually intsall Windows Installer 3 1 and  NET Framework 3 5Windows installer and  NET Framework can be downloaded from  Microsoft Download Center  Download  Windows installer 3 1     NET Framework 3 5 Getting StartedRobot MotionRobot Motion refers to the motion data in the controller These data can be seen and edited on the Robot Motion window This window is displayed only when the robot is connected  See how to Connect to Robot File MotionFile Motion refers to the motion data in the form of files in the PC These data can be seen and edited on the File Motion window Multiple File Motion windows can be displayed at once Connect to Robot  Connect the robot to the PC  Please refer to  Controller Information  for details       Select the communication port to use  Choose the communication port to which the robot is connected   If you don’t know the port number  use the Auto Searching function             Connect with the robot  Choose the Connect Robot menu         If you are unable to connect to the robot  please check following          Is the controller connected to the PC       Is the controller turned on       Was the correct port selected       Is the controller compatible with RoboPlus Motion                   CM100 is not compatible           CM5 is compatible only after a firmware upgrade                           Disconnect the Robot  To disconnect from the robot  choose the Exit menu or simply close the window       Download MotionFile motions can be converted into robot motions   Open the file motion to download   Connect to the robot       Click on the Download Motion menu and wait for the download to complete             Verify that the contents of the file motion have been copied to the robot motion as seen below         Download RoboPlus Program  for CM510 530 Play MotionYou can play the created motions  Search the page to play and click Play Motion   Errors may occur when trying to play motions           This error can be seen while working on a Robot Motion window  In this case  the page linked as Next or Exit has been modified  but the controller does not have enough memory to temporarily save it                   This can be solved by saving the page before execution   If you proceed without saving  only the current page will be played               This error can be seen while working on a File Motion window  In this case  the data in the PC is not the controller  and the controller does not have enough memory  to temporarily save the Next or Exit page                   You can execute only the chosen page   To play linked pages  you must download the motion to the robot       Stop MotionStops the motion that is being carried out Stop Motion does not stop execution right away   Instead  the Exit page is executed before stopping Emergency StopStops the motion that is being carried out Unlike Stop Motion  Emergency Stop halts execution immediately Motion EditingThings to be aware of before editing motions are introduced here Setting the Dynamixel IDThe motion player in the controller can control a total of 26 Dynamixels  from ID 0 to 25   Therefore  to create a motion with RoboPlus Motion  the ID of each Dynamixel must be between 0 and 25 Control PriorityDynamixels may be controlled by both RoboPlus Motion and RoboPlus Task  Generally  the control priority is as follows  RoboPlus Motion  ID of Dynamixel is between 0 and 25    RoboPlus TaskIn other words  once a motion is executed  the Dynamixel will be controlled by only RoboPlus Motion  and RoboPlus Task will have no control over the  Dynamixel  However  this control priority may be changed by users  if so desired There are 2 ways to change the control priority  In the motion data   gt Use ID Used NotUsed function   In the task code   gt Use the Joint Offset Parameter  The advantage of this method is that the control priority may be changed according to the situation Dynamixel Auto Shutdown FunctionDynamixels have an Auto Shutdown function  This function prevents Dynamixels from being damaged  The Auto Shutdown function will be triggered in the following situations   The motor has overheated due to an increase in internal temperature   The motor has been under too much load for an extensive period of time When the Auto Shutdown function is triggered  the following will be seen   The Dynamixel’s LED will blink   The motor will stop moving  resulting in no torque To solve this problem  the following steps must be taken   Resolve what triggered the Auto Shutdown function If the motor has overheated  let it cool with some rest If the motor is under too much load  remove some of the load   Turn off the Dynamixel and turn it back on When creating a motion  the joint may not move  This is because the Auto Shutdown function has been triggered by the causes listed above Pose EditingA pose is the robot’s position at a point in time   It is a collection of motor position values required for the posture       Pose of Step refers to the data values of the pose         Pose of Robot refers to the position values of the connected robot’s joints  When the Pose of Robot is modified  the robot will move accordingly   Basic Pose EditingThe Basic Pose Editor is a simple editor that may be used for any type of robot  To change the number of ID’s used at Pose of Step  use the ID Editing Function Select Actuator IDClick on a row to select an actuator The following methods may be used to select multiple actuators       To select actuators in consecutive order               Drag with mouse       Select actuators while holding down the Shift key             To select actuators separately               Select actuators while holding down the Ctrl key             To select all actuators                   Press the button in the upper left corner                             Click on the Select All menu                     Torque On OffThe Torque On Off function enables you to make a pose manually by turning the robot’s joints on or off This function is only available in Pose of Robot If the torque is on  its position value will be shown  Otherwise  the value will be displayed as ‘OFF’ The torque may be turned on or off through the following methods       Press the On button to turn on the selected actuator             Press the Off button to turn off the selected actuator             Click the Torque Toggle menu to turn it off when it is on and to turn it on when it is off       Change Actuator ValueThe position value of the selected actuator may be changed after choosing the joint in Pose Play PoseTo execute a pose  move Pose of Step to Pose of Robot Capture PoseTo Capture Store  a pose  move Pose of Robot to Pose of Step Copy Paste PoseThese functions enable the actuator values to be changed easily Not only can poses be copied and pasted within the program  but texts from other files  such as Microsoft Excel  may be copied  When copying text from another program  values are delimited by spaces  new lines and tabs    Copy Pose Click on Copy or press Ctrl C   Paste Pose Click on Paste or press Ctrl V Mask PoseMasking a pose refers to the process of making a new pose by combining 2 poses by setting whether the value is used or not while executing or capturing a pose For example  Pose C may be created by adding the upper body of Pose A with the lower body of Pose B  Pose Utility The pose utility is a tool to easily create a pose based on previously supplied information   3D robot control  A pose can be created by moving the 3D robot’s joints   Mirror A symmetrical pose can be created or the pose can be reversed   Inverse Kinematics The accurate positions of each joint can be calculated Information regarding the robot are required to create a pose using the pose utility  Therefore  a robot not on the list cannot be used  Some robots may not support the functions listed above  Because the pose utility uses 3D graphics  its performance depends on your graphic card Select RobotBefore using the pose utility  you must first select the robot  Click the robot’s name on the list below to select an applicable robot Note Pose utility cannot be used on a robot not on the list  In case of a user’s robot  the motions of the robot must be created by Basic Pose Editor   Select the name of robot to create a pose for             Robot Name      Description                  Bioloid Battle Droid      Battle Droid Robot from Bioloid Intermediate Example               Bioloid Dinosaur      Dinosaur Robot from Bioloid Advanced Example               Bioloid Fawn      Baby Fawn Robot from Bioloid Intermediate Example               Bioloid Gerwalk      Gerwalk Robot from Bioloid Advanced Example               Bioloid Humanoid      Humanoid from Bioloid Advanced Exampe               Bioloid King      SpiderKing Spider Robot from Bioloid Advanced Example              Bioloid Puppy      Puppy Robot from Bioloid Advanced Example              Bioloid Spider      Spider Robot from Bioloid Intermediate Example              Bioloid Turtle      Turtle Robot from Bioloid Intermediate Example              Bioloid Walking      DroidWalking Droid Robot from Bioloid Beginner Example              Premium Humanoid      AtypeBioloid Premium Humanoid              Premium Humanoid      BtypeBioloid Premium Humanoid              Premium Humanoid      CtypeBioloid Premium Humanoid        When the Initial Pose button is pressed  the robot will assume its initial position Control 3D RobotControl View3D robot can be seen from various angle using the view control function   Zoom Fit  The view angle is reset to the initial status   Select Objects  The joints can be selected by the mouse cursor   Rotate the View  The view can be rotated using the mouse  The same thing as above occurs when you press the wheel button of mouse and move   Move the View  The view can be moved horizontally using the mouse  The same thing as above occurs when you press the wheel button of mouse and move  while pressing Ctrl key   Increase Decrease the View  The view can be increased or decreased using the mouse  The same thing as above occurs when you spin the mouse wheel Control JointsThe number appeared on the robot are the ID of Dynamixel  If you place your mouse on the ID  the color of choosable Dynamixel is changed If you click the relevant joint  the joint value appears  The joint value is appeared as angle  not the motor value If you move the mouse to left and right  while pressing the left botton of the mouse  the value increases or decreases In case of 1 024based control  the unit of the value is approximately 0 29 300   1 024   and in case of 4 096base  it is approximately 0 06 250 92   4 096  MirrorThe mirror function provides two functions  exchange and symmetric  Press Apply after choosing the function to apply it to your robot       Exchange The robot’s left side and right side are reversed to create a mirror image of the previous pose                 Symmetry A symmetric pose based on the selected side is created           Inverse KinematicsPosition and Coordinate SystemUnderstanding the kinematics of the robot’s movements starts with figuring out where each robot part is located   We must first assign a coordinate point as the origin  and then mark the displacement of each part on the coordinate system Coordinates axis and origin on the View are shown as below  and the unit of the grid is 20mm Here  Origin means that the coordinates of  X  Y  Z is  0  0  0  Kinematics and Inverse KinematicsKinematics is used to determine the location or movement of the end point from the angle or movement of the joint   In other words  kinematics allows us to determine where the end points once the joint values have been decided  For example  suppose there is a manipulator with two joints in the same plane as shown below   Using the angles of the joints  the coordinate  x y  of the end point can be determined through kinematics   Kinematics results in only one solution On the other hand  inverse kinematics may be used to determine the angle or movement of the joint from the location or movement of the end point   For example  suppose again that there is a manipulator with two joints in the same plane coordinates   If the end point  x y  has been determined  there are 2 possible values for each joint as seen below When using inverse kinematics  the coordinate  x y  of the end point may be located at an unreachable distance from the origin or no solution may be obtained due to limitations on joint angles  If more joints are used  there may be infinitely many solutions End Point ControlWhen the user selects how much and in which direction to move the end point  the Inverse Kinematics function in the pose utility will calculate the values of each joint and move the end point automatically This function needs a module executes Inverse Kinematics calculation   Currently  the robots support Inverse Kinematics calculation are as follows  Bioloid Humanoid  Bioloid Premium Humanoid Type A  Bioloid Premium Humanoid Type B  Bioloid Premium Humanoid Type CThis subject is explained on the basis of Bioloid Premium Humanoid Type A Select the end point  Walking Step  Located at the middle of both feet  used to move both feet   Right Foot  Located at the center of the right foot  used to move only the right foot       Left Foot  Located at the center of the left foot  used to move only the left foot       Initialize the end pointThe location of the end point is initialized Move the end pointThe end point in 3D space can be controlled by 6 parameters   Depending on the structure of robots  all the 6 paramters may not be appeared To change the values  select relevant parameters  and then use the following methods   Press the  or   to increase or decrease the value by 1   Press the   or   while pressing Shift to increase or decrease the value by 10       The controller can change the values appears if you doubleclick or press Enter             X mm  it is moved to the  Xaxis diretion by the unit of mm             Y mm  it is moved to the Yaxis direction by the unit of mm             Z mm  it is moved to the Zaxis direction by the unit of mm             φ °  it is rotated based on the Xaxis by the unit of angle             θ °  it is rotated based on the Yaxis by the unit of angle             ψ °  it is rotated based on the Zaxis by the unit of angle       Since each paramater has its minimum and maximum values  it can be changed only in the range Sometimes  mathematical results cannot be obtained by inverse kinematics calculation  so the situation is called no solutions or Infinite solutions  Due to the such fact  the parameter values are not changed despite they are located in the range   In that case  the solution can be obtained if other parameter values are replaced  For instance  in case that the legs are straightened until the end  z 0   X or Y parameter is not changed  Apply the ResultWhen Pose of Step is selected  the pose values on the data are changed  and if Pose of Robot is selected  the pose values of robot are changed Pose Execution CapturePose of Step and Pose of RobotPose of Step means the steps on the  currently selected motion file   That is  the pose changed in pose utility is reflected to the motion file immediately  while Pose of Step has been selected Note Pose of Step is activated only when there are steps on the currently selected page  Pose of Robot is activated only when the robot is connected Pose Execution CaptureIt is the same function as Play Capture Pose of the Basic Pose Editor   Pose Execution Pose of Step is reflected to Pose of Robot   Pose Capture  Pose of Robot is reflected to currently selected Pose of Step Step EditingA Motion Step means by key frames  that are  required to play consecutive motions The speed of a motion is determined by the time of each step The step editor enables steps to be edited easily Each page consists of a maximum of 7 steps To make a motion with more than 7 steps  you will need to connect pages Add Insert Delete Move StepAdd StepA new step is added at the bottom of the step list Insert StepA new step is inserted above the selected step Delete StepThe selected step is deleted from the list Move StepThe selected step may be moved up or down Pause TimePause  Pause is the time between the end of the current step and the start of the next step   The unit of the value is seconds  and the value can be changed in 0 008 increments   The value is between 0 and 2 04 seconds       The value can be changed using the upper scroll bar       Time  Time is the time between the time from the start of the current step to the end of the current step   The unit of the value is seconds  and the value can be changed in 0 008 increments   The value is between 0 072 and 2 04 seconds       The value can be changed using the lower scroll bar       Copy Cut Paste StepCopy StepThe selected step is copied Cut StepThe selected step is cut Paste StepThe copied or cut step is pasted   The value in the selected step is overwritten Page EditingMotion page is the unit used to distinguish between saved motions Imported motions are read in terms of pages Motion data consists of 255 pages   Some controllers are limited to only 127 pages  Select PageClick on a row to select a page The following methods may be used to select multiple pages       To choose pages in consecutive order              Drag with mouse      Choose pages while holding down the Shift key             To choose pages separately              Choose pages while holding down the Ctrl key             To choose all pages                  Press the button in the upper left corner                    Connect PagePages can be connected to each other if necessary Note When data is exchanged using the Copy Cut Paste functions  page connection information is not exchanged Next PageA single page can have a maximum of 7 steps   Therefore  some motions may not fit in one page   To use multiple pages for one motion  designate the page to link to Enter the number of the next page in the Next column Exit PageWhen commands are made to stop a motion  the robot will usually be in a highly unstable state due to the motion being executed   To stop a motion in a stable state  designate an exit page Enter the number of the exit page in the Exit column Copy Cut Paste PageCopy PageThe selected page is copied Cut PageThe selected page is cut Paste pageThe copied or cut page is pasted   The contents of selected page is overwritten Set Page Repeat TimeRepeat TimeThis is the number of times the current page is repeated during motion execution Speed Rate  This is the playback speed of the page during motion execution   Unlike Step Time  this applies to the entire page           If the speed rate is 1 0  the page will be executed at  normal speed       If the speed rate is lower than 1 0  the execution speed will decrease       If the speed rate is higher than 1 0  the execution speed will increase           Inertial Force ControlForce is generated between steps  We call this force inertial force  because it is the result of the law of inertia   In general  inertial forces are created by acceleration  which is the change in speed   That is  as acceleration increases  inertial force also increases  and as acceleration decreases  inertial force also decreases   To reduce acceleration  increase or decrease the speed gradually  and to increase acceleration  change the speed drastically  Ctrl Inertial Force is used to control this acceleration   Increase this value to increase or decrease the speed gradually  reducing the acceleration       The value is between 0 and 127   Default is 32          The closer the value is to 0  the greater the inertial force   The closer the value is to 127  the lower the inertial force Joint SoftnessJoint softness is used to set the compliance of the Dynamixel The pros and cons of different joint softness values are as follows  When the joint softness is big          Pro Movement is smooth   Used for fluid movements  such as dancing       Con  May not be good for legs that need much support         When the joint softness is small          Pro Movement is stable   Used for movements that require support  such as walking       Con Movement may look too rigid when performing fluid motions       There are 7 joint softness levels   Level 1 Almost none   Not recommended   Level 2 Very Low  Level 3 Low  Level 4 Somewhat Low  Level 5 Average  Default   Level 6 High      Level 7 Very High      More InformationUpload Robot MotionTransferring motion data from the controller to the PC is called uploading       Connect the robot to the PC to see the Robot Motion window                 After selecting the Robot Motion window  click on Save As       Motion OffsetOffset is the difference from a standard value  Motion offset refers to the difference from the standard motion  and the robot that performs the standard motion is called the Master Robot Even when robots of the same type are performing the same motions  there will be differences in their poses  This is due to discrepancies in motor locations and errors in assembly   These differences may even cause some robots to fall down   Motion Offset is used to resolve these differences Note Generally  motion offset is small enough to be ignored  However  for robots that are sensitive to balance  such as humanoids  motion offset can be a source of critical problems Edit Motion OffsetDiscrepancies in the location of robot joints can be fixed using the Edit Motion Offset function When the menu is selected  the torque of all joints will be turned on to sustain its current position   Therefore  it would be beneficial to execute this function when the robot is in a pose where the differences can be easily distinguished Select the joint to edit its value with the editor   Positive values indicate movement in the CCW direction       Negative values indicate movement in the CW direction       InitializeInitiaizes all values to 0 SaveSaves the current offset values   The values are saved in the controller Save as FileSaves the robot’s current offset values as a file in the PC  The file extension of motion offset files is  ofs DownloadMotion Offset files   ofs  in the PC can be downloaded to the robot Edit All PageEdit All Page is used to duplicate revisions on all pages  This function is required in the following situations  To change all motor values simultaneously Changes the value of every motor at once   To change ID usage status  whether it is being used or not Set Resolution  The monitor’s resolution can be set   For the MX and EX series  please set the resolution value as 4096   For other Dynamixels  1024 is the recommended value   EX series have position control of 250 degrees   MX series have position control of 360 degrees   When the resolution value is set as 4 096  the default values in the basic pose editor will be automatically changed from 512 to 2 048 Set ID Usage Status  RoboPlus Motion can handle the motions of robots with up to 26 motors   Dynamixel ID between 0 and 25   Set whether an ID is being used to edit only the necessary ID’s Exchange IDThe position values of the robot’s joints can be easily exchanged Select the 2 ID’s to exchange  and then click Exchange ID Change All ValuesUse this function to change the value of the selected ID Apply Offset Values to AllOffset is the difference from a standard value   Use this function to add or subtract a value from all joints with the selected ID Keyboard ShortcutsWhen creating robot motions  it is difficult to use the mouse and keyboard at the same time  while holding the robot with one hand   Here  we introduce useful tips to make motions using only the keyboard Use arrow keys to move within the programArrow keys can be used to move the focus between the Page Edit Window  Step Edit Window  and Pose Edit Window Change the Joint Values  Press the   or   keys to increase or decrease the joint value by 1   Press the  or   keys  Shift     or    to increase or decrease the joint value by 10   Press Enter to move the focus to the setting window   When you are done changing the value  press Enter again to return the focus This function is available in the following windows      Pose of Step            Pose of Robot            Edit Motion Offset            3D drawing of robot      Turn the torque on offAfter selecting the joint  press the space bar to turn the torque on or off Moving robot according to each stepPlease choose the step that you want and press the enter key  Your robot will take the pose of selected step   This is available only at robot motion window  Making RobotsUsers can make and operate their own robots usig RoboPlus MotionWarning For this section  some previous knowledge on the following is required   XML  3D Graphics  C  ProgrammingFolder StructureIf you look at the folder inside RoboPlus Motion  there are robot information file as shown below  i e  C Program Files ROBOTIS RoboPlus Motion    Robots There are files on robot’s information    Models There are 3D model data for each part   PlugIn There are IK Inverse Kinematics  calculation modules In order for users to make their own robot  they need to make their own files and put them into folders accordinglyRobot Information FileRobot Infromation file has all the information required for the use of RoboPlus Motion This file has extension of  rbt  Robot list in Pose Utility tab shows the  rbt file list of various robots showed in the emanual Robot Information file is written in the format of XML  Users can read the files using Windows TextPad  ltGeneral gtIn this part  general information on the robot users making must be recorded  ltName gtPut in the name that will be shown on the robot list You can give different culture values to show different languages  only for languages supported by RoboPlus Motion             Value      Language                  kor      Korean              jpn      Japanese              N A      English or any other languages       ltName gtPremium Humanoid Atype lt Name gt  ltName culture kor gt Bioloid Premium Type A lt Name gt   Example of Bioloid Premium Type A ltMotor gtInput information for the Dynamixels used in robots   id Dynamixel’s ID  model model type  init position value for when Initial Pose button is pressed ltMotor id 1 model AX12  init 205 gt lt Motor gt ltMotor id 2 model AX12  init 818 gt lt Motor gt ltMotor id 3 model AX12  init 251 gt lt Motor gt ltMotor id 4 model AX12  init 772 gt lt Motor gt ltMotor id 5 model AX12  init 512 gt lt Motor gt ltMotor id 6 model AX12  init 512 gt lt Motor gt ltMotor id 7 model AX12  init 358 gt lt Motor gt ltMotor id 8 model AX12  init 666 gt lt Motor gt ltMotor id 9 model AX12  init 512 gt lt Motor gt ltMotor id 10 model AX12  init 512 gt lt Motor gt ltMotor id 11 model AX12  init 475 gt lt Motor gt ltMotor id 12 model AX12  init 549 gt lt Motor gt ltMotor id 13 model AX12  init 437 gt lt Motor gt ltMotor id 14 model AX12  init 587 gt lt Motor gt ltMotor id 15 model AX12  init 549 gt lt Motor gt ltMotor id 16 model AX12  init 475 gt lt Motor gt ltMotor id 17 model AX12  init 512 gt lt Motor gt ltMotor id 18 model AX12  init 512 gt lt Motor gt  Example of Bioloid Premium Type A ltMirror gtInfromation needed for Mirror function  Not necessary if the function is not in use Only use for Dynamixels in symmetric positions  If there is no symmetrically positioned Dynamixles  do not input anything   Right Dynamixel IDs for devices on the right side  Left Dynamixel IDs for devices on the left side ltMirror gt    ltRight gt1 3 5 9 11 13 15 17 lt Right gt    ltLeft gt2 4 6 10 12 14 16 18 lt Left gt lt Mirror gt  Example of Bioloid Premium Type A ltInverseKinematics gtThis connects the modules for Inverse Kinematics computing  Computing modules are in the form of DDL  To learn how to make modules  please refer to PlugIn SDK Programming in the next section  If not using Inverse Kinematis  this section can be ignored  ltInverseKinematics gt    ltModule gt       ltName gtPremiumHumanoidA dll lt Name gt    lt Module gt lt InverseKinematics gt  Example of Bioloid Premium Type A ltObject3D gtIn this section  robot assembly information is included for 3D display  The robot assembly information is in the Tree structure If 3D display not needed  this section can be ignored  ltPart gtIn this section  each part’s information is included  The relationship between parts are expressed through the Tree structure   name 3D Model name  There is no need to include extensions  i e   for f3 igs  just put f3       T 3x4 matrix that contains movement and rotation information for 3D display Each element is separated by space         id Input ID number for Dynamixels   type Define what type of motor a part is                   If the whole body moves  define the motor’s type as body   Horn is fixed in this case                             If the motor’s body is fixed and only its horn moves  define body to the part you want to fix and define horn to the part you want it to move                      ltObject3D gt     ltPart name f51 T 0 0 1 0 1 0 0 0 0 1 0 302 5 gt       ltPart name  f3 T 1 0 0 0 0 0 1 70 5 0 1 0 19 gt lt Part gt       ltPart name  f3 T 1 0 0 0 0 0 1 70 5 0 1 0 19 gt lt Part gt       ltPart name f52 T 1 0 0 0 0 1 0 0 0 0 1 0 gt  Example of Bioloid Premium Type A3D Model DataShown below are the 3D models of parts  These parts can be generated by various Computer Aided Design softwares  Users can add the parts created on their own in addition to the provided parts by ROBOTIS RoboPlus Motion only supports IGES   igs  format  ROBOTIS recommends to make data files small since if the data is too big  it will slow down the 3D display The following are the basic parts provided with RoboPlus             Name      Diagram      File                  F1            f1 igs              F2            f2 igs              F3            f3 igs              F4            f4 igs              F5            f5 igs              F6            f6 igs              F7            f7 igs              F8            f8 igs              F9            f9 igs              F10            f10 igs              F11            f11 igs              F12            f12 igs              F15   F16            f15 igs              F51            f51 igs              F52            f52 igs              F53            f53 igs              F56            f56 igs              F57            f57 igs              F58            f58 igs              F60            f60 igs              WA            wa igs              BU            bu igs              CM5            cm5 igs              ADAPTORCM5            adaptor_cm5 igs              BATTERY            battery igs              AX12            ax12 igs              AX12 Horn            ax12_horn igs              AXS1            axs1 igs      PlugIn SDKUsers can use PlugIn SDK to add inverse kinematics computing module from Pose Utility Instruction is given using an example of developing C  from Visual Studio 2005   Sample example included   Download ZIP PlugInSDK_Example zipCreate ProjectGo to Visual Studio’s menu and select File  gt Create New  gt Project  Then select Visual C   gt Windows  gt Classic Library to create a new project Add ReferenceGo to Visual Studio’s menu and select Project  gt Add Reference  When a window box pops up  click Find then select Motion  gt PlugInSDK dll in the folder Roboplus is installed  i e  CProgram FilesROBOTISRoboPlusMotionPlugInSDK dll Implement InterfaceWrite command lines shown below in the Class file that is to be implemented   i e  Class1 cs using ROBOTIS MotionEditor SDK     add namespacenamespace MyPlugIn  public class MyPlugIn  IInverseKinematics    Interface succession    Put the mouse cursor on IInverseKinematics and right click it  Then select Implement Interface  gt Implement Interface and sources will be automatically generated CurrentPoseIt’s Pose data transferred from and received by RoboPlus Motion  Users must follow the rules shown below   Users create the arrangement of 26 pose data   The index of arrangement are the ID numbers of Dynamixels   In order to deliever values to motors  put some number in between 0   1 023 or 4 096  If not  put 1 When RoboPlus Motion is in get direction  inverse kinematics computing result should be delievered and when it is in set direction  endpoints should be calculated and computed using forward kinematics and based on Pose data EndPointsThis is the name to be printed on endpoint list Users can either choose one form the endpoint list or run the interface shown below to see the result   SelectedIndex Index of endpoint  SelectedEndPoint Name of endpointX  Y  Z  Roll  Pitch  YawIt’s the data of location of end points from the origin Users can set minimum and or maximum using user DLL Roll signifies rotation in xaxis  Pitch is in yaxis  and Yaw zaxis   MinX  MinY  MinZ  MinRoll  MinPitch  MinYaw Minimum values for endpoints   MaxX  MaxY  MaxZ  MaxRoll  MaxPitch  MaxYaw Maximum values for endpoints   If the minimum and maximum values are set at the same value for an endpoint  such endpoint is considered as not in use and thus  does not show up on the list   X  Y  Z  Roll  Pitch  Yaw position values of endpoints ResetBy clicking the reset button on RoboPlus Motion   users can default the position values of endpoints Add PlugInIf successful with building the project  copy the DLL file to the PlugIn folder inside the RoboPlus Motion folder   For example  CProgram FilesROBOTISRoboPlusMotionPlugIn In robot informational file    rbt   write DLL information that wil compute inverse kinematics  ltInverseKinematics gt    ltModule gt       ltName gtPremiumHumanoidA dll lt Name gt    lt Module gt lt InverseKinematics gt  Example of Bioloid Premium Type ARun RoboPlus Motion and check if the  new  robot is operating properly ",
      "url": "http://0.0.0.0:4000/docs/en/software/rplus1/motion/"
      } ,
  
  
      "docs-en-software-rplus1-task-getting-started":  {
      "title": "R+ Task 1.0",
      "content"	 : "IntroductionA Task is a set of motions to perform a certain actions  RoboPlus refers to the source code that specifies tasks to be executed by the robot as Task Code  The robot moves according to your task codes  RoboPlus Task is a software to make writing these task codes easier Task code files have a file extension  tsk  and the icon shown on the left Note Task files from newer versions are not compatible with older versions InstallDownload RoboPlus TaskRoboPlus is a software to create a customized programme for every ROBOTIS product RoboPlus System Requirements  OS  Windows XP Service Pack 2 or above   Vista  7  32 64bit  8  32 64bit   32bit x86  or 64bit  x64  processor with over 800MHz  Graphic card with 3D acceleration  System memory over 512MB  Hard disk with the extra space of 500MBNote To execute RoboPlus   NET FrameWork 3 5 or higher version is required  When installing RoboPlus  if the automatic installation of  NET FrameWork fails   NET FrameWork must be installed separately RoboPlus Install FailureMost reason for installation failure is caused by  NET Framework install error  Please manually intsall Windows Installer 3 1 and  NET Framework 3 5Windows installer and  NET Framework can be downloaded from Microsoft Download Center Download Windows installer 3 1   NET Framework 3 5Getting StartedSelect CommandDouble click on a blank line or click on the line and press enter   Choose a command from the list of commands supported by the selected controller If the controller has not been selected yet  the program will ask you to choose the type of controller that will be used by the current program Select ParameterParameter refers required fields or information  to execute commands  A question mark    indicates that a parameter has not been set After selecting a command  you must designate a parameter to complete the command line       Go to ‘edit mode’ by double clicking the mouse or pressing the enter key             Choose the parameter to create by pressing left right arrow keys or by clicking on the question mark             Press enter or double click to see the parameter selection window             Choose the appropriate parameter  It is very important to learn and understand the functions of parameter   Program DownloadDownload the task codes into your controller  You only have to download once  as the task codes is be saved inside of controller till you download a new task code over it       Connect the controller before downloading the task code To download the task code  the controller must be connected to the PC   Please refer to controller information on how to connect the controller to the PC          Select the correct COM port  if you know  or else use the Automatic Search function  to easily find out the appropriate port         If RoboPlus Task is unable to find a controller  the following error message will be shown               Check if the controller is connected to the PC       Check if the controller is turned on       Check if the correct communication port was chosen             If the program has an error  you must find the error and correct it   See rule check error messages             Select the download menu  If the downloading fails  it will automatically try again from the beginning             Execute the task code  gt Your robot will move  Turn on the controller and execute the downloaded task code   Please refer to controller information to learn how to execute the task code    Videos      Download RoboPlus Program for CM100             Download RoboPlus Program for CM510 530       Print on the ScreenControllers usually do not have display devices the way a PC has a monitor  so it is hard to keep track of what goes on in a controller   Therefore  a terminal is used to borrow the PC’s monitor Open the Program Output MonitorTo see the output of the program  you must open the Program Output Monitor BEFORE executing the program  There are three ways to open the Program Output Monitor       Click the ‘View Print of Program’ on the Download Program window       Click the View Print of Program button in the tool bar   Press F5 or click on View Print of Program V  menu under Program P  Print Print with Carriage ReturnUse the Print parameter in your task code to see desired values on the screen Print  Print the value  then move the cursor to next line Print with New Line Print out the value  and move the cursor to next line Error  Please check the following  Values from the controller                  A welcome screen is shown when the program starts                    Error messages during program operation Error Messages                   Values from task code  All decimal numbers between 32767 and  32767 can be displayed Printing characters or custom messages is not possible                    To print numbers                    To print values from sensors            Clear ScreenYou may erase everything on the screen Virtual Robot ControlRoboPlus Task supports virtual robot control  which makes controlling of robot possible without a remote controller devices like RC100  Click the appropriate button with the mouse or press the appropriate key Please refer to the table below to control the remote control with the  keyboard             Actual RC100 Key      Key on the Keyboard                  U      Arrow Key ↑               D      Arrow Key ↓               L      Arrow Key ←               R      Arrow Key →               1      Number Key 1               2      Number Key 2               3      Number Key 3               4      Number Key 4               5      Number Key 5               6      Number Key 6       ",
      "url": "http://0.0.0.0:4000/docs/en/software/rplus1/task/getting_started/"
      } ,
  
  
      "docs-en-software-rplus1-task-programming-01":  {
      "title": "R+ Task 1.0",
      "content"	 : "ProgrammingEditThese are the methods used for editing in RoboPlus Task Select Multiple LinesRoboPlus Task provides a function to select and edit  cut  copy  delete  comment etc  multiple lines of program code  There are multiple ways to select multiple lines       While pressing the Ctrl key  click on the lines with the mouse         Click on the first line  and while pressing the Shift key  click on the last  The lines between the two lines will be selected       Click and drag on the lines you want to select             To select all lines  rightclick on the code  then click select Select All  You may also press Ctrl   A       Insert New LineRoboPlus Task provides a function to insert a line between existing lines  There are multiple ways to insert new lines  New lines will be inserted below the highlighted line   Press the Space bar       Right click  then select Insert Line’       Delete LinesRoboPlus Task provides a function to delete lines   One or more lines may be deleted at once  There are multiple ways to delete lines       Select the line s  to delete  rightclick  and click Clear Line  The lines will be cleared  resulting in blank lines  You may also press the Backspace  ←  key             Select the line s  to delete  rightclick  and click Delete Line  The lines will be deleted  and the lines below the deleted lines will move up   You may also press the Delete key       Enable Disable LinesRoboPlus Task provides a function to enable or disable lines  There are multiple ways to enable disable lines   Select the line to enable or disable  rightclick  and click Enable Disable       Select the line to enable or disable  and press Ctrl   E        The function will enable disabled lines and disable enabled lines   This function is commonly used to keep certain commands from being executed in certain situations  such as when testing code Copy Cut PasteRoboPlus Task provides a function to cut  copy and paste lines Copy  Select one or more lines  rightclick  and click ‘Copy’   The selected line will be copied to a temporary clipboard   When you perform the ‘Copy’ function  the data in the clipboard will be replaced with the new selection       The shortcut is Ctrl C       Cut  Select one or more lines  rightclick  and click Cut   The selected line will be deleted and stored in a temporary clipboard   When you perform the Cut function  the data in the clipboard will be replaced with the new selection       The shortcut is Ctrl X       Paste  You can use this function only when there is data in the clipboard   Select the line where the data will be pasted  rightclick  and click Paste   The data in the clipboard will remain even after it has been pasted  so you can paste the same data many times   If you perform the Paste function on a line with code  the code will be overwritten with data from the clipboard       The shortcut is Ctrl V       Find NameRoboPlus Task provides a function to search for used elements   From the ‘edit menu  select the‘Find Name function  The shortcut is Ctrl F   Enter a keyword and click the Find Next button CommandsStart ProgramStart Program designates the beginning of a program  Regardless of the line number  the program will always start at this point  Start Program is like the main function in the C language Usage  Start Program is executed regardless of its line number   A program cannot have more than one Start Program command   The body of the command must be enclosed by brackets   The program will end when the closing bracket     is reached ExampleStart a program with the Start Program command End ProgramIf this command is called during program execution  the program exits immediately  There are 2 ways to end a programme       When the end of Start Program is reached Natural Exit            When End Program is called Forced Exit      UsageCall the command at the point in the program where you want it to end ExampleIn this sample code  the program will end when the touch connected to Port3 is pressed Start End of SectionA block or a section  identified by  and   is a group of commands  All commands in a block have the same scope  The concept of  a block is the same as in the C language UsageEach block has an opening bracket    and a closing bracket     RoboPlus Task performs automatic indentation to show whether the brackets have been paired properly  If there are missing brackets  they must be added before the program can run indentation  If they were not arranged properly  you have to revise them by yourself Each block must be owned by a command  Blocks cannot be used independently with commands  The followings are the most commonly used commands that are followed by a block   Start Program  If   Else if   Else  Endless Loop  Loop For  Loop While  Callback Function  FunctionIf a command is made by one line  it is possible to skip the block brackets ExampleThe Start Program and Endless Loop commands must be followed by blocks  as shown in the example below Comments NotesThis command is used to insert a comment or a note in the program code   Comments are helpful when interpreting or reviewing the code later  They are mostly used to mark easily forgotten parts or to emphasize important information   Comments and notes do not affect the program in any way   Like in C  comments can be made with two slashes       Comments blocks   ‘  ’  ‘  ’   are not supported Usage  Insert the commend where you would like to write a comment or note   When    is added  double click or press Enter to write in the comment or note   Pressing ESC while writing will erase what has been written and return the line to its previous state   When finished  press Enter ExampleThis code will print 10 on the screen   The comment explains how  the command line below will be executed CalculateCalculate is a command to perform an arithmetic operation on two numbers Calculate can perform the following operations  Basic Operations  supports negative numbers           Addition    Add two values       Subtraction   Subtract the second number from the first number       Multiplication    Multiply two numbers       Division    Divide the first number by the second number  Remainders are discarded          Bit Operations Means 2 decimal operation            AND  amp  Perform a logical AND operation       OR    Perform a logical OR operation       UsageYou can choose an operator by double clicking a mouse or by pressing the Enter key Choose the appropriate 3 parameters  result  operand1  operand2  necessary for the command ExampleThis example shows how to add 10 and 20 and to display the result on the screen LoadLoad is defined as to place into an appropriate device  In RoboPlus Task  Load places a value in a device Load is used for the followings  To execute a device’s function   To move a value UsageChoose the appropriate 2 parameters  destination  source  necessary for the command ExampleTo execute a device Set the timer to 1 024 seconds  To set a value  Insert 10 into the variable Label JumpLabel and Jump are used to branch a program  Branching is used to change the order commands in a program are executed  Jump branches the program and Label designates where to branch to  It is the same function as Label and Goto in the C language Usage  Label names must abide by the following rules          There cannot be duplicate label names       Label must exist within a program or function body       A jump to a label in another function is not possible       Spaces and Special characters    @        etc   are not allowed in label names       Labels cannot start with a number         While inputting the label name  Press Esc to cancel   Otherwise  press Enter to save  While selecting the label to jump to  Press Esc to cancel       Otherwise  click the appropriate label or press Enter while the label is highlighted to save         A jump can only be made to an existing label       The label must be in the same function block as the jump command       ExampleIn this sample code  the program jumps to JumpPoint as soon as it starts and executes Routine 2 If Else if ElseThese commands will branch the flow of the program depending on whether the condition is true or false   If  Execute if the clause is true   This is the equivalent of the if statement in C language   Else If  Execute if the clause is true and previous clause  if or else if clause  is false   This is the equivalent of the else if statement in C language   Else  Execute if none of the conditions are true   This is the equivalent of the else statement in C language What’s a Conditional Clause Conditional clause is a feature to perform different actions depending on whether the condition evaluates to true  condition is met  or false  condition is not met  Conditional clause is composed of the following 3 parts parameter 1  relational operator  and parameter 2 in order These are 6 types of relational operators       True if the two parameters are equal       True if the two parameters are not equal    gt   True if parameter 1 is greater than or equal to parameter 2    gt   True if parameter 1 is greater than parameter 2    lt   True parameter 1 is less than or equal to parameter 2    lt  True if parameter 1 is less than parameter 2 Conditional clause can be combined into a complex conditional clause using conditional operators A complex conditional clause is composed of the following 3 parts conditional clause 1  conditional operator  conditional clause 2 There are 3 types of conditional operators   then  Does not link any clauses   AND  amp amp   True if both conditional clauses are true   OR      True if one of the conditional clauses is true There is no limit to how many conditional clauses can be combined into one complex conditional clause  Each conditional clause is evaluated in order  and the final value will be either true or false Usage  An ‘IF’ command must always precede an Else if or an Else command       A block  designated by brackets  needs to follow each clause However  if the block consists of only one line  the block need not be enclosed with brackets        ExampleThe examples below shows how to program the following conditions   When the variable is greater than or equal to 90   When the variable is greater than or equal to 50 and less than 90       Other cases      Endless LoopThis command is used to repeat the command lines in the block without end UsageA block is always required However  if the block consists of only one  the block need not be enclosed with brackets  Use the Break Loop command to exit the loop ExampleContinuously prints 10 on the Program Output Monitor Loop WhileThis command is used to repeat the command lines in the block while the clause is true It is the equivalent of the whilefunction in C language  What is a conditional clause UsageA block is always required However  if the block consists of only one line  the block need not be enclosed with brackets  Use the Break Loop command to exit the loop ExampleContinuously prints the value of on the Program Output Monitor until the variable reaches 30 Loop ForThis command is used to repeat the command lines in the block for the specified number of times  Given an initial value and a terminal value  the loop will repeat while increasing the variable by 1 The number of executions can be calculated as  Number to Executions   Terminal Value  Initial Value   1This is the equivalent of the for function in C language UsageChoose the appropriate 3 parameters  variable  Start value  End value  necessary for the command The initial value must be less than the terminal value  If the initial value is greater than the terminal value  the loop will not be executed A block is always required   However  if the block consists of only one line  the block need not be enclosed with brackets  Use the Break Loop command to exit the loop ExampleThis example will repeat the loop as many as the detected sound quantity Break LoopThis command is used to exit the loop while it is being executed It is the equivalent of the break function in C language UsageThe command must always be used in the block being repeated ExampleContinuously prints the number 10 on the screen until the value of the center IR sensor becomes bigger than 400  in which case it exits the loop and prints 30 on the screen Wait WhileThis command is used to pause execution when a conditional clause is true It is the equivalent of the while function in C language What is a conditional clause UsageSet the appropriate conditions without the use of blocks ExampleThe program will wait for the timer Exit FunctionWhen this command is executed  it will end the operating  function immediately even if not every command line was executed yet  and will return to the function called position  It is the equivalent of the return statement in C language UsageCan be used only within a general function or a callback function ExampleIn the following example  UserFunction is called repeatedly  Because of the Return command in UserFunction  the last 3 lines will never be executed Make Call FunctionIf the same code need to be repeated multiple times  or if the code needs to be distinguished according to its role  you can make the code as a function  and can all the function whenever necessary  This is similar to the concept of a function in C language  The only difference is that there are no return values and input parameters  When used properly  you can easily figure out the flows of the program  and can avoid to write the same command lines again and again  Functions are executed by calling them  After a called function ends  execution will be returned to the point of the calling and started from the next command line Usage  The following rules apply when making a function          There cannot be duplicate function names       A function must exist outside another function or program body       Spaces and special characters    @       etc   are not allowed in function names       Function names cannot start with numbers         While inputting function names  press Esc to cancel   Otherwise  press Enter to save   While selecting the function to call  press ESC to cancel   Otherwise  click the appropriate function or press Enter while the function is highlighted to save   A function cannot call itself ExampleThe program will continuously call the functions to move forward  backward  right and left Callback FunctionCallback function is a function that runs independently of the main program routine and is automatically executed at fixed intervals  Therefore  a callback function cannot include code that requires much time  Use of loops  variables  and function calls are limited Usage  The callback function cannot exist inside another function or program body   There can be only one callback function   A callback function does not have a name and cannot be called Precautions  Can not use commands such as Endless Loop  Loop While  Loop For  Label  Jump  and Call Function   Communication between the controller external devices is limited to 2 times   Size of the command must not exceed 512 bytesExampleThis example shows how periodically receive wireless data and to save it in a variable ",
      "url": "http://0.0.0.0:4000/docs/en/software/rplus1/task/programming_01/"
      } ,
  
  
      "docs-en-software-rplus1-task-programming-02":  {
      "title": "R+ Task 1.0",
      "content"	 : "Controller ParametersRemocon TXDThis parameter is used to transmit data via a wireless communication module  IR  zigbee module    The data must be a number value between  0  amp 65535 transmitted or sent  wirelessly  IR or Zigbee    When the Remocon TXD parameter is set  the data is immediately sent wirelessly Note Compatiable Controllers  CM100  CM5  CM510  CM530  CM700ExampleIn the example below  the program waits for data  and when the data arrives  the received data is transmitted wirelessly It is commonly used to send a response to the control program on a PC connected using ZIG2Serial Remocon RXDThis parameter is used to read the received data received via the wireless communication module  IR  zigbee module    The data is a number between 0 and 65535   The  Remocon Arrived  parameter can be used check for new data   You can save up to maximum 2 wireless data by using a receiving buffer   When 2 data are saved in the receiving buffer  firstly received data will be read at first  and the remaining data will be read at second according to the received order  If there is only 1 data value in the buffer  when READ is executed  the latest data will be retrieved Note Compatiable Controllers  CM100  CM5  CM510  CM700ExampleThe code below shows how to control movement direction using the RC100 Remocon ArrivedThis parameter is used to check whether there are any new data received via the wireless communication module IR  zigbee module  This value is either TRUE or FALSE   TRUE   1    There is new data in the input buffer   FALSE   0    All data in the input buffer have been retrieved Note Compatiable Controllers  CM100  CM5  CM510  CM530  CM700ExampleThe code below shows how to control movement direction using RC100 Normally used to check whether new data has been received to process Aux LEDThis parameter is either TRUE or FALSE and used to read and set the controller’s Aux LED status   TRUE  1    When the Aux LED parameter is set to TRUE  the LED will turn on  When the Aux LED parameter is read  a value of TRUE signifies that the LED is on   FALSE  0   When the Aux LED parameter is set to FALSE  the LED will turn off   When the Aux LED parameter is read  a value of FALSE signifies that the LED is off  False means that the input buffer is empty  i e either no data has been received or all data has been retrievedNote Compatiable Controllers  CM5  CM510  CM530  CM700ExampleIn this example  the Aux LED is turned on and off for 1 second 3 times ButtonThis parameter is used to read the controller’s button status   For CM5  CM510  CM530          Each button is assigned a unique value as follows       R button  1  L button  2  D button  4  U button  8  START button  16      When several buttons are pressed  the value assigned to the pressed buttons are added and read       Even if you do not know the buttons’ code values  you can easily determine which buttons have been pressed by using the buttons’ constant values         For OpenCM9 04          Use of true false constants      When button is pressed ture   When button is not pressed  false       Note Compatiable Controllers  CM5  CM510  CM530  CM700  OpenCM9 04ExampleThis example shows how to perform different motions depending on which button is pressed TimerThis parameter is used read the timer’s current value or to set the timer  which begins to count down automatically   The timer is located in the controller You can use Timer value constant to set the timer’s value When a decimal number is entered   it will automatically be converted to the corresponding timer value The actual timer value is between 0 and 255   Each timer value is 0 128 seconds If you set a value greater than 0 in the timer parameter  the timer will start to count down every 0 128 seconds Note Compatiable Controllers  CM100  CM5  CM510  CM530  CM700ExampleThe code below will print the value from the Center IR sensor every second HR TimerInternally the controller sets a counter this is the parameter for the high resolution timer  This timer is set for every 1ms  useful for more accurate timing   You can use Timer value constant to set the timer’s value   When a decimal number is entered  it will automatically be converted to the corresponding timer value   The actual timer value is between 0 and 65535   Each timer value is 0 001 seconds   If you set a value greater than 0 in the timer parameter  the timer will start to count down every 0 001 seconds Note Compatiable Controllers  CM530ExampleWhile in fast forward motion the timer can help the tires react faster upon detection of a line Remocon IDThis parameter is used to set or read the currently set remote control ID  Please note that the controller will not receive any data if this parameter does not match the ID of the transmitting remote   The ID is a number between 0 and 65535   When the opponent’s ID is set to 65535 0xFFFF  in hexadecimal   it will send data to all Zigbee modules  regardless of ID  Broadcasting Mode Note Compatiable Controllers  CM5  CM510  CM530  CM700ExampleThis example sets the opponent’s wireless ID to 123  reads the value  and prints it on the screen   For seamless Zigbee communication  the opponent’s wireless ID must be set to the correct value   Using the broadcasting mode improperly may cause unforeseen problems My ID  CM100          This parameter is used to determine whether or not a module ZIG110 module has been installed       If a ZIG110 wireless communication module is installed  TRUE 1  is returned   Otherwise  FALSE 2   is returned         Other Controllers  This parameter is used to read the ID of the Zigbee module installed in the robot           If a ZigBee module is installed  its ID is read  a number between 0 and 65534   If not  65535  0xFFFF in hexadecimal  is returned       Note Compatiable Controllers  CM100  CM5  CM510  CM530  CM700ExampleThis example checks whether a ZIG110 module is installed in the CM100 controller  If the module is not installed  it sets the RC100 channel according to the number of times the start button is pressed This example prints the ZigBee module’s ID  This code can be used with controllers other than CM100 IR Left Center RightThis parameters are used to read the IR sensors’ values   The sensor value is between 0 and 1023   For objects with the same or similar color  the closer it is  the higher the value closer to 1023   and the farther away it is  the lower the value  closer to 0    For objects with the same distance  the lighter white  the object  the higher the value  and the darker black  the object  the lower the value Note Compatiable Controllers  CM100ExampleIn this example  specific motions are performed when only the left IR sensor detects an object or when only the right IR sensor detects an object    Sensor values may be affected by external lights which emit infrared rays such as sunlight or a fluorescent lamp   Sensor values depend on the object’s color or surrounding light  so using the IR sensor to measure the exact distance is not recommended   As above mentioned  IR sensor values are different if objects have different colors  even if they are the same distance away  This characteristic can be utilized to distinguish black from white Can be used for tracing line  Buzzer IndexThis parameter is used to set the musical note or melody to be played or to retrieve the note or melody currently being played using the buzzers in the controller   The Buzzer Time parameter must always be used with the Buzzer Index parameter   Buzzer Time must be set before Buzzer Index is set   The order is important   Click here for more information on Buzzer Time    Depending on what the Buzzer Time is set to  Buzzer Index can be set to play a musical note or a melody           When Buzzer  Time is set to 255  Melody Mode              Choose from 16 different melodies  0 15                      When Buzzer Time is between 0 and 254  Musical Note Mode              Choose from 27 notes   The selected notes will play for the length set as  Buzzer Time                     Note Compatiable Controllers  CM100  CM510  CM530ExamplePlays melody 3 Plays Do  Mi and Sol for 0 3 seconds each Buzzer TimeThis parameter is used to set how long the note or melody will be played or to retrieve how much longer it will be played   The Buzzer Time parameter is always used with the Buzzer Index parameter  Buzzer Time must be set before Buzzer Index is set   The order is important   Click here for more information on Buzzer Time    Buzzer Time can be set to a value between 0 and 255   Each value represents 0 1 second   For example  when Buzzer Time is set to 1  the note will be played for 0 1 second   The maximum length a note will be played is 5 seconds  Therefore  when values between 50 and 254 are entered  the note will be played for 5 seconds           When Buzzer Time is set to 255  Melody Mode      Choose from 16 different melodies  ‘0 15                 When the melody finishes playing  Buzzer Time is reset to 0                     When Buzzer Time is between 0 and 254 Musical Note Mode              Choose from 27 notes   The selected note will play for the length set as Buzzer Time                     Note Compatiable Controllers  CM100  CM510  CM530ExamplePlays melody 3   Same as the example in Buzzer Index Plays Do  Mi and Sol for 0 3 seconds each  Same as the example in Buzzer Index   Buzzer Time cannot be set while a note or melody is being played Sound CountA controller equipped with a microphone has a function to count sounds when the sound is louder than a certain threshold   For example  it is possible to count claps   This parameter is used to retrieve the number of detected sounds   Sound Count uses the numbers between 0 and  255   As a result  the maximum number of sounds counted is 255   When the sounds are no longer detected  the number of detected sounds will be input into the Sound Count parameter   Because Sound Count is not initialized automatically  you have to reset it to 0 before use Note Compatiable Controllers  CM100  CM510  CM530ExampleDetects sounds and repeats a specific motion for as many times as it is detected   The geared motor connected to the controller may make loud noises while moving  which will be detected by the microphone  Please use the sound detection function only when the OLLO Bioloid has stopped moving completely Current Sound CountA controller equipped with a microphone has a function to count sounds when the sound is louder than a certain threshold   For example  it is possible to count claps   This parameter is used to retrieve the number of detected sounds   Current Sound Count uses numbers between 0 and 255   As a result  the maximum number of sounds counted is 255   The parameter value is increased in realtime whenever a sound is detected   If a new sound is not detected for 0 8 seconds  the value of the Current Sound Count parameter is passed to the Sound Count parameter  and the Current Sound Count parameter is reset to 0 Note Compatiable Controllers  CM100  CM510ExampleThis code saves the current sound count  in the DetectionCount variable This code pauses the program when no sounds are detected This code executes a block of code when 3 sounds are detected   When it is connected with controller  sometimes the sounds of geared motor can be too loud to be input in the controller in normal way  Please use the sound detection function only when the OLLO Bioloid has stopped moving completely Button CountThis parameter is used to read how many times the START button was pressed when the controller was first turned on Button Counts uses numbers between 0 and 255   As a result  only up to 255 button presses can be counted  Note Compatiable Controllers  CM100  CM150ExampleThe example executes different motions according to how many times the START button was pressed  once  twice  or more Powersave TimerThe controller has a hibernate function to conserve battery   If no commands are received for a set period  the controller can turn itself off   This parameter is used to set how long the controller will wait or how much time is left       Powersave timer can be set using powersave constants         Powersave timer uses numbers between 0 and 255   The unit is minutes  i e   a value of 1 equals 1 minute   The default value is 5 minutes   Setting the Powersave timer to 0 will turn it off   The time remaining on the timer is always in minutes  For example  when 50 seconds remain  the timer will say that 1 minute remains Note Compatiable Controllers  CM100  CM150ExampleThe controller will be turned off if no data is received for 2 minutes   If data is received  the timer is reset to 2 minutes   To keep the controller from turning itself off even when certain actions are performed  you must manually reset Powersave timer RC100 ChannelThis parameter is used to set up the infrared communication channel or to check the current channel between the controller’s IR receiver and RC100       The RC100 channel can be set using constant numbers         RC100 Channel uses numbers between 0 and 8   The Channel 0 is the special one that can be communicated with every other channels Note Compatiable Controllers  CM100  CM510  CM530ExampleSets the RC100 channel according to how many times the START button was pressed   For smooth infrared wireless communication  please refer to the section on how to set the channel for RC100  and make sure that both RC100 and the controller’s IR receiver are set to the same channel Motion ParametersMotion PageThis parameter executes motions   When the motion page number is entered  the corresponding motion is executed   Motion Page can be read to see which motion is currently being executed   Certain page numbers can be used to stop the current motion           When the stop command is executed  Number of Page Repeats will be ignored       To confirm that a motion has stopped completely  check the motion status       When Motion Page is set to 0  the controller will execute to the Exit page and stop       When Motion Page is set to 1  the controller will execute to the current page and stop         If a page with no motions is set  an error message will be returned   See error messages   Motion Page uses numbers between 1 and 255   Some controllers use numbers between 1 and 127  Note Compatiable Controllers  CM5  CM510  CM530  CM700ExampleExecutes motion page  3 Motion StatusThis parameter is used to check the status of the motion   If a motion is being performed  1 is returned   Otherwise  0 is returned   True False can also be used           True Motion is being performed       False Motion is not being performed       Note Compatiable Controllers  CM5  CM510  CM530  CM700ExampleExecutes motion page  3 and waits until it is completed Joint OffsetTo apply the joint offset to a robot  a motion must be performed after the Joint Offset parameter is set This parameter can be applied to each joint separately   255   255  The offset will be applied to the selected joint’s location value           Ex  If the location value of the joint with ID  3 is set as 300 → 400 → 500 in the motion data  and the joint offset is 100  the actual location value of the joint will be adjusted to 200 → 300 → 400         1024  If the joint offset is set to 1024  the selected joint will not be affected by the motion data during operation           Ex  This function can be used to control the location values directly  instead of the motion   A primary example is the Gripper  which should not move when a motion is being performed       Note Compatiable Controllers  CM5  CM510  CM530  CM700Example      Set an offset value to a specific joint While motion page  3 is being performed  set the offset of the joint with ID 4 as 100  and wait for the motion to finish             Keep a joint from being affected by motion dataSet up joint ID  4 to be unaffected while a motion is being executed   Peripheral DevicesPeripheral devices are modules connected directly to the controller  The followings are peripheral devices Reduction MotorThis parameter is used to control the reduction motor’s direction and power  Speed   Please refer to the Geared Motor GM12A for more information   The reduction motor’s control values can be set using motor control constants       The direction and power must be set together         CCW  Counter clock wise  0   1023  Decimal numbers between 0 and 1023  CW  Clockwise  0   1023  Decimal numbers between 1024 and 2047The control values are numbers between 0 and 2047 Note Compatiable Controllers  CM100ExampleIn this example  the reduction motor connected to Port 1 will rotate in the clockwise direction for 1 second at maximum speed  before rotating in the counterclockwise direction for 1 second   These motions will repeat without end Tips  Make sure the motor is connected to the correct port   Speed and direction can be controlled separately using motor control constants   In this example  the motor in Port 1 is set as CCW700 and the motor in Port 2 is set as CW700 Servo MotorThis parameter is used to set the movements of servo motors   This parameter consists of 3 subparameters  move mode  speed  location   it helps to set up the movement of servo motor in more detailed way   Please refer to the Servo Motor SM10A for more information   Drive mode is set as either True or False           TRUE  1   Operate in joint mode   In joint mode  the speed parameter is used to configure power output  and the location parameter is used to configure angular movement       False  0  Operate in rotation mode  In rotation mode  the servo motor operates like a reduction motor  so only the speed parameter is used  The location parameter is ignored         Motor control constants can be used to set the speed  power            CCW  Counter clock wise  0   1023  Decimal numbers between 0 and 1023      CW  Clockwise  0   1023  Decimal numbers between 1024 and 2047            Location value constants can be used to set the location in joint mode           Uses decimal numbers between 0 and 1023       The red circle indicates the current values  The value can be set by dragging the jog dial with your mouse to the appropriate value       The maximum controllable angle is 300°  Thus  the minimum controllable angle  indicated by the location value of 1  is 0 29°  300°   1024   0 29°           For detailed information about controllable angles  refer to the Servo Motor SM10A Note Compatiable Controllers  CM100ExampleSet the servo motor at Port 3 in rotation mode and turn it clockwise with 600 outputs Set the servo motor at Port 3 in joint mode and move it to location 500 with maximum speed Tips  Make sure the motor is connected to the correct port   The servo motor is not suitable for detailed control  as it lacks the precision and torque of a Dynamixel motor Warning If a program that controls LED modules is executed while another module  servo motor  IR module  etc   is connected to the port  the module may be damaged Touch SensorThis parameter is used to read the status of touch sensor  whether is was touched or not  Please refer to the Touch Sensor TS10 for more information While the sensor being touched  the returned value will be TRUE 1   However  if you take off your hands from touch sensor  the returned value will be reset as False 0  Note Compatiable Controllers  CM100  CM510  CM700ExampleThis example executes a block of code when the touch sensor at Port 3 is touched LED ModuleThis parameter is used to turn on the LED or to read its current status  Please refer to the LED Module LM10 for more information       LED module output constants can be used             The actual values are numbers between 0 and 3  The following list shows what each value represents when setting or reading the LED module values           0  Turn off both LEDs       1  Turn on right LED only       2  Turn on left LED only       3  Turn on both LEDs       Note Compatiable Controllers  CM100ExampleTurn on both LEDs connected to Port 3 Warning If a program that controls LED modules is executed while another module  servo motor  IR module  etc   is connected to the port  the module may be damaged IR SensorThis parameter is used to read the value of the IR sensor module  Please refer to the IR Sensor IRSS10 for more information   IR sensor values are numbers between 0 and 1023   For objects with the same or similar color  the closer it is  the higher the value  closer to 1023   and the farther away it is  the lower the value  closer to 0    For objects with the same distance  the lighter  white  the object  the higher the value  and the darker  black  the object  the lower the value Note Compatiable Controllers  CM100  CM510  CM700ExampleThis example executes a block of code if the value of the IR sensor connected to Port 3 is less than 500 Warning If a program that controls IR modules is executed while another module  servo motor  LED module  etc   is connected to the port  the module may be damaged DMS SensorThis parameter is used to read the value of the DMS sensor  Please refer to the Distance Measurement Sensor DMS80 for more information   DMS sensor values are numbers between 0 and 1023   For objects with the same or similar colors  the close it is  the higher the value  closer to 1023  and the farther away it is  the lower the value  closer to 0    Unlike IR sensors  DMS sensors are hardly affected by colors Note Compatiable Controllers  CM510  CM700ExampleThis example executes a block of code if the value of the DMS sensor connected to Port 3 is less than 500 User DevicesThis parameter is used to set or read the values of user’s devices  Please refer to the Custom Device for more information   Although the same address is used to read  amp write values  the actual port pins are different Check user’s port pin information    The value read from the user’s device is the voltage level of the input port   The value read is a number between 0 and 1023   When the user’s device is set  as 1  It will deliver 5V to the output port   Setting the user’s device as 1 does not guarantee that the value read from the user’s device will be 1   The output of the user’s device can be set using port value constants Note Compatiable Controllers  CM510  CM700ExampleAfter setting the user’s device at Port 3 as 1  high   if the value read value from Port 3 is less than 500  the output port is set as 0  low  Dynamixel ParametersTorque EnableThis parameter is used to turn the motor’s torque on or off  It can also be used to determine whether the motor’s torque is currently on or off The value is either TRUE or FALSE   TRUE  1   When set to TRUE  the motor’s torque  turns on   When the parameter is read  a value of TRUE signifies that the motor’s torque is on   FALSE  0   When set to FALSE  the motor’s torque turns off   When the parameter is read  a value of FALSE signifies that the motor’s torque is OFF ExampleWhen the R button of the controller is pressed  the actuator with ID 1 will turn on   When the L button is pressed  it will turn off LEDThis parameter is used to set or read the Dynamixel’s LED status The value is either TRUE or FALSE   TRUE  1    When set to TRUE   the LED turns on  When the parameter is read  a value of TRUE signifies that the LED is on   FALSE   0    When set to FALSE  the LED turns off   When the parameter is read  a value of FALSE signifies that the LED is off ExampleTurns the LED on for 1 second and turns it off CW CCW MarginThese parameters are NOT available for MX Series These parameters are used to set  or read the actuator’s margin value   Margin values are numbers between 0 and 254   The margin designates the area around the goal position that receives no torque   The recommended value is 1  Unless otherwise specified  use the recommended value ExampleSet both margins as 1 CW CCW SlopeThese parameters are NOT available for MX Series These parameters are used to set or read the actuator’s slope value   The slope value will be created at both CW CCW  directions  and the output level will be set near the target position   If you set the lower slope value  it will reach to the target position by reducing the initial power NOT that much  On the contrary  if you set the higher value  it will reach the target position by reducing considerable powers as it reaches to the goal   If you set the lower slope value  it will resist with maximum power not to stray from target position   Even if you set the higher value  it will resist with more and more power if it is strayed too much from target position   Compliance Slope will be changed into 7 Data representative values according to the input Data  In other words  if you input 25  in real operation  16 the representative value of 25  will be used             Level      Real Data Value      Representative Data Value                  1      0  0x00    3 0x03       2  0x02               2      4 0x04    7 0x07       4  0x04               3      8 0x08  15 0x0F       8  0x08               4      16 0x10  31 0x1F       16  0x10               5      32 0x20  63 0x3F       32  0x20               6      64 0x40  127 0x7F       64  0x40               7      128 0x80  254 0xFE       128  0x80         Appropriate Compliance Slope  Power control  and the Compliance Margin values will make it possible to create smoother movement Note Compatiable Controllers  CM5  CM510  CM700ExampleSets both slope values as 32  Binary numbers are used to set the parameter PID GainThese parameters are NOT available for AX  DX  RX and EX Series Parameters for the actuator’s set PID values   P gain refers to the value of proportional band  A small gap between vales grow bigger near the target value   I gain refers to the value of integral action   D Gain refers to the value of derivative action   Gains values are in between 0 254 ExampleSet the P and I value 32Goal PositionThis parameters is used to set or read the actuator’s goal position   Position constants can be used   The value can be input directly  or set using the jog dial   The position values of AX  DX  and RXseries are numbers between 0 and 1023  The position values of EXseries are numbers between 0 and 4095ExampleWhen the R button of the controller is pressed  the goal position of the actuator with ID 1 will be set as 1   When the L button is pressed  the goal position will be set as 1023 Moving SpeedThis parameter is used to set or read the speed of actuator   Motor control constants can be used   In joint mode  the direction value is meaningless  and only the power value will be used   In joint mode  set the value as 0 to output at maximum power   In endless rotation mode  the direction and power values must be set together   The joint mode or endless rotation mode can be set using at RoboPlus Manager   Refer to actuator mode ExampleWhen the R button of the controller is pressed  the speed of the actuator with ID1 will be set as 0   When the L button is pressed  the speed will be set as 500  If the actuator is in joint mode  the speed of 0 equates to maximum output   Torque LimitThis parameter is used to set or read the power status of actuator   Torque limit values are numbers between 0 and 1023  ExampleSet the maximum torque of the actuator with ID 1 as 500 Present PositionThis parameter is used to read the actuator’s current position   The current position of the actuator is read ExamplePrints the present position of the actuator with ID 1 on the screen Present SpeedThis parameter is used to read the actuator’s current speed   The current speed of the actuator is read ExamplePrints the present speed of the actuator ID 1 on the screen Present LoadThis parameter is used to read the actuator’s current load   The current load of the actuator is read ExamplePrints the present load of the actuator with ID 1 on the screen VoltageThis parameter is used to read the Dynamixel’s current voltage   The current voltage of the Dynamixel is read   The actual voltage is 1 10 of the read value  For example  if the returned value is 115  the actual voltage is 11 5V ExamplePrints the current voltage of the Dynamixel with ID 1 on the screen TemperatureThis parameter is used to read the Dynamixel’s current temperature   The current temperature of the Dynamixel is read xamplePrints the present temperature of the Dynamixel with ID 1 on the screen MovingThis parameter is used to determine whether the actuator is currently moving or not   The status of the actuator’s movement  whether it is moving or not  is returned   If it is moving  1 is returned   If it is not  0 is returned ExampleSets the goal position of the actuator with ID 1 as 0  and waits for it to stop moving Sensed CurrentThis parameter is NOT available for AX  DX and RX Series This parameter is used to check the current being consumed  You can read EX Series motor’s current with this parameter   If the value is 512  the currnet is 0 ampere   That is  there is no current flowing   If the value is larger than 512  the current is rotating the motor clockwise  and the size of the current is proportional to the size of the data   1   aprroximately 10 mA   For example  if the data is 612  1A  612512 100   gt 100x10mA   1 000mA  is being used to rotate the motor in the clockwise direction   If the value is smaller than 512  the current is rotating the counterclockwise  and the size of the current is proportional to the size of the data    1   aprroximately  10 mA   For example  if the data is 312  2A  512312 200   gt 200x10mA 2 000mA  is being used to rotate the motor in the counterclockwise direction ExampleIf the current of the EX motor with ID 1 is larger than 1A and flowing in the clockwise direction  the LED will turn on   Otherwise  If it is larger than 2A  the motor will be turned off Universal Sensor S1IR Left Center RightThese parameters are used to read the current IR sensor value from the universal sensor AXS1    The current DMS sensor value of the universal sensor  S1  can be read   Sensor values depend on the object’s color and surrounding light  so using the IR sensor to measure the exact distance is not recommended   As mentioned above  IR sensor values are different if objects have different colors  even if they are the same distance away   This characteristic can be utilized to distinguish black from white   Used for tracing lines   The sensor value is between 0 and 255 ExampleIn this example  specific motions are performed when only the left IR sensor detects an object or when only the right IR sensor detects an object Tip  Sensor values may be affected by external lights that emit infrared rays  such as sunlight or a fluorescent lamp   Sensor values depend on the object’s color and surrounding light  so using the IR sensor to measure the exact distance is not recommended   As mentioned above  IR sensor values are different if objects have different colors  even if they are the same distance away  This characteristic can be utilized to distinguish black from white   Used for tracing lines Light Left Center RightThis parameter is used to read the current light brightness from the universal sensor S1    The current light brightness value of the universal sensor S1  can be read   The intensity of radiation of near by light sources such as candles and light bulb can be measured   The sensor value is between 0 and 255 ExampleA block of code is executed when the left sensor detects brightness over 200 Object DetectedThis parameter is used to determine whether an object is detected within a certain distance from an IR sensor  Left Center Right  of the universal sensor S1    If an object is detected within a certain distance  the following values are returned   Binary numbers can be used for the bit values             Binary value      Decimal value             Meaning in Object Detected Commands                  000      0      Not detected                     001      1      Detected by left sensor                     010      2      Detected by center sensor                     011      3      Detected by left and center sensors                     100      4      Detected by right sensor                     101      5      Detected by right and left sensors                     110      6      Detected by right and center sensors                     111      7      Detected by every sensor             ExampleThe object detection threshold is set as 50  and a block of code will be executed when an object is detected within the threshold Light DetectedThis parameter is used to determine whether a light is detected within a certain distance from an IR sensor  Left Center Right  of the universal sensor S1  Compatible Controller  If a light is detected within a certain distance  the following values are returned   Binary numbers can be used for the bit values             Binary value      Decimal value             Meaning in Object Detected Commands                  000      0      Not detected                     001      1      Detected by left sensor                     010      2      Detected by center sensor                     011      3      Detected by left and center sensors                     100      4      Detected by right sensor                     101      5      Detected by right and left sensors                     110      6      Detected by right and center sensors                     111      7      Detected by every sensor             ExampleThe light detection threshold is set as 50  and a block of code will be executed when a light is detected within the threshold Sound Max DataThis parameter is used to set or read the maximum sound data of the universal sensor S1    Reads the maximum sound data detected by the universal sensor S1    If the detected volume is louder than the volume of the max sound data  the max sound data is replaced with the detected value   The value is between 0 and 255   Because Sound max data is not initialized automatically  the user must reset it 0 before use Note Compatiable Controllers  CM5  CM510  CM700ExampleInitialize Sound max data as 0 and execute a block of code when it exceeds 200 Sound DataThis parameter is used to read the current sound level of the universal sensor  S1    Reads the sound data of the universal sensor S1    If no sounds are detected  the returned value will be near 127   When sounds are detected  the value will change according to the volume   The louder the sound  the more the value will fluctuate from 127 to 0 and 255   The value is between 0 and 255 Note Compatiable Controllers  CM5  CM510  CM700ExamplePrints the current sound volume on the screen Sound CountThis parameter is used to read or initialize the number of sounds detected by the universal sensor S1    Sound Count uses numbers between 0 and 255   When sounds are no longer detected  the number of detected sounds will be input into the ‘Sound Count parameter   Because Sound Count is not initialized automatically  the user must reset it to 0 before use ExampleInitializes Sound count as 0 and wait for a sound to be detected  Then  call the Play function Sound TimeThis parameter is used to set or read how long the sound will be played   The value is between 0 and 65535   When sound count is initialized as 0  sound  time will be also initialized as 0 ExampleThe following example uses two AXS1 sensors to determine the direction of the detected sound Buzzer IndexThis parameter is used to set or read the musical note played by the buzzer of the universal sensor  S1    The Buzzer Time parameter must always be used with the Buzzer Index parameter   Buzzer Time must be set before Buzzer Index is set for the correct sound to be played    This order is very important    Click here for more information on Buzzer Time    Depending on what the Buzzer Time is set to  Buzzer Index can be set to play a musical note or a melody           Buzzer Time is set to 255  Melody Mode              Choose from 26 different melodies  0   25              When Buzzer Time is between 0 and 254  Musical Note Mode      Choose from 51 notes   The selected note will play for the length set as Buzzer Time       ExamplePlays melody  3 Plays Do  Mi  and Sol for 0 3 seconds each Buzzer TimeThis parameter is used to set or read how long the sound is played by the buzzer of the universal sensor  S1  Note Compatiable Controllers  CM5  CM510  CM700  Buzzer Time parameter must always be used with the Buzzer Index parameter   Buzzer Time must be set before Buzzer Index is set for the correct sound to be played   The order is important    Click  here for more information on Buzzer Time     Buzzer Time can be set using buzzer time constants   Buzzer Time can be set to a value between 0 and 255   Each value represents 0 1 second   For example  when Buzzer Time is set to 1  the note will be played for 0 1 second   The maximum length a note will be played is 5 seconds   Therefore  when values between 50 and 254 are entered  the note will be played for 5 seconds           When Buzzer Time is set to 255  Melody Mode      Choose from 26 different melodies  025                When the melody finishes playing  Buzzer Time is reset to 0             Buzzer Time is between 0 and 254  Musical Note Mode      Choose from 51 notes   The selected note will play for the length set as Buzzer Time       When it is set to 254  the sound will play without end       ExamplePlays melody  3  Plays Do  Mi and Sol for 0 3 seconds each    Same as the example in Buzzer Index IR COM ArrivedThis parameter is used to check whether there are any new data received via the wireless communication module   1  Indicates that there is new data in the input buffer   0  Indicates that all data in the input have been retrieved using the IR COM RXD’ parameter ExampleWaits for new data to arrive and executes a block of code when the received data is 100 IR COM RXDThis parameter is used to read the data received via the wireless communication module Note Compatiable Controllers  CM5  CM510  CM700  The data is a number between 0 and 65535   The IR COM Arrived parameter is can be used to check for new data   Because there is an input buffer  a maximum of 2 data values can be saved   If the input buffer is filled with 2 data values when READ is executed  the first data will be read and removed from the buffer  If there is only 1 data value in the input buffer when READ is executed  the latest data will be retrieved ExampleWaits for new data to arrive and executes a block of code when the received data is 100 IR COM TXDThis parameter is used to transmit data via a wireless communication module Note Compatiable Controllers  CM5  CM510  CM700  The data to send must be a number between 0 and 65535   When the Remocon TXD parameter is set  the data is immediately sent wirelessly ExampleWaits for new data to arrive  and when the data arrives  the received data is transmitted wirelessly Object Detection ThresholdThis parameter is used to set or read the object detection threshold Note Compatiable Controllers  CM5  CM510  CM700  Set the object detection threshold to be used when determining whether an object is detected or not   There is a shortrange detection mode and a longdistance detection mode   The short range detection mode is activated when the threshold value is set as 0 ExampleThe object detection threshold is set as 50  and a block of code will be executed when an object is detected within the threshold Light Detection ThresholdThis parameter is used to set or read the light detection threshold of the universal sensor  S1  Note Compatiable Controllers  CM5  CM510  CM700  Set the threshold to be used when determining whether a light is detected or not ExampleThe light detection threshold is set as 50  and a block of code will be executed when a light is detected within the threshold IR Sensor ArrayIR Sensor ValueThese parameters are used to read the current IR sensor value from the IR Sensor Array   The IR array reads values between 1 and 7  The array can be used at distances from 0cm to 5cm   Textures and colors from walls and obstacles can influence the output values of the IR array   The sensor value is between 0 and 1023 ExampleDetected values can emit different sounds as following the array’s values Tip  Sensor values may be affected by external lights that emit infrared rays  such as sunlight or a fluorescent lamp   Sensor values depend on the object’s color and surrounding light  so using the IR sensor to measure the exact distance is not recommended   As mentioned above  IR sensor values are different if objects have different colors  even if they are the same distance away  This characteristic can be utilized to distinguish black from white   Used for tracing lines IR Array Buzzer IndexThis parameter is used to set or read the musical note played by the buzzer of the ir sensor array  The Buzzer Time parameter must always be used with the Buzzer Index parameter   Buzzer Time must be set before Buzzer Index is set for the correct sound to be played    This order is very important   Click here for more information on Buzzer Time    Depending on what the Buzzer Time is set to  Buzzer Index can be set to play a musical note or a melody           Buzzer Time is set to 255  Melody Mode              Choose from 26 different melodies  0   25                      When Buzzer Time is between 0 and 254  Musical Note Mode      Choose from 51 notes   The selected note will play for the length set as Buzzer Time       ExamplePlays melody  3 Plays Do  Mi  and Sol for 0 3 seconds each IR Array Buzzer TimeThis parameter is used to set or read how long the sound is played by the buzzer of the ir sensor array   Buzzer Time parameter must always be used with the Buzzer Index parameter   Buzzer Time must be set before Buzzer Index is set for the correct sound to be played   The order is important    Click  here for more information on Buzzer Time     Buzzer Time can be set using buzzer time constants   Buzzer Time can be set to a value between 0 and 255   Each value represents 0 1 second   For example  when Buzzer Time is set to 1  the note will be played for 0 1 second   The maximum length a note will be played is 5 seconds   Therefore  when values between 50 and 254 are entered  the note will be played for 5 seconds           When Buzzer Time is set to 255  Melody Mode      Choose from 26 different melodies  025                When the melody finishes playing  Buzzer Time is reset to 0                     Buzzer Time is between 0 and 254  Musical Note Mode      Choose from 51 notes   The selected note will play for the length set as Buzzer Time       When it is set to 254  the sound will play without end       ExamplePlays melody  3 Plays Do  Mi  and Sol for 0 3 seconds each Auto Threshold ModeParameters for set black values and automatic detection start set   Starts when transitioning from ‘0’ to ‘1’ then sets after transitioning from ‘1’ to ‘0’  Also sets the timer from start to set ExampleDuring a ‘1’ the LED will turn on  detecting a white or black then the array automatically sets values IR Obstacle DetectedParamenters to determine IR array obstacle values  In the IR array if each IR sensor detected black value is lower than the set black valuethe values will be assigned as shown below the LED turns on             Binary value      Decimal Value      Black Detection                  0000001      1      Black detection for IR sensor  1              0000010      2      Black detection for IR sensor  2              0000100      4      Black detection for IR sensor  3              0001000      8      Black detection for IR sensor  4              0010000      16      Black detection for IR sensor  5              0100000      32      Black detection for IR sensor  6              1000000      64      Black detection for IR sensor  7        From the diagram you may check binary values   IR Obstacle  img_ir_obstacle ExampleSet sensor  1 to 100 when sensor  1 detects black do a specified action IR ThresholdReference black white for the IR array  Determines white black set values   sensor and set black values                   Black Detection      LED                  Sensor value  lt  set value      BIT 1      ON              Sensor value  gt set value      BIT 0      OFF      ExampleSet sensor  1 to 100 when sensor  1 detects black do a specified action Direct AccessThe address of peripheral devices such as Dynamixels can be accessed directly and read from or written to Note Compatiable Controllers  CM5  CM510  CM700  Data can be read from or written to a specific in the form of bytes or words ExampleWrite 0 at word address 25 of the Dynamixel with ID 105 Print the value stored in the word address 25 of the Dynamixel with ID 105 VariablesThis is a storage place inside a program capable of saving  editing  and reading data   If a variable with the same name already exists  it is not created   Instead  the existing varible is used   Spaces are not permitted in variable names   Variable names cannot start with a number   Special characters     @        etc   are not allowed in variable names  Underscores   _   are permitted  ExampleVariables may be used for many purposes   Existing Variables are listed in the Set Device or Number window TipVariables are useful when a number to be remembered  when a value must be changed depending on the situation  or when multiple values must be changed at once ",
      "url": "http://0.0.0.0:4000/docs/en/software/rplus1/task/programming_02/"
      } ,
  
  
      "docs-en-software-rplus1-task-task-misc":  {
      "title": "R+ Task 1.0",
      "content"	 : "   Miscellenous   miscellenous     Select Controller   selectcontroller The commands and parameters that can be used in RoboPlus Task depend on the controller   Therefore  a controller must be selected before creating a program   select controller  select_controller  If you change the controller while you are writing a program for another controller  errors may be raised during the rule check process  To use a program designed for another controller  the incompatible commands and parameters must be changed accordingly     Rule Check   rulecheck Rule check is the process to verify that the task code has been written appropriately according to the rules   RoboPlus Task has a function that checks for grammatical errors and prints the causes and locations of errors   An example of a grammatical error and its location is shown below        Sentence Check ollo_bug_product_en     Line13 Please select a device or number     Tottal Error 1       Doubleclick on the error message to move to the location of the error      Errors   errors The following is a list of grammatical errors1   Select the number or device   error_01 2   Block beginning doesn t exist   error_02 3   A block must be designated   error_03 4   Only 1 Start Program is permitted   error_04 5   Start Program cannot be defined in a block   error_05 6   A function cannot be defined in a block   error_06 7   A command to execute the designated block does not exist   error_07 8   This line should be included in a block   error_08 9   The start and end of the block are not paired   error_09 10   Start Program does not exist   error_10 11   A function with the same name already exists   error_11 12   Restoration can only be used in a function   error_12 13   A label with same name already exists   error_13 14   A function cannot call itself   error_14 15   If If else has been used improperly   error_15 16   There is no loop to end   error_16 17   A block must consist of at least one command   error_17 18   A jump to another block is not permitted   error_18 19   The called function does not exist   error_19 20   Only 1 callback function may exist   error_20 21   A callback function cannot be defined in a block   error_21 22   This command cannot be used in a callback function   error_22 23   This device cannot be used in a callback function   error_23 24   This command cannot be used with the selected controller   error_24 25   There is a device which cannot be used with the selected controller   error_25      Solutions   solutions 1  Select the number or device      Cause of Error   Solution                  The parameter has not been set Properly set to a unset parameter        img_01  img_01    img_02  img_02  2  Block beginning doesn t exist      Cause of Error   Solution                  A block does not exist in a command line Properly set the block        img_03  img_03    img_04  img_04  3  A block must be designated      Cause of Error   Solution                  A duplicate block without a command line Properly set the block        img_05  img_05    img_06  img_06  4  Only 1 Start Program is permitted      Cause of Error   Solution                  Two or more Start Program exists Create only one Start Program        img_07  img_07    img_08  img_08  5  Start Program cannot be defined in a block      Cause of Error   Solution                  Start Program exists in the block Remove the block from the Start Program        img_09  img_09    img_10  img_10  6  A function cannot be defined in a block      Cause of Error   Solution                  Function is located within a block Remove the function from the block        img_11  img_11    img_12  img_12  7  A command to execute the designated block does not exist      Cause of Error   Solution                  Block exists without a command or condition line Added the omitted command or delete        img_13  img_13    img_14  img_14  8  This line should be included in a block      Cause of Error   Solution                  A command without a block is located outermost Move the command to a proper location or delete        img_15  img_15    img_16  img_16  9  The start and end of the block are not paired      Cause of Error   Solution                  The start and end of the block are not paired Please set the area properly        img_17  img_17    img_18  img_18  10  Start Program does not exist      Cause of Error   Solution                  Start Program does not exist Create a Start Program        img_19  img_19    img_20  img_20  11  A function with the same name already exists      Cause of Error   Solution                  A label with the same name already exists Change duplicate function name or delete        img_21  img_21    img_22  img_22  12  Restoration can only be used in a function      Cause of Error   Solution                  The restoration command is used in a location other than a function Create a restoration command within a function or delete        img_23  img_23    img_24  img_24  13  A label with same name already exists      Cause of Error   Solution                  Duplicate label name exists Set to a different name or delete        img_25  img_25    img_26  img_26  14  A function cannot call itself      Cause of Error   Solution                  The function is called within the function Replace with a proper command or delete        img_27  img_27    img_28  img_28  15  If If else has been used improperly      Cause of Error   Solution                  If else  If has been used without Else Revised according to usage If  Else If  Either        img_29  img_29    img_30  img_30  16  There is no loop to end      Cause of Error   Solution                  The End Repeat command is used at a location other than a loop End Repeat command can only be used within the loop  delete if unnecessary        img_31  img_31    img_32  img_32  17  A block must consist of at least one command      Cause of Error   Solution                  A line does not exist behind a command that is required by a block Add a line required behind the command or delete        img_33  img_33    img_34  img_34  18  A jump to another block is not permitted      Cause of Error   Solution                  The label you wish to jump to is unavailable in the function Jump to a label within a function or delete        img_35  img_35    img_36  img_36  19  The called function does not exist      Cause of Error   Solution                  The called function does not exist Create a function or delete        img_37  img_37    img_38  img_38  20  Only 1 callback function may exist      Cause of Error   Solution                  Two or more callback functions exist Create only one callback function        img_39  img_39    img_40  img_40  21  A callback function cannot be defined in a block      Cause of Error   Solution                  Callback located in the block Remove callback from block        img_41  img_41    img_42  img_42  22  This command cannot be used in a callback function      Cause of Error   Solution                  Improper command located in callback The corresponding command has been deleted        img_43  img_43    img_44  img_44  23  This device cannot be used in a callback function      Cause of Error   Solution                  An unusable parameter located in callback Delete corresponding parameter        img_45  img_45    img_46  img_46  24  This command cannot be used with the selected controller      Cause of Error   Solution                  Unsupported command being used in the current controller Delete corresponding command or set to supported controller        img_47  img_47    img_48  img_48  25  There is a device which cannot be used with the selected controller      Cause of Error   Solution                  Unusable parameter being used in the controller Either deleted the corresponding parameter or set to a controller which is supported        img_49  img_49    img_50  img_50      Error Messages   errormessages The following table provides a list of errors you may see while writing codes and printing the output on the screen with RoboPlus Task  Error Code Description Output Example            8100 Trying to communicate with an unconnected Dynamixel ID If it is connected  please check the cable again     ERROR8100000503   8100  Error Code0005  The Dynamixel ID03  Confidential Information  0009 Too many consecutive function calls   More than 6 times     ERROR0009003306   0009  Error Code0033 Confidential Information06  Confidential Information  8001 Attempting to read an address of the controller designated as write only     ERROR8001000C02   8001  Error Code000C  Confidential Information02  Confidential Information  8002 Attempting to write at an address of the controller designated as read only     ERROR8002000902   8002  Error Code0009  Confidential Information02   Confidential Information  None Motion page to execute does not exist     Invalid Page Read00FE   00FE  Motion page number  hexadecimal   select_controller   assets images sw rplus1 task task_select_controller png img_01   assets images sw rplus1 task task_rule_error_001 png img_02   assets images sw rplus1 task task_rule_error_002 png img_03   assets images sw rplus1 task task_rule_error_003 png img_04   assets images sw rplus1 task task_rule_error_004 png img_05   assets images sw rplus1 task task_rule_error_005 png img_06   assets images sw rplus1 task task_rule_error_006 png img_07   assets images sw rplus1 task task_rule_error_007 png img_08   assets images sw rplus1 task task_rule_error_008 png img_09   assets images sw rplus1 task task_rule_error_009 png img_10   assets images sw rplus1 task task_rule_error_010 png img_11   assets images sw rplus1 task task_rule_error_011 png img_12   assets images sw rplus1 task task_rule_error_012 png img_13   assets images sw rplus1 task task_rule_error_013 png img_14   assets images sw rplus1 task task_rule_error_014 png img_15   assets images sw rplus1 task task_rule_error_015 png img_16   assets images sw rplus1 task task_rule_error_016 png img_17   assets images sw rplus1 task task_rule_error_017 png img_18   assets images sw rplus1 task task_rule_error_018 png img_19   assets images sw rplus1 task task_rule_error_019 png img_20   assets images sw rplus1 task task_rule_error_020 png img_21   assets images sw rplus1 task task_rule_error_021 png img_22   assets images sw rplus1 task task_rule_error_022 png img_23   assets images sw rplus1 task task_rule_error_023 png img_24   assets images sw rplus1 task task_rule_error_024 png img_25   assets images sw rplus1 task task_rule_error_025 png img_26   assets images sw rplus1 task task_rule_error_026 png img_27   assets images sw rplus1 task task_rule_error_027 png img_28   assets images sw rplus1 task task_rule_error_028 png img_29   assets images sw rplus1 task task_rule_error_029 png img_30   assets images sw rplus1 task task_rule_error_030 png img_31   assets images sw rplus1 task task_rule_error_031 png img_32   assets images sw rplus1 task task_rule_error_032 png img_33   assets images sw rplus1 task task_rule_error_033 png img_34   assets images sw rplus1 task task_rule_error_034 png img_35   assets images sw rplus1 task task_rule_error_035 png img_36   assets images sw rplus1 task task_rule_error_036 png img_37   assets images sw rplus1 task task_rule_error_037 png img_38   assets images sw rplus1 task task_rule_error_038 png img_39   assets images sw rplus1 task task_rule_error_039 png img_40   assets images sw rplus1 task task_rule_error_040 png img_41   assets images sw rplus1 task task_rule_error_041 png img_42   assets images sw rplus1 task task_rule_error_042 png img_43   assets images sw rplus1 task task_rule_error_043 png img_44   assets images sw rplus1 task task_rule_error_044 png img_45   assets images sw rplus1 task task_rule_error_045 png img_46   assets images sw rplus1 task task_rule_error_046 png img_47   assets images sw rplus1 task task_rule_error_047 png img_48   assets images sw rplus1 task task_rule_error_048 png img_49   assets images sw rplus1 task task_rule_error_049 png img_50   assets images sw rplus1 task task_rule_error_050 png",
      "url": "http://0.0.0.0:4000/docs/en/software/rplus1/task/task_misc/"
      } ,
  
  
      "docs-en-software-rplus1-terminal":  {
      "title": "R+ Terminal",
      "content"	 : "   Introduction   introduction RoboPlus Terminal is a tool to help users to manipulate the controller by themselves through textbaed UserInterface  The terminal program communicates with the controller in the basis of ASCII code  and it prints various information transmitted by the controller for users      assets images sw rplus1 terminal roboplus_terminal_001 png    Serial Port Setting   serialportsetting The communication port must be set to connect to the controller using RoboPlus Terminal  If RoboPlus Terminal is started for the first time  the connection information is exactly restored   If the name of serial port is changed or the serial port is used in other program  it may not be connected to the controller  If Setup – Connect are executed while the communication port is not connected  the port selection window  can be seen as below   Select serial port and communication speed connected to the controller and click OK   Note  The basic connection speed of the controller is 57 600bps   notice      assets images sw rplus1 terminal roboplus_terminal_002 png  The serial communication setting of RoboPlus is as below  Parity bit  no parity Stop bit  1bit Data bit  8bit Hardware Control none   Processing Input   processinginput RoboPlus Terminal receives keyboard inputs and transmits the signals to PC and the connected controller through serial communication  The data pursuant to each key is as follows  Special Keys ASCII Key     0x08 Backspace  0x0d  0x0a Enter  0x1b ESC  0x1b  0x5b  0x41 Cursor up  0x1b  0x5b  0x42 Cursor down  0x1b  0x5b  0x43 Cursor right  0x1b  0x5b  0x44 Cursor left  0x1b  0x5b  0x48 Home  0x1b  0x5b  0x4b End  Other alphabet keys besides above transmit relevant ASCII code   Korean and UniCode are not supported      Clearing ScreenScreen clearing function is supported in RoboPlus Terminal   Execute Clear Screen command in the menu to erase the complete screen      assets images sw rplus1 terminal roboplus_terminal_003 png    Processing Controller Output   processingcontrolleroutput RoboPlus Terminal receives signals from connected controller and prints the contents on the screen       assets images sw rplus1 terminal roboplus_terminal_004 png     Controlling Cursor The size of terminal screen is 80x36  Width x Length  The cursor control string is as below  and it is the same as ANSI cursor control method   If letters are transmitted as the following type  RoboPlus Terminal moves the cursor to the designated location   The code of ESC key is 27    ESC YXH or ESC YXf    e g   27 1020f    moves to X 20  Y 10  The screen coordinates index is started from 1   Generally used control strings are as below  ASCII Key     0x08 Backspace Moves the cursor 1 space back  0x0a  LF Moves the cursor to the first position of the next line  0x0d  CR Moves the cursor to the first position of the same line  0x20 Space Moves the cursor to the next letter  0x21   0x7e Prints ASCII letters   from   to        Transmitting Receiving Data   transmittingreceivingdata RoboPlus Terminal can transmit receive large data to from the connected controller   There is no data transmission protocol      assets images sw rplus1 terminal roboplus_terminal_005 png    Transmitting DataRoboPlus Terminal can transmit the contents of files to the connected controller as binary format   If the extension is hex  it is changed into binary and transmitted based on Intel HEX format   Other extensions are just transmitted without changing   The file transmission procedure is as below  Prepare the connected controller to receive the data  Select Transmit file in the menu  Select files for transmission  If the recently transmitted file is just used  Page Down key can be used as the shortcut  The transmission status can be checked on the bottom part of RoboPlus Terminal      assets images sw rplus1 terminal roboplus_terminal_006 png      ByteSumThe loss possibility of transmitted data can be checked using ByteSum   ByteSum means the last 1 byte of the sum when all transmitted byteunit data are added   For example  if FD 23 4D 2D is transmitted  the sum of each data is 01 9A   From the sum  9A  the lowest byte  is ByteSum       assets images sw rplus1 terminal roboplus_terminal_007 png  In the menu  if Bytesum is marked  Bytesum packet is added to the last part of the file packet and when it is transmitted   The loss possibility of data can be checked by comparing the bytesum received from RoboPlus Terminal and calculated bytesum in the datareceived controller     Receiving DataRoboPlus Terminal can receive data from the connected controller and save them as files  The file reception procedure is as below  Select Receive File in the menu  Select the file name to save  If the recently saved file is just used  Page Up key can be used as the shortcut  Data transmission is started in the controller  The reception status can be checked on the bottom part of RoboPlus Terminal        assets images sw rplus1 terminal roboplus_terminal_008 png  When the data reception is completed  press End key to quit the data reception    Setting Option   settingoption The options of RoboPlus Terminal can be set     Setting ColorsThe background and text colors of RoboPlus Terminal can be set      assets images sw rplus1 terminal roboplus_terminal_009 png ",
      "url": "http://0.0.0.0:4000/docs/en/software/rplus1/terminal/"
      } ,
  
  
      "docs-en-software-rplus2-design":  {
      "title": "R+ Design",
      "content"	 : "Introduction      Editing Tab for Each Stage  The editing process of designing is divided into five stages as below  which are proceeded in order  Each tab menu can be accessed using a shortcut by pressing F1 F5 on your keyboard         Quick Launch menu  Without moving to the Home tab  a user can open a different design file or save the design file currently being edited   Home TabThe Home tab provides the menu for previously created samples and files  and also provides functions of settings and program information   Gallery  Tab where you can select a sample  Create New  Create a new design file to assemble a robot  Open  Open an existing design file  Save  Save the assembled robot as the design file  Save As  Settings  Help  Program Info  Check for Updates  CloseMy Robot TabMy Robot Tab is used to view or modify the information of my robot  Users can edit the name  author  and description of the robot  or view information on the parts used in creating the robot  My Robot Information  Enter and edit information about the robot  Parts List  The type and quantity of parts used in assembly  Robot Name  Edit Information  The button that opens a window for editing the robot information          Move center of robot to origin point  Moves the assembled robot to the center of the screen      Move viewpoint to origin point  Moves the current viewpoint to the center of the screen      Capture  Save the current image of the robot as the preview image Capture also sets the default viewpoint of the robot       Assembly TabThe Assembly tab is where the user assemble the robot in a virtual space  List  A list of the used parts  Top bar  Add part  Undo  Redo  Move robot to origin  Move viewpoint to origin  Snap On Off  grid On Off  Help  Bottom UI  Rotation UI  HoleBased Move UI  Move  rotate UI  Select menu  Information on selected partEdit Assembly Guide TabThe Edit Assembly Guide tab lets users create and edit an assembly guide for a robot assembled in the Assembly Tab  A basic assembly guide is made automatically during the assembly  but using this tab a user can create or edit a more elaborate guide   Event list  A list that shows the events move hide  for each part  however  hide events are not shown in the list   Top bar  Delete all events  Move viewpoint to origin  grid On Off  Help  Bottom UI  Select Menu  Event Part  InformationView Assembled Guide TabThe View Assembly Guide tab allows user to view the entire process of assembling the robot   Playback screen  Display and change playback speed  Operating buttonsPracticeOpen Sample  Click on the Gallery tab button on the Home Tab  Select a sample design file  Click the Confirm button  If the robot currently being assembled was not saved  a confirmation window will appear Open Design File  Click the Open button on the Home tab   Select the design file you want to open in the file selection window   Click the Open button  If the robot currently being assembled was not saved  a confirmation window will appear Create New Robot  Click the New button on the Home tab   If the robot currently being assembled was not saved  a confirmation window will appear   You can assemble the robot by moving on to the Assembly tabChange Viewpoint  Mouse  You can change the viewpoint by dragging the right button of the mouse   and the current viewpoint can be seen by looking at the small figure gizmo  in the bottom right corner  You can also use the mouse wheel to zoom in and out  If you rightclick on a particular part  the viewpoint will change to show the part on the center of the screen  Popup list  Use the popup list in the lower right corner to change to standard viewpoints  Selecting a viewpoint from the list will instantly change the display to that viewpoint   Button  You can change the viewpoint using the arrow buttons at the top  bottom  left  and right  You can click the button on the top right corner to return to the default viewpoint  which can be set in My Robot Tab  By clicking the button at the top you can change the viewpoint to face the origin point    Origin point  The point that indicates the center of the virtual space in which the 3D robot is assembled  shown as a red dot on the screen    Part Menu  You can select a part and press the Look At This button or keyboard shortcut  F  to change the viewpoint so that the part is shown at center of the screen Adding Part  Parts can be added by pressing the Add Part button at the top left corner or keyboard shortcut  P    When you press the button a Part Selection window will appear  which displays the category type on the top left  the series type on the bottom left  a search bar at the top  and the parts list on the center   You can easily find the part you wish to add by selecting or clearing the category and series check boxes on the left       You can use the search bar at the top by typing in the part name  You can enter the full name of the part to search for it  but there are rules to the names that allow you to easily search parts according to their color or shape of plate  For example  if you want to search only yellow parts then typing  y  will show all the yellow parts on the screen if you want to search only threebythree shape plates then typing 3b3 will show all the corresponding shape plates on the screen         If you doubleclick an item on the list or select the item and press the Confirm button  then the selected part will be displayed in the 3D space  At this time the part will be following your mouse  so find an appropriate place for the part and click the left mouse button to place the part in the 3D space  If you have selected the wrong part then press the ESC key to cancel the selection Select PartThe 3D space  In the 3D space you can leftclick on a part to select it  The selected part will be shown with a yellow border   Selectable types are part  group  hole  port  connecting part  and cable  and with the exception of the port every other type can be selected multiple items at a time   You can select multiple items by pressing the Shift key while selecting different items or by dragging the 3D space to select all parts within the area   For the holes  you get to select a surface so if you want to select the opposite surface you press Ctrl   click on a surface to select the opposite side  In this case  the surface of the hole you clicked on will be shown with a white border and the opposite side will be shown with a yellow border Part List  A part can be selected by clicking from the parts list to the left  but the list only shows the parts and groups so using the parts list will only have these two options to choose from   Multiple selection of items is possible by using the Shift and Ctrl keys Deselect Part  Pressing the ESC key or clicking on an empty area of the 3D space will cancel the selection of an item  Copying Part   Select a part and press the Copy button that appears on the bottom or the keyboard shortcut  Ctrl   C  to copy the part   When you copy a part a new copied item follows the mouse as when you have added a new part  and likewise pressing the ESC key will cancel the selection Change Part Color  Select a part and press the Change button that appears on the bottom or the keyboard shortcut  C  to change the color of the part   If you press the button or keyboard shortcut then a part selection window will appear showing a list of items you can change Delete PartSelect the part you want to delete and press the Delete button that appears on the bottom or the keyboard shortcut  DEL  to delete the part Move PartUsing the Gizmo  You can use the gizmo that appears after you select a part in order to move the part  The gizmo consists of three axes and three surfaces  and you can drag each axis or surface in order to move the part in the direction that it points to  Gizmo The gizmo appears when you select a part for the purpose of helping you move or rotate the part  There is also a small gizmo at the bottom right corner of the screen with only the three axes  which represent the current viewpoint    Using the gizmo to move a part supports the autosnap feature  When moving a part around  the autosnap feature allows the part to automatically attach itself in respect to a hole or an axis to another nearby part  When the autosnap feature is turned on  the holes to which the part can automatically attach to will be shown in red as in the image above    Once in a while there are occasions when you are moving a part around but the autosnap feature will not be working well  In these cases  if the part has a distinguishable frontside and backside you can flip the part around and move it in the opposite direction  or change the part that you are moving  B → A instead of A → B  in order to try and attach them more easily HoleBased Move  The majority of times you will be moving a part in order to place a part’s hole to match another part’s hole  in which case it is convenient to use holebased move   Holebased move is done by selecting both the moving part’s hole and the hole you intend to match it to at the same time using multiple selection  Shift   click  and then pressing the HoleBased Move button that appears on the bottom or the keyboard shortcut  M  in order to match the two holes       Holebased move can be done using 2 holes or 4 holes  When using 2 holes  the surface of the first hole selected will move to the surface of the second hole selected  When using 4 holes  choosing the right holes for the third hole and fourth hole is important because the third hole must be the same part as the first hole  and the fourth hole must be the same part as the second hole  So when using holebased move with 4 holes  the surface of the first hole selected will move to the surface of the second hole selected  and the surface of the third hole selected will move to the surface of the fourth hole selected             When selecting a hole it distinguishes the top and bottom surfaces  so it is important to choose the right hole when using holebased move  Pressing on a hole will select the visible surface of the hole  so the part can get flipped when moving the part  If you wish to move the part without it rotating  you can select the opposite surface of the hole   Selecting the opposite side of hole Ctrl  Click       Using the Bottom UI  Direct Input   When you select a part  the position POS  and rotation ROT  coordinates appear on the bottom  and the values can be modified directly in order to move or rotate the part   The bottom UI displays three axes which are in the same color as the axis that is represents in the gizmo  For example  if you want to move the part in the direction of the blue axis  you can change the value of the Zaxis shown in blue at the bottom UI Caution When you move a part  only the selected part or the part containing the selected hole will move  Even if the part is connected to other parts using connecting parts rivets  screws  etc   it will still move separately  so if you wish to move multiple parts at once you much select them together  use gizmo  or create a group and then move the group Rotate PartUsing the Gizmo  When you select a part and the gizmo appears  pressing the Alt key will change the shape of the gizmo  Now drag the axis you want to rotate and the part will rotate around that axis   Once in a while there are occasions when the dragging does not work well depending on the viewpoint or direction  so regardless of the direction of the axis it is easier to drag the gizmo up and down Using the Rotation UIWhen you select a part  the Rotation UI appears on the bottom and you can press the buttons on the UI or keyboard shortcuts before W    after S    left A    right D  to rotate the part 90 degrees Using the Bottom UI  Direct Input   When you select a part  the rotation ROT  coordinates appear on the bottom  and the values can be modified directly in order to rotate the part   For example  if you want to rotate the part around the red axis  you can change the value of the Xaxis shown in red at the bottom UI HoleBased RotationUsing the GizmoWhen you select a hole and press the Alt key a rotation gizmo appears  and dragging this gizmo will rotate the part around the selected hole Using the Rotation Slider  If you select a hole the rotation slider appears on the bottom   You can rotate the part by moving the needle on the slider or by clicking the buttons at the bottom or putting in a value for the angle Connect PartsPhysical Connection  Rivets  Screws   Select a hole and press the Attach button that appears on the bottom or the keyboard shortcut  T  to connect to another part   If you press the button or keyboard shortcut then a part selection window will appear showing a list of connecting parts you can attach to the hole   The part selection window has an option called Insert all the way in on the left  and if you turn off this option then it will insert the connecting part only as deep as the hole’s depth and not all the way in   You can select many holes and add connecting parts to them at the same time Electrical Connection  Cable       Select a port and press the Attach button that appears on the bottom or the keyboard shortcut  T  to connect parts electrically             If you press the button or keyboard shortcut then a part selection window will appear showing a list of cables you can attach to the port             Multiple selection of ports is not supported   GroupCreating a Group  Select multiple parts   Press the Group button at the bottom or the keyboard shortcut  G  to create a group   Parts that have been set as a group will move and rotate together as one part Editing a Group       a  Select a group and press the Edit Group button at the bottom or the keyboard shortcut  E  to enter the group editing mode  or  b  doubleclick the group icon on the left to enter the group edit mode             After you are finished editing  click the Complete Editing button to exit the group edit mode      UngroupSelect a group and press the Ungroup button at the bottom or the keyboard shortcut  U  to break up a group Edit Robot InformationRobot Information       a  Press the Preview Capture button to capture the preview image of a robot  The viewpoint during the capture will be the default viewpoint for the robot   b  Before saving the preview  you can press the Move to origin button or select the robot  leftclick  and move it using the gizmo to a position that you want             If you press the Click to Edit button a window will appear where you can edit the robot’s information  Here you can put in the robot’s name  author  etc       Part ListThe Parts List tab shows all the parts used in the robot  When actually making a robot you can easily view the parts you need  The can select multiple items in the Category list by pressing the Ctrl or Shift keys Edit Assembly GuideAssembly Guide  The Assembly Guide serves to visually demonstrate the assembling method of the robot assembled by the user  A basic assembly guide is made automatically during the assembly  but it is affected by the viewpoint or condition that was present during the assembly and may not create the Assembly Guide as the user intends it to  Therefore the Edit Assembly Guide tab allows the user to create or edit the guide       Making the Assembly Guide is done by recording the process of disassembling the robot  so when the guide is actually played  it shows it in reverse order so you see the robot getting assembled         The Assembly Guide consists of the events of each part part group connection part  cable   and the two types of events are move events and hide events  Hide events are not shown in the event list on the left  and are usually created automatically when a move event is created Delete Event  Delete All Events   To delete all the events press the Delete all events button on the top   Delete Specific Event  Select an event and press the Delete Event button on the bottom or the keyboard shortcut  DEL  to delete the selected event Select Part Event  When you select a part in 3D space  if the part already has events then the events will be selected together as well  and if it does not have an event then only the part will be selected   If only the part is selected  then you can add an event via the menu below  This event will be created next in order following whichever event was most recently selected   You can select an event from the event list on the left   However if there are two or more events for a part  then selecting a part in the 3D space may not select the event that you intend  In this case you should use the event list on the left   Selectable Parts  Part   Group   Connecting Part   CableAdd Event  Select a part without an event       Press the Add Move Event or Add Hide Event buttons on the bottom         If you press the Add Move Event button a gizmo will appear which you can use to move rotate the part   After moving rotating a part  if you save the event then it will save the first position and last position of the part to create an event that moves in the opposite order as you just moved the part   Move events and hide events need to exist together  so when you save a move event if there is no hide event then it will create it automatically  and vice versa Edit Move Event  To edit a move event  select the part for the event or select the event from the event list on the left   After selecting the event press the Edit button on the bottom or keyboard shortcut  E  to edit the event       While editing you can  a  press the Load Event button to load the currently editing event again  or  b  press the Reset Event button to return to the initial position  the last position when playing the event          After you are finished editing press the Save Event button or the keyboard shortcut  V  to save the modified event Add Move Event  If you want to create multiple move events for one part  select an event and press the Add Event button on the bottom or the keyboard shortcut key  A    After adding move events  save the event Change Event Viewpoint  If you want to simply change the viewpoint slightly  select the event and create a viewpoint that you would like to save   As in the Assembly Tab  you can  a  drag or click the right mouse button to change the viewpoint  or  b  use the Align with previous viewpoint or Align with next viewpoint buttons on the bottom to change the viewpoint   After you finish changing the viewpoint press the Save View button on the bottom or the keyboard shortcut  V  to save Install InstructionInstall on PC      Click on Downloads after accessing to ROBOTIS website             Search for the latest version of RoboPlus             Click on Download Link             Install the downloaded file             You will be able to see the R Design icon once installment is done       Install on SmartphoneRun Play Store or App Store and search for ROBOTIS Install R m Design  You will be able to see the icon on the home screen ",
      "url": "http://0.0.0.0:4000/docs/en/software/rplus2/design/"
      } ,
  
  
      "docs-en-software-rplus2-manager":  {
      "title": "R+ Manager 2.0",
      "content"	 : "IntroductionRoboPlus Manager 2 0The RoboPlus Manager 2 0 manages the Controller and Dynamixel devices that comprise the robot By connecting the product  the user can update the product to the latest version and test the Control Table The functions that were previously provided in RoboPlus Manager 1 0 and Wizard 1 0 have been combined in RoboPlus Manager 2 0 PrecautionsSupported products are limited starting from V2 0 0  For products that are not included in the list of supported products  please use RoboPlus Manager 1 0 and Wizard 1 0 List of Supported Products  Robotis Dream  Robotis MINI  Dynamixel 2 0 Series  MX28  MX64  MX106  XL320  XM Series  XH Series  Pro Series Definition of FirmwareFirmware is basic software that is installed on a device to operate the hardware  Firmware contains communication protocols with PC  smartphone  and other devices so it is recommended to keep the firmware to the latest version All devices  Controller  Dynamixel etc  have firmware installed when first purchased  but new versions can be released if there are additional functions   bug fixes Role of Controller Firmware  Operates the control program written using RoboPlus Task  Interprets the motion data written using RoboPlus Motion  Performs packet communication function with PC  smartphone  and DynamixelRole of Dynamixel Firmware  Performs packet communication function with Controller when operating control program or motion on the Controller  Performs packet communication function with PC  smartphone  and DynamixelImportance of Firmware Update  A new firmware can be released if there are additional functions or modifications to previous functions   A new firmware can be released to improve compatibility if supporting a new S W is necessary   A new firmware can be released if there is a bug fix   If the product does not function properly or communication is unstable  updating to the latest firmware may fix the problem Menu DescriptionEditing Tab for Each StageThe workspace is divided into Home Tab  Managing Tab  and Terminal Tab   The SelfChecklist   Calibration functions in the Managing Tab and the Terminal Tab are not available as of yet in V2 0 0  Home TabThis is the first screen right after starting the program  which provides functions such as Product Selection menu and Firmware Update history function  etcManagement TabThis tab provides Firmware Update   Test   Recovery functions for the previously selected product  Depending on the selected product  the functions that can be used are filtered and showed The figure below is a screen of testing the Control Table  It shows all searched products according to their communication speed and device model  and you can test by modifying the values in the Control Table Terminal TabThis feature is currently being prepared and will be supported in upcoming updates Basic FeaturesFirmware Update      In the Home Tab select the product that you wish to update or test   ROBOTIS MINI was selected in the example below             Select the Update  amp Test menu              Connect the product with the PC as guided on screen and then turn on the product             Select the connection port and click the Next button   Bluetooth serial port was used in the example below              Select the communication speed to search and click the Next button   When using Bluetooth serial port  only 57 600bps can be used             Check if the device to be managed has been properly searched and click the Next button   If the product is not searched properly  then click the Try Again button              If the content to be updated is detected  then the Update Now button below will be activated  Check the update content and click the Update Now button              Wait until the update has been properly completed and click the Next button             If the update has been completed  then the Control Table test function will be executed   Some controllers will turn off after the update is complete  and the window will be closed        Firmware Recovery      In the Home Tab  select the product that you wish to recover   ROBOTIS MINI was selected in the example below             Select the Firmware Recovery menu              Check the notification message and click the Next button             Select the product you wish to recover and click the Next button   OpenCM9 04 was selected in the example below             Follow the instructions that appear in order  Be sure to the check the yellow warning message below         After all preparations are finished click the Next button             Select the connection port and click the Next button   Bluetooth serial port was used in the example below         Once the device is connected  bootloader is detected for firmware installation  Click the Next button when it is activated             Check the information of the firmware to the installed and click the Next button              When the recovery is complete  click the Finish button       Dynamixel Control Table      To begin we will assume the Control Table window is open   Please refer to the Firmware Update section for the connection process          The Control Table window categorizes the control tables according to their communication speed and device model  Select the communication speed and device model that you wish to test   XL320 was selected in the example below              From the menu on the right  clicking the Factory Reset button will restore all settings of the product to their factory default configuration   The ID and Baud Rate value will not be changed   From the menu on the right  clicking the Rebooting button will restart the corresponding Dynamixel  From the menu on the right  click the Turn On Off Torque button will turn the corresponding Dynamixel’s torque on or off              From the menu on the right  click the Turn On Torque button to turn the Dynamixel’s torque on         In the Control Table list  search and select the Goal Position item         Use the Goal Position control on the lower right corner to move the motor     Warning Take caution since the motor can suddenly move in the process of changing the value         You can check if the current communication between the PC and the product is normal through the Communication Status LED on the lower left corner   Green  Normal  Yellow  TimeOut  Red  Data Loss   You can check the Dynamixel’s response status through the Response Error message on the lower left corner       You can check the hardware’s error status through the Hardware Alarm message on the lower left corner              Some Dynamixels provide the function to view the Profile Type status In a given Operating Mode  the Profile Type is decided by the Profile Acceleration value and the Profile Velocity value  Please refer to the corresponding Dynamixel’s EManual for details   Supported products  XM Series and XH Series       Note For further information about the Control Table  please refer to each Dynamixel Controller Control Table      Select the controller to connect in the Home tab   OpenCM7 0 is selected in the example             Click Update  amp Test icon             Connect the controller to PC according to the described image             Select COM port to establish connection between PC and controller  USB port is selected in the example  Click Next button             Select Baud Rate to establish connection between PC and controller  Click Next button             Confirm detected device with selected port and baudrate then click Next button  If the device is not detected  click Retry button and try again             If there is any available firmware updates for the device  update menu will be available  Click Update Now button to update the device  If connected device already has the latest firmware  you will see below screen  Click Next button to proceed             When the connection is established between PC and controller  below screen will be appeared  Control Table window arranges device with Baudrate and Device  If you have connected multiple devices  select baudrate and device of the controller to test             On the right column of the window  Factory Reset button will reset all configuration except ID and Baudrate             On the left bottom corner of the window  TX and RX communication status is visualized with colred bar  Green  normal  Yellow  timeout  Red  data loss Return Error will notify response status of the device and H W Alert will notify error status of the hardware             Select an item with RW access property and change its value to test controller  For below example  select Green LED and change its value from the right table will control green LED on the controller             Various peripheral devices can be attached and tested  Click the extention triangle button to display sensor selection pop up window             Changing peripheral device will also change the address for the device  In the below example  selecting Ultrasonic sensor for port 3 will update its address to 244       Note For more details on peripheral devices  please refer to R  Task 2 0 Advanced FeaturesPreparation for XM XH SeriesThere are two preparations that need to be done for using the XM Series in R Task2 0 or R Motion2 0  Preparing the H W   Configuring the Dynamixel Channel Preparing the H W  Apart from the OpenCM9 04 and XM Series  the OpenCM 485 EXP board is needed as in the figure below   Connect the three components below with cables Configuring Dynamixel Channel      Open R  Manager 2 0 and select the Dynamixel2 0 product  then click on the Update  amp Test menu         Connect the OpenCM9 04 to the PC by usingLN101 or BT210 or BT110   then turn on the OpenCM 485EXP       Follow the instructions below to search the product forOpenCM9 04  Initially the Dynamixel Channel value of the OpenCM9 04 is set to Default so the XM XH Series does not appear in the search result          After the process of updating the product  the Control Table will open       From the Control Table list  set the Dynamixel Channel value to EXP Board  Expansion Board and click Save         When the configuration is finished  close the Control Table window and restart the OpenCM 485 EXP   As it is restarted the  the mini TTL bus of the OpenCM9 04 is deactivated  and then Dynamixel bus of the OpenCM 485 EXP is activated        Open the Update  amp Test menu again and check that the XM XH Series is properly detected in the search result         When the configuration is finished  you can now use the XM XH Series in R  Task 2 0 and R  Motion 2 0   Supported from versions R  Task 2 0 v2 1 0  R  Motion 2 0 v2 4 0 or later Changing Control ValueUse the left mousebutton to drag and change the value used when changing the value in large amounts  Use the mouse wheel to change the value  used when changing the value in small amounts  Use the arrow keys in the keyboard to change the value  used when changing the value minutely  Inputting the value directly  You can also use basic arithmetic operations  addition  subtraction  to set the value Firmware InformationThis is the function to check the Firmware version  release date  and update note   In the Home Tab  select the product for which you wish to check the Firmware version       Click on the Firmware Information button on the upper right corner             You can check the Firmware version  release date  and update note of the selected product       Firmware Management Bluetooth By using the BT210 or BT110 you can manage the Firmware wirelessly  The BT410 does not provide a wireless Firmware management function Add a Bluetooth serial port by following the instructions below  Example below shown for Windows10    Connect the BT210 or BT110  to the Controller and turn on the Controller       Click on the Windows start button  and select the Settings menu             Click on the Devices menu          Select the Bluetooth category on the left  and turn on the Bluetooth option on the right       Select the searched Bluetooth module  and chick the Pair button             In the device password field  enter 0000 and click on the Next button              When the pairing is complete  select the paired device and click on More Bluetooth options found below             Click on the COM Port tab and check the port number of the transmission port   In the example below it was COM7              In R  Manager 2 0  select the installed Bluetooth port number and you can now manage the Firmware wirelessly       ",
      "url": "http://0.0.0.0:4000/docs/en/software/rplus2/manager/"
      } ,
  
  
      "docs-en-software-rplus2-motion":  {
      "title": "R+ Motion 2.0",
      "content"	 : "IntroductionMotion is a necessary set of position and speed data for motors  which eventually becomes a valid movement for a robot In order to make the robot move  the correct Motion project file must be edited and downloaded to the robot The Motion project file has an  mtnx extension  and is shown on the PC as the icon below   What is the relationship between a Motion file and Task file The Task file is a program code which defines the logics on how the robot will think and move  The Motion file is the data which defines the movements based on the decisions made from the Task file If the robot only performs simple movements  its Task file will not require any Motion file  But if precise movement is required  such as a dance choreography  it will be much more efficient to use the Motion file  If the Motion file is used in the Task code  the Motion file must be downloaded to the robot as well Menu      Editing tab per phase Motion editing is divided into the following 4 phases  which is performed in the sequential order  Each tab menu can be accessed through shortcut keys F1 F4 as well             Quick Menu Open a project or save the current project without having to move to the Home tab         Robot Connection Menu When the Connect button is clicked and the Connect Robot window is activated  you may select the port number to connect to your robot             Log window The log window shows Info or Error that are notified during the motion editing process  As seen in the image below  the 1  Log Level  2  Log Time  and 3  Message is shown       3D Robot and Acutal RobotThe 3D robot acts as an avatar of the actual robot  Even when an actual robot is not present  the 3D robot can be used to edit or playback motions When the actual robot is connected  and Sync Mode is turned on  the 3D robot can be used as an interface to control the actual robot When creating a new motion project  users can select a 3D model to open  based on the product lineup provided in the software The 3D robot initially selected can be edited after creating the motion project If the user is using a user created robot apart from the provided 3D models  a customized robot can be created by adding descriptions on each motor  image below  Motion DataThe data structure of a motion file is described in the image below       KeyFrame This is a similar concept as the Motion Step in the previous Motion software  It is a combination of 1  pose and 2  time on timeline  to express WHAT  pose  to show WHEN  time   For example  if a ‘Hurrah’ pose is saved as a KeyFrame on 1 5 sec on the timeline  the robot will start to move into the ‘Hurrah’ pose as the timeline approaches 1 5 sec             Motion Unit This is a similar concept as the Motion Page in the previous Motion software  It is a group of KeyFrames placed on the timeline  to show a continuous movement  As seen on the image below the ‘Clap’ motion unit has the hands spread KeyFrame on 0 5 sec  and hands closed KeyFrame on 1 sec  The continuous movement  Motion Unit  will be a clapping motion             Motion This is a similar concept as the Page Link in the previous Motion software  Motion is a group of Motion Units to express long movements  such a dancing motions  As seen in the image below  the Taekwon Dance Motion is a link  group  of the Motion Units Left Jab  Left turn  Right Attack 1  and Right Uppercut             Motion Group File size is unlimited in Motion 2 0  So  when downloading to the robot  users must select the specific Motions they want to download to the robot  while checking the space available on the robot  The list comprised of the selected Motions is called the Motion Group  The bar on the right displays the amount of space the Motion Group will take up on the robot’s controller  On the image below  the Demonstration Set Motion Group has 4 Motions in the list  and takes up 13 4% of the controller’s space             3D Robot The 3D robot is the output when motion data is put in  It is also active even when an actual robot is not connected so users can easily check and playback the motion they are creating  Users are required to select a 3D robot when creating a motion file  and may also use the Change 3D Robot menu  The image below is an example showing the same motion data opened on different 3D robots       Editing TimelineIn the previous version of Motion software  the Motion Page was used to express a robot’s motion  In Motion 2 0  the Motion Unit is used The Motion Unit has one timeline  and poses are placed  saved  on the timeline In the previous version  users were only able to save 7 Steps in one Page  and were required to create another Page when making 8 or more Steps But in Motion 2 0  there is no restriction on the number of Steps  poses   Also  by using the KeyFrame function on the timeline  the Steps are now placed on a flow of timefor easier expression and editing of continuous motion   Editing the KeyFrame – KeyPoses are placed on the timeline to create a continuous motionA Step placed on the timeline is shown by the bar  for an intuitive display of the interpolation pose between each Step Editing Flow ControlIn the previous version  the link between motion pages  repetition  and playback speed were all dependent on each Page  Due to this it was difficult to reuse data that was created But in Motion 2 0  the flow control  link  repeat  playback speed  is no more dependent on the Motion Unit  So  the Motion Units are now reusable with variations on repetition or speed  Also  by using 2D blocks  arrows  and flow chart  users can easily check on how the final motion will be The image below is an example of a motion flow  The final motion will be performed as  Play the Motion Unit Greet 2 twice at 1 3x speed  Play the Motion Unit Sit once at 1 0 speed  Play the Motion Unit Stand Up once at 1 0 speed Download Motion FileIn the previous version  the motion file size was limited based on the space available on the robot’s controller  So  saving a large file required multiple files to be saved In Motion 2 0  the motion project itself has no limitations on the file size  Once a large project is completed  users can just select the Motions they want to download to the robot These Motions can be grouped into Motion Groups for easier grouping  and finally  one Motion Group can be downloaded onto the robot The bar on the right shows the space taken up  and available  on the robot when selecting the Motions to download Each Motion in the Motion Group is named with a Index Number  which can be used in R  Task to call the specific Motion Caution when Downloading If the actual robot was used to playback a motion while editing motions  the saved motion on the robot’s controller is deleted  So  once motion editing is completed  please download the new motion onto the robot’s controller PracticeOpen Project  Click Open Project on the Home tab   Select an example file   Click Open Connect to Robot      Click the Connect button on the bottom             Select the port the robot is connected to  and click the Connect button             When connection is successful  the port number and baud rate will be shown       Create New Motion UnitMotion Unit is the link of poses placed on the timeline  to create a motion  The links between the poses are interpolated  like a fade in out function       Select the Motion Unit tab  and click on the Motion Unit list on the toolbar         Click the New Motion Unit button       Name the new Motion Unit and click the Apply button             Select the newly created Motion Unit and click the Apply button       Edit Motion Unit 3D Robot This section explains how to edit Motion Units when an actual robot is not available  Users will edit the 3D robot’s pose and save the pose on the timeline to create Motion Units   Click anywhere on the timeline to select a time       Hold the Ctrl button and select joints 4 and 6             Use the Positioning menu on the bottom right to rotate the selected joints  Try creating a pose by moving the robot’s arm joints             Click the Insert KeyFrame button on the top right to insert the created pose on the timeline             Again  click on another spot on the timeline and click the Insert KeyFrame button to insert the same pose again             Then  change the 3D robot’s pose the click the Save KeyFrame  same button as Insert KeyFrame  to overwrite the previous pose             Click the Play button on the toolbar to playback the created Motion Unit  The poses created will be played back in the order they were placed on the timeline       Edit Motion Unit Actual Robot This time  an actual robot will be used to edit a Motion Unit  Users will set the pose using the actual robot  and save the pose onto the timeline   Click the Connect button on the bottom left to connect to the robot  refer to Connecting the Robot   Create a new Motion Unit  refer to Creating a New Motion Unit       Select all the joints  and click on the Torque Off button to turn the actual robot’s torque off  for selecting all the motors  you may select any motor then push Ctrl A              Move the actual robot to create the pose to save  click Torque On  then click read Robot Pose  the 3D robot will mimic the actual robot’s pose                  Click anywhere on the timeline and click the Insert KeyFrame button to add the pose onto the timeline             Again  click on another spot on the timeline and click the Insert KeyFrame button to insert the same pose again         Click Torque Off to turn the actual robot’s torque off       Move the actual robot to create the pose to save  click Torque On  then click read Robot Pose         Click the Save KeyFrame button to overwrite the second pose with the new pose       Click the Sync Mode button on the bottom to activate it  When activated  the 3D robot’s pose is automatically inputted to the actual robot             Click on another spot on the timeline and try setting a third pose  Please always check that the pose doesn’t cause the actual robot to lose balance         Click the Play button on the toolbar to playback the created Motion Unit  The poses created will be played back in the order they were placed on the timeline Create New MotionMotion is a set of Motion Units linked together  Users can also change the number of repetitions for each Motion Unit or set the playback speed to efficiently create long dance motions In order to use a motion in a Task code  a Motion  set of Motion Units  must be created       Move to the Motion tab  and click on the list on the toolbar         Click the New Motion button on the list       Enter a name for the new Motion and click the Apply button             Select the newly created Motion and click on the Apply button       Edit MotionThis section will describe how to insert the Motion Units in an empty Motion  and how to edit the playback parameters       Click on the Insert Motion Unit button on the top right             Select the Motion Unit to insert and click on the Play Parameters tab             In the Play Parameters tab  users can edit the Motion Unit’s playback speed  repetition number  and Index Number  For now  don’t change any setting and just click Apply             Check the Motion Unit that is inserted and click the Play button to check the Motion         Doubleclick on the inserted Motion Unit to change it into a different Motion Unit  or change the Play Parameters   Doubleclick on the Green Arrow to insert another Motion Unit to be played back after the current Motion Unit       Doubleclick on the Pink Arrow to insert a Motion Unit to be played where there is an interruption             DoubleClick on the Green Arrow and insert the Initial Position Motion Unit             Let’s playback the completed Motion       Create New Motion GroupThe Motion Group must be created to download motions onto the robot  The Motion Group is a group of selected Motions to be downloaded on the robot       Move to the Motion Download tab and click on the New Motion Group button             Enter the name for the new Motion Group and click Apply             Out of the Motion Candidate List  select the Motions to be inserted into the new Motion Group  and click on the Add Motion button  The bar on the right will update in realtime to display the storage space status  Click Apply to create the Motion Group       Download Motion      Out of the list of Motion Groups  select the Motion Group to download onto the robot  Please make sure to check that the Motion Group size doesn’t exceed the space available on the robot             Click on the Motion Group Download button the download onto the robot  The download progress will be shown on the center of the screen       Useful TipsCreate Custom Robot  Move to the Home tab and click on the New Project button       Move to the Custom Robots tab  select the controller to use  and click on the Add Joint button             Select the type of joint  motor  to use and set its ID  Click Apply to add the joint to the joint list         Once the joint list is completed and the new project is created  the custom robot will be shown on the screen  Since it is difficult to analogize and display the actual custom robot on the 3D model  it will be helpful if the users frequently playback the motion on the actual robot  Sync Mode  to check on their status Change 3D RobotThe Motion file is created and edited based on the initial 3D robot that was selected  Users can change the 3D robot while in the midst of a project  while maintaining the motion file data The guide below is an example of changing the 3D robot from Humanoid Atype to Humanoid Ctype       Move to the Home tab  and click on the 3D Robot button on the left             Click on the Change 3D Robot button on the bottom  and select the robot to be change into         Once the 3D robot is changed  the window will automatically change       If there are unnecessary joints  such as the two motors depicted below  it is recommended to delete them  Move to the Home tab again and click on the 3D Robot button   If there are no joints to delete  please skip step 5             Select the motors to delete  and click on the Remove Joint button to delete  Once you are done with deleting  click the Apply button             The unnecessary joints are now deleted       Pose MirroringThe 3D Robot’s joints have a horizontally symmetrical matching joint on the opposite side  based on the vertical center line drawn below The Mirroring function uses this symmetry for mirroring or exchanging the pose on the opposite side Pose Symmetry  For Pose Symmetry  users must first select the joints that will be the basis for the opposite side       Click on the Mirroring button             The selected joints’ values will now be entered  mirrored  onto the horizontally symmetrical joint on the opposite side          Pose Exchange        For Pose Exchange  users must select the joints that will be the basis for exchanging  and also select the corresponding joints that will receive the values from the basis joints             Click on the Mirroring button             The selected joints will now have their values exchanged with each other       Edit Motion Index NumberThe Motion Index Number is used when a motion data has to be called in RoboPlus Task The Index Number of the Motion data downloaded on the controller must match the Index Number used for calling in Task       Move to the Motion Download tab  select a Motion Group for editing its Index Number  and click on the Edit Motion Group button             Select the Motion Number you would like to edit the Index  or Exit Index  number for  change the number  and click the Enter key             If a duplicate number is already present  a message will be shown as below  and the user must select how to proceed  If the Exit Index is not inputted  a random number will be assigned       Copy Motion Data  Open the Motion file with the data to copy       Move to the Home tab  click the 3D Robot button  and click on the Change 3D Robot button             Check the 3D Robot of the Motion file  and close the Change 3D Robot window             Run another Motion 2 0 program file  and create a new project with the 3D robot you checked in step 3             Open the list of Motion Units  and select the Motion to copy with Ctrl C             In the other Motion 2 0 window  with the new project  open the Motion Unit list and push Ctrl V to paste the copied Motion Unit       Caution When copying data between Motion files  Data that can be copied  joint value  KeyFrame  Motion Unit  and Motion   If a data with the same name already exists in the new  blank  project  the data will not copy   Copying must be proceeded in the order of Motion Unit  gt Motion  If a Motion is copied without copying any Motion Units  an empty Motion will be pasted Edit Offset      Move to the Home tab and click on the Offset button         Connect the robot  refer to Connecting the Robot   Turn on the Sync Mode       Set the initial pose  check the robot  and edit the offset pose         The ideal offset is when the actual robot’s pose is identical to the initial pose   Adjust the offset so the actual robot’s pose matches the 3D robot’s initial pose       Click on the Download Offsets button to save the offset onto the robot’s controller         The difference between the initial pose and the offset pose will be applied as the offset   Offset pose – Initial pose   Offset Convert mtn FileRoboPlus Motion 2 0  R  Motion 2 0  can also open the old RoboPlus Motion 1 0 file    mtn  as well  But  users will have to convert the file in   mtnx first Caution After the mtn file is converted in an mtnx file  the storage capacity or Motion Index Number may be altered  Once you have converted the file  please check the Index Numbers again       Run RoboPlus Motion  1 0             Connect the robot  and open the Save As window to save the mtn file             Enter the file name and click Save             Run R  Motion 2 0  Click Open Project  and change the file type extension on the list to mtn Files             Select the mtn file to change into an mtnx file  and click Open             A window will popup asking the user if you want to convert the file  Click Apply             Select the 3D robot that will be using the Motion data and click Apply             Once converting is completed  click on the Motion Unit List on the top left to check if converting was correctly processed             Save the converted mtnx file       Control 3D Camera      Hold the right mouse button and drag to rotate the point of view             Push the Home key or scroll up on the mouse to zoom in             Push the Endkey or scroll down on the mouse to zoom out             Push the Page Down key to move the POV vertically down   the robot will now be displayed as if you’re looking up at it             Push the Page Up key to move the point of view vertically up   the robot will now be displayed as if you’re looking down at it       Shortcut KeysFAQ  Which products are supported           PREMIUM  STEM  SMART  DARWINMINICM200  CM510  CM530  CM700  OpenCM9 04C  AX series  MX series  robots made with XL320All products supporting TTL   RS485 communication        Which 3D models are supported           All example robots of the products supported  listed above         How many joints are supported           If using DYNAMIXELs  26 joints can be used  from ID 0 25 If using CM200  8 joints can be used  from ID 3 10         Can other 3D models be added           Currently  customs robots can only be displayed by an array of motors shown on the screen  In the future  users will be able to import robots created from R  Design  PC version only          Can the MTN file be converted into MTNX file           Please refer to the eManual page Converting the old file    mtn         Can the MTNX be converted into MTN           Not supported  and currently there is no plan to support it in the future         The motion is not performing correctly after the editing the Motion file  How can I solve this           You must download the Motion Group to the robot after editing the Motion file         The controller is not connecting properly  How I can I solve this           Please try turning the controller ON OFF  If you’re using CM200  turn the controller off  hold the power button for 2 3 sec to stop the task  and try again         What is the Multiplier in a Joint Group           Multiplier is used when adjusting multiple joints simultaneously  but the users want to adjust each joint value with different weight Increasing decreasing the Multiplier value will change the weight of the adjustment         Calculation  current angle   previous angle    rotating direction x multiplier x number of clicks ",
      "url": "http://0.0.0.0:4000/docs/en/software/rplus2/motion/"
      } ,
  
  
      "docs-en-software-rplus2-scratch":  {
      "title": "R+ Scratch",
      "content"	 : "IntroductionR  Scratch allows ROBOTIS Controllers to connect to Scratch and program robots in the Scratch environment Program LayoutHome ScreenThis is the main screen that appears when R  Scratch is first started  It contains configuration menus SettingsChange the language of the program InformationCheck the version information and update history of the program Check for UpdatesCheck for the latest version update of R  Scratch CloseClose R  Scratch Select ControllerDisplays the list of Controllers that are compatible with R  Scratch Port SelectionShows all the available ports that a user can connect  Either press Auto Search or check the Device Manager to determine which port your robot is using Connect   DisconnectClicking the Connect button will connect R  Scratch with the Controller and allow you to use the Extension Block in Scratch2Offline If Scratch2Offline and R  Scratch are properly communicating  the O icon above the Extension Block will change from red to green in Scratch2Offline New ScratchIf Scratch2Offline is installed  clicking on the New Scratch button will load a new Scratch project that includes the blocks relevant for programming the selected Controller in Scratch2Offline You will first need to save the Scratch project before it loads in Scratch2Offline If Scratch2Offline is not installed  clicking on the New Scratch button will link to the Scratch2Offline download page  See Installing Scratch2Offline in the Miscellaneous  link  section Open ScratchIf Scratch2Offline is installed  clicking on the Open Scratch button will load the list of provided example projects for the selected Controller  Double click on example project from the list to load that project You will first need to save the Scratch project before it loads in Scratch2Offline If Scratch2Offline is not installed  clicking on the New Scratch button will link to the Scratch2Offline download page  See Installing Scratch2Offline in the Miscellaneous  link  section Help MenuClicking the Help button will load a folder containing help files Files named after the relevant Controller contain descriptions of the blocks used to program that Controller  Files with a   json extension can be used when directly adding Extension Blocks in Scratch2Offline  See Directly Adding an Extension Block in the Miscellaneous  link  section Connect Controller to PCConnect Controller Using Wired ModuleThis method utilizes a micro B USB cable or an LN101  USB Downloader  Micro B USB Cable  Connect the Controller to your PC using a micro B USB cable   Power on the Controller   Click on the Port Selection button to see the list of connected devices   Click on Auto Search to automatically detect the Controller or manually select the COM Port by double clicking on ROBOTIS Virtual COM Port   Click Connect to begin communicating between robot and PC LN101  USB Downloader   Connect the Controller to your PC using an LN101  USB Downloader    Power on the Controller   Click on the Port Selection button to see the list of connected devices   Click on Auto Search to automatically detect the Controller or manually select the COM Port by double clicking on USB Serial Port   Click Connect to begin communicating between robot and PC Connect Controller Using Wireless ModuleThis method utilizes BT210 Bluetooth module or ZigBee  ZIG110A Set   ZIG2Serial   USB2DXL BT210 Bluetooth Module  Connect the BT210 module to the Controller   Power on the Controller   Pair the BT210 module to your PC using the following procedures http  support robotis com en product robotis_mini darwinmini_usage htm  Click on the Port Selection button to see the list of connected devices   Click on Auto Search to automatically detect the Controller or manually select the COM Port by double clicking on Bluetooth Serial Port   Click Connect to begin communicating between robot and PC ZigBee  ZIG110A Set  ZIG2Serial  and USB2Dynamixel Required   Connect the ZIG110A to the Controller   Connect the ZIG100   ZIG2Serial   USB2Dynamixel setup to your PC   Click on the Port Selection button to see the list of connected devices   Click on Auto Search to automatically detect the Controller or manually select the COM Port by double clicking on USB Serial Port   Click Connect to begin communicating between robot and PC   MiscellaneousInstalling Scratch2Offline  Go to the Scratch2Offline download page  https  scratch mit edu scratch2download    Download Adobe AIR and the Scratch Offline Editor for your OS Note If Scratch2Offline is not installed  clicking on the New Scratch or Open Scratch buttons from R  Scratch’s Home Screen will link to the Scratch2Offline download page Installing the ROBOTIS Virtual COM Port Driver  If the driver is properly installed and your Controller is connected to your PC and powered on  you will see ROBOTIS Virtual COM Port COM X  in Device Manager   If the device shows up as USB Serial Port  then you must update the driver   Rightclick on USB Serial Port and select Update Driver Software…  Select Browse my computer for driver software   Select Let me pick from a list of device drivers on my computer   Select ROBOTIS Virtual COM Port and click Next to finish the installation To install the USB driver manually  please visit the following linkhttp  support robotis com ko software sw_reference cm150_usb_install htmDirectly Adding an Extension Block  Selecting the Controller and clicking the New Scratch or Open Scratch buttons will open a Scratch project with the blocks related to the Controller automatically included   When executing Scratch directly or clicking Create New in the Scratch Menu  you will have to add a block directly as instructed below   When you are trying to connect an example downloaded from the Scratch website   https  scratch mit edu starter_projects    or a previously created Scratch with the Controller  you can add an Extension Block directly   Copy the path of the folder that is opened after clicking the Help Menu   While holding down the Shift key  click the File menu  Click on Import experimental HTTP extension   In the resulting window  paste in the path name and select the   json file extension of the Controller Extension Blocks you wish to add   The selected blocks are now shown in the Extension Block list ",
      "url": "http://0.0.0.0:4000/docs/en/software/rplus2/scratch/"
      } ,
  
  
      "docs-en-software-rplus2-task":  {
      "title": "R+ Task 2.0",
      "content"	 : "   Introduction   introduction     RoboPlus Task 2 0   roboplustask20      assets images sw rplus2 task roboplus_task2_001 gif In computer science  a task generally means a set of relevant activities to complete the work at hand  In RoboPlus terms  a task code is a source code programmed for a robot to complete a task   A robot operates according to the task code created by the user  and the RoboPlus Task is a program that helps the user to write task code easily  Task code files have a  tskx extension in the PC  or smartphone     Previous versions use a  tsk extension  which can be converted to  tskx via R  Task 2 0   What does the Task file have to do with the Motion file     The Task file is the program code that defines the logic and thought process of how the robot will think and act  and the Motion file is the data which defines the behavior to be taken according to the decision made on the Task file     If the robot that I make will only be using simple movements  then you do not need to use a Motion file when writing a Task file     But if I need the robot to perform accurate movements or a great number of movements such as dancing  then using a Motion file will be more efficient      If user wants to use a Motion file in the task code  the user must download the Motion file       assets images sw rplus2 task roboplus_task2_002 gif      Manual Instructions   manualinstructions 1  Editing Tab for Each Stage      The workspace is divided into Home Tab  Programming Tab  and Debugging Tab          assets images sw rplus2 task roboplus_task2_003 jpg  2  Home Tab      The following figures are the first screen right after starting the program  which includes basic samples  file related menu  update  and settings menu          assets images sw rplus2 task roboplus_task2_004 jpg           assets images sw rplus2 task roboplus_task2_005 jpg  3  Programming Tab      The following figures display the screen for editing task source code  which provides programming toolbar  source view  outline menu  and download functions          assets images sw rplus2 task roboplus_task2_006 jpg          assets images sw rplus2 task roboplus_task2_007 jpg  4  Debugging Tab      The following figures indicate the screen to debug the task code  which provides the output monitor and virtual remote control functions        An autoconnect feature has been added for the user’s convenience           assets images sw rplus2 task roboplus_task2_008 jpg          assets images sw rplus2 task roboplus_task2_009 jpg     Resources for Task   resourcesfortask Resources in Task Code vary depending on the device connected with the controller  1  If controller is connected to an external hardware such as a Dynamic Cell  then the Task Code can use it 2  If controller is connected to a smart app R  Smart or R  IoT   then the Task Code can use it 3  If user has downloaded motion data into the Controller via R  Motion  then the Task Code can use it  Resources available in Task Code are comprised as below     assets images sw rplus2 task roboplus_task2_010 jpg     Task Code Structure   taskcodestructure Task code is comprised of 3 elements  code lines  instructions  and parameters   1  Parameter    This is the smallest unit that represents variables or hardware characteristics  User can read or write the value  2  Instructions    Indicates a single behavior computation  given to the Controller to execute the program  Each instruction promises a unique behavior  and the number of parameters vary depending on the behavior computation   3  Code line  Command line     The smallest unit that executes the program  which is a combination of instruction and parameter  Generally  the program is executed in order of the code lines      assets images sw rplus2 task roboplus_task2_011 jpg    Basic Features   basicfeatures     File Open   fileopen 1  Move to Home Tab  When you open the program it starts on Home Tab  2  Click the  Example  button3  Select the desired product  steps  and sample name4  Click  Confirm  button     assets images sw rplus2 task roboplus_task2_012 jpg     Create New File   createnewfile 1  Move to Home Tab  When you open the program it starts on Home Tab  2  Click the  New  button         assets images sw rplus2 task roboplus_task2_013 jpg 3  Choose the controller model and its firmware version  1 0  old  2 0  new 4  Click  Confirm  button to create new Task file         assets images sw rplus2 task roboplus_task2_014 jpg     Command Edit   commandedit 1  Move to Programming Tab  When you create a new file it starts on Programming Tab  2  Click the  Instructions  button3  Click the  Loop  category         assets images sw rplus2 task roboplus_task2_015 jpg  4  Drag the  Endless Loop  instruction 5  And drop it on the desired line to add the instruction         assets images sw rplus2 task roboplus_task2_016 jpg     Parameter Edit   parameteredit 1  Click the Instructions button2  Click the Execute category3  Drag the Load instruction 4  And drop it on the desired line to add instruction         assets images sw rplus2 task roboplus_task2_017 jpg  5  Doubleclick on the leftside block of the added instruction         assets images sw rplus2 task roboplus_task2_018 jpg  6  Select Controller Device in Category17  Select Accessory Device on Category28  Select Port number 1 and select Geared Motor9  Click the Confirm button to finish editing the instruction         assets images sw rplus2 task roboplus_task2_019 jpg 10  Doubleclick on the rightside block of the added instruction         assets images sw rplus2 task roboplus_task2_020 jpg  11  Select Controller Constant in Category112  Select Motor Value on Category213  Select CCW for Direction and put in 500 for Power14  Click the Confirm button to finish editing the instruction         assets images sw rplus2 task roboplus_task2_021 jpg  15  Check the edited instruction block         assets images sw rplus2 task roboplus_task2_022 jpg     Download Task Code   downloadtaskcode 1  Click the Device button2  Select the device connected to the robot3  Click the Confirm button4  When the window closes  click the Download button         assets images sw rplus2 task roboplus_task2_023 jpg 5  When download completes  the Controller will execute the task  For some of the Controllers  the Controller will close instead of executing the task          assets images sw rplus2 task roboplus_task2_024 jpg     Print Output   printoutput 1  Move to Debugging Tab2  Click the Device button3  Select the device connected to the robot4  Click the Confirm button5  When the window closes  click the Start button         assets images sw rplus2 task roboplus_task2_025 jpg 6  When robot is connected  the Program Output Monitor and Virtual Remote Controller fields will be enabled         assets images sw rplus2 task roboplus_task2_026 jpg  7  In the source code  if Print Screen with Line or Print Screen  has been used          assets images sw rplus2 task roboplus_task2_027 jpg  8  The value will be printed in the Output Monitor as below         assets images sw rplus2 task roboplus_task2_028 jpg    Programming Edit    programmingedit This section explains the basic editing functions used in R  Task 2 0      Insert Change Instruction   insertchangeinstruction 1  Click the Instructions tab on the right  or doubleclick the location you wish to insert the instruction 2  Draganddrop an instruction on the location that you want         assets images sw rplus2 task roboplus_task2_029 jpg  3  If you doubleclick on an instruction block  you can change it to another instruction         assets images sw rplus2 task roboplus_task2_030 jpg     Select Multiple Lines   selectmultiplelines 1  You can select multiple lines by dragging the line numbers on the left         assets images sw rplus2 task roboplus_task2_031 jpg  2  If you drag within the line numbers that were already selected  it will partially cancel the selection of those lines         assets images sw rplus2 task roboplus_task2_032 jpg  3  If you click directly on the source code  it will cancel the selection of the lines         assets images sw rplus2 task roboplus_task2_033 jpg     Insert Delete Line   insertdeleteline 1  Select the location where you wish to insert  or delete  a line with the left mouse button2  Clicking the right mouse button will display the additional menu         assets images sw rplus2 task roboplus_task2_034 jpg  3  If you click Insert Line it will insert a new line above the currently selected line  keyboard shortcut  Insert 4  If you click Delete Line it will delete the currently selected line  keyboard shortcut  Delete          assets images sw rplus2 task roboplus_task2_035 jpg     Enable Disable Line   enabledisableline 1  Select the line which you wish to enable disable with the left mouse button2  Clicking the right mouse button will display the additional menu         assets images sw rplus2 task roboplus_task2_036 jpg  3  If you click Enable Disable it will change the enabled disabled status of the selected line keyboard shortcut  Ctrl E          assets images sw rplus2 task roboplus_task2_037 jpg  4  Disabled code will be shown in gray and will be excluded during compilation         assets images sw rplus2 task roboplus_task2_038 jpg     Copy Cut Paste   copycutpaste 1  Select the line which you wish to copy  or cut  with the left mouse button2  Clicking the right mouse button will display the additional menu         assets images sw rplus2 task roboplus_task2_039 jpg     3  If you click Copy  or Cut  it will copy the line to the clipboard4  You can also use the Copy  or Cut  buttons from the toolbar on top  keyboard shortcut  Ctrl C  Ctrl X          assets images sw rplus2 task roboplus_task2_040 jpg  5  Select the line which you wish to Paste to with the left mouse button6  Clicking the right mouse button will display the additional menu         assets images sw rplus2 task roboplus_task2_041 jpg  7  If you click Paste it will paste the content that was copied to the clipboard8  You can also use the Paste button from the toolbar on top  keyboard shortcut  Ctrl V          assets images sw rplus2 task roboplus_task2_042 jpg  9  The copied code is inserted as in the figure below         assets images sw rplus2 task roboplus_task2_043 jpg     Undo Redo   undoredo 1  While editing the code  if you click the Undo function you can restore the code to the previous state2  You can also use the Undo button from the toolbar on top  keyboard shortcut  Ctrl Z          assets images sw rplus2 task roboplus_task2_044 jpg  3  If you click the Redo button from the toolbar on top  it will rewrite the restored code again  keyboard shortcut  Ctrl Z          assets images sw rplus2 task roboplus_task2_045 jpg    Programming Instructions    programminginstructions This section explains the instructions used in R  Task 2 0     assets images sw rplus2 task roboplus_task2_046 jpg     Start End   startend This instruction establishes the overall beginning and end of a program  and the valid block for the instruction       assets images sw rplus2 task roboplus_task2_047 jpg      Start Program The Start Program instruction is executed regardless of the line number  There cannot be more than one Start Program instruction in one program  There must be an instruction enclosing block mandatorily  When program reaches the end of the Start Program instruction  the program will be end  It is the same concept as the main   function in C programming language   The following figure shows a Start Program instruction that is empty inside        assets images sw rplus2 task roboplus_task2_048 jpg       End Program The user can manually set the location where the program will end  If End Program is not set manually  then the program will execute every code in the Start Program instruction and then end naturally   The following displays a natural end of a program after executing every code in the Start Program instruction        assets images sw rplus2 task roboplus_task2_049 jpg   The following displays a forced end of a program when meeting an End Program instruction        assets images sw rplus2 task roboplus_task2_050 jpg      Begin Block   End Block A block is an enclosed set of multiple lines of instructions  The beginning and end of a block must always go in pairs  If the instruction code is only one line then you can omit the block symbols  It is the same concept as brackets ‘‘  ‘’ in C programming language  The following figure indicates the block for Start Program and Endless Loop       assets images sw rplus2 task roboplus_task2_051 jpg   The following figure indicates the block for Start Program and If       assets images sw rplus2 task roboplus_task2_052 jpg   As the following figure indicates  if the instruction code is only one line then you can omit the block symbols        assets images sw rplus2 task roboplus_task2_053 jpg      Comment If an explain is needed to be added  you can add a comment memo  in the line  By inserting the    symbol  you can doubleclick it to modify the content that follows  While you are modifying a comment  you can click the ESC key to restore to the previous state of the comment   The following is an example of inserting a comment to make the source code easier to understand        assets images sw rplus2 task roboplus_task2_054 jpg     Execute   execute This is an instruction for giving a command to the device or performing a mathematical calculation Refer to the following figure for details      assets images sw rplus2 task roboplus_task2_055 jpg     Compute This instruction computes two values to give one result   C   A   B        assets images sw rplus2 task roboplus_task2_056 gif   You can choose from Add     Subtract    Multiply x   And     Or           assets images sw rplus2 task roboplus_task2_057 gif   The following is an example of using the Compute instruction        assets images sw rplus2 task roboplus_task2_058 gif      Load This instruction substitutes a value with another one        assets images sw rplus2 task roboplus_task2_059 gif   This instruction is used when reading writing a variable’s value  The following is an example of writing a value to the variable speed  and then reading this variable’s value to apply it to the Geared Motor        assets images sw rplus2 task roboplus_task2_060 jpg   This instruction is used when reading writing a device’s value  The following is an example of setting the speed value of a Geared Motor connected to Port number 1        assets images sw rplus2 task roboplus_task2_061 jpg      Lable Jump These instructions are used for branching of the program  Label determines the location of the branching  Using Jump you can execute a predesignated label first  It is the same concept as ‘label   goto’ commands in C programming language  The figures below show how the program branches by using Jump The figure on the left shows the program jumping to Mode1 and executing only the code from Mode1  The figure on the right shows the program jumping to Mode2 and executing only the code from Mode2        assets images sw rplus2 task roboplus_task2_062 jpg   Label and Jump must exist inside the same function block        assets images sw rplus2 task roboplus_task2_063 jpg     Condition   condition This instruction controls the flow of program based on the True False result of Conditional Clause      assets images sw rplus2 task roboplus_task2_064 jpg     Conditional Clause  A conditional clause gives the result of a computation as either true or false   Below are the comparison operators that can be used inside the parenthesis          check if left and right values are the same       check if left and right values are not the same    gt  check if left value is greater than the right value    gt   check if left value is greater or equal to the right value    lt  check if right value is greater than the left value    lt   check if right value is greater or equal to the left value       assets images sw rplus2 task roboplus_task2_065 jpg  When many conditions must be satisfied  multiple conditional clauses can be used together as below       assets images sw rplus2 task roboplus_task2_066 jpg    When using multiple conditional clauses  the following logical operators can be used    then  does not connect any conditional clause  Only uses one conditional clause        two conditional clauses are computed with AND operation       two conditional clauses are computed with OR operation         assets images sw rplus2 task roboplus_task2_067 jpg      If If the result of the conditional clause is true  then it executes the code inside the block  It is the same concept as the ‘If’ statement in C programming language   The following in as example of using If to check whether a variable’s value is 100        assets images sw rplus2 task roboplus_task2_068 jpg  If the code to be executed is only one line  then you can omit the block symbols as below        assets images sw rplus2 task roboplus_task2_069 jpg      Else If This is used to check another conditional clause following an If statement  An If statement must be used prior to Else If statement It is the same concept as the ‘Else If’ statement in C programming language   The following in as example of using If to check whether a variable’s value is 100  and the using Else If to check whether the variable’s value is 50        assets images sw rplus2 task roboplus_task2_070 jpg   If the code to be executed is only one line  then you can omit the block symbols as below        assets images sw rplus2 task roboplus_task2_071 jpg      Else This statement will execute its code block if none of the If or Else If statements were executed  An If statement must be used prior to Else statement It is the same concept as the ‘Else’ statement in C programming language   The following in as example of using If to check whether a variable’s value is 100  and if the result is false then running the Else statement that follows        assets images sw rplus2 task roboplus_task2_072 jpg   If the code to be executed is only one line  then you can omit the block symbols as below        assets images sw rplus2 task roboplus_task2_073 jpg     Loop   loop This is an instruction that is used when the program needs to repeat a specific behavior or computation multiple times   By setting the repetition block and repetition condition  loop can be applied in a variety of ways  Refer to the following figure for details       assets images sw rplus2 task roboplus_task2_074 jpg      Endless Loop This statement will repeatedly execute from the beginning to the end of the code block endlessly You can come out of the loop by using the End Loop command  It is the same concept as ‘while 1 ’  in C programming language   The following is an example of using Endless Loop to print the number 100 on the screen  The printing command is within the Endless Loop block so it is repeatedly executed with no end         assets images sw rplus2 task roboplus_task2_075 jpg  If the code to be executed is only one line  then you can omit the block symbols as below        assets images sw rplus2 task roboplus_task2_076 jpg      Loop While This statement will repeatedly execute from the beginning to the end of the code block as long as the conditional clause is satisfied  Just as in Condition instructions  multiple conditional clauses can be used together  You can come out of the loop by using the End Loop command  It is the same concept as ‘while conditional clause ’ in C programming language   The following is an example of using Loop While to print the number 100 on the screen for only 1 024 seconds        assets images sw rplus2 task roboplus_task2_077 jpg  The following is an example of using Loop While and a variable to print the number 100 on the screen just 10 times        assets images sw rplus2 task roboplus_task2_078 jpg      Loop For This statement will execute from the beginning to the end of the code block a specified number of times  Every time the program reaches the end of the block  the value of a specified variable will increase by 1  You can come out of the loop by using the End Loop command  Repeat count formula  Repeat count   End value – Starting Value   1 It is the same concept as ‘for’ in C programming language   The following is an example of using Loop For to print the number 100 on the screen 10 times        assets images sw rplus2 task roboplus_task2_079 jpg   The following is an example of taking the variable from Loop For and using it within the execution block  As the repeat count increases from 1 to 10  the value printed on the screen changes to 100  200 300 400 500 600 700 800 900 1000        assets images sw rplus2 task roboplus_task2_080 jpg      Wait While This statement will stop execution of the program as long as the conditional clause is satisfied  It is the same concept as ‘while conditional clause ’ with an empty code block in C programming language   The following is an example of using Wait While and a timer to make the program wait for 1 024 seconds        assets images sw rplus2 task roboplus_task2_081 jpg   The following is an example of using Wait While to make the program wait until the motion being performed finishes        assets images sw rplus2 task roboplus_task2_082 jpg   The following is an example of using Wait While to make the program wait until the melody being played finishes        assets images sw rplus2 task roboplus_task2_083 jpg      Break Loop This command is used when you wish to break from a loop  This command can only be used within Endless Loop  Loop While  and Loop For statement  It is the same concept as ‘break’ in C programming language   The following is an example of using Break Loop when a wireless data arrives in order to break from the loop  When the program breaks from the loop  whichever code that follows is executed        assets images sw rplus2 task roboplus_task2_084 jpg     Function SubRoutine    functionsubroutine If a specific code is used repeatedly  or if you wish to classify an area of code as a unit that performs a specific behavior  you can group the lines of code as a Function Refer to the following figure for details       assets images sw rplus2 task roboplus_task2_085 jpg     Function Call If a specific code is used repeatedly  or if you wish to classify an area of code as a unit that performs a specific behavior  you can group the lines of code as a Function  An adequate use of functions will make the code concise and easy to read  A function that has been created can be used with Call instruction when needed  Functions must be written outside of the main program routine  In task  functions cannot configure input or output arguments It is the same concept as a ‘function’ in C programming language   The following is an example of making the action of blinking the LED as a function and using it         assets images sw rplus2 task roboplus_task2_086 jpg  The following is the process of selecting a function to call         assets images sw rplus2 task roboplus_task2_087 jpg   Functions cannot call itself within the same function        assets images sw rplus2 task roboplus_task2_088 jpg      Return This is an instruction used for exiting a function while it is being executed  It can only be used inside a regular function and callback function  It is the same concept as ‘return’ in C programming language   The following is an example of a function being executed until the end without using Return        assets images sw rplus2 task roboplus_task2_089 jpg   The following is an example of a function being executed but encountering Return in the middle of executing the function  which will make the program exit the function        assets images sw rplus2 task roboplus_task2_090 jpg      Callback This is a function that is executed independently from the main program routine  executing itself periodically Callback functions must be written outside of the main program routine  Because it is not allowed to write code within a callback that takes too much time to execute  callback has restrictions in the use of Loops   Variables   Parameter Calls   volume of code  The following restrictions must be met when using a callback function    Loops  Labels  Jumps  Calls are not allowed   Communication with an external device is limited to a maximum of 2 times   The code size of callback function cannot exceed 512 bytes  The following is an example of using the callback function to receive wireless data and save it to the variable received data        assets images sw rplus2 task roboplus_task2_091 jpg    Programming Parameters    programmingparameters This section explains parameters used in R  Task 2 0  It classifies the parameters that can be used by each device  Refer to the explanation and example codes of each item for details     Controllers   controllers     Accessory Device  Geared motor  This is used to control the geared motor connected to the controller  Each Controller model has a different set of devices that can be connected to it  Please refer to the Controller Functionality Comparison for more detail  Controller Functionality Comparison   Direction    CW  Clock Wise   CCW  Counter Clock Wise    Power    The value ranges from 0 to 1023  where 0 means stop and 1023 is 100% power capacity        assets images sw rplus2 task roboplus_task2_093 jpg   The following example is controlling the geared motor        assets images sw rplus2 task roboplus_task2_094 jpg   The following example is using the geared motor to move the robot forward         assets images sw rplus2 task roboplus_task2_095 jpg      Accessory Device  Servo motor  drive mode  speed  location  This is used to control the servo motor connected to the controller  Each Controller model has a different set of devices that can be connected to it  Please refer to the Controller Functionality Comparison for more detail  Controller Functionality Comparison   Servo motor drive mode    When the value is True  you can configure the servo motor’s location to situate it at a specific angle  When the value is False  you can configure the servo motor’s speed to rotate it at a specific speed    Servo motor speed    Configures the speed of the servo motor        assets images sw rplus2 task roboplus_task2_093 jpg     Servo motor location    Configures the location of the servo motor        assets images sw rplus2 task roboplus_task2_096 jpg   The following is an example of controlling the servo motor’s location        assets images sw rplus2 task roboplus_task2_097 jpg   The following is an example of rotating the servo motor to control it as a wheel        assets images sw rplus2 task roboplus_task2_098 jpg      Accessory Device  LED Module This is used to control the LED module connected to the controller  Each Controller model has a different set of devices that can be connected to it  Please refer to the Controller Functionality Comparison for more detail  Controller Functionality Comparison User can turn on off the Right LED or Left LED        assets images sw rplus2 task roboplus_task2_099 jpg   The following is an example of controlling the LED module        assets images sw rplus2 task roboplus_task2_100 jpg      Accessory Devices  Various sensors This is used to control the various sensors connected to the controller  Each Controller model has a different set of sensors that can be connected to it  Please refer to the Controller Functionality Comparison for more detail  Controller Functionality Comparison   Touch sensor    used to detect whether there is contact with the touch sensor   Returns True for contact  False for no contact   Touch Sensor Component Information  The following is an example of using the touch sensor  Touch Sensor Component Information   docs en parts sensor ts10        assets images sw rplus2 task roboplus_task2_101 jpg     Infrared sensor    used to measure the distance with an object  The value ranges from 0 to 1023  where the value increases from 0 as the object gets closer    Infrared Sensor Component Information  The following is an example of using the infrared sensor  Infrared Sensor Component Information   docs en parts sensor irss10        assets images sw rplus2 task roboplus_task2_102 jpg     Distance measurement sensor  DMS     used to measure the distance with an object   The value ranges from 0 to 1023  where the value increases from 0 as the object gets closer    Distance Measurement Sensor Component Information  The following is an example of using the distance measurement sensor  Distance Measurement Sensor Component Information   docs en parts sensor dms80        assets images sw rplus2 task roboplus_task2_103 jpg     Color sensor    used to detect the color of an object The list of colors that the color sensor detects is as follows       assets images sw rplus2 task roboplus_task2_104 jpg    Color Sensor Component Information  The following is an example of using the color sensor  Color Sensor Component Information   docs en parts sensor cs10        assets images sw rplus2 task roboplus_task2_105 jpg    Magnetic sensor    used to detect whether there is a magnetic property for an objest  Returns True for magnetic property detected  False for no magnetic property detected   Magnetic Sensor Component Information  The following is an example of using the magnetic sensor  Magnetic Sensor Component Information   docs en parts sensor mgss10         assets images sw rplus2 task roboplus_task2_106 jpg    Temperature sensor    used to measure the temperature of an object  Temperature Sensor Component Information  The following is an example of using the temperature sensor  Temperature Sensor Component Information   docs en parts sensor tps10        assets images sw rplus2 task roboplus_task2_107 jpg     Motion detection  Passive infrared  sensor    used to detect the motion of an object  Motion Detecting Sensor Component Information  The following is an example of using the motion detection sensor  Motion Detecting Sensor Component Information   docs en parts sensor pir10        assets images sw rplus2 task roboplus_task2_108 jpg     Temperature   humidity  Thermohygro  sensor    used to measure the temperature and humidity of an object   temperature range  20 120°C  humidity range  0 100%  The following is an example of using the temperature and humidity sensor        assets images sw rplus2 task roboplus_task2_109 jpg     Illuminance sensor  CDS     used to measure the brightness of the surroundings    The value ranges from 0 to 1023  where the value increases from 0 as the surroundings gets brighter   The following is an example of using the illuminance sensor       assets images sw rplus2 task roboplus_task2_110 jpg     User device    used to read the result value of the usercreated sensor Building a User Device The following is an example of using the user device         assets images sw rplus2 task roboplus_task2_111 jpg      Motion Control  Motion index number   Motion status   Joint offset   Turn on Joint LED automatically  This section describes specific parameters for executing motions downloaded on controller via R  Motion  Only specific controllers support motion control   Supported controllers  CM200  CM5  CM510  CM530  CM700  OpenCM    Motion index number    You can execute a motion by calling the corresponding Motion index number  If the Motion is being executed  you can read the current Motion index number  The following is an example of using the Motion index number        assets images sw rplus2 task roboplus_task2_112 jpg    Motion status    returns True if motion is being executed  returns False if motion is not being executed The following is an example of using the Motion status to wait until the motion finishes        assets images sw rplus2 task roboplus_task2_113 jpg     Joint offset    When a motion is executed  it adds a value between 255 255 to every joint  For instance  if the joint offset is 50 and the location values for the motion data have been set to 300   400   500  the location values will be changed to 250   350   450 and then executed  The following is an example of applying an offset values to a specific joint        assets images sw rplus2 task roboplus_task2_114 jpg   The following is an example of configuring a specific joint to not be affected by the Motion data values        assets images sw rplus2 task roboplus_task2_115 jpg     Turn on joint LED automatically    used to turn on off the dynamic cell’s LED while a Motion is being executed  This feature is only supported in OpenCM 9 04 The following is an example of using the turn on joint LED automatically function when executing a Motion  The following is an example of executing a Motion that is saved in the Controller        assets images sw rplus2 task roboplus_task2_116 jpg   Pressing different buttons on the Remote Controller will execute their corresponding Motions        assets images sw rplus2 task roboplus_task2_117 jpg      Builtin Sensor1  Result of sound counter   Realtime sound counter  This is a function that uses the Controller’s embedded mic to detect and count each time a sound that is louder than a certain level occurs  For instance  it can detect and count clapping sounds to make the robot move in a certain way  Each Controller model supports different types of sensors  Please refer to each Controller’s manual for more detail   CM100A  CM150  CM200  CM5  CM510  CM530  CM700  OpenCM    Result of sound counter    This counts the total number of times sound was detected  If you want to reset the counter  you can insert 0 manually  The following is an example of using the Result of Sound Counter        assets images sw rplus2 task roboplus_task2_118 jpg     Realtime sound counter    This counts the number of times sound was detected in realtime  If no sound is detected for 0 8 seconds  the counter is reset to 0  The following is an example of using the Realtime Sound Counter        assets images sw rplus2 task roboplus_task2_119 jpg      Builtin Sensor 2  Left infrared sensor   Center infrared sensor   Right infrared sensor  This is used to read the value of the infrared sensor embedded in the Controller The value of the infrared sensor ranges from 0 to 1023  where the value increases from 0 as the object gets closer  Each Controller model supports different types of sensors  Please refer to each Controller’s manual for more detail   CM100A  CM150  CM200  CM5  CM510  CM530  CM700  OpenCM    Left infrared sensor    used to read the value of the infrared sensor located at the bottom left side of the Controller   Center infrared sensor    used to read the value of the infrared sensor located at the front and center of the Controller   Right infrared sensor    used to read the value of the infrared sensor located at the bottom right side of the Controller  The following is an example of using the values of the infrared sensors of the Controller        assets images sw rplus2 task roboplus_task2_120 jpg      Builtin Sensor 3  Start button counter   Controller button  This is used to read the value of buttons embedded in the Controller  Each Controller model supports different types of sensors  Please refer to each Controller’s manual for more detail   CM100A  CM150  CM200  CM5  CM510  CM530  CM700  OpenCM    Start button counter    This is used to read the number of times the Start button was rapidly pressed when the Controller was first turned on  The value of the Start Button Counter ranges from 0 to 255  The following is an example of using the Start button counter        assets images sw rplus2 task roboplus_task2_121 jpg    Controller button    This is used to read the status of the Controller’s buttons  Each Controller mode has different buttons you can use  The following is an example of using buttons for CM5  CM510  CM530        assets images sw rplus2 task roboplus_task2_122 jpg   The following is an example of using buttons for OpenCM9 04        assets images sw rplus2 task roboplus_task2_123 jpg      Buzzer  Buzzer index   Buzzer timer  This is used to play a musical scale or melody using the Buzzer embedded in the Controller  The   Buzzer timer   should be configured first and then the type of Buzzer  or   Buzzer index    configured afterwards for the Buzzer to work properly  The following figure shows the screens to select the type of buzzer        assets images sw rplus2 task roboplus_task2_124 jpg   The following is an example of playing a musical scale from the Controller  When playing a musical scale  the Buzzer timer can be set between 0 5 seconds        assets images sw rplus2 task roboplus_task2_125 jpg   The following is an example of playing a melody from the Controller When playing a melody  the Buzzer timer should be set as the melody’s run time          assets images sw rplus2 task roboplus_task2_126 jpg      Remote controller  Received wireless data  Wireless data to send   Wireless ID   RC100 channel  These are the parameters that send and receive data with external devices using the wireless communication module  Bluetooth  infrared  ZigBee  connected to the Controller  It is generally used when controlling a robot with theRC100 or smartphone virtual remote controller  but it can also be used to communicate with a user developed software  The range of the data value that can be sent and received is restricted from 0 to 65535   2 bytes    Received wireless data    used when the Controller receives data from the outside       assets images sw rplus2 task roboplus_task2_127 jpg    Wireless data to send    used when the Controller sends data to the outside       assets images sw rplus2 task roboplus_task2_128 jpg     New wireless data arrived    when the Controller receives data from the outside  it returns the value True       assets images sw rplus2 task roboplus_task2_129 jpg     My robot’s wireless ID  My ID     when using ZigBee  it checks my robot’s ZigBee ID       assets images sw rplus2 task roboplus_task2_130 jpg     Pairing robot’s wireless ID  Remocon ID     when using ZigBee  it sets the pairing robot’s ZigBee ID       assets images sw rplus2 task roboplus_task2_131 jpg     RC100 channel    when using an infrared receiver  it sets the channel’s value if the value is 255  it will operate in Bluetooth ZigBee mode        assets images sw rplus2 task roboplus_task2_132 jpg   The following is an example of processing a wireless data received from the Controller       assets images sw rplus2 task roboplus_task2_133 jpg   The following is an example of the Controller sending data to the outside       assets images sw rplus2 task roboplus_task2_134 jpg       Timer  Timer   Precision  Highresolution  timer   Powersave timer  Timer and Precision timer are used to configure the value of a countdown timer on the Controller     Timer    This is used to set the value of a countdown timer on the Controller  The value of the Timer ranges from 0 to 255  and the unit is 0 128 seconds  The following is an example of using Timer to wait approximately 1 second  1 024 seconds         assets images sw rplus2 task roboplus_task2_135 jpg     Precision timer    This has the same function as Timer but counts the time more precisely  The value of the Timer ranges from 0 to 65535  and the unit is 0 001 second  The following is an example of using Precision Timer to wait exactly 1 second  1 000 second         assets images sw rplus2 task roboplus_task2_136 jpg     Powersave timer    This is used for the Controller’s sleep mode function  The value of the Powersave Timer ranges from 0 to 255  and the unit is 1 minute  The following is an example of using Powersave Timer to configure sleep mode for the Controller  If a new wireless data arrives within 5 minutes  it resets the Powersave Timer value        assets images sw rplus2 task roboplus_task2_137 jpg       Miscellaneous  Random number   Builtin LED   Print screen   Print screen with line  Random number  This is used to generate a random number between 0 and a maximum value  You can set a number as the maximum value  The range of the maximum value is from 0 to 255 The following is an example of using Random Number to execute a random motion  This is done by generating a random number between 0 and 15 to execute a corresponding motion        assets images sw rplus2 task roboplus_task2_138 jpg     Builtin LED    used to control the buildin LED  Aux LED  The following is an example of using a builtin LED  It is turning the builtin LED on and off every 0 512 second interval        assets images sw rplus2 task roboplus_task2_139 jpg     Print screen    used to check a specific value from the task code on the screen   Print screen with line    used to check a specific value from the task code on the screen  and afterwards change lines The following is an example of using Print Screen and Print Screen with Line to print the sensors’ values         assets images sw rplus2 task roboplus_task2_140 jpg          assets images sw rplus2 task roboplus_task2_141 jpg     Dynamixel   dynamixel These are the parameters for reading writing the values of the Dynamixel control table  Please refer to the Dynamixel s Control Table for more detail  Dynamixel     Dynamixel actuator   Turn Torque On Off    used to turn the Dynamixel Torque on off   Torque is turned on when True  Torque is turned off when False   The following is an example of turning on the Torque of Dynamixel with ID number 1 when the Controller’s button is pressed        assets images sw rplus2 task roboplus_task2_142 jpg    LED    used to turn the Dynamixel LED on off     LED is turned on when True  LED is turned off when False     CW margin   CCW margin    used to read configure the Dynamixel Margin value     The range of the value is from 0 to 255  but it is recommended not to change the default value  1       Please refer to the Dynamixel Control Table for more detail     CW slope   CCW slope    used to read configure the Dynamixel Slope value     There are a total of seven phases which the value can be set to  and the representative values of each phase are set as in the table below      Please refer to the Dynamixel Control Table for more detail   Level Real Data Value Representative Data Value      1 0  0x00    3 0x03  2  0x02   2 4 0x04    7 0x07  4  0x04   3 8 0x08  15 0x0F  8  0x08   4 16 0x10  31 0x1F  16  0x10   5 32 0x20  63 0x3F  32  0x20   6 64 0x40  127 0x7F  64  0x40   7 128 0x80  254 0xFE  128  0x80       P gain   I gain  D gain    used to read configure the Dynamixel PID values     P gain refers to Proportional Gain  for which the smaller the value is the larger the clearance gets  and the power level decreases near the target location      I gain refers to Integral Gain  and D gain refers to Derivative Gain     Target position    used to read configure the Dynamixel target position     The motor position value control can be used to designate the angle position as shown below         assets images sw rplus2 task roboplus_task2_143 jpg   Moving speed  used to read configure the Dynamixel speed     The motor control value control can be used to designate the rotation direction and power value as shown below         assets images sw rplus2 task roboplus_task2_144 jpg     Torque limit    used to read configure the Dynamixel torque limit   Current position    used to read the Dynamixel current position   Current speed    used to read the Dynamixel current speed   Current weight    used to read the Dynamixel current weight   Current voltage    used to read the Dynamixel current voltage   Current temperature    used to read the Dynamixel current temperature   Check movement    used to read the Dynamixel movement status  Returns True for movement  False for no movement     Parameters that can be used for DX RX AX series    Turn torque on off  LED  CW margin   CCW margin  CW slope   CCW slope  Target position  Moving speed  Torque limit  Current position  Current speed  Current weight  Current voltage  Current temperature  Check movement    Parameters that can be used for MX series    Turn torque on off  LED  P gain   I gain   D gain  Target position  Moving speed  Torque limit  Current position  Current speed  Current weight  Current voltage  Current temperature  Check movement    Parameters that can be used for XL series    Turn torque on off  LED  P gain   I gain   D gain  Target position  Moving speed  Torque limit  Current position  Current speed  Current weight  Current voltage  Current temperature  Check movement       Infrared sensor array   Infrared sensor value  numbers 1 7     used to read the infrared sensor value from the infrared sensor array    The measured value can vary depending on the color or texture of the wall or object  and the sensor is optimized for use within 0 to 5 cm    Infrared detection standard value  numbers 1 7     used as the standard values for the infrared sensor array to determine whether the color is white or black    Black detection LED      Sensor value  set value  BIT 0 OFF     Buzzer index    used to configure the type of Buzzer for the infrared sensor array   Buzzer timer    used to configure the duration of the Buzzer sound in the case that the infrared sensor array’s Buzzer is used    The Buzzer timer should be configured first and then the type of Buzzer  or Buzzer index  configured afterwards for the Buzzer to work properly     Auto configuration of detection standard value    used to define the beginning and end of autosearching the detection standard values of the color black Refer to the example below for more detail    Infrared object detection result    used to read whether an object has been detection in the infrared sensor array Binary value Decimal value Black detection      0000001 1 Black detection for IR sensor  1  0000010 2 Black detection for IR sensor  2  0000100 4 Black detection for IR sensor  3  0001000 8 Black detection for IR sensor  4  0010000 16 Black detection for IR sensor  5  0100000 32 Black detection for IR sensor  6  1000000 64 Black detection for IR sensor  7    Use can check the value while looking at the screen as shown below      assets images sw rplus2 task roboplus_task2_145 jpg      Custom User can access the address of an external device such as a Dynamixel directly to perform read write tasks   User can read write by selecting the specified address in units of Byte  Word  or DWord Write or read in Byte or DWORD variable to write read on user accessed address  Please refer to the Dynamixel Control Table for more detail     Common   common These are basic variables and constants that can be used in every device      Variable This is a storage space within the program where you can write and read many data  Using a variable can be convenient when a number has to be remembered recorded or when a common value has to be changed in multiple parts at once  The following is an example of using variables          assets images sw rplus2 task roboplus_task2_146 jpg      Number  Decimal number  This is used when a number has to be input directly within the program  It is mainly used in a conditional clause to compare values  The value ranges from 2147483648 to 4294967295        assets images sw rplus2 task roboplus_task2_147 jpg      True False  This is used when a True False value has to be input directly within the program  It is mainly used in a conditional clause to compare status  The value ranges from 0 1  False is 0  and True is 1        assets images sw rplus2 task roboplus_task2_148 jpg      Binary number This is used when a number has to be input directly within the program  It is mainly used when a bit computation is required  and it is express in binary format  The value ranges from 0 to 4294967295   Hex  00 00 00 00   FF FF FF FF        assets images sw rplus2 task roboplus_task2_149 jpg    Useful Tips   usefultips     Search Variables Functions   searchvariablesfunctions This is a feature to find the location where a variable or function has been used  It provides the option to change the name of each variable or function  1  Click the Variable  or Function  button on the right   There must be at least one variable or function  2  Select the target that you wish to find reference in the Variables list  or Functions list 3  You can check the locations at which the selected variable  or function  has been used in the Reference Results field         assets images sw rplus2 task roboplus_task2_150 jpg  4  If you select one of the results in the Reference Results field  it will take you to the specific location within the source code 5  If you click the Rename button at the top  you can change the name of the variable  or function  for the whole source code          assets images sw rplus2 task roboplus_task2_151 jpg     Search Keyword   searchkeyword This is a function to search for components used in the program code  1  Click the Search button at the bottom right 2  Type the search word in the search bar that appears on top          assets images sw rplus2 task roboplus_task2_152 jpg  3  In the task code  the search result will be shown as a list below 4  If you click on an item in the list  it will move to that line          assets images sw rplus2 task roboplus_task2_153 jpg     Grammar Compile Check   grammarcompilecheck In order to download the task code to the controller  it must go through a grammar check and compile process  If you try to download to the controller or click the Error button  it will run the grammar check and compile process automatically     Grammar Check    This is the process of examining whether the instructions used in the task code are compatible instructions with the controller  and whether there are any errors in the grammar     All errors must be corrected before it can move on to the next step    Compilation    This is the process of converting the code that has finished grammar check into a machine language that the controller can interpret     The number of variables  callback usage  and memory usage are examined during the compilation process      assets images sw rplus2 task roboplus_task2_154 jpg     FAQ   faq 1  Supported Products     ROBOTIS DREAM      ROBOTIS STEM      ROBOTIS PREMIUM      ROBOTIS GP      ROBOTIS MINI      Robots created by the user using CM150  CM200  CM510  CM530  CM700  OpenCM9 04C 2  Can TSK files that were used in the previous Task 1 0 also be used on Task 2 0     Yes  However  if you load a previous TSK file into Task 2 0 and save it again  it will be converted to a TSKX format so it will no longer be compatible with Task 1 0  3  The controller will not shut down after downloading a task  What should I do     In R   Task 2 0  when you download a task the task is executed   For controllers  CM150  OpenCM9 04  OpenCM7 0…  4  Can I use Bluetooth module in R  Task 2 0     Support of Bluetooth module is different for each controller  so please refer to the specifications of each Bluetooth module BT110  BT210  BT410 5  The controller does not connect well  What should I do     Restart the controller by turning it off and then on  and try again  If the problem continues  please update the controller s firmware to the latest version  Controller Firmware Update 6  I do not want to see the help animation any more  What should I do     Go to Home Tab   Settings Menu and uncheck the option Tutorials and the help animation will not appear anymore ",
      "url": "http://0.0.0.0:4000/docs/en/software/rplus2/task/"
      } ,
  
  
      "docs-en-software-rplus-mobile-mdesign":  {
      "title": "R+ m.Design",
      "content"	 : "R  m Design  Downlaod Android App          Minimum System Requirements                  Android 2 3 or higher          Hardware  1 2GHz dualcore CPU  1GB RAM  Bluetooth                    Supports  BT410  Android 4 4 or higher   BT210  BT110        Download iOS APP          Minimum System Requirements                  iOS 8 0 or higher          Hardware  iPhone 4S  iPod 5G  iPad mini  iPad 2 or higher                    Supports  BT410      ",
      "url": "http://0.0.0.0:4000/docs/en/software/rplus_mobile/mdesign/"
      } ,
  
  
      "docs-en-software-rplus-mobile-mmotion":  {
      "title": "R+ m.Motion",
      "content"	 : "Getting Started  Downlaod Android App          Minimum System Requirements                  Android 2 3 or higher          Hardware  1 2GHz dualcore CPU  1GB RAM  Bluetooth                    Supports  BT410  Android 4 4 or higher   BT210  BT110        Download iOS APP          Minimum System Requirements                  iOS 8 0 or higher          Hardware  iPhone 4S  iPod 5G  iPad mini  iPad 2 or higher                    Supports  BT410      Menu Description  Editing tab per step  Connection status of robot  Menu bar  Workspace  3D robot viewer  Timeline  motion unit   Timeline menu bar  Pose table  Pose menu bar  3D robot viewer  Flow chart  motion   Flow chart menu barPracticeConnect to Robot  Click the connect button to open the connection window   Enter the last 2 digits  number letter  of the Bluetooth to search for   Click the OK button   Click on the Refresh button   Click on the robot’s Bluetooth address   Click the Connect button  Enter 0000 for the PIN code   Proceed with the connection  This process is skipped if the Bluetooth device is already connected    Wait while the smart device connects with the robot   The connection status lights up when connection is successful Open Project  Go to the Home tab   Click the open button on the tool bar to open a project   Select a motion file saved in the smart device   Click the OK button to proceed   Wait while the project opens Motion Playback  Go to the Motion Unit tab  Click on the Motion Unit menu  Select a Motion Unit to playback   Click OK  Click on the play button on the top  Check the 3D robot to see whether the selected motion unit performs well   Click on the Sync Mode button   Play the Motion Unit to see if the 3D robot and the real robot perform well Motion Editing  Click on the Motion Unit list   Click on the New Motion button   Enter the name of the new Motion Unit  Click the OK button to create a new and empty motion unit   Select the newly created Motion file   Clicking the OK button will close the list   Click on the 3D robot’s joint to select the target for adjustment   You may click on additional joints for multiselecting the joints   Click on the Torque OFF button to disable the torque on the motors   Use your hand to move the joints with the disabled torque   Push the torque ON button  The 3D model will now mimic the pose of the actual robot   Drag the timeline cursor to the 25th frame   Click the button to insert a key frame   This process will save the robot’s pose on the 25th frame    Move to the 51st frame on the timeline   Turn off the torque   Make a pose by moving the motors with the torque off   Click the button to turn the torque on   The 3D model will now mimic the pose of the real robot   Click the insert button to save the pose as the 51st key frame   Repeating the same process  save new poses  key frames  on the 0 6 sec   0 8 sec   and 1 sec  position   Click the sync mode button   Play the motion unit to see if the robot performs the motion well Motion Download  Move to the motion download tab   Click the New Motion Group button to create a new motion group   Enter the name of the new motion group to be created   Click the OK button   Select the motions to be added on the motion group list   Click the Add Motion button   The memory is calculated based on the motions that are added from steps 1 2   Click the OK button once completed   Select the motion group that was just created   Click the Download Motion Group button   Stand by while the motion group is being downloaded Save Motion Project  Move to the Home tab   Click the Save As button   Enter the name of the project file to save   Click the OK button   Check the log message   The saved motion file’s name is displayed on the top left corner FAQ  Which products are supported           PREMIUM  STEM  SMART  ROBOTIS MINI  and other products with CM200  CM530  OpenCM9 04C  AX series  MX series  and XL320         Which 3D models are supported           Out of the supported products  all robot examples that use Motion         Can more 3D models or motors be added apart from the ones provided           Users can add in more motors  the motor will be added just on the screen  not specifically onto the robot  Planned to support 3D created models from R  Design to be imported into R  Motion         Can the MTN file be converted to an MTNX file           Yes  the motion data can be converted  but the 3D model is not supported  will be supported later          Can the MTNX file be converted to an MTN file           No  and there is no plan to support it         The Motion file won’t play properly after editing it           After editing  you must download the motion group again         The controller won’t connect properly           Please try turning OFF the controller then ON again  If you’re using CM200  try turning it OFF  hold the power button for 2 3 sec  to stop the task  then try again       ",
      "url": "http://0.0.0.0:4000/docs/en/software/rplus_mobile/mmotion/"
      } ,
  
  
      "docs-en-software-sdk":  {
      "title": "",
      "content"	 : "  Controller Embedded C  Dynamixel SDK  ZIGBEE SDKDynamixel SDK            Protocol 1 0      Protocol 2 0      ROS      Windows      Linux      OS X      LabVIEW      MATLAB      VB      C       C        Java                  O      O      O      O      O      O      O      O      X      O      O      O        Download Dynamixel SDKROBOTIS Manipulator SDK            Protocol 1 0      Protocol 2 0      ROS      Windows      Linux      LabVIEW      MATLAB      VB      C       C        Java                  X      O      O      O      X      X      X      X      X      O      X        Download ROBOTIS Manipulator SDKController SDK            Controllers      Protocol 1 0      Protocol 2 0      ROS      Windows      Linux      LabVIEW      MATLAB      VB      C       C        Java                  CMSeries      O      X      X      O      X      X      X      X      X      X      X              OpenCM CR      O      O      O      O      O      X      X      X      X      O      X        Download CM510 SDK  Download CM530 SDK  Download CM700 SDKWireless Control SDK            SDK      Protocol 1 0      Protocol 2 0      ROS      Windows      Linux      LabVIEW      MATLAB      VB      C       C        Java                  Plugin Motion       X      X      X      X      X      X      X      X      O      X      X              ZIGBEE Porting      X      X      X      X      X      X      X      X      X      X      X              ZIG2Serial Windows       X      X      X      O      X      X      X      O      O      O      X              ZIG2Serial Linux       X      X      X      X      O      X      X      X      X      X      X        Download PlugIn SDK Motion   Download ZIGBEE Porting SDK  Download ZIG2Serial SDK for 32bit Windows  Download ZIG2Serial SDK for 64bit Windows  Download ZIG2Serial SDK for Linux",
      "url": "http://0.0.0.0:4000/docs/en/software/sdk/"
      } ,
  
  
      "docs-en-software-sdk-embedded-c-cm510":  {
      "title": "Embedded C(CM-510/700)",
      "content"	 : "IntroductionIt makes the users possible to develop their own firmware  The characteristics are as follows  All the sources are written in C Language   The examples of how to control each part of the controller directly are provided Note If you want to use Embedded C  you need the knowledge of software and hardware  If you are a beginner  we recommend you use Embedded C after learing the software and the hardware Note If you use Embedded C  you cannot use RoboPlus since the controller’s firmware is changed  If you want to use RoboPlus again  you must restore the firmware using RoboPlus CM510 700  Download CM510 SDK  Download CM700 SDKFile Structure     include  Necessary header files when using library     src  Library sources     lib  Library files     example  Examples which can be executed in the controllerGetting StartedInstall WinAVRWinAVR is necessary for AVR programming WinAVR can be downloaded from the following website  and it is freeofcharge http  winavr sourceforge net The installation process is as below       Select a language             The initial window is as below             The window below is about the license agreement  You must agree to continue the installation             Select a folder for the installation  and then click Next button             Select programs and environment options   If there are no specific reasons  it is recommended to install all in the list             Start WinAVR installation             WinAVR installation is completed       Install Atmel StudioAtmel Studio provides users various Macro  Library  and comprehensive environment for easy programming Atmel Studio can be downloaded from the website below  and it is freeofcharge http  www atmel com dyn products tools_card asp tool_id 2725The installation procedure is as follows       The initial window is as below             The window below is about license agreement   You must agree to continue the installation             Select a folder for the installation  and then click Next button             Click Next to continue the installation             Start Atmel Studio installation             Atmel Studio installation is completed       Environment SettingIf you want to use Embedded C  you must select the basic environment of the installed program   If Atmel Studio is installed after WinAVR  if it is not an exceptional case  you can do programming using Atmel Studio only   To run the examples Dynamixel s  or other external devices maybe required in addition to the controller connected to the PC via serial cable       Click on Debug  Options and Settings             With the left mouse click select Toolchain  Selcts Atmel AVR 8bit  C language   Click on Add Flavour             Click on  …  and select version’s 20100110 bin folder  Ex  cWinAVR20100110bin            Select Win AVR then click on the OK button             Click on File  Open  Project Solution             Select the example file then open it             Click to select the c file located to the right of Solution Explorer  Click on Project  gt Properties  If Solution Explorer cannot be seen then select Solution Explorer from View             From the left hand menu click on Toolchain  Click on Directories  Click on the green   to add item             This will select the Include  Ex  cembedded_c cm700_v1 01 include            Its possible to verify in the include folder has been added             On Solution Explorer  from the right  click on the project file and click on Add Library             Click on Browse Libraries  Click on  Browse  on the lower right side             To select the library select and open the lib folder             To add the 3 libraries select all and lick on  open  from the lower right             its possible to verify that all 3 libraries have been added             To compile click on Build  gt Rebuild Solution and check for Build succeeded on the output window Build Succeeded       Restore RoboPlusThe result made by Embedded C is a controller firmware  hex file    If you install it  you cannot use RoboPlus since the existing controller firmware is erased   If you want to use RoboPlus again  you must install the original controller firmware builtin from the factory   You can install the original controller firmware easily using RoboPlus Manager For more information  please refer to Firmware Restoration of RoboPlus Manager ProgrammingHardware Port MapThe following hardware port map shows the hardware main pin functions of the controller Each port or internal functions can be controlled easily with macro function provided by Atmel Studio CM510            Port Name      Function                  PORTF1   PORTF6      ADC              PORTD0      Start Button              PORTD1   PORTD2      Tx  Rx              PORTA2   PORTA7      External Output   5 Pin Port               PORTC0   PORTC6      Controller LED   Status  Power                PORTB5  Buzzer      Control Port              PORTE4   PORTE6      Direction Button  U  D  L  R               PORTD4   PORTD6      Communication Control Port      The external port pin composition of CM510 is as below   You can check port 1   port 6 by the scale marks on the external port For more information  please refer to CM510   As shown below  among 5 pins  No 3 ADC Pin is facing PORTF1   PORTF6 of Micro Controller For example  ADC pin facing external port 3 as below is connected to PORTF3 of Micro Controller   As shown below  among 5 pins  No 1 OUT Pin is facing PORTA2   PORTA7 of Micro Controller For example  OUT pin facing external port 3 as below is connected to PORTA4 of Micro Controller   OUT  5V Output Available  VCC  5V   ADC  Analogue signals of sensors made by users can be read   GND  NC  Not usedCM700            Port Name      Function                  PORTF1   PORTF6      ADC              PORTD0      Start Button              PORTD2   PORTD3      Tx  Rx              PORTA2   PORTA7      External Output   5 Pin Port               PORTC0   PORTC6      Controller LED   Status  Power        The external port pin composition of CM700 is as below   You can check port 1   port 6 by the letters written on the bottom of Subboard For more information  please refer to CM700   As shown below  among 5 pins  No 3 ADC Pin is facing PORTF1   PORTF6 of Micro Controller   As shown below  among 5 pins  No 1 OUT Pin is facing PORTA2   PORTA7of Micro Controller   OUT  5V Output Available  VCC  5V   ADC  Analogue signals of sensors made by users can be read   GND  NC  Not usedBasic ProgrammingIt explains how to make simple Embedded C examples on Atmel Studio Creating ProjectThe procedure of creating project is as below       From the File menu select New  gt Project             Select GCC C Executable Project Name for template  This sets the items Location  Solution name  After setup click on  OK              From the multiple devices list select ATmega2561  ATmega128 for CM5   Click on  OK        Creating Code and ComplingThe following example is about the basic PORT I O Control       The following is code from the generated project       define F_CPU 16000000L  include  ltavr io h gt  include  ltutil delay h gt int main void     DDRC    0x7F   PORTC   0x7E   while  1         int i     for i   0 i  lt  6 i               PORTC     1  lt lt i        _delay_ms 250            return 1             From the Build menu click on  Build Solution  to run the build command             When build succeeded message appears on the output window then compiling is complete  The firmware’s hex file can be found in the default folder from the project’s folder       Downloading hex file  To install the firmware on the controller  you must use RoboPlus Terminal and Boot Loader   For more information on the installation and the execution of firmware  please refer to Installing Executing Program   If the firmware is installed normally  you can see all LEDs are turned on Boot LoaderBoot Loader makes the users possible to use the controller   Boot Loader cannot be erased by the users   If it is broken down  the controller cannot be used  Boot Loader is builtin on the controller when it is manufactured in the factory The available commands in Boot Loader can be found using Help command Install Execute ProgramPreparations for installing a firmware of the controller are as follows  Prepare a firmware  hex file  of the controller to be installed   Connect PC and the controller   Set the communication port by executing RoboPlus Terminal   Execute Boot Loader of the controller   Please refer to how to enter Boot Loader  A firmware of the controller can be installed according to the procedure below       Input L command  or Load  in Boot Loader             Select Transmit File in the Files menu of RoboPlus Terminal  and then select the prepared firmware   hex file             The file is transmitted  Please do not let the power of the controller turn off  and be careful the cable does not take off while the file is being transmitted         When the file transmission is completed  you can execute the program using GO command           In case of inputting only GO command  the program is executed from 0 address       Like G  Address   if you input execution address  hexadecimal  after G command  the program is executed from the location       Entering Exiting Boot LoaderEntering Boot LoaderTo enter into the boot loader  while pressing the  ‘ ’ button Shift   3   turn on the controller or press down the reset switch   If you did correctly  following screen page will be shown Exiting Boot LoaderIf the work is completed  you may exit by jumping to the desired address using GO command or by resetting the controller How to Use APP SYSThe program start position can be set by APP SYS command   Once the program start position is set  the program is executed on the program start position when the power is turned on or reset The memory map using Atmega2561 is as below       If you input APP command on the window after entering Boot Loader  User Application Area is executed first after the next reset  Most programs such as provided firmware  user program etc  start from 0 address  if there are no specific reasons          If you input SYS command on the window after entering Boot Loader  Boot Loader is executed after the next reset  It is started as Boot Loader status  even if you do not press      ExamplesLED ControlEach LED of the controller can be controlled   Prepare          CM510 or 700        Theory          The micro controller can control the peripheral devices such as LED connected to the controller through I O Port   You can control LEDs on the controller using this example       PORTC is used in this example   Please refer to Controller Port Map             Source      PORTC     1  lt lt i   _delay_ms 250               Turn on the LEDs in order by controlling PORTC         Result          All LEDs will be turned on in order       ButtonInput of the button can be received   Prepare          CM510 or 700        Theory          Electronic signals of the devices connected to the controller can be read through I O Port of the micro controller   You can see the status of pressed builtin switches through this example       PORTC and PORTE are used in this example   Please refer to Controller Port Map         Source                  The Example of CM510          if  PINE  amp BTN_UP   PORTC  amp   LED_MANAGE  else if  PINE  amp BTN_DOWN   PORTC  amp   LED_AUX  else if  PINE  amp BTN_LEFT   PORTC  amp   LED_PROGRAM  else if  PINE  amp BTN_RIGHT   PORTC  amp   LED_PLAY  else if  PIND  amp BTN_START   PORTC     LED_BAT LED_TxD LED_RxD LED_AUX LED_MANAGE LED_PROGRAM LED_PLAY   else PORTC   LED_BAT LED_TxD LED_RxD LED_AUX LED_MANAGE LED_PROGRAM LED_PLAY                You can see the pressed buttons through PORTD and PORTE  and LEDs can be turned on and off by controlling PORTC depending on the pressed buttons   You can use macro function PIND and PINE to get input value through PORTD and PORTE   PIND and PINE are 1 byte  and the pins of PORTD and PORTE are facing each bit   Therefore  you can read the value of the certain pin through  amp operation etc                     The Example of CM700          if  PIND  amp BTN_START   PORTC     LED_BAT LED_TxD LED_RxD LED_AUX LED_MANAGE LED_PROGRAM LED_PLAY   else PORTC   LED_BAT LED_TxD LED_RxD LED_AUX LED_MANAGE LED_PROGRAM LED_PLAY                You can see the pressed buttons through PORTD  and LEDs can be turned on and off by controlling PORTC depending on the pressed buttons   You can use macro fuction PIND to get the input value through PORTD   PIND is 1 byte  and the pins of PORTD are facing each bit   Therefore  you can read the value of the certain pin through  amp operation etc               Result          If you press buttons  depending on pressed buttons  different LEDs are turned on       Serial CommunicationPC and the controller can perform serial communication   Prepare          Serial cable for PC       The communication speed of the example is set to 57 600bps         Theory          Serial communication is the basic method to show the value of the controller to users by transmitting to PC   You can try serial communication with the controller through this example             Source      serial_initialize 57600     USART Initialize  sei      set enable interrupt        This part is for initialization to use serial communication   The serial initialization function is included in serial library  and it is initialized if communication speed is transmitted by data   In case of sei    it is an internal command makes users possible to use Interrupt           unsigned char ReceivedData   getchar    if ReceivedData     u    Value    else if ReceivedData     d    Value  printf %drn  Value         This part is for printing results by adding 1 if the received data is u  while by subtracting 1 if it is d   The data is received using getchar   function if the data is not received  it will wait     Result                  If you input u  the result is printed out by adding 1 to currently memorized number  while if you input d  it is printed out by subtracting 1                     BuzzerBuzzer on the controller can be used   Prepare          CM510  CM700 has no buzzer          Theory          Signals of the buzzer circuit can be controlled through I O Port of the micro controller   The buzzer can play different musical notes by adjusting signal frequency       PORTB  PORTC and PORTD are used in this example   Please refer to Controller Port Map       The relationship between musical scale and frequency is as below               Time is a reciprocal number of frequency   The conversion formula is as below         Time Sec     1    Frequency                         Octave Scale      1      2      3      4      5      6      7      8                  C      32 7032      65 4064      130 8128      261 6256      523 2511      1046 502      2093 005      4186 009              C       34 6478      69 2957      138 5913      277 1826      554 3653      1108 731      2217 461      4434 922              D      36 7081      73 4162      146 8324      293 6648      587 3295      1174 659      2349 318      4698 636              D       38 8909      77 7817      155 5635      311 1270      622 2540      1244 508      2489 016      4978 032              E      41 2034      82 4069      164 8138      329 6276      659 2551      1318 510      2637 020      5274 041              F      43 6535      87 3071      174 6141      349 2282      698 4565      1396 913      2793 826      5587 652              F       46 2493      92 4986      184 9972      369 9944      739 9888      1479 978      2959 955      5919 911              G      48 9994      97 9989      195 9977      391 9954      783 9909      1567 982      3135 963      6271 927              G       51 9130      103 8262      207 6523      415 3047      830 6094      1661 219      3322 438      6644 875              A      55 0000      110 0000      220 0000      440 0000      880 0000      1760 000      3520 000      7040 000              A       58 2705      116 5409      233 0819      466 1638      932 3275      1864 655      3729 310      7458 620              G      61 7354      123 4708      246 9417      493 8833      987 7666      1975 533      3951 066      7902 133        Unit  Hz  Source                  This is an example for CM510   This is not applicable for CM700 because it has no buzzers         if  PIND  amp SW_START   PORTC     LED_BAT LED_TxD LED_RxD LED_AUX LED_MANAGE LED_PROGRAM LED_PLAY   _delay_ms 1   PORTB    0x20  _delay_ms 1   PORTB  amp   0x20else  PORTC   LED_BAT LED_TxD LED_RxD LED_AUX LED_MANAGE LED_PROGRAM LED_PLAY  PORTB  amp   0x20                Pressed buttons are checked by PORTD  LEDs and Buzzers can be turned on and off by controlling PORTB and PORTC pursuant to pressed buttons You can use macro function PIND to get the input value through PORTD PIND is 1 byte  and the pins of PORTD are facing each bit Therefore  you can read the value of the certain pin through  amp operation etc If Start button is pressed  the buzzer makes sounds through PORTB as soon as all LEDs are turned on               Result          All LEDs are turned on  and the buzzer makes sounds of same musical notes continuously while Start button is being pressed       MICExternal sounds can be detected through MIC   Prepare          CM510  CM700 has no mic          Theory          If more than a certain level of sounds is detected on the MIC circuit  signals are made to I O Port of the micro controller   External sounds can be detected by sensing the signals       PORTC and PORTD are used in the example   Please refer to Controller Port Map         Source                  This is an example for CM510   This is not applicable for CM700 because it has no buzzers         if  PIND  amp MIC_SIGNAL   PORTC     LED_BAT LED_TxD LED_RxD LED_AUX LED_MANAGE LED_PROGRAM LED_PLAY   _delay_ms 1000 else PORTC   LED_BAT LED_TxD LED_RxD LED_AUX LED_MANAGE LED_PROGRAM LED_PLAY                Pressed buttons are checked by PORTD  LEDs can be turned on or off by controlling PORTC pursuant to pressed buttons You can use macro function PIND to get the input value through PORTD PIND is 1 byte  and the pins of PORTD are facing each bit Therefore  you can read the value of the certain pin through  amp operation etc If the MIC signals are detected through PORTD  turn on all LEDs and wait for a second               Result          When the MIC signals are detected  all LEDs are turned on and off for a second       IR SensorHere you can learn how t o use the ADC of external ports   This example is using the IR sensor for explanation     Prepare          CM510 or 700      IR Sensor  Connected to the external sensor No 1         Theory          Analog signals can be changed into digital values through the micro controller   Through this example  the analog voltage values of external IR Sensor  Gyro Sensor etc  can be read       PORTA is used in the example   Please refer to Controller Port Map             Source    serial_initialize 57600 sei  ADCSRA    1  lt lt ADEN     1  lt lt ADPS2     1  lt lt ADPS1     ADC Enable  Clock 1 64div ADMUX   ADC_PORT_1    ADC Port 1 Select        This part is for initialization to use serial communication   The serial initialization function is included in serial library  and the serial port is initialized if communication speed is transmitted by data In the case of sei    it is an internal command makes users possible to use Interrupt Besides that  there is a register setting for ADC control   For the control  please refer to the datasheet of Atmega2561 The datasheet can be downloaded at http  www atmel com         PORTA  amp   0x80    ADC Port 1 IR ON   _delay_us 12     Short Delay for rising sensor signalADCSRA     1  lt lt ADIF     ADConversion Interrupt Flag ClearADCSRA     1  lt lt ADSC     ADConversion Start   while    ADCSRA  amp  1  lt lt ADIF        Wait until ADConversion complete   PORTA   0xFC    IRLED Off   printf  %drn  ADC     Print Value on USART_delay_ms 50         This part is for analyzing and transmitting the analog signals detected through PORTA First of all  turn on the IR LED 1 of PORTA  and then start converting the amount of received light into digital values When the conversion is complete  turn off the IR LED  and then transmit the values through serial communication     Result          When it is connected to PC in serial  IR sensor values are printed on the screen       Read Write DynamixelThe location of Dynamixel can be set and read   Prepare          The controller and Dynamixel are connected       This example is operated if the Dynamixel ID is 1         Theory          Dynamixel can be controlled by transmitting designated packet   The location of Dynamixel can be controlled using provided library             Source    unsigned short GoalPos 2    0  1023  unsigned short wGoalPos 2    0  4095    for EX series        Like EX 106   if an actuator belongs to the location range between 0 and 4095  notes are applied to the upper line but not applied to the lower line     serial_initialize 57600 dxl_initialize  0  DEFAULT_BAUDNUM      Not using device indexsei      Interrupt Enable        This part is for initialization to use serial communication   The serial initialization function is included in serial library  and the serial port is initialized if communication speed is transmitted by data In the case of sei    it is an internal command makes users possible to use Interrupt In the case of dxl_initialize   function  communication environemnt of the controller is initialized if device index and communication speed are transmitted by data DEFAULT_BAUDNUM is 1 If there are no specific reasons  device index is 0        Check moving donebMoving   dxl_read_byte  id  P_MOVING  CommStatus   dxl_get_result  if  CommStatus    COMM_RXSUCCESS    if  bMoving    0           Change goal position    if  index    0      index   1    else    index   0       Write goal position    dxl_write_word  id  P_GOAL_POSITION_L  GoalPos index       PrintErrorCode          Read present position  wPresentPos   dxl_read_word  id  P_PRESENT_POSITION_L    printf  %d   %dn GoalPos index   wPresentPos  else  PrintCommStatus CommStatus         This part describes that Dynamixel is sent to certain location  and the current location is read at the same time First of all  if the current movement status has been read  and the motor is not moving  the movement command to the designated location can be carried on by dxl_write_word   function The data of dxl_write_word   function are respectively  the ID  address  and position values of connected Dynamixel  Later  the current location is read and transmitted by serial communication     Result          Dynamixel is moved back and forth in the disgnated location  and the current location is printed through terminal       Dynamixel Sync ControlMultiple Dynamixels can be controlled by synchronization   Prepare          The controller and Dynamixel are connected       This example is operated when the Dynamixel ID is designated from 1 to 3 in order         Theory          Dynamixel can be controlled by transmitting designated packet   The location of Dynamixel can be controlled using provided library             Source    int AmpPos   512  int AmpPos   2048    for EX series        Like EX 106   if an actuator belongs to the location range between 0 and 4095  notes are applied to the upper line but not applied to the lower line     serial_initialize 57600 dxl_initialize  0  DEFAULT_BAUDNUM      Not using device indexsei      Interrupt Enable        This part is for initialization to use serial communication   The serial initialization function is included in serial library  and the serial port is initialized if communication speed is transmitted by data In the case of sei    it is an internal command makes users possible to use Interrupt In the case of dxl_initialize   function  communication environment of the controller is initialized if device index and communication speed are transmitted by data DEFAULT_BAUDNUM is 1 If there are no specific reasons  device index is 0     for  i 0 i ltNUM_ACTUATOR i      id i    i 1  phase i    2 PI    float i    float NUM_ACTUATOR   Set goal speeddxl_write_word  BROADCAST_ID  P_GOAL_SPEED_L  0     Set goal positiondxl_write_word  BROADCAST_ID  P_GOAL_POSITION_L  AmpPos  _delay_ms 1000         This part is for calculation of the initial location and initialization of the location of each Dynamixel The speed of all Dynamixels is set to the maximum level  and the location is set to the center using dxl_write_word   function        Make syncwrite packetdxl_set_txpacket_id BROADCAST_ID dxl_set_txpacket_instruction INST_SYNC_WRITE dxl_set_txpacket_parameter 0  P_GOAL_POSITION_L dxl_set_txpacket_parameter 1  2 for  i 0 i ltNUM_ACTUATOR i      dxl_set_txpacket_parameter 2 3 i  id i    GoalPos    int   sin theta phase i     1 0     float AmpPos   printf  %d    GoalPos    dxl_set_txpacket_parameter 2 3 i 1  dxl_get_lowbyte GoalPos    dxl_set_txpacket_parameter 2 3 i 2  dxl_get_highbyte GoalPos  dxl_set_txpacket_length  2 1  NUM_ACTUATOR 4 This part is for packet creation   Please refer to Dynamixel Packet Structure All connected actuator packets are created and transmitted    printf  n     dxl_txrx_packet  CommStatus   dxl_get_result  if  CommStatus    COMM_RXSUCCESS  PrintErrorCode  elsePrintCommStatus CommStatus    theta    STEP_THETAif  theta  gt 2 PI  theta   2 PI_delay_ms CONTROL_PERIOD         After receiving result packets  if there are errors  the error codes are printed If a value exceeds the calculated location boundary value  the increase decrease direction is changed to the opposite     Result          Multiple Dynamixels are moved back and forth in the designated location  and the current location is printed through terminal       RC100 ZIGBEEThe controller can be operated using RC100   Prepare          CM510 or 700      One pair of Zig100 110      RC100        Theory          The controller can be controlled by RC100 remote controller equipped with Zig 100       PORTC and PORTD are used in this example   Please refer to Controller Port Map             Source    PORTD  amp   0x80   PORT_LINK_PLUGIN   0      no pull upPORTD  amp   0x20   PORT_ENABLE_RXD_LINK_PC   0PORTD    0x40   PORT_ENABLE_RXD_LINK_ZIGBEE   1zgb_initialize  0      Not using device indexsei      Interrupt Enable            Set the environment to use  ZigBee   The environment of PORTD must be set as below     PORTD  amp   0x80   PORT_LINK_PLUGIN   0      no pull upPORTD  amp   0x20   PORT_ENABLE_RXD_LINK_PC   0PORTD    0x40   PORT_ENABLE_RXD_LINK_ZIGBEE   1        This part is for initialization to use ZigBee communication  The initialization function is included in Zigbee library  and the Zigbee is initialized if device index is transmitted by data If there are no specific cases  device index is 0 In the case of sei    it is an internal command makes users possible to use Interrupt     if zgb_rx_check      1   RcvData   zgb_rx_data    if RcvData  amp RC100_BTN_1     PORTC  amp   LED_MANAGE  else    PORTC    LED_MANAGE  if RcvData  amp RC100_BTN_2     PORTC  amp   LED_PROGRAM  else    PORTC    LED_PROGRAM  if RcvData  amp RC100_BTN_3     PORTC  amp   LED_PLAY  else    PORTC    LED_PLAY        The received data by Zigbee Module can be read using zgb_rx_data   function If the received packet is RC100 button  LEDs are turned on or off by controlling PORTC pursuant to pressed buttons of RC100     Caution Due to the UART sharing  there  happen a system collision when you use the zigBee and serial communication library at the same source  If you want to use both of them at once  you must modify the source properly in advance     Result          If Zigbee is connected normally  LEDs are turned on and off whenever the buttons of RC100 is pressed       ",
      "url": "http://0.0.0.0:4000/docs/en/software/sdk/embedded_c_cm510/"
      } ,
  
  
      "docs-en-software-sdk-embedded-c-cm530":  {
      "title": "Embedded C(CM-530)",
      "content"	 : "IntroductionIt makes the users possible to develop their own firmware  The characteristics are as follows  All the sources are written in C Language   The examples of how to control each part of the controller directly are provided Note If you want to use Embedded C  you need the knowledge of software and hardware  If you are a beginner  we recommend you use Embedded C after learing the software and the hardware Note If you use Embedded C  you cannot use RoboPlus since the controller’s firmware is changed  If you want to use RoboPlus again  you must restore the firmware using RoboPlus CM530  Download CM530 SDKFile Structure      stm32f10x_conf h  Makefile  stm32 ld contants of these files and subdirectories      stm32f10x_lib  library files      APP inc  example header files      APP src  example source files Getting StartedNote If an error occurs during installation in Windows 8 1 10  click HERE  Once downloading and unzipping are completed  copy the files to C￦WinARM￦utils￦bin   You can replace the existing file    EX error  usr bin sh fork Resource temporarily unavailable Install JREJRE Java Runtime Environment  is a required component to run Eclipse To verify whether JRE has been installed input ‘java’ at the command prompt  You can download JRE here http  www oracle com technetwork java javase downloads index htmlSelect the version that best matches your working system Install WinARMYou can download WinARM here The downloaded file is a compressed file  Decompressed the file in CWinARM directory You must register WinARM to complete installation Go to  Control Panel   gt  System   gt  Advanced system settings  and select  Advanced  tab  Click on the  Environment Variables  button Find Path variable in the  System variables  group and edit its value If the Path variable is not exist then create new path by clicking on the New button Click on the  New  button and add below items at the end of path lists for Windows 10 users CWinArmbinCWinARMutilsbinOther than Windows 10  append below items at the end of the variable value  Don’t miss the delimiter ‘’ semicolon   in between each path CWinArmbinCWinARMutilsbinTo verify proper installation  open the command window and type ‘armeabigcc –v’ If it does not work well  turn off the cmd window and rerun cmd  then try again Install EclipseYou can download Eclipse here http  www eclipse org downloads Select the version that best matches your working system To run Eclipse just run the eclipse exe file http  www eclipse org downloads packages eclipseideccdevelopers neonrVerify InstallationVerify successful installation by opening a sample project Decompress the file  no root user rights needed  When you first run Eclipse  it requires to set up workspace like the picture below   if you leave the default path  it may not be able to read the project  Please change it to another path Click on the left lower box to prevent this window Run Eclipse and go to File – New – Makefile Project with Existing Code Click on Browse select 01 LED and click on Verify After selecting the project go to Project – Clean  BuildTo see progress check the terminal window If progress is not as shown below then check the working development environment Note If an error occurs during installation in Windows 8 1 10  click HERE  Once downloading and unzipping are completed  copy the files to C￦WinARM￦utils￦bin   You can replace the existing file    EX error  usr bin sh fork Resource temporarily unavailable Restore RoboPlusThe result made by Embedded C is a controller firmware  bin file   If you install it  you cannot use RoboPlus since the existing controller firmware is erased  If you want to use RoboPlus again  you must install the original controller firmware builtin from the factory  You can install the original controller firmware easily using RoboPlus Manager For more information  please refer to Firmware Restoration of RoboPlus Manager ProgrammingHardware Port MapThe following hardware port map shows the hardware main pin functions of the controller Macros and libraries for the STM32F10X ports and internal functionalities are provided for easy access and control CM530            Pin        Pin Name      NET NAME      Description                  1      Vbat      VCC_33L      3 3V power supply              2      PC13      LED0      LED POWER              3      PC14      LED_TX      LED TX              4      PC15      LED_RX      LED RX              5      OSC_IN      XTAL1      XTAL INPUT              6      OSC_OUT      XTAL2      XTAL OUTPUT              7      NRST      RESET      RESET              8      PC0      SIG_ADC0      ADC0 INPUT              9      PC1      ADC_SELECT0      ANALOG MUX SELECT0              10      PC2      ADC_SELECT1      ANALOG MUX SELECT1              11      PC3      VDD_VOLT      input voltage  ADC              12      VSSA      VSSA      ADC reference voltage  3 3V              13      VDDA      VDDA      ADC reference voltage  0V              14      PA0      SIG_MOT1        1 external port  OUPUT              15      PA1      SIG_MOT1      1 external port  OUPUT              16      A2      SIG_MOT2        2 external port  OUPUT              17      PA3      SIG_MOT2       2 external port  OUPUT              18      VSS4      GND      0V reference voltage              19      VDD4      VCC_33L      3 3V reference voltage              20      PA4      NC      RESERVED              21      PA5      SIG_ADC1      ADC1 INPUT              22      PA6      SIG_BUZZER      Buzzer OUTPUT              23      PA7      NC      RESERVED              24      PC4      SIG_MIC      MIC Signal INPUT              25      PC5      NC      RESERVED              26      PB0      NC      RESERVED              27      PB1      NC      RESERVED              28      PB2      BOOT1      RESERVED              29      PB10      PC_TXD      PC transmit              30      PB11      PC_RXD      PC receive              31      VSS1      GND      0V reference voltage              32      VDD1      VCC_33L      3 3V reference voltage              33      PB12      LED3      LED AUX              34      PB13      LED4      LED MANAGE              35      PB14      LED5      LED PROGRAM              36      PB15      LED6      LED PLAY              37      PC6      SIG_MOT3        3 external port  OUPUT              38      PC7      SIG_MOT3       3 external port  OUPUT              39      PC8      SIG_MOT4        4 external port  OUPUT              40      PC9      SIG_MOT4       4 external port  OUPUT              41      PA8      SIG_MOT5        5 external port  OUPUT              42      PA9      NC      RESERVED              43      PA10      NC      RESERVED              44      PA11      SIG_MOT5       5 external port OUPUT              45      PA12      ZIGBEE_RESET      Zigbee ENABLE              46      PA13      USB_SLEEP      USB connections              47      VSS2      GND      0V reference voltage              48      VDD2      VCC_33L      3 3V reference voltage              49      PA14      SW_RT      R Button              50      PA15      SW_LF      L Button              51      PC10      SW_DN      D Button              52      PC11      SW_UP      U Button              53      PC12      ZIGBEE_TXD      Zigbee transmit              54      PD2      ZIGBEE_RXD      Zigbee receive              55      PB3      SW_START      START Button              56      PB4      ENABLE_TX      Dynamixel transmit  ENABLE              57      PB5      ENABLE_RX      Dynamixel receive ENABLE              58      PB6      DXL_TXD      Dynamixel transmit              59      PB7      DXL_RXD      Dynamixel receive              60      BOOT0      BOOT0      RESERVED              61      PB8      SIG_MOT6        6 external port OUPUT              62      PB9      SIG_MOT6       6 external port OUPUT              63      VSS3      GND      0V reference voltage              64      VDD3      VCC_33L      3 3V reference voltage      The external ports of the CM530 are listed below from 1 to 6  Please refer to CM530 controller for reference regarding ports   OUT1  Output voltage 3 3V  0 3A max   VCC  5V   ADC  Ports for analog signal devices  GND  OUT2  Output voltage 3 3V  0 3A max Open ProjectOpen 01 LED projectRun Eclipse and go to Fle – New – makefile Project with existing code Click on Browse select 01 LED and click on Verify After selecting the project go to Project – Clean  BuildTo see progress check the terminal window If progress is not as shown below then check the working development environment Download bin FileAfter a successful build the bin file will be located at the sample directory The firmware can be loaded into the controller via bootloader from RoboPlus Terminal Please refer to the bootloader program for firmware installation and running Boot LoaderBoot Loader makes the users possible to use the controller  Boot Loader cannot be erased by the users  If it is broken down  the controller cannot be used  Boot Loader is builtin on the controller when it is manufactured in the factory The available commands in Boot Loader can be found using Help command Entering Exiting Boot LoaderEntering Boot LoaderTo enter into the boot loader  while pressing the  ‘ ’ button Shift   3   turn on the controller or press down the reset switch If you did correctly  following screen page will be shown Exiting Boot LoaderIf the work is completed  you may exit by jumping to the desired address using GO command or by resetting the controller How to Use APP SYSThe program start position can be set by APP SYS command  Once the program start position is set  the program is executed on the program start position when the power is turned on or reset The memory map using STM32F103RE is as below       If you input APP command on the window after entering Boot Loader  User Application Area is executed first after the next reset  Most programs such as provided firmware  user program etc  start from 0 address  if there are no specific reasons          If you input SYS command on the window after entering Boot Loader  Boot Loader is executed after the next reset  It is started as Boot Loader status  even if you do not press      Install Execute ProgramPreparations for installing a firmware of the controller are as follows  Prepare a firmware  hex file  of the controller to be installed   Connect PC and the controller   Set the communication port by executing RoboPlus Terminal   Execute Boot Loader of the controller   Please refer to how to enter Boot Loader  A firmware of the controller can be installed according to the procedure below       Input L command  or Load  in Boot Loader             Select Transmit File in the Files menu of RoboPlus Terminal  and then select the prepared firmware   bin file             The file is transmitted   Please do not let the power of the controller turn off  and be careful the cable does not take off while the file is being transmitted         When the file transmission is completed  you can execute the program using GO command           In case of inputting only GO command  the program is executed from 0 address       Like G  Address   if you input execution address  hexadecimal  after G command  the program is executed from the location       Additional DescriptionFile creationThe newly made file can be changed from the samplemakefile designation  From makefile you can rename the file after ‘MAIN_OUT  ’ Object file listFrom the illustration ‘sampleappsrc’ directory object files are produced from the  c files where the Makefile requires these object files Firmware start addressThe memory maps and bootloader domain are divided into the following The firmware starting address is 0X8003000 by default usermodifiable The following example is with address 0X8003000      changing stm32 ld            changing the vector table      ExamplesLED ControlEach LED of the controller can be controlled   Prepare          CM530        Theory          The micro controller can control the peripheral devices such as LED connected to the controller through I O Port  You can control LEDs on the controller using this example       Refer to controller’s port for port and pin number in 01 LEDappsrcmain c            Source    int main void    System Clocks Configuration   RCC_Configuration     NVIC configuration   NVIC_Configuration     Configure the GPIO ports   GPIO_Configuration  SysTick_Configuration     while 1   GPIO_SetBits PORT_LED_POWER  PIN_LED_POWER   GPIO_ResetBits PORT_LED_MANAGE  PIN_LED_MANAGE   mDelay 250   GPIO_SetBits PORT_LED_MANAGE  PIN_LED_MANAGE   GPIO_ResetBits PORT_LED_PROGRAM  PIN_LED_PROGRAM   mDelay 250   GPIO_SetBits PORT_LED_PROGRAM  PIN_LED_PROGRAM   GPIO_ResetBits PORT_LED_PLAY  PIN_LED_PLAY   mDelay 250   GPIO_SetBits PORT_LED_PLAY  PIN_LED_PLAY   GPIO_ResetBits PORT_LED_TX  PIN_LED_TX   mDelay 250   GPIO_SetBits PORT_LED_TX  PIN_LED_TX   GPIO_ResetBits PORT_LED_RX  PIN_LED_RX   mDelay 250   GPIO_SetBits PORT_LED_RX  PIN_LED_RX   GPIO_ResetBits PORT_LED_AUX  PIN_LED_AUX   mDelay 250   GPIO_SetBits PORT_LED_AUX  PIN_LED_AUX   GPIO_ResetBits PORT_LED_POWER  PIN_LED_POWER   mDelay 250     return 0        Result          All LEDs will be turned on in order       ButtonInput of the button can be received   Prepare          CM530        Theory          Electronic signals of the devices connected to the controller can be read through I O Port of the micro controller  You can see the status of pressed builtin switches through this example       Refer to controller’s port for port and pin number in 02 BUTTON appsrcmain c            Source    int main void      System Clocks Configuration     RCC_Configuration       NVIC configuration     GPIO_Configuration       Configure the GPIO ports     NVIC_Configuration    GPIO_ResetBits PORT_LED_POWER  PIN_LED_POWER        while 1       if  GPIO_ReadInputDataBit PORT_SW_UP  PIN_SW_UP     SET        GPIO_ResetBits PORT_LED_MANAGE  PIN_LED_MANAGE     else if  GPIO_ReadInputDataBit PORT_SW_DOWN  PIN_SW_DOWN     SET        GPIO_ResetBits PORT_LED_AUX  PIN_LED_AUX     else if  GPIO_ReadInputDataBit PORT_SW_LEFT  PIN_SW_LEFT     SET        GPIO_ResetBits PORT_LED_PROGRAM  PIN_LED_PROGRAM     else if  GPIO_ReadInputDataBit PORT_SW_RIGHT  PIN_SW_RIGHT     SET        GPIO_ResetBits PORT_LED_PLAY  PIN_LED_PLAY     else if  GPIO_ReadInputDataBit PORT_SW_START  PIN_SW_START     SET            GPIO_ResetBits PORT_LED_MANAGE  PIN_LED_MANAGE       GPIO_ResetBits PORT_LED_PROGRAM  PIN_LED_PROGRAM       GPIO_ResetBits PORT_LED_PLAY  PIN_LED_PLAY       GPIO_ResetBits PORT_LED_TX  PIN_LED_TX       GPIO_ResetBits PORT_LED_RX  PIN_LED_RX       GPIO_ResetBits PORT_LED_AUX  PIN_LED_AUX         else          GPIO_SetBits PORT_LED_MANAGE  PIN_LED_MANAGE       GPIO_SetBits PORT_LED_PROGRAM  PIN_LED_PROGRAM       GPIO_SetBits PORT_LED_PLAY  PIN_LED_PLAY       GPIO_SetBits PORT_LED_TX  PIN_LED_TX       GPIO_SetBits PORT_LED_RX  PIN_LED_RX       GPIO_SetBits PORT_LED_AUX  PIN_LED_AUX         return 0        Result          If you press buttons  depending on pressed buttons  different LEDs are turned on       Serial CommunicationPC and the controller can perform serial communication   Prepare          CM530 PC connection status      The communication speed of the example is set to 57600bps         Theory          Serial communication is the basic method to show the value of the controller to users by transmitting to PC  You can try serial communication with the controller through this example       The microcontroller and PC comm are in USART channel 3      Refer to controller’s port for port and pin number in  03 SERIAL COMMUNICATIONAPPsrcmain c            Source    int main void      System Clocks Configuration     RCC_Configuration       NVIC configuration     NVIC_Configuration       Configure the GPIO ports     GPIO_Configuration       USART Configuration     USART_Configuration 57600   GPIO_ResetBits PORT_LED_POWER  PIN_LED_POWER        while 1       ReceivedData   RxDByte_PC      if ReceivedData     w        TxDString Welcome rn     else if ReceivedData     g        TxDString Goodbye rn     return 0        Result                  Press the w for welcome and g key for goodbye                     BuzzerBuzzer on the controller can be used   Prepare          CM530        Theory          Signals of the buzzer circuit can be controlled through I O Port of the micro controller  The buzzer can play different musical notes by adjusting signal frequency               Refer to controller’s port for port and pin number in 04 BUZZERAPPsrcmain c            The relationship between musical scale and frequency is as below               Time is a reciprocal number of frequency  The conversion formula is as below         Time Sec     1    Frequency                         Octave Scale      1      2      3      4      5      6      7      8                  C      32 7032      65 4064      130 8128      261 6256      523 2511      1046 502      2093 005      4186 009              C       34 6478      69 2957      138 5913      277 1826      554 3653      1108 731      2217 461      4434 922              D      36 7081      73 4162      146 8324      293 6648      587 3295      1174 659      2349 318      4698 636              D       38 8909      77 7817      155 5635      311 1270      622 2540      1244 508      2489 016      4978 032              E      41 2034      82 4069      164 8138      329 6276      659 2551      1318 510      2637 020      5274 041              F      43 6535      87 3071      174 6141      349 2282      698 4565      1396 913      2793 826      5587 652              F       46 2493      92 4986      184 9972      369 9944      739 9888      1479 978      2959 955      5919 911              G      48 9994      97 9989      195 9977      391 9954      783 9909      1567 982      3135 963      6271 927              G       51 9130      103 8262      207 6523      415 3047      830 6094      1661 219      3322 438      6644 875              A      55 0000      110 0000      220 0000      440 0000      880 0000      1760 000      3520 000      7040 000              A       58 2705      116 5409      233 0819      466 1638      932 3275      1864 655      3729 310      7458 620              G      61 7354      123 4708      246 9417      493 8833      987 7666      1975 533      3951 066      7902 133        Unit  Hz      Source    int main void      System Clocks Configuration     RCC_Configuration       NVIC configuration     NVIC_Configuration       Configure the GPIO ports     GPIO_Configuration    SysTick_Configuration    GPIO_ResetBits PORT_LED_POWER  PIN_LED_POWER        while 1       if  GPIO_ReadInputDataBit PORT_SW_UP  PIN_SW_UP     SET            GPIO_ResetBits PORT_LED_MANAGE  PIN_LED_MANAGE       GPIO_ResetBits PORT_LED_PROGRAM  PIN_LED_PROGRAM       GPIO_ResetBits PORT_LED_PLAY  PIN_LED_PLAY       GPIO_ResetBits PORT_LED_TX  PIN_LED_TX       GPIO_ResetBits PORT_LED_RX  PIN_LED_RX       GPIO_ResetBits PORT_LED_AUX  PIN_LED_AUX       GPIO_ResetBits PORT_BUZZER  PIN_BUZZER       mDelay 1       GPIO_SetBits PORT_BUZZER  PIN_BUZZER       mDelay 1         else          GPIO_SetBits PORT_LED_MANAGE  PIN_LED_MANAGE       GPIO_SetBits PORT_LED_PROGRAM  PIN_LED_PROGRAM       GPIO_SetBits PORT_LED_PLAY  PIN_LED_PLAY       GPIO_SetBits PORT_LED_TX  PIN_LED_TX       GPIO_SetBits PORT_LED_RX  PIN_LED_RX       GPIO_SetBits PORT_LED_AUX  PIN_LED_AUX       GPIO_SetBits PORT_BUZZER  PIN_BUZZER                   Result          Press start the power LED turns on  6 other LED’s turn on  and buzzer sounds off       MICExternal sounds can be detected through MIC   Prepare          CM530        Theory          If more than a certain level of sounds is detected on the MIC circuit  signals are made to I O Port of the micro controller  External sounds can be detected by sensing the signals       Refer to controller’s port for port and pin number in 05 MICAPPsrcmain c        Sourceint main void      System Clocks Configuration     RCC_Configuration       NVIC configuration     NVIC_Configuration       NVIC configuration     GPIO_Configuration    SysTick_Configuration    GPIO_ResetBits PORT_LED_POWER  PIN_LED_POWER      while 1       if  GPIO_ReadInputDataBit PORT_MIC  PIN_MIC     SET           GPIO_ResetBits PORT_LED_MANAGE  PIN_LED_MANAGE       GPIO_ResetBits PORT_LED_PROGRAM  PIN_LED_PROGRAM       GPIO_ResetBits PORT_LED_PLAY  PIN_LED_PLAY       GPIO_ResetBits PORT_LED_TX  PIN_LED_TX       GPIO_ResetBits PORT_LED_RX  PIN_LED_RX       GPIO_ResetBits PORT_LED_AUX  PIN_LED_AUX       mDelay 1000         else          GPIO_SetBits PORT_LED_MANAGE  PIN_LED_MANAGE       GPIO_SetBits PORT_LED_PROGRAM  PIN_LED_PROGRAM       GPIO_SetBits PORT_LED_PLAY  PIN_LED_PLAY       GPIO_SetBits PORT_LED_TX  PIN_LED_TX       GPIO_SetBits PORT_LED_RX  PIN_LED_RX       GPIO_SetBits PORT_LED_AUX  PIN_LED_AUX         return 0  Result          When the MIC signals are detected  all LEDs are turned on and off for a second       OLLO Servo CW CCWLearning ollo servo motor rotation direction  Prepare          CM530      OLLO servo motor  Connected to the external port No 1         Theory                  The controller controls rotation direction with MOT1  and MOT1 via SIG_MOT1  and SIG_MOT1                            Refer to controller’s port for port and pin number in 06 OLLO MOTOR ROTATEAPPsrcmain c  Sourceint main void       System Clocks Configuration     RCC_Configuration       NVIC configuration     NVIC_Configuration       GPIO configuration     GPIO_Configuration    SysTick_Configuration    GPIO_ResetBits PORT_SIG_MOT1P PIN_SIG_MOT1P   GPIO_ResetBits PORT_SIG_MOT1M PIN_SIG_MOT1M   GPIO_ResetBits PORT_LED_POWER  PIN_LED_POWER      while 1       GPIO_SetBits PORT_SIG_MOT1P PIN_SIG_MOT1P     GPIO_ResetBits PORT_SIG_MOT1M PIN_SIG_MOT1M     mDelay 5000     GPIO_SetBits PORT_SIG_MOT1M PIN_SIG_MOT1M     mDelay 5000     GPIO_SetBits PORT_SIG_MOT1P PIN_SIG_MOT1P     GPIO_SetBits PORT_SIG_MOT1M PIN_SIG_MOT1M     mDelay 2000     return 0  Result          The servo motor rotates for 5 seconds and repeats rotating after a 2second halt       OLLO Servo PositionLearning ollo servo motor position reading  Prepare          CM530      OLLO servo motor        Theory          The controller can change input analog signals into digital form  This example converts the motor’s analog position signal               Refer to controller’s port for port and pin number in  06 OLLO MOTOR ROTATEAPPsrcmain c                            The ANALOG MUX  74HC4052D  blocks impedance and converts voltage from 5V to 3 3V       ADX MUX circuit combines signal from ADC_SELECT0  and ADC_SELECT1 SIG_ADC0 selects a signal from ADC1  ADC2  or ADC3 and feeds it into the microcontroller SIG_ADC1 selects a signal from ADC4  ADC5  or ADC6 and feeds it into the microcontroller then this signal gets converted into digital       Refer to controller’s port for port and pin number in  07 OLLO MOTOR POSITIONAPPsrcmain c        Sourceint main void      System Clocks Configuration     RCC_Configuration       NVIC configuration     NVIC_Configuration       GPIO configuration     GPIO_Configuration    SysTick_Configuration       ADC configuration     ADC_Configuration    GPIO_ResetBits PORT_SIG_MOT1P PIN_SIG_MOT1P   GPIO_ResetBits PORT_SIG_MOT1M PIN_SIG_MOT1M   GPIO_ResetBits PORT_SIG_MOT2P PIN_SIG_MOT2P   GPIO_ResetBits PORT_SIG_MOT2M PIN_SIG_MOT2M   GPIO_ResetBits PORT_SIG_MOT3P PIN_SIG_MOT3P   GPIO_ResetBits PORT_SIG_MOT3M PIN_SIG_MOT3M   GPIO_ResetBits PORT_SIG_MOT4P PIN_SIG_MOT4P   GPIO_ResetBits PORT_SIG_MOT4M PIN_SIG_MOT4M   GPIO_ResetBits PORT_SIG_MOT5P PIN_SIG_MOT5P   GPIO_ResetBits PORT_SIG_MOT5M PIN_SIG_MOT5M   GPIO_ResetBits PORT_SIG_MOT6P PIN_SIG_MOT6P   GPIO_ResetBits PORT_SIG_MOT6M PIN_SIG_MOT6M   GPIO_ResetBits PORT_LED_POWER  PIN_LED_POWER      while 1       GPIO_ResetBits PORT_ADC_SELECT0 PIN_ADC_SELECT0     GPIO_ResetBits PORT_ADC_SELECT1 PIN_ADC_SELECT1     mDelay 10        Start ADC1 ADC2 Software Conversion       ADC_SoftwareStartConvCmd ADC1  ENABLE     ADC_SoftwareStartConvCmd ADC2  ENABLE     mDelay 10     POT_1    ADC_GetConversionValue ADC1   gt gt2    POT_4    ADC_GetConversionValue ADC2   gt gt2    GPIO_SetBits PORT_ADC_SELECT0 PIN_ADC_SELECT0     GPIO_ResetBits PORT_ADC_SELECT1 PIN_ADC_SELECT1     mDelay 10        Start ADC1 ADC2 Software Conversion       ADC_SoftwareStartConvCmd ADC1  ENABLE     ADC_SoftwareStartConvCmd ADC2  ENABLE     mDelay 10     POT_2    ADC_GetConversionValue ADC1   gt gt2    POT_5    ADC_GetConversionValue ADC2   gt gt2    GPIO_ResetBits PORT_ADC_SELECT0 PIN_ADC_SELECT0     GPIO_SetBits PORT_ADC_SELECT1 PIN_ADC_SELECT1     mDelay 10        Start ADC1 ADC2 Software Conversion       ADC_SoftwareStartConvCmd ADC1  ENABLE     ADC_SoftwareStartConvCmd ADC2  ENABLE     mDelay 10     POT_3    ADC_GetConversionValue ADC1   gt gt2    POT_6    ADC_GetConversionValue ADC2   gt gt2    TxDWord16 POT_1     TxDByte_PC         TxDWord16 POT_2     TxDByte_PC         TxDWord16 POT_3     TxDByte_PC         TxDWord16 POT_4     TxDByte_PC         TxDWord16 POT_5     TxDByte_PC         TxDWord16 POT_6     TxDByte_PC         TxDByte_PC  r      TxDByte_PC  n      return 0  Result                  From any port the controller can read the position value of the servo motor  The range is from 0 to 0x03FF  The following illustration is with a servo motor in port 3                     IR SensorHere you can learn how t o use the ADC of external ports   Prepare          Connect the CM530 to the PC via USB cable       IR Sensor  Connected to the external sensor No 1         Theory                  The controller can change input analog signals into digital form  This example converts the motor’s analog position signal                             The ANALOG MUX  74HC4052D  blocks impedance and converts voltage from 5V to 3 3V       The ADX MUX circuit combines signal from ADC_SELECT0  and ADC_SELECT1 SIG_ADC0 selects a signal from ADC1  ADC2  or ADC3 and feeds it into the microcontroller SIG_ADC1 selects a signal from ADC4  ADC5  or ADC6 and feeds it into the microcontroller then this signal gets converted into digital       Refer to controller’s port for port and pin number in 08 IR SENSORAPPsrcmain c        Sourceint main void      System Clocks Configuration     RCC_Configuration       NVIC configuration     NVIC_Configuration       GPIO configuration     GPIO_Configuration    SysTick_Configuration       ADC configuration     ADC_Configuration    GPIO_ResetBits PORT_SIG_MOT1P PIN_SIG_MOT1P   GPIO_ResetBits PORT_SIG_MOT1M PIN_SIG_MOT1M     GPIO_ResetBits PORT_LED_POWER  PIN_LED_POWER      while 1       GPIO_SetBits PORT_SIG_MOT1P  PIN_SIG_MOT1P     GPIO_ResetBits PORT_SIG_MOT1M  PIN_SIG_MOT1M     GPIO_ResetBits PORT_ADC_SELECT0 PIN_ADC_SELECT0     GPIO_ResetBits PORT_ADC_SELECT1 PIN_ADC_SELECT1     uDelay 30        Start ADC1 ADC2 Software Conversion       ADC_SoftwareStartConvCmd ADC1  ENABLE       ADC_SoftwareStartConvCmd ADC2  ENABLE     uDelay 5     IR_1    ADC_GetConversionValue ADC1      GPIO_ResetBits PORT_SIG_MOT1P  PIN_SIG_MOT1P     GPIO_ResetBits PORT_SIG_MOT1M  PIN_SIG_MOT1M     TxDWord16 IR_1     TxDByte_PC  r      TxDByte_PC  n      mDelay 5     return 0  Result          Connect the IR sensor to port 1 and reading values ar displayed onscreen       Read Write DynamixelThe location of Dynamixel can be set and read   For more details refer to Dynamixel SDK   Prepare          The controller and Dynamixel are connected       This example is operated if the Dynamixel ID is 1         Theory          Dynamixel can be controlled by transmitting designated packet  The location of Dynamixel can be controlled using provided library       The microcontroller and Dynamixel comm are in USART channel 1      the diagram below show a circuit for Dynamixel comm for a halfduplex buffer               Refer to controller’s port for port and pin number in 09 DXL READ_WRITEAPPsrcmain c                      Sourceint main void      System Clocks Configuration     RCC_Configuration       NVIC configuration     NVIC_Configuration       GPIO configuration     GPIO_Configuration    SysTick_Configuration    dxl_initialize  0  1    USART_Configuration USART_PC  Baudrate_PC   TxDString nnDynamixel Read Write example for CM530nn      while 1       bMoving   dxl_read_byte  id  P_MOVING      CommStatus   dxl_get_result      if  CommStatus    COMM_RXSUCCESS            if  bMoving    0                   Change goal position        if  INDEX    0            INDEX   1        else          INDEX   0           Write goal position        dxl_write_word  id  P_GOAL_POSITION_L  GoalPos INDEX               PrintErrorCode           Read present position      wPresentPos   dxl_read_word  id  P_PRESENT_POSITION_L        TxDWord16 GoalPos INDEX        TxDString           TxDWord16 wPresentPos       TxDByte_PC  r        TxDByte_PC  n          else      PrintCommStatus CommStatus     return 0  Result          Dynamixel is moved back and forth in the disgnated location  and the current location is printed through terminal       Dynamixel Sync ControlMultiple Dynamixels can be controlled by synchronization   For more details refer to Dynamixel SDK   Prepare          The controller and Dynamixel are connected       This example is operated when the Dynamixel ID is designated from 1 to 3 in order         Theory          Dynamixel can be controlled by transmitting designated packet  The location of Dynamixel can be controlled using provided library       The microcontroller and Dynamixel comm are in USART channel 1      the diagram below show a circuit for Dynamixel comm for a halfduplex buffer               Refer to controller’s port for port and pin number in 10 DXL SYNC WRITEAPPsrcmain c                      Sourceint main void      System Clocks Configuration     RCC_Configuration       NVIC configuration     NVIC_Configuration       GPIO configuration     GPIO_Configuration    SysTick_Configuration    dxl_initialize  0  1    USART_Configuration USART_PC  Baudrate_PC   TxDString nnDynamixel SyncWrite example for CM530nn   for  i 0 i ltNUM_ACTUATOR i          id i    i 1       Set goal speed  dxl_write_word  BROADCAST_ID  P_GOAL_SPEED_L  0       Set goal position  dxl_write_word  BROADCAST_ID  P_GOAL_POSITION_L  AmpPos    mDelay 1000      while 1          Make syncwrite packet    dxl_set_txpacket_id BROADCAST_ID     dxl_set_txpacket_instruction INST_SYNC_WRITE     dxl_set_txpacket_parameter 0  P_GOAL_POSITION_L     dxl_set_txpacket_parameter 1  2     for  i 0 i ltNUM_ACTUATOR i              dxl_set_txpacket_parameter 2 3 i  id i        dxl_set_txpacket_parameter 2 3 i 1  dxl_get_lowbyte GoalPos        dxl_set_txpacket_parameter 2 3 i 2  dxl_get_highbyte GoalPos        TxDByte_PC  r        TxDByte_PC  n        TxDWord16 GoalPos         dxl_set_txpacket_length  2 1  NUM_ACTUATOR 4     dxl_txrx_packet      CommStatus   dxl_get_result      if  CommStatus    COMM_RXSUCCESS        PrintErrorCode      else      PrintCommStatus CommStatus     GoalPos    100    if  GoalPos  gt MAX_POSITION        GoalPos   MAX_POSITION    mDelay CONTROL_PERIOD     return 0  Result          Multiple Dynamixels are moved back and forth in the designated location  and the current location is printed through terminal       RC100 ZIGBEEThe controller can be operated using RC100   Prepare          CM530      One pair of Zig100 110      RC100        Theory          The controller can be controlled by RC100 remote controller equipped with Zig 100               The microcontroller and RC100 comm are in USART channel 5                    The diagram above show Zigbee’s connector and power supply circuit       Refer to controller’s port for port and pin number in  11 RC100 ZIGBEEAPPsrcmain c        Sourceint main void      System Clocks Configuration     RCC_Configuration       NVIC configuration     NVIC_Configuration       Configure the GPIO ports     GPIO_Configuration    SysTick_Configuration    zgb_initialize 0   USART_Configuration USART_PC  57600   GPIO_ResetBits PORT_LED_POWER  PIN_LED_POWER      while 1       if zgb_rx_check      1           RcvData   zgb_rx_data        TxDWord16 RcvData       TxDByte_PC  r        TxDByte_PC  n        if RcvData  amp RC100_BTN_1         GPIO_ResetBits PORT_LED_MANAGE  PIN_LED_MANAGE       else        GPIO_SetBits PORT_LED_MANAGE  PIN_LED_MANAGE       if RcvData  amp RC100_BTN_2         GPIO_ResetBits PORT_LED_PROGRAM  PIN_LED_PROGRAM       else        GPIO_SetBits PORT_LED_PROGRAM  PIN_LED_PROGRAM       if RcvData  amp RC100_BTN_3         GPIO_ResetBits PORT_LED_PLAY  PIN_LED_PLAY       else        GPIO_SetBits PORT_LED_PLAY  PIN_LED_PLAY         return 0  Result          If Zigbee is connected normally  LEDs are turned on and off whenever the buttons of RC100 is pressed       ",
      "url": "http://0.0.0.0:4000/docs/en/software/sdk/embedded_c_cm530/"
      } ,
  
  
      "docs-en-software-sdk-zigbee-sdk":  {
      "title": "ZIGBEE SDk",
      "content"	 : "   Introduction   introduction Zigbee SDK is a standard programming library to develop S W communicates with RoboPlus Task with RoboPlus Task code  The characteristics of Zigbee SDK are as below  It has outstanding portability in each platform since written in C language  It is easy to perform platform porting since it is written in both platform independent and dependent sources  The interface is standardized thus  the developed software can be used again even if the controller is different    API Reference   apireference    Device Control MethodFunctions to control the communication devices     zgb_initialize   zgbinitialize It initializes the communication devices and makes ready status     cint zgb_initialize    int devIndex            Parameters devIndex  It is the number of currently connected communication devices   It may vary depending on each platform      For example  Windows distinguishes devices by COM port       Return Values If the value is 1  it means success if the value is 0  it means failure       ExampleIt shows how to initialize in Windows environment using COM3 port    c define DEFAULT_PORTNUM 3      COM3 int result result    dxl_initialize  DEFAULT_PORTNUM  if  result    1        Succeed to open Zig2Serialelse if  result    0       Failed to open Zig2Serial        zgb_terminate   zgbterminate It terminates the communication devices     cvoid zgb_terminate          Parameters None      Return Values None      Example   czgb_terminate          Communication Method   communicationmethod Functions to transmit and receive the packet     zgb_tx_data   zgbtxdata It initializes the communication devices and makes ready status    c int zgb_tx_data    int data             Parameters data  The data values to be transmitted  If it has the effects of controlling with RC100  the button value declared in advance can be used  Value Name Contents     1 RC100_BTN_U Pressed value U Button  2 RC100_BTN_D Pressed value D Button  4 RC100_BTN_L Pressed value L Button  8 RC100_BTN_R Pressed value R Button  16 RC100_BTN_1 Pressed value Button 1  32 RC100_BTN_2 Pressed value Button 2  64 RC100_BTN_3 Pressed value Button 3  128 RC100_BTN_4 Pressed value Button 4  256 RC100_BTN_5 Pressed value Button 5  512 RC100_BTN_6 Pressed value Button 6       Return Values If the value is 1  it means success if the value is 0  it means failure       Example   cint TxData int result TxData   1   result   zgb_tx_data TxData    if  result    0         Failed to transmit    else if  result   1         Succeed to transmit         zgb_rx_check   zgbrxcheck It checks whether the data is arrived to the communication devices or not     cint zgb_rx_check           Parameters None      Return Values If the value is 1  there is a received data if the value is 0  there is no received data       Example   cint resutresult   zgb_rx_check  if  result    1       Succeed to data recievedelse if  result    0       Failed to data recieved        zgb_rx_data   zgbrxdata It receives data from the communication devices   First of all  the data reception must be chacked using zgb_rx_check in order to receive the latest data    c int zgb_rxdata            Parameters None      Return Values The most recently received data value     The button value declared in advance can be used to receive the button values from RC100  Value Name Contents     1 RC100_BTN_U Pressed value U Button  2 RC100_BTN_D Pressed value D Button  4 RC100_BTN_L Pressed value L Button  8 RC100_BTN_R Pressed value R Button  16 RC100_BTN_1 Pressed value Button 1  32 RC100_BTN_2 Pressed value Button 2  64 RC100_BTN_3 Pressed value Button 3  128 RC100_BTN_4 Pressed value Button 4  256 RC100_BTN_5 Pressed value Button 5  512 RC100_BTN_6 Pressed value Button 6       Example   cint RxData if zgb_rx_check      1      Get data verified  RxData   zgb_rx_data        Platform Porting   platformporting Zigbee SDK provides sources so that the users can perform porting to various platforms   Download ZIGBEE Porting SDK  http  support robotis com en baggage_files zigbee_sdk zigbee_sdk_porting_v1_00 zip    The Structure of Source Platformindependent Source    Platformindependent source is written in standard C language so as to be compiled in all C language compilers without H Wdependent routine    In this source  only the protocolrelated contents are actualized to make instruction packet and analyze status packet   The users  if there is no specific case  do not have to modify the contents of source    Related Source File zigbee h  zigbee c   Necessary File for Build zgb_hal h  zgb_hal c Platformdependent Source    Platformdependent Source must include H Wdependent routine in order to be actually operated in the controller   If the users want to use Zigbee SDK in other unsupported platforms  the source must be modified    Related Source File zgb_hal h  zgb_hal c If you want to do Porting  you must actualize the following functions depending on each platform  zgb_hal_open zgb_hal_close zgb_hal_tx zgb_hal_rx    zgb_hal_open   zgbhalopen It actualizes the available routine by initializing the communication devices   zgb_initialize activates the communication devices through  zgb_hal_open     cint zgb_hal_open    int devIndex  float baudrate           Parameters devIndex  It is the number of currently connected communication devices   It may vary pursuant to each platform   For example  Windows distinguishes devices by COM Port  baudrate  It is the actual baudrate value      Return Values The function returnes 1  if it is successful otherwise   it returns 0     zgb_hal_close   zgbhalclose It actualizes the routine that let other application programs use by terminating the communication devices   zgb_terminate terminates the communication devices through this function    cvoid zgb_hal_close           Parameters None     Return Values None    zgb_hal_tx   zgbhaltx It actualizes the routine that transmits packet through the communication devices     cint zgb_hal_tx    unsigned char  pPacket  int numPacket          Parameters pPacket  The pointer of the line includes the data to be trasmitted numPacket  The number of data to be transmitted     Return Values It returns the number of data actually transmitted     zgb_hal_rx   zgbhalrx It actualizes the routine that takes out packet from the received buffers of the communication devices     cint zgb_hal_rx    unsigned char  pPacket  int numPacket           Parameters pPacket  The pointer of the line to save takenout data numPacket  The number of data to be taken out     Return Values It returns the number of data actually taken out    ZIG2Serial   zig2serial    For Windows  Download ZIG2Serial SDK for 32bit Windows  http  support robotis com en baggage_files zigbee_sdk zigbee_sdk_win32_v1_02 zip   Download ZIG2Serial SDK for 64bit Windows  http  support robotis com en baggage_files zigbee_sdk zigbee_sdk_win64_v1_02 zip      System Requirements OS  Windows XP Vista 7  32 64bit  Zig2Serial is required In case DLL loading is not available   Needs to install Microsoft Visual C   2005 redistribution package    Composing Folder  bin  DLL files for Windows are included   import  Necessary files for programming are included   src  DLL sources are included   example  Examples to control Zigbee for users  programming environment are included      Setting Environment VariablesIf you want to execute a program developed by Zigbee SDK  zigbee dll is required   zigbee dll is included in bin folder of Zigbee SDK   If you register the location of zigbee dll as an environment variable for Windows  dll is not necessary when the program is executed   If you do not want to register the location of dll as environment variables  the program and dll must be distributed together  1  If you go into Control Panel  System   Advanced  you can find Environment Variables button as below          assets images sw sdk zig2serial_sdk_014 png  2  Find Path category in System Variables  and then click Edit button          assets images sw sdk zig2serial_sdk_015 png  3  As the example below  add bin folder with semicolon to the end of existing variable values    Please be careful not to change or delete the existing variable values    The example shows the things are added  assuming the location of DLL file is CProjectbin          assets images sw sdk zig2serial_sdk_016 png    For Linux  Download ZIG2Serial SDK for Linux  http  support robotis com en baggage_files zigbee_sdk zigbee_sdk_linux_v1_00 zip      System Requirements OS  Over Linux Kernel 2 6 21 is recommended USB2Dynamixel and  Zig2Serial are required     Composing Folder  include   Header file for Zigbee SDK is included   src  Zigbee SDK source file is included   lib  Compiled library file is included   example  Examples to control Zigbee are included      Zigbee SDK BuildIf library is built by make command in ZigbeeSDK src folder  it is automatically copied to ZigbeeSDK lib     Visual C     visualc This is an example for Visual C    This example has been tested in Visual Studio 2005     Setting EnvironmentThe environment must be set in C   to execute the examples      Registering the PathThe location of Zigbee SDK must be registered in Visual Studio  1  Select Tools   Options in the menu          assets images sw sdk zig2serial_sdk_001 png  2  Click Project   Solution   VC   Directory          assets images sw sdk zig2serial_sdk_002 png  3  Change the Directory mark of the next file part as Include File  and then add the ZigbeeSDKinstalled folder by clicking the icon where 2 is marked   For example  CZigbeeSDKimport          assets images sw sdk zig2serial_sdk_003 png  4  Change the Directory mark of the next file part as Library File  and then add the ZigbeeSDKinstalled folder by clicking the icon where 2 is marked   For Example  CZigbeeSDKimport          assets images sw sdk zig2serial_sdk_004 png       Using Zigbee SDK1  Include Header file  Add  include zigbee h on source file 2  Include Library file  Add  pragma comment lib  zigbee lib  on source file  or add zigbee lib on the module of Link tap s input in project characteristics 3  Use functions Call the necessary functions from the source   Please refer to API Reference on the usage of each function      assets images sw sdk zig2serial_sdk_005 png     Send Receive Example     PreparationUsed Zigbee modules are set to 11 communication for each other   Download tsk file appropriate to the controller type so that the controller can respond   Download CM100_Echo tsk  http  support robotis com en baggage_files zigbee_sdk cm100_echo tsk   Download CM5_Echo tsk  http  support robotis com en baggage_files zigbee_sdk cm5_echo tsk   Download CM510_Echo tsk  http  support robotis com en baggage_files zigbee_sdk cm510_echo tsk   Download CM700_Echo tsk  http  support robotis com en baggage_files zigbee_sdk cm700_echo tsk       Source      Initialization   c   Open deviceif  zgb_initialize DEFAULT_PORTNUM     0    printf  Failed to open Zig2Serial n  else  printf  Succeed to open Zig2Serial n     The source above checks whether the initialization is done properly or not   Since the initialization is succeeded  1 is returned and if it is failed  0 is returned  the failed source is included in If sentence  and the succeeded source goes to Else sentence zgb_initialize is called from Zigbee API   DEFAULT_PORTNUM means the number of a connected device   DEFAULT_PORTNUM must be set depending on the user s system status  and it is originally set to COM3        Termination   c   Close devicezgb_terminate     The source above terminates communication with the controller s communication device  zgb_terminate is called from Zigbee API        Tramsmitting Pakcet   cif  zgb_tx_data TxData     0   printf  Failed to transmitn     The source above makes Zigbee module to transmit the packet to the controller   Using zgb_tx_data function among Zigbee API  the users transmit packets and the results are returned   If the returned value is 1  the transmission is successful  and if it is 0  it means transmission failure   TxData means the value users transmit to the controller        Receiving Packet   cfor  i 0 i  Existing Category by clicking the right button of the mouse on the Projct File name           assets images sw sdk zig2serial_sdk_006 png  2  Add zigbee vb file   zigbee vb is in the import folder where ZigbeeSDK is saved   For example  CZigbeeSDKimportzigbee vb          assets images sw sdk zig2serial_sdk_007 png  3  Check whether the zigbee vb is added or not          assets images sw sdk zig2serial_sdk_008 png  4  Use ZigbeeAPI functions  Please refer to API Reference on the usage of each function          assets images sw sdk zig2serial_sdk_009 png     Send Receive Example     PreparationUsed Zigbee modules are set to 11 communication for each other  Download tsk file appropriate to the controller type so that the controller can respond   Download CM100_Echo tsk  http  support robotis com en baggage_files zigbee_sdk cm100_echo tsk   Download CM5_Echo tsk  http  support robotis com en baggage_files zigbee_sdk cm5_echo tsk   Download CM510_Echo tsk  http  support robotis com en baggage_files zigbee_sdk cm510_echo tsk   Download CM700_Echo tsk  http  support robotis com en baggage_files zigbee_sdk cm700_echo tsk       Source      Initialization   code  Open device        If  zgb_initialize DEFAULT_PORTNUM    0  Then            Console WriteLine Failed to open Zig2Serial              Exit Sub        Else            Console WriteLine Succeed to open Zig2Serial          End If   The source above checks whether the initialization is done properly or not   Since the initialization is succeeded  1 is returned and if it is failed  0 is returned  the failed source is included in If sentence  and the succeeded source goes to Else sentence   zgb_initialize is called from Zigbee API   DEFAULT_PORTNUM means the number of a connected device   DEFAULT_PORTNUM must be set depending on the user s system status  and it is originally set to COM3        Termination   code Close devicezgb_terminate     The source above terminates communication with the controller s communication device  zgb_terminate is called from Zigbee API        Transmitting Packet   codeIf  zgb_tx_data TxData    0  Then                Console WriteLine Failed to transmit End If   The source above makes Zigbee module to transmit the packet to the controller   Using zgb_tx_data function among Zigbee API  the users transmit packets and the results are returned   If the returned value is 1  the transmission is successful  and if it is 0  it means transmission failure   TxData means the value users transmit to the controller        Receiving Packet   code For i   1 To TIMEOUT_TIME                 Verify data recieved                If  zgb_rx_check     1  Then                     Get data verified                    RxData   zgb_rx_data                      Console WriteLine Recieved    RxData                        Exit For                End If                Sleep 1 Next i              The source above makes Zigbee module to receive the packet from the controller   Using zgb_rx_check function  the users can check whether the packet is received or not   If the returned value is 1  the reception is successful  and if it is 0  it means reception failure   If the packet is received  if the returned value is 1   using zgb_rx_data function  the received data is saved in RxData variable   If the packet is not received  it spins the loop as long as the Timeout_Time using Sleep   function after providing the delay time of 1ms   TIMEOUT_TIME is initially set to 1000  and the packet is waited for 1 second in this example source     Visual C    visualc  This is an example for Visual C   This example has been tested in Visual Studio 2005     Setting EnvironmentThe environment must be set in Visual C  to execute the examples      Using Zigbee SDK1  In the Solution Browser  select Add   Existing Category by clicking the right button of the mouse on the Project File name          assets images sw sdk zig2serial_sdk_010 png 2  Add Zigbee cs file   Zigbee cs is in the import folder where ZigbeeSDK is saved   For example  CZigbeeSDKimportZigbee cs          assets images sw sdk zig2serial_sdk_011 png  3  Check whether the Zigbee cs is added or not          assets images sw sdk zig2serial_sdk_012 png  4  Add using ROBOTIS  and then use ZigbeeAPI funcitons  Please refer to API Reference on the usage of each function           assets images sw sdk zig2serial_sdk_013 png      Send_Receive     PreparationUsed Zigbee modules are set to 11 communication for each other  Download tsk file appropriate to the controller type so that it can respond   Download CM100_Echo tsk  http  support robotis com en baggage_files zigbee_sdk cm100_echo tsk   Download CM5_Echo tsk  http  support robotis com en baggage_files zigbee_sdk cm5_echo tsk   Download CM510_Echo tsk  http  support robotis com en baggage_files zigbee_sdk cm510_echo tsk   Download CM700_Echo tsk  http  support robotis com en baggage_files zigbee_sdk cm700_echo tsk       Source      Initialization   c   Open deviceif  zigbee zgb_initialize DEFAULT_PORTNUM     0   printf  Failed to open Zig2Serial n  else  printf  Succeed to open Zig2Serial n     The source above checks whether the initialization is done properly or not   Since the initialization is succeeded  1 is returned and if it is failed  0 is returned  the failed source is included in If sentence  and the succeeded source goes to Else sentence   zgb_initialize is called from Zigbee API   DEFAULT_PORTNUM means the number of a connected device   DEFAULT_PORTNUM must be set depending on the user s system status  and it is originally set to COM3        Termination   c   Close devicezigbee zgb_terminate     The source above terminates communication with the controller s communication device  zgb_terminate is called from Zigbee API        Transmitting Packet   cif  zigbee zgb_tx_data TxData     0   Console WriteLine Failed to transmit    The source above makes Zigbee module to transmit the packet to the controller   Using zgb_tx_data function among Zigbee API Functions  the users transmit packets and the results are returned   If the returned value is 1  the transmission is successful  and if it is 0  it means transmission failure   TxData means the value users transmit to the controller        Receiving Packet   cfor  i 0 i  to source file 2  Call functions  Call necessary functions for the source   Please refer to API Reference on the usage of each function      Send Receive Example     PreparationZig2Serial and ZIG100 must be connected to USB2Dynamixel   Also  there must be the controller or other communication device which can communicatte with ZIG100 communication module connected to Zig2Serial      Source      Initialization   cif  zgb_initialize DEFAULT_DEVICEINDEX     0  printf  Failed to open Zig2Serial n  printf  Press any key to terminate   n  getchar  return 0elseprintf  Succeed to open Zig2Serial n     The source above checks whether the initialization is done properly or not   Since the initialization is succeeded  1 is returned and if it is failed  0 is returned  the failed source is included in If sentence  and the succeeded source goes to Else sentence   zgb_initialize is called from zigbee API   DEFAULT_DEVICEINDEX is the device index of Linux communication devices the basic value is 1   DEFAULT_DEVICEINDEX must be set appropriately to the users  status   Baud Rate is fixed to 57600        Termination   c   Close devicezgb_terminate     The source is for termination  The connection is terminated by calling zgb_teminate function from zigbee API        Transmitting Data   c   Wait user s inputprintf  Input number to transmit   if scanf %d   TxData     Transmit dataif zgb_tx_data TxData     0 printf  Failed to transmitn     The source above is to transmit the inputted values by users through zigbee  zgb_tx_data function is called form zigbee API        Receiving Data   cfor  i 0 i   TIMEOUT_TIME i        Verify data recieved  if zgb_rx_check      1          Get data verified    RxData   zgb_rx_data      printf  Recieved %dn  RxData      break    sleep 1    The source above is to receive data before the set TIMEOUT  zgb_rx_check and  zgb_rx_data functions are called from zigbee API    CM510 700   cm510700 Zigbee SDK for CM510 700 is included in Embedded C   Please refer to  RC100 and ZigBee  RC100 and ZigBee     ",
      "url": "http://0.0.0.0:4000/docs/en/software/sdk/zigbee_sdk/"
      } ,
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
}
