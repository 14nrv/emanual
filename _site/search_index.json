{
  
  
      "404-html":  {
      "title": "",
      "content"	 : "Sorry  but the page you were trying to view does not exist — perhaps you can try searching for it above ",
      "url": "http://emanual.robotis.com/404.html"
      } ,
  
  
      "docs-kr-software-rplus2-manager-advanced":  {
      "title": "R+Manager 2.0",
      "content"	 : "고급 기능XM XH 시리즈 사용전 준비XM XH 시리즈를 R Task2 0이나 R Motion2 0에서 사용하기 위해서는 두 가지 사전준비를 거쳐야 합니다 H W 준비하기      아래 그림처럼 OpenCM9 04과 XM시리즈 외에 OpenCM 485 EXP 보드 가 필요합니다         아래 3가지를 케이블로 연결합니다   Dynamixel Channel 설정하기      R  Manager 2 0을 실행하여 Dynamixel2 0 제품을 선택한 후  업데이트  amp 테스트 메뉴를 실행합니다         OpenCM9 04에 LN-101 또는 BT-210 혹은 BT-110 을 사용하여 PC와 연결한 후  OpenCM 485 EXP의 전원을 켭니다       안내에 따라 제품을 검색하면 OpenCM9 04가 검색됩니다   처음에는 OpenCM9 04의 Dynamixel Channel 값이 Default로 설정되어 있어 XM XH시리즈가 검색되지 않습니다          제품을 업데이트하는 과정을 거치면 컨트롤 테이블이 실행됩니다       컨트롤 테이블 항목에서 Dynamixel Channel 값을 EXP Board로 설정한 후 저장합니다         설정이 완료되면 컨트롤 테이블 창을 닫고  OpenCM 485 EXP의 전원을 껐다가 켭니다  이때  재부팅되면서 OpenCM9 04의 미니 TTL버스가 비활성화되고 OpenCM 485 EXP의 다이나믹셀 버스가 활성화 됩니다        업데이트  amp 테스트 메뉴를 다시 실행하여 XM XH시리즈가 정상적으로 검색되는지 확인합니다         설정이 완료되면 R  Task 2 0과 R  Motion 2 0에서 XM XH 시리즈를 사용할 수 있게 됩니다  R  Task 2 0 v2 1 0  R  Motion 2 0 v2 4 0 이상 버전에서 지원 컨트롤 아이템 값 변경      마우스 왼쪽 버튼 드래그로 변경하기  값을 크게 변경할 때 사용합니다              마우스 휠로 변경하기  값을 조금 키우거나 줄일 때 사용합니다              키보드 방향키로 변경하기  값을 미세하게 키우거나 줄일 때 사용합니다              값 직접 입력하기  간단한 연산 식 덧셈  뺄셈 의 입력이 가능합니다        펌웨어 정보 확인제품의 펌웨어 버전  배포일  업데이트 노트를 확인하는 기능입니다   홈 탭으로 이동한 후  펌웨어 정보를 확인할 제품을 선택합니다       우측 상단의 펌웨어 정보 버튼을 클릭합니다             선택된 제품의 펌웨어 버전  배포일  업데이트 노트를 확인할 수 있습니다       블루투스로 펌웨어 관리하기BT-210  BT-110을 이용하면 무선으로 펌웨어 관리를 진행하실 수 있습니다   BT-410의 경우 무선 펌웨어 관리 기능을 제공하지 않습니다  다음 설명에 따라 블루투스 시리얼 포트를 추가하세요   Windows10 기준   제어기에 BT-210 또는 BT-110 을 연결하고 제어기의 전원을 켭니다       윈도우 시작 버튼을 클릭한 후  설정 메뉴를 클릭합니다             장치 메뉴를 클릭합니다          좌측의 Bluetooth를 선택한 후  Bluetooth 장치를 켭니다       검색된 블루투스 모듈을 찾아 선택한 후  연결 버튼을 클릭합니다             장치 암호입력란에 0000을 입력한 후  다음 버튼을 클릭합니다              페어링이 완료되면 페어링된 장치를 선택한 후  하단의 추가 Bluetooth 옵션을 클릭합니다             COM 포트 탭을 클릭한 후  송신 포트의 포트 번호를 확인합니다   아래 그림에서는 COM7              R  Manager 2 0에서 설치된 블루투스 포트를 선택하면 무선으로 관리 기능을 사용할 수 있습니다       ",
      "url": "http://emanual.robotis.com/docs/kr/software/rplus2/manager/advanced/"
      } ,
  
  
      "docs-en-software-opencm-ide-api-reference":  {
      "title": "OpenCM IDE",
      "content"	 : "API ReferencesEEPROM ClassThe STM32 micro-processor of OpenCM9 04 will read and write user data directly on the flash memory Flash memory reads and writes by unit of a page so the EEPROM Class can be used to permanently save user data by unit of bytes Flash memory also preserves its data even if the power is turned off From the total of 128Kbyte of flash memory of the OpenCM9 04  the EEPROM Class can only use 2Kbyte  0x0801F800 0x08001FFFF   2Kbyte corresponds to 2 Pages class EEPROMThis is the EEPROM Class  and since it is not predefined you need to create an instance variable in order to use it void EEPROMbegin  Performs initialization for the access of the flash memory  In order to use EEPROM this must be performed in setup   uint16 EEPROMwrite int vAddress  int data This is the method used to write on the 2kbyte of EEPROM field assigned to the flash memory of STM32  EEPROM data is composed as an address-data pair  The address uses an unsigned integer value of 2 bytes arbitrarily and saves them in order   vAddress  A virtual address value composed of an unsigned integer value of 2 bytes  Access is made by vAddress when reading data   data  2byte data to be saved in the virtual address vAddress  int EEPROMread int vAddress Reads and returns the data saved in the virtual address vAddress void EEPROMerase int page Erases EEPROM by unit of a page 1Kbyte  void EEPROMeraseAll  Erases all the pages of EEPROM ExampleAn instance variable of the EEPROM Class has to be defined in order to use the EEPROM memory  It is provided in the form of a library so it is necessary to write  include EEPROM h  include EEPROM hEEPROM myEEPROM include EEPROM hEEPROM myEEPROMvoid setup      myEEPROM begin    for int i 0i  lt 10i       myEEPROM write i i 2      write i 2 to virtual address 0 9  void loop   for int i 0i  lt 10i       SerialUSB print EEPROM Example        SerialUSB println myEEPROM read i       read data from virtual address 0 9  BKP ClassThe STM32 micro-processor of OpenCM9 04 contains ten Backup Register BKP  memories of 16bit each that can save user data The Backup Register memory preserves the data as long as the power is maintained so even if the processor is restarted by a hard or soft reset the data will be preserved However completely removing the power will make the data disappear  The BKP memory is very useful when using data from previous operational conditions even after a system reset class BKPThis is the BKP Backup Register  Class  and since it is not predefined you need to create an instance variable in order to use it void BKPbegin  Set up a BKP object for controlling backup register  This method must be called before attempting to use the BKP object  typically  you call this in your setup   function  uint16 BKPwrite uint8 reg  uint16 wData This is the method used to save 2byte 16bit  data on the Backup Register   reg  This is the Backup Register address and a value between 1 and 10 can be used   wData  This signifies the 2byte 16bit  data to be saved in the Backup Register void BKP write uint8 reg  uint8 bData This is the method used to save a 1byte data on the Backup Register   reg  This is the Backup Register address and a value between 1 and 10 can be used   bData  This signifies a 1byte 8bit  data to be saved in the Backup Register void BKP write uint8 reg  int wData This is the method used to save an Integer 4byte  data on the Backup Register  It does not save the whole of the 4bytes but rather only the low-order 2bytes  so you must be cautious of data loss   reg  This is the Backup Register address and a value between 1 and 10 can be used   wData  This signifies a Integer data to be saved in the Backup Register void BKPenable  You must use enable   in order to write data in the Backup Register  However reading data can be done regardless of the use of enable   void BKPdisable  You must use disable   after you are done writing in the Backup Register  Again  reading data can be done regardless of the use of disable   ExampleAn instance variable of the BKP Class has to be defined in order to use the BKP memory  It is provided in the form of a library so it is necessary to write  include BKP h  include BKP hBKP BKP_MEMORYYou must use the enable   method to activate the Backup Register in order to have write access to the BKP memory  After you finish with the write access you must use the disable   method to deactivate the Backup Register  You can use the read   method to read data regardless of the use of enable   or disable   void setup       Initialize clock and registers for BKP    BKP_MEMORY begin       If you want to write data to BKP registers  you need to execute enable method     BKP_MEMORY enable    for i 1 i lt11i       BKP_MEMORY write i i 10   CM-900 and CM-904 has only 1 10 BKP registers 16-bit        After writing data  must be disabled writing data to BKP Register  BKP_MEMORY disable  void loop   for i 1 i lt11i          You can check the data written in setup   using SerialUSB      SerialUSB print BKP Memory example           Just to read data from BKP  pass BKP register number 1 10  to read   method       SerialUSB println BKP_MEMORY read i    RC100 ClassThis is a Class that facilitates the use of RC100 in OpenCM9 04 and CM-900  It can be operated in two modes as shown below   Remote control using Zigbee or Bluetooth  Remote control using InfraredEach button of the RC100 is already defined as shown below  making them convenient to use  define RC100_BTN_U        1  define RC100_BTN_D        2  define RC100_BTN_L         4  define RC100_BTN_R        8  define RC100_BTN_1        16  define RC100_BTN_2        32  define RC100_BTN_3        64  define RC100_BTN_4        128  define RC100_BTN_5        256  define RC100_BTN_6        512 class RC100This is the RC100 Class  and since it is not predefined you need to create an instance variable in order to use it void RC100begin int num Initializes Serial2 in order to use the RC100   num  Decides the operation mode of RC100  When set to 1 it will operate by Zigbee or Bluetooth wireless module  and when set to 2 it will operate by Infrared wireless module void RC100end void Finishes the use of devices of the RC100 Class  It disables the Serial2 device int RC100available  If there is a received data from the RC100  then it returns the number of bytes of the received data int RC100readData  Returns the analyzed data of the received data packet int RC100writeData int data Sends a packet data to the RC100  The RC100 cannot receive data so it is used when exchanging data in RC100 packets with a PC or smart device void RC100writeRaw byte temp Sends raw data as it is  not as a packet data byte RC100readRaw void Receives raw data as it is without packet analysis ExampleAn instance variable of the RC100 Class has to be defined in order to use the RC100 Class  It is provided in the form of a library so it is necessary to write  include RC100 h  include RC100 hRC100 ControllerAs with the Serial device  you use the available   method to detect whether there is any received data and then use the readData   method to receive the real data that has been processed from the received packet data  include  ltRC100 h gtRC100 Controller define WIRELESS_MODE    1 define IR_MODE          2void setup      pinMode BOARD_LED_PIN  OUTPUT   Controller begin IR_MODE     RC100 init as IR modeint RcvData  0void loop   if Controller available         RcvData   Controller readData      패킷 데이터를 분석한 실제 데이터를 받아온다       SerialUSB print RcvData          SerialUSB println RcvData       if RcvData  amp RC100_BTN_1       digitalWrite BOARD_LED_PIN LOW     RC100의 버튼1을 누르면 Status LED ON      delay 100      digitalWrite BOARD_LED_PIN HIGH InterruptattachInterrupt  Used to specify a function to call when an external interrupt occurs void attachInterrupt uint8 pin  voidFuncPtr handler  ExtIntTriggerMode mode Registers an interrupt handler on a pin  The interrupt will be triggered on a given transition on the pin  as specified by the mode parameter  The handler runs in interrupt context  The new handler will replace whatever handler is currently registered for the pin  if any Parameters  pin  OpenCM GPIO pin number   handler  Function to run upon external interrupt trigger  The handler should take no arguments  and have void return type   mode  Type of transition to trigger on  e g  falling  rising  etc   ExtIntTriggerMode enum  The kind of transition on an external pin which should trigger an interrupt           RISING  To trigger an interrupt when the pin transitions LOW to HIGH       FALLING  To trigger an interrupt when the pin transitions HIGH to LOW       CHANGE  To trigger an interrupt when the pin transitions from LOW to HIGH or HIGH to LOW  i e   when the pin changes        Note You should set the pin mode of your desired pin to an input mode  e g  INPUT  INPUT_PULLUP  INPUT_PULLDOWN   Because the function will run in interrupt context  inside of it  delay   won’t work  and the value returned by millis   will not increment  Serial data received while in the function may be lost  You should declare as volatile any global variables that you modify within the attached function Return Values  NoneExampleThe following example blinks the LED any time pin 0 changes from HIGH to LOW or vice versa volatile int state   LOW    must declare volatile  since it s                             modified within the blink   handlervoid setup       pinMode BOARD_LED_PIN  OUTPUT     pinMode 0  INPUT     attachInterrupt 0  blink  CHANGE void loop       digitalWrite BOARD_LED_PIN  state void blink       if  state    HIGH          state   LOW     else     state must be LOW        state   HIGH    In this example  the function blink   is the interrupt handler  Whenever the state on pin 0 changes  blink   gets called It reacts to the change by changing the state variable to LOW if it is HIGH  and to HIGH if it is LOW  It then exits letting the board get back to calling loop    Since loop   sets the LED pin to whatever state is  changing the voltage on pin 0 will toggle the LED Serial  SerialUSB attachInterrupt methodYou can attach a user interrupt using the attachIntterupt method in Serial1 2 3 and SerialUSB void HardwareSerialattachInterrupt voidFunctionPtrUart handler Attach user interrupt to Serial devices  ROBOTIS implementedtypedef void   voidFuncPtrUart  byte  void HardwareSerialdetachInterrupt void Disable user interrupt to Serial devices  ROBOTIS implementedvoid USBSerialattachInterrupt voidFuncPtrUsb handler Attach user interrupt to USB peripheral typedef void   voidFuncPtrUsb  byte   byte  void USBSerialdetachInterrupt void Disable user interrupt to USB peripheral See  Serial  SerialUSBdetachInterrupt  Used to disable an interrupt specified with attachInterrupt   void detachInterrupt uint8 pin Parameters  pin  Number of pin to configureReturn Values  Noneinterrupts  Re-enables interrupts  after they’ve been disabled by noInterrupts     Interrupts allow certain important tasks to happen in the background  and certain interrupts are enabled by default Some functions will not work while interrupts are disabled  and both incoming and outgoing communication may be ignored Interrupts can slightly disrupt the timing of code  however  and may be disabled for particularly critical sections of code void interrupts  Parameters  NoneReturn Values  NoneExamplevoid setup   void loop     noInterrupts       critical  time-sensitive code here  interrupts       other code herenolnterrupts  Disables interrupts  Interrupts allow certain important tasks to happen in the background and are enabled by default Some functions will not work while interrupts are disabled  and incoming communication may be ignored Interrupts can slightly disrupt the timing of code  however  and may be disabled for particularly critical sections of code void noInterrupts  Parameters  NoneReturn Values  NoneExamplevoid setup   void loop     noInterrupts       critical  time-sensitive code here  interrupts       other code hereLicense and AttributionPortions of this page were adapted from the Maple Reference Documentation  which is released under aCreative Commons Attribution-ShareAlike 3 0 License GPIOpinMode  Configure behavior of a GPIO pin void pinMode uint8 pin  WiringPinMode mode Parameters  pin  Number of pin to configure   mode  Mode corresponding to desired pin behavior WiringPinMode enum            OUTPUT  Basic digital output when the pin is HIGH  the voltage is held at  3 3v  Vcc  and when it is LOW  it is pulled down to ground       OUTPUT_OPEN_DRAIN  In open drain mode  the pin indicates low by accepting current flow to ground and high by providing increased impedance  An example use would be to connect a pin to a bus line  which is pulled up to a positive voltage by a separate supply through a large resistor   When the pin is high  not much current flows through to ground and the line stays at positive voltage when the pin is low  the bus drains to ground with a small amount of current constantly flowing through the large resistor from the external supply  In this mode  no current is ever actually sourced from the pin       INPUT  Basic digital input  The pin voltage is sampled when it is closer to 3 3v  Vcc  the pin status is high  and when it is closer to 0v  ground  it is low  If no external circuit is pulling the pin voltage to high or low  it will tend to randomly oscillate and be very sensitive to noise  e g   a breath of air across the pin might cause the state to flip        INPUT_ANALOG  This is a special mode for when the pin will be used for analog  not digital  reads  Enables ADC conversion to be performed on the voltage at the pin       INPUT_PULLUP  The state of the pin in this mode is reported the same way as with INPUT  but the pin voltage is gently pulled up towards  3 3v  This means the state will be high unless an external device is specifically pulling the pin down to ground  in which case the gentle pull up will not affect the state of the input       INPUT_PULLDOWN  The state of the pin in this mode is reported the same way as with INPUT  but the pin voltage is gently pulled down towards 0v This means the state will be low unless an external device is specifically pulling the pin up to 3 3v  in which case the gentle pull down will not affect the state of the input       INPUT_FLOATING  Synonym for INPUT       PWM  This is a special mode for when the pin will be used for PWM output  a special case of digital output        PWM_OPEN_DRAIN  Like PWM  except that instead of alternating cycles of LOW and HIGH  the voltage on the pin consists of alternating cycles of LOW and floating  disconnected        Return Values  NoneExampleThis example uses pinMode   to set up the pin connected to the built-in LED as an output  Once this is done digitalWrite   can be used to turn the pin HIGH and LOW  which turn the LED on and off void setup       pinMode BOARD_LED_PIN  OUTPUT          sets the LED pin as outputvoid loop       digitalWrite BOARD_LED_PIN  HIGH       sets the LED on    delay 1000                             waits for a second    digitalWrite BOARD_LED_PIN  LOW        sets the LED off    delay 1000                             waits for a secondArduino CompatibilityOn OpenCM  pinMode   supports the INPUT and OUTPUT modes in the same way as Arduino  however  remember that the OpenCM  as a 3 3V device  will only drive 3 3V to an OUTPUT pin that has been set HIGH  instead of 5V like on Arduino  INPUT_ANALOG and PWM modes were added because the OpenCM doesn’t separate the analog and digital pins the same way Arduino does Unlike on Arduino  you must call pinMode   to set up a pin for these purposes before a call to  e g   analogRead    This should only add a few lines to your setup   function digitalWrite  Write a HIGH or a LOW value to a pin configured as OUTPUT  The pin must have its mode set to OUTPUT or OUTPUT_OPEN_DRAIN  If the pin has been configured as an OUTPUT with pinMode   its voltage will be set to the corresponding value 3 3V for HIGH  and 0V  ground  for LOW void digitalWrite uint8 pin  uint8 value Parameters  pin  Pin to write to   value  Either LOW  write a 0  or HIGH  write a 1            see pinMode        Return Values  NoneSee Also  pinMode  링크   digitalRead 링크   BOARD_LED_PIN 링크   toggleLED    링크   togglePin    링크 ExampleThe following example sets the built-in LED pin to HIGH  makes a one-second-long delay  sets the pin back to LOW  and delays again  causing a blinking pattern  you could also use toggleLED   void setup     pinMode BOARD_LED_PIN  OUTPUT          sets the digital pin as outputvoid loop     digitalWrite BOARD_LED_PIN  HIGH       sets the LED on  delay 1000                             waits for a second  digitalWrite BOARD_LED_PIN  LOW        sets the LED off  delay 1000                             waits for a seconddigitalRead  Reads the value from a specified digital pin  either HIGH or LOW  The pin must have its mode set to one of INPUT  INPUT_PULLUP  and INPUT_PULLDOWN  If the pin isn’t connected to anything  digitalRead   can return either HIGH or LOW  and this will change in a way that seems random  uint32 digitalRead uint8 pin Parameters  pin  Pin to read from  see pinMode   Return Values  LOW 0  or HIGH 1  ExampleThe following example turns the LED on or off when the button is pressedvoid setup     pinMode BOARD_LED_PIN  OUTPUT   pinMode BOARD_BUTTON_PIN  INPUT_PULLDOWN void loop     int val   digitalRead BOARD_BUTTON_PIN       reads the input pin  digitalWrite BOARD_LED_PIN  val    write val to BOARD_LED_PINanalogRead  Read an analog value from pin  This function blocks during ADC conversion  and has 12 bits of resolution  The pin must have its mode set to INPUT_ANALOG Reads the value from the specified analog pin  The OpenCM boards contain 16-channel  12-bit analog to digital converters This means that a converter will map input voltages between 0 and 3 3 volts into integer values between 0 and 4095 However  a number of factors interfere with getting full accuracy and precision The Arduino board contains a 6 channel  8 channels on the Mini and Nano  16 on the Mega   10-bit analog to digital converter with an input voltage range of 0V–5V This means that it will map input voltages between 0 and 5 volts  which is larger than OpenCM’s range of 0V-3 3V  into integer values between 0 and 1023  which is smaller than the OpenCM’s range of 0–4095  uint16 analogRead uint8 pin Parameters  pin  Pin to read from  see pinMode   The pin parameter is the number of the analog input pin to read from The pins which support analog to digital conversion have ANALOG IN printed in silkscreen above them in the OpenCM9 04 PCB’s TOP-side Return Values  Converted voltage  in the range 0–4095   i e  a 12-bit ADC conversion  Exampleint analogPin   3        Potentiometer wiper  middle terminal  connected                          to analog pin 3  outside leads to ground and  3 3V                           You may have to change this value if your board                          cannot perform ADC conversion on pin 3 int val   0              variable to store the value readvoid setup     pinMode analogPin  INPUT_ANALOG     set up pin for analog inputvoid loop     val   analogRead analogPin        read the input pin  SerialUSB println val             print the value  for debugging with  delay 100                         a serial monitoranalogWrite  analogWrite   is used to create a PWM wave on a pin  You can use this to make an LED get brighter or dimmer  control a servomotor  etc   analogWrite   is an alias for pwmWrite  you must set up the pin for PWM output using pinMode    with argument PWM  This also means that you can’t later call digitalRead   or digitalWrite   on that pin unless some time in between  you use pinMode   to reconfigure that pin for INPUT or OUTPUT see the pinMode   page for more information  void analogWrite uint8 pin  uint16 duty_cycle Parameters  pin  PWM output pin  duty_cycle  Duty cycle to set  Using Arduino’s analogWrite    the duty cycle ranges between 0–255  always off – always on   Using OpenCM’s analogWrite   or pwmWrite    the duty cycle ranges from 0–65 535 by defaultReturn Values  NoneExampleSets the output to the LED proportional to the value read from the potentiometerint analogPin   3       potentiometer connected to analog pin 3void setup     pinMode BOARD_LED_PIN  PWM       sets the LED pin as output  pinMode analogPin  INPUT_ANALOG     sets the potentiometer pin as                                       analog inputvoid loop     int val   analogRead analogPin            read the input pin  analogWrite BOARD_LED_PIN  val   16      analogRead values go from 0                                         to 4095  pwmWrite values                                         from 0 to 65535  so scale roughlyArduino CompatibilityThe frequency of the PWM signal  i e   the frequency of a complete on off cycle  on the Arduino is approximately 490 Hz On the Maple  the frequency is configurable  defaulting to about 1100 Hz  or 1 1 KHz  This is because the PWM frequency is the frequency of the timer which controls PWM output on the particular pin  the PWM tutorial has the details  If your application definitely requires Arduino’s PWM frequency  then the steps are  Figure out which timer controls PWM output on your pin  your board’s Timer Pin Map is your friend here    Let’s say it’s timer n  where n is some number  You’ll then need to put HardwareTimer timer n  with your variables  as described in the HardwareTimer reference   In your setup    put timer setPeriod 2041   This will set the timer’s period to approximately 2041 microseconds  which is a frequency of approximately 490 Hz Be aware that this will change the period for the entire timer  and will affect anything else in your program that depends on that timer  The important examples are timer interrupts and PWM See Also  PWM  pwmWrite  togglepin  Switches a digital output pin from HIGH to LOW  or from LOW to HIGH  The pin must have its mode set to OUTPUT void togglePin uint8 pin Parameters  pin  the pin to toggle  If the pin is HIGH  set it LOW  If it is LOW  set it HIGH  see pinMode   Return Values  NoneSee Also  toggleLED  ExampleThis example uses togglePin   to pin 14  pin 14 is connected to built-in LED void setup       pinMode 14  OUTPUT          sets pin 14 as outputvoid loop       togglePin 14     toggles pin 14 every 100ms intervals    delay 100                          toggleLED  Toggle the built-in LED switch it from off to on  or on to off The LED must its mode set to OUTPUT  This can be accomplished portably over  OpenCM9 04 and CM-900 by calling pinMode BOARD_LED_PIN  OUTPUT  before calling this function void toggleLED  Parameters  None see pinMode   Return Values  NoneExampleThis example sets up the board’s LED pin for output  then toggles the LED every 100 millisecondsvoid setup       pinMode BOARD_LED_PIN  OUTPUT void loop       toggleLED      delay 100 See Also  BOARD_LED_PIN  togglePin  License and Attribution Portions of this page were adapted from the Leaflabs Reference Documentation  which is released under a Creative Commons Attribution-ShareAlike 3 0 License OLLO ClassThis is a Class that facilitates the use of the 5-pin port of OpenCM9 04  Does not support CM-900 class OLLOThis is the OLLO Class  and since it is not predefined you need to create an instance variable in order to use it void OLLObegin int devNum Initializes the OLLO Class   devNum  Inputs the number of the 5-pin port of OpenCM9 04 void OLLObegin int devNum  OlloDeviceIndex device_index Initializes the OLLO Class   devNum  Inputs the number of the 5-pin port of OpenCM9 04   device_index  Specifies the type of device connected to the 5-pin port  For the OlloDeviceIndex data type please refer below typedef enum OLLO_DEVICE_INDEX     IR_SENSOR     TOUCH_SENSOR     GYRO_SENOSR     DMS_SENSOR     PIR_SENSOR     MAGNETIC_SENSOR     COLOR_SENSOR     ULTRASONIC_SENSOR     LED_DISPLAY     TEMPERATURE_SENSOROlloDeviceIndexvoid OLLObegin int devNum  OlloDeviceIndex device_index  voidFuncPtr handler Initializes the OLLO Class  This initialization method is useful when using a touch sensor in an interrupt method   devNum  Inputs the number of the 5-pin port of OpenCM9 04   device_index  Specifies the type of device connected to the 5-pin port   handler  Designates the interrupt handler to be connected with the touch button  sensor  Please refer below for the handler’s function prototype int OLLOread int devNum Reads and returns the ADC value of the device connected to the corresponding port   devNum  Inputs the number of the 5-pin port of OpenCM9 04 int OLLOread int devNum  OlloDeviceIndex device_index Reads and returns the ADC value of the device connected to the corresponding port  devNum  Inputs the number of the 5-pin port of OpenCM9 04   device_index  Specifies the type of device connected to the 5-pin port void OLLOwrite int devNum  uint8 leftVal  uint8 rightVal This is a method to digitally output the SIG1  SIG2 pins of the corresponding port  This method is useful when the device to be used is an LED Display   devNum  Inputs the number of the 5-pin port of OpenCM9 04   1 4   leftVal  Sets the SIG1 pin as HIGH LOW  You can put in either 0 or 1   rightVal  Sets the SIG2 pin as HIGH LOW  You can put in either 0 or 1 void OLLOwrite int devNum  uint8 leftVal  uint8 centerVal  uint8 rightVal This is a method to digitally output the SIG1  ADC  SIG2 pins of the corresponding port   devNum  Inputs the number of the 5-pin port of OpenCM9 04   1 4   leftVal  Sets the SIG1 pin as HIGH LOW  You can put in either 0 or 1   centerVal  Sets the ADC pin as HIGH LOW  You can put in either 0 or 1   rightVal  Sets the SIG2 pin as HIGH LOW  You can put in either 0 or 1 void OLLOwriteLED int devNum  uint8 leftVal  uint8 rightVal This is a method to control the LED module   devNum  Inputs the number of the 5-pin port of OpenCM9 04   1 4   leftVal  Used to turn the left LED on off  The LED is turned on when set as LOW  and the LED is turned off when set as HIGH   rightVal  Used to turn the right LED on off  The LED is turned on when set as LOW  and the LED is turned off when set as HIGH ExampleAn instance variable of the OLLO Class has to be defined in order to use the OLLO memory  It is provided in the form of a library so it is necessary to write  include OLLO h  include OLLO h OLLO myOLLOThe instructions to use the basic sensor is shown below  include  ltOLLO h gtOLLO myOLLO define PORT1 1 define PORT2 2void setup      myOLLO begin PORT1     Performs basic initialization of Port 1 myOLLO begin PORT2     Performs basic initialization of Port 2 void loop   SerialUSB print X-Axis ADC      SerialUSB print myOLLO read PORT1     read X-Axis ADC value from OLLO port 1  SerialUSB print   Y-Axis ADC      SerialUSB println myOLLO read PORT1     read Y-Axis ADC value from OLLO port 2  delay 60    Prevents fast output An example of using the IR Sensor module is shown below  include  ltOLLO h gtOLLO myOLLO define PORT1 1void setup      myOLLO begin PORT1  IR_SENSOR   Initializes Port 1 as an IR sensor module void loop   SerialUSB print IR Sensor ADC      SerialUSB println myOLLO read PORT1  IR_SENSOR     read ADC value from OLLO port 1delay 60    Prevents fast output  include  ltOLLO h gtOLLO myOLLOvoid setup    myOLLO begin 3   LED Display Module must be connected at port 3 void loop      write  port number  left LED blue   right LED yellow     myOLLO write 3 1 0    or use myOLLO writeLED 3 1 0   delay 100   myOLLO write 3 0 1    or use myOLLO writeLED 3 0 1   delay 100 The Color Sensor is initialized with COLOR_SENSOR The read   method returns the following result  The color value that is detected from Color Read  is output   0 - gt Error  1 - gt White  2 - gt Black  3 - gt Red  4 - gt Green  5 - gt Blue  6 - gt Yellow include  ltOLLO h gtOLLO myOLLOvoid setup    myOLLO begin 2 COLOR_SENSOR   OLLO Color Module must be connected at port 2   void loop    SerialUSB print COLOR Read      SerialUSB println myOLLO read 2  COLOR_SENSOR    delay 100 Serial ClassSerial Class Seial1  Serial2  Serial3 All of the Serial 1 2 3  objects are instances of the HardwareSerial class  which is documented in this section   This means that you can use any of these functions on any of Serial1  Serial2  and Serial3  class HardwareSerialSerial port class  Predefined instances are Serial1  Serial2  and Serial3 void HardwareSerialbegin unsigned int baud Set up a HardwareSerial object for communications  This method must be called before attempting to use theHardwareSerial object  typically  you call this in your setup   function  void HardwareSerialend  Disables the USART associated with this object  allowing any associated communication pins to be used for other purposes unsigned int HardwareSerialavailable  Returns the number of bytes available for reading unsigned char HardwareSerialread  Returns the next available  unread character  If there are no available characters you can check this withavailable   the call will block until one becomes available void HardwareSerialflush  Throw away the contents of the serial port’s receiver  RX  buffer  That is  clears any buffered characters  so that the next character read is guaranteed to be new void HardwareSerialprint unsigned char b Print the given byte over the USART void HardwareSerialprint char c Print the given character over the USART  7-bit clean characters are typically interpreted as ASCII text void HardwareSerialprint const char  str Print the given null-terminated string over the USART void HardwareSerialprint int n Print the argument’s digits over the USART  in decimal format  Negative values will be prefixed with a ‘-‘character void HardwareSerialprint unsigned int n Print the argument’s digits over the USART  in decimal format void HardwareSerialprint long n Print the argument’s digits over the USART  in decimal format  Negative values will be prefixed with a ‘-‘character void HardwareSerialprint unsigned long n Print the argument’s digits over the USART  in decimal format void HardwareSerialprint long n  int base Print the digits of n over the USART  in base base  which may be between 2 and 16   The base value 2 corresponds to binary  8 to octal  10 to decimal  and 16 to hexadecimal  Negative values will be prefixed with a’-‘ character void HardwareSerialprint double n Print n  accurate to 2 digits after the decimal point void HardwareSerialprintln char c Like print c   followed by rn void HardwareSerialprintln const char  c Like print c   followed by rn void HardwareSerialprintln unsigned char b Like print b   followed by rn void HardwareSerialprintln int n Like print n   followed by rn void HardwareSerialprintln unsigned int n Like print n   followed by rn void HardwareSerialprintln long n Like print n   followed by rn void HardwareSerialprintln unsigned long n Like print n   followed by rn void HardwareSerialprintln long n  int base Like print n  b   followed by rn void HardwareSerialprintln double n Like print n   followed by rn void HardwareSerialprintln  Prints rn over the USART void HardwareSerialwrite unsigned char ch Sends one character over the USART  This function is currently blocking  This is a low-level function  One of the print   or println   functions is likely to be more useful when printing multiple characters  when formatting numbers for printing  etc void HardwareSerialwrite const char  str Send the given null-terminated character string over the USART  This is a low-level function  One of the print   or println   functions is likely to be more useful when printing multiple characters  when formatting numbers for printing  etc void HardwareSerialwrite void  buf  unsigned int size Writes the first size bytes of buf over the USART  Each byte is transmitted as an individual character  This is a low-level function  One of the print   or println   functions is likely to be more useful when printing multiple characters  when formatting numbers for printing  etc int HardwareSerialtxPin  Return the number of the TX  transmit  pin int HardwareSerialrxPin  Return the number of the RX  receive  pin void HardwareSerialattachInterrupt voidFunctionPtrUart handler Attach user interrupt to Serial devices  ROBOTIS implementedvoid HardwareSerialdetachInterrupt void Disable user interrupt to Serial devices  ROBOTIS implementedArduino CompatibilityUnlike the Arduino  none of the OpenCM’s serial ports is connected to the USB port on the OpenCM board  If you want to communicate using the built-in USB port  use SerialUSB instead  You will need an additional USB-to-serial adapter to communicate between a USART and your computer Getting StartedFirst  decide which serial port you wish to use  and connect its pins to the device you’re communicating with   The TX and RX pins for a serial port are labeled on your board’s silkscreen for example  serial port 3 has pins labeled RX3  You can easily use the communication module with the 4pin communication port   The variable for controlling a serial port is the word Serial  plus the serial port’s number  For example   you can control serial port 1 with the variable Serial1  serial port 2 with Serial2  and so on In order to get started using your serial port  you’ll first need to turn it on  Do this by calling your serial port’s begin   function  giving it the baud rate you wish it to communicate at  Put this call to begin   in your setup    like in the following exampleOne common use for serial ports is to print strings and other debugging information to a computer  You can print numbers or strings using print   and println   in your loop  void setup          57600 is the baud rate to use   The baud rate determines how       fast the communication goes     Serial2 begin 57600 void loop          Communicate using Serial2 here Serial2 print First  print this string   Then print a number      Serial2 print 42     Serial2 print    You can print floating point values  too      Serial2 print 3 14     Serial2 println   Using println   instead of print   ends the line      Serial2 println This sentence starts on a new line  void setup       Initialize Serial2 as 57600 bps  Serial2 begin 57600 char temp 0void loop     if Serial2 available        if data is available from Serial2      temp   Serial2 read       read one byte data from Serial2      Serial2 print temp        print out the data to Serial2 device  void setup      Serial2 Serial initialize  Serial2 begin 57600     You can attach your serial interrupt    or  also detach the interrupt by detachInterrupt void  method  Serial2 attachInterrupt serialInterrupt   pinMode BOARD_LED_PIN  OUTPUT     toggleLED_Pin_Out  Serial Interrupt type must have the below proto-type  void interrupt_name  byte variable void serialInterrupt byte buffer   Serial2 print  char buffer void loop    toggleLED    delay 50 SerialUSB classUsed for communication between the OpenCM board and a computer In addition to three serial ports  the OpenCM’s STM32 microprocessor includes a dedicated USB peripheral This peripheral is used to emulate a regular serial port for use as a terminal and download a program to the board Library access to the emulated serial port is provided through the SerialUSB object You can mostly use SerialUSB as a drop-in replacement for Serial1  Serial2  and Serial3 WarningThe SerialUSB functionality includes a 50 millisecond timeout for writes  and does not try to detect if the USB host is really connected  or just enumerated and initialized This means that if you have a number of calls to one of the SerialUSB write   or print   functions in your code  and you are not monitoring SerialUSB on a computer  your program will run much slower than if it is being monitored or totally disconnected  run off of a battery  You can avoid this behavior by deciphering the port status using the DTR and RTS line status  the behavior of these control lines is platform dependent and we no longer interpret them by default  The SerialUSB object is an instance of the USBSerial class  which is documented in this section This means that you can use any of these functions by writing SerialUSB functionName arguments…  For example  to print the message hello  world   you can write USBSerial println hello world   class USBSerialEmulated serial-over-USB class  SerialUSB is the predefined  singleton  instance USBSerialbegin  Set up the USB peripheral for emulated serial communication  The peripheral is configured this way by default calling this function should only be necessary if you have disabled the peripheral using SerialUSB end   USBSerialend  Disables the USB peripheral  Note that using this function will terminate all USB communications between the OpenCM and the PC in particular  it implies that you won’t be able to download any new programs without resetting the board or using recovery mode unsigned int USBSerialavailable  Returns the number of bytes available for reading unsigned char USBSerialisConnected  Returns 1 if USB is connected to host or PC   otherwise returns 0 unsigned char USBSerialread  Returns the next available  unread character  If there are no available characters  you can check this with available   the call will block until one becomes available USBSerialprint unsigned char b Print the given byte over the USB connection USBSerialprint char c Print the given character over the USB connection  7-bit clean characters are typically interpreted as ASCII text USBSerialprint const char  str Print the given null-terminated string over the USB connection USBSerialprint int n Print the argument’s digits over the USB connection  in decimal format  Negative values will be prefixed with a ‘-‘ character USBSerialprint unsigned int n Print the argument’s digits over the USB connection  in decimal format USBSerialprint long n Print the argument’s digits over the USB connection  in decimal format  Negative values will be prefixed with a ‘-‘ character USBSerialprint unsigned long n Print the argument’s digits over the USB connection  in decimal format USBSerialprint long n  int base Print the digits of n over the USB connection  in base base  which may be between 2 and 16   The base value 2 corresponds to binary  8 to octal  10 to decimal  and 16 to hexadecimal  Negative values will be prefixed with a ‘-‘ character USBSerialprint double n Print n  accurate to 2 digits after the decimal point USBSerialprintln char c Like print c   followed by rn USBSerialprintln const char  c Like print c   followed by rn USBSerialprintln unsigned char b Like print b   followed by rn USBSerialprintln int n Like print n   followed by rn USBSerialprintln unsigned int n Like print n   followed by rn USBSerialprintln long n Like print n   followed by rn USBSerialprintln unsigned long n Like print n   followed by rn USBSerialprintln long n  int base Like print n  b   followed by rn USBSerialprintln double n Like print n   followed by rn USBSerialprintln  Prints rn over the USB connection USBSerialwrite unsigned char ch Sends one character over the USB connection  This function is currently blocking  although nonblocking writes are a planned future extension This is a low-level function  One of the print   or println   functions is likely to be more useful when printing multiple characters  when formatting numbers for printing  etc USBSerialwrite const char  str Send the given null-terminated character string over the USB connection This is a low-level function  One of the print   or println   functions is likely to be more useful when printing multiple characters  when formatting numbers for printing  etc USBSerialwrite void  buf  unsigned int size Writes the first size bytes of buf over the USB connection  Each byte is transmitted as an individual character  This is a low-level function  One of the print   or println   functions is likely to be more useful when printing multiple characters  when formatting numbers for printing  etc void USBSerialattachInterrupt voidFuncPtrUsb handler Attach user interrupt to USB peripheral typedef void   voidFuncPtrUsb  byte   byte   void USBSerialdetachInterrupt void Disable user interrupt to USB peripheral ExampleSafe print This function should run smoothly and not block the LED should blink at roughly the same speed whether being monitored  running from battery  or connected but not monitored  define LED_PIN BOARD_LED_PINvoid setup          Set up the LED to blink        pinMode LED_PIN  OUTPUT void loop          LED will stay off if USB is disconnected battery power  etc    and       will blink quickly if USB is plugged     if SerialUSB isConnected            digitalWrite LED_PIN  1         delay 100 digitalWrite LED_PIN  0     delay 100 volatile int nCount 0void setup       Initialize USB Serial  SerialUSB begin  void loop       print Hello World   to PC though USB Virtual COM port  SerialUSB println Hello World     SerialUSB print nCount       display nCount variable and increase nCount   SerialUSB println nCount     SerialUSB print rn       delay 1000 void setup       Initialize USB Serial  SerialUSB begin  char temp 0void loop     if SerialUSB available        if data is available from USB      temp   SerialUSB read       read one byte data from SerialUSB      SerialUSB print temp        print out the data  void setup       Initialize USB Serial  SerialUSB begin  char temp 0void loop     if SerialUSB available        if data is available from USB      temp   SerialUSB read       read one byte data from SerialUSB      SerialUSB print temp        print out the data  void setup      USB Serial initialize  SerialUSB begin      You can attach your serialUSB interrupt    or  also detach the interrupt by detachInterrupt void  method  SerialUSB attachInterrupt usbInterrupt   pinMode BOARD_LED_PIN  OUTPUT     toggleLED_Pin_Out  SerialUSB Interrupt type must have the below proto-type  void interrupt_name  byte  buffer  byte nCount   USB max packet data is maximum 64byte  so nCount can not exceeds 64 bytes  int i 0void usbInterrupt byte  buffer  byte nCount   SerialUSB print nCount     SerialUSB println nCount   for unsigned int i 0 i  lt nCounti       printf_SerialUSB_Buffer N _receive_Data    SerialUSB print  char buffer i    SerialUSB println  void loop    toggleLED    delay 100 License and AttributionPortions of this page were adapted from the Maple Reference Documentation  which is released under a Creative Commons Attribution-ShareAlike 3 0 LicenseAPIpinMode  Configure behavior of a GPIO pin void pinMode uint8 pin  WiringPinModemode Parameters  pin  Number of pin to configure   mode  Mode corresponding to desired pin behavior Return Values  NoneExampleThis example uses pinMode   to set up the pin connected to the built-in LED as an output  Once this is done digitalWrite   can be used to turn the pin HIGH and LOW  which turn the LED on and off void setup     pinMode BOARD_LED_PIN  OUTPUT          sets the LED pin as outputvoid loop     digitalWrite BOARD_LED_PIN  HIGH       sets the LED on  delay 100                             waits for a second  digitalWrite BOARD_LED_PIN  LOW        sets the LED off  delay 100                             waits for a secondUtilitiesmillis  Returns the number of milliseconds since the board began running the current program  This number will overflow  go back to zero  after approximately 50 days uint32 millis void Parameters  None  See micros   링크  Return Values  Returns time  in milliseconds  since the beginning of program execution  On overflow  restarts at 0 ExampleThe following time prints the value returned by millis   roughly once per secondunsigned int timevoid setup   void loop     SerialUSB print Time    time   millis       prints time since program started  SerialUSB println time      wait a second so as not to send massive amounts of data  delay 1000 Since the return value for millis   is an unsigned long  overflow errors may occur if you try to do math with other data types  such aschars Also See  micros  delay  delayMicrosecondsmicros  Returns the number of microseconds since the board began running the current program  This number will overflow  go back to zero   after approximately 70 minutes Note There are 1 000 microseconds in a millisecond  and 1 000 000 microseconds in a second uint32 micros void Parameters  None  See millis   Return Values  Returns time  in microseconds  since the beginning of program execution  On overflow  restarts at 0 Exampleunsigned int timevoid setup   void loop     SerialUSB print Time    time   micros       prints time since program started  SerialUSB println time      wait a second so as not to send massive amounts of data  delay 1000 Also See  millis    delay    delayMicroseconds  delay  Pauses the program for at least a given number of milliseconds   There are 1000 milliseconds in a second  Interrupts  etc  may cause the actual number of milliseconds to exceed ms  However  this function will return no less than ms milliseconds from the time it is called void delay unsigned long ms Parameters  ms  the number of milliseconds to delay   See delayMicroseconds   Return Values  NoneExamplevoid setup          set up the built-in LED pin for output    pinMode BOARD_LED_PIN  OUTPUT void loop       digitalWrite BOARD_LED_PIN  HIGH       sets the LED on    delay 1000                             waits for a second    digitalWrite BOARD_LED_PIN  LOW        sets the LED off    delay 1000                             waits for a second                                              See Also  millis    micros    delayMicroseconds  delayMicroseconds  Pauses the program for the amount of time  in microseconds  specified as parameter There are a thousand microseconds in a millisecond  and a million microseconds in a second Interrupts  etc  may cause the actual number of microseconds to exceed us However  this function will return no less than us microseconds from the time it is called void delayMicroseconds uint32 us Parameters  us  the number of microseconds to delay Return Values  NoneExampleThe following example shows how to read IR sensor module in ROBOTIS OLLO library void setup       pinMode 17  OUTPUT          sets the Emitting-LED pin as outputpinMode 2  INPUT_ANALOG void loop       digitalWrite 7  HIGH       turn on emitting LED    delayMicroseconds 15                waits for 15us    int adc_value  anologRead 2         read ADC value from receiving LED    SerialUSB print IR ADC          print out ADC valueSerialUSB println adc_value digitalWrite 7  LOW     turn off emitting LED                                              Arduino CompatibilityROBOTIS cannot guarantee it will behave as the Arduino implementation down to the microsecond  especially for smaller values of us The longest time delayMicroseconds   can delay is bounded by its argument type and the STM32 clock rate to be  2 32 - 1    12 microseconds  or less than 6 minutes  For longer pauses  use of delay   is possible See Also  millis  micros  delaymin   Macro  Calculates the minimum of two numbers  define min a b                   a  lt b   a  b  Parameters  a  the first number may be any number or numeric expression  b  the second number may be any number or numeric expression Return Values  The smaller of the two numbers ExamplesensVal   min sensVal  100     assigns sensVal to the smaller of sensVal or 100                                ensuring that it never gets above 100 Perhaps counter-intuitively  max   is often used to constrain the lower end of a variable’s range  while min   is used to constrain the upper end of the range Warning Because of the way min   is implemented  avoid using other functions inside the parentheses  It may lead to incorrect resultsmin a    100       avoid this - yields incorrect resultsa                 use this instead -min a  100        keep other operations outside min  Arduino CompatibilityThe OpenCM version of min   is compatible with Arduino and Maple See Also  max    constrain  max   Macro  Calculates the maximum of two numbers  define min a b                   a  lt b   a  b  Parameters  a   the first number may be any number or numeric expression   b  the second number may be any number or numeric expression Return Values  The larger of the two parameter values ExamplesensVal   max senVal  20     assigns sensVal to the larger of sensVal or 20                               effectively ensuring that it is at least 20 Perhaps counter-intuitively  max   is often used to constrain the lower end of a variable’s range  while min   is used to constrain the upper end of the range Warning Because of the way max   is implemented  avoid using other functions inside the parentheses  It may lead to incorrect resultsmax a–  0       avoid this - yields incorrect resultsa–              use this instead -max a  0         keep other operations outside max  Arduino CompatibilityThe OpenCM version of max   is compatible with Arduino and Maple See Also  min    constrain  abs   Macro  computes the absolute value of a number  define abs x     x   gt 0     x   - x  Parameters  x  the number Return Values  x  if x is greater than or equal to 0   -x  if x is less than 0 Warning Because of the way abs   is implemented  avoid using other functions or causing side effects inside the parentheses  as it may lead to incorrect resultsabs a         avoid this - yields incorrect resultsabs a           use this instead -a               keep other operations outside abs  Arduino CompatibilityMaple’s implementation of abs   is compatible with Arduino constrain   Macro  Constrains a number to be within a range constrain x  a  b Parameters  x  the number to constrain  a  the lower end of the range  b   the upper end of the rangeReturn Values  x if x is between a and b  a if x is less than a  b if x is greater than bExample   limits range of sensor values to between 10 and 150sensVal   constrain sensVal  10  150 See Also  min    max  map  Re-maps a number from one range to another That is  a value equal to fromStart gets mapped to toStart  a value of fromEnd to toEnd  and other values are mapped proportionatelyDoes not constrain value to lie within  fromStart  fromEnd  If a start value is larger than its corresponding end  the ranges are reversed  so map n  1  10  10  1  would reverse the range  1 10  Negative numbers may appear as any argument long map long value  long fromStart  long fromEnd  long toStart  long toEnd Parameters  value  the value to map   fromStart  the beginning of the value’s current range   fromEnd  the end of the value’s current range   toStart   the beginning of the value’s mapped range   toEnd   the end of the value’s mapped range Return Values  the mapped value Example   Map an ADC reading  12 bits  to 16-bit PWM  0 to 65 535    void setup       pinMode 0  INPUT_ANALOG     pinMode 9  PWM void loop       int val   analogRead 0     val   map val  0  4095  0  65535     analogWrite 9  val Discussionmap   does not constrain values to within the range  because out-of-range values are sometimes intended and useful The constrain  macro may be used either before or after this function  if limits to the ranges are desired Note that the lower bounds of either range may be larger or smaller than the upper bounds so that map   may be used to reverse a range of numbers for exampley   map x  1  50  50  1 The function also handles negative numbers well  so that this exampley   map x  1  50  50  -100 is also valid The map   function uses integer math  its arguments and return values all have type long   so it will not generate fractions when the math might indicate that it should do so  Fractional remainders are truncated  and are not rounded or averaged See Also  constrain  pow  Calculates the value of a number raised to a power double pow double x  double y Compute an exponentiation Parameters  x  the base  This value cannot be zero if y  lt  0  This value cannot be negative if y is not an integral value   y  the exponent Return Values  x raised to the power y Examplevoid setup       void loop    for int i 0i lt8i         SerialUSB println pow 2 i      print out 2 i      delay 100     sqrt  Calculates the square root of a number  Compute the square root of a number double sqrt double x Compute an exponentiation Parameters  x  The number whose square root to find  This value cannot be negative Return Values  The square root of x  The return value is never negative Arduino CompatibilityThe Maple versino of sqrt   is compatible with Arduino sin  Calculates the sine of an angle  in radians double sin double x Compute an exponentiation Parameters  x  The radian measure of the angle Return Values  The sine of x  This value will be between -1 and 1 Arduino CompatibilityThe OpenCM version of sin   is compatible with Arduino See Also  cos  tan  float  doublecos  Calculates the cosine of an angle  in radians double cos double x Compute an exponentiation Parameters  x  The radian measure of the angle Return Values  The cosine of x  This value will be between -1 and 1 Arduino CompatibilityThe OpenCM version of cos   is compatible with Arduino See Also  cos  tan  float  doubletan  Calculates the tangent of an angle  in radiansdouble tan double x Compute an exponentiation Parameters  x  The radian measure of the angle Return Values  The tangent of x  There are no limits on the return value of this function Arduino CompatibilityThe OpenCM version of tan   is compatible with Arduino See Also  cos  tan  float  doublerandomSeed  randomSeed   initializes the pseudorandom number generator  causing it to start at an arbitrary point in its random sequence  This sequence  while very long  and random  is always the same void randomSeed unsigned int seed Parameters  seed  the number used to initialize the seed cannot be zero Return Values  NoneExampleThe following sketch initializes the random seed based on an ADC reading of pin 0 If this pin is unconnected  the Sketch should print different values to the serial monitor each time it is runlong randNumbervoid setup     pinMode 0  INPUT_ANALOG   randomSeed analogRead 0  void loop     randNumber   random 300   SerialUSB println randNumber   delay 50 If it is important for a sequence of values generated by random   to differ  on subsequent executions of a sketch  use randomSeed   to initialize the random number generator with a fairly random input  such as analogRead   on an unconnected pin Conversely  it can occasionally be useful to use pseudorandom sequences that repeat exactly This can be accomplished by callingrandomSeed   with a fixed number  before starting the random sequence See Also  random  random  The random   function generates pseudo-random numbersrandom long max Same as a call to random 0  max  random long min  long max Generate a pseudo-random number with given lower and upper bounds Parameters  min  Lower bound on the returned value  inclusive  max  Upper bound on the returned value  exclusiveReturn Values  A pseudo-random number in the range  min  max ExampleThe following sketch initializes the random seed based on an ADC reading of pin 0  If this pin is unconnected  the Sketch should print different values to the serial monitor each time it is runlong randNumbervoid setup     pinMode 0  INPUT_ANALOG   randomSeed analogRead 0  void loop     randNumber   random 300   SerialUSB println randNumber   delay 50 See Also  randomSeed  lowByte  Extracts the low-order  rightmost  byte of a variable  e g  a word  lowByte x Parameters  x  a value of any type  However  if a non-integral type is used  the results will be strange Return Values  The low byte’s value  this will be between 0 and 255  ExampleThis example uses lowByte  highByte to send 1 byte  at a time  to the Goal position address on the Dynamixel control table Dynamixel Dxl 1 void setup       Dxl begin 1 int goal_pos   1023void loop   Dxl writeByte 1 30  lowByte goal_pos      Dxl writeByte 1 31  highByte goal_pos       delay 1000                             waits for a secondhighByte   Macro  Extracts the second lowest byte of an integral data type highByte x Parameters  x  a value of any integral type Return Values  Second lowest byte in xExampleThis example uses lowByte  highByte to send 1 byte  at a time  to the Goal position address on the Dynamixel control table Dynamixel Dxl 1 void setup       Dxl begin 1 int goal_pos   1023void loop   Dxl writeByte 1 30  lowByte goal_pos      Dxl writeByte 1 31  highByte goal_pos       delay 1000                             waits for a secondOther exampleint x   0xDEADBEEFSerialUSB println x  HEX     prints BEbitRead   Macro  Gets the value of a bit in a number bitRead x  n Parameters  x  the number from which to read the bit   n  which bit to read  starting at 0 for the least-significant  rightmost  bitReturn Values  The value of the bit  0 or 1  See Also  bit    bitWrite    bitSet    bitClear  bitWrite   Macro  Writes a bit of a numeric variable bitWrite x  n  b Parameters  x  the numeric variable whose bit to write   n  which bit of the number to write  starting at 0 for the least-significant  rightmost  bit   b  the value to write to the bit  0 or 1  Return Values  NoneSee Also  bit    bitWrite    bitSet    bitClear  bitSet   Macro  Sets  writes a 1 to  a bit of a numeric variable bitSet x n Parameters  x  the numeric variable whose bit to set  n  which bit to set  starting at 0 for the least-significant  rightmost  bitReturn Values  NoneSee Also  bit    bitRead    bitWrite    bitClear  bitClrear   Macro  Clears  writes a 0 to  a bit of a numeric variable bitClear x  n Parameters  x  the numeric variable whose bit to clear  n  which bit to clear  starting at 0 for the least-significant  rightmost  bitReturn Values  NoneSee Also  bit    bitRead    bitWrite    bitSet  bit   Macro  Computes the value of an  unsigned  integer with the specified bit set  bit 0  is 1  bit 1  is 2  bit 2  is 4  then 8  16  32  etc   bit n Parameters  n  the bit to set Return Values  The value of an integer with the given bit set See Also  bitRead    bitWrite    bitSet    bitClear  License and Attribution Portions of this page were adapted from the Maple Reference Documentation  which is released under aCreative Commons Attribution-ShareAlike 3 0 License ",
      "url": "http://emanual.robotis.com/docs/en/software/opencm_ide/api_reference/"
      } ,
  
  
      "docs-en-dxl-ax-ax-12a":  {
      "title": "AX-12A",
      "content"	 : "AX-12ANote AX-12  is the improved version of existing AX-12 the design of circuit  material  and wheel gear are specially improved Note AX-12A is a new version of the AX-12  with the same performance but more advanced external design  Only the AX-12A is now being sold Specifications            Item      Specifications                  Baud Rate      7843 bps   1 Mbps              Resolution      0 29°              Running Degree      0°   300°Endless Turn              Weight      53 5g AX-12  AX-12    54 6g AX-12A               Dimensions  W x H x D       32mm x 50mm x 40mm              Gear Ratio      254  1              Stall Torque      1 5 N m  at 12V  1 5A               No Load Speed      59rpm  at 12V               Operating Temperature      -5°C    70°C              Input Voltage      9 0   12 0V  Recommended  11 1V               Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communicationf 8bit  1stop  No Parity               Physical Connection      TTL Level Multi Drop Bus Daisy Chain Type Connector               ID      0   253              Feedback      Position  Temperature  Load  Input Voltage  etc              Material      Engineering Plastic      Note Stall torque is the maximum instantaneous and static  torque  Stable motions are possible with robots designed for loads with 1 5 or less of the stall torque Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL  Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets  and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets Control Table  Data  AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL  Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets  WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table  The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets  In order to read or write data  users must designate a specific Address in the Instruction Packet  Please refer to Protocol 1 0 for more details about Instruction Packets Note Two’s complement is applied for the negative value  For more information  please refer to Two’s complement from Wikipedia Area  EEPROM  RAM The Control Table is divided into 2 Areas  Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on  Volatile   On the other hand  modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off  Non-Volatile   Data in the EEPROM Area can only be changed or modified when the value of Torque Enable 24  is ‘0’ and Dynamixel is in idle state SizeThe Size of data is 1 or 2 bytes depend on their usage  Please check the size of data when updating the data with an Instruction Packet  2 bytes data will be saved according to Little Endian AccessThe Control Table has two different access properties  ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission  Data with the read only property cannot be changed by the WRITE Instruction  Read only property ‘R’  is generally used for measuring and monitoring purpose  and read write property ‘RW’  is used for controlling DYNAMIXEL Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on  Default values in the EEPROM area are initial values of the DYNAMIXEL  factory default settings   If any values in the EEPROM area are modified by a user  modified values will be restored as initial values when the DYNAMIXEL is turned on  Initial Values in the RAM area are restored when the DYNAMIXEL is turned on Control Table of EEPROM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      12              2      1      Firmware Version      Firmware Version      R      -              3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      1              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      Counter-Clockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      70              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      140              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size Byte       Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On Off      RW      0              25      1      LED      Status LED On Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      1              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      1              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW      -              32      2      Moving Speed      Moving Speed      RW      -              34      2      Torque Limit      Torque Limit Goal Torque       RW      ADD 14 amp15              36      2      Present Position      Present Position      R      -              38      2      Present Speed      Present Speed      R      -              40      2      Present Load      Present Load      R      -              42      1      Present Voltage      Present Voltage      R      -              43      1      Present Temperature      Present Temperature      R      -              44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number  0 This address stores model number of the DYNAMIXEL Firmware Version  2 This address stores firmware version of the DYNAMIXEL ID  3 The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet 0 252  0xFC  values can be used as an ID  and 254 0xFE  is occupied as a broadcast ID  The Broadcast ID 254  0xFE  can send an Instruction Packet to all connected DYNAMIXELs simultaneously Note Please avoid using an identical ID for multiple DYNAMIXELs  You may face communication failure or may not be able to detect Dynamixels with an identical ID Baud Rate  4 Baud Rate determines serial communication speed between a controller and DYNAMIXELs             Value      Baud Rate bps       Margin of Error                  1      1M      0 000%              3      500 000      0 000%              4      400 000      0 000%              7      250 000      0 000%              9      200 000      0 000%              16      115200      -2 124%              34 Default       57600      0 794%              103      19200      -0 160%              207      9600      -0 160%      Note Less than 3% of the baud rate error margin will not affect to UART communication Return Delay Time  5 After the DYNAMIXEL receives an Instruction Packet  it delays transmitting the Status Packet for Return Delay Time  9   For instance  if the Return Delay Time 9  is set to ‘10’  the Status Packet will be returned after 20 μsec  when the Instruction Packet is received             Unit      Value Range      Description                  2 μsec       0   254      Default value ‘250’ 500 μsec    Maximum 508 μsec       CW CCW Angle Limit 6  8 The angle limit allows the motion to be restrained The range and the unit of the value is the same as Goal Position Address 30  31    CW Angle Limit the minimum value of Goal Position Address 30  31   CCW Angle Limit the maximum value of Goal Position Address 30  31 The following two modes can be set pursuant to the value of CW and CCW             Operation Type      CW   CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheel-type operation robots since motors of the robots spin infinitely  The joint mode can be used to multi-joints robot since the robots can be controlled with specific angles The Highest Limit Temperature            Unit      Value Range                  About 1°      0   100      Caution Do not set the temperature lower higher than the default value  When the temperature alarm shutdown occurs  wait 20 minutes to cool the temperature before re-use  Keep using the product when the temperature is high can cause severe damage Min Max Voltage LimitIt is the operation range of voltage             Unit      Value Range      Description                  About 0 1V      50   250      5 0   25 0V      For example  if the value is 80  the voltage is 8V If Present Voltage 42  is out of the range  Voltage Range Error Bit  Bit0  of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18 Max TorqueIt is the torque value of maximum output  0 to 1 023  0x3FF  can be used  and the unit is about 0 1% For example  Data 1 023  0x3FF  means that Dynamixel will use 100% of the maximum torque it can produce while Data 512  0x200  means that Dynamixel will use 50% of the maximum torque  When the power is turned on  Torque Limit  Address 34 and 35  uses the value as the initial value Status Return LevelThis value decides how to return Status Packet when Dynamixel receives an Instruction Packet             Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID 0xFE   Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level  For more details  please refer to the  Status Packet  section of Protocol Alarm LED   Alarm ShutdownDynamixel can protect itself by detecting errors occur during the operation The errors can be set are as the table below             Bit      Item      Description                  Bit 7      0      -              Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’  That is  if 0x05  binary 00000101  is set  both Input Voltage Error and Overheating Error can be detected If errors occur  in case of Alarm LED  the LED blinks in case of Alarm Shutdown  the motor output becomes 0 % by resetting the value of Torque Limit 34  to 0 Torque Enable            Value      Description                  0      Turn off the torque Free run state               1      Turn on the torque and lock EEPROM area      LEDTurn on or turn off the LED on Dynamixel             Bit      Description                  0 Default       Turn OFF the LED              1      Turn ON the LED      Compliance MarginIt exists in each direction of CW CCW and means the error between goal position and present position The range of the value is 0 255  and the unit is the same as Goal Position  Address 30 31 The greater the value  the more difference occurs Compliance SlopeIt exists in each direction of CW CCW and sets the level of Torque near the goal position Compliance Slope is set in 7 steps  the higher the value  the more flexibility is obtained Data representative value is actually used value   That is  even if the value is set to 25  16 is used internally as the representative value             Step      Data Value      Data Representative Value                  1      0 0x00    3 0x03       2 0x02               2      4 0x04    7 0x07       4 0x04               3      8 0x08  15 0x0F       8 0x08               4      16 0x10  31 0x1F       16 0x10               5      32 0x20  63 0x3F       32 0x20               6      64 0x40  127 0x7F       64 0x40               7      128 0x80  254 0xFE       128 0x80       Compliance is to set the control flexibility of the motor The following diagram shows the relationship between output torque and position of the motor Goal PositionIt is a position value of destination 0   1 023  0x3FF  is available   The unit is 0 29° If Goal Position is out of the range  Angle Limit Error Bit  Bit 1  of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED Shutdown The picture above is the front view of DynamixelNote If it is set to Wheel Mode  Goal Position value is not used Moving SpeedIt is a moving speed to Goal Position The range and the unit of the value may vary depending on the operation mode       Join Mode0   1 023 0x3FF  can be used  and the unit is about 0 111rpm If it is set to 0  it means the maximum rpm of the motor is used without controlling the speed If it is 1023  it is about 114rpm For example  if it is set to 300  it is about 33 3 rpm     Note Please check the maximum rpm of the Dynamixel  The motor cannot exceed the maximum rpm with the higher Moving Speed value         Wheel Mode0   2 047 0x7FF  can be used  the unit is about 0 1% If a value in the range of 0   1 023 is used  it is stopped by setting to 0 while rotating to CCW direction If a value in the range of 1 024   2 047 is used  it is stopped by setting to 1 024 while rotating to CW direction That is  the 10th bit becomes the direction bit to control the direction In Wheel Mode  only the output control is possible  not speed For example  if it is set to 512  it means the output is controlled by 50% of the maximum output   Torque LimitIt is the value of the maximum torque limit 0   1 023 0x3FF  is available  and the unit is about 0 1% For example  if the value is 512  it is about 50% that means only 50% of the maximum torque will be used If the power is turned on  the value of Max Torque  Address 14  15  is used as the initial value Note If the function of Alarm Shutdown is triggered  the motor loses its torque because the value becomes 0  Once error conditions are resolved and this value is changed to the value other than 0  the motor can be operated again Present PositionIt is the current position value of Dynamixel The range of the value is 0 1023  0x3FF   and the unit is 0 29 degree The picture above is the front view of Dynamixel Caution If it is set to Wheel Mode  the value cannot be used to measure the moving distance and the rotation frequency Present SpeedIt is the current moving speed 0 2047  0X7FF  can be used If a value is in the rage of 0 1023  it means that the motor rotates to the CCW direction If a value is in the rage of 1024 2047  it means that the motor rotates to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 0 and 1024 are equal The unit of this value varies depending on operation mode       Joint ModeThe unit is about 0 111rpm For example  if it is set to 300  it means that the motor is moving to the CCW direction at a rate of about 33 3rpm         Wheel ModeThe unit is about 0 1% For example  if it is set to 512  it means that the torque is controlled by 50% of the maximum torque to the CCW direction   Present LoadIt means currently applied load The range of the value is 0 2047  and the unit is about 0 1% If the value is 0 1023  it means the load works to the CCW direction If the value is 1024 2047  it means the load works to the CW direction That is  the 10th bit becomes the direction bit to control the direction  and 1024 is equal to 0 For example  the value is 512  it means the load is detected in the direction of CCW about 50% of the maximum torque             Bit      15   11      10      9   0                  Value      0      Load Direction      Data  Load Ratio       Note CCW Load  Load Direction   0  CW Load  Load Direction   1Note Present load is an inferred value based on the internal output value not a measured value using torque sensor  etc  Therefore  it may be inaccurate for measuring weight or torque  It is recommended to use it for predicting the direction and size of the force being applied to the joint Present VoltageIt is the size of the current voltage supplied This value is 10 times larger than the actual voltage  For example  when 10V is supplied  the data value is 100  0x64 Present TemperatureIt is the internal temperature of Dynamixel in Celsius Data value is identical to the actual temperature in Celsius  For example  if the data value is 85  0x55   the current internal temperature is 85°C Registered Instruction            Value      Description                  0      There are no commands transmitted by REG_WRITE              1      There are commands transmitted by REG_WRITE      Note If ACTION command is executed  the value is changed into 0 Moving            Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock            Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1  the power must be turned off and then turned on again to change into 0 PunchCurrent to drive motor is at minimum Can choose vales from 0x20 to 0x3FF How to AssembleMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back Installing the HornPlace the thrust horn washer into the actuator before inserting the horn You must carefully align the horn to the wheel gear serration by aligning dots Once alignment is properly done  gently push the center of the horn toward the actuator Make sure that the horn washer is in place as you tighten the bolt Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator The bearing set can also be purchased separately As bearing set is rotating freely  therefore alignment is not required when assembling to DYNAMIXEL ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators  the main controller needs to convert its UART signals to the half duplex type  The recommended circuit diagram for this is shown below TTL CommunicationRS-485 CommunicationThe power of Dynamixel is supplied via Pin1 -   Pin2     The above circuit is built into Dynamixel-only controller  In the above circuit diagram  the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as followsIn case of DIRECTION485 Level   High The signal of TxD is output to D  and D- In case of DIRECTION485 Level   Low The signal of D  and D- is output to RxD Pin AssignmentThe connector pin assignments are as the following  The two connectors on the Dynamixel are connected pin to pin  thus the Dynamixel can be operated with only one connector attached ",
      "url": "http://emanual.robotis.com/docs/en/dxl/ax/ax-12a/"
      } ,
      
  
      "docs-en-dxl-x-xm430-w350":  {
      "title": "XM430-W350",
      "content"	 : "  XM430-W350     assets images dxl x x_series_product png    Specifications   specifications   Item             Specifications        -------------   -------------    MCU         ST CORTEX-M3  STM32F103C8 @ 72Mhz  32Bit           Position Sensor         Contactless absolute encoder  12Bit  360 deg Maker  ams www ams com   Part No  AS5045   Motor         Coreless Motor          Baud Rate         9600 bps   4 5 Mbps          Control Algorithm   PID control        Degree of Precision   0 088 deg     Operating Modes   Current Control Mode  Velocity Control Mode  Position Control Mode  0 deg   360 deg   Extended Position Control Mode  Current-based Position Control Mode  PWM Control Mode  Voltage Control Mode     Weight   82g    Dimensions  W x H x D    28 5mm x 46 5mm x 34mm    Gear Ratio   353 5  1     Stall Torque   3 8N m @ 11 1V  2 1A4 1Nm @ 12 0V  2 3A4 8Nm @ 14 8V  2 7A    No Load Speed   43rpm @ 11 1V46rpm @ 12 0V57rpm @ 14 8V    Operating Temperature   -5 degC    80 degC    Input Voltage   10 0   14 8V    Recommended  12 0V       Standby Current   40mA    Command Signal   Digital Packet    Protocol Type   XM430-W350-T Half Duplex Asynchronous Serial CommunicationXM430-W350-R RS485 Asynchronous Serial Communication 8bit  1stop  No Parity     Physical Connection   XM430-W350-T TTL Level Multidrop BUS XM430-W350-R RS485 Multidrop BUS    ID   0   252    Feedback   Position  Velocity  Current  Realtime tick  Trajectory  Temperature  Input Voltage  etc    Part Material   Full Metal GearMetal Front  Middle   Engineering Plastic Back       Performance Graph   performance-graph      assets images dxl x xm430_w350_performance_graph jpg % include en dxl note_performance_graph md %% include en dxl control_table_protocol2 md %    Control Table of EEPROM Area   control-table-of-eeprom-area   Address       Size Byte        Data Name       Description       Access       Initial Value        -------------   -------------   -------------   -------------   -------------   -------------   0 2  Model Number   model-number                      Model Number                              R   1020  2 4  Model Information   model-information            Model Information                         R   -  6 1  Firmware Version   firmware-version              Firmware Version                          R   -  7 1  ID   id                                          DYNAMIXEL ID                              RW  1  8 1  Baud Rate   baud-rate                            Communication Speed                       RW  1  9 1  Return Delay Time   return-delay-time            Response Delay Time                       RW  250  10 1  Drive Mode   drive-mode                         Default Rotation Direction                RW  0  11 1  Operating Mode   operating-mode                 Operating Mode                            RW  3  12 1  Secondary Shadow  ID   secondary-shadow-id      Secondary Shadow  ID                      RW  255  13 1  Protocol Version   protocol-version             Protocol Version                          RW  2  20 4  Homing Offset   homing-offset                   Home Position Offset                      RW  0  24 4  Moving Threshold   moving-threshold             Velocity Threshold for Movement Detection RW  10  31 1  Temperature Limit   temperature-limit           Maximum Internal Temperature Limit        RW  80  32 2  Max Voltage Limit   max-voltage-limit           Maximum Input Voltage Limit               RW  160  34 2  Min Voltage Limit   min-voltage-limit           Minimum Input Voltage Limit               RW  95  36 2  PWM Limit   pwm-limit                           Maximum PWM Limit                         RW  885  38 2  Current Limit   current-limit                   Maximum Current Limit                     RW  1193  40 4  Acceleration Limit   acceleration-limit         Maximum Accleration Limit                 RW  32767  44 4  Velocity Limit   velocity-limit                 Maximum Velocity Limit                    RW  350  48 4  Max Position Limit   max-position-limit         Maximum Position Limit                    RW  4095  52 4  Min Position Limit   min-position-limit         Minimum Position Limit                    RW  0  63 1  Shutdown   shutdown                             Shutdown Error Information                RW  52     Control Table of RAM Area   control-table-of-ram-area   Address       Size Byte        Data Name       Description       Access       Initial Value        -------------   -------------   -------------   -------------   -------------   -------------   64 1  Torque Enable   torque-enable                 Motor Torque On Off                         RW  0  65 1  LED   led                                     Status LED On Off                           RW  0  68 1  Status Return Level   status-return-level     Select Types of Status Return               RW  2  69 1  Registered Instruction   registered-instruction  Check Reception of Instruction           R   0  70 1  Hardware Error Status   hardware-error-status    Hardware Error Status                    R   0  76 2  Velocity I Gain   velocity-i-gain             I Gain of Velocity                          RW  1920  78 2  Velocity P Gain   velocity-p-gain             P Gain of Velocity                          RW  100  80 2  Position D Gain   position-d-gain             D Gain of Position                          RW  0  82 2  Position I Gain   position-i-gain             I Gain of Position                          RW  0  84 2  Position P Gain   position-p-gain             P Gain of Position                          RW  800  88 2  Feedforward 2nd Gain   feedforward-2nd-gain   2nd Gain of Feed-Forward                    RW  0  90 2  Feedforward 1st Gain   feedforward-1st-gain   1st Gain of Feed-Forward                    RW  0  98 1  Bus Watchdog   bus-watchdog                   DYNAMIXEL Bus Watchdog                      RW  0  100 2  Goal PWM   goal-pwm                          Target PWM Value                            RW  -  102 2  Goal Current   goal-current                  Target Current Value                        RW  -  104 4  Goal Velocity   goal-velocity                Target Velocity Value                       RW  -  108 4  Profile Acceleration   profile-acceleration  Acceleration Value of Profile               RW  0  112 4  Profile Velocity   profile-velocity          Velocity Value of Profile                   RW  0  116 4  Goal Position   goal-position                Target Position Value                       RW  -  120 2  Realtime Tick   realtime-tick                Count Time in millisecond                   R   -  122 1  Moving   moving                              Movement Status                             R   0  123 1  Moving Status   moving-status                Detailed Information of Movement Status     R   0  124 2  Present PWM   present-pwm                    Current PWM Value                           R   -  126 2  Present Current   present-current            Current Current Value                       R   -  128 4  Present Velocity   present-velocity          Current Velocity Value                      R   -  132 4  Present Position   present-position          Current Position Value                      R   -  136 4  Velocity Trajectory   velocity-trajectory    Target Velocity Trajectory Generated by Profile R -  140 4  Position Trajectory   position-trajectory    Target Position Trajectory Generated by Profile R -  144 2  Present Input Voltage   present-input-voltage  Current Input Voltage                     R   -  146 1  Present Temperature   present-temperature      Current Internal Temperature              R   -  168 2  Indirect Address 1   indirect-address        Indirect Address 1                          RW  224  170 2  Indirect Address 2   indirect-address        Indirect Address 2                          RW  225  172 2  Indirect Address 3   indirect-address        Indirect Address 3                          RW  226  …	 … …                         … … …  218 2  Indirect Address 26   indirect-address       Indirect Address 26                         RW  249  220 2  Indirect Address 27   indirect-address       Indirect Address 27                         RW  250  222 2  Indirect Address 28   indirect-address       Indirect Address 28                         RW  251  224 1  Indirect Data 1   indirect-data              Indirect Data 1                             RW  0  225 1  Indirect Data 2   indirect-data              Indirect Data 2                             RW  0  226 1  Indirect Data 3   indirect-data              Indirect Data 3                             RW  0  …	 … …                         … … …  249 1  Indirect Data 26   indirect-data             Indirect Data 26                            RW  0  250 1  Indirect Data 27   indirect-data             Indirect Data 27                            RW  0  251 1  Indirect Data 28   indirect-data             Indirect Data 28                            RW  0  578 2  Indirect Address 29   indirect-address       Indirect Address 29                         RW  634  580 2  Indirect Address 30   indirect-address       Indirect Address 30                         RW  635  582 2  Indirect Address 31   indirect-address       Indirect Address 31                         RW  636  … … … … … …  628 2  Indirect Address 54   indirect-address       Indirect Address 54                         RW  659  630 2  Indirect Address 55   indirect-address       Indirect Address 55                         RW  660  632 2  Indirect Address 56   indirect-address       Indirect Address 56                         RW  661  634 1  Indirect Data 29   indirect-data             Indirect Data 29                            RW  0  635 1  Indirect Data 30   indirect-data             Indirect Data 30                            RW  0  636 1  Indirect Data 31   indirect-data             Indirect Data 31                            RW  0  … … … … … …  659 1  Indirect Data 54   indirect-data             Indirect Data 54                            RW  0  660 1  Indirect Data 55   indirect-data             Indirect Data 55                            RW  0  661 1  Indirect Data 56   indirect-data             Indirect Data 56                            RW  0  Caution  Protocol 1 0 does not support addresses greater than 256  Therefore  Indirect Address 29   56 and Indirect Data 29   56 can only be accessed with Protocol 2 0   notice--warning    Control Table Description   control-table-description  Caution  Data in the EEPROM Area can only be written when the value of Torque Enable 64  is cleared to ‘0’   notice--warning      Model Number 0    This address stores model number of the DYNAMIXEL       Firmware Version 6    This address stores firmware version of the DYNAMIXEL       ID 7   % include en dxl control_table_id md %      Baud Rate 8   % include en dxl control_table_baudrate_2 md %      Return Delay Time 9   % include en dxl control_table_return_delay_time md %      Drive Mode 10  Available from Firmware v38   % include en dxl control_table_drivemode md %      Operating Mode 11   % include en dxl control_table_opmode_six_2 md %      Secondary Shadow  ID 12   % include en dxl control_table_shadowid md %      Protocol version 13   % include en dxl control_table_protocolversion md %      Homing Offset 20   % include en dxl control_table_homingoffset md %      Moving Threshold 24   % include en dxl control_table_movingthreshold md %      Temperature Limit 31   % include en dxl control_table_temp_limit_2 md %      Min Max Voltage Limit 34  32   % include en dxl control_table_volt_limit_2 md %      PWM Limit 36   % include en dxl control_table_pwm_limit md %      Current Limit 38   % include en dxl control_table_current_limit md %  Unit   Value Range        ---   ------------   about  2 69 mA  0   1 193  Note  Current Limit 38  could be differ by each DYNAMIXEL so please check the Control Table   notice      Acceleration Limit 40   % include en dxl control_table_acclimit md %      Velocity Limit 44   % include en dxl control_table_vellimit md %      Min Max Position Limits 52  48   % include en dxl control_table_positionlimit md %      Shutdown 63   % include en dxl control_table_shutdown md %      Torque Enable 64   % include en dxl control_table_torque_enable_2 md %      LED 65   % include en dxl control_table_led md %      Status Return Level 68   % include en dxl control_table_status_return_lv md %      Registered Instruction 69   % include en dxl control_table_reg_instruction md %      Hardware Error Status 70   This value indicates hardware error status % include en dxl control_table_shutdown md %      Velocity PI Gain 78  76   % include en dxl control_table_velocity_pi_gain md %      Position PID Gain 84  82  80   Feedforward 1st 2nd Gains 90  88   % include en dxl control_table_position_pid_gain md %% include en dxl control_table_current_position_pid_gain md %      Bus Watchdog 98  Available from Firmware v38   % include en dxl control_table_buswatchdog md %      Goal PWM 100   % include en dxl control_table_goal_pwm md %      Goal Current 102   % include en dxl control_table_goal_current md %  Unit   Value Range        ---   ------------   about  2 69 mA  -Current Limit 38    Current Limit 38   Note  Applying high current to the motor for long period of time might damage the motor   notice      Goal Velocity 104   % include en dxl control_table_goal_velocity md %      Profile Acceleration 108   % include en dxl control_table_profile_acceleration md %      Profile Velocity 112   % include en dxl control_table_profile_velocity md %      Goal Position 116   % include en dxl control_table_goal_position_2 md %      Realtime Tick 120   % include en dxl control_table_realtime_tick md %      Moving 122   % include en dxl control_table_moving_2 md %      Moving Status 123   % include en dxl control_table_moving_status md %      Present PWM 124   This value indicates current PWM  For more details  please refer to the  Goal PWM 100    goal-pwm        Present Current 126   This value indicates current Current  For more details  please refer to the Goal Current 102        Present Velocity 128   This value indicates current Velocity  For more details  please refer to the Goal Velocity 104        Present Position 132   % include en dxl control_table_present_position md %      Velocity Trajectory 136   % include en dxl control_table_velocity_trajectory md %      Position Trajectory 140   % include en dxl control_table_position_trajectory md %      Present Input Voltage 144   % include en dxl control_table_present_volt_2 md %      Present Temperature  144   % include en dxl control_table_present_temp_2 md %      Indirect Address  Indirect Data  % include en dxl control_table_indirect_data md %   How to Assemble   how-to-assemble     Wiring through Back Case   wiring-through-back-case      assets images dxl x wiring_through_back_case jpg     Option Frame Assembly   option-frame-assembly      assets images dxl x x430_option_frame jpg    Maintenance   maintenance % include en dxl horn_bearing_replacement md %   Reference   reference  Note   Compatibility Guide   notice    Quick Start   quick-start % include en dxl quick_start md %    Drawings   drawings  Download   X_430_std_ref pdf  X_430_std_ref pdf  http  support robotis com en baggage_files dynamixel x-430_std_ref pdf Compatibility Guide  http  en robotis com BlueAD board php bbs_id faq mode view bbs_no 47 page 1 key  keyword  sort  scate ",
      "url": "http://emanual.robotis.com/docs/en/dxl/x/xm430-w350/"
      } ,
  
  
      "docs-kr-dxl-x-xm430-w350":  {
      "title": "XM430-W350",
      "content"	 : "DYNAMIXEL XM430-W350",
      "url": "http://emanual.robotis.com/docs/kr/dxl/x/xm430-w350/"
      } ,
  
  
      "docs-en-parts-communication-zig-110":  {
      "title": "ZIG-100/110A",
      "content"	 : "  ZIG-100 110A   Introduction   introduction      assets images parts communication zig-110_product jpg  Note  ZIG-100 110A is discontinued   noticeZIG-100 110A  using Zigbee communication  makes serial communication  UART  possible   ZIG-100 and ZIG-110A provide equal functions the only difference is the interface with the parts to be installed  The connectable parts are as follows   Please refer to the explanation pages on each part on how to install  - ZIG-100  CM-5  ZIG2Serial  RC-100- ZIG-110A  CM-100  CM-510  CM-530  CM-700One set is composed of two units of ZIG-100 110A for sale  and it can be used immediately without setting separate ID since the ID of other module has been already set from the beginning of purchase     Please be careful not to lose one of the set      Example - Controlling OLLO Bug using Zigbee Communication   ZIG-110A set is used     - Installing ZIG-110A to OLLO Bug Controller CM-100   - Installing ZIG-100 to Wireless Controller RC-100 - Controlling Bioloid Premium Kit in PC using Zigbee Communication   ZIG-110A set is used     - Connecting to the serial port of PC after installing ZIG-100 to ZIG2Serial  - Installing ZIG-110A to Bioloid Premium Kit Controller CM-510   CM530    Specifications   specifications  Item Description  --- ---  Weight ZIG-100  3 1g  ZIG-110A  5 7g  Dimension ZIG-100  19mm   27mm   9mm  6mm  the height excluding connector ZIG-110A  18 1mm   30mm   9 1mm  Frequency 2 4GHz  Bandwidth MAX 250kbps  Operation Voltage 2 7V   3 6V  3 3V Recommended   Current Consumption 30mA  at 3 3V   Default baud rate ZIG-100  57 600bps  ZIG-110A  57 600bps    How to Use   how-to-use    RoboPlusChaning wireless ID of others and setting to broadcasting mode can be done with the two methods as below The appropriate method can be chosen depending on the users  hardware composition      Connected to the Controller- RoboPlus Manager can be executed after connecting ZIG-100 or ZIG-110A - If the appropriate port is selected and it is connected to the controller  the following widow can be seen - In the controller management window  if others  wireless ID is selected  the value can be set in the subsidiary control window on the right - If the Apply button is pressed after setting the desired value  the value is set          assets images parts communication zig-110_01 png      Connected to ZIG2Serial- RoboPlus Manager is executed after connecting ZIG-100 to ZIG2Serial - ZIG2Serial-connected port is selected  and the ZIG2Serial setting icon is clicked - ZigBee setting button is clicked  and the direction indicated  in the window is proceeded - If the setting window is popped up to set the desired value  and then the value is set by clicking change button          assets images parts communication zig-110_02 png     TerminalUse the terminal program for the Zig2Serial and Serial Communication to set the ZIG-100 The directions here are based on the RoboPlus Terminal - Connect the ZIG-100 on the Zig2Serial  then open the terminal program- Open the port using the serial number of the PC which the Zig2Serial is connected       assets images parts communication zig-110_03 png   - While pressing on 1  Shift 1  on your keyboard also press the reset switch on the Zig2Serial  When   is input during the ZIG-100’s booting  the setting mode is set to run  This screen will appear when you succeed   - Baudrate  The baud rate set on the ZIG-100  - My-ID  ZIG-100’s exclusive unchangeable ID  - Dest Addr  ID of the opposite party’s zigbee          assets images parts communication zig-110_04 png   - Set the ZIG-100 using commands  Applicable commands as follows   - I key  Check the ZIG-100 current set value  - D key  Designate the opposite party’s ZIG-100 ID  Must input a hexadecimal  You can access Broadcat Communication Mode by inputting FFFF   - B key  Change the ZIG-100’s baud rate  Must input a hexadecimal              assets images parts communication zig-110_05 png    - W key  Designate Waiting Mode  This can only be done when not in Broadcast Mode   - E key  End Setting Mode  End by pressing the reset switch on the Zig2Serial   Communication Mode   communication-mode Depending on the settings of ZIG-100 and ZIG-110A  11 communication  1N  or  NN communcation can be performed - 11 Communication  - From a pair of ZIG-100 or the set value of ZIG-110A module  If one and the other s wireless ID is pointing each other  it becomes 11 communication   - If the power is impressed at the beginning  red LED flickers  and shortly it is recognized  the red LED is turned on continuously  - 1N Communication  - ZIG-100 module can be set to Waiting Mode   - The module of Waiting Mode ignores others  ID   - The Waiting module of other ZIG-100 and ZIG-110A module must be set to others  ID   - Multiple ZIG-100 and ZIG-110A module can set Waiting module using others  ID   - If the power is impressed at the beginning  red LED filickers  and then if the module of Waiting mode and the module indicating the Waiting mode module recognize each other  the red LED is turned on continuously   - At this moment  once it is connected  the connection is continued unless the power is turned off   - If multiple modules try to connect to the module of Waiting mode at the same time  it continues the comunication with the first connected module   - How to set to Waiting mode is as below   - Communicates with the initial connected module other modules  signal maintain the standby status          assets images parts communication zig-110_06 png  - NN Communication  - ZIG-100 or ZIG-110A module can be set to Broadcasting mode   - If it is se to Broadcasting mode  all modules set to Broadcasting mode transmits and receives their data   - Generally it is used to transmit a command from a module to all other modules   - ZIG-110A  Broadcast channel is unchangeable  Default Value  4   - ZIG-100  The broadcast channel can be changed based on the zigbee s pin status  - ZIG-110A can be entered by setting the ID of the other party to hexadecimal FFFF    Pinout   pinout    ZIG-100     assets images parts communication zig-110_07 png  1  GND  Ground Level of Zigbee Module  0v 2  VCC  Supply Voltage of Zigbee Module   2 7 3 6V  3  LED  LED to inform the connection stautus of Zigbee Module4   RESET  Used to reset Zigbee Module  Also  used when it is entered Zigbee setting mode 5  RXD  Receive Signal Terminal of Zigbee Module6  TXD  Transmit Signal Terminal of Zigbee Module7  CHANNEL_SEL1  Used in Broadcasting Mode8  CHANNEL_SEL2  Used in Broadcasting Mode※ ZIG-100 pin status according to the Broadcasting Channel information Channel Pin Status  --- ---  1 CHANNEL_SEL1    LowCHANNEL_SEL2    Low  2 CHANNEL_SEL1    HighCHANNEL_SEL2    Low  3 CHANNEL_SEL1    LowCHANNEL_SEL2    High  4 CHANNEL_SEL1    HighCHANNEL_SEL2    High     ZIG-110A     assets images parts communication zig-110_08 jpg 1  RXD  Receive Signal Terminal of Zigbee Module2  TXD  Transmit Signal Terminal of Zigbee Module3  VCC  Supply Voltage of Zigbee Module   2 7 3 6V  4  GND  Ground Level of Zigbee Module  0v   Warning  Make connections to the controlled while unpowered  Making connections while the controller is powered may cause it to malfunction or and damage   notice--warning    Tutorials   tutorials - Zigbee SDK    Control zigbee via  Zigbee SDK   C language  Zigbee SDK   docs en software sdk zigbee_sdk ",
      "url": "http://emanual.robotis.com/docs/en/parts/communication/zig-110/"
      } ,
  
  
      "docs-en-parts-communication-zig2serial":  {
      "title": "ZIG2Serial",
      "content"	 : "  ZIG2Serial   Introduction   introduction      assets images parts communication zig2serial_product png - Chaning the ID of ZIG-100  the ID can be changed through  RoboPlus Manager  - Serial communication with Bioloid through Zigbee communcation in PC  - The program for PC must be created separately   - Communication test can be done with RoboPlus Manager    Specifications   specifications  Item Description  --- ---  Weight 11 12g  Dimension 56mm x 34mm x 12mm  Operating Voltage 4 5V   5 5V  Baud Rate 57 600bps    Layout   layout      assets images parts communication zig2serial_01 png  Item Description  --- ---  Communication Status Display LED If there is an outgoing signal  through ZIG-100 in RS-232  TXD is turned on if there is an incoming signal through ZIG-100  RXD is turned on   ZIG-100 Connector It is to connect ZIG-100 to ZIG2Serial   ZIG-100 Status Display LED The status of ZIG-100 is displayed - If it is turned off  ZIG-100 is not connected or in set status - If it is turned on  It is connected to other ZIG-100 and thecommunication is ready - If It  flickers  Other ZIG-100 has not been found   Reset Switch It is used when ZIG-100 is rebooted   Power Connector The power of 5V is needed to operate ZIG2Serial  The user can supply power using this connector  If it is connected to USB2Dynamixel  a separate power supply is not necessary   RS232 Connector It can be connected to RS-232 port of PC     Pinout   pinout      assets images parts communication zig2serial_02 png    How to Use   how-to-use     Connect to PC   connect-to-pc There is RS-232 Connector for communication in PC it is called serial port  RS-232 connector of ZIG2Serial can be connected here   If there is no serial port in PC  USB2Serial converter must be purchased      Supply Power   supply-power The power of 5V mus be supplied to operate ZIG2Serial   The power can be supplied using the power connector of ZIG2Serial   The cable for power connection must be made referring to the pin arrangement as below      assets images parts communication zig2serial_03 png   Zero ohm resistor   must be attached or connected by soldering on the location of resistor for external power to supply the external power  If  USB2Dynamixel  products of Robotis are used  those products can be used without supplying separate power since the power is supplied from USB2Dynamixel to ZIG2Serial   Warning  If the resistor for external power connection is connected  please use after removing the resistor   notice--warning     assets images parts communication zig2serial_04 png     Connect ZIG-100   connect-zig-100 Please be careful with the direction of ZIG-100 when it is connected      assets images parts communication zig2serial_05 png     Select Broadcast Channel   select-broadcast-channel You can select the Broadcast channel on the ZIG-100 by using the CHANNEL_SEL 1 2 pins   The connection status must be changed to select the channel on the Zig2Serial      assets images parts communication zig2serial_06 png - Open is eliminating the lead which is not connected - Short is using the lead to connecting it - The resistance on the R5 and R6 is 0Ω  Thus you can eliminate or short the lead - The default setting of the Zig2Serial is set at channel  1 and R5  R6  and R7 are short  Easily select channel  1 and  4 by opening and shorting the lead on R7  Note  When the ZIG-100 is mounted on the CM-5  the broadcast channel to set at  1  If the channel of the Zig2Serial is set differently  it will communicate with the CM-5 in broadcast communication mode   notice Channel Connection Status of the Zig2Serial  --- ---  1 R7    ShortR6    ShortR5    Short  2 R7    ShortR6    OpenR5    Short  3 R7    ShortR6    ShortR5    Open  4 R7    ShortR6    OpenR5    Open  4 R7    OpenR6    Don’t careR5    Don’t care    Tutorials   tutorials - RoboPlus Manager  The set value of Zig-100 and Zig-110 can be set through  RoboPlus Manager   - Zigbee SDK  Zigbee can be controlled through  Zigbee SDK  in C language    Circuit   circuit      assets images parts communication zig2serial_07 gif    Videos   videos  RoboPlus Manager   docs en software rplus1 manager  USB2Dynamixel   docs en parts interface usb2dynamixel  Zigbee SDK   docs en software sdk zigbee_sdk ",
      "url": "http://emanual.robotis.com/docs/en/parts/communication/zig2serial/"
      }
}
