{
  
      "404-html":  {
        "title": "",
      "content"	 : "Sorry, but the page you were trying to view does not exist — perhaps you can try searching for it above.",
        "url": " http://localhost:4000/404.html"
      } ,
  
      "docs-kr-software-rplus2-manager-advanced":  {
        "title": "R+Manager 2.0",
      "content"	 : "고급 기능XM/XH 시리즈 사용전 준비XM/XH 시리즈를 R+Task2.0이나 R+Motion2.0에서 사용하기 위해서는 두 가지 사전준비를 거쳐야 합니다.H/W 준비하기      아래 그림처럼 OpenCM9.04과 XM시리즈 외에 “OpenCM 485 EXP 보드” 가 필요합니다.        아래 3가지를 케이블로 연결합니다.  Dynamixel Channel 설정하기      R+ Manager 2.0을 실행하여 Dynamixel2.0 제품을 선택한 후, 업데이트 &amp;amp; 테스트 메뉴를 실행합니다.        OpenCM9.04에 LN-101 또는 BT-210(혹은 BT-110)을 사용하여 PC와 연결한 후, OpenCM 485 EXP의 전원을 켭니다.      안내에 따라 제품을 검색하면 OpenCM9.04가 검색됩니다. (처음에는 OpenCM9.04의 Dynamixel Channel 값이 Default로 설정되어 있어 XM/XH시리즈가 검색되지 않습니다.)        제품을 업데이트하는 과정을 거치면 컨트롤 테이블이 실행됩니다.      컨트롤 테이블 항목에서 Dynamixel Channel 값을 EXP Board로 설정한 후 저장합니다.        설정이 완료되면 컨트롤 테이블 창을 닫고, OpenCM 485 EXP의 전원을 껐다가 켭니다.(이때, 재부팅되면서 OpenCM9.04의 미니 TTL버스가 비활성화되고 OpenCM 485 EXP의 다이나믹셀 버스가 활성화 됩니다.)      업데이트 &amp;amp; 테스트 메뉴를 다시 실행하여 XM/XH시리즈가 정상적으로 검색되는지 확인합니다.        설정이 완료되면 R+ Task 2.0과 R+ Motion 2.0에서 XM/XH 시리즈를 사용할 수 있게 됩니다.(R+ Task 2.0 v2.1.0, R+ Motion 2.0 v2.4.0 이상 버전에서 지원)컨트롤 아이템 값 변경      마우스 왼쪽 버튼 드래그로 변경하기 (값을 크게 변경할 때 사용합니다.)            마우스 휠로 변경하기 (값을 조금 키우거나 줄일 때 사용합니다.)            키보드 방향키로 변경하기 (값을 미세하게 키우거나 줄일 때 사용합니다.)            값 직접 입력하기 (간단한 연산 식(덧셈, 뺄셈)의 입력이 가능합니다.)      펌웨어 정보 확인제품의 펌웨어 버전, 배포일, 업데이트 노트를 확인하는 기능입니다.  홈 탭으로 이동한 후, 펌웨어 정보를 확인할 제품을 선택합니다.      우측 상단의 “펌웨어 정보” 버튼을 클릭합니다.            선택된 제품의 펌웨어 버전, 배포일, 업데이트 노트를 확인할 수 있습니다.      블루투스로 펌웨어 관리하기BT-210, BT-110을 이용하면 무선으로 펌웨어 관리를 진행하실 수 있습니다. (BT-410의 경우 무선 펌웨어 관리 기능을 제공하지 않습니다.)다음 설명에 따라 블루투스 시리얼 포트를 추가하세요. (Windows10 기준)  제어기에 BT-210(또는 BT-110)을 연결하고 제어기의 전원을 켭니다.      윈도우 시작 버튼을 클릭한 후, 설정 메뉴를 클릭합니다.            장치 메뉴를 클릭합니다.         좌측의 Bluetooth를 선택한 후, Bluetooth 장치를 켭니다.      검색된 블루투스 모듈을 찾아 선택한 후, 연결 버튼을 클릭합니다.            장치 암호입력란에 0000을 입력한 후, 다음 버튼을 클릭합니다.             페어링이 완료되면 페어링된 장치를 선택한 후, 하단의 “추가 Bluetooth 옵션”을 클릭합니다.            COM 포트 탭을 클릭한 후, 송신 포트의 포트 번호를 확인합니다. (아래 그림에서는 COM7)             R+ Manager 2.0에서 설치된 블루투스 포트를 선택하면 무선으로 관리 기능을 사용할 수 있습니다.      ",
        "url": " http://localhost:4000/docs/kr/software/rplus2/manager/advanced/"
      } ,
  
      "docs-en-software-opencm-ide-api-reference":  {
        "title": "OpenCM IDE",
      "content"	 : "API ReferencesEEPROM ClassThe STM32 micro-processor of OpenCM9.04 will read and write user data directly on the flash memory.Flash memory reads and writes by unit of a page so the EEPROM Class can be used to permanently save user data by unit of bytes.Flash memory also preserves its data even if the power is turned off.From the total of 128Kbyte of flash memory of the OpenCM9.04, the EEPROM Class can only use 2Kbyte (0x0801F800~0x08001FFFF). 2Kbyte corresponds to 2 Pages.class EEPROMThis is the EEPROM Class, and since it is not predefined you need to create an instance variable in order to use it.void EEPROM::begin()Performs initialization for the access of the flash memory. In order to use EEPROM this must be performed in setup().uint16 EEPROM::write(int vAddress, int data)This is the method used to write on the 2kbyte of EEPROM field assigned to the flash memory of STM32. EEPROM data is composed as an address-data pair. The address uses an unsigned integer value of 2 bytes arbitrarily and saves them in order.  vAddress : A virtual address value composed of an unsigned integer value of 2 bytes. Access is made by vAddress when reading data.  data : 2byte data to be saved in the virtual address(vAddress).int EEPROM::read(int vAddress)Reads and returns the data saved in the virtual address vAddress.void EEPROM::erase(int page)Erases EEPROM by unit of a page(1Kbyte).void EEPROM::eraseAll()Erases all the pages of EEPROM.ExampleAn instance variable of the EEPROM Class has to be defined in order to use the EEPROM memory. It is provided in the form of a library so it is necessary to write #include “EEPROM.h”.#include &quot;EEPROM.h&quot;EEPROM myEEPROM;#include &quot;EEPROM.h&quot;EEPROM myEEPROM;void setup(){    myEEPROM.begin();  for(int i=0;i &amp;lt; 10;i++){    myEEPROM.write(i,i*2);  // write i*2 to virtual address 0~9  }}void loop() {for(int i=0;i &amp;lt; 10;i++){    SerialUSB.print(&quot;EEPROM Example = &quot;);    SerialUSB.println(myEEPROM.read(i));  // read data from virtual address 0~9  }}BKP ClassThe STM32 micro-processor of OpenCM9.04 contains ten Backup Register(BKP) memories of 16bit each that can save user data.The Backup Register memory preserves the data as long as the power is maintained so even if the processor is restarted by a hard or soft reset the data will be preserved.However completely removing the power will make the data disappear. The BKP memory is very useful when using data from previous operational conditions even after a system reset.class BKPThis is the BKP(Backup Register) Class, and since it is not predefined you need to create an instance variable in order to use it.void BKP::begin()Set up a BKP object for controlling backup register. This method must be called before attempting to use the BKP object (typically, you call this in your setup() function).uint16 BKP::write(uint8 reg, uint16 wData)This is the method used to save 2byte(16bit) data on the Backup Register.  reg : This is the Backup Register address and a value between 1 and 10 can be used.  wData : This signifies the 2byte(16bit) data to be saved in the Backup Register.void BKP:: write(uint8 reg, uint8 bData)This is the method used to save a 1byte data on the Backup Register.  reg : This is the Backup Register address and a value between 1 and 10 can be used.  bData : This signifies a 1byte(8bit) data to be saved in the Backup Register.void BKP:: write(uint8 reg, int wData)This is the method used to save an Integer(4byte) data on the Backup Register. It does not save the whole of the 4bytes but rather only the low-order 2bytes, so you must be cautious of data loss.  reg : This is the Backup Register address and a value between 1 and 10 can be used.  wData : This signifies a Integer data to be saved in the Backup Register.void BKP::enable()You must use enable() in order to write data in the Backup Register. However reading data can be done regardless of the use of enable().void BKP::disable()You must use disable() after you are done writing in the Backup Register. Again, reading data can be done regardless of the use of disable().ExampleAn instance variable of the BKP Class has to be defined in order to use the BKP memory. It is provided in the form of a library so it is necessary to write #include “BKP.h”.#include &quot;BKP.h&quot;BKP BKP_MEMORY;You must use the enable() method to activate the Backup Register in order to have write access to the BKP memory. After you finish with the write access you must use the disable() method to deactivate the Backup Register. You can use the read() method to read data regardless of the use of enable() or disable().void setup() { /* Initialize clock and registers for BKP*/  BKP_MEMORY.begin();  /* If you want to write data to BKP registers, you need to execute enable method */  BKP_MEMORY.enable();  for(i=1; i&amp;lt;11;i++){    BKP_MEMORY.write(i,i*10);//CM-900 and CM-904 has only 1~10 BKP registers(16-bit)  }  /* After writing data, must be disabled writing data to BKP Register*/BKP_MEMORY.disable();}void loop() {for(i=1; i&amp;lt;11;i++){    /* You can check the data written in setup() using SerialUSB*/    SerialUSB.print(&quot;BKP Memory example = &quot;);    /* Just to read data from BKP, pass BKP register number(1~10) to read() method */    SerialUSB.println(BKP_MEMORY.read(i));  }}RC100 ClassThis is a Class that facilitates the use of RC100 in OpenCM9.04 and CM-900. It can be operated in two modes as shown below.  Remote control using Zigbee or Bluetooth  Remote control using InfraredEach button of the RC100 is already defined as shown below, making them convenient to use.#define RC100_BTN_U       (1)#define RC100_BTN_D       (2)#define RC100_BTN_L        (4)#define RC100_BTN_R       (8)#define RC100_BTN_1       (16)#define RC100_BTN_2       (32)#define RC100_BTN_3       (64)#define RC100_BTN_4       (128)#define RC100_BTN_5       (256)#define RC100_BTN_6       (512)class RC100This is the RC100 Class, and since it is not predefined you need to create an instance variable in order to use it.void RC100::begin(int num)Initializes Serial2 in order to use the RC100.  num : Decides the operation mode of RC100. When set to 1 it will operate by Zigbee or Bluetooth wireless module, and when set to 2 it will operate by Infrared wireless module.void RC100::end(void)Finishes the use of devices of the RC100 Class. It disables the Serial2 device.int RC100::available()If there is a received data from the RC100, then it returns the number of bytes of the received data.int RC100::readData()Returns the analyzed data of the received data packet.int RC100::writeData(int data)Sends a packet data to the RC100. The RC100 cannot receive data so it is used when exchanging data in RC100 packets with a PC or smart device.void RC100::writeRaw(byte temp)Sends raw data as it is, not as a packet data.byte RC100::readRaw(void)Receives raw data as it is without packet analysis.ExampleAn instance variable of the RC100 Class has to be defined in order to use the RC100 Class. It is provided in the form of a library so it is necessary to write #include “RC100.h”.#include &quot;RC100.h&quot;RC100 Controller;As with the Serial device, you use the available() method to detect whether there is any received data and then use the readData() method to receive the real data that has been processed from the received packet data.#include &amp;lt;RC100.h&amp;gt;RC100 Controller;#define WIRELESS_MODE    1#define IR_MODE          2void setup(){    pinMode(BOARD_LED_PIN, OUTPUT);  Controller.begin(IR_MODE); // RC100 init as IR mode}int RcvData =0;void loop() {if(Controller.available()){      RcvData = Controller.readData(); // 패킷 데이터를 분석한 실제 데이터를 받아온다.      SerialUSB.print(&quot;RcvData = &quot;);      SerialUSB.println(RcvData);      if(RcvData &amp;amp; RC100_BTN_1)      digitalWrite(BOARD_LED_PIN,LOW); // RC100의 버튼1을 누르면 Status LED ON      delay(100);   }  digitalWrite(BOARD_LED_PIN,HIGH);}InterruptattachInterrupt()Used to specify a function to call when an external interrupt occurs.void attachInterrupt(uint8 pin, voidFuncPtr handler, ExtIntTriggerMode mode)Registers an interrupt handler on a pin. The interrupt will be triggered on a given transition on the pin, as specified by the mode parameter. The handler runs in interrupt context. The new handler will replace whatever handler is currently registered for the pin, if any.Parameters  pin : OpenCM GPIO pin number.  handler : Function to run upon external interrupt trigger. The handler should take no arguments, and have void return type.  mode : Type of transition to trigger on, e.g. falling, rising, etc.  ExtIntTriggerMode enum : The kind of transition on an external pin which should trigger an interrupt.          RISING : To trigger an interrupt when the pin transitions LOW to HIGH.      FALLING : To trigger an interrupt when the pin transitions HIGH to LOW.      CHANGE : To trigger an interrupt when the pin transitions from LOW to HIGH or HIGH to LOW (i.e., when the pin changes).      Note You should set the pin mode of your desired pin to an input mode (e.g. INPUT, INPUT_PULLUP, INPUT_PULLDOWN). Because the function will run in interrupt context, inside of it, delay() won’t work, and the value returned by millis() will not increment. Serial data received while in the function may be lost. You should declare as volatile any global variables that you modify within the attached function.Return Values  NoneExampleThe following example blinks the LED any time pin 0 changes from HIGH to LOW or vice versa.volatile int state = LOW; // must declare volatile, since it&#39;s                          // modified within the blink() handlervoid setup() {    pinMode(BOARD_LED_PIN, OUTPUT);    pinMode(0, INPUT);    attachInterrupt(0, blink, CHANGE);}void loop() {    digitalWrite(BOARD_LED_PIN, state);}void blink() {    if (state == HIGH) {        state = LOW;    } else { // state must be LOW        state = HIGH;    }}In this example, the function blink() is the interrupt handler. Whenever the state on pin 0 changes, blink() gets called.It reacts to the change by changing the state variable to LOW if it is HIGH, and to HIGH if it is LOW. It then exits,letting the board get back to calling loop(). Since loop() sets the LED pin to whatever state is, changing the voltage on pin 0 will toggle the LED.Serial, SerialUSB attachInterrupt methodYou can attach a user interrupt using the attachIntterupt method in Serial1,2,3 and SerialUSB.void HardwareSerial::attachInterrupt(voidFunctionPtrUart handler)Attach user interrupt to Serial devices, ROBOTIS implementedtypedef void (*voidFuncPtrUart)(byte); void HardwareSerial::detachInterrupt(void)Disable user interrupt to Serial devices, ROBOTIS implementedvoid USBSerial::attachInterrupt(voidFuncPtrUsb handler)Attach user interrupt to USB peripheral.typedef void (*voidFuncPtrUsb)(byte*, byte );void USBSerial::detachInterrupt(void)Disable user interrupt to USB peripheral.See : Serial, SerialUSBdetachInterrupt()Used to disable an interrupt specified with attachInterrupt().void detachInterrupt(uint8 pin)Parameters  pin : Number of pin to configureReturn Values  Noneinterrupts()Re-enables interrupts (after they’ve been disabled by noInterrupts()). Interrupts allow certain important tasks to happen in the background, and certain interrupts are enabled by default.Some functions will not work while interrupts are disabled, and both incoming and outgoing communication may be ignored.Interrupts can slightly disrupt the timing of code, however, and may be disabled for particularly critical sections of code.void interrupts()Parameters  NoneReturn Values  NoneExamplevoid setup() {}void loop() {  noInterrupts();  // critical, time-sensitive code here  interrupts();  // other code here}nolnterrupts()Disables interrupts. Interrupts allow certain important tasks to happen in the background and are enabled by default.Some functions will not work while interrupts are disabled, and incoming communication may be ignored.Interrupts can slightly disrupt the timing of code, however, and may be disabled for particularly critical sections of code.void noInterrupts()Parameters  NoneReturn Values  NoneExamplevoid setup() {}void loop() {  noInterrupts();  // critical, time-sensitive code here  interrupts();  // other code here}License and AttributionPortions of this page were adapted from the Maple Reference Documentation, which is released under aCreative Commons Attribution-ShareAlike 3.0 License.GPIOpinMode()Configure behavior of a GPIO pin.void pinMode(uint8 pin, WiringPinMode mode);Parameters  pin : Number of pin to configure.  mode : Mode corresponding to desired pin behavior(WiringPinMode enum).          OUTPUT : Basic digital output: when the pin is HIGH, the voltage is held at +3.3v (Vcc) and when it is LOW, it is pulled down to ground.      OUTPUT_OPEN_DRAIN : In open drain mode, the pin indicates “low” by accepting current flow to ground and “high” by providing increased impedance. An example use would be to connect a pin to a bus line (which is pulled up to a positive voltage by a separate supply through a large resistor). When the pin is high, not much current flows through to ground and the line stays at positive voltage; when the pin is low, the bus “drains” to ground with a small amount of current constantly flowing through the large resistor from the external supply. In this mode, no current is ever actually sourced from the pin.      INPUT : Basic digital input. The pin voltage is sampled; when it is closer to 3.3v (Vcc) the pin status is high, and when it is closer to 0v (ground) it is low. If no external circuit is pulling the pin voltage to high or low, it will tend to randomly oscillate and be very sensitive to noise (e.g., a breath of air across the pin might cause the state to flip).      INPUT_ANALOG : This is a special mode for when the pin will be used for analog (not digital) reads. Enables ADC conversion to be performed on the voltage at the pin.      INPUT_PULLUP : The state of the pin in this mode is reported the same way as with INPUT, but the pin voltage is gently “pulled up” towards +3.3v. This means the state will be high unless an external device is specifically pulling the pin down to ground, in which case the “gentle” pull up will not affect the state of the input.      INPUT_PULLDOWN : The state of the pin in this mode is reported the same way as with INPUT, but the pin voltage is gently “pulled down” towards 0v.This means the state will be low unless an external device is specifically pulling the pin up to 3.3v, in which case the “gentle” pull down will not affect the state of the input.      INPUT_FLOATING : Synonym for INPUT.      PWM : This is a special mode for when the pin will be used for PWM output (a special case of digital output).      PWM_OPEN_DRAIN : Like PWM, except that instead of alternating cycles of LOW and HIGH, the voltage on the pin consists of alternating cycles of LOW and floating (disconnected).      Return Values  NoneExampleThis example uses pinMode() to set up the pin connected to the built-in LED as an output. Once this is done,digitalWrite() can be used to turn the pin HIGH and LOW, which turn the LED on and off.void setup() {    pinMode(BOARD_LED_PIN, OUTPUT);      // sets the LED pin as output}void loop() {    digitalWrite(BOARD_LED_PIN, HIGH);   // sets the LED on    delay(1000);                         // waits for a second    digitalWrite(BOARD_LED_PIN, LOW);    // sets the LED off    delay(1000);                         // waits for a second}Arduino CompatibilityOn OpenCM, pinMode() supports the INPUT and OUTPUT modes in the same way as Arduino (however, remember that the OpenCM, as a 3.3V device, will only drive 3.3V to an OUTPUT pin that has been set HIGH, instead of 5V like on Arduino).INPUT_ANALOG and PWM modes were added because the OpenCM doesn’t separate the analog and digital pins the same way Arduino does.Unlike on Arduino, you must call pinMode() to set up a pin for these purposes before a call to, e.g., analogRead(). This should only add a few lines to your setup() function.digitalWrite()Write a HIGH or a LOW value to a pin configured as OUTPUT. The pin must have its mode set to OUTPUT or OUTPUT_OPEN_DRAIN. If the pin has been configured as an OUTPUT with pinMode() its voltage will be set to the corresponding value: 3.3V for HIGH, and 0V (ground) for LOW.void digitalWrite(uint8 pin, uint8 value)Parameters  pin : Pin to write to.  value : Either LOW (write a 0) or HIGH (write a 1).          see pinMode()      Return Values  NoneSee Also  pinMode (링크)  digitalRead(링크)  BOARD_LED_PIN(링크)  toggleLED() (링크)  togglePin() (링크)ExampleThe following example sets the built-in LED pin to HIGH, makes a one-second-long delay, sets the pin back to LOW, and delays again, causing a blinking pattern (you could also use toggleLED()):void setup() {  pinMode(BOARD_LED_PIN, OUTPUT);      // sets the digital pin as output}void loop() {  digitalWrite(BOARD_LED_PIN, HIGH);   // sets the LED on  delay(1000);                         // waits for a second  digitalWrite(BOARD_LED_PIN, LOW);    // sets the LED off  delay(1000);                         // waits for a second}digitalRead()Reads the value from a specified digital pin, either HIGH or LOW. The pin must have its mode set to one of INPUT, INPUT_PULLUP, and INPUT_PULLDOWN. If the pin isn’t connected to anything, digitalRead() can return either HIGH or LOW (and this will change in a way that seems random).uint32 digitalRead(uint8 pin)Parameters  pin : Pin to read from (see pinMode())Return Values  LOW(0) or HIGH(1).ExampleThe following example turns the LED on or off when the button is pressed:void setup() {  pinMode(BOARD_LED_PIN, OUTPUT);  pinMode(BOARD_BUTTON_PIN, INPUT_PULLDOWN);}void loop() {  int val = digitalRead(BOARD_BUTTON_PIN);   // reads the input pin  digitalWrite(BOARD_LED_PIN, val); //write val to BOARD_LED_PIN}analogRead()Read an analog value from pin. This function blocks during ADC conversion, and has 12 bits of resolution. The pin must have its mode set to INPUT_ANALOG.Reads the value from the specified analog pin. The OpenCM boards contain 16-channel, 12-bit analog to digital converters.This means that a converter will map input voltages between 0 and 3.3 volts into integer values between 0 and 4095.However, a number of factors interfere with getting full accuracy and precision.The Arduino board contains a 6 channel (8 channels on the Mini and Nano, 16 on the Mega), 10-bit analog to digital converter with an input voltage range of 0V–5V.This means that it will map input voltages between 0 and 5 volts (which is larger than OpenCM’s range of 0V-3.3V) into integer values between 0 and 1023 (which is smaller than the OpenCM’s range of 0–4095).uint16 analogRead(uint8 pin)Parameters  pin : Pin to read from.(see pinMode())The pin parameter is the number of the analog input pin to read from.The pins which support analog to digital conversion have ANALOG IN printed in silkscreen above them in the OpenCM9.04 PCB’s TOP-side.Return Values  Converted voltage, in the range 0–4095, (i.e. a 12-bit ADC conversion).Exampleint analogPin = 3;     // Potentiometer wiper (middle terminal) connected                       // to analog pin 3. outside leads to ground and +3.3V.                       // You may have to change this value if your board                       // cannot perform ADC conversion on pin 3.int val = 0;           // variable to store the value readvoid setup() {  pinMode(analogPin, INPUT_ANALOG); // set up pin for analog input}void loop() {  val = analogRead(analogPin);    // read the input pin  SerialUSB.println(val);         // print the value, for debugging with  delay(100);                     // a serial monitor}analogWrite()analogWrite() is used to create a PWM wave on a pin. You can use this to make an LED get brighter or dimmer, control a servomotor, etc.  analogWrite() is an alias for pwmWrite()you must set up the pin for PWM output using pinMode(), with argument PWM. This also means that you can’t later call digitalRead() or digitalWrite() on that pin(unless some time in between, you use pinMode() to reconfigure that pin for INPUT or OUTPUT; see the pinMode() page for more information).void analogWrite(uint8 pin, uint16 duty_cycle)Parameters  pin : PWM output pin  duty_cycle : Duty cycle to set. Using Arduino’s analogWrite(), the duty cycle ranges between 0–255 (always off – always on). Using OpenCM’s analogWrite() or pwmWrite(), the duty cycle ranges from 0–65,535 by defaultReturn Values  NoneExampleSets the output to the LED proportional to the value read from the potentiometer:int analogPin = 3;    // potentiometer connected to analog pin 3void setup() {  pinMode(BOARD_LED_PIN, PWM);   // sets the LED pin as output  pinMode(analogPin, INPUT_ANALOG); // sets the potentiometer pin as                                    // analog input}void loop() {  int val = analogRead(analogPin);        // read the input pin  analogWrite(BOARD_LED_PIN, val * 16);  // analogRead values go from 0                                      // to 4095, pwmWrite values                                      // from 0 to 65535, so scale roughly}Arduino CompatibilityThe frequency of the PWM signal (i.e., the frequency of a complete on/off cycle) on the Arduino is approximately 490 Hz.On the Maple, the frequency is configurable, defaulting to about 1100 Hz, or 1.1 KHz. This is because the PWM frequency is the frequency of the timer which controls PWM output on the particular pin (the PWM tutorial has the details).If your application definitely requires Arduino’s PWM frequency, then the steps are:  Figure out which timer controls PWM output on your pin (your board’s Timer Pin Map is your friend here).  Let’s say it’s timer n, where n is some number. You’ll then need to put “HardwareTimer timer(n);” with your variables, as described in the HardwareTimer reference.  In your setup(), put “timer.setPeriod(2041);”. This will set the timer’s period to approximately 2041 microseconds, which is a frequency of approximately 490 Hz.Be aware that this will change the period for the entire timer, and will affect anything else in your program that depends on that timer. The important examples are timer interrupts and PWM.See Also  PWM  pwmWrite()togglepin()Switches a digital output pin from HIGH to LOW, or from LOW to HIGH. The pin must have its mode set to OUTPUT.void togglePin(uint8 pin)Parameters  pin : the pin to toggle. If the pin is HIGH, set it LOW. If it is LOW, set it HIGH (see pinMode())Return Values  NoneSee Also  toggleLED()ExampleThis example uses togglePin() to pin 14, pin 14 is connected to built-in LED.void setup() {    pinMode(14, OUTPUT);      // sets pin 14 as output}void loop() {    togglePin(14); // toggles pin 14 every 100ms intervals    delay(100);                         }toggleLED()Toggle the built-in LED: switch it from off to on, or on to off.The LED must its mode set to OUTPUT. This can be accomplished portably over  OpenCM9.04 and CM-900 by calling pinMode(BOARD_LED_PIN, OUTPUT) before calling this function.void toggleLED()Parameters  None(see pinMode())Return Values  NoneExampleThis example sets up the board’s LED pin for output, then toggles the LED every 100 milliseconds:void setup() {    pinMode(BOARD_LED_PIN, OUTPUT);}void loop() {    toggleLED();    delay(100);}See Also  BOARD_LED_PIN  togglePin()License and Attribution Portions of this page were adapted from the Leaflabs Reference Documentation, which is released under a Creative Commons Attribution-ShareAlike 3.0 License.OLLO ClassThis is a Class that facilitates the use of the 5-pin port of OpenCM9.04. Does not support CM-900.class OLLOThis is the OLLO Class, and since it is not predefined you need to create an instance variable in order to use it.void OLLO::begin(int devNum)Initializes the OLLO Class.  devNum : Inputs the number of the 5-pin port of OpenCM9.04.void OLLO::begin(int devNum, OlloDeviceIndex device_index)Initializes the OLLO Class.  devNum : Inputs the number of the 5-pin port of OpenCM9.04.  device_index : Specifies the type of device connected to the 5-pin port. For the OlloDeviceIndex data type please refer below.typedef enum OLLO_DEVICE_INDEX {    IR_SENSOR,    TOUCH_SENSOR,    GYRO_SENOSR,    DMS_SENSOR,    PIR_SENSOR,    MAGNETIC_SENSOR,    COLOR_SENSOR,    ULTRASONIC_SENSOR,    LED_DISPLAY,    TEMPERATURE_SENSOR}OlloDeviceIndex;void OLLO::begin(int devNum, OlloDeviceIndex device_index, voidFuncPtr handler)Initializes the OLLO Class. This initialization method is useful when using a touch sensor in an interrupt method.  devNum : Inputs the number of the 5-pin port of OpenCM9.04.  device_index : Specifies the type of device connected to the 5-pin port.  handler : Designates the interrupt handler to be connected with the touch(button) sensor. Please refer below for the handler’s function prototype.int OLLO::read(int devNum)Reads and returns the ADC value of the device connected to the corresponding port.  devNum : Inputs the number of the 5-pin port of OpenCM9.04.int OLLO::read(int devNum, OlloDeviceIndex device_index)Reads and returns the ADC value of the device connected to the corresponding port  devNum : Inputs the number of the 5-pin port of OpenCM9.04.  device_index : Specifies the type of device connected to the 5-pin port.void OLLO::write(int devNum, uint8 leftVal, uint8 rightVal)This is a method to digitally output the SIG1, SIG2 pins of the corresponding port. This method is useful when the device to be used is an LED Display.  devNum : Inputs the number of the 5-pin port of OpenCM9.04. (1~4)  leftVal : Sets the SIG1 pin as HIGH/LOW. You can put in either 0 or 1.  rightVal : Sets the SIG2 pin as HIGH/LOW. You can put in either 0 or 1.void OLLO::write(int devNum, uint8 leftVal, uint8 centerVal, uint8 rightVal)This is a method to digitally output the SIG1, ADC, SIG2 pins of the corresponding port.  devNum : Inputs the number of the 5-pin port of OpenCM9.04. (1~4)  leftVal : Sets the SIG1 pin as HIGH/LOW. You can put in either 0 or 1.  centerVal : Sets the ADC pin as HIGH/LOW. You can put in either 0 or 1.  rightVal : Sets the SIG2 pin as HIGH/LOW. You can put in either 0 or 1.void OLLO::writeLED(int devNum, uint8 leftVal, uint8 rightVal)This is a method to control the LED module.  devNum : Inputs the number of the 5-pin port of OpenCM9.04. (1~4)  leftVal : Used to turn the left LED on/off. The LED is turned on when set as LOW, and the LED is turned off when set as HIGH.  rightVal : Used to turn the right LED on/off. The LED is turned on when set as LOW, and the LED is turned off when set as HIGH.ExampleAn instance variable of the OLLO Class has to be defined in order to use the OLLO memory. It is provided in the form of a library so it is necessary to write #include “OLLO.h”.#include &quot;OLLO.h&quot; OLLO myOLLO;The instructions to use the basic sensor is shown below.#include &amp;lt;OLLO.h&amp;gt;OLLO myOLLO;#define PORT1 1#define PORT2 2void setup(){    myOLLO.begin(PORT1);  //Performs basic initialization of Port 1.myOLLO.begin(PORT2);  //Performs basic initialization of Port 2.}void loop() {SerialUSB.print(&quot;X-Axis ADC = &quot;);  SerialUSB.print(myOLLO.read(PORT1)); //read X-Axis ADC value from OLLO port 1  SerialUSB.print(&quot;  Y-Axis ADC = &quot;);  SerialUSB.println(myOLLO.read(PORT1)); //read Y-Axis ADC value from OLLO port 2  delay(60); //Prevents fast output.}An example of using the IR Sensor module is shown below.#include &amp;lt;OLLO.h&amp;gt;OLLO myOLLO;#define PORT1 1void setup(){    myOLLO.begin(PORT1, IR_SENSOR);//Initializes Port 1 as an IR sensor module.}void loop() {SerialUSB.print(&quot;IR Sensor ADC = &quot;);  SerialUSB.println(myOLLO.read(PORT1, IR_SENSOR)); //read ADC value from OLLO port 1delay(60); //Prevents fast output.}#include &amp;lt;OLLO.h&amp;gt;OLLO myOLLO;void setup(){  myOLLO.begin(3);//LED Display Module must be connected at port 3.}void loop(){  //write( port number, left LED(blue), right LED(yellow) )  myOLLO.write(3,1,0);// or use myOLLO.writeLED(3,1,0);  delay(100);  myOLLO.write(3,0,1);// or use myOLLO.writeLED(3,0,1);  delay(100);}The Color Sensor is initialized with COLOR_SENSOR.The read() method returns the following result. The color value that is detected from Color Read= is output.  0 -&amp;gt; Error  1 -&amp;gt; White  2 -&amp;gt; Black  3 -&amp;gt; Red  4 -&amp;gt; Green  5 -&amp;gt; Blue  6 -&amp;gt; Yellow#include &amp;lt;OLLO.h&amp;gt;OLLO myOLLO;void setup(){  myOLLO.begin(2,COLOR_SENSOR);//OLLO Color Module must be connected at port 2.  }void loop(){  SerialUSB.print(&quot;COLOR Read = &quot;);  SerialUSB.println(myOLLO.read(2, COLOR_SENSOR));  delay(100);}Serial ClassSerial Class(Seial1, Serial2, Serial3)All of the Serial[1,2,3] objects are instances of the HardwareSerial class, which is documented in this section. (This means that you can use any of these functions on any of Serial1, Serial2, and Serial3).class HardwareSerialSerial port class. Predefined instances are Serial1, Serial2, and Serial3.void HardwareSerial::begin(unsigned int baud)Set up a HardwareSerial object for communications. This method must be called before attempting to use theHardwareSerial object (typically, you call this in your setup() function).void HardwareSerial::end()Disables the USART associated with this object, allowing any associated communication pins to be used for other purposes.unsigned int HardwareSerial::available()Returns the number of bytes available for reading.unsigned char HardwareSerial::read()Returns the next available, unread character. If there are no available characters(you can check this withavailable), the call will block until one becomes available.void HardwareSerial::flush()Throw away the contents of the serial port’s receiver (RX) buffer. That is, clears any buffered characters, so that the next character read is guaranteed to be new.void HardwareSerial::print(unsigned char b)Print the given byte over the USART.void HardwareSerial::print(char c)Print the given character over the USART. 7-bit clean characters are typically interpreted as ASCII text.void HardwareSerial::print(const char* str)Print the given null-terminated string over the USART.void HardwareSerial::print(int n)Print the argument’s digits over the USART, in decimal format. Negative values will be prefixed with a ‘-‘character.void HardwareSerial::print(unsigned int n)Print the argument’s digits over the USART, in decimal format.void HardwareSerial::print(long n)Print the argument’s digits over the USART, in decimal format. Negative values will be prefixed with a ‘-‘character.void HardwareSerial::print(unsigned long n)Print the argument’s digits over the USART, in decimal format.void HardwareSerial::print(long n, int base)Print the digits of n over the USART, in base base (which may be between 2 and 16). The base value 2 corresponds to binary, 8 to octal, 10 to decimal, and 16 to hexadecimal. Negative values will be prefixed with a’-‘ character.void HardwareSerial::print(double n)Print n, accurate to 2 digits after the decimal point.void HardwareSerial::println(char c)Like print(c), followed by “rn”.void HardwareSerial::println(const char* c)Like print(c), followed by “rn”.void HardwareSerial::println(unsigned char b)Like print(b), followed by “rn”.void HardwareSerial::println(int n)Like print(n), followed by “rn”.void HardwareSerial::println(unsigned int n)Like print(n), followed by “rn”.void HardwareSerial::println(long n)Like print(n), followed by “rn”.void HardwareSerial::println(unsigned long n)Like print(n), followed by “rn”.void HardwareSerial::println(long n, int base)Like print(n, b), followed by “rn”.void HardwareSerial::println(double n)Like print(n), followed by “rn”.void HardwareSerial::println()Prints “rn” over the USART.void HardwareSerial::write(unsigned char ch)Sends one character over the USART. This function is currently blocking. This is a low-level function. One of the print() or println() functions is likely to be more useful when printing multiple characters, when formatting numbers for printing, etc.void HardwareSerial::write(const char* str)Send the given null-terminated character string over the USART. This is a low-level function. One of the print() or println() functions is likely to be more useful when printing multiple characters, when formatting numbers for printing, etc.void HardwareSerial::write(void* buf, unsigned int size)Writes the first size bytes of buf over the USART. Each byte is transmitted as an individual character. This is a low-level function. One of the print() or println() functions is likely to be more useful when printing multiple characters, when formatting numbers for printing, etc.int HardwareSerial::txPin()Return the number of the TX (transmit) pin.int HardwareSerial::rxPin()Return the number of the RX (receive) pin.void HardwareSerial::attachInterrupt(voidFunctionPtrUart handler)Attach user interrupt to Serial devices, ROBOTIS implementedvoid HardwareSerial::detachInterrupt(void)Disable user interrupt to Serial devices, ROBOTIS implementedArduino CompatibilityUnlike the Arduino, none of the OpenCM’s serial ports is connected to the USB port on the OpenCM board. If you want to communicate using the built-in USB port, use SerialUSB instead. You will need an additional USB-to-serial adapter to communicate between a USART and your computer.Getting StartedFirst, decide which serial port you wish to use, and connect its pins to the device you’re communicating with. (The TX and RX pins for a serial port are labeled on your board’s silkscreen; for example, serial port 3 has pins labeled RX3”, You can easily use the communication module with the 4pin communication port.).The variable for controlling a serial port is the word Serial, plus the serial port’s number. For example,  you can control serial port 1 with the variable Serial1, serial port 2 with Serial2, and so on.In order to get started using your serial port, you’ll first need to turn it on. Do this by calling your serial port’s begin() function, giving it the baud rate you wish it to communicate at. Put this call to begin() in your setup(), like in the following example:One common use for serial ports is to print strings and other debugging information to a computer. You can print numbers or strings using print() and println() in your loop():void setup() {    // 57600 is the baud rate to use.  The baud rate determines how    // fast the communication goes.    Serial2.begin(57600);}void loop() {    // Communicate using Serial2 here Serial2.print(&quot;First, print this string.  Then print a number: &quot;);    Serial2.print(42);    Serial2.print(&quot;.  You can print floating point values, too: &quot;);    Serial2.print(3.14);    Serial2.println(&quot;. Using println() instead of print() ends the line.&quot;);    Serial2.println(&quot;This sentence starts on a new line.&quot;);}void setup() {  //Initialize Serial2 as 57600 bps  Serial2.begin(57600);}char temp=0;void loop() {  if(Serial2.available()){  // if data is available from Serial2      temp = Serial2.read();  // read one byte data from Serial2      Serial2.print(temp);    // print out the data to Serial2 device  }}void setup(){  //Serial2 Serial initialize  Serial2.begin(57600);  //You can attach your serial interrupt  //or, also detach the interrupt by detachInterrupt(void) method  Serial2.attachInterrupt(serialInterrupt);  pinMode(BOARD_LED_PIN, OUTPUT);  //toggleLED_Pin_Out}//Serial Interrupt type must have the below proto-type//void interrupt_name (byte variable){}void serialInterrupt(byte buffer){  Serial2.print((char)buffer);}void loop(){  toggleLED();  delay(50);}SerialUSB classUsed for communication between the OpenCM board and a computer.In addition to three serial ports, the OpenCM’s STM32 microprocessor includes a dedicated USB peripheral.This peripheral is used to emulate a regular serial port for use as a terminal and download a program to the board.Library access to the emulated serial port is provided through the SerialUSB object.You can mostly use SerialUSB as a drop-in replacement for Serial1, Serial2, and Serial3.WarningThe SerialUSB functionality includes a 50 millisecond timeout for writes, and does not try to detect if the USB host is “really” connected, or just enumerated and initialized.This means that if you have a number of calls to one of the SerialUSB write() or print() functions in your code, and you are not monitoring SerialUSB on a computer, your program will run much slower than if it is being monitored or totally disconnected (run off of a battery).You can avoid this behavior by deciphering the port status using the DTR and RTS line status (the behavior of these control lines is platform dependent and we no longer interpret them by default).The SerialUSB object is an instance of the USBSerial class, which is documented in this section.This means that you can use any of these functions by writing SerialUSB.functionName(arguments…).For example, to print the message “hello, world!”, you can write USBSerial.println(“hello,world!”).class USBSerialEmulated serial-over-USB class. SerialUSB is the predefined (singleton) instance.USBSerial::begin()Set up the USB peripheral for emulated serial communication. The peripheral is configured this way by default; calling this function should only be necessary if you have disabled the peripheral using SerialUSB.end().USBSerial::end()Disables the USB peripheral. Note that using this function will terminate all USB communications between the OpenCM and the PC; in particular, it implies that you won’t be able to download any new programs without resetting the board or using recovery mode.unsigned int USBSerial::available()Returns the number of bytes available for reading.unsigned char USBSerial::isConnected()Returns 1 if USB is connected to host(or PC), otherwise returns 0.unsigned char USBSerial::read()Returns the next available, unread character. If there are no available characters (you can check this with available), the call will block until one becomes available.USBSerial::print(unsigned char b)Print the given byte over the USB connection.USBSerial::print(char c)Print the given character over the USB connection. 7-bit clean characters are typically interpreted as ASCII text.USBSerial::print(const char* str)Print the given null-terminated string over the USB connection.USBSerial::print(int n)Print the argument’s digits over the USB connection, in decimal format. Negative values will be prefixed with a ‘-‘ character.USBSerial::print(unsigned int n)Print the argument’s digits over the USB connection, in decimal format.USBSerial::print(long n)Print the argument’s digits over the USB connection, in decimal format. Negative values will be prefixed with a ‘-‘ character.USBSerial::print(unsigned long n)Print the argument’s digits over the USB connection, in decimal format.USBSerial::print(long n, int base)Print the digits of n over the USB connection, in base base (which may be between 2 and 16). The base value 2 corresponds to binary, 8 to octal, 10 to decimal, and 16 to hexadecimal. Negative values will be prefixed with a ‘-‘ character.USBSerial::print(double n)Print n, accurate to 2 digits after the decimal point.USBSerial::println(char c)Like print(c), followed by “rn”.USBSerial::println(const char* c)Like print(c), followed by “rn”.USBSerial::println(unsigned char b)Like print(b), followed by “rn”.USBSerial::println(int n)Like print(n), followed by “rn”.USBSerial::println(unsigned int n)Like print(n), followed by “rn”.USBSerial::println(long n)Like print(n), followed by “rn”.USBSerial::println(unsigned long n)Like print(n), followed by “rn”.USBSerial::println(long n, int base)Like print(n, b), followed by “rn”.USBSerial::println(double n)Like print(n), followed by “rn”.USBSerial::println()Prints “rn” over the USB connection.USBSerial::write(unsigned char ch)Sends one character over the USB connection. This function is currently blocking, although nonblocking writes are a planned future extension.This is a low-level function. One of the print() or println() functions is likely to be more useful when printing multiple characters, when formatting numbers for printing, etc.USBSerial::write(const char* str)Send the given null-terminated character string over the USB connection.This is a low-level function. One of the print() or println() functions is likely to be more useful when printing multiple characters, when formatting numbers for printing, etc.USBSerial::write(void* buf, unsigned int size)Writes the first size bytes of buf over the USB connection. Each byte is transmitted as an individual character. This is a low-level function. One of the print() or println() functions is likely to be more useful when printing multiple characters, when formatting numbers for printing, etc.void USBSerial::attachInterrupt(voidFuncPtrUsb handler)Attach user interrupt to USB peripheral.typedef void (*voidFuncPtrUsb)(byte*, byte ); void USBSerial::detachInterrupt(void)Disable user interrupt to USB peripheral.ExampleSafe print: This function should run smoothly and not block; the LED should blink at roughly the same speed whether being monitored, running from battery, or connected but not monitored.#define LED_PIN BOARD_LED_PINvoid setup() {    /* Set up the LED to blink  */    pinMode(LED_PIN, OUTPUT);}void loop() {    // LED will stay off if USB is disconnected(battery power, etc.), and    // will blink quickly if USB is plugged.    if(SerialUSB.isConnected()) {        digitalWrite(LED_PIN, 1);    }    delay(100);digitalWrite(LED_PIN, 0);    delay(100);}volatile int nCount=0;void setup() {  //Initialize USB Serial  SerialUSB.begin();}void loop() {  //print &quot;Hello World!!&quot; to PC though USB Virtual COM port  SerialUSB.println(&quot;Hello World!!&quot;);  SerialUSB.print(&quot;nCount : &quot;); // display nCount variable and increase nCount.  SerialUSB.println(nCount++);//SerialUSB.print(&quot;rn&quot;);      delay(1000);}void setup() {  //Initialize USB Serial  SerialUSB.begin();}char temp=0;void loop() {  if(SerialUSB.available()){  // if data is available from USB      temp = SerialUSB.read();  // read one byte data from SerialUSB      SerialUSB.print(temp);    // print out the data  }}void setup() {  //Initialize USB Serial  SerialUSB.begin();}char temp=0;void loop() {  if(SerialUSB.available()){  // if data is available from USB      temp = SerialUSB.read();  // read one byte data from SerialUSB      SerialUSB.print(temp);    // print out the data  }}void setup(){  //USB Serial initialize  SerialUSB.begin();  //You can attach your serialUSB interrupt  //or, also detach the interrupt by detachInterrupt(void) method  SerialUSB.attachInterrupt(usbInterrupt);  pinMode(BOARD_LED_PIN, OUTPUT);  //toggleLED_Pin_Out}//SerialUSB Interrupt type must have the below proto-type//void interrupt_name (byte* buffer, byte nCount){}//USB max packet data is maximum 64byte, so nCount can not exceeds 64 bytes//int i=0;void usbInterrupt(byte* buffer, byte nCount){  SerialUSB.print(&quot;nCount =&quot;);  SerialUSB.println(nCount);  for(unsigned int i=0; i &amp;lt; nCount;i++)  //printf_SerialUSB_Buffer[N]_receive_Data    SerialUSB.print((char)buffer[i]);  SerialUSB.println(&quot;&quot;);}void loop(){  toggleLED();  delay(100);}License and AttributionPortions of this page were adapted from the Maple Reference Documentation, which is released under a Creative Commons Attribution-ShareAlike 3.0 LicenseAPIpinMode()Configure behavior of a GPIO pin.void pinMode(uint8 pin, WiringPinModemode);Parameters  pin : Number of pin to configure.  mode : Mode corresponding to desired pin behavior.Return Values  NoneExampleThis example uses pinMode() to set up the pin connected to the built-in LED as an output. Once this is done,digitalWrite() can be used to turn the pin HIGH and LOW, which turn the LED on and off.void setup() {  pinMode(BOARD_LED_PIN, OUTPUT);      // sets the LED pin as output}void loop() {  digitalWrite(BOARD_LED_PIN, HIGH);   // sets the LED on  delay(100);                         // waits for a second  digitalWrite(BOARD_LED_PIN, LOW);    // sets the LED off  delay(100);                         // waits for a second}Utilitiesmillis()Returns the number of milliseconds since the board began running the current program. This number will overflow (go back to zero) after approximately 50 days.uint32 millis(void)Parameters  None (See: micros()(링크))Return Values  Returns time (in milliseconds) since the beginning of program execution. On overflow, restarts at 0.ExampleThe following time prints the value returned by millis() roughly once per second:unsigned int time;void setup() {}void loop() {  SerialUSB.print(&quot;Time: &quot;);  time = millis();  // prints time since program started  SerialUSB.println(time);  // wait a second so as not to send massive amounts of data  delay(1000);}Since the return value for millis() is an unsigned long, overflow errors may occur if you try to do math with other data types, such aschars.Also See  micros  delay  delayMicrosecondsmicros()Returns the number of microseconds since the board began running the current program. This number will overflow (go back to zero), after approximately 70 minutes.Note There are 1,000 microseconds in a millisecond, and 1,000,000 microseconds in a second.uint32 micros(void)Parameters  None (See: millis())Return Values  Returns time (in microseconds) since the beginning of program execution. On overflow, restarts at 0.Exampleunsigned int time;void setup() {}void loop() {  SerialUSB.print(&quot;Time: &quot;);  time = micros();  // prints time since program started  SerialUSB.println(time);  // wait a second so as not to send massive amounts of data  delay(1000);}Also See  millis()  delay()  delayMicroseconds()delay()Pauses the program for at least a given number of milliseconds. (There are 1000 milliseconds in a second.)Interrupts, etc. may cause the actual number of milliseconds to exceed ms. However, this function will return no less than ms milliseconds from the time it is called.void delay(unsigned long ms)Parameters  ms : the number of milliseconds to delay. (See: delayMicroseconds())Return Values  NoneExamplevoid setup() {    // set up the built-in LED pin for output:    pinMode(BOARD_LED_PIN, OUTPUT);}void loop() {    digitalWrite(BOARD_LED_PIN, HIGH);   // sets the LED on    delay(1000);                         // waits for a second    digitalWrite(BOARD_LED_PIN, LOW);    // sets the LED off    delay(1000);                         // waits for a second}                                              See Also  millis()  micros()  delayMicroseconds()delayMicroseconds()Pauses the program for the amount of time (in microseconds) specified as parameter.There are a thousand microseconds in a millisecond, and a million microseconds in a second.Interrupts, etc. may cause the actual number of microseconds to exceed us.However, this function will return no less than us microseconds from the time it is called.void delayMicroseconds(uint32 us)Parameters  us : the number of microseconds to delay.Return Values  NoneExampleThe following example shows how to read IR sensor module in ROBOTIS OLLO library.void setup() {    pinMode(17, OUTPUT);      // sets the Emitting-LED pin as outputpinMode(2, INPUT_ANALOG);}void loop() {    digitalWrite(7, HIGH);   // turn on emitting LED    delayMicroseconds(15);            // waits for 15us    int adc_value =anologRead(2);     // read ADC value from receiving LED    SerialUSB.print(“IR ADC = ”);   // print out ADC valueSerialUSB.println(adc_value);digitalWrite(7, LOW); // turn off emitting LED}                                              Arduino CompatibilityROBOTIS cannot guarantee it will behave as the Arduino implementation down to the microsecond, especially for smaller values of us.The longest time delayMicroseconds() can delay is bounded by its argument type and the STM32 clock rate to be (2^32 - 1) / 12 microseconds, or less than 6 minutes. For longer pauses, use of delay() is possible.See Also  millis  micros  delaymin()(Macro) Calculates the minimum of two numbers.#define min(a,b)                ((a)&amp;lt;(b)?(a):(b))Parameters  a : the first number; may be any number or numeric expression  b : the second number; may be any number or numeric expression.Return Values  The smaller of the two numbers.ExamplesensVal = min(sensVal, 100); // assigns sensVal to the smaller of sensVal or 100                             // ensuring that it never gets above 100.Perhaps counter-intuitively, max() is often used to constrain the lower end of a variable’s range, while min() is used to constrain the upper end of the range.Warning Because of the way min() is implemented, avoid using other functions inside the parentheses. It may lead to incorrect results:min(a++, 100);   // avoid this - yields incorrect resultsa++;            // use this instead -min(a, 100);    // keep other operations outside min()Arduino CompatibilityThe OpenCM version of min() is compatible with Arduino and Maple.See Also  max()  constrain()max()(Macro) Calculates the maximum of two numbers.#define min(a,b)                ((a)&amp;lt;(b)?(a):(b))Parameters  a :  the first number; may be any number or numeric expression.  b : the second number; may be any number or numeric expression.Return Values  The larger of the two parameter values.ExamplesensVal = max(senVal, 20); // assigns sensVal to the larger of sensVal or 20                           // (effectively ensuring that it is at least 20)Perhaps counter-intuitively, max() is often used to constrain the lower end of a variable’s range, while min() is used to constrain the upper end of the range.Warning Because of the way max() is implemented, avoid using other functions inside the parentheses. It may lead to incorrect results:max(a–, 0);   // avoid this - yields incorrect resultsa–;           // use this instead -max(a, 0);     // keep other operations outside max()Arduino CompatibilityThe OpenCM version of max() is compatible with Arduino and Maple.See Also  min()  constrain()abs()(Macro) computes the absolute value of a number.#define abs(x) (((x) &amp;gt; 0) ? (x) : -(x))Parameters  x : the number.Return Values  x : if x is greater than or equal to 0.  -x : if x is less than 0.Warning Because of the way abs() is implemented, avoid using other functions or causing side effects inside the parentheses, as it may lead to incorrect results:abs(a++);   // avoid this - yields incorrect resultsabs(a);       // use this instead -a++;          // keep other operations outside abs()Arduino CompatibilityMaple’s implementation of abs() is compatible with Arduino.constrain()(Macro) Constrains a number to be within a range.constrain(x, a, b)Parameters  x : the number to constrain  a : the lower end of the range  b :  the upper end of the rangeReturn Values  x: if x is between a and b  a: if x is less than a  b: if x is greater than bExample// limits range of sensor values to between 10 and 150:sensVal = constrain(sensVal, 10, 150);See Also  min()  max()map()Re-maps a number from one range to another.That is, a value equal to fromStart gets mapped to toStart, a value of fromEnd to toEnd, and other values are mapped proportionatelyDoes not constrain value to lie within [fromStart, fromEnd].If a “start” value is larger than its corresponding “end”, the ranges are reversed, so map(n, 1, 10, 10, 1) would reverse the range [1,10].Negative numbers may appear as any argument.long map(long value, long fromStart, long fromEnd, long toStart, long toEnd)Parameters  value : the value to map.  fromStart : the beginning of the value’s current range.  fromEnd : the end of the value’s current range.  toStart :  the beginning of the value’s mapped range.  toEnd :  the end of the value’s mapped range.Return Values  the mapped value.Example/* Map an ADC reading (12 bits) to 16-bit PWM (0 to 65,535) */void setup() {    pinMode(0, INPUT_ANALOG);    pinMode(9, PWM);}void loop() {    int val = analogRead(0);    val = map(val, 0, 4095, 0, 65535);    analogWrite(9, val);}Discussionmap() does not constrain values to within the range, because out-of-range values are sometimes intended and useful.The constrain()macro may be used either before or after this function, if limits to the ranges are desired.Note that the “lower bounds” of either range may be larger or smaller than the “upper bounds” so that map() may be used to reverse a range of numbers; for example:y = map(x, 1, 50, 50, 1);The function also handles negative numbers well, so that this exampley = map(x, 1, 50, 50, -100);is also valid.The map() function uses integer math (its arguments and return values all have type long), so it will not generate fractions,when the math might indicate that it should do so. Fractional remainders are truncated, and are not rounded or averaged.See Also  constrain()pow()Calculates the value of a number raised to a power.double pow(double x, double y)Compute an exponentiation.Parameters  x : the base. This value cannot be zero if y &amp;lt;= 0. This value cannot be negative if y is not an integral value.  y : the exponent.Return Values  x raised to the power y.Examplevoid setup() {    }void loop() { for(int i=0;i&amp;lt;8;i++){      SerialUSB.println(pow(2,i)); // print out 2^i      delay(100);    }}sqrt()Calculates the square root of a number. Compute the square root of a number.double sqrt(double x)Compute an exponentiation.Parameters  x : The number whose square root to find. This value cannot be negative.Return Values  The square root of x. The return value is never negative.Arduino CompatibilityThe Maple versino of sqrt() is compatible with Arduino.sin()Calculates the sine of an angle, in radians.double sin(double x)Compute an exponentiation.Parameters  x : The radian measure of the angle.Return Values  The sine of x. This value will be between -1 and 1.Arduino CompatibilityThe OpenCM version of sin() is compatible with Arduino.See Also  cos  tan  float  doublecos()Calculates the cosine of an angle, in radians.double cos(double x)Compute an exponentiation.Parameters  x : The radian measure of the angle.Return Values  The cosine of x. This value will be between -1 and 1.Arduino CompatibilityThe OpenCM version of cos() is compatible with Arduino.See Also  cos  tan  float  doubletan()Calculates the tangent of an angle, in radiansdouble tan(double x)Compute an exponentiation.Parameters  x : The radian measure of the angle.Return Values  The tangent of x. There are no limits on the return value of this function.Arduino CompatibilityThe OpenCM version of tan() is compatible with Arduino.See Also  cos  tan  float  doublerandomSeed()randomSeed() initializes the pseudorandom number generator, causing it to start at an arbitrary point in its random sequence. This sequence, while very long, and random, is always the same.void randomSeed(unsigned int seed)Parameters  seed : the number used to initialize the seed; cannot be zero.Return Values  NoneExampleThe following sketch initializes the random seed based on an ADC reading of pin 0.If this pin is unconnected, the Sketch should print different values to the serial monitor each time it is run:long randNumber;void setup() {  pinMode(0, INPUT_ANALOG);  randomSeed(analogRead(0));}void loop() {  randNumber = random(300);  SerialUSB.println(randNumber);  delay(50);}If it is important for a sequence of values generated by random() to differ, on subsequent executions of a sketch, use randomSeed() to initialize the random number generator with a fairly random input, such as analogRead() on an unconnected pin.Conversely, it can occasionally be useful to use pseudorandom sequences that repeat exactly.This can be accomplished by callingrandomSeed() with a fixed number, before starting the random sequence.See Also  random()random()The random() function generates pseudo-random numbersrandom(long max)Same as a call to random(0, max).random(long min, long max)Generate a pseudo-random number with given lower and upper bounds.Parameters  min : Lower bound on the returned value, inclusive  max : Upper bound on the returned value, exclusiveReturn Values  A pseudo-random number in the range [min, max)ExampleThe following sketch initializes the random seed based on an ADC reading of pin 0. If this pin is unconnected, the Sketch should print different values to the serial monitor each time it is run:long randNumber;void setup() {  pinMode(0, INPUT_ANALOG);  randomSeed(analogRead(0));}void loop() {  randNumber = random(300);  SerialUSB.println(randNumber);  delay(50);}See Also  randomSeed()lowByte()Extracts the low-order (rightmost) byte of a variable (e.g. a word).lowByte(x)Parameters  x : a value of any type. However, if a non-integral type is used, the results will be strange.Return Values  The low byte’s value (this will be between 0 and 255).ExampleThis example uses lowByte, highByte to send 1 byte (at a time) to the Goal position address on the Dynamixel control table.Dynamixel Dxl(1);void setup() {    Dxl.begin(1);}int goal_pos = 1023;void loop() {Dxl.writeByte(1,30, lowByte(goal_pos));    Dxl.writeByte(1,31, highByte(goal_pos));     delay(1000);                         // waits for a second}highByte()(Macro) Extracts the second lowest byte of an integral data type.highByte(x)Parameters  x : a value of any integral type.Return Values  Second lowest byte in xExampleThis example uses lowByte, highByte to send 1 byte (at a time) to the Goal position address on the Dynamixel control table.Dynamixel Dxl(1);void setup() {    Dxl.begin(1);}int goal_pos = 1023;void loop() {Dxl.writeByte(1,30, lowByte(goal_pos));    Dxl.writeByte(1,31, highByte(goal_pos));     delay(1000);                         // waits for a second}Other exampleint x = 0xDEADBEEF;SerialUSB.println(x, HEX); // prints &quot;BE&quot;bitRead()(Macro) Gets the value of a bit in a number.bitRead(x, n)Parameters  x : the number from which to read the bit.  n : which bit to read, starting at 0 for the least-significant (rightmost) bitReturn Values  The value of the bit (0 or 1).See Also  bit()  bitWrite()  bitSet()  bitClear()bitWrite()(Macro) Writes a bit of a numeric variable.bitWrite(x, n, b)Parameters  x : the numeric variable whose bit to write.  n : which bit of the number to write, starting at 0 for the least-significant (rightmost) bit.  b : the value to write to the bit (0 or 1).Return Values  NoneSee Also  bit()  bitWrite()  bitSet()  bitClear()bitSet()(Macro) Sets (writes a 1 to) a bit of a numeric variable.bitSet(x,n)Parameters  x : the numeric variable whose bit to set  n : which bit to set, starting at 0 for the least-significant (rightmost) bitReturn Values  NoneSee Also  bit()  bitRead()  bitWrite()  bitClear()bitClrear()(Macro) Clears (writes a 0 to) a bit of a numeric variable.bitClear(x, n)Parameters  x : the numeric variable whose bit to clear  n : which bit to clear, starting at 0 for the least-significant (rightmost) bitReturn Values  NoneSee Also  bit()  bitRead()  bitWrite()  bitSet()bit()(Macro) Computes the value of an (unsigned) integer with the specified bit set (bit(0) is 1, bit(1) is 2, bit(2) is 4, then 8, 16, 32, etc.).bit(n)Parameters  n : the bit to set.Return Values  The value of an integer with the given bit set.See Also  bitRead()  bitWrite()  bitSet()  bitClear()License and Attribution Portions of this page were adapted from the Maple Reference Documentation, which is released under aCreative Commons Attribution-ShareAlike 3.0 License.",
        "url": " http://localhost:4000/docs/en/software/opencm_ide/api_reference/"
      } ,
  
      "docs-en-dxl-ax-ax-12a":  {
        "title": "AX-12A",
      "content"	 : "AX-12ANote AX-12+ is the improved version of existing AX-12; the design of circuit, material, and wheel gear are specially improved.Note AX-12A is a new version of the AX-12+ with the same performance but more advanced external design. Only the AX-12A is now being sold.Specifications            Item      Specifications                  Baud Rate      7843 bps ~ 1 Mbps              Resolution      0.29°              Running Degree      0° ~ 300°Endless Turn              Weight      53.5g(AX-12, AX-12+), 54.6g(AX-12A)              Dimensions (W x H x D)      32mm x 50mm x 40mm              Gear Ratio      254 : 1              Stall Torque      1.5 N*m (at 12V, 1.5A)              No Load Speed      59rpm (at 12V)              Operating Temperature      -5°C ~ +70°C              Input Voltage      9.0 ~ 12.0V (Recommended : 11.1V)              Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communicationf(8bit, 1stop, No Parity)              Physical Connection      TTL Level Multi Drop Bus(Daisy Chain Type Connector)              ID      0 ~ 253              Feedback      Position, Temperature, Load, Input Voltage, etc              Material      Engineering Plastic      Note Stall torque is the maximum instantaneous and static  torque. Stable motions are possible with robots designed for loads with 1/5 or less of the stall torque.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 1.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(24) is ‘0’ and Dynamixel is in idle state.SizeThe Size of data is 1 or 2 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. 2 bytes data will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      12              2      1      Firmware Version      Firmware Version      R      -              3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      1              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      Counter-Clockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      70              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      140              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On/Off      RW      0              25      1      LED      Status LED On/Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      1              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      1              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW      -              32      2      Moving Speed      Moving Speed      RW      -              34      2      Torque Limit      Torque Limit(Goal Torque)      RW      ADD 14&amp;amp;15              36      2      Present Position      Present Position      R      -              38      2      Present Speed      Present Speed      R      -              40      2      Present Load      Present Load      R      -              42      1      Present Voltage      Present Voltage      R      -              43      1      Present Temperature      Present Temperature      R      -              44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number (0)This address stores model number of the DYNAMIXEL.Firmware Version (2)This address stores firmware version of the DYNAMIXEL.ID (3)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate (4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate(bps)      Margin of Error                  1      1M      0.000%              3      500,000      0.000%              4      400,000      0.000%              7      250,000      0.000%              9      200,000      0.000%              16      115200      -2.124%              34(Default)      57600      0.794%              103      19200      -0.160%              207      9600      -0.160%      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time (5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      CW/CCW Angle Limit(6, 8)The angle limit allows the motion to be restrained.The range and the unit of the value is the same as Goal Position(Address 30, 31).  CW Angle Limit: the minimum value of Goal Position(Address 30, 31)  CCW Angle Limit: the maximum value of Goal Position(Address 30, 31)The following two modes can be set pursuant to the value of CW and CCW.            Operation Type      CW / CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheel-type operation robots since motors of the robots spin infinitely. The joint mode can be used to multi-joints robot since the robots can be controlled with specific angles.The Highest Limit Temperature            Unit      Value Range                  About 1°      0 ~ 100      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage LimitIt is the operation range of voltage.            Unit      Value Range      Description                  About 0.1V      50 ~ 250      5.0 ~ 25.0V      For example, if the value is 80, the voltage is 8V.If Present Voltage(42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.Max TorqueIt is the torque value of maximum output. 0 to 1,023 (0x3FF) can be used, and the unit is about 0.1%.For example, Data 1,023 (0x3FF) means that Dynamixel will use 100% of the maximum torque it can produce while Data 512 (0x200) means that Dynamixel will use 50% of the maximum torque. When the power is turned on, Torque Limit (Address 34 and 35) uses the value as the initial value.Status Return LevelThis value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Alarm LED / Alarm ShutdownDynamixel can protect itself by detecting errors occur during the operation.The errors can be set are as the table below.            Bit      Item      Description                  Bit 7      0      -              Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’. That is, if 0x05 (binary 00000101) is set, both Input Voltage Error and Overheating Error can be detected.If errors occur, in case of Alarm LED, the LED blinks; in case of Alarm Shutdown, the motor output becomes 0 % by resetting the value of Torque Limit(34) to 0.Torque Enable            Value      Description                  0      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      LEDTurn on or turn off the LED on Dynamixel.            Bit      Description                  0(Default)      Turn OFF the LED              1      Turn ON the LED      Compliance MarginIt exists in each direction of CW/CCW and means the error between goal position and present position.The range of the value is 0~255, and the unit is the same as Goal Position.(Address 30,31)The greater the value, the more difference occurs.Compliance SlopeIt exists in each direction of CW/CCW and sets the level of Torque near the goal position.Compliance Slope is set in 7 steps, the higher the value, the more flexibility is obtained.Data representative value is actually used value.  That is, even if the value is set to 25, 16 is used internally as the representative value.            Step      Data Value      Data Representative Value                  1      0(0x00) ~ 3(0x03)      2(0x02)              2      4(0x04) ~ 7(0x07)      4(0x04)              3      8(0x08)~15(0x0F)      8(0x08)              4      16(0x10)~31(0x1F)      16(0x10)              5      32(0x20)~63(0x3F)      32(0x20)              6      64(0x40)~127(0x7F)      64(0x40)              7      128(0x80)~254(0xFE)      128(0x80)      Compliance is to set the control flexibility of the motor.The following diagram shows the relationship between output torque and position of the motor.Goal PositionIt is a position value of destination.0 ~ 1,023 (0x3FF) is available.  The unit is 0.29°.If Goal Position is out of the range, Angle Limit Error Bit (Bit 1) of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED/Shutdown.The picture above is the front view of DynamixelNote If it is set to Wheel Mode, Goal Position value is not used.Moving SpeedIt is a moving speed to Goal Position.The range and the unit of the value may vary depending on the operation mode.      Join Mode0 ~ 1,023(0x3FF) can be used, and the unit is about 0.111rpm.If it is set to 0, it means the maximum rpm of the motor is used without controlling the speed.If it is 1023, it is about 114rpm.For example, if it is set to 300, it is about 33.3 rpm.    Note Please check the maximum rpm of the Dynamixel. The motor cannot exceed the maximum rpm with the higher Moving Speed value.        Wheel Mode0 ~ 2,047(0x7FF) can be used, the unit is about 0.1%.If a value in the range of 0 ~ 1,023 is used, it is stopped by setting to 0 while rotating to CCW direction.If a value in the range of 1,024 ~ 2,047 is used, it is stopped by setting to 1,024 while rotating to CW direction.That is, the 10th bit becomes the direction bit to control the direction.In Wheel Mode, only the output control is possible, not speed.For example, if it is set to 512, it means the output is controlled by 50% of the maximum output.  Torque LimitIt is the value of the maximum torque limit.0 ~ 1,023(0x3FF) is available, and the unit is about 0.1%.For example, if the value is 512, it is about 50%; that means only 50% of the maximum torque will be used.If the power is turned on, the value of Max Torque (Address 14, 15) is used as the initial value.Note If the function of Alarm Shutdown is triggered, the motor loses its torque because the value becomes 0. Once error conditions are resolved and this value is changed to the value other than 0, the motor can be operated again.Present PositionIt is the current position value of Dynamixel.The range of the value is 0~1023 (0x3FF), and the unit is 0.29 degree.The picture above is the front view of Dynamixel.Caution If it is set to Wheel Mode, the value cannot be used to measure the moving distance and the rotation frequency.Present SpeedIt is the current moving speed.0~2047 (0X7FF) can be used.If a value is in the rage of 0~1023, it means that the motor rotates to the CCW direction.If a value is in the rage of 1024~2047, it means that the motor rotates to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 0 and 1024 are equal.The unit of this value varies depending on operation mode.      Joint ModeThe unit is about 0.111rpm.For example, if it is set to 300, it means that the motor is moving to the CCW direction at a rate of about 33.3rpm.        Wheel ModeThe unit is about 0.1%.For example, if it is set to 512, it means that the torque is controlled by 50% of the maximum torque to the CCW direction.  Present LoadIt means currently applied load.The range of the value is 0~2047, and the unit is about 0.1%.If the value is 0~1023, it means the load works to the CCW direction.If the value is 1024~2047, it means the load works to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 1024 is equal to 0.For example, the value is 512, it means the load is detected in the direction of CCW about 50% of the maximum torque.            Bit      15 ~ 11      10      9 ~ 0                  Value      0      Load Direction      Data (Load Ratio)      Note CCW Load : Load Direction = 0, CW Load : Load Direction = 1Note Present load is an inferred value based on the internal output value; not a measured value using torque sensor, etc. Therefore, it may be inaccurate for measuring weight or torque. It is recommended to use it for predicting the direction and size of the force being applied to the joint.Present VoltageIt is the size of the current voltage supplied.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)Present TemperatureIt is the internal temperature of Dynamixel in Celsius.Data value is identical to the actual temperature in Celsius. For example, if the data value is 85 (0x55), the current internal temperature is 85°C.Registered Instruction            Value      Description                  0      There are no commands transmitted by REG_WRITE              1      There are commands transmitted by REG_WRITE      Note If ACTION command is executed, the value is changed into 0.Moving            Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock            Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.PunchCurrent to drive motor is at minimum.Can choose vales from 0x20 to 0x3FF.How to AssembleMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators, the main controller needs to convert its UART signals to the half duplex type. The recommended circuit diagram for this is shown below.TTL CommunicationRS-485 CommunicationThe power of Dynamixel is supplied via Pin1(-), Pin2(+).(The above circuit is built into Dynamixel-only controller.)In the above circuit diagram, the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as follows:In case of DIRECTION485 Level = High: The signal of TxD is output to D+ and D-.In case of DIRECTION485 Level = Low: The signal of D+ and D- is output to RxD.Pin AssignmentThe connector pin assignments are as the following. The two connectors on the Dynamixel are connected pin to pin, thus the Dynamixel can be operated with only one connector attached.",
        "url": " http://localhost:4000/docs/en/dxl/ax/ax-12a/"
      } ,
  
      "docs-en-dxl-ax-ax-12w":  {
        "title": "AX-12W",
      "content"	 : "AX-12WSpecifications            Item      Specifications                  Baud Rate      7843 bps ~ 1 Mbps              Resolution      0.29°              Running Degree      0° ~ 300°Endless Turn              Weight      52.9g              Dimensions (W x H x D)      32mm x 50mm x 40mm              Gear Ratio      32 : 1              No Load Speed      470rpm (at 12V, Wheel Mode)54rpm (at 12.0V, Joint Mode)              Operating Temperature      -5°C ~ +70°C              Input Voltage      9.0 ~ 12.0V (Recommended : 11.1V)              Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      TTL Level Multi Drop Bus(Daisy Chain Type Connector)              ID      0 ~ 253              Feedback      Position, Temperature, Load, Input Voltage, etc              Material      Engineering Plastic      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to [Protocol] for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed when the value of Torque Enable(64) is cleared to ‘0’.SizeThe Size of data varies from 1 to 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      300              2      1      Firmware Version      Firmware Version      R      -              3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      1              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      Counter-Clockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      70              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      140              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On/Off      RW      0              25      1      LED      Status LED On/Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      4              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      4              28      1      CW Compliance Slope      CW Compliance Slope      RW      64              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      64              30      2      Goal Position      Target Position      RW      -              32      2      Moving Speed      Moving Speed      RW      -              34      2      Torque Limit      Torque Limit(Goal Torque)      RW      ADD 14&amp;amp;15              36      2      Present Position      Present Position      R      -              38      2      Present Speed      Present Speed      R      -              40      2      Present Load      Present Load      R      -              42      1      Present Voltage      Present Voltage      R      -              43      1      Present Temperature      Present Temperature      R      -              44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number (0)This address stores model number of the DYNAMIXEL.Firmware Version (2)This address stores firmware version of the DYNAMIXEL.ID (3)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet. 0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate (4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate      Margin of Error                  1(Default)      1M      0.000%              3      500,000      0.000%              4      400,000      0.000%              7      250,000      0.000%              9      200,000      0.000%              16      115200      -2.124%              34      57600      0.794%              103      19200      -0.160%              207      9600      -0.160%      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time (5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.                   Value      Description                  Unit      2[μsec]      -              Range      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      CW/CCW Angle Limit(6, 8)The angle limit allows the motion to be restrained.The range and the unit of the value is the same as Goal Position(Address 30, 31).CW Angle Limit: the minimum value of Goal Position(Address 30, 31)CCW Angle Limit: the maximum value of Goal Position(Address 30, 31)The following two modes can be set pursuant to the value of CW and CCW.            Operation Type      CW / CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheel-type operation robots since motors of the robots spin infinitely. The joint mode can be used to multi-joints robot since the robots can be controlled with specific angles.The Highest Limit TemperatureCaution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Using the product when the temperature is high may and can cause damage.Min/Max Voltage LimitIt is the operation range of voltage.50 to 250 (0x32 ~ 0x96) can be used.  The unit is 0.1V.For example, if the value is 80, it is 8V.If Present Voltage (Address42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.Max TorqueIt is the torque value of maximum output. 0 to 1023 (0x3FF) can be used, and the unit is about 0.1%.For example, Data 1023 (0x3FF) means that Dynamixel will use 100% of the maximum torque it can produce while Data 512 (0x200) means that Dynamixel will use 50% of the maximum torque. When the power is turned on, Torque Limit (Addresses 34 and 35) uses the value as the initial value.Status Return LevelIt decides how to return Status Packet. There are three ways like the below table.            Value      Return of Status Packet                  0      No return against all commands (Except PING Command)              1      Return only for the READ command              2      Return for all commands      When Instruction Packet is Broadcast ID, Status Packet is not returned regardless of Status Return Level.Alarm LED / Alarm ShutdownDynamixel can protect itself by detecting errors occur during the operation.The errors can be set are as the table below.            Bit      Name      Description                  Bit 7      0      -              Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’. That is, if 0X05 (binary 00000101) is set, both Input Voltage Error and Overheating Error can be detected.If errors occur, in case of Alarm LED, the LED blinks; in case of Alarm Shutdown, the motor output becomes 0 % by making the value of Torque Limit(Address 34, 35) as 0.Torque Enable            Value      Description                  0      Keeps Torque from generating by interrupting the power of motor              1      Generates Torque by impressing the power to the motor.      LED            Bit      Description                  0      Turn OFF the LED              1      Turn ON the LED      Compliance MarginIt exists in each direction of CW/CCW and means the error between goal position and present position.The range of the value is 0~255, and the unit is the same as Goal Position.(Address 30,31)The greater the value, the more difference occurs.Compliance SlopeIt exists in each direction of CW/CCW and sets the level of Torque near the goal position.Compliance Slope is set in 7 steps, the higher the value, the more flexibility is obtained.Data representative value is actually used value.  That is, even if the value is set to 25, 16 is used internally as the representative value.            Step      Data Value      Data Representative Value                  1      0(0x00) ~ 3(0x03)      2(0x02)              2      4(0x04) ~ 7(0x07)      4(0x04)              3      8(0x08)~15(0x0F)      8(0x08)              4      16(0x10)~31(0x1F)      16(0x10)              5      32(0x20)~63(0x3F)      32(0x20)              6      64(0x40)~127(0x7F)      64(0x40)              7      128(0x80)~254(0xFE)      128(0x80)      Compliance is to set the control flexibility of the motor.The following diagram shows the relationship between output torque and position of the motor.Goal PositionIt is a position value of destination.0 to 1023 (0x3FF) is available.  The unit is 0.29 degree.If Goal Position is out of the range, Angle Limit Error Bit (Bit1) of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED/Shutdown.The picture above is the front view of DynamixelNote If it is set to Wheel Mode, this value is not used.Moving SpeedIt is a moving speed to Goal Position.The range and the unit of the value may vary depending on the operation mode.      Join Mode0~1023 (0X3FF) can be used, and the unit is about 0.111rpm.If it is set to 0, it means the maximum rpm of the motor is used without controlling the speed.If it is 1023, it is about 114rpm.For example, if it is set to 300, it is about 33.3 rpm.    Note Please check the maximum rpm of relevant model in Joint Mode.  Even if the motor is set to more than maximum rpm, it cannot generate the torque more than the maximum rpm.        Wheel Mode0~2047( 0X7FF) can be used, the unit is about 0.1%.If a value in the range of 0~1023 is used, it is stopped by setting to 0 while rotating to CCW direction.If a value in the range of 1024~2047 is used, it is stopped by setting to 1024 while rotating to CW direction.That is, the 10th bit becomes the direction bit to control the direction.In Wheel Mode, only the output control is possible, not speed.For example, if it is set to 512, it means the output is controlled by 50% of the maximum output.  Torque LimitIt is the value of the maximum torque limit.0 to 1023 (0x3FF) is available, and the unit is about 0.1%.For example, if the value is 512, it is about 50%; that means only 50% of the maximum torque will be used.If the power is turned on, the value of Max Torque (Address 14, 15) is used as the initial value.Note If the function of Alarm Shutdown is triggered, the motor loses its torque because the value becomes 0. At this moment, if the value is changed to the value other than 0, the motor can be used again.Present PositionIt is the current position value of Dynamixel.The range of the value is 0~1023 (0x3FF), and the unit is 0.29 degree.The picture above is the front view of Dynamixel.Caution If it is set to Wheel Mode, the value cannot be used to measure the moving distance and the rotation frequency.Present SpeedIt is the current moving speed.0~2047 (0X7FF) can be used.If a value is in the rage of 0~1023, it means that the motor rotates to the CCW direction.If a value is in the rage of 1024~2047, it means that the motor rotates to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 0 and 1024 are equal.The unit of this value varies depending on operation mode.      Joint ModeThe unit is about 0.111rpm.For example, if it is set to 300, it means that the motor is moving to the CCW direction at a rate of about 33.3rpm.        Wheel ModeThe unit is about 0.1%.For example, if it is set to 512, it means that the torque is controlled by 50% of the maximum torque to the CCW direction.  Present LoadIt means currently applied load.The range of the value is 0~2047, and the unit is about 0.1%.If the value is 0~1023, it means the load works to the CCW direction.If the value is 1024~2047, it means the load works to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 1024 is equal to 0.For example, the value is 512, it means the load is detected in the direction of CCW about 50% of the maximum torque.            Bit      15 ~ 11      10      9 ~ 0                  Value      0      Load Direction      Data (Load Ratio)      Note CCW Load : Load Direction = 0, CW Load : Load Direction = 1Note Present load is an inferred value based on the internal output value; not a measured value using torque sensor, etc. Therefore, it may be inaccurate for measuring weight or torque. It is recommended to use it for predicting the direction and size of the force being applied to the joint.Present VoltageIt is the size of the current voltage supplied.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)Present TemperatureIt is the internal temperature of Dynamixel in Celsius.Data value is identical to the actual temperature in Celsius. For example, if the data value is 85 (0x55), the current internal temperature is 85°C.Registered Instruction            Value      Description                  0      There are no commands transmitted by REG_WRITE              1      There are commands transmitted by REG_WRITE      Note If ACTION command is executed, the value is changed into 0.Moving            Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock            Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.PunchCurrent to drive motor is at minimum.Can choose vales from 0x20 to 0x3FF.How to AssembleMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators, the main controller needs to convert its UART signals to the half duplex type. The recommended circuit diagram for this is shown below.TTL CommunicationRS-485 CommunicationThe power of Dynamixel is supplied via Pin1(-), Pin2(+).(The above circuit is built into Dynamixel-only controller.)In the above circuit diagram, the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as follows:In case of DIRECTION485 Level = High: The signal of TxD is output to D+ and D-.In case of DIRECTION485 Level = Low: The signal of D+ and D- is output to RxD.Pin AssignmentThe connector pin assignments are as the following. The two connectors on the Dynamixel are connected pin to pin, thus the Dynamixel can be operated with only one connector attached.",
        "url": " http://localhost:4000/docs/en/dxl/ax/ax-12w/"
      } ,
  
      "docs-kr-dxl-ax-ax-12w":  {
        "title": "AX-12W",
      "content"	 : "Specifications            Item      Specifications                  Baud Rate      7843 bps ~ 1 Mbps              Resolution      0.29°              Running Degree      0° ~ 300°Endless Turn              Weight      52.9g              Dimensions (W x H x D)      32mm x 50mm x 40mm              Gear Ratio      32 : 1              No Load Speed      470rpm (at 12V, Wheel Mode)54rpm (at 12.0V, Joint Mode)              Operating Temperature      -5°C ~ +70°F              Input Voltage      9.0 ~ 12.0V (Recommended : 11.1V)              Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication (8bit, 1stop, No Parity)              Physical Connection      TTL Level Multi Drop Bus(Daisy Chain Type Connector)              ID      0 ~ 253              Feedback      Position, Temperature, Load, Input Voltage, etc              Material      Engineering Plastic      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to [Protocol] for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed when the value of Torque Enable(64) is cleared to ‘0’.SizeThe Size of data varies from 1 to 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      300              2      1      Firmware Version      Firmware Version      R      -              3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      1              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      Counter-Clockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      70              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      140              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On/Off      RW      0              25      1      LED      Status LED On/Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      4              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      4              28      1      CW Compliance Slope      CW Compliance Slope      RW      64              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      64              30      2      Goal Position      Target Position      RW      -              32      2      Moving Speed      Moving Speed      RW      -              34      2      Torque Limit      Torque Limit(Goal Torque)      RW      ADD 14&amp;amp;15              36      2      Present Position      Present Position      R      -              38      2      Present Speed      Present Speed      R      -              40      2      Present Load      Present Load      R      -              42      1      Present Voltage      Present Voltage      R      -              43      1      Present Temperature      Present Temperature      R      -              44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number (0)This address stores model number of the DYNAMIXEL.Firmware Version (2)This address stores firmware version of the DYNAMIXEL.ID (3)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet. 0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate (4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate      Margin of Error                  1(Default)      1M      0.000%              3      500,000      0.000%              4      400,000      0.000%              7      250,000      0.000%              9      200,000      0.000%              16      115200      -2.124%              34      57600      0.794%              103      19200      -0.160%              207      9600      -0.160%      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time (5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.                   Value      Description                  Unit      2[μsec]      -              Range      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      CW/CCW Angle Limit(6, 8)The angle limit allows the motion to be restrained.The range and the unit of the value is the same as Goal Position(Address 30, 31).CW Angle Limit: the minimum value of Goal Position(Address 30, 31)CCW Angle Limit: the maximum value of Goal Position(Address 30, 31)The following two modes can be set pursuant to the value of CW and CCW.            Operation Type      CW / CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheel-type operation robots since motors of the robots spin infinitely. The joint mode can be used to multi-joints robot since the robots can be controlled with specific angles.The Highest Limit TemperatureCaution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Using the product when the temperature is high may and can cause damage.Min/Max Voltage LimitIt is the operation range of voltage.50 to 250 (0x32 ~ 0x96) can be used.  The unit is 0.1V.For example, if the value is 80, it is 8V.If Present Voltage (Address42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.Max TorqueIt is the torque value of maximum output. 0 to 1023 (0x3FF) can be used, and the unit is about 0.1%.For example, Data 1023 (0x3FF) means that Dynamixel will use 100% of the maximum torque it can produce while Data 512 (0x200) means that Dynamixel will use 50% of the maximum torque. When the power is turned on, Torque Limit (Addresses 34 and 35) uses the value as the initial value.Status Return LevelIt decides how to return Status Packet. There are three ways like the below table.            Value      Return of Status Packet                  0      No return against all commands (Except PING Command)              1      Return only for the READ command              2      Return for all commands      When Instruction Packet is Broadcast ID, Status Packet is not returned regardless of Status Return Level.Alarm LED / Alarm ShutdownDynamixel can protect itself by detecting errors occur during the operation.The errors can be set are as the table below.            Bit      Name      Description                  Bit 7      0      -              Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’. That is, if 0X05 (binary 00000101) is set, both Input Voltage Error and Overheating Error can be detected.If errors occur, in case of Alarm LED, the LED blinks; in case of Alarm Shutdown, the motor output becomes 0 % by making the value of Torque Limit(Address 34, 35) as 0.Torque Enable            Value      Description                  0      Keeps Torque from generating by interrupting the power of motor              1      Generates Torque by impressing the power to the motor.      LED            Bit      Description                  0      Turn OFF the LED              1      Turn ON the LED      Compliance MarginIt exists in each direction of CW/CCW and means the error between goal position and present position.The range of the value is 0~255, and the unit is the same as Goal Position.(Address 30,31)The greater the value, the more difference occurs.Compliance SlopeIt exists in each direction of CW/CCW and sets the level of Torque near the goal position.Compliance Slope is set in 7 steps, the higher the value, the more flexibility is obtained.Data representative value is actually used value.  That is, even if the value is set to 25, 16 is used internally as the representative value.            Step      Data Value      Data Representative Value                  1      0(0x00) ~ 3(0x03)      2(0x02)              2      4(0x04) ~ 7(0x07)      4(0x04)              3      8(0x08)~15(0x0F)      8(0x08)              4      16(0x10)~31(0x1F)      16(0x10)              5      32(0x20)~63(0x3F)      32(0x20)              6      64(0x40)~127(0x7F)      64(0x40)              7      128(0x80)~254(0xFE)      128(0x80)      Compliance is to set the control flexibility of the motor.The following diagram shows the relationship between output torque and position of the motor.Goal PositionIt is a position value of destination.0 to 1023 (0x3FF) is available.  The unit is 0.29 degree.If Goal Position is out of the range, Angle Limit Error Bit (Bit1) of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED/Shutdown.The picture above is the front view of DynamixelNote If it is set to Wheel Mode, this value is not used.Moving SpeedIt is a moving speed to Goal Position.The range and the unit of the value may vary depending on the operation mode.      Join Mode0~1023 (0X3FF) can be used, and the unit is about 0.111rpm.If it is set to 0, it means the maximum rpm of the motor is used without controlling the speed.If it is 1023, it is about 114rpm.For example, if it is set to 300, it is about 33.3 rpm.    Note Please check the maximum rpm of relevant model in Joint Mode.  Even if the motor is set to more than maximum rpm, it cannot generate the torque more than the maximum rpm.        Wheel Mode0~2047( 0X7FF) can be used, the unit is about 0.1%.If a value in the range of 0~1023 is used, it is stopped by setting to 0 while rotating to CCW direction.If a value in the range of 1024~2047 is used, it is stopped by setting to 1024 while rotating to CW direction.That is, the 10th bit becomes the direction bit to control the direction.In Wheel Mode, only the output control is possible, not speed.For example, if it is set to 512, it means the output is controlled by 50% of the maximum output.  Torque LimitIt is the value of the maximum torque limit.0 to 1023 (0x3FF) is available, and the unit is about 0.1%.For example, if the value is 512, it is about 50%; that means only 50% of the maximum torque will be used.If the power is turned on, the value of Max Torque (Address 14, 15) is used as the initial value.Note If the function of Alarm Shutdown is triggered, the motor loses its torque because the value becomes 0. At this moment, if the value is changed to the value other than 0, the motor can be used again.Present PositionIt is the current position value of Dynamixel.The range of the value is 0~1023 (0x3FF), and the unit is 0.29 degree.The picture above is the front view of Dynamixel.Caution If it is set to Wheel Mode, the value cannot be used to measure the moving distance and the rotation frequency.Present SpeedIt is the current moving speed.0~2047 (0X7FF) can be used.If a value is in the rage of 0~1023, it means that the motor rotates to the CCW direction.If a value is in the rage of 1024~2047, it means that the motor rotates to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 0 and 1024 are equal.The unit of this value varies depending on operation mode.      Joint ModeThe unit is about 0.111rpm.For example, if it is set to 300, it means that the motor is moving to the CCW direction at a rate of about 33.3rpm.        Wheel ModeThe unit is about 0.1%.For example, if it is set to 512, it means that the torque is controlled by 50% of the maximum torque to the CCW direction.  Present LoadIt means currently applied load.The range of the value is 0~2047, and the unit is about 0.1%.If the value is 0~1023, it means the load works to the CCW direction.If the value is 1024~2047, it means the load works to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 1024 is equal to 0.For example, the value is 512, it means the load is detected in the direction of CCW about 50% of the maximum torque.            Bit      15 ~ 11      10      9 ~ 0                  Value      0      Load Direction      Data (Load Ratio)      Note CCW Load : Load Direction = 0, CW Load : Load Direction = 1Note Present load is an inferred value based on the internal output value; not a measured value using torque sensor, etc. Therefore, it may be inaccurate for measuring weight or torque. It is recommended to use it for predicting the direction and size of the force being applied to the joint.Present VoltageIt is the size of the current voltage supplied.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)Present TemperatureIt is the internal temperature of Dynamixel in Celsius.Data value is identical to the actual temperature in Celsius. For example, if the data value is 85 (0x55), the current internal temperature is 85°C.Registered Instruction            Value      Description                  0      There are no commands transmitted by REG_WRITE              1      There are commands transmitted by REG_WRITE      Note If ACTION command is executed, the value is changed into 0.Moving            Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock            Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.PunchCurrent to drive motor is at minimum.Can choose vales from 0x20 to 0x3FF.How to AssembleMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideQuick StartDrawings",
        "url": " http://localhost:4000/docs/kr/dxl/ax/ax-12w/"
      } ,
  
      "docs-en-dxl-ax-ax-18a":  {
        "title": "AX-18A",
      "content"	 : "AX-18ANote AX-18A is a new version of the AX-18F with the same performance but more advanced external design.Specifications            Item      Specifications                  Baud Rate      7843 bps ~ 1 Mbps              Resolution      0.29°              Running Degree      0° ~ 300°Endless Turn              Weight      54.5g(AX-18F), 55.9g(AX-18A)              Dimensions (W x H x D)      32mm x 50mm x 40mm              Gear Ratio      254 : 1              Stall Torque      1.8 N*m (at 12V, 2.2A)              No Load Speed      97rpm (at 12V)              Operating Temperature      -5°C ~ +70°C              Input Voltage      9.0 ~ 12.0V (Recommended : 11.1V)              Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      TTL Level Multi Drop Bus(Daisy Chain Type Connector)              ID      0 ~ 253              Feedback      Position, Temperature, Load, Input Voltage, etc              Material      Engineering Plastic      Note Stall torque is the maximum instantaneous and static  torque. Stable motions are possible with robots designed for loads with 1/5 or less of the stall torque.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to [Protocol] for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed when the value of Torque Enable(64) is cleared to ‘0’.SizeThe Size of data varies from 1 to 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      18              2      1      Firmware Version      Firmware Version      R      -              3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      1              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      Counter-Clockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      75              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      140              14      2      Max Torque      Maximun Torque      RW      983              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On/Off      RW      0              25      1      LED      Status LED On/Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      1              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      1              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW      -              32      2      Moving Speed      Moving Speed      RW      -              34      2      Torque Limit      Torque Limit(Goal Torque)      RW      ADD 14&amp;amp;15              36      2      Present Position      Present Position      R      -              38      2      Present Speed      Present Speed      R      -              40      2      Present Load      Present Load      R      -              42      1      Present Voltage      Present Voltage      R      -              43      1      Present Temperature      Present Temperature      R      -              44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number (0)This address stores model number of the DYNAMIXEL.Firmware Version (2)This address stores firmware version of the DYNAMIXEL.ID (3)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet. 0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate (4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate      Margin of Error                  1(Default)      1M      0.000%              3      500,000      0.000%              4      400,000      0.000%              7      250,000      0.000%              9      200,000      0.000%              16      115200      -2.124%              34      57600      0.794%              103      19200      -0.160%              207      9600      -0.160%      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time (5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.                   Value      Description                  Unit      2[μsec]      -              Range      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      CW/CCW Angle Limit(6, 8)The angle limit allows the motion to be restrained.The range and the unit of the value is the same as Goal Position(Address 30, 31).CW Angle Limit: the minimum value of Goal Position(Address 30, 31)CCW Angle Limit: the maximum value of Goal Position(Address 30, 31)The following two modes can be set pursuant to the value of CW and CCW.            Operation Type      CW / CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheel-type operation robots since motors of the robots spin infinitely. The joint mode can be used to multi-joints robot since the robots can be controlled with specific angles.The Highest Limit TemperatureCaution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Using the product when the temperature is high may and can cause damage.Min/Max Voltage LimitIt is the operation range of voltage.50 to 250 (0x32 ~ 0x96) can be used.  The unit is 0.1V.For example, if the value is 80, it is 8V.If Present Voltage (Address42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.Max TorqueIt is the torque value of maximum output. 0 to 1023 (0x3FF) can be used, and the unit is about 0.1%.For example, Data 1023 (0x3FF) means that Dynamixel will use 100% of the maximum torque it can produce while Data 512 (0x200) means that Dynamixel will use 50% of the maximum torque. When the power is turned on, Torque Limit (Addresses 34 and 35) uses the value as the initial value.Status Return LevelIt decides how to return Status Packet. There are three ways like the below table.            Value      Return of Status Packet                  0      No return against all commands (Except PING Command)              1      Return only for the READ command              2      Return for all commands      When Instruction Packet is Broadcast ID, Status Packet is not returned regardless of Status Return Level.Alarm LED / Alarm ShutdownDynamixel can protect itself by detecting errors occur during the operation.The errors can be set are as the table below.            Bit      Name      Description                  Bit 7      0      -              Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’. That is, if 0X05 (binary 00000101) is set, both Input Voltage Error and Overheating Error can be detected.If errors occur, in case of Alarm LED, the LED blinks; in case of Alarm Shutdown, the motor output becomes 0 % by making the value of Torque Limit(Address 34, 35) as 0.Torque Enable            Value      Description                  0      Keeps Torque from generating by interrupting the power of motor              1      Generates Torque by impressing the power to the motor.      LED            Bit      Description                  0      Turn OFF the LED              1      Turn ON the LED      Compliance MarginIt exists in each direction of CW/CCW and means the error between goal position and present position.The range of the value is 0~255, and the unit is the same as Goal Position.(Address 30,31)The greater the value, the more difference occurs.Compliance SlopeIt exists in each direction of CW/CCW and sets the level of Torque near the goal position.Compliance Slope is set in 7 steps, the higher the value, the more flexibility is obtained.Data representative value is actually used value.  That is, even if the value is set to 25, 16 is used internally as the representative value.            Step      Data Value      Data Representative Value                  1      0(0x00) ~ 3(0x03)      2(0x02)              2      4(0x04) ~ 7(0x07)      4(0x04)              3      8(0x08)~15(0x0F)      8(0x08)              4      16(0x10)~31(0x1F)      16(0x10)              5      32(0x20)~63(0x3F)      32(0x20)              6      64(0x40)~127(0x7F)      64(0x40)              7      128(0x80)~254(0xFE)      128(0x80)      Compliance is to set the control flexibility of the motor.The following diagram shows the relationship between output torque and position of the motor.Goal PositionIt is a position value of destination.0 to 1023 (0x3FF) is available.  The unit is 0.29 degree.If Goal Position is out of the range, Angle Limit Error Bit (Bit1) of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED/Shutdown.The picture above is the front view of DynamixelNote If it is set to Wheel Mode, this value is not used.Moving SpeedIt is a moving speed to Goal Position.The range and the unit of the value may vary depending on the operation mode.      Join Mode0~1023 (0X3FF) can be used, and the unit is about 0.111rpm.If it is set to 0, it means the maximum rpm of the motor is used without controlling the speed.If it is 1023, it is about 114rpm.For example, if it is set to 300, it is about 33.3 rpm.    Note Please check the maximum rpm of relevant model in Joint Mode.  Even if the motor is set to more than maximum rpm, it cannot generate the torque more than the maximum rpm.        Wheel Mode0~2047( 0X7FF) can be used, the unit is about 0.1%.If a value in the range of 0~1023 is used, it is stopped by setting to 0 while rotating to CCW direction.If a value in the range of 1024~2047 is used, it is stopped by setting to 1024 while rotating to CW direction.That is, the 10th bit becomes the direction bit to control the direction.In Wheel Mode, only the output control is possible, not speed.For example, if it is set to 512, it means the output is controlled by 50% of the maximum output.  Torque LimitIt is the value of the maximum torque limit.0 to 1023 (0x3FF) is available, and the unit is about 0.1%.For example, if the value is 512, it is about 50%; that means only 50% of the maximum torque will be used.If the power is turned on, the value of Max Torque (Address 14, 15) is used as the initial value.Note If the function of Alarm Shutdown is triggered, the motor loses its torque because the value becomes 0. At this moment, if the value is changed to the value other than 0, the motor can be used again.Present PositionIt is the current position value of Dynamixel.The range of the value is 0~1023 (0x3FF), and the unit is 0.29 degree.The picture above is the front view of Dynamixel.Caution If it is set to Wheel Mode, the value cannot be used to measure the moving distance and the rotation frequency.Present SpeedIt is the current moving speed.0~2047 (0X7FF) can be used.If a value is in the rage of 0~1023, it means that the motor rotates to the CCW direction.If a value is in the rage of 1024~2047, it means that the motor rotates to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 0 and 1024 are equal.The unit of this value varies depending on operation mode.      Joint ModeThe unit is about 0.111rpm.For example, if it is set to 300, it means that the motor is moving to the CCW direction at a rate of about 33.3rpm.        Wheel ModeThe unit is about 0.1%.For example, if it is set to 512, it means that the torque is controlled by 50% of the maximum torque to the CCW direction.  Present LoadIt means currently applied load.The range of the value is 0~2047, and the unit is about 0.1%.If the value is 0~1023, it means the load works to the CCW direction.If the value is 1024~2047, it means the load works to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 1024 is equal to 0.For example, the value is 512, it means the load is detected in the direction of CCW about 50% of the maximum torque.            Bit      15 ~ 11      10      9 ~ 0                  Value      0      Load Direction      Data (Load Ratio)      Note CCW Load : Load Direction = 0, CW Load : Load Direction = 1Note Present load is an inferred value based on the internal output value; not a measured value using torque sensor, etc. Therefore, it may be inaccurate for measuring weight or torque. It is recommended to use it for predicting the direction and size of the force being applied to the joint.Present VoltageIt is the size of the current voltage supplied.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)Present TemperatureIt is the internal temperature of Dynamixel in Celsius.Data value is identical to the actual temperature in Celsius. For example, if the data value is 85 (0x55), the current internal temperature is 85°C.Registered Instruction            Value      Description                  0      There are no commands transmitted by REG_WRITE              1      There are commands transmitted by REG_WRITE      Note If ACTION command is executed, the value is changed into 0.Moving            Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock            Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.PunchCurrent to drive motor is at minimum.Can choose vales from 0x20 to 0x3FF.How to AssembleMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators, the main controller needs to convert its UART signals to the half duplex type. The recommended circuit diagram for this is shown below.TTL CommunicationRS-485 CommunicationThe power of Dynamixel is supplied via Pin1(-), Pin2(+).(The above circuit is built into Dynamixel-only controller.)In the above circuit diagram, the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as follows:In case of DIRECTION485 Level = High: The signal of TxD is output to D+ and D-.In case of DIRECTION485 Level = Low: The signal of D+ and D- is output to RxD.Pin AssignmentThe connector pin assignments are as the following. The two connectors on the Dynamixel are connected pin to pin, thus the Dynamixel can be operated with only one connector attached.",
        "url": " http://localhost:4000/docs/en/dxl/ax/ax-18a/"
      } ,
  
      "docs-en-parts-sensor-ax-s1":  {
        "title": "Integrated Sensor(AX-S1)",
      "content"	 : "Integrated Sensor(AX-S1)IntroductionWarning AX-S1 has been discontinued.  AX-S1 is a sensor device, which plays the role of eyes and ears of robots.  Distance of an object, Brightness of surroundings, heat, and sound detection functions are included; additionally, IR remote control receptor and sound-making functions are included.  The configuration and the communication type of AX-S1 are equal to AX-12+’s, but it is not operated by servo motor.Specifications            Item      Specifications                  Weight      37g              Resolution      10bit(1,024)              Operation Temperature      -5°C ~ +85°C              Voltage      9 ~ 12V (Recommended Voltage 11.1V)              Maximum Current      40mA              Command Signal      Digital Packet              Protocol Type      Half duplex Asynchronous Serial Communication (8bit,1stop,No Parity)              Link (Physical)      TTL Level Multi Drop (daisy chain type Connector)              ID      254 ID (0~253)              Communication Speed      7,843bps ~ 1 Mbps              Feedback      Infra-red Sensor, Internal Mic, Temperature, Input Voltage,  IR Remocon Tx/Rx Data, etc.              Material      Engineering Plastic      How to CommunicateThe communication method and the hardware composition related to the communication of AX-S1 are the same as Dynamixel AX series.  Please refer to Dynamixel Communication on the communication method and the packet composition.  Please refer to Communication Hardware Composition of AX-Series on the communication hardware.Control TableControl Table consists of data regarding the current status and operation, which exists inside of Dynamixel. The user can control Dynamixel by changing data of Control Table via Instruction Packet.EEPROM and RAMData in RAM area is reset to the initial value whenever the power is turned on while data in EEPROM area is kept once the value is set even if the power is turned off.AddressIt represents the location of data. To read from or write data to Control Table, the user should assign the correct address in the Instruction Packet.AccessDynamixel has two kinds of data: Read-only data, which is mainly used for sensing, and Read-and-Write data, which is used for driving.Initial ValueIn case of data in the EEPROM Area, the initial values on the right side of the below Control Table are the factory default settings. In case of data in the RAM Area, the initial values on the right side of the above Control Tables are the ones when the power is turned on.Highest/Lowest ByteIn the Control table, some data share the same name, but they are attached with (L) or (H) at the end of each name to distinguish the address. This data requires 16bit, but it is divided into 8bit each for the addresses (low) and (high). These two addresses should be written with one Instruction Packet at the same time.EEPROM Area            Address      Data Name      Description      Access      Initial Value                  0(0x00)      Model Number(L)      Lowest Byte of Model Number      R      13(0x0D)              1(0x01)      Model Number(H)      Highest Byte of Model Number      R      0(0x00)              2(0x02)      Firmware Version      Firmware Version      R      -              3(0x03)      ID      DYNAMIXEL ID      RW      100(0x64)              4(0x04)      Baud Rate      Communication Speed      RW      1(0x0x)              5(0x05)      Return Delay Time      Response Delay Time      RW      250(0xFA)              16(0x10)      Status Return Level      Select Types of Status Return      RW      2(0x02)      RAM Area            Address      Data Name      Description      Access      Initial Value                  26(0X1A)      Left Distance Data      The value of left IR Sensor      R      -              27(0X1B)      Center Distance Data      The value of central IR Sensor      R      -              28(0X1C)      Right Distance Data      The value of right IR Sensor      R      -              29(0X1D)      Light Left Data      The value of left Light Sensor      R      -              30(0X1E)      Light Center Data      The value of central Light Sensor      R      -              31(0X1F)      Light Right Data      The value of right Light Sensor      R      -              32(0X20)      IR Obstacle Detected      The object detected by IR      R      -              33(0X21)      Light Detected      Light Detected      R      -              35(0X23)      Sound Data      The value of current sound      R      -              36(0X24)      Sound Data Max Hold      The value of Max Sound      RW      -              37(0X25)      Sound Detected Count      The count of sound detected      RW      -              38(0X26)      Sound Detected Time(L)      Lowest byte of sound detected time      RW      -              39(0X27)      Sound Detected Time(H)      Highest byte of sound detected time      RW      -              40(0X28)      Buzzer Data 0      Buzzer Notes      RW      -              41(0X29)      Buzzer Data 1      Buzzer Ringing Time      RW      -              44(0X2C)      Registered      Registration of Instruction      RW      0(0X00)              46(0X2E)      IR Remocon Arrived      Arrival of IR Remocon Data      R      0(0X00)              47(0X2F)      Lock      Locking EEPROM      RW      0(0X00)              48(0X30)      Remocon RX Data 0      Lowest byte of received data packet      R      -              49(0X31)      Remocon RX Data 1      Higest byte of received data packet      R      -              50(0X32)      Remocon TX Data 0      Lowest byte of transmitted data packet      RW      -              51(0X33)      Remocon TX Data 1      Highest byte of transmitted data packet      RW      -              52(0X34)      IR Obstacle Detect Compare      The reference value of object detected      RW      -              53(0X35)      Light Detect Compare      The reference value of light detected      RW      -      Control Table DescriptionModel Number (0)This address stores model number of the DYNAMIXEL.Firmware Version (2)This address stores firmware version of the DYNAMIXEL.ID (3)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate (4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate(bps)      Margin of Error                  1      1M      0.000%              3      500,000      0.000%              4      400,000      0.000%              7      250,000      0.000%              9      200,000      0.000%              16      115200      -2.124%              34(Default)      57600      0.794%              103      19200      -0.160%              207      9600      -0.160%      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time (5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      Status Return Level(16)This value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.IR Obstacle Detect Compare ValueThe reference value is set in the estimated place where an object exists on the direction of the sensor in the IR sensor value of Dynamixel Sensor Module.  If the sensor value is greater than the reference value, the bit which belongs to the sensor of IR Obstacle Detected (Address 0x20) is set to ‘1’ because the object is located within a certain distance; if the sensor value is less than the reference value, the bit is set to ‘0’ since the object is not located within a certain distance.IR Obstacle Detect Compare Value is assigned to two places: ROM(Address 0x14) and RAM(Address 0x34), and when the power is turned on, the value of EEPROM is copied to RAM.Light Detect Compare ValueThe reference value is set in the estimated place where a light is turned on in the light-brightness sensor of Dynamixel Sensor Module. If the sensor value is grater than the reference value, the bit which belongs to Light Detected is set to ‘1’ because the light is brighter than a certain brightness; if the sensor value is less than the reference value, the bit is set to ‘0’ since the light is not brighter than a certain brightness.Light Detect Compare Value is assigned to two places: ROM(Address 0x15) and RAM(Address 0x35), and when the power is turned on, the value of EEPROM is copied to RAM.IR Distance Sensor Value (Left/Center/Right)It is the IR sensor value of Dynamixel Sensor Module for distance measurement.  If the infrared rays are emitted from the IR-emitting part of AX-S1, the emitted infrared rays are reflected after hitting walls or objects.  The amount of the reflected rays is measured by the IR-receiving part of AX-S1, and the higher value is acquired, the closer walls and objects are located.  The measured values have the range of 0~255; only 255 may be appeared if any object or wall is located within a certain distance.Since it is an IR-mesurement type, reflection ratio may vary depending on the color and the surface texture of walls and objects; the measured value can be different from the expected value.Light Brightness Sensor Value (Left/Center/Right)It is the light detection sensor value of Dynamixel Sensor Module. The concept of this sensor is similar to IR sensor value’s, but it is measured without turning on the IR-emitting part; it can measure only infrared rays from a light.  For that reason, the light brightness sensor value can be measured from the light which emits a lot of infrared rays such as lightbulb, and also lights from a lighter or candles can be measurede.  The measured value has the range of 0~255.IR Obstacle DetectedIf IR Distance Sensor value of AX-S1 is greater than the reference value, a certain bit of object detection value is set to ‘1’, judging an object is detected.Please refer to the table below on the bits each sensor represents.            Bit      Name                  Bit 2      Object/Light are detected by the right sensor              Bit 1      Object/Light are detected by the central sensor              Bit 0      Object/Light are detected by the left sensor      Light DetectedIf light brightness sensor value of AX-S1 is greater than the reference value, a certain bit of light detected value is set to ‘1’, judging a light is detected.The bit each sensor represents is equal to the object detection value. (See Address 0x20 above)Sound LevelThe level of the sound which is coming into the mic of AX-S1 is measured and converted into numerical value. Because the sound level is fulctuated up and down as below, if there is no sound, the numerical value of 127~128 (0x7F~0x80) is got, and it gets closer to 0 or 255 (0xFF) as the sound gets louder. The sound level is entered about 3800 times per second.Maximum Sound LevelThe loudest sound level is saved separately among the sound levels of AX-S1.  That is, if current sound level is louder than the saved maximum sound level, the current sound is copied as maximum sound level.Therefore, the sound level lower than 128 is actually ignored, and it is assumed that the loudest sound level at the moment is accumulated and saved. See the following picutre for better understanding.Be careful if the maximum sound leve becomes 255 (0xFF) while being accumulated, the maximum sound level remains 255 because it cannot exceed 255.  Therefore, ‘0’ must be written on the maximum sound level part to measure the maximum sound level.Sound Detected CountAX-S1 has a function to count 1 time if a certain level of sound is made.  For instance, it is possible to count the number of claps.  However, to prevent 1 clap from being counted as multiple claps, once claps are counted one time, the claps are not counted for 80msec.  After the last count, the counted value is saved as sound detected count in 800msec.To recognize the time when the sound detected count is increased, count the number internally, and then save the value in the sound detected count in 800msec while initializing the internal count as ‘0.’  See the following picture for better understanding.Sound Detected TimeAX-S1 has a function to save the time of the moment whenever sound detected count is done.  The function is provided to detect the direction of sounds, and at least 2 units of AX-S1 are necessary.  The function is based on the difference of sound-incoming time to each of AX-S1 Mics using the speed of sound (The speed of sound is about 343m/sec ot 20 degrees of Celsius).Sound detected time is counted internally (Repeating the count of 0~65535), and the currently counted value is saved when sound detected count is increased.  Thus, after initializing sound detected time simultaneously to ‘0’ using Broadcasting command by separating 2 units of AX-S1 properly from each other, if sounds are made, the time difference between the two AX-S1s occurs pursuant to the directions of sounds.If the sound source is in the front, the sound is detected almost at the same time, but if the sound source is not in the front, the time difference occurs pursuant to the apart distance of AX-S1.  The direction of sound sources can be roughly estimated using the principle above.  See the following picture for better understanding.The sound counted time of AX-S1 is counted about every 4.096 msec and it is counted again from ‘0.’  Therefore, calculating by the speed of sound, the sound moves about 0.02mm per count, and the distance between two AX-S1s must be within 70cm.  For example, if the two AX-S1s are 10cm apart, in case of using the method above, the difference of sound detected time between two AX-S1s may vary up to 5000.  (If the difference is about 5000, it means the sound source is located at 90 degrees left or right of the two AX-S1s)Buzzer NotesA buzzer is installed in AX-S1, and simple beep sounds can be made.  Total 52 musical notes can be made in Buzzer Notes, and various notes can be made because there are whole tones and halftones in each octave.  The values of Buzzer Notes are assigned as the table below.Buzzer Ringing TimeAX-S1 has a function to control the buzzer alarming time.  It is possible to control by the unit of 0.1 second, and the minimum length is set to 0.3 seconds; the time can be extended up to maximum 5 seconds.  That is, if 0~3 is entered, the buzzer rings for 0.3 seconds; if the value over 50 is entered, the buzzer rings only for 5 seconds regardless of the value.  Moreover, if the ringing is finished, the buzzer ringing time is automatically initialized to ‘0.’There are 2 special buzzer ringing time functions for AX-S1.  Firstly, the buzzer can be ringing without stopping.  If 254 is entered in buzzer ringing time, and the number of desired musical notes is entered, the buzzer rings without stopping.  To stop the ringing, ‘0’ is entered in buzzer ringing time.Secondly, the buzzer can play special melodies.  If 255 is entered in buzzer ringing time, and then the value 0~26 is entered in buzzer notes, 27 melodies corresponding to each number can be played. If the ringing is finished, the buzzer ringing time is automatically initialized to ‘0.’Registered Instruction            Value      Meaning                  0      There are no commands transmitted by REG_WRITE              1      There are commands transmitted by REG_WRITE.      Note If ACTION command is executed, the value is changed into 0.Arrival of New Remocon DataIR remote controller communication is possible among other AX-S1s since IR remote controller sensor is installed on the front of AX-S1.  The data can be transmitted by 2 byte unit.IR remocon data can be transmitted to any direction since IR-emitting parts are installed in 3 directions: front/left/right, but the IR remocon data can be received only in limited angle because IR remocon sensor is installed only on the front.If IR remocon data is received on the sensor, the new remocon data arrival value is changed into ‘2’; it means 2 byte is received.  If the received remocon data are read, it is automatically initialized to ‘0.’Lock            Value      Meaning                  0      EEPROM area can be modified.              1      EEPROM area cannot be modified.      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.Received Remocon DataThe received data is saved in IR remocon sensor.  If this value is read, the new remocon data arrival value is automatically initialized to ‘0.’Remocon Data To Be TransmittedThe remocon data to be transmitted through the IR-emitting part is written.  The remocon data is transmitted as soon as the value of 2 bytes is written.IR Obstacle Detect Compare ValueIR Obstacle Detect Compare Value of Address 0x14 is saved in RAM area of Control Table.Currently, it is not possible to detect normally in short distance(e.g. within 5cm distance, the maximum value is always acquired) since, in case of IR Sensor of AX-S1, infrared rays are emitted strongly to detect in long distance.Therefore, AX-S1 supports low-sensitive mode for acurate detection in short distance; if ‘0’ is entered in IR Obstacle Detect Compare Value, it is converted to low-sensitive mode.  In low-sensitive mode, the long distance sensor performance is not satisfactory, but accurate and sensitive detection is possible in short distance because it is not saturated to the maximum value.Light Detect Compare ValueLight Detect Compare Value of Address 0x15 is saved in RAM Area of Control Table.How to AssembleThe types of AX-S1 option frames are as follows. The frame of AX-S1 is compatible with the frame of AX-12/12+.ReferencesDrawings",
        "url": " http://localhost:4000/docs/en/parts/sensor/ax-s1/"
      } ,
  
      "docs-en-edu-bioloid-beginner":  {
        "title": "BIOLOID Beginner",
      "content"	 : "BIOLOID BeginnerIntroductionRobots of 4 DOF can be built with Beginner Kit.  This kit is recommended for people who meet robots for the first time.  Learning the principle of robot building          You can build up 14 example robots with Bioloid Beginner Kit and learn the principle of robot building.      From a simple barrier bar of 1 DOF to an automobile or walking droid of 4 DOF, it is possible to build the robot and edit the example programs. It will help increasing your understanding for robot programming.      Purchasing 4 more AX-12+ for Bioloid Beginner Kit, you can build intermediate-level robots of 8 DOF.      Also, purchasing 14 additional AX-12+ for Bioloid Beginner Kit and frame set for Comprehensive Kit, you can build intermediate-level robots and advanced-level robots of 18 DOF.      You can also create your one and only robot by designing, assembling and programming it by yourself.      Getting StartedPart List  CM-5  AX-12  AX-S1PreparationAs shown in BIOLOID learning material, CM-5 is supposed to support existing BIOLOID software (Behavior Control Program, Motion Editor etc). Therefore, if you want to use RoboPlus software in CM-5, you need to change the firmware into other firmware which supports Roboplus. However, if you change the firmware, you would no longer be able to use the existing Bioloid software.The new-upgraded RoboPlus is an integrated programming software which can control Robotis products.Therefore, CM-5 based robots can be controlled by programming with RoboPlus.The usage is as below.  Download the Latest Version of RoboPlus.  Execute RoboPlus after installation.  Select RoboPlus Manager.  Connect CM-5 with the PC using serial cable.  Execute Firmware Wizard by pressing Control Restoration icon on RoboPlus Manager.  Select the port connected to the controller.  Users must set manually the port connected to the controller. Finish other programs and continue the process since the controller cannot be recognized in case the port is in use.  Select the port connected to the controller and press “Find” button.  Turn the power of the controller off and on.  To find the controller, the controller to be restored must be turned off and on.  Check the controller information.  When the controller is found, the information of current controller and the firmware to download are appeared.  Check the model name whether the controller is connected by the user or not.  (The version of controller information is for Boot Loader, not for firmware.)  Start the firmware installation again.  Press “Next” button to start firmware restoration. Please be careful not to interrupt the connection or turn the power off until it is completed.  Check the controller firmware re-installation result.Executing above procedure, CM-5 can be programmed with RoboPlus. Try to make the best robot with upgraded RoboPlus.OperatingBefore executing the program, the appropriate task codes and motions must be downloaded into the robot.  Turn on the power.  If it is not charged, POWER LED does not blink. Please refer to Charging.  Make the LED on Play blink by pressing MODE button.  Press START button to execute the program.  The LED is not blinking while the program is being executed.Charging CM-5To move a robot when it is not connected with SMPS, you have to use a battery. If the battery is discharged, please use by charging it according to following procedures.      Connect SMSPS to CM-5.            Turn on the CM-5 Power and press the U button      Note While the CM-5 is being charged, the power LED blinks. The speed of blinking shows how much it is left before finishing the charging. It will be more faster as it completes the charging. Once the charging is done, it will blink for every 2 seconds.TutorialScreen OutputObjective for this tutorial is to print 1 and 2 on the output screen as below.Write Task Code      Execute RoboPlus Task Program.    As seen in the picture below, go to Start &amp;gt; All Programs &amp;gt; ROBOTIS &amp;gt; RoboPlus &amp;gt; Software &amp;gt; RoboPlus Task to execute RoboPlus Task.              RoboPlus Task Initial Screen                Select a Controller.    Double click an empty line or press Enter, In the Select Control window, select the controller to use, then press the OK button.            Generating Start Program.    Select Start Program from the Select Instruction Type window, Start Program will be automatically generated in RoboPlus Task.            Input Endless Loop command    To print the numbers on the screen endlessly, use the Endless Loop command(Create a command line). Double click or press Enter on an empty line between { and } of Start Program to invoke the Select Instruction Type window. Select Loop &amp;gt; Endless Loop(while(1)) from the list.            Input Load command    Use Load command to input a Print command, which is needed to print numbers on the screen. Insert Execute &amp;gt; Load (Assignment value) into an empty line between { and } of Endless Loop.            Load 1 into Print    Choose the left parameter ( ? ) among the Load parameters(Explanation on the parameter). The left parameter receives input from the right parameter. Double click the left parameter ( ? ), or press Enter key after clicking it once to invoke the Select Parameter Window. Select Controller &amp;gt; Print then press OK.        Select Constant Numbers &amp;gt; Number &amp;gt; 1 for the right parameter ( ? ) in the same way.        When both parameters of the Load command have been set, it should look like below.            Load 2 into Print with Line    Select } under Print command (at the end of the endless loop section), and add new lines by pressing the Space key. Repeat Steps 5 and 6 to input the Load command and to input  Controller &amp;gt; Print with Line and 2. The final task code is shown below.            Save Task Code    Press Ctrl + S or the Save icon.      Download Task CodeDownload the task code created above.(How to Download Task Code)Execute Task Code      Open the Program Output Monitor    To see the output of the program, you must open the Program Output Monitor BEFORE executing the program. There are three ways to open the Program Output Monitor.                  Click on the View Print of Program in the Download Program window                    Click on the View Print of Program button in TOOLS.      Press F5 or click on View Print of Program (V)  menu under Program (P).            Executing the Program    When you turn on the controller, the LED will blink, showing it is in standby mode. Press the MODE button to move it to PLAY, then press START to execute the downloaded task code. You should see “1” and “2” being printed on the Program Output Monitor.      Button &amp;amp; LEDObjective for this tutorial is to program the U button to turn the AUX LED on and the D button to turn it off. Pressing the START button will end the program.Write Task CodeDownload Task CodeDownload the task code created above.(How to Download Task Code)Execute Task CodeExecute the program and check whether the AUX LED turns on when you press the U button and turns off when you press the D button. Press START button to end.Attacking DuckObjective for this tutorial is to build an attacking duck which attacks approaching objects. Please refer to 2-2-11 Attacking Duck of the assembly manual and complete the hardware.Caution Do not approach your face near the robot when the power is on. You may get injured by the robot.The attacking patterns of the duck are as follows.  If any object is not detected, the robot gets ready to attack by locating ID[1] joint in the middle and folding ID[2] ~ ID[3] joints.  If objects are detected on the left and the right side, the robot turns to the direction where objects are detected by moving ID[1] joint.  If objects are detected at the front, the robot unfolds ID[2] ~ ID[3] joints for attack.  It goes back to the status of “2” above.Write Task Code      Enter the basic value of the motor’s moving speed and Call initial behavior.        If an object is detected from the left side of the robot, turn the beak left.  If an object is detected by the left distance sensor of AX-S1, the location value (present location  value of the ID[1] joint + 20) is entered as the goal position to turn left.  However, to prevent from turning too much, it is written to move only if the present location value is less than 812.  If an object is detected from the right side of the robot, turn the beak right.If an object is detected by the right distance sensor of AX-S1, the location value (present location value of the ID[1] joint -20) is entered as the goal position to turn right.  However, to prevent from turning too much, it is written to move only if the present location value is greater than 212.  Attack if an object is detected at the frontIf an object is detected by the central distance sensor of AX-S1, the robot attacks by calling “Attack with beak.”  Make Initial BehaviorMove the beak in the center by inputting proper goal position value(512) into ID[1] joint, and then call “Attack with Beak” once to make initial behavior.  Make Attack BehaviorMake behaviors such as attack behaviors and raising head (ready behavior) by inputting proper goal position values into ID[2], ID[3] joints, and program “Behavior Wating(7)” function which can stop the behavior control program processing shortly until each behavior is completed.Download Task CodeDownload Complete Task Code (How to Download Task Code)Execute Task CodePlay the downloaded task code.Check if the attacking duck attacks an approaching object or not.Do not approach your face near the robot when the power is on. You may get injured by the robot.Obstacle Detecting CarObjective for this tutorial is to build an intellectual car which runs and avoids obstacles. Please refer to 2-2-9 Obstacle Detection Car of the assembly manual and complete the hardware.The behavior patterns of the obstacle detection car pursuant to obstacle detection in each direction are as follows.            Left      Front      Right      Behavior Pattern                  -      -      -      Forward              O      -      -      Turn Right              -      O      -      Backward              O      O      -      Turn Right              -      -      O      Turn Left              O      -      O      Forward              -      O      O      Turn Left              O      O      O      Stop      The mode of the robot is changed to wheel mode (infinite spinning mode) to use AX-12+ as the wheels of the obstacle detection car.Using RoboPlus Manager, set both the CW location limit value and the CCW location limit value of AX-12+ to 0.Write Task Code      Save the basic value of the motor’s moving speed as the variable        Use the standard value of the object detection and the object detection existence to judge object detection. To do so, set the object detection standard value.        Call appropriate motion functions pursuant to the object detection existence value. (Obstacle Detection Direction)    Make Stop / Forward / Backward / Turn Right / Turn Left Motions. Each motor’s moving speed is set by adding moving speed value which is the set speed value at the beginning and CW:0 and CCW:0 which represent directions.Download Task CodeDownload Complete Task Code (How to Download Task Code)Execute Task CodePlay the downloaded task code. Check if the obstacle detection car runs and avoids the obstacles.Walking Droid 1Objective for this tutorial is to make a walking droid which walks forward in normal situation and avoids obstacles.Since the walking droid uses various postures when it performs such as walking, avoiding obstacles, etc., it is convenient to use by saving the postures as motions.The following table represents the behavior patterns of the walking droid pursuant to surroundings and motion status.            Status      Behavior                  Initially executed      Stay in basic posture              No obstacles      Walking forward              Obstacles Found      Stop and walking backward              After walking backward      Changing direction to the left              Obstacles found even if turned left      Changing direction to the left      Besides duplicated motions, 4 motions must be made as below, and the robot can avoid obstacles while walking.  Stop  Walking forward  Walking backward  Changing direction to the leftMake Motions  Execute RoboPlus Motion and connect to the controller. (See “Connect Robot”)  Enter the name on the page 1 to make “Stop” motion, and then add steps.  The joint values of ID 1, 2, 3, 4 are set to 512. The values are applied to the robot if the rightward arrow is pressed, and the set posture can be checked. (This is the method that users enter the joint values directly.)  Adjust the executing time. It is set to 0.072 second which is the fastest time.  Enter the name on the page 12 to make “Walking Forward” motion, and then add steps.  Turn off torques of all joints by pressing torque-off button. You can see all the joint values are set to “OFF.”  The posture of robot are set by users. The following picture shows the walking posture of the walking droid.  As shown above, if the posture of robot is set and the “Torque-on” button is pressed, the present joint values of the robot are entered automatically to the posture of robot. The currently entered robot’s joints can be read as steps’ posture if the leftward arrow button is pressed(This is the method that users read the joint values from the robot).  Repeating the procedure from number 5, add “Walking Forward” posture to each step. If the posture addition is completed, adjust the stop time and the execution time properly.  If the motion execution button is pressed, the steps of present page are executed sequentially. Check if the robot is operating well.  Using the same method so far, add “Walking Backward” on the page 13 and “Turn Left” on the page 15.  Save the works have been done so far.Download Motion FileDownload Example Motion File (How to Download Motion File)Walking Droid 2Execute MotionsTo use this motion after saving the motions written on RoboPlus Motion in CM-5, the motions of CM-5 must be executed in the task code. Using the two parameters, the motions of robots can be executed.“Load” command must be used to execute the motions. If the “Load” command is selected, two parameter are created. In one parameter on the left, Motion Page in Controller -&amp;gt; Motion is selected, and in the other parameter on the right, the motion page number which includes desired motions is entered.If the task code is written as below and downloaded and executed in CM-5, the saved motions are executed on the page 5.Executing Asynchronous MotionsIt is a motion control method which makes robots do the next work without checking motion status of the robots. It is suitable for beginners because understanding the code is very intuitive. However, it may not be controlled as desired since duplicate execution can happen during the motion execution.Executing Synchronous MotionsIt is a motion control method which make robots do the next work after completing the execution by checking the motion status of the robots. It is suitable for intermediate-level users because the concept of Multi-Task is needed. In the case of infinite repetition motions, the task code must be written well since it may wait continuously when the motion status is checked.Infinite Repetition MotionsIt is effective to make regularly-repeated motions such as walking as an infinite repetition motion.Write Task Code  Call “Ready” when it is executed for the first time.  Call “Forward” if there is no obstacle.  If an object is detected by Central Distance Sensor, Stop and walk backward,and then turn left.  Even though it turns left, if an object is detected by Central Distance Sensor, it turns left until no object is detected.  Write a  function which executes the motion on the page 1 where the “Ready” motion is saved. To wait until the motion is complete after execution, Call the function “WaitMotion.”  Write a function which executes the motion on the page 12 where the “Forward” motion is saved. To wait until the motion is complete after execution, Call the function “WaitMotion.”  Write a function which executes the motion on the page 13 where the “Backward” motion is saved. To wait until the motion is complete after execution, Call the function “WaitMotion.”  Write a function which executes the motion on the page 15 where the “TurnLeft” motion is saved. To wait until the motion is complete after execution, Call the function “WaitMotion.”  Check the parameter value of the motion status, and write a function which waits while the motion is operating.Download Task CodeDownload Complete Task Code (How to Download Task Code)Execute Task CodePlay the downloaded task code.  Leave obstacles on the way of the path, and then check if the walking droid avoids the obstacles and walks.Walking Droid 3After adding turn-right motion to previously built Walking Droid, let us try wireless control(Zigbee Communication) using RC-100.Referring to Building Walking Droid 1 - Making Motion, you can make the right-turn motion additionally on the page 4 of the motion.For Zigbee communication, CM-5 and RC-100 are equipped with ZIG-100 module. (Please refer to the explanation pages on CM-5 and RC-100.)If U / L / D / R buttons of RC-100 are pressed, the Walking Droid performs forward / turn left / backward /turn right motions.Write Task CodeBased on previously written task code in Building Walking Droid 2 - Task Code:  Wait until the new wireless data is coming in, and if the data is coming in, it is saved in the received data variable.  In the received data, only the values regarding U / D / L / R keys in RC-100 are sorted by &amp;amp; Bit Calculation.  Compose the conditional sentences to perform forward / backward / turn left / turn right pursuant to the pressed buttons among all buttons. RC-Call “Ready” at the moment of releasing the pressed button of RC-100.  Write a function which executes the motion on the page 14 where the “TurnRight” motion is saved.  To wait until the motion is complete after execution, call the function “WaitMotion.”Download Task CodeDownload Complete Task Code (How to Download Task Code)Download Example Motion File (How to Download Motion File)Execute Task CodePlay the downloaded task code. Using RC-100, check if the robot moves to the desired directions by performing forward / backward / turn left / turn right motions.Converting .bpg to .tskObjective for this tutorial is to convert .bpg files written in Behavior Control Program into the Task code (.tsk) for RoboPlus Task.Open .bpg File      Open .bpg file using Open  Press Menu ≫ File(F) ≫ Open(O), Shortcut(Ctrl + O), or  Open() to select a file.        Open .bpg file using Drag &amp;amp; Drop  Drag .bpg file to RoboPlus Task.  Convert Commands      Start Program (Click here to see more information on the “Start Program.” )    It is the same as existing “Start”.} (Section End) of Start Program is the same as existing “End”.              RoboPlus Task      Behavior Control Program 1.0                                    End Program ( Click here to see more information on the “End Program” )    It is the same as existing Jump to the Label of “End” Command.              RoboPlus Task      Behavior Control Program 1.0                                    { (Start Block) / } (End Block) ( Click here to see more information on the “Start/End of Block.” )    Lately added concept-  it is not included in existing Behavior Control Program 1.0.        // (Comment or Memo) ( Click here to see more information. )    It is the same as existing “Comment.”  It does not have any influences on motions.              RoboPlus Task      Behavior Control Program 1.0                                    Calculate (Basic Calculation and Bit Calculation) ( Click here to see more information on the “Calculate.” )    It is the same as existing “Compute.”              RoboPlus Task      Behavior Control Program 1.0                                    Load (Input Values) ( Click here to see more information on the “Load.” )    It is the same as existing  “LOAD”.              RoboPlus Task      Behavior Control Program 1.0                                    Label (The Site for Jump) ( Click here to see more information on the “Label.” )    It is the same as existing “Label”. However, it is not possible to be called as in Behavior Control Program 1.0; only Jump is possible.              RoboPlus Task      Behavior Control Program 1.0                                    Jump (goto) ( Click here to see more information on the “Jump.” )    It is the same as existing “JUMP.”              RoboPlus Task      Behavior Control Program 1.0                                    (if) / (else if) / (else) ( Click here to see more information on the “if / else if / else.” )    It is the same as existing “(IF) / (ELSE IF) / (ELSE)”.              RoboPlus Task                                    Behavior Control Program 1.0                          In case that (CONT IF) comes after existing (AND), it is changed to &amp;amp;&amp;amp;.                              In case that (CONT IF) comes after existing (OR),  it is changed to                     .                                RoboPlus Task                                    Behavior Control Program 1.0                              Endless Loop (while(1)) ( Click here to see more information on the “Endless Loop.” )    It is the same as the code repeating the execution of certain blocks unconditionally using Label and JUMP.              RoboPlus Task                                    Behavior Control Program 1.0                          Loop While (while(Condition)) ( Click here to see more information on the “Loop While.” )It is the same as the code repeating the execution of certain blocks using Label and JUMP, depending on conditions.            RoboPlus Task                                    Behavior Control Program 1.0                          Loop For (for) ( Click here to see more information on the “Loop For.” )It is the same as the code repeating the execution of certain blocks only designated times using variables.            RoboPlus Task                                    Behavior Control Program 1.0                              Break Loop (break) ( Click here to see more information on the “Break Loop.” )    It is used equally as the code jumping to the next label of repeated sentences.              RoboPlus Task                                    Behavior Control Program 1.0                              Wait While (Conditional Repeat without Execution Paragraph) ( Click here to see more information on “Wait While.” )    In case the condition is “True”, it is used equally as the code jumping to its own label.              RoboPlus Task                                    Behavior Control Program 1.0                              Callback Function (callback) ( Click here to see more information on “Callback” function. )    Lately added concept : it is not included in existing Behavior Control Program 1.0.        Make/Call Function ( Click here to see more information on “Make/Call Function. )    The function is the same as the sub-routine composed of existing Label and RETURN.In RoboPlus Task, the function must be located outside of the block where is owned by Start Program (the block tied with { AND }).              RoboPlus Task                                    Behavior Control Program 1.0                              Exit Function (return) ( Click here to see more information on “Exit Function.” )    It is the same as the code performing JUMP to the label of existing RETURN.              RoboPlus Task                                    Behavior Control Program 1.0                        VideoDownloadThe following robots have less than 4 joints and the robots can be built with Beginner kit or Comprehensive Kit. Please refer to the assembly manual for Bioloid Beginner Kit and Comprehensive kit about how to assemble.Download Task CodeIf you want to use RoboPlus program for CM-5 (the controller used for Bioloid Beginner/Comprehensive Kits), you must update the firmware. Please refer to Firmware Update of RoboPlus Manager on how to update firmware.Preparation  Call the task code(*.tsk) from RoboPlus Task.          You can open it by double-clicking the task code file.      You can open it using Open File function of RoboPlus Task.      You can open it by dragging &amp;amp; dropping on RoboPlus Task.        Connect the PC and the Controller with USB2Dynamixel.  Turn on the power of the controller.Download      Connect the controller before downloading the task code.  To download the task code, the controller must be connected to the PC(Please refer to controller information for information on how to connect the controller to the PC).        Select the correct COM port (if you know) or else use the “Automatic Search” function  to easily find out the appropriate port. .  If RoboPlus Task is unable to find a controller, the following error message will be shown.  Check if the controller is connected to the PC. (See controller information on how to connect the controller.)  Check if the controller is turned on.  Check if the correct communication port was chosen.  Select the download menu.If the program has an error, you must find the error and correct it. (See “rule check error messages”)  Download the program.If the downloading fails, it will automatically try again from the beginning.  Execute the task code and your robot will move.  Turn on the controller and execute the downloaded task code(Please refer to each controller information to learn how to execute the task code).Download Motion FileFile motions can be converted into robot motions.      Open the file motion to download.        Connect to the robot.        Click on the “Download Motion” menu and wait for the download to complete.    Verify that the contents of the file motion have been copied to the robot motion as seen below.VideoExamplesBeginner LevelThe following robots have joints less than 4. The robots can be built with Beginner kit or Comprehensive Kit. Please refer to the assembly manuals for Bioloid Beginner Kit and Comprehensive kit about how to assemble.            Robot      Description                  1. Crossing Gate      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1]: Joint Mode- When U button on CM-5 is pressed, the gate will be opened.- When D button on CM-5 is pressed, the gate will be closed.              2. Universal Gauge      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[2]: Joint Mode- When U button on CM-5 is pressed, the speed of gauge will be increased.- When D button on CM-5 is pressed, the speed of gauge will be decreased.              3. Sound Lever Meter      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1]: Joint Mode, AX-S1 ID[100]- The gauge will move according to the sound volumes detected.- The sound level can be measured because the gauge makes move more when the sound is getting louder.              4. Crocodile Mouth      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[3]: Joint Mode, AX-S1 ID[100]- The mouth will be opened when the sensor detects an object.- The mouth will be opened, if there is an object in the mouth.- It will play a melody if no object is detected for 10 sec.              5. Pan Tilt      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[3, 4]: Joint Mode- Upper/lower tilt joint will move upwards, when you press the U button on CM-5.- Upper/lower tilt joint will move downwards, when you press the D button on CM-5.- Right/Left pan joint will move rightwards, when you press the R button on CM-5.- Right/Left pan joint will move leftwards, when you press the L button on CM-5.              6. Parking Gate      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1, 2]: Joint Mode, AX-S1 ID[100]- If an object is detected from a sensor, the barrier bar will be open vertically.- If an object is detected from a sensor and the barrier bar is pushed ahead at the same time, the bar will be open horizontally.- The barrier bar will be closed, if no objects are detected.              7. Melody Car      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1, 2, 3, 4]: Wheel Mode, AX-S1 ID[100]- It will move forward some distance with melody, when L button is pressed.- It will move backward some distance with melody, when R button is pressed.- It will turn right with melody, when U button is pressed.- It will turn left with melody, when D button is pressed.              8. Robot Arm      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1, 2, 3]: Wheel Mode- It will rotate its arms rightward, if you press the R button on CM-5.- It will rotate it arms leftward, if you press the L button on CM-5.- It will stretch its elbows, if you press the U button on CM-5.- It will bend over its elbows, if you press the D button on CM-5.- It will stretch its wrists, if you press the start button and U button at the same time.- It will bend over its wrists, if you press the start button and D button at the same time.              9. Obstacle Detecting Car      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1, 2, 3, 4]: Wheel Mode, AX-S1 ID[100]- Operate the detecting car after installing obstacles on the driving path.- Detect obstacles by itself, and avoid them while driving.              10. Greeting Penguin      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1, 2, 3, 4]: Joint Mode, AX-S1 ID[100]- If you put on your hands ahead of its head, it will bow.- If you put on your hands on the right side of its head, it will lift up its right hand.- If you put on your hands on the left side of its head, it will lift up its left hand.              11. Attacking Duck      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1, 2, 3]: Joint Mode, AX-S1 ID[100]- If you try to touch on its head with hands, it will attack  using its beak.- If  you touch on the right side of its head, it turns its head right.- If you touch on the left side of its head, it turns its head left.              12. Cliff Detecting Car      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1, 2, 3, 4]: Wheel Mode, AX-S1 ID[100]- Operate the detecting car after installing cliffs and obstacles on the driving path.- Detects cliffs and obstacles by it self, and avoid them while driving.              13. Clapping Penguin      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1, 2, 3, 4]: Joint Mode, AX-S1 ID[100]- It will bow, if you put your hands in front of its head.- It will clap as much times as your clapping sounds are heard.              14. Waking Droid      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload VideoDynamixel Setting: AX-12+ ID[1, 2, 3, 4]: Joint Mode, AX-S1 ID[100]- Operate the walking droid, after installing obstacles on walking path.- Detect obstacles by itself and avoid them while walking by feet.      ReferencesReplacing Fuse(CM-5)The fuse prevents the over power that flows in the CM-5 which can damage the circuit.If the CM-5 does not turn on with the battery but turns on when connected to the SMPS, replace your fuse.If the fuse is disconnected, followings will happen.  Can turn on the power of CM-5 with SMPS only.  The LED doesn’t blink even when you press the U button for charging.The fuse used for CM-5 is available at electric shops( Fuse Volume : 220V/5A )Dynamixel ManagementDynamixels used as robot actuators possess many functions. This section explains how to change the dynamixel’s settings.Changing the ID  Select the port the controller is connected to.      Click “Connect”.        A list of connected dynamixels is shown on the left. Click on the dynamixel you wish to change the ID of.  Click on the ID row in the Control Table.      Click on the ID List combo box to see a list of possible ID’s. Select the ID, then click Apply.        To use in RoboPlus Motion and RoboPlus Task, the ID must be within the following ranges.          The Dynamixel’s ID must be between 0 and 25.      The ID for AX-S1 should be set between 100 and 109.      Changing the Movement ModeThe dynamixel can operate in 2 different modes.  Wheel Mode : Rotates 360 degrees like a regular motor.  Joint Mode : Moves at a set angle with normal servo motors.The mode can be changed using RoboPlus Manager. Once the mode is set, it will be maintained, even when turned off.  Select the port the controller is connected to.      Click “Connect”.        A list of connected Dynamixels is shown on the left.  Click on the Dynamixel you wish to change the mode of. Then, click on the CW/CCW Angle Limit line in the Control Table.      To set to Wheel Mode, change the CW/CCW Angle Limit value to “0.”  Or, simply click on the “Wheel Mode” button.        To set to Joint Mode again, set the CW/CCW Angle Limit value to any number other than “0”. The initial values for Joint Mode are “0” for CW Angle Limit, and “1023” for CCW Angle Limit.TroubleshootingIf you cannot find the dynamixel you are looking for using RoboPlus Manager, try the following :  Connect just 1 Dynamixel and check if there are any duplicate IDs. If you see a Dynamixel on the left even though only 1 Dynamixel is connected, there is a high probability of a duplicate ID. Change the ID immediately.  If you are unable to find any Dynamixels as in the image below, click on “Dynamixel Search”. If the communication speed is not set to 1Mbps, the “Dynamixel Search” function automatically resets the controller’s communication speed to 1Mbps to enable it to be recognized.If the problem persists, your dynamixel may need repair. Please contact the service department of the company you purchased from.ZIGBee Wireless ControlZIGBeeZIG-100/110 uses ZIGBee for wireless communication. ZIGBee, like Bluetooth, is the communication technology commonly used in Personal Area Network (PAN). The communication quality of ZIGBee is better than that of IR, so it allows many users to control their robots without interferences.Caution Please note that not all products include a zigbee module and may need to be purchased separately.Controller &amp;amp; ZIGBeeOLLO and Bioloid both use the RC-100, which uses IR communication method. To upgrade to the Zigbee communication method, you must purchase the  ZIG-110 set separately. The ZIG-110 set includes one Zig-100 module, which is attached to the RC-100, and one Zig-110 module which is attached to the Controller.Note The modules in a single Zigbee set have been preconfigured to communicate with each other. Therefore, a module from one set may not work with a module from another set. Please be careful not to mix them up.            ZIG-100 installed in RC-100      ZIG-110 installed in CM-100                                          ZIG-110 installed in CM-510      ZIG-100 installed in CM-5                              Control Multiple RobotsThis method is to give out commands at once to several robots being used for dance or demonstrationGives out commands to the robot at once using the zigbee module’s broadcast modeBioloid(Entry/Advanced)      Communication with the Zig2Serial and carious robots            Communication with the RC-100 and carious robots        To use the CM-5, connect the controller and ZIG-100 module together.  Use the RoboPlus Manager to set the wireless ID of ZIG-100 module on the opposite party’s robot to 65535.  No need to set the broadcast channel for communication.  Use the RC-100 to give commands directly or use the Zig2Serial to give commands using the PC.            Device      Channel Default Value      Whether or not the channel can be changed                  CM-5      1      Unchangeable              Zig2Serial      1      Changeable              RC-100      1      Changeable      The channel for the ZIG-100 mounted on the CM-5 is unchangeable. Thus, all users must set their channel to #1 for broadcast communication. All channels for the devises must pair to communicate.Bioloid Premium Kit(CM-700)      Communication with the Zig2Serial and carious robots            Communication with the RC-100 and carious robots        When using the CM-510/CM-700, connect the ZIG-100 module with the controller.  Use the RoboPlus Manager to change the opposite party’s wireless ID to 65535.  The channel on the ZIG-110 connected to the controller it set to #4, so the channels on the Zig2Serial and RC-100 must be set to #4.  How to change the RC-100 channel  How to change the Zig2Serial channel            Device      Channel Default Value      Whether or not the channel can be changed                  CM-510CM530      4      Unchangeable              Zig2Serial      1      Changeable              RC-100      1      Changeable      The channel for the zigbee connected to the controller is not changeable. Thus, all users must set their channel to #4 for broadcast communicationAll channels for the devises must pair to communicate.",
        "url": " http://localhost:4000/docs/en/edu/bioloid/beginner/"
      } ,
  
      "docs-en-parts-communication-bt-110":  {
        "title": "BT-100/110A",
      "content"	 : "BT-110/110AIntroductionNote BT-100/110A is discontinued.BT-100/110A are Bluetooth modules that communicate via UART. The BT-100 and BT-110A only differ on mounting interface. The connectable parts are as follows:(Please refer to the explanation pages on each part on how to install.)  BT-100 : ZIG2Serial, RC-100A  BT-110A          CM-100A, CM-530 : Works for Remote Control, Wireless Download      CM-510, CM-700 : Works for Remote Control only (Use after firmware update)      Warning Followings are NOT compatible with BT-110A Set  Remote: RC-100 (When affixing on wireless module, green LED lights on)  Controller: CM-100, CM-5, CM-2+The BT-100/110A are sold together as a set and set with factory default settings so there’s no need to do additional work in settings during mounting. (Please be careful not to lose one of the set.)1:1 communication with BT-100/110A only.Example  Controlling OLLO Bug using Bluetooth Communication ( BT-110A set is used. )          Installing BT-110A to OLLO Bug Controller(CM-100A)      Installing BT-100 to Wireless Controller(RC-100A)        Controlling Bioloid Premium Kit in PC using Bluetooth Communication ( BT-110A set is used. )          Connecting to the serial port of PC after installing BT-100 to ZIG2Serial      Installing BT-110A to Bioloid Premium Kit Controller(CM-510, CM-530 and CM-700)      Caution Connect the modules while power is off. Connecting while power is on could result in malfunction.Specifications            Item      Description                  Weight      BT-100 : 2.2g, BT-110A : 5.2g              Dimension      BT-100 : 18.5mm * 20mm * 9.8mm (3.7mm, the height excluding connector)BT-110A : 18mm * 30mm * 9.1mm              Bluetooth      Bluetooth Specification 2.0 Support              Range      10M              Frequency      2.4GHz ISM Band              Bandwidth      MAX 250kbps              Default baud rate      57,600bps              Sensitivity      -83dBm (Typical)              Transmit Power      4dBm(Typical)              Bluetooth profile supported      SPP (Serial Port Profile)              Operating Voltage      3.3V              Consumed Current      48mA (Max)              Operating temperature      -10°C ~ 50°C              Baud rates      1,200bps ~ 230,400bps              Antenna      Chip Antenna              Interface      UART (TTL Level)              Flow Control (BT-100)      RTS, CTS support      Default Settings            Item      BT-100 Set values      BT-110A Set values                  Device Name      BT-100vx.x.x      BT-110vx.x.x              Pin Code (Pass key)      0000      0000              Uart (baud rate-data bit-parity bit-stop bit)      57600-8-N-1      57600-8-N-1              ROLE      MASTER      SLAVE              TIMEOUT      1sec      1sec              Connection Mode      MODE1      MODE2              Debug Char      0x21      0x21      PinoutBT-100            Pin No.      Name      Description      I/O      Signal Level                  1      GND      Ground (0v)      -      -              2      VCC      3.3V DC      INPUT      -              3      Status LED      Status LED      OUTPUT      TTL              4      FA RESET      Factory Reset(Reset to default setting)      INPUT      TTL              5      UART_CTS      UART Clear to Send      INPUT      TTL              6      UART_RTS      UART Ready to Send      OUTPUT      TTL              7      TXD      Transfer Data(Data Out)      OUTPUT      TTL              8      RXD      Receive Data(Data In)      INPUT      TTL      BT-110A            Pin No.      Name      Description      I/O      Signal Level                  1      RXD      Receive Data(Data In)      INPUT      TTL              2      TXD      Transfer Data(Data Out)      OUTPUT      TTL              3      VCC      3.3V DC      INPUT      -              4      GND      Ground (0v)      -      -      ",
        "url": " http://localhost:4000/docs/en/parts/communication/bt-110/"
      } ,
  
      "docs-en-parts-communication-bt-210":  {
        "title": "BT-210",
      "content"	 : "BT-210IntroductionBT-210 uses Bluetooth communication to allow the modules to interact via serial communication (UART). The compatible products are shown below:(Please refer to the compatible part for instructions on how to connect the device.)  BT-210          CM-100A, CM-530 : Wireless control, Wireless download      CM-510, CM-700, CM-900 : Wireless control (Firmware update required)      CautionFollowing products are not compatible with BT-210.  Remote Controller : RC-100, RC-100A  Controller : CM-100, CM-5, CM-2+Example  Able to control the OLLO Bug using Bluetooth communication.          Connect BT-210 onto the OLLO Bug controller (CM-100A)      Able to wirelessly control the OLLO with the Android smart phone by connecting the BT-210 onto the OLLO.        Using the PC to control the controller via Bluetooth communication.          Connect BT-210 onto the CM-900 and connect onto the Bluebooth port.      Able to mount the BT-201 onto the Bioloid Premium kit’s controller (CM-530)      Caution Please be sure to connect the device while the controller is turned off. Damage may occur if the device is connected while the power is turned on.Specifications            Item      Description                  Weight      4.51g              Size      18mm X 30mm X 9.1mm              Bluetooth      Bluetooth Specification 2.1 Support              Effective Communication Distance      10M              Frequency      2.4 GHz ISM Band              Bandwidth      MAX 250kbps              Default Baud rate      57600bps              Sensitivity      -81dBm (Typical)              Transmit Power      4dBm(Typical)              Bluetooth Profile Supported      SPP (Serial Port Profile)              Operational Voltage      3.3V              Consumed Current      48mA (Max)              Operating Temperature      -40°C ~ 85°C              Baud rate Range      1,200bps – 400,000bps              Antenna      Chip Antenna              Interface      UART (3.3V Level)              Conducted Net Power      -6~4dBm(Class 2)      Communication ModeUutilizes a pairing mechanism that allows reliable 1:1 communication.1:1 Communication  When using two BT-210s, it is possible to set one as the “Master” and the other as the “Slave”  use the device to communicate with each other. Also, It is possible to use the BT-210 with a smart phone—with the Bluetooth capability—by setting BT-210 to “Slave mode” and pairing the two devices to each other.  When the power is initially supplied to the BT-210, the blue LED blinks. Once the pairing is successful the blinking stops and the blue LED light is maintained.BT-210 Pairing SettingSetup      Download sketch example for the OpenCM-9.04(“f_SerialUSB_Serial2_Converter”)            Connect the BT-210 to the OpenCM9.04, then run Tera Term        Download Tera Term                Once connection is complete baud rate can be any.            Go to Setup-&amp;gt;Terminal and check local echo            From terminal check the box and press OK  From there enter the AT and enter an integer. The OK button becomes available and will allow check of the BT-210.            Once setup is complete when the BT-210 is connected to the CM-900 pick either master or slave mode The picture show master mode.      CommandsThe following are AT terminal commands for the BT-210      System reset  Enter ATZ press the Enter key and the BT-210 resets.if settings have changed the mode will change upon reset.        Mode change          Use this command to switch between master and slave modes for the BT-210.      AT+BTROLE=M -&amp;gt; Master mode      AT+BTROLE=S -&amp;gt; Slave mode      Afterwards enter ATZ to reset.                  MASTER Mode                  SLAVE Mode            Peripheral device search  This is possible only in master mode. Enter AT+BTINQ followed by the Enter key the device class comes as 0x1F00(SPP).            Connecting devices (pairing)  Once devices have been found they can be connected via its 12-digit hex MAC address.  for example a device with MAC address of abc2-ff-123458 enter ATDabc2ff123458 (ignore the – sign). When asked for pin code enter 0000.        Change pin code          AT+BTKEY=digit Pin Code      To change pin code follow the procedure below.                then enter AT+BTKEY (ignore the = sign)            Output current device class  Output of SPP (serial port profile) 0x1f00            Change Bluetooth device name  AT+BTNAME = for name change            Device Under Test (DUT) mode  Under this mode the device is a “test” device and not suited for applications.        Enter AT+BTDUT then ATZ  (make sure is in slave mode) To get out of DUT mode enter AT+BTDUT one more time then ATZ  Pinout            Pin No.      Name      Description      I/O                  1      RXD      Receive Data(Data In)      INPUT              2      TXD      Transmit Data(Data Out)      OUTPUT              3      VCC      3.3V DC      INPUT              4      GND      Ground (0v)      -      ",
        "url": " http://localhost:4000/docs/en/parts/communication/bt-210/"
      } ,
  
      "docs-en-parts-communication-bt-410":  {
        "title": "BT-410",
      "content"	 : "BT-410IntroductionBT-410 uses Bluetooth 4.0 Low Energy communication to allow the modules to communication via serial communication (UART). The compatible products are shown below.(Please refer to the respective links for instructions on how to connect with each product)1. BT-410 Compatible Devices  SLAVE module          CM-100A, CM-150, CM-200, OpenCM9.04 : wireless control, wireless download (requires latest firmware)      CM-510, CM-530, CM-700, CM-900 : wireless control        MASTER Moudle : RC-100B  NOT Compatible with :          Remote : RC-100, RC-100A      Controller : CM-100, CM-5, CM-2+      2. BT-410 Compatible Smart Devices  Compatible Smart Devices          Android : Android OS v4.4 or higher among Bluetooth 4.0 supported devices(eg. Nexus 7 2nd, Galaxy S3 or higher. However, if it is a new low cost device, Bluetooth 4.0 may not be supported)      iOS : iOS v8.1 or higher(eg. iPhone 4S, iPod Touch 5, iPad 3rd gen. or higher)        BT-410 Compatible Controllers &amp;amp; F/W versions          CM-150 : F/W v23 or higher      CM-200 : F/W v64 or higher      OpenCM9.04 : F/W v11 or higher, Revision E002(Requires the latest version of F/W)        Compatible ROBOTIS App          Android : ROBOTIS MINI App, R+ m.Task, R+ m.Task2, R+ m.Motion2, R+ Smart2, R+ IoT      iOS : ROBOTIS MINI App, R+ m.Task2, R+m.Motion2(Requires the latest version of smartphone applications. There may be additional updates depending on the OS policy.)      Example  Control ROBOTIS DREAM robots using Bluetooth communication          Connect the BT-410 SLAVE module onto the DREAM controller (CM-150).      Control the DREAM robot by connecting an Android/iOS smart device with BT-410.        Edit the motion for ROBOTIS MINI using Bluetooth communication          Connect the BT-410 SLAVE onto OpenCM9.04 and run R+ m.Motion on an Android/iOS smart device      Search for BT-410 on the smart device and connect      Use the R+ m.Motion App to edit and download the motion for ROBOTIS MINI      Caution Please make sure to turn off the controller before connecting the Bluetooth module. The device may cause malfunction or be damaged if connected while the controller is turned on.Specifications            Item      Description                  Weight      4.5              Dimension      18mm x 30mm x 9.1mm              Bluetooth      Bluetooth Specification 4.0 Low Energy Support              Effective Communication Distance      10M              Frequency      2.4GHz ISM Band              Bandwidth      MAX 128kbps              Default baud rate      57,600bps              Operating Voltage      3.3V              Current Consumption      7mA (Max)              Operating temperature      0°C ~ 40°C              Baud rates      1,200bps ~ 1,000,000bps              Antenna      Chip Antenna              Interface      UART (3.3V Level)              Sensitivity      -81dBm (Typical)              Conducted Net Power      -6 ~ 4dBm (Class 2)      Compatibility                   ZIG-110/100A      BT-100/110A/210      BT-410                  Android      X      O      O              iOS      X      X      O              PC      X      O      X              1 Master : 1 Slave      O      O      O              1 Master : N Slave      O      X      X              1 Phone : 1 Slave      X      O      O              1 Phone : N Slave      X      X      support later              Data Transfer Reliability      Low      High      High              Max Throughput      250kbps      250kbps      128kbps              Module FW Update      X      X      O              Default MAC Address      xxxx      BT-110/100 : 001901 xxxxxxBT-210 : B863BC xxxxxx      DBE7DF xxxxxx              MAC Address Range      0 ~ 65,535      6 Byte      6 Byte      Communication ModeUtilizes a pairing mechanism that allows reliable 1:1 communication.1:1 Communication  Once the power is supplied to the Bluetooth module, the blue LED will blink. When pairing is successful, the blue LED will stay on (solid).BT-410 SettingCan reset system, change device name, and set SLAVE address, but CAN NOT change mode.Setup      Download the “f_SerialUSB_Serial2_Converter” example for the OpenCM 9.04 using OpenCM IDE.            Use the USB port to connect the OpenCM9.04 to the PC, install the driver, then connect using the Tera Term terminal program through the respective COM port.        Download Tera Term                Connection is complete if the status is similar to the image shown below. The baud rate can be any value.            Go to Setup -&amp;gt; Terminal and check the “Local echo” box.            At the terminal, input “!” to display “OK”, to enter the command mode. Input “AT” and press enter to keep on displaying “OK”, which means the BT-410 has successfully connected.            Once terminal setup is complete, disconnect and reconnect the BT-410 to the OpenCM9.04 to check the SLAVE/MASTER mode it is in. The image below shows the MASTER mode.            Searching for peripheral devices only works when the BT-410 is in MASTER mode. As seen in the image below, input “AT+BTINQ” and press enter to display devices nearby with the device class 0x1F00(SPP).            For connecting the device, search for the device with the “AT+BTINQ” command, then enter the Bluetooth address that is displayed (hexadecimal number, 12 digits) to pair.  For example, for the image above, enter the same address abc2-ff-123458 without the “-“ (i.e. ATDabc2ff123458) then press enter to attempt a connection  Pairing won’t work if the PIN code between the devices don’t match, so please check the code first (default is 0000).      CommandsThe followings are AT terminal commands for the BT-410      System Reset  Enter ATZ press the Enter key and the BT-410 resets.if settings have changed the mode will change upon reset.            Peripheral Device Search  Searching for peripheral devices only works when the BT-410 is in MASTER mode. As seen in the image below, input “AT+BTINQ” and press enter to display devices nearby with the device class 0x1F00(SPP).            Connecting devices (pairing)  For connecting the device, search for the device with the “AT+BTINQ” command, then enter the Bluetooth address that is displayed (hexadecimal number, 12 digits) to pair.  For example, for the image above, enter the same address abc2-ff-123458 without the “-“ (i.e. ATDabc2ff123458) then press enter to attempt a connection.  Pairing won’t work if the PIN code between the devices doesn’t match, so please check the code first (default is 0000).            Changing Bluetooth device name  AT+BTNAME = “NAME OF NEW DEVICE NAME”            Reconfiguring pairing.            Enable/Disable Auto Pairing (REV2, Only applicable for MASTER module with a blue marker)          Disable Enter the command “AT+BTAUTOPAIR=0”                After a few seconds, below message will be displayed.            Enable Enter the command “AT+BTAUTOPAIR=1”            After a few seconds, below message will be displayed.      Note BT-410’s mode is unchangeable and can only be used at its default set mode. (Slave/Slave or Master/Master can not be paired)Pinout            Pin No.      Name      Description      I/O                  1      RXD      Receive Data(Data In)      INPUT              2      TXD      Transfer Data(Data Out)      OUTPUT              3      VCC      3.3V DC      INPUT              4      GND      Ground (0v)      -      ",
        "url": " http://localhost:4000/docs/en/parts/communication/bt-410/"
      } ,
  
      "docs-en-edu-ollo-bugkit":  {
        "title": "BUG KIT",
      "content"	 : "OLLO BUG KITIntroductionOLLO Bug Kit is the third kit among the kits for everyone, and the bug robots that play line-tracing game (The robots detect lines by themselves) and control game (The robots are controlled by wireless controllers) can be built by the kit.  The assembly manual is included to build 4 types of bug robots: Beetles, Ladybugs, Callipogon Relictus, and Grasshoppers.  Build the one and only robot for yourself.Note All-in-one sensor type controller(CM-100) and Geared Motor are included in OLLO Bug Kit. USB Downloader(LN-101) must be purchased to build and download the program that the users can control the bug robots directly. Please refer to Programming on how to program.The Examples of 4-Types of Bug Robot built according to the Assembly Manual.The Examples of Game with OLLO Bug RobotsOLLO Bug Game 1 Bug Battle  Place a robot in the circle.  Start the game with the whistling of the referee.  Push the opponent’s robot to the outside of the circle, You Win~!!OLLO Bug Game 2 Bug Line-Tracing  Place a bug robot on the line.  The robot traces the line as soon as the power is turned on.  Line-printed handout for OLLO Bug Line-Tracing : OLLO_LineTrace.pdfMake the line to be traced by the bug using the enclosed puzzle board with various shapes.The robot can go anywhere it wants.Line-printed handout for bug puzzle race : OLLO_PuzzleRacing.zipGetting StartedPart List  CM-100  RC-100  Geared MotorHow to PlayThe Basic Bug Program is supposed to be included when OLLO Bug Kit is manufactured. How to play of the basic bug program is as below.Powering BugIf you press the start button one time, the power is turned on; if you press the button once again, it is turned off.The bug controller (CM-100) has power-saving function, if the start button is not pressed again, the power is automatically turned off in 5 minutes.The power-saving function can be controlled by task code, and it is set to 5 minutes in the basic program.(See How to Control with Task Code)The Control Mode of the Remote ControllerIt is executed if the start button is pressed 1 or 2 times.( time: IR Channel 1, 2 times: IR Channel 2)The IR channel of RC-100 remote control must be matched to control wireleslly. (See How to Change the RC-100 IR Channel)The moving direction of  the bug robot is controlled using U / L / D / R button of RC-100.If servo motor is connected to Port 3, the motor is controlled using button 1 and 3.If servo motor is connected to Port 4, the motor is controlled using button  2 and 4.(Servo motor is not a basic-offered item; please purchase and connect it.)Line-Tracer ModeIf you press the start button 3 times, it is executed.The robot traces the black line on the white floor.If an object is detected, it stops; if you clap, it traces the line again.ZIGBee Wireless ControlZIGBeeZIG-100/110 uses ZIGBee for wireless communication. ZIGBee, like Bluetooth, is the communication technology commonly used in Personal Area Network (PAN). The communication quality of ZIGBee is better than that of IR, so it allows many users to control their robots without interferences.Caution Please note that not all products include a zigbee module and may need to be purchased separately.Controller &amp;amp; ZIGBeeOLLO and Bioloid both use the RC-100, which uses IR communication method. To upgrade to the Zigbee communication method, you must purchase the  ZIG-110 set separately. The ZIG-110 set includes one Zig-100 module, which is attached to the RC-100, and one Zig-110 module which is attached to the Controller.Note The modules in a single Zigbee set have been preconfigured to communicate with each other. Therefore, a module from one set may not work with a module from another set. Please be careful not to mix them up.            ZIG-100 installed in RC-100      ZIG-110 installed in CM-100                                          ZIG-110 installed in CM-510      ZIG-100 installed in CM-5                              ApplicationsBattle BugIf you purchase and connect additional Servo Motor to OLLO Bug Kit, various types of battle bugs can be built.The Basic Program for OLLO Bug is programmed to be able to control using RC-100 when a servo motor is connected to port 3 or 4.If servo motor is connected to Port 3, the motor is controlled using button 1 and 3.If servo motor is connected to Port 4, the motor is controlled using button 2 and 4.CarIf you purchase Big Tire Set additionally for OLLO Bug Kit, you can build cars with the tires.Other DevicesBesides the parts introduced in ‘Building Battle Bugs’ and ‘Building Cars,’  the following parts for OLLO controller (CM-100) are used to build various types of robots.            IR Sensor      Touch Sensor      LED Module                                    Learning ProgramPrint on the ScreenObjectiveWrite a program which prints out and checks the value of central IR sensor of the controller (CM-100) on the monitor for program output window.PreparationTo accomplish the learning objectives, write a task code first; RoboPlus software which can pop up the monitor window for program printout and the controller(CM-100) which can transmit the value of central IR sensor to PC by executing task code are necessary. Moreover, USB Downloader(LN-101) is needed to connect PC and the controller.Writing Task Code      Execute RoboPlus Task Program.            Select the Controller. If you select an empty line, and then Double Click or press Enter, Selecting Controller window is popped up. Select a controller, and then press OK button.            Writing Start Program. In the Select Instruction Type window, Select Program Start by Double clicking, and then press Enter.            Enter Endless Loop. Use Endless Loop to read the IR sensor value repeatedly and print out on the screen. Select the empty line between { and } and Instruction Selection window pops up if you press Enter or Double click.  Select Loop -&amp;gt; Endless Loop (while(1)).            Enter Load. Use Load to read the IR sensor value and enter as Screen Display. Input in the empty line between { and } of Endless Loop by selecting Execute -&amp;gt; Load (Assignment Value).            Load the value of Central IR Sensor by Screen Output. Select the left parameter( ? ) among the parameters of Load instruction. (Explanation Regrading Parameter). Parameter selection window is popped up as below if you double click ? and then press Enter.  Select Controller -&amp;gt; Print with Line and press OK.        As above, input Controller -&amp;gt; Central IR Sensor in the right parameter ( ? ).        The following screen shows that all the parameters of Load instruction are entered.            Save Task Code. Press Ctrl + S or Save Button to save.      Download Task CodeDownload the task code written above to the controller. (How to Download Task code)Run Program      Popping up the monitor for program printing window. To see the screen output during the program execution, monitor for program printing window must be popped up before program execution. How to pop up the monitor for program printing window: Click View Program Output button in the Program Download window, click View Program Output button in Toolbox, select View Program Output(V) of Program(V) menu, or Press F5 button.        Executing the Program. Once the monitor for program printing window is popped up, execute the downloaded program for the controller.  The internal LED is turned on by pressing the start button on the controller, and the downloaded program is executed. Check if the number values on the monitor for program printing window are changing or not by moving hands close and far from the front of central IR sensor of the controller.  Move the BugObjectiveLet us move the bug forward, left, right, and backward. (The bug robot can be made with OLLO Explorer and Inventor.)                                                Forward      Left      Right      Backward              Left Motor: ForwardRight Motor: Forward      Left Motor: StopRight Motor: Forward      Left Motor: ForwardRight Motor: Stop      Left Motor: BackwardRight Motor: Backward      PreparationPC(RoboPlus Task Program), Assembled Bug Robot, USB Downloader(LN-101)Writing Task CodeMove Forward      Executing RoboPlus Task and Creating program start (Please refer to See Printing Out the Screen). If RoboPlus Task is executed, the following screen can be seen.            Making Forward Function (Please refer here for more information on functions). Functions must be made outside of { and } in program start. Therefore, let us start making the functions from the 6th line. First of all, select Make Function on Function (Sub-routine) in the select instruction window which pops up if the 6th line is selected.        The function is made as below.        To designate function name, double click “Input_Name” part or enter the function name as “Forward” by pressing Enter as selected, and then press Enter again.            Motor Controlling to move the bug forward. For bug, two geared motors are supposed to move the legs made of left and right joints. To move the bug forward, both motors which move the legs must spin forward. To control geared motor, the motor control value must be entered using Load instruction. Select instruction type window is popped up if you double click the empty line between { and } of Forward function.  Select Execute -&amp;gt; Load (Assignment value).        To control the geared motor (left motor) which is connected to port 1, select the first ? and enter Geared Motor Port 1.        To designate the speed and the spin direction of the left motor, select the second ? and enter Direction : CCW and power : 1023. (CCW represents counter clockwise and the direction of the left motor.  Power 1023 is the maximum power value of geared motor; if the power is strong, the spinning power is also strong, The speed is fast.)        The following image shows the control value CCW:1023 is entered port 1 of the geared motor.        To control port 2 of the geared motor, insert an empty line under the instruction line just entered.  To insert an empty line, press Space at the desired location. The following image shows the Space is pressed after clicking the } location of Forward.        As the method above, insert an instruction line which orders to spin at the power of 1023 (Maximum power) and CW direction (Clockwise) to port 2 of the geared motor. (In case of the right motor, CW is the forward direction.)            Calling Function (Please refer here for more information on functions). To execute Forward function as soon as the program of CM-100 is executed, Forward function must be called in Program Start. To make the program execute continuously, Endless Loop is used.  Enter Endless Loop between { and } of Program Start.        Call Forward function in Endless Loop sentences.  Double click an empty line of Endless Loop or press Enter to select Call function on Function (Sub-routine).        Double click Input_Name part or press Enter to make the list of currently-made functions.  Select Forward function or enter it directly.        The following image shows the final results have been entered so far.      Moving BackwardFor moving backward, simply change the direction of two motors from the forward direction. Thus, let us make Backward function by modifying the Forward function.      Copying the Forward function and then pasting (Pleaser refer to 5. Copy/Cut/Paste). Select all the Forward function while dragging the Mouse and pressing Shift Key or Ctrl Key.        In the menu popped up by right-click, Copy by selecting Copy(C) or pressing Ctrl + C.        After clicking the 15th line under the Forward function, attach the function copied by clicking Paste(P) in the popped-up menu or pressing Ctrl + V.        The following image shows the copy and the paste of Forward function are completed.            Changing the name into Backward function and the direction of the motors. Change the name of copied fuction from Forward to Backward.  Double-click the function name part or press Enter to modify.     Change the spin direction of both motors to the opposite. Double-click the right parameter (CW:1023 or CCW:1023) part or Enter to modify.         In start program, change the calling function from Forward to Backward. When the program is started, Backward function is executed repeatedly.   Turning LeftTo make TurnLeft function, copy the Forward function the same as Backward function is copied and change the function name to TurnLeft; let the right motor (port 2) spin forward direction and stop only the left motor (port1) - Enter 0 in Power regardless CW/CCW;  the bug robot turns left.Turning RightTo make TurnRight function, copy the Forward function the same as the Backward function is copied and change the function name to TurnRight; let the left motor (port 1) spin forward direction and stop only the right motor (port 2) - Enter 0 in Power regardless CW/CCW;  the bug robot turns right.Download Task CodePlease refer to Program Download on the program download procedure.Program Result File :  bug_move.tskRun ProgramIf you turn on CM-100 by pressing the start button, the bug robot continuously moves forward or backward, or it turns left or right depending on the function called from Start Program.Line Tracing BugObjectiveThe degree of IR reflection varies pursuant to the colors of objects.  White reflects more IR, whereas black reflects less IR. Using such characteristics, let us program the IR sensor of CM-100 so that the robot can distinguish the white floor and the black line and trace the line.(It is programmed in the basis of Moving the Bug.)PreparationPC(RoboPlus Task Program), Assembled Bug Robot, USB Downloader(LN-101), a white board with a black line.Writing Task CodeThe algorithm of program which distinguishes the white floor and the black line and makes the bug trace the black line using left IR sensor and right IR sensor on the bottom of CM-100 is as below.      The right sensor detecting the black line (O), The left sensor detecting the black line (X) : Turn Right    If the black line is detected only by the right sensor, it means the line is curved to the right; change the robot’s moving direction to the right by stopping the right motor.        The right sensor detecting the black line (X), The left sensor detecting the black line (O) : Turn Left    In opposite to the case above, since the line is curved to the left, change the robot’s moving direction to the left by stopping the left motor.        The right sensor detecting the black line (X), The left sensor detecting the black line (X) : Forward    If both sensors do not detect the line, the robot moves forward without changing the direction since the line is located in between the sensors or the robot escaped from the line.        The right sensor detecting the black line (O), The left sensor detecting the black line (O) : Forward    If both sensors detect the line, the robot moves forward without changing the direction since there is a black line in width such as an intersection of crossroads(+) or the floor is black.  Enter the code which calls different function depending on the detecting conditions of the left/right IR sensors in program start, as mentioned In the previous example of Moving the Bug, and move the bug robot.      Turn left if the black line is detected only in the left IR sensor. Enter IF instruction of a conditional sentence to move in different ways depending on the conditions between { and } of Endless Loop in program. (Please refer here for more information on IF instruction). The screen after entering IF instruction is as below.        In the case that the black line is detected only on the left IR sensor, the value of left IR sensor is less than 200, while the value of right IR sensor is greater than 200. To find such conditions, enter left IR sensor in comparison parameter 1(the first ?) of the conditional sentence.        Since the left IR sensor value must be less than 200, &amp;lt; is entered as the comparison operator between the two comparison parameters.        Enter 200 in the comparison parameter 2 (the second ?).        Since the conditions must be satisfied: ( Left IR Sensor &amp;lt; 100 ) and ( Right IR Sensor &amp;gt; 200 ), change the connecting operator to &amp;amp;&amp;amp; (AND) by clicking then.  If the connecting operator is changed, a conditional sentence is automatically added to the next.        Complete the IF instruction; enter right IR sensor on comparison parameter 1 of the second conditional sentence, &amp;gt; as the comparison operator, and 200 for comparison parameter 2.        If the completed conditional sentence is True (If the black line is detected only on the left IR sensor), Calls TurnLeft function.            Conversely, turn right if the black line is detected only in the right IR sensor. To check the conditions continuously after the IF instruction of 1, enter ELSE IF instruction of a conditional sentence. If IF instruction conditional sentence of 1 is True, the ELSE IF instruction is not executed.        Not like in 1, if the black line is detected only by the right IR sensor, the left IR sensor value is greater than 200, while the right IR sensor value is less than 200. Regarding the conditional sentence, refer to 1 and write the comparison operator in the opposite of 1.  In this case, TurnRight function is called.            In the cases besides 1 and 2, that it, the black line is detected by both IR sensors, or the line is not detected by both IR sensors; the robot moves forward. In the case that not belongs to the conditional sentences mentioned above, enter ELSE instruction of a conditional sentence to move forward, and call Forward function.      Download Task CodePlease refer to Program Download on the program download procedure.Program Result File :  bug_linetracer.tskDownload the Handout for Line TracerRun ProgramPlace the bug on the white board with a black line and play.  Check if the bug traces the line or not.Sensing BugObjectiveLet us program a robot which traces the black line on the white floor like the line-tracing bug and stops if an object is detected by the central IR sensor; moreover, if clapping sounds are detected, it traces the black line again. (It is programmed in the basis of The Line-Tracing Bug)PreparationPC(RoboPlus Task Program), Assembled Bug Robot, USB Downloader(LN-101), a white board with a black line.Writing Task Code      Add Stop Function. If an object is detected by the central IR sensor, Stop function is added to stop the movement. Make function referring to Moving the Bug.    Enter Power 0 in the Left and Right Geared Motors and make Stop function.            Call Stop function if an object is detected by the central IR sensor.    If the value of the central IR Sensor becomes greater than 200 by adding IF instruction in start program (an object is detected), call Stop function.            Wait shortly until the bug stops completely.    To use sound detection, the bug must stop completely; it is assumed that if the bug moves, the sounds of the bug are detected since the moving sounds such as the motor sound are recognized by the mic of CM-100 as quite loud sounds. Therefore, add the code which waits for certain time period using timer. (Please refer here for more information on timer.)    Enter 1 second in the timer using Load instruction.                To wail until the timer becomes 0, use Conditional Stand instruction(Pleaser refer here for more information on conditional stand). It is Conditional Stand;;  waits until the value becomes 0 by counting (while the value is greater than 0).                Wait until the clapping sounds come out through mic.    If the motions are stopped because an object is detected by the central IR sensor, make the code which waits until sounds are detected in stop status. Since Sound count is not automatically initialized to 0, it must be initialized to 0 by Load instruction before waiting(Please refer here for more information on sound count).            Wait if the Sound Count is 0.  Download Task CodePlease refer to Program Download on the program download procedure.Program Result File :  bug_sensor.tskRun ProgramAfter executing the program, check if the bug robot stops or not when an object is detected by the central IR sensor. Later on, check if the bug moves again or not by clapping.Control the BugObjectiveLet us program a robot so as to control forward, backward, left and right using RC-100 controller(It is programmed in the basis of The sensor-responding bug).PreparationPC(RoboPlus Task Program), Assembled Bug Robot, USB Downloader(LN-101), RC-100Writing Task Code      In the existing code, delete the surrounded part with { and } of Endless Loop in start program.            Wait until new wireless data arrive using Conditional Stand instruction to receive wireless control signal of RC-100(Please refer here for more information on new wireless data arrival).                If the new wireless data is arrived, enter the received wireless data in ReceivedData variable using Load instruction(Please refer here for more information on Variable).                    Separate the RC-100 Moving Control Button value from the Received Wireless Data values.    Enter U, L, D, R button values of RC-100 in MovingControlKey variable by separating necessary values through Bit Operator &amp;amp; from ReceivedData values using Compute instruction. Enter Compute instruction (Please refer here for more information on Compute instruction.)        Enter MovingControlKey variable in Result column and then ReceivedData variable in Operation Parameter 1; select &amp;amp; (AND) as the next operator.        Select U, L, D, R as RC-100 button values and enter them in Operation Parameter 2(Please refer here for more information on RC-100 button values).        The following image shows the data are completely entered.            Move forward and backward and turn left and right depending on the value of MovingControlKey. it stops if all the MovingControlKey buttons are released.      Download Task CodePlease refer to Program Download on the program download procedure.Program Result File :  bug_rc.tskRun ProgramAfter executing the program, control the robot forward, backward, left, and right using RC-100 controller.[Download]Download Task Code OLLO_BUG_Product_EN.tskNote How to Download Task codeNote How to play Bug",
        "url": " http://localhost:4000/docs/en/edu/ollo/bugkit/"
      } ,
  
      "docs-en-parts-controller-cm-100":  {
        "title": "CM-100A",
      "content"	 : "CM-100AIntroduction  This controller is used in OLLO and can connect other products such as the geared motor box, servo motor, touch sensor, LED module, IR Sensor, etc.  Create a task code for control using RoboPlus Task and use it to control the movements.  The CM-100A controller does not support RoboPlus Motion.Specifications            Item      Description                  Weight      22g              Size      42mm x 42mm x 18mm              Voltage Supply      Range : 2.0V ~ 3.5VRecommended : 3.0V (AA or LR6 x 2)              Consumed Electric Current      IDLE(0.04mA)Play Mode(30mA)Max(1000mA)              Operation Temperature      -5°C ~ 70°C              Embedded Device      IR Sensor (Detects distance) x 3MIC (Detects sounds) x 1Buzzer x 1              External Device Connection Port      Communication Port (For wireless control and download) x 1Motor Connection Port (For geared motor box) x 2Multi-purpose Port (For sensor and output ) x 2      Layout  Start Button : When you press the start button on the CM-100 and the LED inside turns on, the downloaded program is executed.  IR Sensor : The programming can be performed by the sensor value from each direction because 3 units of IR sensor are installed.  Upper Port  : Located right next to the START button. Connects with the USB Downloader (LN-101), IR Receiver, ZIG-110, etc.  Port 1 ~ 2 : Each port number is represented in bars like I and II. The geared motor box can be connected to the 2 pin port.  Port 3 ~ 4 : Each port number is represented in bars like III and IIII. The IR Sensor, Touch Sensor, Servo Motor, and LED Module can be connected to the 5 pin port.Connecting Power  CM-100A can be connected to the power using 2 AA-size batteries.  The range of voltage is 2.0V ~ 3.5, and the recommended voltage is 3.0V.  The simplified circuit composition of the power port is as follows; connect (+) terminal of the battery to the (+) pins and (-) terminal to the (-) pins.How to Operate  When you press the start button and the LED inside is turned on, the downloaded program is executed.  Depending on the amount of time the continue button is pressed in the beginning, Number of pressed Start button will increase. Thus, if you use this parameter to program, you can arrange different movements pursuant to the number of times the start button is pressed.  If you press the start button again when the controller is turned on, it will turn off.Connect to PCLN-101 is required to connect CM-100A to PC. For more information, please refer to LN-101.Wireless CommunicationYou can connect a ZIG-110 wireless communication module on the CM-100A.",
        "url": " http://localhost:4000/docs/en/parts/controller/cm-100/"
      } ,
  
      "docs-en-parts-controller-cm-150":  {
        "title": "CM-150",
      "content"	 : "CM-150Introduction  Control DREAM robots, connect various components (reduction motors, servo motors, LED mobules, IR sensor, etc).  Recover controller firmware with RoboPlus Manager(v1.0.30.0 or higher)  Write a task code and control robot’s components with RoboPlus Task  RoboPlus Motion does NOT support the CM-150Specifications            Item      Description                  Weight      21g              CPU      STM32F103C8              Size      42mm x 42mm x 18mm              Voltage Supply      Range : 3.2V ~ 4.2VRecommended : 3.7V (Li-ion Battery x1)              Current Consumption      Standby(50mA)Running(70mA)Max(300mA)              Operation Temperature      -5°C ~ 70°C              Internal I/O components      IR sensor(measure distance) x 3Mic(Sound sensor) x 1Buzzer x 1              External I/O components      4-pin comunication (wireless control &amp;amp; download) x 1Micro USB port (connect to PC) x 1Motor potrs (for reduction motor) x 2Multi-usage port(sensor and outputs) x 2      Control TableControl Table consists of data regarding the current status and operation of controller. The user can control controller by changing data of Control Table via Instruction packet.      EEPROM and RAMData in RAM area is reset to initial values whenever the power is turned on while data in EEPROM area is kept once values are set even if the power is turned off.        AddressRepresents the location of data. To read from or write data to the control table the user should assign the correct address in the Instruction packet.        AccessController has two kinds of data: Read-only data, used mainly for sensing, and read-and-write data used for driving.        Initial ValueIn case of data in the EEPROM Area, the initial values on the right side of the below Control Table are the factory default settings.In case of data in the RAM Area, the initial values on the right side of the following control table are the ones when the power is turned on.        SizeThe Size of data varies from 1 ~ 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet.  EEPROM Area            Address      Size      Name      Description      Access      Init Value                  0      2      Model Number      Model Number      R      400              6      1      Firmware Version      Firmware Version      R      -              7      1      ID      Controller ID      RW      200              8      1      Baud Rate      Communication Baud Rate      R      1              9      1      Return Delay Time      Response Delay Time      RW      0              10      1      Status Return Level      Select Types of Status Return      RW      2      RAM Area            Address      Size      Name      Description      Access      Init Value                  21      1      Mode Number      Operation Mode      RW      -              25      1      Press Counter      Counts Start Button Press      R      -              26      1      Button Status      Start Button Status      R      0              30      2      My Zigbee ID      Local Zigbee ID      R      -              32      2      Your Zigbee ID      Remote Zigbee ID      RW      -              36      1      IR Communication Channel      IR Receiver Channel Number      RW      1              73      1      128ms Timer Value      128ms Timer Counter      RW      0              74      2      1ms Timer Value      1ms Timer Counter      RW      0              76      1      Power Save Timer Value      Power Save Timer Counter      RW      0              77      1      Random Number      Creating Random Number      RW      -              79      1      Green LED      Green LED Status      RW      0              82      1      Motion LED      Motion LED Status      RW      0              84      1      Buzzer Index      Buzzer Melody Frequency      RW      0              85      1      Buzzer Time      Buzzer Play Time      RW      0              86      1      Sound Detected Count      Final Count for Detected Sound      R      0              87      1      Sound Detecting Count      Current Count for Detected Sound      R      0              91      2      Internal Right IR Sensor Value      Sensor Value of Right IR      R      -              93      2      Internal Left IR Sensor Value      Sensor Value of Left IR      R      -              95      2      Internal Center IR Sensor Value      Sensor Value of Center IR      R      -              128      1      Port 3 Servo Mode      Servo Motor on Port 3      RW      -              129      1      Port 4 Servo Mode      Servo Motor on Port 4      RW      -              136      2      Port 3 Motor Speed      Speed of the Motor on Port 3      RW      -              138      2      Port 4 Motor Speed      Speed of the Motor on Port 4      RW      -              152      2      Port 1 Motor Speed      Speed of the Motor on Port 1      RW      -              154      2      Port 2 Motor Speed      Speed of the Motor on Port 2      RW      -              156      2      Port 3 Servo Position      Position of the Motor on Port 3      RW      -              158      2      Port 4 Servo Position      Position of the Motor on Port 4      RW      -              172      2      Port 3 IR Sensor Value      IR Sensor Value on Port 3      R      -              174      2      Port 4 IR Sensor Value      IR Sensor Value on Port 4      R      -              204      1      Port 3 Touch Sensor Value      Touch Sensor Value on Port 3      R      -              205      1      Port 4 Touch Sensor Value c      Touch Sensor Value on Port 4      R      -              212      1      Port 3 LED Module Value      Port 3 LED Module Control Value      RW      0              213      1      Port 4 LED Module Value      Port 4 LED Module Control Value      RW      0              220      2      Port 3 User Device Value      User Device Value on Port 3      RW      0              222      2      Port 4 User Device Value      User Device Value on Port 4      RW      0              236      1      Port 3 Temperature Sensor Value      Temperature Sensor Value on Port 3      R      -              237      1      Port 4 Temperature Sensor Value      Temperature Sensor Value on Port 4      R      -              244      1      Port 3 Ultrasonic Sensor Value      Ultrasonic Sensor Value on Port 3      R      -              245      1      Port 4 Ultrasonic Sensor Value      Ultrasonic Sensor Value on Port 4      R      -              252      1      Port 3 Magnetic Sensor Value      Magnetic Sensor Value on Port 3      R      -              253      1      Port 4 Magnetic Sensor Value      Magnetic Sensor Value on Port 4      R      -              260      1      Port 3 Motion Sensor Value      Motion Sensor Value on Port 3      R      -              261      1      Port 4 Motion Sensor Value      Motion Sensor Value on Port 4      R      -              268      1      Port 3 Color Sensor Value      Color Sensor Value on Port 3      R      -              269      1      Port 4 Color Sensor Value      Color Sensor Value on Port 4      R      -              276      1      Port 3 Hydro-Thermo Sensor Humidity Value      Humidity Value on Port 3      R      -              277      1      Port 4 Hydro-Thermo Sensor Humidity Value      Humidity Value on Port 4      R      -              284      1      Port 3 Hydro-Thermo Sensor Temperature Value      Temperature Value on Port 3      R      -              285      1      Port 4 Hydro-Thermo Sensor Temperature Value      Temperature Value on Port 4      R      -              292      2      Port 3 Brightness Sensor Value      Brightness Sensor Value on Port 3      R      -              294      2      Port 4 Brightness Sensor Value      Brightness Sensor Value on Port 4      R      -      Note Some Addresses of the Control Table can be tested with R+ Manager 2.0.Layout  Start button: After a short press the LED will turn on and the loaded program runs  IR sensors : measure and program each of the integrated 3 IR sensors  Top 4-pin port : located next to the Start button connect an IR receiver,  Micro USB port: located next to the 4-pin port connect a micro USB cable to the PC.  Port 1 ~ 2 : shown as “I” and “II” connect reduction motors  Port  3 ~ 4 : shown as “III” and “IIII” connect IR sensors, touch sensors, servo motors and LED modules.Connecting Power  Power for the CM-150 is supplied by a single LBS050 Li-ion battery  Operating voltage range: 3.0-4.7V (3.7V recommended)  Power polarity pins are shown in the diagram belowHow to Operate  Press the Start button the LED turns on and the controller runs one downloaded program  Press the Start button to turn on then press the Start N times. The controller is can run a specific parts of a program given said N number of presses.  Hold the Start button for more than 1 second and it will emit 2 beep sounds, LED turns on, and the controller is under management mode (downloading not possible in this mode).  Hold the Start button for more than 5 seconds and it will emit 3 beep sounds. The controller is in firmware recovery mode  To turn off the controller press the Start button  The controller automatic turn-off time is 5 seconds by defaultReference Automatic Turn-offConnect to PC  To connect the CM-150 to the PC a micro USB cable is required.  For more information for PC connection check the USB driver installation page.Wireless CommunicationThe CM-150 is compatible with BT-210 / BT-110 / ZIG-110 wireless communications modules.",
        "url": " http://localhost:4000/docs/en/parts/controller/cm-150/"
      } ,
  
      "docs-en-parts-controller-cm-200":  {
        "title": "CM-200",
      "content"	 : "CM-200Introduction  Can connect and control SMART device (reduction motors, servo motors, touch sensors, IR sensor, LED mobules, etc)  Recover controller firmware with RoboPlus Manager(v1.0.30.0 or higher)  Write a task code and control device with RoboPlus Task  The CM-200 supports RoboPlus MotionSpecifications            Item      Description                  Weight      25g              CPU      STM32F103C8              Size      54mm x 42mm x 18mm              Voltage Supply      Range : 4.8V ~ 8.4VRecommended : 6.0 ~ 7.4V (Battery x 2 or Li-ion Battery x1)              Current Consumption      Standby(80mA)Running(150mA)Max(300mA)              Operation Temperature      -5°C ~ 70°C              Internal I/O components      IR sensor(measure distance) x 3Mic(Sound sensor) x 1Buzzer x 1              External I/O components      4-pin comunication (wireless control &amp;amp; download) x 1Motor potrs (for reduction motor) x 2Multi-usage port(sensor and outputs) x 8      Control TableControl Table consists of data regarding the current status and operation of controller. The user can control controller by changing data of Control Table via Instruction packet.      EEPROM and RAMData in RAM area is reset to initial values whenever the power is turned on while data in EEPROM area is kept once values are set even if the power is turned off.        AddressRepresents the location of data. To read from or write data to the control table the user should assign the correct address in the Instruction packet.        AccessController has two kinds of data: Read-only data, used mainly for sensing, and read-and-write data used for driving.        Initial ValueIn case of data in the EEPROM Area, the initial values on the right side of the below Control Table are the factory default settings.In case of data in the RAM Area, the initial values on the right side of the following control table are the ones when the power is turned on.        SizeThe Size of data varies from 1 ~ 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet.  EEPROM Area            Address      Size      Name      Description      Access      Init Value                  0      2      Model Number      Model Number      R      400              6      1      Firmware Version      Firmware Version      R      -              7      1      ID      Controller ID      RW      200              8      1      Baud Rate      Communication Baud Rate      R      1              9      1      Return Delay Time      Response Delay Time      RW      0              10      1      Status Return Level      Select Types of Status Return      RW      2      RAM Area            Address      Size      Name      Description      Access      Init Value                  21      1      Mode Number      Operation Mode      RW      -              25      1      Press Counter      Counts Start Button Press      R      -              26      1      Button Status      Start Button Status      R      0              30      2      My Zigbee ID      Local Zigbee ID      R      -              32      2      Your Zigbee ID      Remote Zigbee ID      RW      -              36      1      IR Communication Channel      IR Receiver Channel Number      RW      1              66      2      Motion Play Page      Motion Play Page Number      RW      0              68      1      Motion Play Status      Motion Play Status      R      -              73      1      128ms Timer Value      128ms Timer Counter      RW      0              74      2      1ms Timer Value      1ms Timer Counter      RW      0              76      1      Power Save Timer Value      Power Save Timer Counter      RW      0              77      1      Random Number      Creating Random Number      RW      -              79      1      AUX LED(Red)      AUX LED(Red) Status      RW      0              84      1      Buzzer Index      Buzzer Melody Frequency      RW      0              85      1      Buzzer Time      Buzzer Play Time      RW      0              86      1      Sound Detected Count      Final Count for Detected Sound      R      0              87      1      Sound Detecting Count      Current Count for Detected Sound      R      0              88      2      Low Battrey Sound Enable      Enable Low Battery Warning      RW      0              91      2      Internal Right IR Sensor Value      Sensor Value of Right IR      R      -              93      2      Internal Left IR Sensor Value      Sensor Value of Left IR      R      -              95      2      Internal Center IR Sensor Value      Sensor Value of Center IR      R      -              97      1      Input Power Voltage (unit : 0.1V)      Measures Input Voltage      R      -              128      1      Port 3 Servo Mode      Servo Motor on Port 3      RW      -              129      1      Port 4 Servo Mode      Servo Motor on Port 4      RW      -              136      2      Port 3 Motor Speed      Speed of the Motor on Port 3      RW      -              138      2      Port 4 Motor Speed      Speed of the Motor on Port 4      RW      -              152      2      Port 1 Motor Speed      Speed of the Motor on Port 1      RW      -              154      2      Port 2 Motor Speed      Speed of the Motor on Port 2      RW      -              156      2      Port 3 Servo Position      Position of the Motor on Port 3      RW      -              158      2      Port 4 Servo Position      Position of the Motor on Port 4      RW      -              172      2      Port 3 IR Sensor Value      IR Sensor Value on Port 3      R      -              174      2      Port 4 IR Sensor Value      IR Sensor Value on Port 4      R      -              204      1      Port 3 Touch Sensor Value      Touch Sensor Value on Port 3      R      -              205      1      Port 4 Touch Sensor Value c      Touch Sensor Value on Port 4      R      -              212      1      Port 3 LED Module Value      Port 3 LED Module Control Value      RW      0              213      1      Port 4 LED Module Value      Port 4 LED Module Control Value      RW      0              220      2      Port 3 User Device Value      User Device Value on Port 3      RW      0              222      2      Port 4 User Device Value      User Device Value on Port 4      RW      0              236      1      Port 3 Temperature Sensor Value      Temperature Sensor Value on Port 3      R      -              237      1      Port 4 Temperature Sensor Value      Temperature Sensor Value on Port 4      R      -              244      1      Port 3 Ultrasonic Sensor Value      Ultrasonic Sensor Value on Port 3      R      -              245      1      Port 4 Ultrasonic Sensor Value      Ultrasonic Sensor Value on Port 4      R      -              252      1      Port 3 Magnetic Sensor Value      Magnetic Sensor Value on Port 3      R      -              253      1      Port 4 Magnetic Sensor Value      Magnetic Sensor Value on Port 4      R      -              260      1      Port 3 Motion Sensor Value      Motion Sensor Value on Port 3      R      -              261      1      Port 4 Motion Sensor Value      Motion Sensor Value on Port 4      R      -              268      1      Port 3 Color Sensor Value      Color Sensor Value on Port 3      R      -              269      1      Port 4 Color Sensor Value      Color Sensor Value on Port 4      R      -              276      1      Port 3 Hydro-Thermo Sensor Humidity Value      Humidity Value on Port 3      R      -              277      1      Port 4 Hydro-Thermo Sensor Humidity Value      Humidity Value on Port 4      R      -              284      1      Port 3 Hydro-Thermo Sensor Temperature Value      Temperature Value on Port 3      R      -              285      1      Port 4 Hydro-Thermo Sensor Temperature Value      Temperature Value on Port 4      R      -              292      2      Port 3 Brightness Sensor Value      Brightness Sensor Value on Port 3      R      -              294      2      Port 4 Brightness Sensor Value      Brightness Sensor Value on Port 4      R      -      Note Some Addresses of the Control Table can be tested with R+ Manager 2.0.Layout  Start button: After a short press the LED will turn on and the loaded program runs  IR sensors : measure and program each of the integrated 3 IR sensors  Top 4-pin port : located next to the Start button connect an IR receiver, USB downloader (LN-101), ZIG-110A or BT210A  Port 1 ~ 2 : shown as “I” and “II” connect reduction motors  Port  3 ~ 4 : shown as “III” and “IIII” connect IR sensors, touch sensors, servo motors and LED modules.  POWER LED (red): LED turns on when powered on  TX LED (green): Data transmission LED from controller to external device (via 4-pin port)  RX LED (blue): Data reception LED from external to controller (via 4-pin port)  AUX LED (red): user-controlled on/off functionConnecting Power  Power for the CM-200 is supplied by 2 ABB-030 battery or a single LBS050 Li-ion battery LBS-040  Operating voltage range: 4.8-8.4V (6.0-7.4V recommended)  Power polarity pins are shown in the diagram belowHow to Operate  Press the Start button the LED turns on and the controller runs one downloaded program  Press the Start button to turn on then press the Start N times. The controller is can run a specific parts of a program given said N number of presses.  Hold the Start button for more than 1 second and it will emit 2 beep sounds, LED turns on, and the controller is under management mode (downloading not possible in this mode).  Hold the Start button for more than 5 seconds and it will emit 3 beep sounds. The controller is in firmware recovery mode  The controller automatic turn-off time is 5 seconds by defaultConnect to SmartphoneUse either BT-210A or BT-110A module to communicate between smartphone and CM-200Connect to PCTo connect the CM-200 to the PC LN-101 is requiredWireless CommunicationThe CM-200 is compatible with BT-210 / BT-110 / ZIG-110 wireless communications modules.",
        "url": " http://localhost:4000/docs/en/parts/controller/cm-200/"
      } ,
  
      "docs-kr-parts-controller-cm-200":  {
        "title": "CM-200",
      "content"	 : "개요제품 사양            항목      사양                  무게      25g              컨트롤러      STM32L151C8              크기      54mm x 42mm x 18mm              동작 전압      4.8V ~ 8.4V(권장: 6.0 ~ 7.4V)(건전지 x 4 또는 리튬이온 배터리 x 2)              소비 전류      대기 상태: 80mA실행 상태: 150mA최대 한계: 300mA              동작 온도      -5℃ ~ 70℃              내부 I/O장치      적외선 센서(거리 감지용) x 3마이크(소리 감지용) x 1버저(Buzzer) x 1외부 I/O 장치4핀 통신 포트(무선 조종 및 다운로드용) x 1모터 연결 포트(감속 모터용) x 2다목적 포트(센서 및 출력용) x 8      컨트롤 테이블컨트롤 테이블은 제어기 내부에 존재하는 데이터의 집합체입니다. 사용자는 컨트롤 테이블의 주소를 이용하여 해당 주소에 저장된 데이터를 읽어오거나 새로운 데이터를 입력할 수 있습니다.영역(EEPROM, RAM)컨트롤 테이블은 2개의 영역으로 구분됩니다. RAM 영역에 위치한 데이터는 전원이 인가될 때마다 다시 초기값으로 설정됩니다(Volatile). 반면 EEPROM 영역에 위치한 데이터는 값을 변경하면 전원이 꺼져도 그 값이 보존됩니다(Non-Volatile).접근속성(R, RW)컨트롤 테이블의 데이터에는 2개의 접근 속성이 있습니다. ‘RW’는 읽기와 쓰기 접근이 모두 가능합니다. 반면 ‘R’은 읽기 전용(Read Only) 속성을 갖습니다. 읽기 전용 속성의 데이터는 사용자가 임의로 값을 바꿀 수 없기 때문에 주로 측정 또는 모니터링 용도로 사용되고, 읽기쓰기 속성(‘RW’)은 제어 용도로 사용됩니다.초기값제어기에 전원이 인가될 때 컨트롤 테이블의 각 데이터는 초기값으로 설정됩니다. 사용자가 초기값을 변경하면 새로운 초기값이 적용됩니다. RAM 영역의 초기값은 전원이 인가되었을 때 설정되는 값입니다.크기데이터의 크기는 용도에 따라 1, 2, 4[byte]로 정해져 있습니다. Instruction Packet을 통해 데이터를 변경할 때는 해당 데이터의 크기를 확인하시기 바랍니다.EEPROM 영역            주소      크기[byte]      항목      설명      접근속성      초기값                  0      2      Model Number      모델 번호      R      400              6      1      Firmware Version      펌웨어 버전 정보      R      -              7      1      ID      제어기 ID      RW      200              8      1      Baud Rate      제어기 통신속도      R      1              9      1      Return Delay Time      응답 지연 시간      RW      0              10      1      Status Return Level      응답 레벨      RW      2      RAM 영역            주소      크기[byte]      항목      설명      접근속성      초기값                  21      1      Mode Number      현재 모드 번호      RW      -              25      1      Press Counter      시작버튼 눌림 횟수      R      -              26      1      Button Status      사용자버튼 상태      R      0              30      2      My Zigbee ID      나의 무선모듈 ID      R      -              32      2      Your Zigbee ID      상대 무선모듈 ID      RW      -              36      1      IR Communication Channel      적외선(수신기) 통신 채널 번호      RW      1      Quick Start각 부 명칭시작버튼 짧게 버튼을 눌러 켜면, 시작 버튼 좌측의 빨간색 전원 LED 에 불이 켜지며 제어기에 다운로드 한 프로그램이 실행됩니다.적외선 센서 3개의 적외선 센서가 장착되어 있어 각 방향에서의 센서값을 이용하여 프로그래밍 할 수 있습니다.상단 4핀 포트(HOST LINK) 시작 버튼 옆에 위치해 있으며, USB 다운로더(LN-101), ZIG-110A, BT-110A, BT-210 등을 연결할 수 있습니다.포트 1 ~ 2 각 포트 번호는 I, II 와 같이 막대 숫자로 표시되어 있으며, 감속 모터를 연결하는 2핀으로 된 포트입니다.포트 3 ~ 10 각 포트 번호는 III, IV 와 같이 막대 숫자로 표시되어 있으며, 적외선 센서와 접촉센서, 서보모터, LED 모듈 등을 연결할 수 있는 5핀으로 된 포트입니다.POWER LED (빨간색) 전원이 켜지면 POWER LED가 켜지고 전원이 꺼지면 꺼집니다.TX LED (녹색) 제어기에서 4핀 포트를 통해서 외부로 데이터를 전송하는 동안 켜집니다.RX LED (파란색) 외부에서 4핀 포트를 통해 제어기로 데이터를 전송하는 동안 켜집니다.AUX LED (빨간색) 사용자가 ON/OFF를 제어할 수 있는 LED 입니다.전원 연결CM-200 은 ABB-030(건전지x2 박스) 2개 또는 LBS-040(리튬이온 배터리) 두개를 사용하여 전원을 연결할 수 있습니다. 입력 가능한 전압의 범위는 4.8V ~ 8.4V 이며 권장 사용전압은 6 ~ 7.4V 입니다. 전원 포트의 극성은 위 그림과 같습니다. +부분에 전지의 +극을, -부분에 전지의 -극을 연결하면 됩니다.작동 확인하기  시작 버튼을 짧게 눌러 켜면, 시작 버튼 좌측의 빨간색 전원 LED에 불이 켜지며 제어기에 다운로드 한 프로그램이 실행됩니다.  처음 시작 시 연속으로 버튼을 누른 횟수에 따라 “시작 버튼 눌림 횟수”가 증가합니다. 따라서 이 파라미터를 사용하여 프로그래밍 하면 CM-200 을 작동시킬 때 시작 버튼을 누르는 횟수에 따라 각각 다른 행동을 하도록 할 수 있습니다. 프로그래밍은 이 문서의 고급 사용자 항목의 [프로그래밍](#프로그래밍)을 참조하십시오.  시작 버튼을 1초 이상 눌러 켜면 “삐삐” (2회) 소리가 나고 빨간색 전원LED 에 불이 켜지며 제어기가 켜지고 다운로드 된 프로그램이 실행되지 않는 manage 모드에 진입합니다.  시작 버튼을 5초 이상 눌러 켜면 “삐삐삐” (3회) 소리가 나고 펌웨어 복구 모드로 진입합니다.  제어기가 켜진 상태에서 다시 시작 버튼을 누르면 제어기가 꺼집니다.초급 사용자초급 사용자는 미리 작성되어있는 코드를 CM-200 제어기에 다운로드 받아서 로봇을 움직여 볼 수 있습니다. 파일을 CM-200제어기에 다운로드하기 위해서는 R+ Smart와 R+ m.Task 앱의 설치가 필요합니다.무선통신 연결하기R+ SmartIII 설치하기여기에서는 스마트 기기에 R+ SmartIII를 설치합니다.  구글 play 스토어에서 “로보티즈”를 검색합니다.  R+ SmartIII (ROBOTIS)를 선택합니다.  설치Note 프로그램 매뉴얼 다운로드 : [R+ SmartIII]R+ m.Task 2.0 설치하기여기에서는 스마트 기기에 R+ m.Task 2.0을 설치합니다. 예제 다운로드, 편집, 디버깅, 리모컨 기능을 제공합니다.  구글 play 스토어에서 “로보티즈”를 검색합니다.  R+ m.Task2 (ROBOTIS)를 선택합니다.  설치Note 프로그램 매뉴얼 다운로드 : [R+ m.Task 2.0]모션파일 다운로드로봇을 움직이는데 필요한 모션 파일을 다운로드합니다.  R+ Smart 앱을 실행합니다.  작동하고자 하는 예제의 그림을 길게 터치합니다. (스마트3 앱에서는 예제그림 하단의 편집 버튼을 선택합니다.)  세부 메뉴 창에서 받고자 하는 모션 파일을 선택하면 자동으로 R+ m.Motion 앱이 실행됩니다.  제어기의 전원을 켜고, 화면 왼쪽 아래에 있는 연결 버튼을 터치하면 연결할 수 있는 장치의 목록이 나타납니다.  목록에서 로봇에 연결된 블루투스(BT-210)을 선택하고 연결하기를 터치합니다. (스마트기기와 블루투스가 연결되어 있지 않으면 “장치 선택 창”이 열리므로 블루투스를 선택하여 연결하면 됩니다.)  창이 사라지면 ‘모션 다운로드’ 탭을 선택하고, ‘모션그룹 다운로드’ 버튼을 터치합니다.고급 사용자고급 사용자는 원하는 동작을 코드로 만들어서 CM-200 제어기에 다운로드 받아서 로봇을 움직여 볼 수 있습니다. 작성된 파일을 CM-200제어기에 다운로드하기 위해서는 R+ Smart와 R+ m.Task 앱의 설치가 필요합니다. 앱의 설치는 이 문서의 초급 사용자 항목의 [R+ SmartIII 설치하기](#r-smartiii-설치하기)와 [R+ m.Task 2.0 설치하기](#r-mtask-20-설치하기)를 참조하십시오.프로그래밍새 파일 만들기편집하기다운로드하기관리하기펌웨어 복구참고자료호환성호환되는 소프트웨어로보플러스 1.0, 로보플러스 2.0호환되는 장치LN-101 다운로더, IRSS-10 적외선 센서, TS-10 터치 센서, CS-10 컬러 센서, MGSS-10 자석 센서, PIR-10 동작 센서, TPS-10 온도 센서, TMS-10 온습도 센서, CDS-10 조도 센서, SM-10 서보모터, GM-10A 감속모터, 저속 감속모터, LM-10 LED 모듈, ZIG-110A, BT-110A, BT-210, BT-410, LBS-040 리튬이온 배터리, ABB-030 배터리 박스적용된 교육키트로보티즈 스마트, 로보티즈 스마트 II, 로보티즈 스마트 III",
        "url": " http://localhost:4000/docs/kr/parts/controller/cm-200/"
      } ,
  
      "docs-en-parts-controller-cm-5":  {
        "title": "CM-5",
      "content"	 : "CM-5IntroductionNote CM-5 is discontinued.Specifications            Item      Description                  Weight      125.95g              CPU      ATMega128              Voltage Supply      Range : 7V ~ 12VRecommended : 11.1V (3S1P Li-Po)              Current Consumption      Standby : 50mAMax : 5A(Fuse)              Operation Temperature      -5°C ~ 70°C              External I/O Device      AX/MX Series Dynamixel Connector x 2      Layout  Power Switch : The switch to connect the power.  Power Jack : The socket to connect the power jack of SMPS.  Start Button : The button to select the mode.  Mode Button : The button to change the operation mode of CM-5.  PC Link(Serial Cable) : The port to connect the serial port of CM-5 and PC using serial cable; It is used for task code download or communication with PC.  U / L / D / R Button : The assigned buttons used for entering purpose during the program operation; commands to robots are transmitted by these buttons.  Mode Display LED : LED to display current operation mode of CM-5; Detailed descriptions are provided as below.  Status Display LED : The LED represents the current status of CM-5.  Detailed descriptions are provided as below.  POWER : Turned on if the power is ON; flickers if it is being charged.  TXD : Turned on while CM-5 is transmitting the data to the outside.  RXD : Turned on while CM-5 is receiving the data from the outside.  AUX : Assigned LED to be used by the user in the program.  It can be turned on or off using task code.[MANAGE]  It displays Dynamixel Management Mode is in progress.  It is used to set or test the operations of CM-5, AX/MX Dynamixel using RoboPlus Manager.  It is automatically executed when RoboPlus Manager and CM-5 are connected.[PROGRAM]  It displays the motion edit mode is in progress.  It is used when the motions are editted with RoboPlus Motion.  It is automatically executed when RoboPlus Motion and CM-5 are connected.[PLAY]  It displays the task code mode is in progress.  It is used after downloading the written code to CM-5 with RoboPlus Task.  The Start button must be pressed directly by the user to execute when PLAY LED flickers.Connecting PowerA rechargeable battery is installed in CM-5. If the rechargeable battery is charged, the device is ON when the power switch is set to ON. If you try to connect to external power without using the charger, the power is connected when SMPS is plugged and the power switch is set to ON.  If the power is connected, the Power LED is turned on, and one of the mode LEDs flickers.How to Operate  Turning the Power on : The power is turned on by moving the switch from OFF to ON.※ If the power is not turned on in spite of moving the switch to ON, the internal batteries may have been discharged.Please refer to Charging to recharge, or connect the power using SMPS.  Start : Move to PLAY using Mode Button to operate robots.  Press START Button to execute when the LED on PLAY flickers.※ If START button is pressed, the LED on PLAY is not supposed to be flickering any more; that is the normal status of the execution.  End : If you want to stop the executed operations, press MODE Button to get back to waiting mode status, or turn OFF the power using Power Switch.For CM-5, the firmware must be updated to use Roboplus instead of the Behavior Control Programmer(the old version).Please refer to Firmware Update on how to updated firmware in RoboPlus Manager.  It is used to control Dynamixel and the peripherals, and it can connect Dynamixel(AX/MX Dynamixel… etc.).      Specific motions can be edited and saved through RoboPlus Motion. The saved motion (mtn file) can be always executed by RoboPlus Task, and also the motions of each part can be controlled by writing the task codes for control.        RoboPlus Motion        RoboPlus Task    RoboPlus ManagerConnect to PCPC Link(Serial Cable) of CM-5 and Serial Port of PC must be connected using serial cable to communicaiton with PC. If you want to use Bioloid on the laptop without a serial port, you can communicate with PC using USB2Dynamixel.  (The USB2Dynamixel is sold separately.)Wireless CommunicationZIG-100 Wireless Communication Module can be connected to CM-5.ChargingTo move a robot when it is not connected with SMPS, you have to use a battery. If the battery is discharged, please use by charging it according to following procedures.      Connect SMSPS to CM-5.            Turn on the CM-5 Power and press the U button      Note While the CM-5 is being charged, the power LED blinks. The speed of blinking shows how much it is left before finishing the charging. It will be more faster as it completes the charging. Once the charging is done, it will blink for every 2 seconds.Fuse ReplacementThe fuse prevents the over power that flows in the CM-5 which can damage the circuit.If the CM-5 does not turn on with the battery but turns on when connected to the SMPS, replace your fuse.If the fuse is disconnected, followings will happen.  Can turn on the power of CM-5 with SMPS only.  The LED doesn’t blink even when you press the U button for charging.The fuse used for CM-5 is available at electric shops( Fuse Volume : 220V/5A )",
        "url": " http://localhost:4000/docs/en/parts/controller/cm-5/"
      } ,
  
      "docs-en-parts-controller-cm-510":  {
        "title": "CM-510",
      "content"	 : "CM-510IntroductionNote CM-510 is discontinued.Specifications            Item      Description                  Weight      51.3g              CPU      ATMega2561              Voltage Supply      Range : 6.5V ~ 15VRecommended : 11.1V (3S1P Li-Po)              Current Consumption      Standby : 50mAExternal I/O Max Current : 0.9ATotal Max Current : 10A(Fuse)              Operation Temperature      -5°C ~ 70°C              Internal I/O Device      Button x 5(Reset 1, Port 5)MIC for sound detection x 1Voltage Sensor x 1              External I/O Device      OLLO Compatible 5pin I/O Port x 6AX/MX Series Dynamixel Connector x 5      Layout  PC Link (Serial Cable) : Used to connect the serial cable to the CM-510 and PC via serial port. Used for communication with other PC or downloading task code.  Communication Device Connection Jack : Used for wireless communicate with ZIG-110, IR receiver modules or other boards  Battery Jack : Used to  connect with the battery.  Power Jack : Used to connect the SMPS power supply  Power LED : ON and OFF LED status for the power  Power Switch : Used to turn the robot ON / OFF.  MODE Button : Used to change the operation mode of CM-510.  Please read below for more information.  START Button : Used to START selected mode. Please read below for more information.  U / L / D / R Button : Used for input purposes when a program is playing. These buttons can be used to send commands to the robot.  AX/MX Serise Bus Port : Used to connect the AX/MX Dynamixel in a daisy chain method.  Peripheral Devices Connection Port : Used to connect Distance Measurement Sensor, Touch Sensor, IR Sensor, and peripheral devices. The port numbers for each port are represented in bars such as I , II , III, IIII , IIIII , and IIIIII.  Mode Display LED : LED to display current operation mode of CM-510; Detailed descriptions are provided as below.[MANAGE]  It displays Dynamixel Management Mode is in progress.  It is used to set or test the operations of CM-510, AX/MX Dynamixel using RoboPlus Manager.  It is automatically executed when RoboPlus Manager and CM-510 are connected.[PROGRAM]  It displays the motion edit mode is in progress.  It is used when the motions are editted with RoboPlus Motion.  It is automatically executed when RoboPlus Motion and CM-510 are connected.[PLAY]  It displays the task code mode is in progress.  It is used after downloading the written code to CM-510 with RoboPlus Task.      The Start button must be pressed directly by the user to execute when PLAY LED flickers.    Status Display LED : The LED represents the current status of CM-510. Detailed discriptions are provided as below.          TxD : Turned on while CM-510 is transmitting the data to the outside.      RxD : Turned on while CM-510 is receiving the data from the outside.      AUX : Assigned LED to be used by the user in the program.  It can be turned on or off using task code.      PinoutPowerThe pin composition of CM-510 Power is as below.External 5-Pin PortThe pin composition of CM-510 external port is as below.  OUT : 5V- Torque Possible (Maximum Allowed Current 0.9A)  VDD (5V)  ADC : The analog signals from the sensor made by the user can be read.  GND  NC : Not usedCommunication Device Connection PortThe functions on the pins of communication device connection port are as below.  GND : Ground Level (0v)  VDD :  Supply Voltage ( 2.7~3.6V )  RXD : Receive Signal Terminal  TXD :  Transmit Signal Terminal3-Pin Connector PortThe functions of pins on the 3-pin connector port are as follows. Please refer to AX-Series Pin Assignment for more information.Please be careful not to change the direction considering the angular part.  GND : Ground Level (0v)  VDD :  Supply Voltage (It is equal to the voltage of battery)  DATA :  Data Transmission PinConnecting PowerThe power is applied  if the battery is connected to battery socket of CM-510 or if the power switch is set to ON after connecting SMPS to power jack socket. If the power is impressed, Power LED is turned on and one of the Mode Display LEDs flickers.How to Operate  Turning the power on : The power is turned on by moving the switch from OFF to ON.※ If the power is not turned on in spite of moving the switch to ON, the batteries may have been discharged.Pleaser refer to Charging to recharge, or connect the power using SMPS.  Start : Move to PLAY using Mode Button to operate robots.  Press START Button to execute when the LED on PLAY flickers.※ If START button is pressed, the LED on PLAY is not supposed to be flickering any more; that is the normal status of the execution.      End :  If you want to stop the executed operations, press MODE Button to get back to waiting mode stauts, or turn OFF the power using Power Switch.    It is used to control Dynamixel and the peripherals, and it can connect Dynamixel(AX/MX Dynamixel… etc.) and various parts of OLLO(Touch Sensor, LED Module, IR Sensor etc.).      Specific motions can be edited and saved through RoboPlus Motion.  The saved motion (mtn file) can be always executed by RoboPlus Task, and also the motions of each part can be controlled by writing the task codes for control.    RoboPlus Motion  RoboPlus Task  RoboPlus Manager  Embedded CThe controller of CM-510 can be controlled in C language.  Please refer to Embedded C for more information.Connect to PCPC Link(Serial Cable) of CM-510 and Serial Port of PC must be connected using download cable to communication with PC.  If you want to communicate with PC on the laptop without serial port, you can communicate with PC using USB2Dynamixel.Wireless CommunicationZIG-110 Wireless Communication Module can be connected to CM-510.ChargingYou may obtain Lithium polymer batteries from www.robotis-shop-en.com.If the robot alarm sounds off during operations then recharge the battery.During charging the charger’s red LED turns on. When complete the green LED turns on.  Take the battery out  Connect the charger  ChargeCharging(Red LED), Complete(Green LED)      You can connect the robot to an external power source through SMPS.            The battery is equipped with a connector to charge the battery and another to move the robot      Charging Time and Battery Life/OperatingCharging Time  When fully discharged : 1~1.5 hour  Leaving the battery fully discharged for too long may reduce its lifespan drastically.  Time to charge the battery depends on the status of the battery(If the charging time or battery life becomes too short, you may need to replace your battery).  Caution  Do NOT  keep the battery connected with a robot or a charger.  If you will not use the battery for a long time from now on, please keep it HALF-CHARGED.  Do NOT  put the battery with an environment with high temperature or humidity.Fuse ReplacementThe fuse in the CM-510/CM-530 prevents it from overloading,which can damage the circuit.If the CM-510/CM-530 does not turn on with the battery but turns on when connected to the SMPS, replace your fuse.※ The size of the fuse is shown below. Use a 125V/5A~10A fuse.※ How to replace the fuse      Find the fuse on the back of the CM-510/CM-530.            Use a pincette to replace the fuse with a new one.      Videos",
        "url": " http://localhost:4000/docs/en/parts/controller/cm-510/"
      } ,
  
      "docs-en-parts-controller-cm-530":  {
        "title": "CM-530",
      "content"	 : "CM-530IntroductionSpecifications            Item      Description                  Weight      54g              CPU      STM32F103RE              Voltage Supply      Range : 6V ~ 15VRecommended : 11.1V (3S1P Li-Po)              Current Consumption      Standby : 50mAExternal I/O Max Current : 300mATotal Max Current : 10A(Fuse)              Operation Temperature      -5°C ~ 70°C              Internal I/O Device      Button x 5(Reset 1, Port 5)MIC for sound detection x 1Voltage Sensor x 1              External I/O Device      OLLO Compatible 5pin I/O Port x 6AX/MX Series Dynamixel Connector x 5      Layout  PC Link (Serial Cable) : Used to connect the serial cable to the CM-530 and PC via USB. Used for communication with other PC or downloading task code.  Communication Device Connection Jack : Used for wireless communicate with ZIG-110A, BT-110A, IR receiver modules or other boards  Battery Jack : Used to connect with the battery.  Power Jack : Used to connect the SMPS power supply  Power LED : ON and OFF LED status for the power  Power Switch : Used to turn the robot ON / OFF.  MODE Button : Used to change the operation mode of CM-530. Please read below for more information.  START Button : Used to START selected mode. Please read below for more information.  U / L / D / R Button : Used for input purposes when a program is playing. These buttons can be used to send commands to the robot.  AX/MX Serise Bus Port : Used to connect the AX/MX Dynamixel in a daisy chain method.  Peripheral Devices Connection Port : Used to connect Distance Measurement Sensor, Touch Sensor, IR Sensor, and peripheral devices. The port numbers for each port are represented in bars such as I , II , III, IIII , IIIII , and IIIIII.  Mode Display LED : LED to display current operation mode of CM-530; Detailed descriptions are provided as below.[MANAGE]  It displays Dynamixel Management Mode is in progress.  It is used to set or test the operations of CM-530 and AX-12A using RoboPlus Manager.  It is automatically executed when RoboPlus Manager and CM-530 are connected.[PROGRAM]  It displays the motion edit mode is in progress.  It is used when the motions are editted with RoboPlus Motion.  It is automatically executed when RoboPlus Motion and CM-530 are connected.[PLAY]  It displays the task code mode is in progress.  It is used after downloading the written code to CM-530 with RoboPlus Task.      The Start button must be pressed directly by the user to execute when PLAY LED flickers.    Status Display LED : The LED represents the current status of CM-530. Detailed discriptions are provided as below.          TxD : Turned on while CM-530 is transmitting the data to the outside.      RxD : Turned on while CM-530 is receiving the data from the outside.      AUX : Assigned LED to be used by the user in the program.  It can be turned on or off using task code.      PinoutPowerThe pin composition of CM-530 Power is as below.External 5-Pin PortThe pin composition of CM-530 external port is as below.  OUT : 3.3V- Torque Possible (Maximum Allowed Current 0.3A)  VDD (5V)  ADC : The analog signals from the sensor made by the user can be read.  GND  OUT2 : 3.3V- Torque Possible (Maximum Allowed Current 0.3A)Communication Device Connection PortThe functions on the pins of communication device connection port are as below.  GND : Ground Level (0v)  VDD :  Supply Voltage ( 2.7~3.6V )  RXD : Receive Signal Terminal  TXD :  Transmit Signal Terminal3-Pin Connector PortThe functions of pins on the 3-pin connector port are as follows. Please refer to AX-Series Pin Assignment for more information.Please be careful not to change the direction considering the angular part.  GND : Ground Level (0v)  VDD :  Supply Voltage (It is equal to the voltage of battery)  DATA :  Data Transmission PinConnecting PowerThe power is applied  if the battery is connected to battery socket of CM-530 or if the power switch is set to ON after connecting SMPS to power jack socket. If the power is impressed, Power LED is turned on and one of the Mode Display LEDs flickers.How to Operate  Turning the power on : The power is turned on by moving the switch from OFF to ON.※ If the power is not turned on in spite of moving the switch to ON, the batteries may have been discharged.Pleaser refer to Charging to recharge, or connect the power using SMPS.  Start : Move to PLAY using Mode Button to operate robots.  Press START Button to execute when the LED on PLAY flickers.※ If START button is pressed, the LED on PLAY is not supposed to be flickering any more; that is the normal status of the execution.  End :  If you want to stop the executed operations, press MODE Button to get back to waiting mode stauts, or turn OFF the power using Power Switch.  It is used to control Dynamixel and the peripherals, and it can connect Dynamixel(AX/MX Dynamixel… etc.) and various parts of OLLO(Touch Sensor, LED Module, IR Sensor etc.).      Specific motions can be edited and saved through RoboPlus Motion.  The saved motion (mtn file) can be always executed by RoboPlus Task, and also the motions of each part can be controlled by writing the task codes for control.    RoboPlus Motion  RoboPlus Task  RoboPlus Manager  Embedded CThe controller of CM-530 can be controlled in C language.  Please refer to Embedded C for more information.Connect to PCPC Link(Serial Cable) of CM-530 and Serial Port of PC must be connected using download cable to communication with PC.  If you want to communicate with PC on the laptop without serial port, you can communicate with PC using USB2Dynamixel.Wireless CommunicationZIG-110/BT-110 Wireless Communication Module can be connected to CM-530.ChargingYou may obtain Lithium polymer batteries from www.robotis-shop-en.com.If the robot alarm sounds off during operations then recharge the battery.During charging the charger’s red LED turns on. When complete the green LED turns on.  Take the battery out  Connect the charger  ChargeCharging(Red LED), Complete(Green LED)      You can connect the robot to an external power source through SMPS.            The battery is equipped with a connector to charge the battery and another to move the robot      Charging Time and Battery Life/OperatingCharging Time  When fully discharged : 1~1.5 hour  Leaving the battery fully discharged for too long may reduce its lifespan drastically.  Time to charge the battery depends on the status of the battery(If the charging time or battery life becomes too short, you may need to replace your battery).  Caution  Do NOT  keep the battery connected with a robot or a charger.  If you will not use the battery for a long time from now on, please keep it HALF-CHARGED.  Do NOT  put the battery with an environment with high temperature or humidity.Fuse ReplacementThe fuse in the CM-510/CM-530 prevents it from overloading,which can damage the circuit.If the CM-510/CM-530 does not turn on with the battery but turns on when connected to the SMPS, replace your fuse.※ The size of the fuse is shown below. Use a 125V/5A~10A fuse.※ How to replace the fuse      Find the fuse on the back of the CM-510/CM-530.            Use a pincette to replace the fuse with a new one.      Videos",
        "url": " http://localhost:4000/docs/en/parts/controller/cm-530/"
      } ,
  
      "docs-en-parts-controller-cm-700":  {
        "title": "CM-700",
      "content"	 : "CM-700Introduction  CM-700 is a control module type controller with a CPU, TTL / RS485 communication circuit and ZIG-110 connector. You cannot control dynamixels or other peripheral devices alone with the CM-700. You will need a SUB board.  CM-700 SUB Board is composed of a power department, connector department, switch, and an additional circuit for 5 pin peripheral devices.  You may refer to the connector pin layout to make your own SUB board.Specifications            Item      Description                  Weight      37.3g              CPU      ATMega2561              Voltage Supply      Range : 7V ~ 35V              Current Consumption      Standby : 40mAExternal I/O Max Current : 0.9ATotal Max Current : 10A(Fuse)              Operation Temperature      -5°C ~ 70°C              Internal I/O Device      Button x 2(Reset 1, Start 1)Voltage Sensor x 1              External I/O Device      OLLO Compatible 5pin I/O Port x 6Dynamixel TTL 3Pin Connector x 4Dynamixel RS485 4Pin Connector x 5      Layout  PC Link (Serial Cable) &amp;amp; Communication Device Connection Port : LN-101 is used to connect the CM-700 and PC. It is used to download task code or communicate with PC. Also, it can be used for wireless communication module such as ZIG-110 etc., or communication with other external board.  Battery Socket : Socket for connecting the battery.  Power LED : ON and OFF LED for the power.  Power Switch : Used to turn the robot ON / OFF.  MODE Button : Used to change the operation mode of CM-700.  Please read below for more information.  START Button : Used to START selected mode. Please read below for more information.  3-Pin Cable Connector : Used to connect Dynamixels using 3 pin cable(TTL Communication) in a daisy chain method.  4-Pin Cable Connector : Used to connect Dynamixels using 4 pin cable (RS-485 Communication)  in a daisy chain method.  Peripheral Devices Connection Port : Used to connect peripheral devices such as DMS, Touch Sensor, and IR Sensor etc.  Mode Display LED : LED to display current operation mode of CM-700. Detailed descriptions are provided as below.  MON          It displays Dynamixel Management Mode is in progress.      It is used to set or test the operations of CM-700 and Dynamixel using RoboPlus Manager.      It is automatically executed when RoboPlus Manager and CM-700 are connected.        EDIT          It displays the motion edit mode is in progress.      It is used when the motions are editted with RoboPlus Motion.      It is automatically executed when RoboPlus Motion and CM-700 are connected.        PLAY          It displays the task edit mode is in progress.      It is used after downloading the written code to CM-700 with RoboPlus Task.      The Start button must be pressed directly by the user to execute When PLAY LED flickers.        Status Display LED : The LED represents the current status of CM-700. Detailed discriptions are provided as below.          [TxD] : Turned on while CM-700 is transmitting the data to the outside.      [RxD] : Turned on while CM-700 is receiving the data from the outside.      [AUX] : Assigned LED to be used by the user in the program.  It can be turned on or off using task code.D to be used by the user in the program.  It can be turned on or off using task code.      PinoutPowerThe pin composition of CM-700 power is as below.External 5-Pin PortUsers can create a sensor to control and connect to the 5 pin peripheral device connection port. However, composing the wrong circuits may damage your controller’s circuit, so please learn more about circuit before doing so.Below is the 5 pin layout information for a peripheral device.  OUT : 5V Output Possible (Maximum Allowed Current 0.9A)  VCC (5V)  ADC : The analog signals from the sensor made by the user can be read.  GND  NC : Not UsedCommunication Device Connection PortThe functions of pins on the communication device connection port are as follows.  TXD :  Transmit Signal Terminal  RXD : Receive Signal Terminal  VCC : Supply Voltage (2.7 ~ 3.6V)  GND : Ground Level (0v)3-Pin Connector PortThe functions of pins on the 3-pin connector port are as follows. Please refer to Pin Assignment for more information.Please be careful not to change the direction considering the angular part.  GND : Ground Level (0v)  VDD : Supply Voltage (It is equal to the voltage of battery)  DATA : Data Transmission Pin4-Pin Connector PortThe functions of pins on the 4-pin connector port are as follows. Pleaser refer to Pin Assignment for more information.(It is compatible with 4-pin of DX and EX Series.)Please be careful not to change the direction considering the angular part.  GND : Ground Level (0v)  VDD : Supply Voltage (It is equal to the voltage of battery)  DATA+ : Data Transmission Pin  DATA- : Data Transmission PinSub-Board Connector InformationThe pin layout of the connector which connects CM-700 and SUB board is as below.Connecting PowerThe CM-700 which consists of a micro-controller, is divided into a power department, various connectors, and SUB board. Depending on the connection of each board, the working voltage range may change so please refer to the below information to make your own battery.  CM-700 + User’s Custom SUB BoardBecause the CM-700 does not have a regulator, the power supply from the user’s custom SUB board to the CM-700 must be 5V.          CM-700 Working Voltage : 4.5 ~ 5.5 V        CM-700 + CM-700 SUB BoardWhen connecting and using the CM-700 and ROBOTIS’s SUB board only, below is the allowed power range for the SUB board.          CM-700 + SUB Working Voltage : 7 ~ 35 V        CM-700 + CM-700 SUB Board + DynamixelsOur SUB board has a comprehensive working voltage range to use all released dynamixel line-ups. Thus, the working voltage for the SUB board is restricted depending on the dynamixel you are using.          When using 2 or more different types of dynamixels together, the voltage range must be where all of the dynamixels can work. Thus, the minimum voltage should be the dynamixel’s highest voltage spec and the maximum voltage should be the lowest voltage to suit the working range.      For example, when using the AX-12+ and RX-64 together, AX-12+ is 7 ~ 12 V, and RX-64 is ~ 18 V. Thus the working voltage would be 12V, meaning Li-Po conversion would be 3 cells and Ni-MH would be converted in 10 cells.                  Dynamixel In Use      Min. Voltage      Max. Voltage      Li-Po Conversion      Ni-MH Conversion                  AX-12A      9      12      3 cells      8 ~ 10 cells              DX-117      12      18.5      3 ~ 5 cells      10 ~ 15 cells              RX-10      9      12      3 cells      8 ~ 10 cells              RX-28      12      18.5      3 ~ 5 cells      10 ~ 15 cells              RX-64      12      18.5      3 ~ 5 cells      10 ~ 15 cells              EX-106+      12      18.5      3 ~ 5 cells      10 ~ 15 cells              MX Series      10      14.8      3 ~ 4 cells      9 ~ 12 cells      Connect the battery into the CM-700’s battery socket, and then set the power switch to supply power. Once the power is supplied, the POWER LED will turn on, and one of the MODE LED will start blinking.How to Operate  Turning the power on : The power is turned on by moving the switch from OFF to ON.  Start : Move to PLAY using Mode Button to operate robots. Press START Button to execute when the LED on PLAY flickers.※ If START button is pressed, the LED on PLAY is not supposed to be flickering any more; that is the normal status of the execution.      End : If you want to stop the executed operations, press MODE Button to get back to waiting mode stauts, or turn OFF the power using Power Switch.    It is used to control Dynamixel and the peripherals, and it can connect Dynamixel(AX-12A, AX-18A, AX-S1, DX-Series, RX-Series, EX-Series) and various parts of OLLO(Touch Sensor, LED Module, IR Sensor etc.).      Specific motions can be edited and saved through RoboPlus Motion.  The saved motion (mtn file) can be always executed by RoboPlus Task, and also the motions of each part can be controlled by writing the task codes for control.    RoboPlus Motion  RoboPlus Task  RoboPlus Manager  Embedded CThe controller of CM-700 can be controlled in C language.  Please refer to Embedded C for more information.Connect to PCFor the PC and CM-700 to communicate, LN-101 must be connected to CM-700 Port.Wireless CommunicationZIG-110 wireless communication module can be connected to CM-700.Fuse ReplacementThere is a fuse to prevent from damaging the circuit due to over current.If the CM-700 does not turn on, there is a high chance your fuse is blown. Replace the fuse right away.※ The fuse size of CM-700 is as below, and you may use a product with a capacity between 125V / 5A ~ 10A. (It is the same as CM-510)Videos",
        "url": " http://localhost:4000/docs/en/parts/controller/cm-700/"
      } ,
  
      "docs-en-parts-controller-cm-900":  {
        "title": "CM-900",
      "content"	 : "CM-900Introduction  CM-900 is an embedded board based on STMicroelectronics’ STM32F103C8 Cortex-M3 MCU.  The CM-900 hardware and software are open-source; support in Windows, Mac OSX, and Linux for convenient and easy development of robotsNote CM-900 is discontinued.Specifications            Item      Description                  CPU      STM32F103C8 (ARM Cortex-M3)              Operation  Voltage      5V~24V( USB 5V, DXL 12V, XL-Series 7.4V)              I/O      GPIO 32              Timer      4 ( 16bit )              Analog In(ADC)      10 ( 12bit )              Flash      64 Kbytes              SRAM      20 Kbytes              Clock      72Mhz              USB      1 ( 2.0 FullSpeed )              CAN      1              USART      3              SPI      2              I2C(TWI)      2              Debug      JTAG &amp;amp; SWD              DMA      7ch              3 Pin TTL      2              4 Pin RS485      2              3 Pin XL-Serise      1              SIZE      60mm X 54 mm X 1.6 mm        Dynamixels cannot be driven from the USB power. Supply power for Dynamixel separately (the CM-900’s power can be supplied from different sources).  Check the voltage on the device’s power. Dynamixel and XL series power voltage remain the same as supplied.  Dynamixel and XL-Series cannot be operated with differences in voltage.Layout  Micro USB (type B) : provides the CM-900 with downloading and communication capabilities via PC, in addition to electrical power from USB’s 5V. Use the included USB cable or any other conventional USB cable you may likely have lying around.  Reset switch : resets the CM-900 CPU.  BT-110/ZIG-110 4PIN : Connect a 4-pin BT-110, BT-210, ZIG-110, or LN-101. This allows to communicate with external peripherals with serial UART communications. The LN-101 is more useful than simple firmware download from the PC.  2mm/2.54 mm prototyping area : located on both sides of the CM-900 board with 2.0mm or 2.54mm pitch to facilitate mounting of other devices.  2 mm GPIO Header :  Allows the CM-900’s STM32F103C8 CPU to freely interfacewith external devices.  TTL 3 PIN : connect to Dynamixel via 3-pin cable daisy-chain (TTL communications).  RS485 4 PIN : connect to Dynamixel via 4-pin cable daisy-chain (RS-485 communications).  Power LED : LED on when board is powered on and LED off when board is powered off.  Status LED : CM-900’s program verification test LED. Send high/low signals to pin D16 to turn LED on/off.  Battery socket : socket to connect battery.  DC SMPS : jack for 12V SMPS.  XL-Series 3 PIN : Connect to Dynamixel XL-series via 3-pin TTL communications.  JTAG/SWD 10 PIN : JTAG/SWD terminal for other programming features via IAR, Keil.USB Driver InstallNote There is no need to install drivers for Linux and Mac OS. Windows 8 startup settings : disable driver signature enforcement.      Driver installation ready after the CM-900 is connected to the PC via USB cable        Choose ROBOTISdrivers directory            Choose “install this driver software anyways”            Check for COM port number      Instructions      Connect the CM-900 to the PC via USB cable        Double click on ROBOTIS CM-9.exe to start program        Go to “Tools” &amp;gt; “Serial Port” and select the correct port number(refer to Windows Device Manager)            Select the corresponding hardware version            Pick any example        Choose 1 of the 2buttons          Check Button : compiles the code      Download Button : compiles, and then downloads      The examples are read-only                If Board is not responding appears (from Windows XP’s download) then update the USB Host Controller driver. Problems may occur if the driver version number is lower.        Check USB data via serial monitor      DownloadsThe CM-900 uses the ROBOTIS CM-9 developmental environment to improve user experience. The IDE can be downloaded to match the OS being used; the  link can be found below.  Download ZIP CM-900 Software for Windows XP, Vista, 7, 8  Download ZIP CM-900 Software for OSX (tested with OS X 10.6.8)  Download tar CM-900 Software for Linux 64bit (tested with Ubuntu 12.04)  Download tar CM-900 Software for Linux 32bit (tested with Ubuntu 10.10)",
        "url": " http://localhost:4000/docs/en/parts/controller/cm-900/"
      } ,
  
      "docs-en-faq-cm-510-530-fuse":  {
        "title": "CM-510/530 Fuse Replacement",
      "content"	 : "Replacing the FuseThe fuse in the CM-510/CM-530 prevents it from overloading,which can damage the circuit.If the CM-510/CM-530 does not turn on with the battery but turns on when connected to the SMPS, replace your fuse.※ The size of the fuse is shown below. Use a 125V/5A~10A fuse.※ How to replace the fuse      Find the fuse on the back of the CM-510/CM-530.            Use a pincette to replace the fuse with a new one.      ",
        "url": " http://localhost:4000/docs/en/faq/cm_510_530_fuse/"
      } ,
  
      "docs-en-edu-bioloid-comprehensive":  {
        "title": "BIOLOID Comprehensive",
      "content"	 : "BIOLOID ComprehensiveIntroductionRobots of 18 DOF can be built with Comprehensive Kit including the contents in Beginner Kit, and it provides 26 examples of robots.  Learning the principle of robot building          You can build up 26 example robots with Bioloid Comprehensive Kit and learn the principle of robot building.      From a simple barrier bar of 1 DOF to a spider or a humanoid of 18 DOF, it is possible to build the robot and edit the example programs.  It will help increasing your understanding for robot programming.      You can also create your one and only robot by designing, assembling and programming it by yourself.      Getting StartedPart List  CM-5  AX-12  AX-S1PreparationAs shown in BIOLOID learning material, CM-5 is supposed to support existing BIOLOID software (Behavior Control Program, Motion Editor etc). Therefore, if you want to use RoboPlus software in CM-5, you need to change the firmware into other firmware which supports Roboplus. However, if you change the firmware, you would no longer be able to use the existing Bioloid software.The new-upgraded RoboPlus is an integrated programming software which can control Robotis products.Therefore, CM-5 based robots can be controlled by programming with RoboPlus.The usage is as below.  Download the Latest Version of RoboPlus.  Execute RoboPlus after installation.  Select RoboPlus Manager.  Connect CM-5 with the PC using serial cable.  Execute Firmware Wizard by pressing Control Restoration icon on RoboPlus Manager.  Select the port connected to the controller.  Users must set manually the port connected to the controller. Finish other programs and continue the process since the controller cannot be recognized in case the port is in use.  Select the port connected to the controller and press “Find” button.  Turn the power of the controller off and on.  To find the controller, the controller to be restored must be turned off and on.  Check the controller information.  When the controller is found, the information of current controller and the firmware to download are appeared.  Check the model name whether the controller is connected by the user or not.  (The version of controller information is for Boot Loader, not for firmware.)  Start the firmware installation again.  Press “Next” button to start firmware restoration. Please be careful not to interrupt the connection or turn the power off until it is completed.  Check the controller firmware re-installation result.Executing above procedure, CM-5 can be programmed with RoboPlus. Try to make the best robot with upgraded RoboPlus.OperatingBefore executing the program, the appropriate task codes and motions must be downloaded into the robot.  Turn on the power.  If it is not charged, POWER LED does not blink. Please refer to Charging.  Make the LED on Play blink by pressing MODE button.  Press START button to execute the program.  The LED is not blinking while the program is being executed.Charging CM-5To move a robot when it is not connected with SMPS, you have to use a battery. If the battery is discharged, please use by charging it according to following procedures.      Connect SMSPS to CM-5.            Turn on the CM-5 Power and press the U button      Note While the CM-5 is being charged, the power LED blinks. The speed of blinking shows how much it is left before finishing the charging. It will be more faster as it completes the charging. Once the charging is done, it will blink for every 2 seconds.TutorialScreen OutputObjective for this tutorial is to print 1 and 2 on the output screen as below.Write Task Code      Execute RoboPlus Task Program.    As seen in the picture below, go to Start &amp;gt; All Programs &amp;gt; ROBOTIS &amp;gt; RoboPlus &amp;gt; Software &amp;gt; RoboPlus Task to execute RoboPlus Task.              RoboPlus Task Initial Screen                Select a Controller.    Double click an empty line or press Enter, In the Select Control window, select the controller to use, then press the OK button.            Generating Start Program.    Select Start Program from the Select Instruction Type window, Start Program will be automatically generated in RoboPlus Task.            Input Endless Loop command    To print the numbers on the screen endlessly, use the Endless Loop command(Create a command line). Double click or press Enter on an empty line between { and } of Start Program to invoke the Select Instruction Type window. Select Loop &amp;gt; Endless Loop(while(1)) from the list.            Input Load command    Use Load command to input a Print command, which is needed to print numbers on the screen. Insert Execute &amp;gt; Load (Assignment value) into an empty line between { and } of Endless Loop.            Load 1 into Print    Choose the left parameter ( ? ) among the Load parameters(Explanation on the parameter). The left parameter receives input from the right parameter. Double click the left parameter ( ? ), or press Enter key after clicking it once to invoke the Select Parameter Window. Select Controller &amp;gt; Print then press OK.        Select Constant Numbers &amp;gt; Number &amp;gt; 1 for the right parameter ( ? ) in the same way.        When both parameters of the Load command have been set, it should look like below.            Load 2 into Print with Line    Select } under Print command (at the end of the endless loop section), and add new lines by pressing the Space key. Repeat Steps 5 and 6 to input the Load command and to input  Controller &amp;gt; Print with Line and 2. The final task code is shown below.            Save Task Code    Press Ctrl + S or the Save icon.      Download Task CodeDownload the task code created above.(How to Download Task Code)Execute Task Code      Open the Program Output Monitor    To see the output of the program, you must open the Program Output Monitor BEFORE executing the program. There are three ways to open the Program Output Monitor.                  Click on the View Print of Program in the Download Program window                    Click on the View Print of Program button in TOOLS.      Press F5 or click on View Print of Program (V)  menu under Program (P).            Executing the Program    When you turn on the controller, the LED will blink, showing it is in standby mode. Press the MODE button to move it to PLAY, then press START to execute the downloaded task code. You should see “1” and “2” being printed on the Program Output Monitor.      Button &amp;amp; LEDObjective for this tutorial is to program the U button to turn the AUX LED on and the D button to turn it off. Pressing the START button will end the program.Write Task CodeDownload Task CodeDownload the task code created above.(How to Download Task Code)Execute Task CodeExecute the program and check whether the AUX LED turns on when you press the U button and turns off when you press the D button. Press START button to end.Attacking DuckObjective for this tutorial is to build an attacking duck which attacks approaching objects. Please refer to 2-2-11 Attacking Duck of the assembly manual and complete the hardware.Caution Do not approach your face near the robot when the power is on. You may get injured by the robot.The attacking patterns of the duck are as follows.  If any object is not detected, the robot gets ready to attack by locating ID[1] joint in the middle and folding ID[2] ~ ID[3] joints.  If objects are detected on the left and the right side, the robot turns to the direction where objects are detected by moving ID[1] joint.  If objects are detected at the front, the robot unfolds ID[2] ~ ID[3] joints for attack.  It goes back to the status of “2” above.Write Task Code      Enter the basic value of the motor’s moving speed and Call initial behavior.        If an object is detected from the left side of the robot, turn the beak left.  If an object is detected by the left distance sensor of AX-S1, the location value (present location  value of the ID[1] joint + 20) is entered as the goal position to turn left.  However, to prevent from turning too much, it is written to move only if the present location value is less than 812.  If an object is detected from the right side of the robot, turn the beak right.If an object is detected by the right distance sensor of AX-S1, the location value (present location value of the ID[1] joint -20) is entered as the goal position to turn right.  However, to prevent from turning too much, it is written to move only if the present location value is greater than 212.  Attack if an object is detected at the frontIf an object is detected by the central distance sensor of AX-S1, the robot attacks by calling “Attack with beak.”  Make Initial BehaviorMove the beak in the center by inputting proper goal position value(512) into ID[1] joint, and then call “Attack with Beak” once to make initial behavior.  Make Attack BehaviorMake behaviors such as attack behaviors and raising head (ready behavior) by inputting proper goal position values into ID[2], ID[3] joints, and program “Behavior Wating(7)” function which can stop the behavior control program processing shortly until each behavior is completed.Download Task CodeDownload Complete Task Code (How to Download Task Code)Execute Task CodePlay the downloaded task code.Check if the attacking duck attacks an approaching object or not.Do not approach your face near the robot when the power is on. You may get injured by the robot.Obstacle Detecting CarObjective for this tutorial is to build an intellectual car which runs and avoids obstacles. Please refer to 2-2-9 Obstacle Detection Car of the assembly manual and complete the hardware.The behavior patterns of the obstacle detection car pursuant to obstacle detection in each direction are as follows.            Left      Front      Right      Behavior Pattern                  -      -      -      Forward              O      -      -      Turn Right              -      O      -      Backward              O      O      -      Turn Right              -      -      O      Turn Left              O      -      O      Forward              -      O      O      Turn Left              O      O      O      Stop      The mode of the robot is changed to wheel mode (infinite spinning mode) to use AX-12+ as the wheels of the obstacle detection car.Using RoboPlus Manager, set both the CW location limit value and the CCW location limit value of AX-12+ to 0.Write Task Code      Save the basic value of the motor’s moving speed as the variable        Use the standard value of the object detection and the object detection existence to judge object detection. To do so, set the object detection standard value.        Call appropriate motion functions pursuant to the object detection existence value. (Obstacle Detection Direction)    Make Stop / Forward / Backward / Turn Right / Turn Left Motions. Each motor’s moving speed is set by adding moving speed value which is the set speed value at the beginning and CW:0 and CCW:0 which represent directions.Download Task CodeDownload Complete Task Code (How to Download Task Code)Execute Task CodePlay the downloaded task code. Check if the obstacle detection car runs and avoids the obstacles.Walking Droid 1Objective for this tutorial is to make a walking droid which walks forward in normal situation and avoids obstacles.Since the walking droid uses various postures when it performs such as walking, avoiding obstacles, etc., it is convenient to use by saving the postures as motions.The following table represents the behavior patterns of the walking droid pursuant to surroundings and motion status.            Status      Behavior                  Initially executed      Stay in basic posture              No obstacles      Walking forward              Obstacles Found      Stop and walking backward              After walking backward      Changing direction to the left              Obstacles found even if turned left      Changing direction to the left      Besides duplicated motions, 4 motions must be made as below, and the robot can avoid obstacles while walking.  Stop  Walking forward  Walking backward  Changing direction to the leftMake Motions  Execute RoboPlus Motion and connect to the controller. (See “Connect Robot”)  Enter the name on the page 1 to make “Stop” motion, and then add steps.  The joint values of ID 1, 2, 3, 4 are set to 512. The values are applied to the robot if the rightward arrow is pressed, and the set posture can be checked. (This is the method that users enter the joint values directly.)  Adjust the executing time. It is set to 0.072 second which is the fastest time.  Enter the name on the page 12 to make “Walking Forward” motion, and then add steps.  Turn off torques of all joints by pressing torque-off button. You can see all the joint values are set to “OFF.”  The posture of robot are set by users. The following picture shows the walking posture of the walking droid.  As shown above, if the posture of robot is set and the “Torque-on” button is pressed, the present joint values of the robot are entered automatically to the posture of robot. The currently entered robot’s joints can be read as steps’ posture if the leftward arrow button is pressed(This is the method that users read the joint values from the robot).  Repeating the procedure from number 5, add “Walking Forward” posture to each step. If the posture addition is completed, adjust the stop time and the execution time properly.  If the motion execution button is pressed, the steps of present page are executed sequentially. Check if the robot is operating well.  Using the same method so far, add “Walking Backward” on the page 13 and “Turn Left” on the page 15.  Save the works have been done so far.Download Motion FileDownload Example Motion File (How to Download Motion File)Walking Droid 2Execute MotionsTo use this motion after saving the motions written on RoboPlus Motion in CM-5, the motions of CM-5 must be executed in the task code. Using the two parameters, the motions of robots can be executed.“Load” command must be used to execute the motions. If the “Load” command is selected, two parameter are created. In one parameter on the left, Motion Page in Controller -&amp;gt; Motion is selected, and in the other parameter on the right, the motion page number which includes desired motions is entered.If the task code is written as below and downloaded and executed in CM-5, the saved motions are executed on the page 5.Executing Asynchronous MotionsIt is a motion control method which makes robots do the next work without checking motion status of the robots. It is suitable for beginners because understanding the code is very intuitive. However, it may not be controlled as desired since duplicate execution can happen during the motion execution.Executing Synchronous MotionsIt is a motion control method which make robots do the next work after completing the execution by checking the motion status of the robots. It is suitable for intermediate-level users because the concept of Multi-Task is needed. In the case of infinite repetition motions, the task code must be written well since it may wait continuously when the motion status is checked.Infinite Repetition MotionsIt is effective to make regularly-repeated motions such as walking as an infinite repetition motion.Write Task Code  Call “Ready” when it is executed for the first time.  Call “Forward” if there is no obstacle.  If an object is detected by Central Distance Sensor, Stop and walk backward,and then turn left.  Even though it turns left, if an object is detected by Central Distance Sensor, it turns left until no object is detected.  Write a  function which executes the motion on the page 1 where the “Ready” motion is saved. To wait until the motion is complete after execution, Call the function “WaitMotion.”  Write a function which executes the motion on the page 12 where the “Forward” motion is saved. To wait until the motion is complete after execution, Call the function “WaitMotion.”  Write a function which executes the motion on the page 13 where the “Backward” motion is saved. To wait until the motion is complete after execution, Call the function “WaitMotion.”  Write a function which executes the motion on the page 15 where the “TurnLeft” motion is saved. To wait until the motion is complete after execution, Call the function “WaitMotion.”  Check the parameter value of the motion status, and write a function which waits while the motion is operating.Download Task CodeDownload Complete Task Code (How to Download Task Code)Execute Task CodePlay the downloaded task code.  Leave obstacles on the way of the path, and then check if the walking droid avoids the obstacles and walks.Walking Droid 3After adding turn-right motion to previously built Walking Droid, let us try wireless control(Zigbee Communication) using RC-100.Referring to Building Walking Droid 1 - Making Motion, you can make the right-turn motion additionally on the page 4 of the motion.For Zigbee communication, CM-5 and RC-100 are equipped with ZIG-100 module. (Please refer to the explanation pages on CM-5 and RC-100.)If U / L / D / R buttons of RC-100 are pressed, the Walking Droid performs forward / turn left / backward /turn right motions.Write Task CodeBased on previously written task code in Building Walking Droid 2 - Task Code:  Wait until the new wireless data is coming in, and if the data is coming in, it is saved in the received data variable.  In the received data, only the values regarding U / D / L / R keys in RC-100 are sorted by &amp;amp; Bit Calculation.  Compose the conditional sentences to perform forward / backward / turn left / turn right pursuant to the pressed buttons among all buttons. RC-Call “Ready” at the moment of releasing the pressed button of RC-100.  Write a function which executes the motion on the page 14 where the “TurnRight” motion is saved.  To wait until the motion is complete after execution, call the function “WaitMotion.”Download Task CodeDownload Complete Task Code (How to Download Task Code)Download Example Motion File (How to Download Motion File)Execute Task CodePlay the downloaded task code. Using RC-100, check if the robot moves to the desired directions by performing forward / backward / turn left / turn right motions.Converting .bpg to .tskObjective for this tutorial is to convert .bpg files written in Behavior Control Program into the Task code (.tsk) for RoboPlus Task.Open .bpg File      Open .bpg file using Open  Press Menu ≫ File(F) ≫ Open(O), Shortcut(Ctrl + O), or  Open() to select a file.        Open .bpg file using Drag &amp;amp; Drop  Drag .bpg file to RoboPlus Task.  Convert Commands      Start Program (Click here to see more information on the “Start Program.” )    It is the same as existing “Start”.} (Section End) of Start Program is the same as existing “End”.              RoboPlus Task      Behavior Control Program 1.0                                    End Program ( Click here to see more information on the “End Program” )    It is the same as existing Jump to the Label of “End” Command.              RoboPlus Task      Behavior Control Program 1.0                                    { (Start Block) / } (End Block) ( Click here to see more information on the “Start/End of Block.” )    Lately added concept-  it is not included in existing Behavior Control Program 1.0.        // (Comment or Memo) ( Click here to see more information. )    It is the same as existing “Comment.”  It does not have any influences on motions.              RoboPlus Task      Behavior Control Program 1.0                                    Calculate (Basic Calculation and Bit Calculation) ( Click here to see more information on the “Calculate.” )    It is the same as existing “Compute.”              RoboPlus Task      Behavior Control Program 1.0                                    Load (Input Values) ( Click here to see more information on the “Load.” )    It is the same as existing  “LOAD”.              RoboPlus Task      Behavior Control Program 1.0                                    Label (The Site for Jump) ( Click here to see more information on the “Label.” )    It is the same as existing “Label”. However, it is not possible to be called as in Behavior Control Program 1.0; only Jump is possible.              RoboPlus Task      Behavior Control Program 1.0                                    Jump (goto) ( Click here to see more information on the “Jump.” )    It is the same as existing “JUMP.”              RoboPlus Task      Behavior Control Program 1.0                                    (if) / (else if) / (else) ( Click here to see more information on the “if / else if / else.” )    It is the same as existing “(IF) / (ELSE IF) / (ELSE)”.              RoboPlus Task                                    Behavior Control Program 1.0                          In case that (CONT IF) comes after existing (AND), it is changed to &amp;amp;&amp;amp;.                              In case that (CONT IF) comes after existing (OR),  it is changed to                     .                                RoboPlus Task                                    Behavior Control Program 1.0                              Endless Loop (while(1)) ( Click here to see more information on the “Endless Loop.” )    It is the same as the code repeating the execution of certain blocks unconditionally using Label and JUMP.              RoboPlus Task                                    Behavior Control Program 1.0                          Loop While (while(Condition)) ( Click here to see more information on the “Loop While.” )It is the same as the code repeating the execution of certain blocks using Label and JUMP, depending on conditions.            RoboPlus Task                                    Behavior Control Program 1.0                          Loop For (for) ( Click here to see more information on the “Loop For.” )It is the same as the code repeating the execution of certain blocks only designated times using variables.            RoboPlus Task                                    Behavior Control Program 1.0                              Break Loop (break) ( Click here to see more information on the “Break Loop.” )    It is used equally as the code jumping to the next label of repeated sentences.              RoboPlus Task                                    Behavior Control Program 1.0                              Wait While (Conditional Repeat without Execution Paragraph) ( Click here to see more information on “Wait While.” )    In case the condition is “True”, it is used equally as the code jumping to its own label.              RoboPlus Task                                    Behavior Control Program 1.0                              Callback Function (callback) ( Click here to see more information on “Callback” function. )    Lately added concept : it is not included in existing Behavior Control Program 1.0.        Make/Call Function ( Click here to see more information on “Make/Call Function. )    The function is the same as the sub-routine composed of existing Label and RETURN.In RoboPlus Task, the function must be located outside of the block where is owned by Start Program (the block tied with { AND }).              RoboPlus Task                                    Behavior Control Program 1.0                              Exit Function (return) ( Click here to see more information on “Exit Function.” )    It is the same as the code performing JUMP to the label of existing RETURN.              RoboPlus Task                                    Behavior Control Program 1.0                        VideoDownloadThe following robots have less than 4 joints and the robots can be built with Beginner kit or Comprehensive Kit. Please refer to the assembly manual for Bioloid Beginner Kit and Comprehensive kit about how to assemble.Download Task CodeIf you want to use RoboPlus program for CM-5 (the controller used for Bioloid Beginner/Comprehensive Kits), you must update the firmware. Please refer to Firmware Update of RoboPlus Manager on how to update firmware.Preparation  Call the task code(*.tsk) from RoboPlus Task.          You can open it by double-clicking the task code file.      You can open it using Open File function of RoboPlus Task.      You can open it by dragging &amp;amp; dropping on RoboPlus Task.        Connect the PC and the Controller with USB2Dynamixel.  Turn on the power of the controller.Download      Connect the controller before downloading the task code.  To download the task code, the controller must be connected to the PC(Please refer to controller information for information on how to connect the controller to the PC).        Select the correct COM port (if you know) or else use the “Automatic Search” function  to easily find out the appropriate port. .  If RoboPlus Task is unable to find a controller, the following error message will be shown.  Check if the controller is connected to the PC. (See controller information on how to connect the controller.)  Check if the controller is turned on.  Check if the correct communication port was chosen.  Select the download menu.If the program has an error, you must find the error and correct it. (See “rule check error messages”)  Download the program.If the downloading fails, it will automatically try again from the beginning.  Execute the task code and your robot will move.  Turn on the controller and execute the downloaded task code(Please refer to each controller information to learn how to execute the task code).Download Motion FileFile motions can be converted into robot motions.      Open the file motion to download.        Connect to the robot.        Click on the “Download Motion” menu and wait for the download to complete.    Verify that the contents of the file motion have been copied to the robot motion as seen below.VideoExamplesBeginner LevelThe following robots have joints less than 4. The robots can be built with Beginner kit or Comprehensive Kit. Please refer to the assembly manuals for Bioloid Beginner Kit and Comprehensive kit about how to assemble.            Robot      Description                  1. Crossing Gate      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1]: Joint Mode- When U button on CM-5 is pressed, the gate will be opened.- When D button on CM-5 is pressed, the gate will be closed.              2. Universal Gauge      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[2]: Joint Mode- When U button on CM-5 is pressed, the speed of gauge will be increased.- When D button on CM-5 is pressed, the speed of gauge will be decreased.              3. Sound Lever Meter      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1]: Joint Mode, AX-S1 ID[100]- The gauge will move according to the sound volumes detected.- The sound level can be measured because the gauge makes move more when the sound is getting louder.              4. Crocodile Mouth      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[3]: Joint Mode, AX-S1 ID[100]- The mouth will be opened when the sensor detects an object.- The mouth will be opened, if there is an object in the mouth.- It will play a melody if no object is detected for 10 sec.              5. Pan Tilt      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[3, 4]: Joint Mode- Upper/lower tilt joint will move upwards, when you press the U button on CM-5.- Upper/lower tilt joint will move downwards, when you press the D button on CM-5.- Right/Left pan joint will move rightwards, when you press the R button on CM-5.- Right/Left pan joint will move leftwards, when you press the L button on CM-5.              6. Parking Gate      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1, 2]: Joint Mode, AX-S1 ID[100]- If an object is detected from a sensor, the barrier bar will be open vertically.- If an object is detected from a sensor and the barrier bar is pushed ahead at the same time, the bar will be open horizontally.- The barrier bar will be closed, if no objects are detected.              7. Melody Car      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1, 2, 3, 4]: Wheel Mode, AX-S1 ID[100]- It will move forward some distance with melody, when L button is pressed.- It will move backward some distance with melody, when R button is pressed.- It will turn right with melody, when U button is pressed.- It will turn left with melody, when D button is pressed.              8. Robot Arm      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1, 2, 3]: Wheel Mode- It will rotate its arms rightward, if you press the R button on CM-5.- It will rotate it arms leftward, if you press the L button on CM-5.- It will stretch its elbows, if you press the U button on CM-5.- It will bend over its elbows, if you press the D button on CM-5.- It will stretch its wrists, if you press the start button and U button at the same time.- It will bend over its wrists, if you press the start button and D button at the same time.              9. Obstacle Detecting Car      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1, 2, 3, 4]: Wheel Mode, AX-S1 ID[100]- Operate the detecting car after installing obstacles on the driving path.- Detect obstacles by itself, and avoid them while driving.              10. Greeting Penguin      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1, 2, 3, 4]: Joint Mode, AX-S1 ID[100]- If you put on your hands ahead of its head, it will bow.- If you put on your hands on the right side of its head, it will lift up its right hand.- If you put on your hands on the left side of its head, it will lift up its left hand.              11. Attacking Duck      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1, 2, 3]: Joint Mode, AX-S1 ID[100]- If you try to touch on its head with hands, it will attack  using its beak.- If  you touch on the right side of its head, it turns its head right.- If you touch on the left side of its head, it turns its head left.              12. Cliff Detecting Car      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1, 2, 3, 4]: Wheel Mode, AX-S1 ID[100]- Operate the detecting car after installing cliffs and obstacles on the driving path.- Detects cliffs and obstacles by it self, and avoid them while driving.              13. Clapping Penguin      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel Setting: AX-12+ ID[1, 2, 3, 4]: Joint Mode, AX-S1 ID[100]- It will bow, if you put your hands in front of its head.- It will clap as much times as your clapping sounds are heard.              14. Waking Droid      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload VideoDynamixel Setting: AX-12+ ID[1, 2, 3, 4]: Joint Mode, AX-S1 ID[100]- Operate the walking droid, after installing obstacles on walking path.- Detect obstacles by itself and avoid them while walking by feet.      Intermediate LevelThe following robots have joints less than 8. The robots can be built with 4 additional AX-12+ to Beginner Kit or Comprehensive Kit. Please refer to the assembly manual for Bioloid Comprehensive Kit.            Robot      Description                  1. Probing Robot      Download Assembly Check Task CodeDownload Task CodeDownload VideoDynamixel SettingAX-12+ ID[1, 2, 3, 4]: Wheel ModeAX-12+ ID[5, 6, 7]: Joint ModeAX-S1 ID[100]- Operate the Probing Robot after installing a various size of obstacles on driving path.- Please check if it drives avoiding too big obstacles.- Please checks if it lifts up and puts down small obstacles aside to keep driving.              2. Excavator      Download Assembly Check Task CodeDownload Task CodeDownload Video Dynamixel SettingAX-12+ ID[1, 2, 3, 4]: Wheel ModeAX-12+ ID[5, 6, 7]: Joint ModeAX-S1 ID[100]- Operate the excavator after installing obstacles on the driving path.- Please check if it rotates into the detected direction and excavates with robot arms when obstacles are detected from a sensor.              3. Robot Flower      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload Video Dynamixel SettingAX-12+ ID[1, 2, 3, 4, 5, 6]: Joint ModeAX-S1 ID[100]- In bright place, it will blossom out and move slowly as if it is dancing.- In dark place, it will close up its petals into a bud.              4. Fawn      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload Video Dynamixel SettingAX-12+ ID[1, 2, 3, 4, 5, 6, 7, 8]: Joint ModeAX-S1 ID[100]- The Fawn will sit down and look around, when there are no changes.- If you put on an object ahead of its face, it will keep following the objects.              5. Turtle      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload Video Dynamixel SettingAX-12+ ID[1, 2, 3, 4, 5, 6, 7, 8]: Joint ModeAX-S1 ID[100]- Operate the turtle after installing obstacles on the walking path.- Please check if the turtle avoids the obstacles during its moving.              6. Spider      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload Video Dynamixel SettingAX-12+ ID[1, 2, 3, 4, 5, 6, 7, 8]: Joint ModeAX-S1 ID[100]- It will attack if it detects an object ahead of its head during walking.- It will pretend to being dead, if it detects an object upper of its head during walking.              7. GerWalk      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload Video Dynamixel SettingAX-12+ ID[1, 2, 3, 4, 5, 6, 7]: Joint ModeAX-S1 ID[100]- Place an obstacle in the gerwalk’s path then turn on.- Detects and avoids obstacles while walking.              8. Battle Droid      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload Video Dynamixel SettingAX-12+ ID[1, 2, 3, 4, 5, 6, 7, 8]: Joint ModeAX-S1 ID[100]- Operate the battle droid after installing obstacles on the walking path.- It will attack obstacles with its both arms during its walking.- When the battle droid is fallen down, it will stand up by itself, if you clap out for more than 3 times.      Advanced LevelThe following robots has joints less than 18.  The robots can be built with Bioloid Comprehensive Kit. Using Beginner Kit, if you purchase the frame set and 14 additional AX-12+, you can build the robots as below. Please refer to the assembly manual for Bioloid Comprehensive Kit.            Robot      Description                  1. Dinosaur      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload VideoDynamixel SettingAX-12+ ID[1 ~ 15]: Joint ModeAX-S1 ID[100]- Operate the dinosaur robot after installing obstacles on the walking path.- Please check if the dinosaur robot attacks the obstacles.- It will keep walking if obstacles are taken away.              2. Puppy      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload Video Dynamixel SettingAX-12+ ID[1, 4 ~ 17]: Joint ModeAX-S1 ID[100]- Operate the puppy after installing obstacles on the driving path.- Please check if it moves avoiding the obstacles if a sound is heard.- It will act cute if you touch its lips.- It will fall asleep if there are no changes for some time.              3. King Spider      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload Video Dynamixel SettingAX-12+ ID[1 ~ 18]: Joint ModeAX-S1 ID[100]- It will move avoiding the obstacles on its walking path.- It will attack if an object is detected near ahead.- It will shrink back, if an object approaches from above.- It will fall sleep if there are no changes for some time.              4. Humanoid      Download Assembly Check Task CodeDownload Task CodeDownload Motion FileDownload Video Dynamixel SettingAX-12+ ID[1 ~ 18]: Joint ModeAX-S1 ID[100]- If you clap after pressing the start button on CM-5, it will dance.- If you clap after pressing the U button on CM-5, it will clap as you do, and if an object is detected ahead, it will bow.- If you press the L button on CM-5, it will take an attacking pose, and start to attack when an object is detected.- If you press the D button on CM-5, it will walk avoiding the obstacles by itself.- When the robot is lying down, if you clap for more than 3 times, it will stand up.      ReferencesReplacing Fuse(CM-5)The fuse prevents the over power that flows in the CM-5 which can damage the circuit.If the CM-5 does not turn on with the battery but turns on when connected to the SMPS, replace your fuse.If the fuse is disconnected, followings will happen.  Can turn on the power of CM-5 with SMPS only.  The LED doesn’t blink even when you press the U button for charging.The fuse used for CM-5 is available at electric shops( Fuse Volume : 220V/5A )Dynamixel ManagementDynamixels used as robot actuators possess many functions. This section explains how to change the dynamixel’s settings.Changing the ID  Select the port the controller is connected to.      Click “Connect”.        A list of connected dynamixels is shown on the left. Click on the dynamixel you wish to change the ID of.  Click on the ID row in the Control Table.      Click on the ID List combo box to see a list of possible ID’s. Select the ID, then click Apply.        To use in RoboPlus Motion and RoboPlus Task, the ID must be within the following ranges.          The Dynamixel’s ID must be between 0 and 25.      The ID for AX-S1 should be set between 100 and 109.      Changing the Movement ModeThe dynamixel can operate in 2 different modes.  Wheel Mode : Rotates 360 degrees like a regular motor.  Joint Mode : Moves at a set angle with normal servo motors.The mode can be changed using RoboPlus Manager. Once the mode is set, it will be maintained, even when turned off.  Select the port the controller is connected to.      Click “Connect”.        A list of connected Dynamixels is shown on the left.  Click on the Dynamixel you wish to change the mode of. Then, click on the CW/CCW Angle Limit line in the Control Table.      To set to Wheel Mode, change the CW/CCW Angle Limit value to “0.”  Or, simply click on the “Wheel Mode” button.        To set to Joint Mode again, set the CW/CCW Angle Limit value to any number other than “0”. The initial values for Joint Mode are “0” for CW Angle Limit, and “1023” for CCW Angle Limit.TroubleshootingIf you cannot find the dynamixel you are looking for using RoboPlus Manager, try the following :  Connect just 1 Dynamixel and check if there are any duplicate IDs. If you see a Dynamixel on the left even though only 1 Dynamixel is connected, there is a high probability of a duplicate ID. Change the ID immediately.  If you are unable to find any Dynamixels as in the image below, click on “Dynamixel Search”. If the communication speed is not set to 1Mbps, the “Dynamixel Search” function automatically resets the controller’s communication speed to 1Mbps to enable it to be recognized.If the problem persists, your dynamixel may need repair. Please contact the service department of the company you purchased from.ZIGBee Wireless ControlZIGBeeZIG-100/110 uses ZIGBee for wireless communication. ZIGBee, like Bluetooth, is the communication technology commonly used in Personal Area Network (PAN). The communication quality of ZIGBee is better than that of IR, so it allows many users to control their robots without interferences.Caution Please note that not all products include a zigbee module and may need to be purchased separately.Controller &amp;amp; ZIGBeeOLLO and Bioloid both use the RC-100, which uses IR communication method. To upgrade to the Zigbee communication method, you must purchase the  ZIG-110 set separately. The ZIG-110 set includes one Zig-100 module, which is attached to the RC-100, and one Zig-110 module which is attached to the Controller.Note The modules in a single Zigbee set have been preconfigured to communicate with each other. Therefore, a module from one set may not work with a module from another set. Please be careful not to mix them up.            ZIG-100 installed in RC-100      ZIG-110 installed in CM-100                                          ZIG-110 installed in CM-510      ZIG-100 installed in CM-5                              Control Multiple RobotsThis method is to give out commands at once to several robots being used for dance or demonstrationGives out commands to the robot at once using the zigbee module’s broadcast modeBioloid(Entry/Advanced)      Communication with the Zig2Serial and carious robots            Communication with the RC-100 and carious robots        To use the CM-5, connect the controller and ZIG-100 module together.  Use the RoboPlus Manager to set the wireless ID of ZIG-100 module on the opposite party’s robot to 65535.  No need to set the broadcast channel for communication.  Use the RC-100 to give commands directly or use the Zig2Serial to give commands using the PC.            Device      Channel Default Value      Whether or not the channel can be changed                  CM-5      1      Unchangeable              Zig2Serial      1      Changeable              RC-100      1      Changeable      The channel for the ZIG-100 mounted on the CM-5 is unchangeable. Thus, all users must set their channel to #1 for broadcast communication. All channels for the devises must pair to communicate.Bioloid Premium Kit(CM-700)      Communication with the Zig2Serial and carious robots            Communication with the RC-100 and carious robots        When using the CM-510/CM-700, connect the ZIG-100 module with the controller.  Use the RoboPlus Manager to change the opposite party’s wireless ID to 65535.  The channel on the ZIG-110 connected to the controller it set to #4, so the channels on the Zig2Serial and RC-100 must be set to #4.  How to change the RC-100 channel  How to change the Zig2Serial channel            Device      Channel Default Value      Whether or not the channel can be changed                  CM-510CM530      4      Unchangeable              Zig2Serial      1      Changeable              RC-100      1      Changeable      The channel for the zigbee connected to the controller is not changeable. Thus, all users must set their channel to #4 for broadcast communicationAll channels for the devises must pair to communicate.",
        "url": " http://localhost:4000/docs/en/edu/bioloid/comprehensive/"
      } ,
  
      "docs-kr-faq-contents-guide":  {
        "title": "Contents Guide",
      "content"	 : "컨텐츠 작성방법파일의 최상단에 반드시 아래의 YFM(Yaml Front matter)을 추가하고 내용을 알맞게 업데이트합니다.  ---  layout: archive  lang: en    &amp;gt; 영어(en), 한글(kr), 일어(jp), 중국어(cn)  ref: thormang3_getting_started    &amp;gt; 컨텐츠의 주제(각 언어별로 ref가 같아야 함.)  read_time: true  share: true  author_profile: false  permalink: /docs/en/platform/thormang3/getting_started/   &amp;gt; /파일위치/파일명/  sidebar:    title: THORMANG3    &amp;gt; 제품명    nav: &quot;thormang3&quot;    &amp;gt; 내비게이션 참조명(navigation.yml파일 참조)  ---개요번호개요번호를 만들기 위해서는 아래와 같이 제목 앞에 #을 붙이고 한칸을 띄운다음 제목을 입력한다.  # 1번 제목  ## 1-1번 제목  ### 1-1-1번 제목  ## 1-2번 제목  # 2번 제목  ## 2-1번 제목다단계 목록  번호 없는 목록과          하위 항목을 만들 수 있으며        번호를 만들어서 사용할 수도 있고          번호 목록의 하위에 번호없는 목록을 섞어서 사용할수도 있다.              하위항목을 만들 때에는 반드시 두칸 이상 들여쓰기를 해야한다.      - 번호 없는 목록과  - 하위 목록을 만들 수 있으며1. 번호를 만들어서 사용할 수도 있고  - 번호 목록의 하위에 번호없는 목록을 섞어서 사용할수도 있다.    - 하위항목을 만들 때에는 반드시 두칸 이상 들여쓰기를 해야한다.글상자Note 이와 같은 상자에 글을 입력하려면 아래와 같이 사용한다.notice–primary 다양한 종류의 상자notice–info 색상도 다르고notice--warning 한줄짜리 공지에 유용합니다.notice--danger 여러줄은 다른 방법을 써야합니다.Success 조금 아쉽죠`Note` 이와 같은 상자에 글을 입력하려면 아래와 같이 사용한다.{: .notice}**notice--primary** 다양한 종류의 상자{: .notice--primary}*notice--info* 색상도 다르고{: .notice--info}`notice--warning` 한줄짜리 공지에 유용합니다.{: .notice--warning}**`notice--danger`** 여러줄은 다른 방법을 써야합니다.{: .notice--danger}`Success` 조금 아쉽죠{: .notice--success}Note 여러줄짜리 글상자를 사용하려면 조금 복잡합니다.  글상자로 묶고자 하는 문단의 첫번째에 “{% capture group_notice_01 %}“를 넣고 마지막 숫자 01은 다른 그룹 글상자의 이름과 겹치지 않게 사용한 그룹 글상자의 숫자만큼 증가시켜줍니다.  글상자로 묶고자 하는 문단의 마지막 줄에 “{% endcapture %}“를 추가합니다.  글상자를 넣고자하는 부분에 아래의 코드를 추가하고 글상자의 유형에 따라 notice를 notice–info, notice–warning 등으로 변경한 뒤 group_notice_01의 01을 해당 그룹 글상자의 숫자와 맞춰줍니다.                              &amp;lt;div class=”notice”&amp;gt;{{ group_notice_01          markdownify }}&amp;lt;/div&amp;gt;{% endcapture %}                    &amp;lt;div class=&quot;notice&quot;&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code class=&quot;highlighter-rouge&quot;&amp;gt;Note&amp;lt;/code&amp;gt; 여러줄짜리 예제입니다.&amp;lt;/p&amp;gt;&amp;lt;ol&amp;gt;  &amp;lt;li&amp;gt;첫번째 문장&amp;lt;/li&amp;gt;  &amp;lt;li&amp;gt;두번째 문장&amp;lt;/li&amp;gt;  &amp;lt;li&amp;gt;세번째 문장&amp;lt;/li&amp;gt;  &amp;lt;li&amp;gt;    &amp;lt;div class=&quot;notice&quot;&amp;gt;&amp;lt;/div&amp;gt;  &amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code class=&quot;highlighter-rouge&quot;&amp;gt;Note&amp;lt;/code&amp;gt; 여러줄짜리 글상자를 사용하려면 조금 복잡합니다.&amp;lt;/p&amp;gt;&amp;lt;ol&amp;gt;  &amp;lt;li&amp;gt;글상자로 묶고자 하는 문단의 첫번째에 “{% capture group_notice_01 %}“를 넣고 마지막 숫자 01은 다른 그룹 글상자의 이름과 겹치지 않게 사용한 그룹 글상자의 숫자만큼 증가시켜줍니다.&amp;lt;/li&amp;gt;  &amp;lt;li&amp;gt;글상자로 묶고자 하는 문단의 마지막 줄에 “{% endcapture %}“를 추가합니다.&amp;lt;/li&amp;gt;  &amp;lt;li&amp;gt;글상자를 넣고자하는 부분에 아래의 코드를 추가하고 글상자의 유형에 따라 notice를 notice–info, notice–warning 등으로 변경한 뒤 group_notice_01의 01을 해당 그룹 글상자의 숫자와 맞춰줍니다.&amp;lt;/li&amp;gt;  &amp;lt;li&amp;gt;    &amp;lt;table&amp;gt;      &amp;lt;tbody&amp;gt;        &amp;lt;tr&amp;gt;          &amp;lt;td&amp;gt;&amp;amp;lt;div class=”notice”&amp;amp;gt;{{ group_notice_01&amp;lt;/td&amp;gt;          &amp;lt;td&amp;gt;markdownify }}&amp;amp;lt;/div&amp;amp;gt;{% endcapture %}&amp;lt;/td&amp;gt;        &amp;lt;/tr&amp;gt;      &amp;lt;/tbody&amp;gt;    &amp;lt;/table&amp;gt;  &amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;amp;lt;/div&amp;amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;표아래의 예제를 보시기 바랍니다.각 셀은 ‘|’로 구분되며 줄을 맞추지 않아도 되며 표 내용과 헤더로 구분됩니다.한 컬럼의 좌우정렬은 헤더 아래의 | :——- | 에서 지정할 수 있습니다.콜론(:)이 왼쪽에만 있으면 왼쪽정렬, 오른쪽에만 있으면 오른쪽 정렬, 양쪽에 모두 있으면 가운데 정렬입니다.셀 병합기능이 없기 때문에 사용에 다소 불편함이 있을 수 있습니다.한칸에 여러줄을 입력하려면 &amp;lt;br /&amp;gt;태그를 이용할 수 있습니다.표의 시작과 끝에는 반드시 한줄의 공백이 있어야 합니다.| 항목 1         | 항목 2       || :------------: | :---------- || 이름           | 똘망&amp;lt;br /&amp;gt;Thormang3||소속|로보티즈|            항목 1      항목 2                  이름      똘망Thormang3              소속      로보티즈      그림그림 삽입은 그림을 업로드한 후에 그림의 주소를 지정해서 사용할 수 있습니다. 주소를 저장하는 레퍼런스는 문서의 가장 하단에 작성합니다.![성능그래프][performance graph][performance graph]: http://localhost:4000/assets/images/dxl/x/xh430_w210_performance_graph.jpg동영상동영상 삽입은 유튜브 동영상을 기준으로 아래의 코드를 복사한 후 src의 동영상 주소만 변경해서 작성합니다.&amp;lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/rvm-m2ogrLA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&amp;gt;&amp;lt;/iframe&amp;gt;링크링크 삽입은 아래와 같이 사용할 수 있습니다. 주소를 저장하는 레퍼런스 태그는 문서의 가장 하단에 작성합니다.컨텐츠 작성방법[컨텐츠 작성방법][Contents Format][Contents Format]: http://localhost:4000/docs/kr/faq텍스트 효과텍스트 효과에는 _기울임1_ 또는 *기울임2*, __두껍게1__ 또는 **두껍게2**, ~~선긋기~~ 를 사용할 수 있습니다.텍스트 효과에는 기울임1 또는 기울임2, 두껍게1 또는 두껍게2, 선긋기 를 사용할 수 있습니다.소스코드 입력소스코드를 표시할 때에는 아래와 같이 할 수 있습니다. 1번 방법은 코딩언어를 명시함으로써 코드에 하이라이트를 해주는 기능입니다.코드는 자동적으로 글상자에 둘러쌓입니다.      1번 방법    ```cmakefind_package( thormang3_kinematics_dynamics )target_link_libraries( thormang3_kinematics_dynamics )```    find_package( thormang3_kinematics_dynamics )target_link_libraries( thormang3_kinematics_dynamics )            2번 방법    ```find_package( thormang3_kinematics_dynamics )target_link_libraries( thormang3_kinematics_dynamics )```    find_package( thormang3_kinematics_dynamics )target_link_libraries( thormang3_kinematics_dynamics )      ",
        "url": " http://localhost:4000/docs/kr/faq/contents_guide"
      } ,
  
      "docs-en-parts-controller-controller-compatibility":  {
        "title": "",
      "content"	 : "Controller CompatibilitySupported Baudrates for Dynamixel            Baudrate(bps)      CM-5      CM-510      CM-530      CM-700      CM-900      OpenCM9.04      OpenCR                  9600      O      O      O      O      O      O      O              57600      O      O      O      O      O      O      O              115200      O      O      O      O      O      O      O              1M      O      O      O      O      O      O      O              2M      X      X      X      X      X      X      O              3M      X      X      X      X      X      X      O              4M      X      X      X      X      X      X      O              4.5M      X      X      X      X      X      X      O      CompatibilityDynamixel            Model      CM-100      CM-150      CM-200      CM-5      CM-510      CM-530      CM-700      CM-900      OpenCM9.04(+485 EXP)                  AX-Series      X      X      X      O      O      O      O      O      O(O)              DX-Series      X      X      X      X      X      X      O      O      X(O)              RX-Series      X      X      X      X      X      X      O      O      X(O)              EX-Series      X      X      X      X      X      X      O      O      X(O)              MX-Series(TTL)      X      X      X      O      O      O      O      O      O(O)              MX-Series(RS485)      X      X      X      X      X      X      O      O      X(O)              XM-Series      X      X      X      X      X      X      X      X      X(O)              XH-Series      X      X      X      X      X      X      X      X      X(O)              XL-320      X      X      X      X      X      X      X      O      X(O)      Parts            Model      CM-100      CM-150      CM-200      CM-5      CM-510      CM-530      CM-700      CM-900      OpenCM9.04(+485 EXP)                  Bioloid Serial Cable      X      X      X      O      O      X      X      X      X              Mini USB      X      X      X      X      X      O      X      X      X              Micro USB(B)      X      O      X      X      X      X      X      O      O(O)              LN-101      O      O      O      X      X      X      O      O      O(O)              IRSS-10      O      O      O      X      O      O      O      X      O(O)              TS-10      O      O      O      X      O      O      O      X      O(O)              DMS-80      X      X      X      X      O      O      O      X      O(O)              IR Array      X      X      X      O      O      O      O      O      O(O)              GS-12      X      X      X      X      O      O      O      X      O(O)              CS-10      X      O      O      X      X      O      X      X      O(O)              MGSS-10      X      O      O      X      X      O      X      X      O(O)              PIR-10      X      O      O      X      O      O      X      X      O(O)              TPS-10      X      O      O      X      O      O      X      X      O(O)              AX-S1      X      X      X      O      O      O      O      O      O(O)              SM-10      O      O      O      X      X      O      X      X      X              GM-10A      O      O      O      X      X      X      X      X      X              H-Spd Geared Motor      O      O      X      X      X      X      X      X      X              L-Spd Geared Motor      O      O      X      X      X      X      X      X      X              LM-10      O      O      O      X      X      O      X      X      O(O)              IR Receiver      O      O      X      X      O      O      O      X      X              ZIG-100      X      X      X      O      X      X      X      X      X              ZIG-110A      O      O      O      X      O      O      O      O      O(O)              BT-110A      O      O      O      X      O      O      O      O      O(O)              BT-210      O      O      O      X      O      O      O      O      O(O)              BT-410      O      O      O      X      O      O      O      O      O(O)              LBS-040      X      O      O      X      X      X      X      X      O(O)              11.1V LiPo      X      X      X      X      O      O      O      O      X              9.6V NiMH      X      X      X      O      X      X      X      X      X              OBB-10A      O      X      X      X      X      X      X      X      X              ABB-030      X      X      O      X      X      X      X      X      X              LFU-10      X      X      X      X      O      O      O      X      X              FU-5      X      X      X      O      X      X      X      X      X              User Device      X      X      X      X      O      O      O      O      O(O)      Software            Model      CM-100      CM-150      CM-200      CM-5      CM-510      CM-530      CM-700      CM-900      OpenCM9.04(+485 EXP)                  R+ 1.0      O      O      O      O      O      O      O      X      O(X)              R+ 2.0      O      O      O      O      O      O      O      X      O(X)              OpenCM IDE                                                                     ",
        "url": " http://localhost:4000/docs/en/parts/controller/controller_compatibility/"
      } ,
  
      "docs-en-dxl-crc":  {
        "title": "CRC Calculation",
      "content"	 : "CRC-16 (IBM/ANSI)  Polynomial : x16 + x15 + x2 + 1 (polynomial representation : 0x8005)  Initial Value : 0CRC16 Calculation Codeunsigned short update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size){    unsigned short i, j;    unsigned short crc_table[256] = {        0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011,        0x8033, 0x0036, 0x003C, 0x8039, 0x0028, 0x802D, 0x8027, 0x0022,        0x8063, 0x0066, 0x006C, 0x8069, 0x0078, 0x807D, 0x8077, 0x0072,        0x0050, 0x8055, 0x805F, 0x005A, 0x804B, 0x004E, 0x0044, 0x8041,        0x80C3, 0x00C6, 0x00CC, 0x80C9, 0x00D8, 0x80DD, 0x80D7, 0x00D2,        0x00F0, 0x80F5, 0x80FF, 0x00FA, 0x80EB, 0x00EE, 0x00E4, 0x80E1,        0x00A0, 0x80A5, 0x80AF, 0x00AA, 0x80BB, 0x00BE, 0x00B4, 0x80B1,        0x8093, 0x0096, 0x009C, 0x8099, 0x0088, 0x808D, 0x8087, 0x0082,        0x8183, 0x0186, 0x018C, 0x8189, 0x0198, 0x819D, 0x8197, 0x0192,        0x01B0, 0x81B5, 0x81BF, 0x01BA, 0x81AB, 0x01AE, 0x01A4, 0x81A1,        0x01E0, 0x81E5, 0x81EF, 0x01EA, 0x81FB, 0x01FE, 0x01F4, 0x81F1,        0x81D3, 0x01D6, 0x01DC, 0x81D9, 0x01C8, 0x81CD, 0x81C7, 0x01C2,        0x0140, 0x8145, 0x814F, 0x014A, 0x815B, 0x015E, 0x0154, 0x8151,        0x8173, 0x0176, 0x017C, 0x8179, 0x0168, 0x816D, 0x8167, 0x0162,        0x8123, 0x0126, 0x012C, 0x8129, 0x0138, 0x813D, 0x8137, 0x0132,        0x0110, 0x8115, 0x811F, 0x011A, 0x810B, 0x010E, 0x0104, 0x8101,        0x8303, 0x0306, 0x030C, 0x8309, 0x0318, 0x831D, 0x8317, 0x0312,        0x0330, 0x8335, 0x833F, 0x033A, 0x832B, 0x032E, 0x0324, 0x8321,        0x0360, 0x8365, 0x836F, 0x036A, 0x837B, 0x037E, 0x0374, 0x8371,        0x8353, 0x0356, 0x035C, 0x8359, 0x0348, 0x834D, 0x8347, 0x0342,        0x03C0, 0x83C5, 0x83CF, 0x03CA, 0x83DB, 0x03DE, 0x03D4, 0x83D1,        0x83F3, 0x03F6, 0x03FC, 0x83F9, 0x03E8, 0x83ED, 0x83E7, 0x03E2,        0x83A3, 0x03A6, 0x03AC, 0x83A9, 0x03B8, 0x83BD, 0x83B7, 0x03B2,        0x0390, 0x8395, 0x839F, 0x039A, 0x838B, 0x038E, 0x0384, 0x8381,        0x0280, 0x8285, 0x828F, 0x028A, 0x829B, 0x029E, 0x0294, 0x8291,        0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2,        0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2,        0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1,        0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202    };    for(j = 0; j &amp;lt; data_blk_size; j++)    {        i = ((unsigned short)(crc_accum &amp;gt;&amp;gt; 8) ^ data_blk_ptr[j]) &amp;amp; 0xFF;        crc_accum = (crc_accum &amp;lt;&amp;lt; 8) ^ crc_table[i];    }    return crc_accum;}CRC Calculation Example  unsigned short update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size);  Return Value : 16bit CRC Value  Arguments          crc_accum : set as ‘0’      data_blk_ptr : Packet array pointer      data_blk_size : number of bytes in the Packet excluding the CRC      data_blk_size = Header(3) + Reserved(1) + Packet ID(1) + Packet Length(2) + Packet Length - CRC(2) = 3 + 1 + 1 + 2 + Pakcet Length - 2 = 5 + Packet Length;      Packet Length = (LEN_H « 8 ) + LEN_L;  //Little-endian        Packet Analysis and CRC Calculation          Example Packet(Read Instruction Packet to read the 2 bytes from address 0x0000)unsigned char TxPacket[] = {0xFF, 0xFF, 0xFD, 0x00, 0x01, 0x07, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, CRC_L, CRC_H}      CRC calculationCRC = update_crc(0, TxPacket , 12);   // 12 = 5 + Packet Length(7)CRC_L = (CRC &amp;amp; 0x00FF);               //Little-endianCRC_H = (CRC»8) &amp;amp; 0x00FF;      ",
        "url": " http://localhost:4000/docs/en/dxl/crc/"
      } ,
  
      "docs-en-parts-sensor-cs-10":  {
        "title": "Color Sensor(CS-10)",
      "content"	 : "Color Sensor(CS-10)Introduction  This sensor detects colors.  It can distinguish 6 different colors; red, blue, green, yellow, white, and black.  When objects are too close (less than 6 mm) or too far (more than 18 mm) the color sensor is unable measure values properly.Compatibility Guide Controller CompatibilitySpecifications  Weight : 4g  Dimensions : 24mm x 18mm x 12mm  Sensing Range : 6mm ~ 18mmPinout  SIG1 : Color singnal 1  GND  ADC : Output of color intensity analog voltage  VCC ( 3.3V )  SIG2 : Can turn on the LED by sending High Signals            SIG1      SIG2      Description                  LOW      LOW      RED color intensity              LOW      HIGH      GREEN color intensity              HIGH      LOW      BLUE color intensity              HIGH      HIGH      insignificant value      Caution Cables can may be damaged when not properly connected (i.e. wrong orientation), or use of excessive force during connection.Caution Make connections to the controlled while unpowered. Making connections while the controller is powered may cause it to malfunction or/and damage.Videos",
        "url": " http://localhost:4000/docs/en/parts/sensor/cs-10/"
      } ,
  
      "docs-en-software-rplus2-design":  {
        "title": "R+ Design",
      "content"	 : "Introduction      Editing Tab for Each Stage  The editing process of designing is divided into five stages as below, which are proceeded in order. Each tab menu can be accessed using a shortcut by pressing F1~F5 on your keyboard.        Quick Launch menu  Without moving to the Home tab, a user can open a different design file or save the design file currently being edited.  Home TabThe Home tab provides the menu for previously created samples and files, and also provides functions of settings and program information.  Gallery : Tab where you can select a sample  Create New : Create a new design file to assemble a robot  Open : Open an existing design file  Save : Save the assembled robot as the design file  Save As  Settings, Help, Program Info, Check for Updates, CloseMy Robot TabMy Robot Tab is used to view or modify the information of my robot. Users can edit the name, author, and description of the robot, or view information on the parts used in creating the robot:  My Robot Information : Enter and edit information about the robot  Parts List : The type and quantity of parts used in assembly  Robot Name  Edit Information : The button that opens a window for editing the robot information          Move center of robot to origin point : Moves the assembled robot to the center of the screen      Move viewpoint to origin point : Moves the current viewpoint to the center of the screen      Capture : Save the current image of the robot as the preview image(Capture also sets the default viewpoint of the robot)      Assembly TabThe Assembly tab is where the user assemble the robot in a virtual space  List : A list of the used parts  Top bar : Add part, Undo, Redo, Move robot to origin, Move viewpoint to origin, Snap On/Off, grid On/Off, Help  Bottom UI : Rotation UI, Hole-Based Move UI, Move, rotate UI, Select menu, Information on selected partEdit Assembly Guide TabThe Edit Assembly Guide tab lets users create and edit an assembly guide for a robot assembled in the Assembly Tab. A basic assembly guide is made automatically during the assembly, but using this tab a user can create or edit a more elaborate guide.  Event list : A list that shows the events(move/hide) for each part (however, hide events are not shown in the list)  Top bar : Delete all events, Move viewpoint to origin, grid On/Off, Help  Bottom UI : Select Menu, Event(Part) InformationView Assembled Guide TabThe View Assembly Guide tab allows user to view the entire process of assembling the robot.  Playback screen  Display and change playback speed  Operating buttonsPracticeOpen Sample  Click on the “Gallery” tab button on the Home Tab  Select a sample design file  Click the “Confirm” button  If the robot currently being assembled was not saved, a confirmation window will appear.Open Design File  Click the “Open” button on the Home tab,  Select the design file you want to open in the file selection window.  Click the “Open” button  If the robot currently being assembled was not saved, a confirmation window will appear.Create New Robot  Click the “New” button on the Home tab,  If the robot currently being assembled was not saved, a confirmation window will appear.  You can assemble the robot by moving on to the Assembly tabChange Viewpoint  Mouse  You can change the viewpoint by dragging the right button of the mouse,, and the current viewpoint can be seen by looking at the small figure(gizmo) in the bottom right corner. You can also use the mouse wheel to zoom in and out. If you right-click on a particular part, the viewpoint will change to show the part on the center of the screen:  Pop-up list  Use the pop-up list in the lower right corner to change to standard viewpoints. Selecting a viewpoint from the list will instantly change the display to that viewpoint.  Button  You can change the viewpoint using the arrow buttons at the top, bottom, left, and right. You can click the button on the top right corner to return to the default viewpoint, which can be set in My Robot Tab. By clicking the button at the top you can change the viewpoint to face the origin point.  (Origin point : The point that indicates the center of the virtual space in which the 3D robot is assembled, shown as a red dot on the screen.)  Part Menu  You can select a part and press the “Look At This” button or keyboard shortcut (F) to change the viewpoint so that the part is shown at center of the screen.Adding Part  Parts can be added by pressing the “Add Part” button at the top left corner or keyboard shortcut (P).  When you press the button a Part Selection window will appear, which displays the category type on the top left, the series type on the bottom left, a search bar at the top, and the parts list on the center.  You can easily find the part you wish to add by selecting or clearing the category and series check boxes on the left.      You can use the search bar at the top by typing in the part name. You can enter the full name of the part to search for it, but there are rules to the names that allow you to easily search parts according to their color or shape of plate. For example, if you want to search only yellow parts then typing “(y)” will show all the yellow parts on the screen; if you want to search only three-by-three shape plates then typing “3b3” will show all the corresponding shape plates on the screen.        If you double-click an item on the list or select the item and press the Confirm button, then the selected part will be displayed in the 3D space. At this time the part will be following your mouse, so find an appropriate place for the part and click the left mouse button to place the part in the 3D space. If you have selected the wrong part then press the ESC key to cancel the selection.Select PartThe 3D space  In the 3D space you can left-click on a part to select it. The selected part will be shown with a yellow border.  Selectable types are part, group, hole, port, connecting part, and cable, and with the exception of the port every other type can be selected multiple items at a time.  You can select multiple items by pressing the Shift key while selecting different items or by dragging the 3D space to select all parts within the area.  For the holes, you get to select a surface so if you want to select the opposite surface you press Ctrl + click on a surface to select the opposite side. In this case, the surface of the hole you clicked on will be shown with a white border and the opposite side will be shown with a yellow border.Part List  A part can be selected by clicking from the parts list to the left, but the list only shows the parts and groups so using the parts list will only have these two options to choose from.  Multiple selection of items is possible by using the Shift and Ctrl keys.Deselect Part  Pressing the ESC key or clicking on an empty area of the 3D space will cancel the selection of an item.[Copying Part]  Select a part and press the “Copy” button that appears on the bottom or the keyboard shortcut (Ctrl + C) to copy the part.  When you copy a part a new copied item follows the mouse as when you have added a new part, and likewise pressing the ESC key will cancel the selection.Change Part Color  Select a part and press the “Change” button that appears on the bottom or the keyboard shortcut (C) to change the color of the part.  If you press the button or keyboard shortcut then a part selection window will appear showing a list of items you can change.Delete PartSelect the part you want to delete and press the “Delete” button that appears on the bottom or the keyboard shortcut (DEL) to delete the part.Move PartUsing the Gizmo  You can use the gizmo that appears after you select a part in order to move the part. The gizmo consists of three axes and three surfaces, and you can drag each axis or surface in order to move the part in the direction that it points to.(Gizmo: The gizmo appears when you select a part for the purpose of helping you move or rotate the part. There is also a small gizmo at the bottom right corner of the screen with only the three axes, which represent the current viewpoint.)  Using the gizmo to move a part supports the auto-snap feature. When moving a part around, the auto-snap feature allows the part to automatically attach itself in respect to a hole or an axis to another nearby part. When the auto-snap feature is turned on, the holes to which the part can automatically attach to will be shown in red as in the image above.   Once in a while there are occasions when you are moving a part around but the auto-snap feature will not be working well. In these cases, if the part has a distinguishable front-side and back-side you can flip the part around and move it in the opposite direction, or change the part that you are moving (B → A instead of A → B) in order to try and attach them more easily.Hole-Based Move  The majority of times you will be moving a part in order to place a part’s hole to match another part’s hole, in which case it is convenient to use hole-based move.  Hole-based move is done by selecting both the moving part’s hole and the hole you intend to match it to at the same time using multiple selection (Shift + click) and then pressing the “Hole-Based Move” button that appears on the bottom or the keyboard shortcut (M) in order to match the two holes.      Hole-based move can be done using 2 holes or 4 holes. When using 2 holes, the surface of the first hole selected will move to the surface of the second hole selected. When using 4 holes, choosing the right holes for the third hole and fourth hole is important because the third hole must be the same part as the first hole, and the fourth hole must be the same part as the second hole. So when using hole-based move with 4 holes, the surface of the first hole selected will move to the surface of the second hole selected, and the surface of the third hole selected will move to the surface of the fourth hole selected.            When selecting a hole it distinguishes the top and bottom surfaces, so it is important to choose the right hole when using hole-based move. Pressing on a hole will select the visible surface of the hole, so the part can get flipped when moving the part. If you wish to move the part without it rotating, you can select the opposite surface of the hole. (Selecting the opposite side of hole: Ctrl +Click)      Using the Bottom UI (Direct Input)  When you select a part, the position(POS) and rotation(ROT) coordinates appear on the bottom, and the values can be modified directly in order to move or rotate the part.  The bottom UI displays three axes which are in the same color as the axis that is represents in the gizmo. For example, if you want to move the part in the direction of the blue axis, you can change the value of the Z-axis shown in blue at the bottom UI.Caution When you move a part, only the selected part or the part containing the selected hole will move. Even if the part is connected to other parts using connecting parts(rivets, screws, etc.) it will still move separately, so if you wish to move multiple parts at once you much select them together (use gizmo) or create a group and then move the group.Rotate PartUsing the Gizmo  When you select a part and the gizmo appears, pressing the Alt key will change the shape of the gizmo. Now drag the axis you want to rotate and the part will rotate around that axis.  Once in a while there are occasions when the dragging does not work well depending on the viewpoint or direction, so regardless of the direction of the axis it is easier to drag the gizmo up and down.Using the Rotation UIWhen you select a part, the Rotation UI appears on the bottom and you can press the buttons on the UI or keyboard shortcuts “before(W) / after(S) / left(A) / right(D)” to rotate the part 90 degrees.Using the Bottom UI (Direct Input)  When you select a part, the rotation(ROT) coordinates appear on the bottom, and the values can be modified directly in order to rotate the part.  For example, if you want to rotate the part around the red axis, you can change the value of the X-axis shown in red at the bottom UI.Hole-Based RotationUsing the GizmoWhen you select a hole and press the Alt key a rotation gizmo appears, and dragging this gizmo will rotate the part around the selected hole.Using the Rotation Slider  If you select a hole the rotation slider appears on the bottom.  You can rotate the part by moving the needle on the slider or by clicking the buttons at the bottom or putting in a value for the angle.Connect PartsPhysical Connection (Rivets, Screws)  Select a hole and press the “Attach” button that appears on the bottom or the keyboard shortcut (T) to connect to another part.  If you press the button or keyboard shortcut then a part selection window will appear showing a list of connecting parts you can attach to the hole.  The part selection window has an option called “Insert all the way in” on the left, and if you turn off this option then it will insert the connecting part only as deep as the hole’s depth and not all the way in.  You can select many holes and add connecting parts to them at the same time.Electrical Connection (Cable)      Select a port and press the “Attach” button that appears on the bottom or the keyboard shortcut (T) to connect parts electrically.            If you press the button or keyboard shortcut then a part selection window will appear showing a list of cables you can attach to the port.            Multiple selection of ports is not supported.  GroupCreating a Group  Select multiple parts.  Press the “Group” button at the bottom or the keyboard shortcut (G) to create a group.  Parts that have been set as a group will move and rotate together as one part.Editing a Group      (a) Select a group and press the “Edit Group” button at the bottom or the keyboard shortcut (E) to enter the group editing mode, or (b) double-click the group icon on the left to enter the group edit mode.            After you are finished editing, click the “Complete Editing” button to exit the group edit mode      UngroupSelect a group and press the “Ungroup” button at the bottom or the keyboard shortcut (U) to break up a group.Edit Robot InformationRobot Information      (a) Press the “Preview Capture” button to capture the preview image of a robot. The viewpoint during the capture will be the default viewpoint for the robot. (b) Before saving the preview, you can press the “Move to origin” button or select the robot (left-click) and move it using the gizmo to a position that you want.            If you press the “Click to Edit” button a window will appear where you can edit the robot’s information. Here you can put in the robot’s name, author, etc.      Part ListThe Parts List tab shows all the parts used in the robot. When actually making a robot you can easily view the parts you need. The can select multiple items in the Category list by pressing the Ctrl or Shift keys.Edit Assembly GuideAssembly Guide  The Assembly Guide serves to visually demonstrate the assembling method of the robot assembled by the user. A basic assembly guide is made automatically during the assembly, but it is affected by the viewpoint or condition that was present during the assembly and may not create the Assembly Guide as the user intends it to. Therefore the Edit Assembly Guide tab allows the user to create or edit the guide.      Making the Assembly Guide is done by recording the process of disassembling the robot, so when the guide is actually played, it shows it in reverse order so you see the robot getting assembled.        The Assembly Guide consists of the events of each part(part/group/connection part/ cable), and the two types of events are move events and hide events. Hide events are not shown in the event list on the left, and are usually created automatically when a move event is created.Delete Event  Delete All Events :  To delete all the events press the “Delete all events” button on the top.  Delete Specific Event : Select an event and press the “Delete Event” button on the bottom or the keyboard shortcut (DEL) to delete the selected event.Select Part/Event  When you select a part in 3D space, if the part already has events then the events will be selected together as well, and if it does not have an event then only the part will be selected.  If only the part is selected, then you can add an event via the menu below. This event will be created next in order following whichever event was most recently selected.  You can select an event from the event list on the left.  However if there are two or more events for a part, then selecting a part in the 3D space may not select the event that you intend. In this case you should use the event list on the left.  Selectable Parts : Part / Group / Connecting Part / CableAdd Event  Select a part without an event.      Press the “Add Move Event” or “Add Hide Event” buttons on the bottom.        If you press the “Add Move Event” button a gizmo will appear which you can use to move/rotate the part.  After moving/rotating a part, if you save the event then it will save the first position and last position of the part to create an event that moves in the opposite order as you just moved the part.  Move events and hide events need to exist together, so when you save a move event if there is no hide event then it will create it automatically, and vice versa.Edit Move Event  To edit a move event, select the part for the event or select the event from the event list on the left.  After selecting the event press the “Edit” button on the bottom or keyboard shortcut (E) to edit the event.      While editing you can (a) press the “Load Event” button to load the currently editing event again, or (b) press the “Reset Event” button to return to the initial position (the last position when playing the event).        After you are finished editing press the “Save Event” button or the keyboard shortcut (V) to save the modified event.Add Move Event  If you want to create multiple move events for one part, select an event and press the “Add Event” button on the bottom or the keyboard shortcut key (A).  After adding move events, save the event.Change Event Viewpoint  If you want to simply change the viewpoint slightly, select the event and create a viewpoint that you would like to save.  As in the Assembly Tab, you can (a) drag or click the right mouse button to change the viewpoint, or (b) use the “Align with previous viewpoint” or “Align with next viewpoint” buttons on the bottom to change the viewpoint.  After you finish changing the viewpoint press the “Save View” button on the bottom or the keyboard shortcut (V) to save.Install InstructionInstall on PC      Click on “Downloads” after accessing to ROBOTIS website.            Search for the latest version of RoboPlus.            Click on “Download Link”.            Install the downloaded file.            You will be able to see the R+Design icon once installment is done.      Install on SmartphoneRun “Play Store” or “App Store” and search for “ROBOTIS”.Install “R+m.Design”. You will be able to see the icon on the home screen.",
        "url": " http://localhost:4000/docs/en/software/rplus2/design/"
      } ,
  
      "docs-en-platform-op-development":  {
        "title": "DARwIn-OP",
      "content"	 : "DevelopmentGetting ReadyConnect to OPDirect ConnectionYou may connect to DARWIN-OP directly with conventional USB keyboard, USB mouse and HDMI-compatible display.Via Wired EthernetFrom your computer go to your ethernet port settings and set the following:  DHCP : autoor  DHCP : manual  IP : 192.168.123.100 ( you can choose 192.168.123.2 ~ 192.168.123.255 )  Subnet mask : 255.255.255.0  Default gateway : 192.168.123.1Then connect an ethernet cable from PC to DARWIN-OP.Via Wireless EthernetYou may also connect to DARWIN-OP via wireless LAN.You may need to be familiar with network settings to successfully connect to DARWIN-OP wirelessly.Connecting to DARWIN-OP wirelessly may be differentdepending on the access point/wireless router.Example Procedure (first-time connection)  Connect to DARWIN-OP either directly or via wired LAN  If connected via wired LAN access DARWIN-OP with remote desktop (VNC)  Access DARWIN-OP’s Ubuntu’s desktop  Access network connections (on the upper right part of the desktop) and select the wireless SSID  Make sure you established connection  Afterwards you will need to check for DHCP assigned IP address  Open a terminal window and type ifconfig  Check for inet addr under wlan0 (it is highly recommended that you write this number down).  Use this number to connect to DARWIN-OP wirelessly. You may connect via any method using this number (VNC, PuTTY, SAMBA drive, ZOC, etc).  You can save the wifi settings by properly shutting down DARWIN-OP. Shut-down information can be found here. The shut-down procedure is essential so that wifi connection settings are saved in the PC. The next time connecting to DARWIN-OP wirelessly you may skip steps 1 through 8.Attention  It is possible to establish wireless connection to DARWIN-OP automatically as long as the the wireless IP address remains unchanged. You may need to peridically check for any changes in your access point/wireless router’s DHCP. Please consult your access point/wireless router for further information.  It is highly recommended that wifi signal strength remains above 50% for optimized throughput. A weak signal may adversely affect wifi performance (for example MJPEG streaming).  Make sure that there are no other devices operating that cause harmful interference with the wifi signal (for example microwave ovens).  If you have trouble connecting wirelessly you may need to check wifi settings by connecting to DARWIN-OP directly or via wired LAN, or checking the settings of your access point/wireless router.Terminal Client (SSH)You may use existing terminal client software (i.e. PuTTY, ZOC, etc) to connect to DARWIN-OP.  Example with PuTTY          Execute PuTTY      On IP address input : 192.168.123.1      Select SSH as the connection type      For user name input : darwin      For password input : 111111 (that is six 1’s)      ROBOTIS recommends that users connect via terminal client.Remote Desktop (VNC)You may connect via remote desktop if you prefer graphical interfaces.  Example with Ultra VNC Viewer          Excute Ultra VNC Viewer      On IP address input : 192.168.123.1      For password input : 111111 (that is six 1’s)      Accessing DARWIN-OP via remote desktop may result inslower performance. This is a limitation from Intel’s platform.SambaSamba server is installed in DARWIN-OP. Samba is an implementation of the SMB/CIFS protocol for Unix systems, providing support for cross-platform file and printer sharing with Microsoft Windows, OS X, and other Unix systems.  Example with Microsoft Windows,          Execute File explorer      Type 192.168.123.1 on the address bar      “root directory” is root directory( “/” ) of DARWIN-OP      You can map network drive.Source CodeYou may find the source code directory at “/darwin” from DARWIN-OP’s PC.The pre-installed source code may be updated without prior notice. Please check for updates periodically.You may obtain updated source code at the following:https://sourceforge.net/projects/darwinop/files/You may also update the source code via Subversion with the command “svn up” from the directory /darwin in DARWIN-OP. This method assumes DARWIN-OP has internet access.Terminate Demo Program      If you wish to run other programs, such as the tools, customization, continue running DARwIn-OP without the preinstalled demo program; then you need to terminate the demo program.        The operating chapter mentions the “RESET” button and its function exclusively for the sub controller. However, the camera and executable program (the demo program) are not controlled by the sub controller; therefore, whenever you press the reset button the camera and program will remain unaffected and continue running.  Killing the demo program is necessary to free up PC resources taken by the camera and executable.To initiate a kill process following the procedure below:  Open the terminal window (from DARwIn-OP or terminal client)  Optain root user permission by typing ‘sudo su’ at the command line.  Enter the password ‘111111’ (six ones) (assuming you’re under “darwin” username). Keep in mind that keystrokes are not shown on this step.  Type ‘killall demo’.Once the kill process is complete you may rerun the demo program or any other programs.How to stop the demo program from running automatically every time DARwIn-OP is turned on.The PC inside DARwIn-OP is set to run the demo program by default. However, users wishing to prevent this operation may do so by the following procedure:  Go to the directory /etc  With a text editor open the file rc.local (You shoud be root user.)  The file content looks like the image below.  Modify the file by adding # at the beggining of the /darwin/Linux/project/demo/demoAfterwards the contents should look like the image belowAdding the # sign means that the line has been commented out. After insertion of the # sign save the changes. On the next booting of DARwIn-OP the demo program will no longer run automatically.Execute Demo ProgramIf you encounter an error with one or more actuators (LED blinking) during the demonstration program then you should immediately stop.You may rerun the program without shutting down and restarting DARWIN-OP.To rerun the demo program follow the procedure below:  Press “RESET” on DARWIN-OP.  Connect to DARWIN-OP either directly or via networking (recommended).  Obtain root user privileges (sudo su procedure).The illustration above depicts the re-execution of the demo programNote  the execute command is ./demo &amp;amp; instead of the normal ./demo  the line below reads: [1] 10223What do point 1 and point 2 mean?  Executing ./demo &amp;amp; instead of ./demo means that the demo program is background process; therefore allows you to close the current working terminal window and end any connections with DARWIN-OP while the program runs. The &amp;amp; sign makes it a background process.  [1] means only one process for “demo” is running and 10223 is the process number in Ubuntu.To end the demo program you may perform the killall procedure or just run kill 10223 (in this case).FrameworkCM730 ReferencesPlatformCM730 ClassInterface classes for CM730 port control. Each platform gets its matching classesInterfacesvirtual bool OpenPort( )Opens CM730 port.  Arguments : None  Return : Returns “true” on success. On error, “false” is returned.virtual void ClosePort( )Closes CM730 port.  Arguments : None  Return : Nonevirtual void ClearPort( )Discards data received but not read.  Arguments : None  Return : Nonevirtual int WritePort( unsigned char* packet, int numPacket )Writes up to numPacket bytes from the buffer pointed packet to CM730 port.  Arguments            Name      Type      Description                  packet      unsigned char*      write buffer pointer              numPacket      int      the number of bytes to write        Return : On success, the number of bytes written is returned. On error, -1 is returned.virtual int ReadPort( unsigned char* packet, int numPacket )Attempts to read up to numPacket bytes from CM730 port into the buffer starting at packet.  Arguments            Name      Type      Description                  packet      unsigned char*      read buffer pointer              numPacket      int      the number of bytes to read        Return : On success, the number of bytes read is returned. On error, -1 is returned.virtual void LowPriorityWait( )Waits for low-priority Semaphore.  Arguments : None  Return : Nonevirtual void MidPriorityWait( )Waits for middle-priority Semaphore.  Arguments : None  Return : Nonevirtual void HighPriorityWait( )Waits for high-priority Semaphore.  Arguments : None  Return : Nonevirtual void LowPriorityRelease( )Returns low-priority Semaphore.  Arguments : None  Return : Nonevirtual void MidPriorityRelease( )Returns middle-priority Semaphore.  Arguments : None  Return : Nonevirtual void HighPriorityRelease( )Returns high-priority Semaphore.  Arguments : None  Return : Nonevirtual void SetPacketTimeout( int lenPacket )Sets packet reception timeout.  Arguments            Name      Type      Description                  lenPacket      int      Waits for Packet bytes        Return : Nonevirtual bool IsPacketTimeout( )Gets Packet timeout occurence.  Arguments : None  Return : Return “true” on timeout.virtual double GetPacketTime( )  Arguments : None  Return : Return packet time.virtual void SetUpdateTimeout( int msec )Sets timeout refresh in control table.  Arguments            Name      Type      Description                  msec      int      refresh time        Return : Nonevirtual bool IsUpdateTimeout( )Gets refresh timeout occurence.  Arguments : None  Return : Retrun “true” on timeout updated.virtual double GetUpdateTime( )  Arguments : None  Return : Return updated time.virtual void Sleep( int msec )makes the calling process sleep until msec milliseconds have elapsed.  Arguments            Name      Type      Description                  msec      int      timeout setting value (milliseconds)        Return : NoneCM730 ClassCommunication with CM-730 board.Class platform porting is necessary for proper functionality.Enermerations &amp;amp; DefinesCommunication ResultOutput message of during link between Dynamixel and CM730.            Name      Description                  SUCCESS      Successful communicationa with Dynamixel              TX_CORRUPT      Problems with Instruction Packet              TX_FAIL      Port error, failed to send Instruction Packet              RX_FAIL      Port error, failed to receive Status Packet              RX_TIMEOUT      Timeout Status, failed to receive Packet (please check connections)              RX_CORRUPT      Status Packet error (bad communications link)      Error bit flagStatus Packet Error flag            Name      Value      Bit      Description                  INPUT_VOLTAGE      1 (0x01)      1      Input Voltage range in over the limit.              ANGLE_LIMIT      2 (0x02)      2      Set Angle limit problem(s).              OVERHEATING      4 (0x04)      3      Internal overheating.              RANGE      8 (0x08)      4      Set value(s) out of range.              CHECKSUM      16 (0x10)      5      Instruction Packet Checksum error.              OVERLOAD      32 (0x20)      6      Excessive load detected.              INSTRUCTION      64 (0x40)      7      Invalis Instruction Packet Instruction.      Special IDSpecial ID’s            Name      Value      Description                  ID_CM      200      ID for Sub Controller              ID_BROADCAST      254      Communication with all connected device      AddressControl Table Address            Name      Address      Description                  P_MODEL_NUMBER_L      0 (0x0)      Lowest byte of model number              P_MODEL_NUMBER_H      1 (0x1)      Highest byte of model number              P_VERSION      2 (0x2)      Information on the version of firmware              P_ID      3 (0x3)      ID of CM730              P_BAUD_RATE      4 (0x4)      Baud Rate of CM730              P_RETURN_DELAY_TIME      5 (0x5)      Retrun Delay Time              P_RETURN_LEVEL      16 (0x10)      Status Return Level              P_DXL_POWER      24 (0x18)      Dynamixel Power              P_LED_PANNEL      25 (0x19)      LED of back pannel              P_LED_HEAD_L      26 (0x1A)      Low byte of Head LED              P_LED_HEAD_H      27 (0x1B)      High byte of Head LED              P_LED_EYE_L      28 (0x1C)      Low byte of Eye LED              P_LED_EYE_H      29 (0x1D)      High byte of Eye LED              P_BUTTON      30 (0x1E)      Button              P_GYRO_Z_L      38 (0x26)      Low byte of Gyro Z-axis              P_GYRO_Z_H      39 (0x27)      High byte of Gyro Z-axis              P_GYRO_Y_L      40 (0x28)      Low byte of Gyro Y-axis              P_GYRO_Y_H      41 (0x29)      High byte of Gyro Y-axis              P_GYRO_X_L      42 (0x2A)      Low byte of Gyro X-axis              P_GYRO_X_H      43 (0x2B)      High byte of Gyro X-axis              P_ACCEL_X_L      44 (0x2C)      Low byte of Accelerometer X-axis              P_ACCEL_X_H      45 (0x2D)      High byte of Accelerometer X-axis              P_ACCEL_Y_L      46 (0x2E)      Low byte of Accelerometer Y-axis              P_ACCEL_Y_H      47 (0x2F)      High byte of Accelerometer Y-axis              P_ACCEL_Z_L      48 (0x30)      Low byte of Accelerometer Z-axis              P_ACCEL_Z_H      49 (0x31)      High byte of Accelerometer Z-axis              P_VOLTAGE      50 (0x32)      Present Voltage              P_LEFT_MIC_L      51 (0x33)      Low byte of Left Mic. ADC value              P_LEFT_MIC_H      52 (0x34)      High byte of Left Mic. ADC value              P_ADC2_L      53 (0x35)      Low byte of ADC 2              P_ADC2_H      54 (0x36)      High byte of ADC 2              P_ADC3_L      55 (0x37)      Low byte of ADC 3              P_ADC3_H      56 (0x38)      High byte of ADC 3              P_ADC4_L      57 (0x39)      Low byte of ADC 4              P_ADC4_H      58 (0x3A)      High byte of ADC 4              P_ADC5_L      59 (0x3B)      Low byte of ADC 5              P_ADC5_H      60 (0x3C)      High byte of ADC 5              P_ADC6_L      61 (0x3D)      Low byte of ADC 6              P_ADC6_H      62 (0x3E)      High byte of ADC 6              P_ADC7_L      63 (0x3F)      Low byte of ADC 7              P_ADC7_H      64 (0x40)      High byte of ADC 7              P_ADC8_L      65 (0x41)      Low byte of ADC 8              P_ADC8_H      66 (0x42)      High byte of ADC 8              P_RIGHT_MIC_L      67 (0x43)      Low byte of Right Mic. ADC value              P_RIGHT_MIC_H      68 (0x44)      High byte of Right Mic. ADC value              P_ADC10_L      69 (0x45)      Low byte of ADC 10              P_ADC10_H      70 (0x46)      High byte of ADC 10              P_ADC11_L      71 (0x47)      Low byte of ADC 11              P_ADC11_H      72 (0x48)      High byte of ADC 11              P_ADC12_L      73 (0x49)      Low byte of ADC 12              P_ADC12_H      74 (0x50)      High byte of ADC 12              P_ADC13_L      75 (0x51)      Low byte of ADC 13              P_ADC13_H      76 (0x52)      High byte of ADC 13              P_ADC14_L      77 (0x53)      Low byte of ADC 14              P_ADC14_H      78 (0x54)      High byte of ADC 14              P_ADC15_L      79 (0x55)      Low byte of ADC 15              P_ADC15_H      80 (0x56)      High byte of ADC 15      ConstructionsCM730(PlatformCM730 *platform )  Arguments            Name      Type      Description                  platform      PlatformCM730      -      Methodsbool Connect( )Links CM-730.  Arguments : None  Return : true (sucess), false (failure)void Disconnect( )Releases CM-730.  Arguments : None  Return : Noneint Ping( int id, int *error )Check the existance of Dynamixel with selected id.  Arguments            Name      Type      Description                  id      int      Dynamixel ID for checking              error      int*      Status packet error        Return : Communication Resultint ReadByte( int address, int *pValue, int *error )Reads unit byte from CM-730 Control Table value  Arguments            Name      Type      Description                  address      int      Control Table address              pValue      int*      saves read values              error      int*      Status packet error        Return : Communication Resultint ReadByte( int id, int address, int *pValue, int *error )Reads unit byte from CM-730 Control Table value  Arguments            Name      Type      Description                  id      int      Dynamixel ID              address      int      Control Table address              pValue      int*      saves read values              error      int*      Status packet error        Return : Communication Resultint ReadWord( int address, int *pValue, int *error )Reads 2 bytes from CM-730 Control Table value  Arguments            Name      Type      Description                  address      int      Control Table address              pValue      int*      saves read values              error      int*      Status packet error        Return : Communication Resultint ReadWord( int id, int address, int *pValue, int *error )Reads 2 bytes from CM-730 Control Table value  Arguments            Name      Type      Description                  id      int      Dynamixel ID              address      int      Control Table address              pValue      int*      saves read values              error      int*      Status packet error        Return : Communication Resultint ReadTable( int start_addr, int end_addr, unsigned char *table, int *error )Reads 2 bytes from CM-730 Control Table value  Arguments            Name      Type      Description                  start_addr      int      Control table start address              end_addr      int      Control table end address              table      unsigned char*      Read data buffer              error      int*      Status packet error        Return : Communication Resultint ReadTable( int id, int start_addr, int end_addr, unsigned char *table, int *error )Reads CM-730 Control Table value from start_addr to end_addr  Arguments            Name      Type      Description                  id      int      Dynamixel ID              start_addr      int      Control table start address              end_addr      int      Control table end address              table      unsigned char*      Read data buffer              error      int*      Status packet error        Return : Communication Resultint WriteByte( int address, int value, int *error )Writes unit byte to CM-730 Control Table  Arguments            Name      Type      Description                  address      int      Control Table address              value      int      write value              error      int*      Status packet error        Return : Communication Resultint WriteByte( int id, int address, int *pValue, int *error )Writes unit byte to CM-730 Control Table  Arguments            Name      Type      Description                  id      int      Dynamixel ID              address      int      Control Table address              value      int      write value              error      int*      Status packet error        Return : Communication Resultint WriteWord( int address, int value, int *error )Writes 2 bytes to CM-730 Control Table  Arguments            Name      Type      Description                  address      int      Control Table address              value      int      write value              error      int*      Status packet error        Return : Communication Resultint WriteWord( int id, int address, int value, int *error )Writes 2 bytes to CM-730 Control Table  Arguments            Name      Type      Description                  id      int      Dynamixel ID              address      int      Control Table address              value      int      write value              error      int*      Status packet error        Return : Communication Resultint SyncWrite( int start_addr, int each_length, int number, int *pParam )  Arguments            Name      Type      Description                  start_addr      int      -              each_length      int      -              number      int      -              pParam      int*      -        Return : Communication Resultint MakeWord( int lowbyte, int highbyte )  Arguments            Name      Type      Description                  lowbyte      int      -              highbyte      int      -        Return : 2 bytes integer valueint GetLowByte( int word )  Arguments            Name      Type      Description                  word      int      -        Return : low byteint GetHighByte( int word )  Arguments            Name      Type      Description                  word      int      -        Return : high byteint MakeColor( int red, int green, int blue )  Arguments            Name      Type      Description                  red      int      -              green      int      -              blue      int      -        Return : color valueMath ReferencesMatrix3D ClassEnumerations &amp;amp; Definesm00, m01 … m32, m33Matrix3D hold data maps into a 4x4 matrix array. This array allows usage of enum to access each element.m[m00], m[m01], m[m02], m[m03],m[m10], m[m11], m[m12], m[m13],m[m20], m[m21], m[m22], m[m23],m[m30], m[m31], m[m32], m[m33]The matrix is represented as follows.m[0], m[1], m[2], m[3],m[4], m[5], m[6], m[7],m[8], m[9], m[10], m[11],m[12], m[13], m[14], m[15]MAXNUM_ELEMENTThe maximum number of an arrayConstructionsMatrix3D( )  Arguments : NoneMatrix3D( const Matrix3D &amp;amp;mat )  Arguments            Name      Type      Description                  mat      const Matrix3D&amp;amp;      copy Matrix3D      Data Memberspublic double m[MAXNUM_ELEMENT]matrix element arrays are defined by MAXNUM_ELEMENT.Methodsvoid Identity( )Matrix initialization.  Arguments : None  Return : Nonebool Inverse( )Computes inverses.  Arguments : None  Return : true (success), false (failure)void Scale( Vector3D &amp;amp;scale )Convertion and scaling  Arguments            Name      Type      Description                  scale      Vector3D&amp;amp;      x, y, z coordinates scaling factor        Return : Nonevoid Rotate( double angle, Vector3D &amp;amp;axis )Rotation conversion.  Arguments            Name      Type      Description                  angle      double      rotating angle (in degree units)              axis      Vector3D&amp;amp;      rotating axis        Return : Nonevoid Translate( Vector3D &amp;amp;offset )Motion conversion.  Arguments            Name      Type      Description                  angle      double      rotating angle (in degree units)              axis      Vector3D&amp;amp;      rotating axis        Return : NonePoint3D Transform( Point3D &amp;amp;point )Point conversion.  Arguments            Name      Type      Description                  point      Point3D&amp;amp;      point conversion        Return : Conversion resultsvoid SetTransform( Point3D &amp;amp;point, Vector3D &amp;amp;angle )Clears conversion information of position and angle information (defaults to existing conversion).  Arguments            Name      Type      Description                  point      Point3D&amp;amp;      Origin coordinates (x, y, z)              angle      Vector3D&amp;amp;      Rotating axis (x, y, z)        Return : NoneOperatorsMatrix3D&amp;amp; operator = (const Matrix3D &amp;amp;mat)  Copies the value of the current matrixMatrix3D&amp;amp; operator *= (const Matrix3D &amp;amp;mat)  Copies the value of the current matrixMatrix3D&amp;amp; operator * (const Matrix3D &amp;amp;mat)  Returns current matrix operation resultsIncludes  #include “Point.h”  #include “Vector.h”Plane3D ClassPlane3D point class for 3D operationsConstructionsPlane3D( )  Arguments : NonePoint2D ClassPoint2D point class for 2D operationsConstructionsPoint2D( )  Arguments : NonePoint2D( double x, double y )  Arguments            Name      Type      Description                  x      double      x-coordinate              y      double      y-coordinate      Point2D( const Point2D &amp;amp;point )  Arguments            Name      Type      Description                  point      const Point2D&amp;amp;      copies Point      Data Memberspublic double X  X-coordinate valuepublic double Y  Y-coordinate valueMethodsstatic public double Distance( Point2D &amp;amp;pt1, Point2D &amp;amp;pt2 )Returns the distance between 2 points  Arguments            Name      Type      Description                  pt1      Point2D&amp;amp;      Point1 distance              pt2      Point2D&amp;amp;      Point2 distance        Return : Distance between 2 pointsOperatorspublic Point2D&amp;amp; operator = ( const Point2D &amp;amp;point )public Point2D&amp;amp; operator += ( const Point2D &amp;amp;point )public Point2D&amp;amp; operator -= ( const Point2D &amp;amp;point )public Point2D&amp;amp; operator += ( const double value )public Point2D&amp;amp; operator -= ( const double value )public Point2D&amp;amp; operator *= ( const double value )public Point2D&amp;amp; operator /= ( const double value )public Point2D operator + ( const Point3D &amp;amp;point )public Point2D operator - ( const Point2D &amp;amp;point )public Point2D operator + ( const double value )public Point2D operator - ( const double value )public Point2D operator * ( const double value )public Point2D operator / ( const double value )Point3D ClassPoint3D point class for 3D operationsConstructionsPoint3D( )  Arguments : NonePoint3D( double x, double y, double z )  Arguments            Name      Type      Description                  x      double      x-coordinate              y      double      y-coordinate              z      double      z-coordinate      Point3D( const Point3D &amp;amp;point )  Arguments            Name      Type      Description                  point      const Point3D&amp;amp;      copies Point      Data Memberspublic double X  X-coordinate valuepublic double Y  Y-coordinate valuepublic double Z  Z-coordinate valueMethodsstatic public double Distance( Point3D &amp;amp;pt1, Point3D &amp;amp;pt2 )Returns the distance between 2 points.  Arguments            Name      Type      Description                  pt1      Point3D&amp;amp;      Point1 distance              pt2      Point3D&amp;amp;      Point2 distance        Return : distance between 2 pointsOperatorspublic Point3D&amp;amp; operator = ( const Point3D &amp;amp;point )public Point3D&amp;amp; operator += ( const Point3D &amp;amp;point )public Point3D&amp;amp; operator -= ( const Point3D &amp;amp;point )public Point3D&amp;amp; operator += ( const double value )public Point3D&amp;amp; operator -= ( const double value )public Point3D&amp;amp; operator *= ( const double value )public Point3D&amp;amp; operator /= ( const double value )public Point3D operator + ( const Point3D &amp;amp;point )public Point3D operator - ( const Point3D &amp;amp;point )public Point3D operator + ( const double value )public Point3D operator - ( const double value )public Point3D operator * ( const double value )public Point3D operator / ( const double value )Vector3D ClassVector class point for 3D operationsConstructionsVector3D( )  Arguments : NoneVector3D( double x, double y, double z )  Arguments            Name      Type      Description                  x      double      x-coordinate              y      double      y-coordinate              z      double      z-coordinate      Vector3D( const Point3D &amp;amp;pt1, const Point3D &amp;amp;pt2 )  Arguments            Name      Type      Description                  pt1      const Point3D&amp;amp;      Vector initial position              pt2      const Point3D&amp;amp;      Vector final position      Vector3D( const Vector3D &amp;amp;vector )  Arguments            Name      Type      Description                  vector      const Vector3D&amp;amp;      copies Vector      Data Memberspublic double X  X-coordinate valuepublic double Y  Y-coordinate valuepublic double Z  Z-coordinate valueMethodspublic double Length( )Calculates vector length  Arguments : None  Return : Vector lengthpublic void Normalize( )Normalizes the vector  Arguments : None  Return : Nonepublic double Dot( Vector3D &amp;amp;vector )Performs vector dot products  Arguments            Name      Type      Description                  vector      Vector3D&amp;amp;      Vector dot product        Return : Returns dot productspublic Vector3D Cross( const Vector3D &amp;amp;vector )Performs vector cross products  Arguments            Name      Type      Description                  vector      const Vector3D&amp;amp;      vector cross product        Return : Returns cross productspublic double AngleBetween( Vector3D &amp;amp;vector )Computes the angle between vectors  Arguments            Name      Type      Description                  vector      Vector3D&amp;amp;      Angles between vectors        Return : Value (0 ~ 180) in degrees.public double AngleBetween( Vector3D &amp;amp;vector, Vector3D &amp;amp;axis )Returns the angle between vectors axes  Arguments            Name      Type      Description                  vector      Vector3D&amp;amp;      Angle between Vector              axis      Vector3D&amp;amp;      Angle between coordinates axes        Return : Value (-180 ~ 180) in degreesOperatorspublic Vector3D&amp;amp; operator = ( const Vector3D &amp;amp;vector )  Copies the current vector valuepublic Vector3D&amp;amp; operator += ( const Vector3D &amp;amp;vector )  Sum of the results of 2 operations of current vectorpublic Vector3D&amp;amp; operator -= ( const Vector3D &amp;amp;vector )  Subtraction of the results of 2 operations of current vectorpublic Vector3D&amp;amp; operator += ( const double value )public Vector3D&amp;amp; operator -= ( const double value )public Vector3D&amp;amp; operator *= ( const double value )public Vector3D&amp;amp; operator /= ( const double value )public Vector3D operator + ( const Vector3D &amp;amp;vector )  Vector sum operationpublic Vector3D operator - ( const Vector3D &amp;amp;vector )  Vector subtraction operationpublic Vector3D operator + ( const double value )public Vector3D operator - ( const double value )public Vector3D operator * ( const double value )public Vector3D operator / ( const double value )Includes  #include “Point.h”minINI ReferenceMININI is a minimal INI file parserminIni is a programmer’s library to read and write “INI” files in embedded systems.The minIni library is distributed unter the Apache License, version 2.0, plus an aceptance clause to explicitly permit static linking of the library for commercial applications.Get more informations : http://www.compuphase.com/minini.htmMotion ReferencesJointData ClassMotion Class shares data between classesEnermerations &amp;amp; DefinesJoint ID  Joint ID is the same as Dynamixel IDCompliance Slopeenum value can be used with Compliance Slope            Name      Value                  SLOPE_HARD      16              SLOPE_DEFAULT      32              SLOPE_SOFT      64              SLOPE_EXTRASOFT      128      ConstructionsJointData( )  Arguments : NoneMethodsvoid SetEnable( int id, bool enable )Sets ID’s in Joint Enable.  Arguments            Name      Type      Description                  id      int      Joint ID              enable      bool      use availability        Return : Nonevoid SetEnableHeadOnly( bool enable )Sets ID’s (the sample line below only enables the ID’s for the head and neck).Head ID = { ID_HEAD_PAN, ID_HEAD_TILT }  Arguments            Name      Type      Description                  enable      bool      use availability        Return : Nonevoid SetEnableRightArmOnly( bool enable )Sets the ID (the sample line below only enables the ID’s for the right arm).Right Arm ID = { ID_R_SHOULDER_PITCH, ID_R_SHOULDER_ROLL, ID_R_ELBOW }  Arguments            Name      Type      Description                  enable      bool      use availability        Return : Nonevoid SetEnableLeftArmOnly( bool enable )Sets the ID (the sample line below only enables the ID’s for the left arm).Left Arm ID = { ID_L_SHOULDER_PITCH, ID_L_SHOULDER_ROLL, ID_L_ELBOW }  Arguments            Name      Type      Description                  enable      bool      use availability        Return : Nonevoid SetEnableRightLegOnly( bool enable )Sets the ID (the sample line below only enables the ID’s for the right leg).Right Leg ID = { ID_R_HIP_YAW, ID_R_HIP_ROLL, ID_R_HIP_PITCH, ID_R_KNEE, ID_R_ANKLE_PITCH, ID_R_ANKLE_ROLL }  Arguments            Name      Type      Description                  enable      bool      use availability        Return : Nonevoid SetEnableLeftLegOnly( bool enable )Sets the ID (the sample line below only enables the ID’s for the left leg).Left Leg ID = { ID_L_HIP_YAW, ID_L_HIP_ROLL, ID_L_HIP_PITCH, ID_L_KNEE, ID_L_ANKLE_PITCH, ID_L_ANKLE_ROLL }  Arguments            Name      Type      Description                  enable      bool      use availability        Return : Nonevoid SetEnableUpperBodyWithoutHead( bool enable )Sets the ID (the sample lines below only enables the ID’s for the upper body without the head).Right Arm ID = { ID_R_SHOULDER_PITCH, ID_R_SHOULDER_ROLL, ID_R_ELBOW }Left Arm ID = { ID_L_SHOULDER_PITCH, ID_L_SHOULDER_ROLL, ID_L_ELBOW }  Arguments            Name      Type      Description                  enable      bool      use availability        Return : Nonevoid SetEnableLowerBody( bool enable )Sets the ID (the sample lines below only enables the ID’s for the lower body).Right Leg ID = { ID_R_HIP_YAW, ID_R_HIP_ROLL, ID_R_HIP_PITCH, ID_R_KNEE, ID_R_ANKLE_PITCH, ID_R_ANKLE_ROLL }Left Leg ID = { ID_L_HIP_YAW, ID_L_HIP_ROLL, ID_L_HIP_PITCH, ID_L_KNEE, ID_L_ANKLE_PITCH, ID_L_ANKLE_ROLL }  Arguments            Name      Type      Description                  enable      bool      use availability        Return : Nonevoid SetEnableBodyWithoutHead( bool enable )Sets the ID (the sample lines below only enable the body’s ID without the head and neck).Right Arm ID = { ID_R_SHOULDER_PITCH, ID_R_SHOULDER_ROLL, ID_R_ELBOW }Left Arm ID = { ID_L_SHOULDER_PITCH, ID_L_SHOULDER_ROLL, ID_L_ELBOW }Right Leg ID = { ID_R_HIP_YAW, ID_R_HIP_ROLL, ID_R_HIP_PITCH, ID_R_KNEE, ID_R_ANKLE_PITCH, ID_R_ANKLE_ROLL }Left Leg ID = { ID_L_HIP_YAW, ID_L_HIP_ROLL, ID_L_HIP_PITCH, ID_L_KNEE, ID_L_ANKLE_PITCH, ID_L_ANKLE_ROLL }  Arguments            Name      Type      Description                  enable      bool      use availability        Return : Nonevoid SetEnableBody( bool enable )Sets the ID (the sample lines below set all ID’s in use individually).Head ID = { ID_HEAD_PAN, ID_HEAD_TILT }Right Arm ID = { ID_R_SHOULDER_PITCH, ID_R_SHOULDER_ROLL, ID_R_ELBOW }Left Arm ID = { ID_L_SHOULDER_PITCH, ID_L_SHOULDER_ROLL, ID_L_ELBOW }Right Leg ID = { ID_R_HIP_YAW, ID_R_HIP_ROLL, ID_R_HIP_PITCH, ID_R_KNEE, ID_R_ANKLE_PITCH, ID_R_ANKLE_ROLL }Left Leg ID = { ID_L_HIP_YAW, ID_L_HIP_ROLL, ID_L_HIP_PITCH, ID_L_KNEE, ID_L_ANKLE_PITCH, ID_L_ANKLE_ROLL }  Arguments            Name      Type      Description                  enable      bool      use availability        Return : Nonepublic bool GetEnable( int id )Returns the ID(s) of Joint Enable.  Arguments            Name      Type      Description                  id      int      determines use availability of joint ID        Return : true/falsepublic void SetValue( int id, int value )Sets ID joint value.  Arguments            Name      Type      Description                  id      int      sets joint ID              value      int      sets motor value        Return : Noneint GetValue( int id )Returns ID joint value.  Arguments            Name      Type      Description                  id      int      returns joint ID        Return : Motor value setvoid SetAngle( int id, double angle )Sets ID joint angle.  Arguments            Name      Type      Description                  id      int      sets joint ID              angle      double      sets angle value        Return : Nonedouble GetAngle( int id )Returns ID joint angle.  Arguments            Name      Type      Description                  id      int      returns joint ID        Return : Angle value setvoid SetRadian( int id, double radian )Sets ID joint angle in radians.  Arguments            Name      Type      Description                  id      int      sets joint ID              radian      double      sets angle value in radians        Return : Nonedouble GetRadian( int id )Returns ID joint angle in radians.  Arguments            Name      Type      Description                  id      int      returns joint ID        Return : Sets angle values in radiansvoid SetSlope( int id, int cwSlope, int ccwSlope )Sets ID of CW/CCW (clockwise/counterclockwise) compliance slopes.  Arguments            Name      Type      Description                  id      int      sets Joint ID              cwSlope      int      sets CW (clockwise) compliance slope value              ccwSlope      int      sets CCW (counterclockwise) compliance slope value        Return : Nonevoid SetCWSlope( int id, int cwSlope )Sets ID of CW compliance slope.  Arguments            Name      Type      Description                  id      int      sets joint ID              cwSlope      int      sets CW compliance slope value        Return : Noneint GetCWSlope( int id )Returns CW compliance slope.  Arguments            Name      Type      Description                  id      int      returns joint ID        Return : Sets CW compliance slope valuevoid SetCCWSlope( int id, int ccwSlope )Sets ID of CCW compliance slope.  Arguments            Name      Type      Description                  id      int      sets joint ID              ccwSlope      int      sets CCW compliance slope value        Return : Noneint GetCCWSlope( int id )Returns ID of CCW Compliance Slope.  Arguments            Name      Type      Description                  id      int      returns Joint ID        Return : Sets CCW Compliance Slope valueKinematics ClassRobot Kinematics class informationConstructionsKinematics( )  Arguments : NoneData Membersstatic const double CAMERA_DISTANCE  (mm)static const double EYE_TILT_OFFSET_ANGLE  (degree)static const double LEG_SIDE_OFFSET  Gap between both feet (mm)static const double THIGH_LENGTH  Thigh length (mm)static const double CALF_LENGTH  Calf length (mm)static const double ANKLE_LENGTH  Ankle length (mm)static const double LEG_LENGTH  Leg length (mm)  LEG_LENGTH = THIGH_LENGTH + CALF_LENGTH + ANKLE_LENGTHMethodsKinematics* GetInstance()  Arguments : None  Return : Kinematics private unique instanceIncludes  #include “Matrix.h”  #include “JointData.h”Action ClassEnermerations &amp;amp; DefinesMax Numbers (enum)Maximum values of each properties.            Name      Value      Description                  MAXNUM_PAGE      256      Maximum number of page              MAXNUM_STEP      7      Maximum number of step              MAXNUM_NAME      13      Maximum length of page name      Schedule type (enum)            Name      Value      Description                  SPEED_BASE_SCHEDULE      0x0      -              TIME_BASE_SCHEDULE      0x0a      -      Bit mask (enum)Position value bit mask.            Name      Value      Description                  RANGE_BIT_MASK      0x03FF      Position value bit mask              INVALID_BIT_MASK      0x4000      Invalid position value bit mask              TORQUE_OFF_BIT_MASK      0x2000      Torque off bit mask      struct PAGEHEADERHeader structure. (total 64 bytes)            Name      Type      Length      Description                  name      unsigned char[]      14      page name              reserved1      unsigned char      1      reserved 1              repeat      unsigned char      1      repeat count              schedule      unsigned char      1      schedule              reserved2      unsigned char[]      3      reserved 2              stepnum      unsigned char      1      Number of step              reserved3      unsigned char      1      reserved 3              speed      unsigned char      1      Speed              reserved4      unsigned char      1      reserved 4              accel      unsigned char      1      Acceleration time              next      unsigned char      1      Link to next              exit      unsigned char      1      Link to exit              reserved5      unsigned char[]      4      reserved 5              checksum      unsigned char      1      checksum              slope      unsigned char[]      31      CW/CCW compliance slope              reserved6      unsigned char      1      reserved 6      struct STEPStep Structure (total 64 bytes)            Name      Type      Length      Description                  position      unsigned short[]      62      Joint position              pause      unsigned char      1      Pause time              time      unsigned char      1      Time      struct PAGEPage Structure (total 512 bytes)            Name      Type      Length      Description                  header      PAGEHEADER      64      Joint position              step      STEP[]      448      Pause time      Data Membersbool DEBUG_PRINT  Enable/Disable debugging message print.Methodsstatic Action* GetInstance( )Method to obtain global reference for Instance.  Arguments : None.  Return : pointer of Action’s unique instance.void Initialize( )Initialize.  Arguments : None  Return : Nonevoid Process( )Process.  Arguments : None  Return : Nonebool LoadFile( char* filename )Load action information from designated action file.  Arguments            Name      Type      Description                  filename      char*      Action file name to be read        Return : On success, true is returned. On fail, false is returned.bool CreateFile( char* filename )Create a file with assigned file name and save action information.  Arguments            Name      Type      Description                  filename      char*      file name of the action file to create        Return : On success, true is returned. On fail, false is returned.bool Start( int iPage )Play action in the page.  Arguments            Name      Type      Description                  iPage      int      page number of the action to play        Return : On success, true is returned. On fail, false is returned.bool Start( char* namePage )Play the action in the page name.  Arguments            Name      Type      Description                  namePage      char*      page name of the action to play        Return : On success, true is returned. On fail, false is returned.bool Start( int index, PAGE* pPage )  Arguments            Name      Type      Description                  index      int      -              pPage      PAGE*      -        Return : On success, true is returned. On fail, false is returned.void Stop( )Stop playback.  Arguments : None  Return : Nonevoid Brake( )  Arguments : None  Return : Nonebool IsRunning( )  Arguments : None  Return : On action is running, true is returned. On action is stoped, false is returned.bool IsRunning( int* iPage, int* iStep )  Arguments            Name      Type      Description                  iPage      int*      -              iStep      int*      -        Return : On action is running, true is returned. On action is stoped, false is returned.bool LoadPage( int index, PAGE* pPage )  Arguments            Name      Type      Description                  index      int      -              pPage      PAGE*      -        Return : On success, true is returned. On fail, false is returned.bool SavePage( int index, PAGE* pPage )  Arguments            Name      Type      Description                  index      int      -              pPage      PAGE*      -        Return : On success, true is returned. On fail, false is returned.void ResetPage( PAGE* pPage )  Arguments            Name      Type      Description                  pPage      PAGE*      -        Return : NoneHead ClassMethodsstatic Head* GetInstance( )Method to obtain global reference for instance.  Arguments : None  Return : Pointer of Head class unique instancevoid Initialize( )Method to initialize variables and move head to default position.  Arguments : None  Return : Nonevoid Process( )  Arguments : None  Return : Nonedouble GetTopLimitAngle( )  Arguments : None  Return : Top limitdouble GetBottomLimitAngle( )  Arguments : None  Return : Bottom limitdouble GetRightLimitAngle()  Arguments : None  Return : Right limitdouble GetLeftLimitAngle( )  Arguments : None  Return : Left limitdouble GetPanAngle( )  Arguments : None  Return : Present pan angle valuedouble GetTiltAngle( )  Arguments : None  Return : Present pan angle valuevoid MoveToHome( )  Arguments : None  Return : Nonevoid MoveByAngle( double pan, double tilt )  Arguments            Name      Type      Description                  pan      double      pan angle value              tilt      double      tilt angle value        Return : Nonevoid MoveByAngleOffset( double pan, double tilt )  Arguments            Name      Type      Description                  pan      double      pan angle value              tilt      double      tilt angle value        Return : Nonevoid InitTracking( )  Arguments : None  Return : Nonevoid MoveTracking( Point2D err )  Arguments            Name      Type      Description                  err      Point2D      -        Return : Nonevoid MoveTracking( )  Arguments : None  Return : Nonevoid LoadINISettings( minIni* ini )  Arguments            Name      Type      Description                  ini      minIni*      -        Return : Nonevoid LoadINISettings( minIni* ini, const std::string &amp;amp;section )  Arguments            Name      Type      Description                  ini      minIni*      -              section      const std::string&amp;amp;      -        Return : Nonevoid SaveINISettings( minIni* ini )  Arguments            Name      Type      Description                  ini      minIni*      -        Return : Nonevoid SaveINISettings( minIni* ini, const std::string &amp;amp;section )  Arguments            Name      Type      Description                  ini      minIni*      -              section      const std::string&amp;amp;      -        Return : NoneWalking ClassEnermerations &amp;amp; DefinesWalking PhasePhase number            Name      Value                  PHASE0      0              PHASE1      1              PHASE2      2              PHASE3      3      Data Membersdouble X_OFFSETdouble Y_OFFSETdouble Z_OFFSETdouble A_OFFSETdouble P_OFFSETdouble R_OFFSETdouble PERIOD_TIMEdouble DSP_RATIOdouble X_MOVE_AMPLITUDEdouble Y_MOVE_AMPLITUDEdouble Z_MOVE_AMPLITUDEdouble A_MOVE_AMPLITUDEbool A_MOVE_ATM_ONbool BALANCE_ENABLEdouble BALANCE_KNEE_GAINdouble BALANCE_ANKLE_PITCH_GAINdouble BALANCE_HIP_ROLL_GAINdouble BALANCE_ANKLE_ROLL_GAINdouble Y_SWAP_AMPLITUDEdouble Z_SWAP_AMPLITUDEdouble ARM_SWING_GAINint PELVIS_OFFSETint HIP_PITCH_OFFSETMethodsstatic Walking* GetInstance( )method to obtain global reference for Instance.  Arguments : None  Return : pointer of Walking’s unique instance.int GetCurrentPhase( )  Arguments : None  Return : Current phase number.double GetBodySwingY( )  Arguments : None  Return : Y axis body swing value.double GetBodySwingZ( )  Arguments : None  Return : Z axis body swing value.void Initialize( )Initialize.  Arguments : None  Return : Nonevoid Start( )  Arguments : None  Return : Nonevoid Stop( )  Arguments : None  Return : Nonevoid Process( )  Arguments : None  Return : Nonebool IsRunning( )  Arguments : None  Return : On walking is running, true is returned. On walking is stoped, false is returned.void LoadINISettings( minIni* ini )  Arguments            Name      Type      Description                  ini      minIni*      -        Return : Nonevoid LoadINISettings( minIni* ini, const std::string &amp;amp;section )  Arguments            Name      Type      Description                  ini      minIni*      -              section      const std::string&amp;amp;      -        Return : Nonevoid SaveINISettings( minIni* ini )  Arguments            Name      Type      Description                  ini      minIni*      -        Return : Nonevoid SaveINISettings( minIni* ini, const std::string &amp;amp;section )  Arguments            Name      Type      Description                  ini      minIni*      -              section      const std::string&amp;amp;      -        Return : NoneMotionManager ClassMotion Module management classMethodsstatic MotionManager* GetInstance( )Method to obtain global reference for Instance.  Arguments : None.  Return : pointer of MotionManager’s unique instance.bool Initialize( CM730* cm730 )Initialize.  Arguments            Name      Type      Description                  cm730      CM730*      -        Return : On success, true is returned. On fail, false is returned.bool Reinitialize( )Reinitialize.  Arguments : None.  Return : On success, true is returned. On fail, false is returned.void Process( )Periodically performs a called function.  Arguments : None  Return : Nonevoid SetEnable( bool enable )Enable the motion manager  Arguments            Name      Type      Description                  enable      bool      -        Return : Nonebool GetEnable( )Get enable status  Arguments : None  Return : Enable statusvoid AddModule( MotionModule *module )Manager updates Motion Module.  Arguments            Name      Type      Description                  module      MotionModule*      updates Motion Module        Return : Nonevoid RemoveModule( MotionModule *module )Removes Motion Module from Manager.  Arguments            Name      Type      Description                  module      MotionModule*      removes Motion Module        Return : NoneIncludes  #include &amp;lt;list&amp;gt;  #include “MotionStatus.h”  #include “MotionModule.h”  #include “CM730.h”MotionStatus ClassMotion Module Feedback controlfor each status classData Membersstatic const int FALLEN_F_LIMIT  Forward fallen acceleration sensor value limitstatic const int FALLEN_B_LIMIT  Backward fallen acceleration sensor value limitstatic const int FALLEN_MAX_COUNT  Countstatic JointData m_CurrentJointsstatic int FB_GYROstatic int RL_GYROstatic int FB_ACCELstatic int RL_ACCELstatic int BUTTON  Button value.static int FALLEN  Fallen status value.Includes  #include “JointData.h”Vision ReferencesBallFollower ClassConstructionsBallFollower( )  Arguments : NoneData Membersint KickBall  Ball position for kicking. ( -1 : Right, 0 : No ball, 1 : Left )Methodsvoid Process( Point2D ball_pos )Process  Arguments            Name      Type      Description                  ball_pos      Point2D      -        Return : NoneBallTracker ClassConstructionsBallTracker( )  Arguments : NoneData MembersColorFinder finder  ColorFinder class for ball searchingPoint2D ball_position  Ball position search via ColorFindeMethodsvoid LoadINISettings( minIni* ini )  Arguments            Name      Type      Description                  ini      minIni*      -        Return : Nonevoid LoadINISettings( minIni* ini, const std::string &amp;amp;section )  Arguments            Name      Type      Description                  ini      minIni*      -              section      const std::string&amp;amp;      -        Return : Nonevoid SaveINISettings( minIni* ini )  Arguments            Name      Type      Description                  ini      minIni*      -        Return : Nonevoid SaveINISettings( minIni* ini, const std::string &amp;amp;section )  Arguments            Name      Type      Description                  ini      minIni*      -              section      const std::string&amp;amp;      -        Return : Nonevoid LoadINISettings( minIni* ini )  Arguments            Name      Type      Description                  ini      minIni*      -        Return : Nonevoid LoadINISettings( minIni* ini, const std::string &amp;amp;section )  Arguments            Name      Type      Description                  ini      minIni*      -              section      const std::string&amp;amp;      -        Return : Nonevoid SaveINISettings( minIni* ini )  Arguments            Name      Type      Description                  ini      minIni*      -        Return : Nonevoid Process( Image* camImg )  Arguments            Name      Type      Description                  camImg      Image*      -        Return : NoneColorFinder ClassConstructionsColorFinder( )  Arguments : NoneColorFinder( int hue, int hue_tol, int min_sat, int min_val, double min_per, double max_per )  Arguments            Name      Type      Description                  hue      int      Hue value              hue_tol      int      Tolerance in hue (differential) +-              min_sat      int      Minimum saturation (chroma) value              min_val      int      Minimum brightness (lumina) value              min_per      double      Minimum color pixel filtering              max_per      double      Maximum color pixel filtering      Data Membersint m_hue  Hue value for color ( 0 ~ 360 )int m_hue_tolerance  Tolerance value for color (hue differential) +- ( 0 ~ 180 )int m_min_saturationint m_min_valuedouble m_min_percentdouble m_max_percentstd::string color_sectionImage* m_resultMethodsvoid LoadINISettings( minIni* ini )  Arguments            Name      Type      Description                  ini      minIni*      -        Return : Nonevoid LoadINISettings( minIni* ini, const std::string &amp;amp;section )  Arguments            Name      Type      Description                  ini      minIni*      -              section      const std::string&amp;amp;      -        Return : Nonevoid SaveINISettings( minIni* ini )  Arguments            Name      Type      Description                  ini      minIni*      -        Return : Nonevoid SaveINISettings( minIni* ini, const std::string &amp;amp;section )  Arguments            Name      Type      Description                  ini      minIni*      -              section      const std::string&amp;amp;      -        Return : NonePoint2D&amp;amp; GetPosition( Image* hsv_img )  Arguments            Name      Type      Description                  hsv_img      Image*      -        Return : Finds position through color.Image ClassConstructionsImage( int width, int height, int pixelsize )  Arguments            Name      Type      Description                  width      int      Image pixel width              height      int      Image pixel height              pixelsize      int      bytes of pixel      Data Membersstatic const int YUV_PIXEL_SIZE  YUYV type image’s pixel sizestatic const int RGB_PIXEL_SIZE  RGB type image’s pixel sizestatic const int HSV_PIXEL_SIZE  HSV type image’s pixel sizeunsigned char* m_ImageData  pointer to aligned image dataint m_Width  image width in pixelsint m_Height  image height in pixelsint m_PixelSize  pixel size in bytesint m_NumberOfPixels  number of pixelsint m_WidthStep  size of aligned image row in bytesint m_ImageSize  image data size in bytes (=image-&amp;gt;m_Height*image-&amp;gt;m_WidthStep)OperatorsImage&amp;amp; operator = (Image &amp;amp;img)FrameBuffer ClassConstructionsFrameBuffer( int width, int height )  Arguments            Name      Type      Description                  width      int      Image buffer pixel width              height      int      Image buffer pixel height      Data MembersImage* m_YUVFrame  YUYV image frame bufferImage* m_RGBFrame  RGB image frame bufferImage* m_HSVFrame  HSV image frame bufferImgProcess ClassMethodsstatic void YUVtoRGB( FrameBuffer* buf )  Arguments            Name      Type      Description                  buf      FrameBuffer*      -        Return : Nonestatic void RGBtoHSV( FrameBuffer* buf )  Arguments            Name      Type      Description                  buf      FrameBuffer*      -        Return : Nonestatic void Erosion( Image* img )  Arguments            Name      Type      Description                  img      Image*      -        Return : Nonestatic void Erosion( Image* src, Image* dest )  Arguments            Name      Type      Description                  src      Image*      -        Return : Nonestatic void Dilation( Image* img )  Arguments            Name      Type      Description                  img      Image*      -        Return : Nonestatic void Dilation( Image* src, Image* dest )  Arguments            Name      Type      Description                  src      Image*      -        Return : Nonestatic void HFlipYUV( Image* img )  Arguments            Name      Type      Description                  img      Image*      -        Return : Nonestatic void VFlipYUV( Image* img )  Arguments            Name      Type      Description                  img      Image*      -        Return : NoneLinux Platform PortingTo enable motion under other platforms classes need to createdMotionManager for PlatformMotionManager implements inheritance.MotionManager periodic timer process requires Timer from Platform (by periodic calling).PlatformCM730PlatformCM730 implements inheritance. PlatformCM730 classes communicate with the sub-board (sub-controller’s). Communications is performed at the platform level and necessary for control. PlatformCM730 classes can be implemented by virtual method.  Port control methods          OpenPort      ClosePort      ClearPort      WritePort      ReadPort        Multi-Thread for semaphore methods          LowPriorityWait      MidPriorityWait      HighPriorityWait      LowPriorityRelease      MidPriorityRelease      HighPriorityRelease        Communications Timeout check methods          SetPacketTimeout      IsPacketTimeout      SetUpdateTimeout      IsUpdateTimeout      Camera for PlatformThe camera acquires image data. The framework’s image’s data classes are ImgGray and ImgColor. The camera captures data and converts is to ImgColor class.Etc classIf, necessary, you may create your own platform-dependent sources. For examaple, Network communications class source.LinuxActionScript ClassData Membersstatic bool m_stopstatic bool m_is_runningMethodsstatic int ScriptStart( const char* filename )  Arguments            Name      Type      Description                  filename      const char*      action script file name        Return : Nonestatic int PlayMP3( const char* filename )  Arguments            Name      Type      Description                  filename      const char*      mp3 file name        Return : NoneCameraSettings ClassConstructionsCameraSettings( )  Arguments : NoneData Membersint brightnessint contrastint saturationint gainint exposureLinuxCamera ClassData MembersFrameBuffer* fbufferMethodsstatic LinuxCamera* GetInstance( )method to obtain global reference for Instance.  Arguments : None  Return : pointer of LinuxCamera’s unique instance.int Initialize( int deviceIndex )  Arguments            Name      Type      Description                  deviceIndex      int      -        Return : On success, 1 is returned.int v4l2GetControl( int control )  Arguments            Name      Type      Description                  control      int      -        Return : control’s value.int v4l2SetControl( int control, int value )  Arguments            Name      Type      Description                  control      int      -              value      int      -        Return : On success, 0 is returned. On fail, -1 is returned.int v4l2ResetControl( int control )  Arguments            Name      Type      Description                  control      int      -        Return : On success, 0 is returned. On fail, -1 is returned.void LoadINISettings( minIni* ini )  Arguments            Name      Type      Description                  ini      minIni*      -        Return : Nonevoid SaveINISettings( minIni* ini )  Arguments            Name      Type      Description                  ini      minIni*      -        Return : Nonevoid SetCameraSettings( const CameraSettings&amp;amp; newset )  Arguments            Name      Type      Description                  newset      const CameraSettings&amp;amp;      -        Return : Noneconst CameraSettings&amp;amp; GetCameraSettings( )  Arguments : None  Return : Current camera settingsvoid SetAutoWhiteBalance( int isAuto )  Arguments            Name      Type      Description                  isAuto      int      -        Return : Noneunsigned char GetAutoWhiteBalance( )  Arguments : None  Return : Auto white balance valuevoid CaptureFrame( )  Arguments : None  Return : NoneLinuxCM730 ClassConstructionsLinuxCM730( const char* name )  Arguments            Name      Type      Description                  name      const char*      port name      Methodsvoid SetPortName( const char* name )  Arguments            Name      Type      Description                  name      const char*      port name        Return : Noneconst char* GetPortName( )  Arguments : None  Return : Port namebool OpenPort( )  Arguments : None  Return : On success, true is returned. On fail, false is returned.void ClosePort( )  Arguments : None  Return : Nonevoid ClearPort( )  Arguments : None  Return : Noneint WritePort( unsigned char* packet, int numPacket )  Arguments            Name      Type      Description                  packet      unsigned char*      -              numPacket      int      packet length in byte        Return : Number of sending bytesint ReadPort( unsigned char* packet, int numPacket )  Arguments            Name      Type      Description                  packet      unsigned char*      -              numPacket      int      packet length in byte        Return : Number of reading bytesvoid LowPriorityWait( )  Arguments : None  Return : Nonevoid MidPriorityWait( )  Arguments : None  Return : Nonevoid HighPriorityWait( )  Arguments : None  Return : Nonevoid LowPriorityRelease( )  Arguments : None  Return : Nonevoid MidPriorityRelease( )  Arguments : None  Return : Nonevoid HighPriorityRelease( )  Arguments : None  Return : Nonevoid SetPacketTimeout( int lenPacket )  Arguments            Name      Type      Description                  lenPacket      int      -        Return : Nonebool IsPacketTimeout( )  Arguments : None  Return : On timeout, true is returned. On waiting, false is returned.double GetPacketTime( )  Arguments : None  Return : Calculated packet time.void SetUpdateTimeout( int msec )  Arguments            Name      Type      Description                  msec      int      timeout value        Return : Nonebool IsUpdateTimeout( )  Arguments : None  Returndouble GetUpdateTime( )  Arguments : None  Returnvirtual void Sleep( int Miliseconds )  Arguments            Name      Type      Description                  Miliseconds      int      sleep time in miliseconds        Return : NoneLinuxMotionTimer ClassMethodsstatic void Initialize( MotionManager* manager )  Arguments            Name      Type      Description                  manager      MotionManager*      -        Return : Nonestatic void Start( )  Arguments : None  Return : Nonestatic void Stop( )  Arguments : None  Return : Nonestatic bool IsRunning( )  Arguments : None  Return : On timer is running, true is returned. On timer is stoped, false is returned.static void msleep( int Miliseconds )  Arguments            Name      Type      Description                  Miliseconds      int      -        Return : NoneLinuxSocket ClassConstructionsLinuxSocket( )  Arguments : NoneData Membersstatic const int MAXHOSTNAMEstatic const int MAXCONNECTIONSstatic const int MAXRECVMethodsbool create( )  Arguments : None  Return : On success, true is returned. On fail, false is returned.bool bind( const int port )  Arguments            Name      Type      Description                  port      const int      -        Return : On success, true is returned. On fail, false is returned.bool listen( ) const  Arguments : None  Return : On success, true is returned. On fail, false is returned.bool accept( LinuxSocket&amp;amp; new_socket ) const  Arguments            Name      Type      Description                  new_socket      LinuxSocket&amp;amp;      -        Return : On success, true is returned. On fail, false is returned.bool connect( const std::string host, const int port )  Arguments            Name      Type      Description                  host      const std::string      -              port      const int      -        Return : On success, true is returned. On fail, false is returned.bool send( const std::string s ) const  Arguments            Name      Type      Description                  s      const std::string      -        Return : On success, true is returned. On fail, false is returned.bool send( void* data, int length ) const  Arguments            Name      Type      Description                  data      void*      -              length      int      -        Return : On success, true is returned. On fail, false is returned.int recv( std::string&amp;amp; s ) const  Arguments            Name      Type      Description                  s      std::string&amp;amp;      -        Returnint recv( void* data, int length ) const  Arguments            Name      Type      Description                  data      void*      -              length      int      -        Returnvoid set_non_blocking( const bool b )  Arguments            Name      Type      Description                  b      const bool      -        Return : Nonebool is_valid( ) const  Arguments : None  Return : On socket is valid, true is returned. On socket is invalid, false is returned.LinuxSocketException ClassConstructionsLinuxSocketException( std::string s )  Arguments            Name      Type      Description                  s      std::string      -      Methodsstd::string description( )  Arguments : None  ReturnLinuxServer ClassConstructionsLinuxServer( )  Arguments : NoneLinuxServer( int port )  Arguments            Name      Type      Description                  s      std::string      -      Methodsvoid accept( LinuxServer&amp;amp; sock )  Arguments            Name      Type      Description                  sock      LinuxServer&amp;amp;      -        Return : None.bool send( unsigned char* data, int length )  Arguments            Name      Type      Description                  data      unsigned char*      -              length      int      -        Return : On success, true is returned. On fail, false is returned.int recv( unsigned char* data, int length )  Arguments            Name      Type      Description                  data      unsigned char*      -              length      int      -        ReturnOperatorsconst LinuxServer&amp;amp; operator &amp;lt;&amp;lt; ( const std::string&amp;amp; s ) const  Sendconst LinuxServer&amp;amp; operator &amp;lt;&amp;lt; ( const int&amp;amp; i ) const  Sendconst LinuxServer&amp;amp; operator &amp;gt;&amp;gt; ( const std::string&amp;amp; s ) const  ReadStreamer  Get more informations: http://sourceforge.net/projects/mjpg-streamer/Linux TutorialsThe following are required libraries for tools and tutorials.  g++ : GNU C++ Compiler.  manpages-dev : describes the Linux programming interface, including Linux system and library calls.  libjpeg62-dev : library for JPEG files.  libncurses5-dev : contains the header files, static libraries and symbolic links for developers.You may install the abovementioned libraries by typing the line below at the command prompt.$ sudo apt-get install g++ manpages-dev libjpeg62-dev libncurses5-devTutorial source path : /darwin/Linux/project/tutorialBuilddarwin@darwin:~$ cd /darwin/Linux/project/tutorial/read_write/darwin@darwin:/darwin/Linux/project/tutorial/read_write$ makemake -C ../../../build...g++ -o read_write main.o ../../../lib/darwin.a -lpthread -lrtdarwin@darwin:/darwin/Linux/project/tutorial/read_write$Execute/dev/ttyUSB0 requires root user priviledges. To obtain root user privileges type:darwin@darwin:/darwin/Linux/project/tutorial/read_write$ sudo su[sudo] password for darwin: ( input 111111 )root@darwin:/darwin/Linux/project/tutorial/read_write# ./read_writeRead/WriteMain classes used in the tutorial  LinuxCM730 : Inherited class from PlatformCM730 for the Linux platform. Use this class to control a usb-to-serial port file resource.  CM730 : generates Read / Write packet, PlatformCM730 class inherited from the CM-730. Results sent to packet processing class.Source code review  Construct LinuxCM730 and CM730 class  LinuxCM730 linux_cm730(&quot;/dev/ttyUSB0&quot;);  CM730 cm730(&amp;amp;linux_cm730);  Call connect() function to open port and turn on the Dynamixel power.  if(cm730.Connect() == false)  {  printf(&quot;Fail to connect CM-730!n&quot;);  return 0;  }  Read 2 bytes value(Gyro sensor value) from CM730 control table.  printf(&quot;GFB:&quot;);  if(cm730.ReadWord(CM730::P_GYRO_Y_L, &amp;amp;value, 0) == CM730::SUCCESS)  printf(&quot;%3d&quot;, value);  else  printf(&quot;---&quot;);  Read 2 bytes value(Present position) from Dynamixel control table and write the mirroring value.  printf(&quot; ID[%d]:&quot;, JointData::ID_R_SHOULDER_PITCH);  if(cm730.ReadWord(JointData::ID_R_SHOULDER_PITCH, RX28M::P_PRESENT_POSITION_L, &amp;amp;value, 0) == CM730::SUCCESS)  {  printf(&quot;%4d&quot;, value);  cm730.WriteWord(JointData::ID_L_SHOULDER_PITCH, RX28M::P_GOAL_POSITION_L, RX28M::GetMirrorValue(value), 0);  }  else  printf(&quot;----&quot;);Resultroot@darwin:/darwin/Linux/project/tutorial/read_write# ./read_writeRead/Write Tutorial for DARwInGFB:512 GRL:512 AFB:504 ARL:508 BTN:0 ID[1]: 394 ID[3]: 444 ID[5]: 492  GFB : Gyro sensor Y axis value  GRL : Gyro sensor X axis value  AFB : Acceleration sensor Y axis value  ARL : Acceleration sensor X axis value  BTN : Button status value  ID[#] : Present position value of dynamixel ID #Reads position values for the right arm. From values’ data the left arm mirrors the right arm.Tutorial ProcedureNote Before you begin ensure that DARWIN-OP is in a stable kneeling position. During this tutorial torque from all actuators will be released.Press the “RESET” button and ensure you’ve perform the killall procedure (if necessary).DARWIN-OP’s head LED must be in green and eye LED in blue before you begin.Go to the directory /darwin/Linux/project/tutorial/read_writeLook for the file “read_write” If not type make and the compiler will autogenerate read_write.Execute the read/write by typing ./read_write.Once running the read/write you will see the following  Grab DARWIN-OP’s right hand and move it around. You should notice that the left hand mimics the movement of the right hand.  You should also notice that the head and eye LED constantly change color.  You should also notice that the actuators controlling the left arm are stiff while all other actuators are loose.  During this tutorial please exercise caution when moving the right arm as DARWIN-OP may fall due to the released torque from the rest of the body.  GFB, GRL, AFB, ARL values will change if you move DARWIN-OP’s torso.To do so grab DARWIN-OP by the handle and gently swing it around.You should see the values change.To end the tutorial hold the “CONTROL” key and press the C key. Afterwards press the “RESET” button from DARWIN-OP.The head LED returns to blue and eye LED to green.Camera Capture &amp;amp; ViewMain classes for the tutorial  minIni : settings from ini files for loading and saving.  LinuxCamera : Camera initialization, settings change, and capture classes..  mjpg_streamer : compresses YUV image to jpeg. The web server streaming class allows view and control on a web browser page via command.Source code reviewMinIni class from the camera settings.minIni* ini = new minIni(INI_FILE_PATH);Camera device number generates LinuxCamera class. MinIni class reads settings values.LinuxCamera::GetInstance()-&amp;gt;Initialize(0);LinuxCamera::GetInstance()-&amp;gt;LoadINISettings(ini);mjpg_streamer class confirms images.mjpg_streamer* streamer = new mjpg_streamer(Camera::WIDTH, Camera::HEIGHT);LinuxCamera class allows mjpg_streamer to stream frame captures on web browser.while(1){LinuxCamera::GetInstance()-&amp;gt;CaptureFrame();streamer-&amp;gt;send_image(LinuxCamera::GetInstance()-&amp;gt;fbuffer-&amp;gt;m_YUVFrame);}ResultConnect to DARwIn-OP via IP address and port 8080 to stream motion images from the camera.(You may experience memory leaks with Chrome).Camera’s gain and exposure values can be can be changed by clicking the buttons.Tutorial ProcedureNote Before you begin, ensure that DARwIn-OP is in a stable kneeling position. During this tutorial torque from all actuators will be released.Press the “RESET” button and ensure you’ve perform the killall procedure (if necessary).DARWIN-OP’s head LED must be in green and eye LED in blue before you begin.Go to the directory /darwin/Linux/project/tutorial/cameraLook for the file “camera_tutorial”. If not type make and the compiler will autogenerate camera_tutorial.Execute the camera tutorial by typing ./camera_tutorial.Once running the camera tutorial you will see the followingFrom your computer open a web browser (Firefox recommended, do not use Chrome due to memory leak) and type http://192.168.123.1:8080 on the address bar.The IP address 192.168.123.1 is the default IP address assuming you’ve established a wired LAN connection with DARwIn-OP.From your browser you can modify GAIN and EXPOSURE values.  The default values for GAIN is 255 and EXPOSURE is 1000.  Lowering gain values will decrease image brightness  Lowering exposure values will increase image contrast.To end the tutorial hold the “CONTROL” key and press the C key. Afterwards press the “RESET” button from DARwIn-OP.The head LED returns to blue and eye LED to green.Close the web browser.You may view the changes you’ve made by viewing the config.ini file from the current working directory (/darwin/Linux/project/tutorial/camera)Image ProcessingMain classes for the tutorial  ColorFinder : HSV color space filters specific colors. ColorFinder finds the center of mass of the filtered pixels and returns the location. This process is done internally.Source code reviewColorFinder class is generated by capture image. Image capture generates ColorFinder by by finding the center of mass of pixels by pixel position from a given color. Also, minIni class sets the default value of the color.ColorFinder* finder = new ColorFinder();finder-&amp;gt;LoadINISettings(ini);mjpg_streamer allows colors adjustment via web browser for ball_finder and ColorFinder.httpd::ball_finder = finder;From GetPosition function image color values from HSV color space Point2D returns the value for center of mass.pos = finder-&amp;gt;GetPosition(LinuxCamera::GetInstance()-&amp;gt;fbuffer-&amp;gt;m_HSVFrame);ResultThe preset allows location of center of mass for ball color.root@darwin:/darwin/Linux/project/tutorial/color_filtering# ./color_filteringposx: 169.000000, posy: 104.000000From the capture screen color RGB(255, 0, 0) (color) replacement is shownTutorial procedureNote Before you begin, ensure that DARwIn-OP is in a stable kneeling position. During this tutorial torque from all actuators will be released.Press the “RESET” button and ensure you’ve perform the killall procedure (if necessary).DARWIN-OP’s head LED must be in green and eye LED in blue before you begin.Go to the directory /darwin/Linux/project/tutorial/color_filteringLook for the file “color_filtering”. If not type make and the compiler will autogenerate color_filtering.Execute the image processing tutorial by typing ./color_filtering.Once tutorial is running you will see the following screenFrom your computer open a web browser (Firefox recommended, do not use Chrome due to memory leak) and type http://192.168.123.1:8080 on the address bar.The IP address 192.168.123.1 is the default IP address and assuming you’ve established a wired LAN connection with DARWIN-OP.The following values are the default values for the ball  Hue: 356  Tolerance: 15  Minimum Saturation: 50  Minimum Value: 10  Gain: 255  Exposure: 1000You can change the color of the ball to the desired color by manipulating the parameters.Example: chang the ball color from red (default) to blue. Please refer to the table here for reference for values for blue.Under default values for the ball DARWIN-OP would view a blue ball like the image above.  After manipulating the values DARWIN-OP would view a blue ball like the image above. Notice that a bright reddish orange patch covers most of the blue ball. The orange patch over blue is an indication that DARWIN-OP detects blue as the target color.  You will also notice the change in values for posx and posy. This is because DARWIN-OP is able to “detect” the ball therefore calculate the position of center of mass for the ball color.  posx is the value for center of mass in horizontal position  posy is the value for center of mass in vertical position.  If you remove the ball you will see the values for posx and posy return to -1.000000The following table represents change in values from red ball (default) to blue ball                   red (default)      blue (new values)      reference blue (from Color and White Balance Calibration)                  Hue      356      217      225              Tolerance      15      15      15              Minimum Saturation      50      43      45              Minimum Value      10      0      0              Gain      255      255      255              Exposure      1000      1000      1000      Note Remember that these values are in accordance to the HSV color space. The values assigned for the colors are arbitrary and you may choose any values to suit your needs.To end the tutorial hold the “CONTROL” key and press the C key. Afterwards press the “RESET” button from DARWIN-OP.Close the web browser.You may view the changes you’ve made by viewing the config.ini file from the current working directory (/darwin/Linux/project/tutorial/color_filtering).Head ControlMain classes for the tutorial  BallTracker : transfer image capture from HSV color space.Ball location is possible via ColorFinder class. The head module controls head pan and tilt (aligns head in front of the ball).  MotionManager : modules are inherited from MotionModule class. The module calls Process() function to calculate each joint values. The values are merged for synchronized writing.  Head : modules are inherited from MotionModule class. The module allows head pan and tilt.  LinuxMotionTimer : MotionManager calls Process() function at regular intervals.Source code reviewBallTracker class performs ball tracking. Also, the minIni class sets color values, where the values can be manipulated via web browser.BallTracker tracker = BallTracker();tracker.LoadINISettings(ini);httpd::ball_finder = &amp;amp;tracker.finder;Create Dynamixel control CM730 class and Head class initializes MotionManager class.LinuxCM730 linux_cm730(U2D_DEV_NAME);CM730 cm730(&amp;amp;linux_cm730);if(MotionManager::GetInstance()-&amp;gt;Initialize(&amp;amp;cm730) == false){printf(&quot;Fail to initialize Motion Manager!n&quot;);return 0;}MotionManager class registers Head class and initializes the timer. Only the head moves by tracking; body joints are disabled. Afterwards MotionManager is enabled.MotionManager::GetInstance()-&amp;gt;AddModule((MotionModule*)Head::GetInstance());LinuxMotionTimer::Initialize(MotionManager::GetInstance());MotionStatus::m_CurrentJoints.SetEnableBody(false);MotionStatus::m_CurrentJoints.SetEnableHeadOnly(true);MotionManager::GetInstance()-&amp;gt;SetEnable(true);Trackertracker.Process(LinuxCamera::GetInstance()-&amp;gt;fbuffer-&amp;gt;m_HSVFrame);ResultHead pan and tilt joints aim at the center of mass of the captured color. the head is centered around the color.Tutorial ProcedureNote Before you begin, ensure that DARwIn-OP is in a stable kneeling position. During this tutorial torque from all actuators will be released.Press the “RESET” button and ensure you’ve perform the killall procedure (if necessary).DARWIN-OP’s head LED must be in green and eye LED in blue before you begin.Go to the directory /darwin/Linux/project/tutorial/head_trackingLook for the file “head_tracking”. If not type make and the compiler will autogenerate head_tracking.Execute the head control tutorial by typing ./head_tracking.Once running the tutorial you will see the followingDARWIN-OP’s head LED will change from green to amber.  DARWIN-OP tracks the red ball. However, the body remains still and only the head moves (Dynamixel ID 19 and 20).  To get DARWIN-OP track the ball place the ball at a distance approximately 1 to 1.5 feet away from the head. Placing the ball too close to DARWIN-OP will cause the head to move out of control.You may also change the color DArwIn-OP tracks by opening our web browser.From your computer open a web browser (Firefox recommended, do not use Chrome due to memory leak) and type http://192.168.123.1:8080 on the address bar.the IP address 192.168.123.1 is the default IP address and assuming you’ve established a wired LAN connection with DARWIN-OP.By Default DARWIN-OP will track a red ball.Please refer to the table here for ball, red, blue, and yellow.If you replace the red ball with another color DARWIN-OP will ignore itAs you adjust the color of the ball, from the web browser, you can also see DARWIN-OP’s camera track the ball in real-time once values are properly adjusted.Over the course of the head control tutorial you will notice that the actuators LED blink as if they have an error. Disregard this notification during this tutorial.To end the tutorial hold the “CONTROL” key and press the C key.Press the “RESET” button on DARWIN-OP.Close your web browser.You may view the changes you’ve made by viewing the config.ini file from the current working directory (/darwin/Linux/project/tutorial/color_filtering).Walking ControlMain classes for the tutorial  Head control : main class  BallFollower :Source code reviewHead tracking from BallTracker class and ball following generates BallFollower class.BallTracker tracker = BallTracker();tracker.LoadINISettings(ini);httpd::ball_finder = &amp;amp;tracker.finder;BallFollower follower = BallFollower();Port initialization and opening, dynamixel power onLinuxCM730 linux_cm730(U2D_DEV_NAME);CM730 cm730(&amp;amp;linux_cm730);if(MotionManager::GetInstance()-&amp;gt;Initialize(&amp;amp;cm730) == false){printf(&quot;Fail to initialize Motion Manager!n&quot;);return 0;}MotionManager head tracking registers head and walking modules, then timers are initialized.MotionManager::GetInstance()-&amp;gt;AddModule((MotionModule*)Head::GetInstance());MotionManager::GetInstance()-&amp;gt;AddModule((MotionModule*)Walking::GetInstance());LinuxMotionTimer::Initialize(MotionManager::GetInstance());Walking init captures poses.int n = 0;int param[JointData::NUMBER_OF_JOINTS * 5];int wGoalPosition, wStartPosition, wDistance;for(int id=JointData::ID_R_SHOULDER_PITCH; id&amp;lt;JointData::NUMBER_OF_JOINTS; id++){wStartPosition = MotionStatus::m_CurrentJoints.GetValue(id);wGoalPosition = Walking::GetInstance()-&amp;gt;m_Joint.GetValue(id);if( wStartPosition &amp;gt; wGoalPosition )wDistance = wStartPosition - wGoalPosition;elsewDistance = wGoalPosition - wStartPosition; wDistance &amp;gt;&amp;gt;= 2;if( wDistance &amp;lt; 8 )wDistance = 8; param[n++] = id;param[n++] = CM730::GetLowByte(wGoalPosition);param[n++] = CM730::GetHighByte(wGoalPosition);param[n++] = CM730::GetLowByte(wDistance);param[n++] = CM730::GetHighByte(wDistance);}cm730.SyncWrite(RX28M::P_GOAL_POSITION_L, 5, JointData::NUMBER_OF_JOINTS - 1, param);Walking module disables parts of the head. MotionManager enables them.Walking::GetInstance()-&amp;gt;m_Joint.SetEnableHeadOnly(false);MotionManager::GetInstance()-&amp;gt;SetEnable(true);Head tracking and ball following loop.tracker.Process(LinuxCamera::GetInstance()-&amp;gt;fbuffer-&amp;gt;m_HSVFrame);follower.Process(tracker.ball_position);ResultBall is tracked by head tracking, Walking towards the ball via walking module.Tutorial ProcedureNote Before you begin, ensure that DARwIn-OP is in a stable kneeling position. During this tutorial torque from all actuators will be released.Press the “RESET” button and ensure you’ve perform the killall procedure (if necessary).DARWIN-OP’s head LED must be in green and eye LED in blue before you begin.Go to the directory /darwin/Linux/project/tutorial/ball_followingLook for the file “ball_following”. If not type make and the compiler will autogenerate ball_following.Execute the walking control tutorial by typing ./ball_following.The following message will appear on screen and DARWIN-OP will stand up from its kneeling position.  DARWIN-OP’s head LED will change from green to amber.  Place the ball (default red) in front of DARWIN-OP.  Press the “ENTER” key to continue  DARWIN-OP will walk towards the ball, but will not perform the kick.  Watch the display as DARWIN-OP walks towards the ball but halts when is ready to kick.  The line following “Start to press ENTER!” is DARWIN-OP surrent status. This line changes with DARWIN-OP’s motion. “[KICK] Right STOP” means that DARWIN-OP is ready to kick the ball with its right foot but has halted.  Move the ball a little and DARWIN-OP will resume walking until is gets close enough ready to kick.You may also change the ball color DArwIn-OP tracks by opening our web browser.From your computer open a web browser (Firefox recommended, do not use Chrome due to memory leak) and type http://192.168.123.1:8080 on the address bar.the IP address 192.168.123.1 is the default IP address and assuming you’ve established a wired LAN connection with DARWIN-OP.To end the tutorial hold the “CONTROL” key and press the C key.Press the “RESET” button on DARWIN-OP.Close your web browser.You may view the changes you’ve made by viewing the config.ini file from the current working directory (/darwin/Linux/project/tutorial/ball_following).Action ControlMain classes for the tutorial  ActionAction script file consisting of page number and MP3 file path. The OS reads the script file then executes the action and mp3 file playback (based from the script). (LinuxActionScript class).MotionModule’s action is processed by Action class. MotionManager Timer is synchronizes with the action’s process.Source code reviewAction loads the saved file.Action::GetInstance()-&amp;gt;LoadFile(MOTION_FILE_PATH);CM730 class creates action’s play, MotionManager initializes and registers Action class.LinuxCM730 linux_cm730(&quot;/dev/ttyUSB0&quot;);CM730 cm730(&amp;amp;linux_cm730);if(MotionManager::GetInstance()-&amp;gt;Initialize(&amp;amp;cm730) == false){  printf(&quot;Fail to initialize Motion Manager!n&quot;);  return 0;}MotionManager::GetInstance()-&amp;gt;AddModule((MotionModule*)Action::GetInstance());LinuxMotionTimer is initialized and MotionManager is enabled.LinuxMotionTimer::Initialize(MotionManager::GetInstance());MotionManager::GetInstance()-&amp;gt;SetEnable(true);Init pose(page 1) is initilalized and waits until action is complete.Action::GetInstance()-&amp;gt;Start(1);while(Action::GetInstance()-&amp;gt;IsRunning()) usleep(8*1000);LinuxActionScript class passes and initializes the script file, then waits for the execution and completion from the script.LinuxActionScript::ScriptStart(&quot;script.asc&quot;);while(LinuxActionScript::m_is_running == 1) sleep(10);ResultExecution of the pre-scripted sequence action and mp3 playback from the script file.Tutorial ProcedureNote Before you begin, ensure that DARwIn-OP is in a stable kneeling position. During this tutorial torque from all actuators will be released.Press the “RESET” button and ensure you’ve perform the killall procedure (if necessary).DARWIN-OP’s head LED must be in green and eye LED in blue before you begin.Go to the directory /darwin/Linux/project/tutorial/action_scriptLook for the file “action_script”. If not type make and the compiler will autogenerate action_script.Execute the tutorial by typing ./action_script.Once running the tutorial you will see the following  Follow the instructions by pressing the “ENTER” key.  DARWIN-OP stands up.  The head LED goes from green to amber.  DARWIN-OP performs Interactive Motion Mode once.  The script outputs the action page and sound mp3 file on screen sequentially.  The order goes as follows:          Thank You      Introduction      WOW!      Sit down      Stand up      Clap please!      OOPS!      Bye bye!            Once DARWIN-OP finishes Interactive Motion Mode the tutorial ends automatically.  DARWIN-OP’s head LED returns to green, but its body remains in standing position.Grab DARWIN-OP’s handle.Press the “RESET” button on DARWIN-OP to release torque from all actuators.Carefully place DARWIN-OP in kneeling position.FSRMain classes used on the tutorial  LinuxCM730 : Inherited class from PlatformCM730 for the Linux platform. Use this class to control a usb-to-serial port file resource.  CM730 : generates Read / Write packet, PlatformCM730 class inherited from the CM-730. Results sent to packet processing class.  mjpg_streamer : compresses YUV image to jpeg. The web server streaming class allows view and control on a web browser page via command.Source code reviewConstruct LinuxCM730 and CM730 classLinuxCM730 linux_cm730(U2D_DEV_NAME);CM730 cm730(&amp;amp;linux_cm730);Call connect() function to open port and turn on the Dynamixel power.if(MotionManager::GetInstance()-&amp;gt;Initialize(&amp;amp;cm730) == false){  printf(&quot;Fail to initialize Motion Manager!n&quot;);  return 0;}MotionManager head tracking registers head and walking modules, then timers are initialized.Walking::GetInstance()-&amp;gt;LoadINISettings(ini);MotionManager::GetInstance()-&amp;gt;AddModule((MotionModule*)Head::GetInstance());MotionManager::GetInstance()-&amp;gt;AddModule((MotionModule*)Walking::GetInstance());LinuxMotionTimer *motion_timer = new LinuxMotionTimer(MotionManager::GetInstance());motion_timer-&amp;gt;Start();Walking init captures poses.int n = 0;int param[JointData::NUMBER_OF_JOINTS * 5];int wGoalPosition, wStartPosition, wDistance;for(int id=JointData::ID_R_SHOULDER_PITCH; id&amp;lt;JointData::NUMBER_OF_JOINTS; id++){  wStartPosition = MotionStatus::m_CurrentJoints.GetValue(id);  wGoalPosition = Walking::GetInstance()-&amp;gt;m_Joint.GetValue(id);  if( wStartPosition &amp;gt; wGoalPosition )    wDistance = wStartPosition - wGoalPosition;  else    wDistance = wGoalPosition - wStartPosition;     wDistance &amp;gt;&amp;gt;= 2;  if( wDistance &amp;lt; 8 )    wDistance = 8;     param[n++] = id;  param[n++] = CM730::GetLowByte(wGoalPosition);  param[n++] = CM730::GetHighByte(wGoalPosition);  param[n++] = CM730::GetLowByte(wDistance);  param[n++] = CM730::GetHighByte(wDistance);}cm730.SyncWrite(RX28M::P_GOAL_POSITION_L, 5, JointData::NUMBER_OF_JOINTS - 1, param);Read &amp;amp; print FSR valueleft_fsr_x = cm730.m_BulkReadData[FSR::ID_L_FSR].ReadByte(FSR::P_FSR_X);left_fsr_y = cm730.m_BulkReadData[FSR::ID_L_FSR].ReadByte(FSR::P_FSR_Y);printf(&quot; LX:%3d&quot;, MAX_FSR_VALUE-left_fsr_x);printf(&quot; LY:%3d&quot;, MAX_FSR_VALUE-left_fsr_y);...right_fsr_x = cm730.m_BulkReadData[FSR::ID_R_FSR].ReadByte(FSR::P_FSR_X);right_fsr_y = cm730.m_BulkReadData[FSR::ID_R_FSR].ReadByte(FSR::P_FSR_Y);printf(&quot; RX:%3d&quot;, right_fsr_x);printf(&quot; RY:%3d&quot;, right_fsr_y);In cm730.m_BulkReadData the MakeBulkReadPacket() function from /darwin/Framework/src/CM730.cpp for reading FSR values.if(Ping(FSR::ID_L_FSR, 0) == SUCCESS){  m_BulkReadTxPacket[PARAMETER+3*number+1] = 10; // length  m_BulkReadTxPacket[PARAMETER+3*number+2] = FSR::ID_L_FSR; // id  m_BulkReadTxPacket[PARAMETER+3*number+3] = FSR::P_FSR1_L; // start address  number++;}if(Ping(FSR::ID_R_FSR, 0) == SUCCESS){  m_BulkReadTxPacket[PARAMETER+3*number+1] = 10; // length  m_BulkReadTxPacket[PARAMETER+3*number+2] = FSR::ID_R_FSR; // id  m_BulkReadTxPacket[PARAMETER+3*number+3] = FSR::P_FSR1_L; // start address  number++;}The weight from both feet shown with each feet showing its weight centered (red “+” sign).int r_position_x = (98*(MAX_FSR_VALUE-right_fsr_x)/MAX_FSR_VALUE) + 24;int r_position_y = (160*(MAX_FSR_VALUE-right_fsr_y)/MAX_FSR_VALUE) + 40;int l_position_x = (98*left_fsr_x/MAX_FSR_VALUE) + 198;int l_position_y = (160*left_fsr_y/MAX_FSR_VALUE) + 40;memcpy(img_send-&amp;gt;m_ImageData, img_position-&amp;gt;m_ImageData, LinuxCamera::GetInstance()-&amp;gt;fbuffer-&amp;gt;m_RGBFrame-&amp;gt;m_ImageSize);if(left_fsr_x != 255 &amp;amp;&amp;amp; left_fsr_y != 255)draw_target(img_send, l_position_x, l_position_y, 255, 0, 0);if(right_fsr_x != 255 &amp;amp;&amp;amp; right_fsr_y != 255)draw_target(img_send, r_position_x, r_position_y, 255, 0, 0); if(left_fsr_x != 255 &amp;amp;&amp;amp; left_fsr_y != 255 &amp;amp;&amp;amp; right_fsr_x != 255 &amp;amp;&amp;amp; right_fsr_y != 255)draw_target(img_send, (l_position_x+r_position_x)/2, (l_position_y+r_position_y)/2, 0, 0, 255);streamer-&amp;gt;send_image(img_send);Result  LX : Left foot center point of the X-axis force  LY : Left foot center point of the Y-axis force  RX : Right foot center point of the X-axis force  RY : Right foot center point of the Y-axis forceConnect to DARWIN-OP via IP address and port 8080.the red cross represent the weight centered on each foot; while the blue cross for both feet combined.DARWIN-OP can be aimed at several directions LX, LY, RX, RY. These values are modifiable.Press the space bar to goggle walking on and off.Tutorial ProcedureNote Before you begin, ensure that DARwIn-OP is in a stable kneeling position. During this tutorial torque from all actuators will be released.Press the “RESET” button and ensure you’ve perform the killall procedure (if necessary).DARWIN-OP’s head LED must be in green and eye LED in blue before you begin.Go to the directory /darwin/Linux/project/tutorial/fsrLook for the file “fsr”. If not type make and the compiler will autogenerate fsr.Execute the fsr by typing ./fsr.While running the fsr program yo may view the results as described above.To end the tutorial hold the “CONTROL” key and press the C key. Afterwards press the “RESET” button from DARWIN-OP.The head LED returns to blue and eye LED to green.ToolsTools, such as action editor, walking tuner, etc. can be found at /darwin/Linux/projectIf you wish to use the tools is recommended that you connect to DARWIN-OP via SSH. Please go to “A. Ready” for example on how to connect.Action EditorAction Editor allows the user to control and edit DARWIN-OP’s motions and poses via command line. This process is done by manipulating values of the MX-28 actuator(s).For more information about the MX-28, please refer to MX-28 manual.For more information about Actuator ID Map of DARWIN-OP, please refer to ID Map.Before getting into Action Editor be aware of the motion data file residing in the source code.Motion FileThe motion file is a file that contains DARWIN-OP’s poses and motion data. The data is read and written as position of the MX-28; so manipulating/editing the file is a robot-low-level task. Since the motion file data is binaries file you cannot view its contents directly. You can view its contents with Action Editor or RoboPlus Motion.ROBOTIS currently supplies 2 motion files with the source code. They are located in /darwin/Data directory. These are:  ‘motion_1024.bin’ for MX-28 position sensor at 10-bit resolution (300 degrees available)  ‘motion_4096.bin’ for MX-28 position sensor at 12-bit resolution (360 degrees available)The motion file contains 256 pages. Each page can store up to 7 stages (or steps) of motion data. In the basic motion file provided not all pages are used. You may add you own motion if you like by making use of the empty pages.  Page number: is the listed page number. If you want to create new motion poses you may use any empty page:  Page title: we recommend you use a page title if you will make use on an empty page.  Current position: This is the current position of the MX-28 for each ID. This data is represented by STP7 in Action Editor and Pose of Robot by Roboplus. Sometimes the position may read as ???? in Action Editor or OFF in Roboplus Motion. This means position of the MX-28 is not being read (and torque is off).If you turn an MX-28 off you will not get current position reading until you turn it back on.You can turn off any or all MX-28 at will. This is very convenient to make robot poses rather than entering position values.For example if you want to make a new robot pose simply turn any MX-28 off, make the robot pose, and turn the MX-28(s) back on at that robot pose. Once turning on you’ll get the pose values.  Steps or stages: each page can store up to 7 steps, from STP0 to STP6. However, some motions may require more than 7 stages to perform completely. Simply use multiple pages, and link them with Next. Note that STP7 in Roboplus is rightmost colum labeled Pose of the Robot.  Next: is a link to indicate whether or not motion continues at a different page. To continue motions just list the page number where motion is to be continued. Number 0 indicates motion does not continue onto another page (default value). Linking page does not have to the in numerical order allowing you to link from one page to any other page.  Play Count: is the number of times the motion of the page is to be played.  Example: page 239 has a play count of 4 times then has a link to page 240. This means that motions on page 239 will be executed 4 times then move on to page 240 and continue with the motions on page 240.  Exit: There may be times when a motion is stopped. If that’s the case the robot may be in an unstable position. Exit is much like Next, so Exit should be linked to a page where DARWIN-OP can return to a stable pose. Number 0 indicates no link to exit page linked (default value).Tip when calling a motion requires multiple pages we strongly suggest that you call that motion from the starting page. For example “talk2” starts at page 41 and ends at page 47; this means you should call page 41 when calling “talk2.” Calling the subsequent pages for “talk2” (i.e. page 43) may cause the robot to perform abnormally.It is strongly advised that you test your newly-created or edited motions for the sake of DARWIN-OP’s stability, by making small incremental changes in position, speed/time, and pause values.Please use whichever program is most convenient for you. However, you may end up working with both. Always remember to save your work.Contents and description of the motion file used for the demo programs.Although there are many pages occupied with data. Not all pages are actually set in motion by DARWIN-OP. here is a list of the pages used along with a brief description of each page.            page number      page title      brief description of page      number of pages      notes                  1      init      DARWIN-OP initial standing pose      1                     4      hi      DARWIN-OP bowing greet      1                     12      rk      DARWIN-OP doing a right kick (from Soccer mode)      1                     13      lk      DARWIN-OP doing a left kick (from Soccer mode)      1                     15      sit down      DARWIN-OP on its knees      1                     23      d1      DARWIN-OP “yes, go!” (from Interactive mode)      1                     24      d2      DARWIN-OP “wow!” (from Iteractive mode)      1                     27      d3      DARWIN-OP “ooops!” (from Interactive mode)      1                     38      d2      DARWIN-OP “bye bye” (from Interactive mode)      2 (38 and 39)      starting page              41      talk2      DARWIN-OP “introduction” (partial, from Interactive mode)      7 (41 through 47)      starting page              54      init      DARWIN-OP “clap please” (from Interactive mode)      4 (54,55,56,58)      starting page, excludes page 57      Getting Started with Action EditorWarning Before running Action Editor please verify angle resolution the actuators are currently loaded with.For example, if the actuators resolution is 1024 then you can only work with motion file for 1024-resolution (motion_1024.bin)Running another file may damage DARWIN-OP.If you are unsure about which angle resolution the actuators are currently loaded with then refer to dxl_monitor.To install the proper resolution for the actuator then refer to firmware_installer.Action editor can be found at /darwin/Linux/project/action_editorYou can modify DARWIN-OP motion data as done in a terminal window.  To read and write data go to the directory: /darwin/Linux/project/action_editor  Make sure that there is an executable file named “action_editor”.Please note that when running action editor the program will open the file motion_4096.bin by default.The illustrations below are from the motion file ‘motion_1024.bin’ and ‘motion_4096.bin’.Remember that motion files are located at /darwin/Data  If there is no said file then create it by typing make. The compiler will automatically generate the file.  Run the program by typing ./action_editor. You will notice DARWIN-OP’s head LED changes from green to amber.  Reminder: remember the current angle resolution for the actuators.  Once in the program type help for further information  From there you may follow the options given to you.  To exit the program type exit.Please note the following:  STP7 is the current value of the actuators. ???? means that torque has been released.  PauseTime is the pause for motion playback for step STP[x].  Time(x 8msec) is the time period for DARWIN-OP to complete step STP[x]. Each time unit account for 8ms of time.After typing help the following list will appear.The menu options are very extensive so you may not be able to memorize every command. At any time you type help to invoke the options list.  exit: exits the program. After exiting the program press the “RESET” button on DARwin-OP.  re: refreshes the screen.  b: moves to the previous page.  n: moves to the next page.  page [index]: moves to the [index] page. For example typing page 5 outputs data from page 5 on screen.  list: outputs a list of pages.  new: initializes current page by clearing all actuator position data.  copy [index]: copies data from page [index] to current page. For example if you are on page 5 and want to copy page 9 then type copy 9.  set [value]: sets position value on chosen actuator. For example If you want ID19 (head pan) to have a value of 512 then using the keyboard’s directional keys place the cursor on ID19 and type set 512.  save: saves any changes you’ve made. the saved motion file (motion.bin can be found at /darwin/Data/  play: plays motion(s) of current page.      name: changes the name of the current page. You can view the name of the page at the top right portion of the screen. For example, page 2 is titled ok; to change the name type name and press the “ENTER” key. name: will appear at the bottom of the screen. Input the desired name for the page, good for instance, and press the “ENTER” key again.              before changing the page name                  after changing the page name to good.            w [index]: overwrites STP[index] with data from STP7 (the very first column on the page). For example page 4 has data on 4 steps (4 columns excluding STP7). typing w 1 overwrites STP1 data with STP7 data.              before typing w 1                  after applying w 1. Notice that STP1 data is identical to STP7.        i: inserts data from STP7 to STP0. Moves data from STP[x] to STP[x + 1] if any.  i [index]: inserts data from STP7 to STP[index]. Moves data from STP[index] to STP[index + 1] if any.  m [index] [index2]: moves data from [index2] to [index].  d [index]: deletes data from STP[index]. Moves data from STP[index] to STP[index - 1].  on/off: turns on/off torque from all Dynamixels.      on/off [index1] [index2] [index3] …: turns torque on/off from ID[index1] ID[index2] ID[index3]. For example off 20 releases torque from ID20. Notice that STP7 for ID20 will read [????]. Typing on 20 turns torque from ID20 on again and the screen outputs the current position data of ID20.              Before off 20 command. Value of ID20 is 549 (observe STP7).                  ID20 is off. Type re to refresh the screen. During this time you may manually move the head up and down.                  ID20 is on again after typing on 20. notice the value of ID20 is 624 and not 453 (the head has been tilted upwards a bit). Type re to refresh the screen.      Example motion editing with Action EditorLet’s modify DARWIN-OP’s pose when kneeling. Let’s change the position of the left arm during kneeling. Dynamixels for the left arm are ID 2, 4, and 6.Tip Before you begin you may want to make a copy of “motion_4096.bin” file and save it elsewhere. If you don’t like with the changes you’ve made you can always revert back to the original data by overwriting the file.  Run Action Editor  Find the page where the kneeling (sit down) motion is by typing list  Notice that the motion data is on page 15.  Exit the list and go tp page 15 by typing page 15.With the current data values from page 15 DARWIN-OP’s pose will look like this. Do so by typing play  Once on page 15 edit the values on ID 2, 4, 6. One of the easiest ways to edit values is to release the torque on Dynamixels from the left arm.  release the torque on ID 2, 4, and 6 by typing off 2 4 6  after getting the desired pose turn torque on again by simple typing on. Afterwards match the values for ID2, ID4, ID6 on STP0 match those from STP7 (save your work).  Type play and you you will notice the newly updated values for ID 2, 4, and 6  The values translate into DARWINOP pose as following  Type save if you want this pose to be new sitting pose whenever DARWIN-OP is kneeling (sit down).Dynamixel MonitorYou may be able to reset the MX-28 actuators should you encounter an error in motion, actuator(s) is(are) malfunctioning, or perceive that actuator(s) is(are) malfunctioning.Go to the directory /darwin/Linux/project/dxl_monitorMake sure that there is an executable file named “dxl_monitor”.If there is no said file then create it by typing make the compiler will automatically generate the file.Run the program by typing ./dxl_monitorOnce in the program type help for information.To exit the program type exitAfter inputting help the screen outputs the offered option.  exit: exits the program. After exiting the program press the “RESET” button on DArwIn-OP.  scan: outputs the current status of all Dynamixels.  id [ID]: go to Dynamixel ID:[ID]. The default ID is ID:200 (CM-730 controller). For example, if you wish to go to ID20 (head tilt) then type id 20.Now the current working ID is ID20.  d: displays the current control table of the CM-730 and all Dynamixels. Use this option if there is(are) any anomaly(anomalies) with DARWIN-OP.  reset: defaults the value of current Dynamixel. Use this option if the current actuator has an operating error or is malfunctioning.  reset all: defaults the value of all Dynamixels. Use this option if the current(s) or all Dymanixel(s) has(have) operating error(s) or is(are) malfunctioning.  wr [ADDR] [VALUE]: writes value [VALUE] to address [ADDR] of current Dynamixel. For further information on Dynamixel addresses and values click here. For example, go to ID18 (left ankle roll) and type wr 25 1. This means that address 25 (LED) has been turned on (1). You will notice that the actuator on DARWIN-OP left foot LED is turned on. To turn the LED off type wr 25 0.If all goes well you will see “Success to write!”  on/off: turns torque on/off off current Dynamixel.  on/off all: turns torque on/off of all Dynamixels.To check the currently operating angle resolution perform the following:  Select an eactuator by typeing id (ID number). For example id 3  Type d to display the control table  Look for CW_ANGLE_LIMIT, CCW_ANGLE_LIMIT, and GOAL_POSITON. if all of these values show 1023 or less, then resolution is 1024. if any of these values is between 0 and 4095 then the resolution is 4096. There may be an occasion that a given actuator may display values of 1023 or lower but you may not be sure whether the resolution is either 1024 or 4096. In such case make verifications on several actuators.If all the verified values are 1023 or lower, then the resolution is 1024.If any of the values display larger than 1023 then the resolution is 4096.  ALL Dynamixel actuators installed in DARWIN-OP are set to either 1024 or 4096 resolution. Some actuators being set at 1024 and others at 4096 is not allowed. in such case the demo program will not run.  To ensure all Dynamixel actuators installed in DARWIN-OP are at the same resolution please refer to the firmware installer procedure.This illustration indicates a resolution of 1024.This illustration indicates a resolution of 4096.RoboPlusFor DARWIN-OP support with RoboPlus Motion and Dynamixel’s MX-28 at 4096-resolution you need version 1.0.23.0Warning  RoboPlus Motion currently does not have a 3D model of DARWIN-OP. Please refrain from using the “Pose Utility” tab.  Please refrain from using available Bioloid robots in the “Pose Utility” tab (i.e. Humanoid Type A), as none of these robots have matching kinematics nor dimensions with DARWIN-OP. Doing so it may damage the robot.  Do not save any changes into a motion (.mtn) file [using the save as option]. The .mtn file used for Bioloid robot is incompatible with DARWIN-OP.RoboPlus is a graphical alternative to Action Editor. You may use either program to edit DARWIN-OP’s motion. You may use Roboplus at one point and continue the same work with Action Editor and viceversa. In fact Roboplus Motion can perform the exact same functions of Action Editor.Please refer to the motion file here.You may find RoboPlus-related files at /darwin/Linux/project/roboplusHowever, to properly execute this program DARWIN-OP must be connected to a computer via wired/wireless LAN with RoboPlus 1.0.23.0 or above.Note This section assumes that the actuators installed in DARWIN-OP are set at the resolution of 1024( MX-28 firmware version 26(0x1A) ). RoboPlus currently does not support MX-28 angle resolution of 4096 ( MX-28 firmware version 27(0x1B) or higher ).This option allows you to edit DARWIN-OP’s motion file with RoboPlus Motion.  Mac and Linux versions of RoboPlus are currently unavailable so this option will only work with Windows-based computers.To modify motion data with RoboPlus perform the following:  Go to /darwin/Linux/project/roboplus  Type make to create an executable file if there is no executeble file  Once executable file is complete type ./roboplus (the head LED will change from green to amber)  From your PC start RoboPlus and select RoboPlus Motion  On “Port” select TCP/IP and connect robot  Once connected you may edit motion data.  When finished disconnect DARWIN-OP from RoboPlus (Disconnected followed by Waiting messages will appear at the terminal window).  You may close RoboPlus from your PC and abort the program by holding the “CONTROL” key and pressing the “C” key (once you abort the program the head LED will return to green).The following illustrations will guide you to properly set the parameters for a successful connection with RoboPlus.The illustrations on IP, under the TCP/IP tab, assumes you’ve establiched a connection with DARWIN-OP via wired LAN under default settings.You may save any changes into a motion.bin file. The directory is /darwin/Data/motion_4096.binExample of motion editing with RoboPlusLet’s change DARWIN-OP’s sitting pose further by changing the pose of the left arm. Let’s continue the work from Action Editor. Remember that you may continue any work done with Action Editor with Roboplus and viceversa.Tips Before you begin you may want to make a copy of “motion_4096.bin” file and save it elsewhere. If you don’t like with the changes you’ve made you can always revert back to the original data by overwriting the file.When interfacing with DARWIN-OP wirelessly make sure you:  remember the IP address assigned by DHCP.  have a strong wifi communications signal between your wireless access point/router and DARWIN-OP  have a strong wifi communications signal between your wireless access point/router and your computer.  keep devices that adversely affect communications signal between your access point/router and DARWIN-OP and computer (i.e. operating microwave ovens, active bluetooth devices).  make sure you remember the IP address assigned by DHCP. If you don’t remember type ifconfig.  Run Roboplus from DARWIN-OP2) After running Roboplus from DARWIN-OP run RoboPlus Motion from your PC  In RoboPlus Motion click on “Tool(T)” and select “Option(O)”  If necessary change the IP address to the one assigned by DHCP. Ensure that the port number is 6501  On Port make sure to select TCP/IP as the port. Then click on the connect icon.  Proceed with editing. For more information on RoboPlus Motion click here.  To save changes click on the save icon or go to File(F) =&amp;gt; Save(S). Do not select Save As(A), because the mtn file is not compatible with DARWIN-OP. When saving the changes the file is “motion_4096.bin” (located at /darwin/Data directory).You may continue making changes with Action Editor.Walking TunerWarning Before you change any value(s) it is highly recommended that you become very familiar and proficient with DARWIN-OP. ROBOTIS is not responsible for any damages caused as result of changes in value due to lack or user expertise or user negligence.Walk tuning files can be found at /darwin/Linux/project/walk_tunerYou may modify DARWIN-OP’s pace and other walking related items.Before starting walking pace tuner ensure that DARWIN-OP is in the kneeling position.Tip change value(s) in small increments. Large increments may cause DARWIN-OP to perform unexpectedly.Tip Hold DARWIN-OP via the handle at all times during this program.To tune walking parameters go to the directory /darwin/Linux/project/walk_tuner  Make sure that there is an executable file named “walk_tuner”.  If there is no said file then create it by typing make the compiler will automatically generate the file.  Run the program by typing ./walk_tuner. You will notice DARWIN-OP’s head LED changes from green to amber.  DARWIN-OP will stand up.  Once in the program type help for information.  From there you may follow the options given to you.  To exit the program type exit  You will see a message “Terminate Walking Tuner.” If so program has successfully ended.  Hold DARWIN-OP so you prevent it from falling; press the “RESET” button to release torque from all actuators.The following screen will appear after executing the programEnsure you resize the window so that information displayed on screen is not truncated.Command line-based  This screen is truncated (notice that Y offset (mm) has the OFF option instead of 5). To undo truncation just resize the window and type re to refresh the screen.It is very important to have a proper size window for this program. Any misread in values due to improper window size by the user could result in undesired consequences.  A properly resized window. notice that Y offset(mm) properly display the value of 5, whereas Walking Mode (on/off) displays OFF.Type help to bring the help menu.  exit: exits the program  re: refreshes the screen  save: saves any changes made ( /darwin/Data/config.ini ).  mon: outputs and updates DARWIN-OP’s gyroscope and accelerometer values on screenPressing the space bar will reset the values enclose by ( and )To observe changes in value for the gyroscope and accelerometer push DARWIN-OP gently and slightly forward, backwards, to the left, to the right; grab DARWIN-OP by the carrying handle and shake it very slightly.To end and return to the starting screen press the “ESC” key. The values from the screen are factory-default values. These values are arbitrary. Use the up or down directional keys to scroll up or down.Use the [ to decrease/switch values.Use the ] key to increase/switch values.Hold the shift key and press [ or ] to decrease or increase values by 10x.      Walking mode(on/off): Turns DARWIN-OP walking on and off.        X offset (mm): DARWIN-OP’s offset in the x-direction (front and back).            Y offset (mm): DARWIN-OP’s offset in the y-direction (left and right).            Z offset (mm): DARWIN-OP’s offset in the z-direction (up and down).            Roll(x) offset (degree): DARWIN-OP’s roll offset (x-coordinate).            Pitch(y) offset (degree): DARWIN-OP’s pitch offset (y-coordinate).            Yaw(z) offset (degree): DARWIN-OP’s yaw offset (z-coordinate).            Hip pitch offset (motor): DARWIN-OP’s pitch offset (y-coordinate) at the hip level. Values are for Dynamixel position values for ID11 and ID12.        Auto balance (on/off): Turns DARWIN-OP balancing on and off.      Period time (msec): Time required for DArwIn-Op to complete two full steps (left and right foot)            DSP (Double Stance Period) ratio: time ratio of both feet on ground to one foot (either left or right) on ground.            Step forward/back (mm): Differential distance (x-direction) between DARWIN-OP’s left and right foot during walk.            Step right/left (mm): Differential distance (y-direction) between DARWIN-OP’s left and right foot during walk.            Step Direction (degree): Direction of DARWIN-OP’s stepping (towards left or right). The head also aims at the direction,            Turning aim on/off: DARWIN-OP aims at a point while stepping to the left or right.            Foot height (mm): This is DARWIN-OP’s foot elevation during walk.            Swing right/left (mm): This is DARWIN-OP’s swing to either left or right during walk.            Swing top/down (mm): This is DARWIN-OP’s up and down body swing during walk.            Pelvis offset (motor): DARWIN-OP’s roll offset (x-coordinate) at the pelvis level. Values are for Dynamixel position values for ID9 and ID10.        Arm swing gain: Arm swing gain with respect to Step forward/back. If the left left moves forward then the right arm swings.  Balance knee gain: Gain with respect to the gyroscope pitch.  Balance ankle pitch gain: Gain with respect to the gyroscope pitch  Balance hip roll gain: Gain with respect to the gyroscope roll.      Balance ankle roll gain: Gain with respect to the gyroscope roll.        P gain: Gain with respect to P (proportional) band for the MX28.  I gain: Gain with respect to I (integral) action for the MX28.  D gain: Gain with respect to D (differential) action MX28.For more information on the MX series click here.Web browser-basedOne advantage of web browser-based walk tuner is the ability to tune DARWIN-OP’s walking with a conventional web browser. This option also allows you tune walking from a wifi capable mobile device and away from your desk. Another advantage of web-based browser is that it offers the flexibility to tune walking parameters regardless of device, and operating system. You can tune walking with basically any device with wifi and an internet browser. You may start tuning from one device and continue tuning work with another. You may perform walk tuner via wired or wireless LAN connection. However, with mobile devices you’ll need to be connected wirelessly.Make sure to run Walk TunerAccessing walk tuner from a computer (wired/wireless)  Ensure that Walk Tuner is running  Open your web browser          If you are interfacing with DARWIN-OP via wired LAN then type http://192.168.123.1:8080 on the address bar      If you are interfacing with DARWIN-OP via wifi then type http://IP-address-from-DHCP:8080 on the address bar      Tip If you cannot remember the IP address provided by DHCP then on a new terminal window type ifconfig.When interfacing with DARWIN-OP wirelessly make sure you:  remember the IP address assigned by DHCP.  have a strong wifi communications signal between your wireless access point/router and DARWIN-OP  have a strong wifi communications signal between your wireless access point/router and your computer.  keep devices that adversely affect communications signal between your access point/router and DARWIN-OP and computer (i.e. operating microwave ovens, active bluetooth devices).  For this example, you need to type http://192.168.0.179:8080 on the address bar.  However, there may be times when some or all fields are empty  In any case simply double click on the empty area(s) and the initial value will appear.  Clicking on the &amp;lt; button decreases the value by 1 unit  Clicking on the &amp;gt; button increases the value by 1 unit  Clicking on the &amp;lt;&amp;lt; button decreases the value by 10 units  Clicking on the &amp;gt;&amp;gt; button decreases the value by 10 unitsAccessing Walk Tuner from a mobile device or tablet (via wifi interface)  Ensure that Walk Tuner is running2, Ensure that you know the IP address provided by DHCPHere are some sample screenshots  from an iOS device  from a tablet (QNX)You may also notice the same missing fields as in the computer-based web browser. However, double clicking/double tapping the screen will only magnify/decrease the display. In this case increase a value by 1 unit and decrease it again by 1 unit the browser will display the initial value.Firmware InstallerSoftware version 1.2.0 or higherFirmware installer can be found at /darwin/Linux/project/firmware_installerTo download firmware software into the sub controller or actuator at the directory /darwin/Linux/project/firmware_installer  Make sure that there is an executable file named “firmware_installer”.  Input -h or -help argument for usage.  If there is no said file then create it by typing make the compiler will automatically generate the file.  Ensure that “cm730_0x12.hex” and “mx28_0x1C_4096.hex” are present.  Run the program by typing ./firmware_installer  **  By default the installer will choose cm730_0x12.hex and mx28_0x1C_4096.  To load mx28_0x1A_1024.hex then you must type **./firmware_installer -a mx28_0x1A_1024.hex  Install the CM-730 firmware by selecting the first option.  Press the CM-730’s “RESET” button.  Ensure that download succeed.  To install the firmware for the RX-28M actuators select the second option from firmware_installer.  Press the CM-730’s “RESET” button.  The installer automatically lists connected ID’s and installs the firmware of each ID individually. Afterwards verify success.You may install your own firmware by typing./firmware_installer -c YOUR_CM_FIRMWARE.hex -a YOUR_MX_FIRMWARE.hexthis process assumes that YOUR_CM_FIRMWARE.hex and YOUR_MX_FIRMWARE.hex are located at /darwin/Linux/project/firmware_installer/If your firmware file is located elsewhere then you needs to specify its location by typing:./firmware_installer -c /DIRECTORY/SUBDIRECTORY/.../.../YOUR_CM_FIRMWARE.hex -a /DIRECTORY/SUBDIRECTORY/.../.../YOUR_MX_FIRMWARE.hex.Software version 1.1.0 or lowerFirmware installer can be found at /darwin/Linux/project/firmware_installerTo download firmware software into the sub controller or actuator at the directory /darwin/Linux/project/firmware_installer  Make sure that there is an executable file named “firmware_installer”.  Input -h or -help argument for usage.  If there is no said file then create it by typing make the compiler will automatically generate the file.  Ensure that “cm730_rx28m_4096.hex” and “cm730_rx28m_1024.hex” are present.  Run the program by typing ./firmware_installer **   By default the installer will choose cm730_4096.hex. To load cm730_1024.hex thenyou must type **./firmware_installer -f cm730_1024.hex  Install the CM-730 firmware by selecting the first option. This option also includes installation firmware for the MX-28 actuators. Please note that Dynamixel firmware will only be installed into the controller.  Press the CM-730’s “RESET” button.  The installer will assign 2 blocks of 128KB/each for firmware download. Ensure that both blocks succeed.  To install the firmware for the MX-28 actuators (from controller to actuators) select the second option from firmware_installer. Note that this option installs the firmware that is currently installed on the CM-730 sub controller. This process does not include any actuator firmware installed in the main controller (PC).  Press the CM-730’s “RESET” button.  The installer automatically lists connected ID’s and installs the firmware of each ID individually. Afterwards verify success.You may install your own firmware by typing./firmware_installer -f YOUR_FIRMWARE.hexThis process assumes that YOUR_FIRMWARE.hex is located at /darwin/Linux/project/firmware_installer/If your firmware file is located elsewhere then you needs to specify its location by typing:./firmware_installer -f /DIRECTORY/SUBDIRECTYRY/.../.../YOUR_FIRMWARE.hex.Offset TunerThe purpose of offset tuner is to offset DARWIN-OP’s poses. Changes made in Offset Tuner will affect DARWIN-OP when running other programs (i.e. demo programs). This program is practical to make some changes on DARWIN-OP when performing under certain environmental conditions.WarningBefore you change any value(s) it is highly recommended that you become very familiar and proficient with DARWIN-OP and the MX-28. Remember that changes made with Offset Tuner affects DARWIN-OP’s performance.Some motions may need to be edited as a result of Offset Tuner. Use Action Editor to edit the motions (i.e. when trying to get up after falling).Improper modifications with Offset Tuner may affect DARWIN-OP’s performance adversely.ROBOTIS is not responsible for any damages caused as result of changes in value due to lack of user expertise or user negligence.Offset tuning files can be found at /darwin/Linux/project/offset_tunerBefore starting walking pace tuner ensure that DARWIN-OP is in the kneeling position.To tune walking parameters go to the directory /darwin/Linux/project/offset_tuner  Make sure that there is an executable file named “offset_tuner.”  If there is no said file then create it by typing make the compiler will automatically generate the file.  Run the program by typing ./offset_tuner. You will notice DARWIN-OP’s head LED change from green to amber.  DARWIN-OP will stand up. Please be very cautious as DARWIN-OP can fall while standing up.  Once in the program type help for information.  From there you may follow the options given to you.  To exit the program type exit  You may see a message “are you sure? (y/n)” Press the y key to confirm. Press the n key to cancel. This message will appear if you make changes but have not save such changes.Offset tuner allows you to manipulate the MX-28 position values.For more information about the MX-28, please refer to MX-28 manual.For more information about Actuator ID Map of DARWIN-OP, please refer to ID Map.Ensure that you have a properly sized windowAfterwards the following window appears  GOAL: is the value set for the Dynamixel ID. For more information about Goal refer to dxl_monitor. If you modify this value MODVAL value will modify automatically. For example if you decrease ID 11 by 13 units then MODVAL from ID 11 will automatically decrease its value by 13 units. Changes made here will not be saved.  OFFSET: is the value set for the Dynamixel offset. to change poses edit Offset value(s). This is the difference between MODVAL and GOAL. You may edit this value directly or via MODVAL. Changes made here can be saved  MODVAL: This is the “new” goal position. This is the modified value. You may edit this value directly or via OFFSET. Changes made here can only be saved as OFFSET values  PRSPOS: is current position of the Dynamixel ID. This PRSPOS may change after a screen refresh or running the program at a different time. This is the current position value.  ERRORS: is the difference between PRSPOS and MODVAL.  P_GAIN: is the value set for P (proportional) gain. You can modify the P gain value in this program but cannot save changes.  I_GAIN: is the value set for I (Integral) gain. You can modify the P gain value in this program but cannot save changes.  D_GAIN: is the value set for P (differential) gain. You can modify the P gain value in this program but cannot save changes.type help and the following window appears  exit: exits the program. After exiting the program press the “RESET” button on DARwin-OP.  re: refreshes the screen.  set [value]: sets position value on chosen actuator. You may set the offset on OFFSET of the new value in MODVAL. If change value in MODVAL OFFSET value will automatically change and viceversa. Use the directional arrows to select the value you wish to change.  pgain [value]: sets the P (proportional) parameters on all Dynamixels.  igain [value]: sets the P (integral) parameters on all Dynamixels.  dgain [value]: sets the P (differential) parameters on all Dynamixels.  save: saves any changes you’ve made ( /darwin/Data/config.ini ). The config.ini file only contain changes made in OFFSET (either directly or via MODVAL).  on/off: turns on/off torque from all Dynamixels.  on/off [index1] [index2] [index3] …: turns torque on/off from ID[index1] ID[index2]ID[index3]. For example if you type off 13 16 19 then torque from ID 13, 16, and 19 will be released.  Pressing the [ key will decrease value by 1 unit. Holding the shift key + [ will decrease value by 10 units. Use the directional arrows to select the value you wish to change.  Pressing the ] key will increase value by 1 unit. Holding the shift key + ] will increase value by 10 units. Use the directional arrows to select the value you wish to change.Example with Offset TunerLet’s make some changes of the upper body so that DARWIN-OP appears in a more relaxed pose.The ID’s involved in this change are 1, 2, 5, and 6.Once you run the program you will notice that DARWIN-OP remains in the standing pose.and the following screen provides information on the MX-28 at the current poseThe current pose may not look as relaxed so let’s make some changes in the arm joints.Use the directional keys to move the cursor over to the OFFSET column. Use the [ key to decrease (hold the shift key + [ key to decrease by 10 units at a time). Use the ] key to increase (hold the shift key + ] key to increase by 10 units at a time). Make the appropriate changes for ID’s 1, 2, 5, and 6.You can visually see the changes of pose on DARWIN-OP as you increase/decrease the values.DARWIN-OP;s standing pose is now more relaxed.The following screenshot is information on the MX-28 with the new poseNotice that only OFFSET on ID’s 1, 2, 5, and 6 has been changed. During the changes if you think the errors are too large (like ERRORS of 8 for ID 1 and -8 for ID 2, then adjust the P I D gain values. Please keep in mind that changes in P I D gain values will not be saved.Type save to save changes. to view the saved file go to /darwin/Data and read the “config.ini” file by typing cat config.iniAs you can see only OFFSET values are saved.Since this is an offset tuner program any position data on ID’s 1, 2, 5, and 6 from the motion_4096.bin file will be offset by the amount edited. In other words any other program will be affected by the changes (i.e. the demo program).Notice the arms as DARWIN-OP pursues the ball. Compare this pose with an unedited version of the offset.Another picture showing DARWIN-OP with the new arm pose.Let’s compare 2 DARWIN-OP’s (left DARWIN-OP unchanged, right DARWIN-OP with the edited offset). Both DARWIN-OP running under Interactive Mode of the demo program synchronized.Notice how the changes take effect as soon as the demo program is loaded.Select Interactive Mode on both DARwIn’s and press the Start button simultaneously.Both are about to say “thank you” (notice the arms from each DARwIn). The DARwIn on the right appears more relaxed.The arms and shoulders from DARwIn on the right are affected as a result of Offset Tuner.As both DARwIn’s announce “wow!”",
        "url": " http://localhost:4000/docs/en/platform/op/development/"
      } ,
  
      "docs-en-parts-sensor-dms-80":  {
        "title": "Distance Sensor(DMS-80)",
      "content"	 : "Distance Sensor(DMS-80)Introduction  DMS-80 is used to detect objects or walls within a fixed distance.  The sensor is not affected by color as much as IR Sensors enabling it to measure precise distance.Compatibility Guide Controller CompatibilitySpecifications  Weight : 4.4g  Detecting Distance : 10 ~ 80cm  Recommended Voltage Suppy : 4.5 ~ 5.5VPinout  VCC(5V)  GND  ADC(Outputs the distance sensing value in analog signal)Sensor Output  This is a graph shows the analog output voltage on RoboPlus based on the distance changes from white paper which has a reflection percentage of 90% and gray paper which has a reflection percentage of 18%.  Even if the color and reflection percentage change, you can see the output value for the distance barely changes.Tutorials  RoboPlus Task : Please refer to DMS-80 section in the Roboplus Task.",
        "url": " http://localhost:4000/docs/en/parts/sensor/dms-80/"
      } ,
  
      "docs-en-faq-download-task-code":  {
        "title": "Download Task Code",
      "content"	 : "Download Task CodeCM-5If you want to use RoboPlus program for CM-5 (the controller used for Bioloid Beginner/Comprehensive Kits), you must update the firmware. Please refer to Firmware Update of RoboPlus Manager on how to update firmware.Preparation  Call the task code(*.tsk) from RoboPlus Task.          You can open it by double-clicking the task code file.      You can open it using Open File function of RoboPlus Task.      You can open it by dragging &amp;amp; dropping on RoboPlus Task.        Connect the PC and the Controller with USB2Dynamixel.  Turn on the power of the controller.Download      Connect the controller before downloading the task code.  To download the task code, the controller must be connected to the PC(Please refer to controller information for information on how to connect the controller to the PC).        Select the correct COM port (if you know) or else use the “Automatic Search” function  to easily find out the appropriate port. .  If RoboPlus Task is unable to find a controller, the following error message will be shown.  Check if the controller is connected to the PC. (See controller information on how to connect the controller.)  Check if the controller is turned on.  Check if the correct communication port was chosen.  Select the download menu.If the program has an error, you must find the error and correct it. (See “rule check error messages”)  Download the program.If the downloading fails, it will automatically try again from the beginning.  Execute the task code and your robot will move.  Turn on the controller and execute the downloaded task code(Please refer to each controller information to learn how to execute the task code).CM-100Preparation  Please open a task code file(*.tsk) to download from RoboPlus Task.          You can open it by double-clicking.      You can open it by using an ‘open a file’ function of RoboPlus Task.      You can open it by dragging &amp;amp; dropping  it to  the RoboPlus task with mouse.        Connect the contorller(CM-100) with your PC by using a USB Downloader(LN-101).  Connect 2 double AA batteries then turn the power for the controller (CM-100) on.Download      Connect the controller before downloading the task code. To download the task code, the controller must be connected to the PC. (Please refer to controller information for information on how to connect the controller to the PC.)        Select the correct COM port (if you know) or else use the “Automatic Search” function  to easily find out the appropriate port.        If RoboPlus Task is unable to find a controller, the following error message will be shown.        Check if the controller is connected to the PC.  Check if the controller is turned on.  Check if the correct communication port was chosen.      Select the download menu.        If the program has an error, you must find the error and correct it. (See rule check error messages)        Download the program.        If the downloading fails, it will automatically try again from the beginning.        Execute the task code -&amp;gt; Your robot will move. Turn on the controller and execute the downloaded task code.  VideosDownload RoboPlus Program (for CM-100)Setting Up the Port",
        "url": " http://localhost:4000/docs/en/faq/download_task_code/"
      } ,
  
      "docs-en-edu-dream-dream-a":  {
        "title": "DREAM SET A",
      "content"	 : "DREAM SET AIntroductionROBOTIS DREAM is an entry level robotics kit optimized for learning and teaching robotics.Set A combines the parts from the existing products ROBOTIS DREAM Level 1 and Level 2, and includes a much simpler QuickStart to get robotics education started.  QuickStart includes assembly manual for 4 robot examples.  Assembly manual for all 23 robots available through RoboPlus Design SW.  Full workbook for students available (sold separately).Caution The controller(CM-150) in ROBOTIS DREAM SET A contains a “Comprehensive Program” that can make the robot move without downloading a program. To program or download a program you will need the USB Cable included. If you want to build and program your robots using more parts and peripheral devices, please purchase the ROBOTIS DREAM SET B or necessary parts separately.Part ListQuick StartROBOTIS DREAM SET A comes with a “Comprehensive Program” in the controller that can make the robot move without downloading a program.Caution The comprehensive program in the controller will be overwritten when downloading a program. Therefore, you must download the program using USB Downloader(LN-101).How to Play  If the button on the controller is pressed sequentially, the musical notes are played. Depending on the pressed number, the installed program can be selected.  The default setting for Powersave Timer is 5 minutes when the controller is activated.Select ProgramFor details, please refer to the workbook included in the kit.            Button Press      Workbook      Robot                         Chapter 1. Windmill                    3 (Mi)      Chpater 2. Avoider                    7 (Ti)      Chapter 3. Scorpion                    11 (Fa’)      Chapter 4. Crocodile            Note Download the example program under the ROBOTIS DREAM Level 2 directory using the USB cable included in Level 1. The USB cable can also be purchased separactely.ExamplesFor more information assembly and operation, please refer to the ROBOTIS DREAM SET A workbook. The controller initially comes with the comprehensive program pre-installed in it. To create your own program or download, click here to read more on How to Download Task code. You will need the USB cable to download the programs. This is included in ROBOTIS DREAM SET A.            Robot      TASK Code                  1. Windmill      Not Programmable              2. Avoider      Download              3. Scorpion      Download              4. Crocodile      Download      ",
        "url": " http://localhost:4000/docs/en/edu/dream/dream-a/"
      } ,
  
      "docs-en-edu-dream-dream-b":  {
        "title": "DREAM SET B",
      "content"	 : "DREAM SET BIntroductionROBOTIS DREAM is an entry level robotics kit optimized for learning and teaching robotics.Set B combines the parts from the existing products ROBOTIS DREAM Level 3 and Level 4, and expands on Set A to take robotics education to a higher level.  QuickStart includes assembly manual for 4 robot examples.  Assembly manual for all 24 robots available through RoboPlus Design SW.  Full workbook for students available (sold separately).Caution ROBOTIS DREAM SET B requires parts from ROBOTIS DREAM SET A. Please make sure to purchase SET A  to build the robots in SET B. Users must program the robots or download the program into the controller(CM-150) to operate the robot. To download programs, you will need the USB cable included in SET A.Part ListExamplesFor more information assembly and operation, please refer to the ROBOTIS DREAM SET B workbook. The controller initially comes with the comprehensive program pre-installed in it. To create your own program or download, click here to read more on How to Download Task code. You will need the USB cable to download the programs. This is included in ROBOTIS DREAM SET A.            Robot      TASK Code                  1. Probing Car      Download              2. Electric Guitar      Download              3. Flag Game Robot      Download              4. War Robot      Download      ",
        "url": " http://localhost:4000/docs/en/edu/dream/dream-b/"
      } ,
  
      "docs-kr-edu-dream-dream1-1":  {
        "title": "Dream-LV.1",
      "content"	 : "개요로보티즈 드림 교육키트(로봇 수업용) 1단계로보티즈 드림 교육키트는 초보자가 쉽게 시작할 수 있도록 개발된 최적의 로봇 솔루션입니다.로보티즈 드림 1단계는 로보티즈 드림의 기본 부품사용법 학습부터 시작하여 로봇의 동력과 전기, 무게중심의 이해, 힘의 변환과 전달의 원리, 2족, 4족 보행 로봇의 기본 개념 학습 등 원리와 이론 학습 등 원리와 이론 학습에 중점을 둔 로봇 입문용 키트입니다.로보티즈 드림 교육키트(로봇 수업용)1단계에는 충전을 통해 반영구적으로 사용할 수 있는 리튬이온 전지가 포함되어 있습니다. 제품에 포함되어 있는 USB케이블을 이용하여 충전이 가능하며, 스마트기기 충전기로도 충전할 수 있습니다.보다 다양한 주변장치를 이용하여 로봇을 제작하고, 로봇 프로그래밍을 하기 위해서는 드림 2단계를 구매하시면 됩니다.부품 목록",
        "url": " http://localhost:4000/docs/kr/edu/dream/dream1-1/"
      } ,
  
      "docs-en-edu-dream-dream1-2":  {
        "title": "DREAM Lv 2",
      "content"	 : "DREAM1 Level 2IntroductionROBOTIS DREAM Level 2 teaches you the basics of how a robot moves, which includes the usage of sensors, speed and force, gait, and drive. This level comes with 12 chapters to help you understand the scientific and physical theory using experiments as you build the robots chapter by chapter.Caution ROBOTIS DREAM Level 2 requires parts from ROBOTIS DREAM Level 1. Please make sure to purchase Level 1 first to build the robots in Level 2. The controller(CM-150) in ROBOTIS DREAM level 2 contains a “Comprehensive Program” that can make the robot move without downloading a program. To program or download a program you will need the USB Cable included in the ROBOTIS DREAM Level 1. If you want to build and program your robots using more parts and peripheral devices, please purchase the ROBOTIS DREAM Level 3 or necessary parts separately.Part List  CM-150  Geared MotorQuick StartROBOTIS DREAM level 2 comes with a “Comprehensive Program” in the controller that can make the robot move without downloading a program.Caution The comprehensive program in the controller will be overwritten when downloading a program. Therefore, you must download the program using USB Downloader(LN-101).How to Play  If the button on the controller is pressed sequentially, the musical notes are played. Depending on the pressed number, the installed program can be selected.  The default setting for Powersave Timer is 5 minutes when the controller is activated.Select Program            Button Press      Workbook      Robot                  1 (Do)      Chapter 1. Elephant                    2 (Re)      Chapter 2. Flower &amp;amp; Firefly                    3 (Mi)      Chpater 3. Avoider                    4 (Fa)      Chapter 4. Seal                    5 (Sol)      Chapter 5. Beetle                    6 (Ra)      Chapter 6. Raccoon                    7 (Ti)      Chapter 7. Scorpion                    8 (Do’)      Chapter 8. Puppy                    9 (Re’)      Chapter 9. Squirrel                    10 (Mi’)      Chapter 10. Buffalo                    11 (Fa’)      Chapter 11. Crocodile                    12 (Sol’)      Chapter 12. Imagine            Note Download the example program under the ROBOTIS DREAM Level 2 directory using the USB cable included in Level 1. The USB cable can also be purchased separactely.ExamplesFor more information assembly and operation, please refer to the ROBOTIS DREAM Level 2 workbook. The controller initially comes with the comprehensive program pre-installed in it. To create your own program or download, click here to read more on How to Download Task code. You will need the USB cable to download the programs. This is included in ROBOTIS DREAM Level 1.  Integrated example program          This program is basically included in the main controller when you purchase the goods.      Please refer to the Operating Method to see how to use this program.Download DREAM_L2_Total_EN.tsk        Example program of each chapter            Robot      TASK Code                  1. Elephant      Download              2. Flower &amp;amp; Firefly      Download              3. Avoider      Download              4. Seal      Download              5. Beetle      Download              6. Raccoon      Download              7. Scorpion      Download              8. Puppy      Download              9. Squirrel      Download              10. Buffalo      Download              11. Crocodile      Download              12. Imagine      Download      ",
        "url": " http://localhost:4000/docs/en/edu/dream/dream1-2/"
      } ,
  
      "docs-kr-edu-dream-dream1-2":  {
        "title": "드림1 2단계",
      "content"	 : "개요로보티즈 드림 교육키트(로봇 수업용) 2단계로보티즈 드림 2단계는 로봇이란 무엇인지에 대한 기본 개념부터 로봇의 동력, 센서의 활용, 속도와 힘, 보행과 주행 등 과학적 원리와 물리적 이론에 보다 쉽게 접근하고, 실험을 통해 자연스럽게 개념과 원리를 습득하게 해 줍니다.비슷한 형태의 로봇을 반복적으로 분해 조립하는 단순 학습이 아닌, 로봇을 움직일 수 있게 하는 원리를 이해하고, 학습할 수 있습니다.로보티즈 드림 2단계는 총 12장의 교재와 예제 로봇이 결합되어 프로그래밍의 기본 학습과 센서의 활용, 로봇의 제작, 원리의 이해, 문제 풀이 등의 과정을 제공합니다.  12장에 걸쳐 로봇을 순서대로 만들면서 로봇 제작의 원리를 학습할 수 있습니다.로보티즈 드림 2단계의 통합프로그램은 제어기(CM-150)에 내장되어있으며, 사용자가 직접 프로그램 학습 및 다운로드를 하기 위해서는 로보티즈 드림 1단계에 포함되어 있는 USB 케이블을 이용해서 다운로드 할 수 있습니다.보다 다양한 주변 장치를 이용하여 로봇을 제작 및 프로그래밍 하기 위해서는 로보티즈 드림 3단계를 구매하시면 됩니다.부품 목록작동하기로보티즈 드림 2단계에 포함된 제어기(CM-150)에는 다운로드 없이 사용할 수 있는 통합 프로그램이 내장되어 있습니다.주의 만약, 단 한번이라도 다운로드한 적이 있다면, 통합 프로그램이 지워진 것이므로 USB 케이블을 이용해서 통합 프로그램을 다운로드해야 합니다.작동방법  제어기의 시작버튼을 연속으로 누르면 도,레,미와 같은 음계 소리가 나며 누른 횟수에 따라 내장된 프로그램을 선택할 수 있습니다.  제어기 작동 시 ‘자동꺼짐 타이머’의 기본 설정 값은 5분 입니다. 자동꺼짐타이머 바로가기프로그램 선택방법자세한 내용은 키트에 포함된 교재를 참고 하시기 바랍니다.            시작버튼 누름횟수      교재 내용      로봇 이미지                  1 (도)      1장 예제, 코끼리                    2 (레)      2장 예제, 꽃과 반딧불                    3 (미)      3장 예제, 어보이더                    4 (파)      4장 예제, 물개                    5 (솔)      5장 예제, 장수풍뎅이                    6 (라)      6장 예제, 너구리                    7 (시)      7장 예제, 전갈                    8 (높은 도)      8장 예제, 강아지                    9 (높은 레)      9장 예제, 다람쥐                    10 (높은 미)      10장 예제, 들소                    11 (높은 파)      11장 예제, 악어                    12 (높은 솔)      12장 예제, 상상하세요            참고 USB케이블은 로보티즈 드림 1단계 구성품에 포함되어 있습니다.교안예제각 예제의 조립 방법이나 실행 시 동작에 관한 내용은 로보티즈 드림 2단계 교안을 참고하세요. 기본적으로 프로그램이 내장되어 있습니다. 만일, 프로그램을 직접 만들거나 다운로드 할 경우에 예제 태스크 코드의 다운로드 방법은 [여기]를 참고하세요. 다운로드시 필요한 USB 케이블 은 1단계 구성품에 포함되어 있습니다.2단계 통합 예제 프로그램제품 구입 시 제어기(CM-150)에 기본으로 들어있는 프로그램입니다.통합 프로그램 사용법은 작동하기를 참고하세요.DREAM_L2_Total_KR.tsk            예제 프로그램      로봇 이미지      프로그램                  1장 예제, 코끼리            DREAM_L2_Elephant_KR.tsk              2장 예제, 꽃과 반딧불            DREAM_L2_Fireflylight_KR.tsk              3장 예제, 어보이더            DREAM_L2_Avoider_KR.tsk              4장 예제, 물개            DREAM_L2_Seal_KR.tsk              5장 예제, 장수풍뎅이            DREAM_L2_Abeetle_KR.tsk              6장 예제, 너구리            DREAM_L2_Raccoon_KR.tsk              7장 예제, 전갈            DREAM_L2_Scorpion_KR.tsk              8장 예제, 강아지            DREAM_L2_Puppy_KR.tsk              9장 예제, 다람쥐            DREAM_L2_Squirrel_KR.tsk              10장 예제, 들소            DREAM_L2_Buffalo_KR.tsk              11장 예제, 악어            DREAM_L2_Crocodile_KR.tsk              12장 예제, 상상하세요            DREAM_L2_Distancesensor_KR.tsk      참고자료호환성호환되는 장치CM-150, 감속모터",
        "url": " http://localhost:4000/docs/kr/edu/dream/dream1-2/"
      } ,
  
      "docs-en-edu-dream-dream1-3":  {
        "title": "Dream Lv 3",
      "content"	 : "DREAM1 Level 2IntroductionROBOTIS DREAM Level 3 comes with the controller and teaches you the principles of servo motor control, usage of the touch sensor and IR sensors, and LED modules. This level will help you understand the flow chart to set up your ground work for programming.Operate your robot using the sensors assembled in them or play games to experience how the sensors can be used in various ways.Caution ROBOTIS DREAM Level 3 requires parts from ROBOTIS DREAM Level 1 and 2. Please make sure to purchase Level 1 and 2 to build the robots in Level 3. Users must program the robots or download the program into the controller (CM-150) to operate the robot. To program or download a program you will need the USB Cable included in the ROBOTIS DREAM Level 1. If you want to build and program your robots using more parts and peripheral devices, please purchase the ROBOTIS DREAM Level 4 or necessary parts separately.Part List  Servo Motor  IR Sensor  LED Module  Touch SensorExamplesFor more information assembly and operation, please refer to the ROBOTIS DREAM Level 3 workbook. You must download the examples programs below to operate your robot. To create your own program or download, click here to read more on How to Download Task code. You will need the USB cable to download the programs. This is included in ROBOTIS DREAM Level 1.            Robot      TASK Code                  1. Music Box      Download              2. Cleaning Robot      Download              3. Truck      Download              4. Bumper Car      Download              5. Probing Car      Download              6. Electric Guitar      Download              7. Flag Game Robot      Download              8. Crane      Download              9. Drunken Basket      Download              10. Viking      Download              11. Whac-A-Mole      Download              12. Goblin Robot      Download      ",
        "url": " http://localhost:4000/docs/en/edu/dream/dream1-3/"
      } ,
  
      "docs-en-edu-dream-dream1-4":  {
        "title": "DREAM Lv 4",
      "content"	 : "DREAM1 Level 4IntroductionROBOTIS DREAM Level 4 comes with a remote controller to control the robot in many ways. Now that you have an idea of how the flow chart works and have a basic knowledge of programming, this level allows you to prepare for competitions. Play games using the programs provided for download on our website and keep a record to see how well you do. Experience how the sensors can affect your results.Caution ROBOTIS DREAM Level 4 requires parts from ROBOTIS DREAM Level 1, 2 and 3. Please make sure to purchase Level 1, 2 and 3 to build the robots in Level 4. Users must program the robots or download the program into the controller(CM-150) to operate the robot. To program or download a program you will need the USB Cable included in the ROBOTIS DREAM Level 1.Part List  BT-210  RC-100BExamplesFor more information assembly and operation, please refer to the ROBOTIS DREAM Level 4 workbook. You must download the examples programs below to operate your robot. To create your own program or download, click here to read more on How to Download Task code. You will need the USB cable to download the programs. This is included in ROBOTIS DREAM Level 1.            Robot      TASK Code                  1. Tank      Download              2. Robot Knight      Download              3. War Robot      Download              4. Hockey Robot      Download              5. Excavator      Download              6. Ladder Truck      Download              7. Forklift      Download              8. Boxing Robot      Download              9. Bulldozer      Download              10. Dribbler      Download              11. Explorer      Download              12. Transporter      Download      ",
        "url": " http://localhost:4000/docs/en/edu/dream/dream1-4/"
      } ,
  
      "docs-en-dxl-dx-dx-113":  {
        "title": "DX-113",
      "content"	 : "DX-113Warning DX-113 has been discontinued.Specifications            Item      Specifications                  Baud Rate      7343 bps ~ 1 Mbps              Resolution      0.29°              Running Degree      0° ~ 300°              Weight      58g              Dimensions (W x H x D)      31mm x 46mm x 37mm              Gear Ratio      192.6 : 1              Stall Torque      1.0 N*m (at 12V)              No Load Speed      54rpm (at 12V)              Operating Temperature      -5°C ~ +85°C              Input Voltage      9 ~ 12V (Recommended : 11.1V)              Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multi Drop Bus(Daisy Chain Type Connector)              ID      0 ~ 253              Feedback      Position, Temperature, Load, Input Voltage, etc              Material      Full Metal Gear, Engineering Plastic Body      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 1.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(24) is ‘0’ and Dynamixel is in idle state.SizeThe Size of data is 1 or 2 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. 2 bytes data will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      113              2      1      Firmware Version      Firmware Version      R      -              3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      Counter-Clockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      85              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      190              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On/Off      RW      0              25      1      LED      Status LED On/Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      0              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      0              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW      -              32      2      Moving Speed      Moving Speed      RW      -              34      2      Torque Limit      Torque Limit(Goal Torque)      RW      ADD 14&amp;amp;15              36      2      Present Position      Present Position      R      -              38      2      Present Speed      Present Speed      R      -              40      2      Present Load      Present Load      R      -              42      1      Present Voltage      Present Voltage      R      -              43      1      Present Temperature      Present Temperature      R      -              44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number (0)This address stores model number of the DYNAMIXEL.Firmware Version (2)This address stores firmware version of the DYNAMIXEL.ID (3)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate (4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate(bps)      Margin of Error                  1      1M      0.000%              3      500,000      0.000%              4      400,000      0.000%              7      250,000      0.000%              9      200,000      0.000%              16      115200      -2.124%              34(Default)      57600      0.794%              103      19200      -0.160%              207      9600      -0.160%      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time (5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      CW/CCW Angle Limit(6, 8)The angle limit allows the motion to be restrained.The range and the unit of the value is the same as Goal Position(Address 30, 31).  CW Angle Limit: the minimum value of Goal Position(Address 30, 31)  CCW Angle Limit: the maximum value of Goal Position(Address 30, 31)The following two modes can be set pursuant to the value of CW and CCW.            Operation Type      CW / CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheel-type operation robots since motors of the robots spin infinitely. The joint mode can be used to multi-joints robot since the robots can be controlled with specific angles.Caution DX-113 does not support Wheel Mode.The Highest Limit Temperature            Unit      Value Range                  About 1°      0 ~ 100      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage LimitIt is the operation range of voltage.            Unit      Value Range      Description                  About 0.1V      50 ~ 250      5.0 ~ 25.0V      For example, if the value is 80, the voltage is 8V.If Present Voltage(42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.Max TorqueIt is the torque value of maximum output. 0 to 1,023 (0x3FF) can be used, and the unit is about 0.1%.For example, Data 1,023 (0x3FF) means that Dynamixel will use 100% of the maximum torque it can produce while Data 512 (0x200) means that Dynamixel will use 50% of the maximum torque. When the power is turned on, Torque Limit (Address 34 and 35) uses the value as the initial value.Status Return LevelThis value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Alarm LED / Alarm ShutdownDynamixel can protect itself by detecting errors occur during the operation.The errors can be set are as the table below.            Bit      Item      Description                  Bit 7      0      -              Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’. That is, if 0x05 (binary 00000101) is set, both Input Voltage Error and Overheating Error can be detected.If errors occur, in case of Alarm LED, the LED blinks; in case of Alarm Shutdown, the motor output becomes 0 % by resetting the value of Torque Limit(34) to 0.Torque Enable            Value      Description                  0      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      LEDTurn on or turn off the LED on Dynamixel.            Bit      Description                  0(Default)      Turn OFF the LED              1      Turn ON the LED      Compliance MarginIt exists in each direction of CW/CCW and means the error between goal position and present position.The range of the value is 0~255, and the unit is the same as Goal Position.(Address 30,31)The greater the value, the more difference occurs.Compliance SlopeIt exists in each direction of CW/CCW and sets the level of Torque near the goal position.Compliance Slope is set in 7 steps, the higher the value, the more flexibility is obtained.Data representative value is actually used value.  That is, even if the value is set to 25, 16 is used internally as the representative value.            Step      Data Value      Data Representative Value                  1      0(0x00) ~ 3(0x03)      2(0x02)              2      4(0x04) ~ 7(0x07)      4(0x04)              3      8(0x08)~15(0x0F)      8(0x08)              4      16(0x10)~31(0x1F)      16(0x10)              5      32(0x20)~63(0x3F)      32(0x20)              6      64(0x40)~127(0x7F)      64(0x40)              7      128(0x80)~254(0xFE)      128(0x80)      Compliance is to set the control flexibility of the motor.The following diagram shows the relationship between output torque and position of the motor.Goal PositionIt is a position value of destination.0 ~ 1,023 (0x3FF) is available.  The unit is 0.29°.If Goal Position is out of the range, Angle Limit Error Bit (Bit 1) of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED/Shutdown.The picture above is the front view of DynamixelNote If it is set to Wheel Mode, Goal Position value is not used.Moving SpeedIt is a moving speed to Goal Position.The range and the unit of the value may vary depending on the operation mode.      Join Mode0~1023 (0X3FF) can be used, and the unit is about 0.111rpm.If it is set to 0, it means the maximum rpm of the motor is used without controlling the speed.If it is 1023, it is about 114rpm.For example, if it is set to 300, it is about 33.3 rpm.    Note Please check the maximum rpm of relevant model in Joint Mode.  Even if the motor is set to more than maximum rpm, it cannot generate the torque more than the maximum rpm.  Torque LimitIt is the value of the maximum torque limit.0 ~ 1,023(0x3FF) is available, and the unit is about 0.1%.For example, if the value is 512, it is about 50%; that means only 50% of the maximum torque will be used.If the power is turned on, the value of Max Torque (Address 14, 15) is used as the initial value.Note If the function of Alarm Shutdown is triggered, the motor loses its torque because the value becomes 0. Once error conditions are resolved and this value is changed to the value other than 0, the motor can be operated again.Present PositionIt is the current position value of Dynamixel.The range of the value is 0~1,023 (0x3FF), and the unit is 0.29 degree.The picture above is the front view of Dynamixel.Present SpeedIt is the current moving speed.0~2047 (0X7FF) can be used.If a value is in the rage of 0~1023, it means that the motor rotates to the CCW direction.If a value is in the rage of 1024~2047, it means that the motor rotates to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 0 and 1024 are equal.The unit of this value varies depending on operation mode.  Joint ModeThe unit is about 0.111rpm.For example, if it is set to 300, it means that the motor is moving to the CCW direction at a rate of about 33.3rpm.Present LoadIt means currently applied load.The range of the value is 0~2047, and the unit is about 0.1%.If the value is 0~1,023, it means the load works to the CCW direction.If the value is 1,024~2,047, it means the load works to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 1,024 is equal to 0.For example, the value is 512, it means the load is detected in the direction of CCW about 50% of the maximum torque.            Bit      15 ~ 11      10      9 ~ 0                  Value      0      Load Direction      Data (Load Ratio)      Note CCW Load : Load Direction = 0, CW Load : Load Direction = 1Note Present load is an inferred value based on the internal output value; not a measured value using torque sensor, etc. Therefore, it may be inaccurate for measuring weight or torque. It is recommended to use it for predicting the direction and size of the force being applied to the joint.Present VoltageIt is the size of the present voltage supplied.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)If Present Voltage(42) value is out of range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18.Present TemperatureIt is the internal temperature of Dynamixel in Celsius.Data value is identical to the actual temperature in Celsius. For example, if the data value is 85 (0x55), the current internal temperature is 85°C.Registered Instruction            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Moving            Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock            Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.PunchMinimum current to drive motor. This value ranges from 0x20 to 0x3FF.How to Assemble  OF-116B Option Frame  OF-116H Option Frame  OF-116S Option Frame  Combination Structure of option frames and hornsMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators, the main controller needs to convert its UART signals to the half duplex type. The recommended circuit diagram for this is shown below.TTL CommunicationRS-485 CommunicationThe power of Dynamixel is supplied via Pin1(-), Pin2(+).(The above circuit is built into Dynamixel-only controller.)In the above circuit diagram, the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as follows:In case of DIRECTION485 Level = High: The signal of TxD is output to D+ and D-.In case of DIRECTION485 Level = Low: The signal of D+ and D- is output to RxD.Pin AssignmentThe connector pin assignments are as the following. The two connectors on the Dynamixel are connected pin to pin, thus the Dynamixel can be operated with only one connector attached.",
        "url": " http://localhost:4000/docs/en/dxl/dx/dx-113/"
      } ,
  
      "docs-en-dxl-dx-dx-116":  {
        "title": "DX-116",
      "content"	 : "DX-116Warning DX-116 has been discontinued.Specifications            Item      Specifications                  Baud Rate      7343 bps ~ 1 Mbps              Resolution      0.29°              Running Degree      0° ~ 300°              Weight      66g              Dimensions (W x H x D)      31mm x 46mm x 37mm              Gear Ratio      142.5 : 1              Stall Torque      2.1 N*m (at 12V), 2.9 N*m(at 16V)              Operating Temperature      -5°C ~ +85°C              Input Voltage      12 ~ 16V (Recommended : 14.8V)              Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multi Drop Bus(Daisy Chain Type Connector)              ID      0 ~ 253              Feedback      Position, Temperature, Load, Input Voltage, etc              Material      Full Metal Gear, Engineering Plastic Body      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 1.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(24) is ‘0’ and Dynamixel is in idle state.SizeThe Size of data is 1 or 2 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. 2 bytes data will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      116              2      1      Firmware Version      Firmware Version      R      -              3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      Counter-Clockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      85              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      190              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On/Off      RW      0              25      1      LED      Status LED On/Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      0              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      0              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW      -              32      2      Moving Speed      Moving Speed      RW      -              34      2      Torque Limit      Torque Limit(Goal Torque)      RW      ADD 14&amp;amp;15              36      2      Present Position      Present Position      R      -              38      2      Present Speed      Present Speed      R      -              40      2      Present Load      Present Load      R      -              42      1      Present Voltage      Present Voltage      R      -              43      1      Present Temperature      Present Temperature      R      -              44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number (0)This address stores model number of the DYNAMIXEL.Firmware Version (2)This address stores firmware version of the DYNAMIXEL.ID (3)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate (4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate(bps)      Margin of Error                  1      1M      0.000%              3      500,000      0.000%              4      400,000      0.000%              7      250,000      0.000%              9      200,000      0.000%              16      115200      -2.124%              34(Default)      57600      0.794%              103      19200      -0.160%              207      9600      -0.160%      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time (5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      CW/CCW Angle Limit(6, 8)The angle limit allows the motion to be restrained.The range and the unit of the value is the same as Goal Position(Address 30, 31).  CW Angle Limit: the minimum value of Goal Position(Address 30, 31)  CCW Angle Limit: the maximum value of Goal Position(Address 30, 31)The following two modes can be set pursuant to the value of CW and CCW.            Operation Type      CW / CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheel-type operation robots since motors of the robots spin infinitely. The joint mode can be used to multi-joints robot since the robots can be controlled with specific angles.Caution DX-116 does not support Wheel Mode.The Highest Limit Temperature            Unit      Value Range                  About 1°      0 ~ 100      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage LimitIt is the operation range of voltage.            Unit      Value Range      Description                  About 0.1V      50 ~ 250      5.0 ~ 25.0V      For example, if the value is 80, the voltage is 8V.If Present Voltage(42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.Max TorqueIt is the torque value of maximum output. 0 to 1,023 (0x3FF) can be used, and the unit is about 0.1%.For example, Data 1,023 (0x3FF) means that Dynamixel will use 100% of the maximum torque it can produce while Data 512 (0x200) means that Dynamixel will use 50% of the maximum torque. When the power is turned on, Torque Limit (Address 34 and 35) uses the value as the initial value.Status Return LevelThis value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Alarm LED / Alarm ShutdownDynamixel can protect itself by detecting errors occur during the operation.The errors can be set are as the table below.            Bit      Item      Description                  Bit 7      0      -              Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’. That is, if 0x05 (binary 00000101) is set, both Input Voltage Error and Overheating Error can be detected.If errors occur, in case of Alarm LED, the LED blinks; in case of Alarm Shutdown, the motor output becomes 0 % by resetting the value of Torque Limit(34) to 0.Torque Enable            Value      Description                  0      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      LEDTurn on or turn off the LED on Dynamixel.            Bit      Description                  0(Default)      Turn OFF the LED              1      Turn ON the LED      Compliance MarginIt exists in each direction of CW/CCW and means the error between goal position and present position.The range of the value is 0~255, and the unit is the same as Goal Position.(Address 30,31)The greater the value, the more difference occurs.Compliance SlopeIt exists in each direction of CW/CCW and sets the level of Torque near the goal position.Compliance Slope is set in 7 steps, the higher the value, the more flexibility is obtained.Data representative value is actually used value.  That is, even if the value is set to 25, 16 is used internally as the representative value.            Step      Data Value      Data Representative Value                  1      0(0x00) ~ 3(0x03)      2(0x02)              2      4(0x04) ~ 7(0x07)      4(0x04)              3      8(0x08)~15(0x0F)      8(0x08)              4      16(0x10)~31(0x1F)      16(0x10)              5      32(0x20)~63(0x3F)      32(0x20)              6      64(0x40)~127(0x7F)      64(0x40)              7      128(0x80)~254(0xFE)      128(0x80)      Compliance is to set the control flexibility of the motor.The following diagram shows the relationship between output torque and position of the motor.Goal PositionIt is a position value of destination.0 ~ 1,023 (0x3FF) is available.  The unit is 0.29°.If Goal Position is out of the range, Angle Limit Error Bit (Bit 1) of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED/Shutdown.The picture above is the front view of DynamixelNote If it is set to Wheel Mode, Goal Position value is not used.Moving SpeedIt is a moving speed to Goal Position.The range and the unit of the value may vary depending on the operation mode.      Join Mode0~1023 (0X3FF) can be used, and the unit is about 0.111rpm.If it is set to 0, it means the maximum rpm of the motor is used without controlling the speed.If it is 1023, it is about 114rpm.For example, if it is set to 300, it is about 33.3 rpm.    Note Please check the maximum rpm of relevant model in Joint Mode.  Even if the motor is set to more than maximum rpm, it cannot generate the torque more than the maximum rpm.  Torque LimitIt is the value of the maximum torque limit.0 ~ 1,023(0x3FF) is available, and the unit is about 0.1%.For example, if the value is 512, it is about 50%; that means only 50% of the maximum torque will be used.If the power is turned on, the value of Max Torque (Address 14, 15) is used as the initial value.Note If the function of Alarm Shutdown is triggered, the motor loses its torque because the value becomes 0. Once error conditions are resolved and this value is changed to the value other than 0, the motor can be operated again.Present PositionIt is the current position value of Dynamixel.The range of the value is 0~1,023 (0x3FF), and the unit is 0.29 degree.The picture above is the front view of Dynamixel.Present SpeedIt is the current moving speed.0~2047 (0X7FF) can be used.If a value is in the rage of 0~1023, it means that the motor rotates to the CCW direction.If a value is in the rage of 1024~2047, it means that the motor rotates to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 0 and 1024 are equal.The unit of this value varies depending on operation mode.  Joint ModeThe unit is about 0.111rpm.For example, if it is set to 300, it means that the motor is moving to the CCW direction at a rate of about 33.3rpm.Present LoadIt means currently applied load.The range of the value is 0~2047, and the unit is about 0.1%.If the value is 0~1,023, it means the load works to the CCW direction.If the value is 1,024~2,047, it means the load works to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 1,024 is equal to 0.For example, the value is 512, it means the load is detected in the direction of CCW about 50% of the maximum torque.            Bit      15 ~ 11      10      9 ~ 0                  Value      0      Load Direction      Data (Load Ratio)      Note CCW Load : Load Direction = 0, CW Load : Load Direction = 1Note Present load is an inferred value based on the internal output value; not a measured value using torque sensor, etc. Therefore, it may be inaccurate for measuring weight or torque. It is recommended to use it for predicting the direction and size of the force being applied to the joint.Present VoltageIt is the size of the present voltage supplied.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)If Present Voltage(42) value is out of range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18.Present TemperatureIt is the internal temperature of Dynamixel in Celsius.Data value is identical to the actual temperature in Celsius. For example, if the data value is 85 (0x55), the current internal temperature is 85°C.Registered Instruction            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Moving            Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock            Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.PunchMinimum current to drive motor. This value ranges from 0x20 to 0x3FF.How to Assemble  OF-116B Option Frame  OF-116H Option Frame  OF-116S Option Frame  Combination Structure of option frames and hornsMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators, the main controller needs to convert its UART signals to the half duplex type. The recommended circuit diagram for this is shown below.TTL CommunicationRS-485 CommunicationThe power of Dynamixel is supplied via Pin1(-), Pin2(+).(The above circuit is built into Dynamixel-only controller.)In the above circuit diagram, the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as follows:In case of DIRECTION485 Level = High: The signal of TxD is output to D+ and D-.In case of DIRECTION485 Level = Low: The signal of D+ and D- is output to RxD.Pin AssignmentThe connector pin assignments are as the following. The two connectors on the Dynamixel are connected pin to pin, thus the Dynamixel can be operated with only one connector attached.",
        "url": " http://localhost:4000/docs/en/dxl/dx/dx-116/"
      } ,
  
      "docs-en-dxl-dx-dx-117":  {
        "title": "DX-117",
      "content"	 : "DX-117Warning DX-117 has been discontinued.Specifications            Item      Specifications                  Baud Rate      7343 bps ~ 1 Mbps              Resolution      0.29°              Running Degree      0° ~ 300°              Weight      66g              Dimensions (W x H x D)      31mm x 46mm x 37mm              Gear Ratio      192.6 : 1              Stall Torque      3.7 N*m (at 18.5V, 1.9A)              No Load Speed      85 RPM (at 18.5V)              Operating Temperature      -5°C ~ +80°C              Input Voltage      12 ~ 18.5V (Recommended : 14.8V)              Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multi Drop Bus(Daisy Chain Type Connector)              ID      0 ~ 253              Feedback      Position, Temperature, Load, Input Voltage, etc              Material      Full Metal Gear, Engineering Plastic Body      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 1.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(24) is ‘0’ and Dynamixel is in idle state.SizeThe Size of data is 1 or 2 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. 2 bytes data will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      117              2      1      Firmware Version      Firmware Version      R      -              3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      Counter-Clockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      190              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On/Off      RW      0              25      1      LED      Status LED On/Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      1              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      1              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW      -              32      2      Moving Speed      Moving Speed      RW      -              34      2      Torque Limit      Torque Limit(Goal Torque)      RW      ADD 14&amp;amp;15              36      2      Present Position      Present Position      R      -              38      2      Present Speed      Present Speed      R      -              40      2      Present Load      Present Load      R      -              42      1      Present Voltage      Present Voltage      R      -              43      1      Present Temperature      Present Temperature      R      -              44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number (0)This address stores model number of the DYNAMIXEL.Firmware Version (2)This address stores firmware version of the DYNAMIXEL.ID (3)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate (4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate(bps)      Margin of Error                  1      1M      0.000%              3      500,000      0.000%              4      400,000      0.000%              7      250,000      0.000%              9      200,000      0.000%              16      115200      -2.124%              34(Default)      57600      0.794%              103      19200      -0.160%              207      9600      -0.160%      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time (5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      CW/CCW Angle Limit(6, 8)The angle limit allows the motion to be restrained.The range and the unit of the value is the same as Goal Position(Address 30, 31).  CW Angle Limit: the minimum value of Goal Position(Address 30, 31)  CCW Angle Limit: the maximum value of Goal Position(Address 30, 31)The following two modes can be set pursuant to the value of CW and CCW.            Operation Type      CW / CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheel-type operation robots since motors of the robots spin infinitely. The joint mode can be used to multi-joints robot since the robots can be controlled with specific angles.Caution DX-117 does not support Wheel Mode.The Highest Limit Temperature            Unit      Value Range                  About 1°      0 ~ 100      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage LimitIt is the operation range of voltage.            Unit      Value Range      Description                  About 0.1V      50 ~ 250      5.0 ~ 25.0V      For example, if the value is 80, the voltage is 8V.If Present Voltage(42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.Max TorqueIt is the torque value of maximum output. 0 to 1,023 (0x3FF) can be used, and the unit is about 0.1%.For example, Data 1,023 (0x3FF) means that Dynamixel will use 100% of the maximum torque it can produce while Data 512 (0x200) means that Dynamixel will use 50% of the maximum torque. When the power is turned on, Torque Limit (Address 34 and 35) uses the value as the initial value.Status Return LevelThis value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Alarm LED / Alarm ShutdownDynamixel can protect itself by detecting errors occur during the operation.The errors can be set are as the table below.            Bit      Item      Description                  Bit 7      0      -              Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’. That is, if 0x05 (binary 00000101) is set, both Input Voltage Error and Overheating Error can be detected.If errors occur, in case of Alarm LED, the LED blinks; in case of Alarm Shutdown, the motor output becomes 0 % by resetting the value of Torque Limit(34) to 0.Torque Enable            Value      Description                  0      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      LEDTurn on or turn off the LED on Dynamixel.            Bit      Description                  0(Default)      Turn OFF the LED              1      Turn ON the LED      Compliance MarginIt exists in each direction of CW/CCW and means the error between goal position and present position.The range of the value is 0~255, and the unit is the same as Goal Position.(Address 30,31)The greater the value, the more difference occurs.Compliance SlopeIt exists in each direction of CW/CCW and sets the level of Torque near the goal position.Compliance Slope is set in 7 steps, the higher the value, the more flexibility is obtained.Data representative value is actually used value.  That is, even if the value is set to 25, 16 is used internally as the representative value.            Step      Data Value      Data Representative Value                  1      0(0x00) ~ 3(0x03)      2(0x02)              2      4(0x04) ~ 7(0x07)      4(0x04)              3      8(0x08)~15(0x0F)      8(0x08)              4      16(0x10)~31(0x1F)      16(0x10)              5      32(0x20)~63(0x3F)      32(0x20)              6      64(0x40)~127(0x7F)      64(0x40)              7      128(0x80)~254(0xFE)      128(0x80)      Compliance is to set the control flexibility of the motor.The following diagram shows the relationship between output torque and position of the motor.Goal PositionIt is a position value of destination.0 ~ 1,023 (0x3FF) is available.  The unit is 0.29°.If Goal Position is out of the range, Angle Limit Error Bit (Bit 1) of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED/Shutdown.The picture above is the front view of DynamixelNote If it is set to Wheel Mode, Goal Position value is not used.Moving SpeedIt is a moving speed to Goal Position.The range and the unit of the value may vary depending on the operation mode.      Join Mode0~1023 (0X3FF) can be used, and the unit is about 0.111rpm.If it is set to 0, it means the maximum rpm of the motor is used without controlling the speed.If it is 1023, it is about 114rpm.For example, if it is set to 300, it is about 33.3 rpm.    Note Please check the maximum rpm of relevant model in Joint Mode.  Even if the motor is set to more than maximum rpm, it cannot generate the torque more than the maximum rpm.  Torque LimitIt is the value of the maximum torque limit.0 ~ 1,023(0x3FF) is available, and the unit is about 0.1%.For example, if the value is 512, it is about 50%; that means only 50% of the maximum torque will be used.If the power is turned on, the value of Max Torque (Address 14, 15) is used as the initial value.Note If the function of Alarm Shutdown is triggered, the motor loses its torque because the value becomes 0. Once error conditions are resolved and this value is changed to the value other than 0, the motor can be operated again.Present PositionIt is the current position value of Dynamixel.The range of the value is 0~1,023 (0x3FF), and the unit is 0.29 degree.The picture above is the front view of Dynamixel.Present SpeedIt is the current moving speed.0~2047 (0X7FF) can be used.If a value is in the rage of 0~1023, it means that the motor rotates to the CCW direction.If a value is in the rage of 1024~2047, it means that the motor rotates to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 0 and 1024 are equal.The unit of this value varies depending on operation mode.  Joint ModeThe unit is about 0.111rpm.For example, if it is set to 300, it means that the motor is moving to the CCW direction at a rate of about 33.3rpm.Present LoadIt means currently applied load.The range of the value is 0~2047, and the unit is about 0.1%.If the value is 0~1,023, it means the load works to the CCW direction.If the value is 1,024~2,047, it means the load works to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 1,024 is equal to 0.For example, the value is 512, it means the load is detected in the direction of CCW about 50% of the maximum torque.            Bit      15 ~ 11      10      9 ~ 0                  Value      0      Load Direction      Data (Load Ratio)      Note CCW Load : Load Direction = 0, CW Load : Load Direction = 1Note Present load is an inferred value based on the internal output value; not a measured value using torque sensor, etc. Therefore, it may be inaccurate for measuring weight or torque. It is recommended to use it for predicting the direction and size of the force being applied to the joint.Present VoltageIt is the size of the present voltage supplied.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)If Present Voltage(42) value is out of range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18.Present TemperatureIt is the internal temperature of Dynamixel in Celsius.Data value is identical to the actual temperature in Celsius. For example, if the data value is 85 (0x55), the current internal temperature is 85°C.Registered Instruction            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Moving            Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock            Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.PunchMinimum current to drive motor. This value ranges from 0x20 to 0x3FF.How to Assemble  OF-116B Option Frame  OF-116H Option Frame  OF-116S Option Frame  Combination Structure of option frames and hornsMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators, the main controller needs to convert its UART signals to the half duplex type. The recommended circuit diagram for this is shown below.TTL CommunicationRS-485 CommunicationThe power of Dynamixel is supplied via Pin1(-), Pin2(+).(The above circuit is built into Dynamixel-only controller.)In the above circuit diagram, the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as follows:In case of DIRECTION485 Level = High: The signal of TxD is output to D+ and D-.In case of DIRECTION485 Level = Low: The signal of D+ and D- is output to RxD.Pin AssignmentThe connector pin assignments are as the following. The two connectors on the Dynamixel are connected pin to pin, thus the Dynamixel can be operated with only one connector attached.",
        "url": " http://localhost:4000/docs/en/dxl/dx/dx-117/"
      } ,
  
      "docs-en-software-rplus1-dynamixe-wizard":  {
        "title": "Dynamixel Wizard",
      "content"	 : "IntroductionDynamixel Wizard helps the users manage Dynamixel more easily.The main roles of the program are as follows:  Manage Dynamixel’s firmware.  Check Dynamixel’s status.  Set up the necessary modes.Connecting Dynamixel  Connect Dynamixel to PC through USB2Dynamixel.          Please refer to USB2Dynamixel for how to connect.      The appropriate power cable for Dynamixel must be connected separately.            Select the communication port.        If the relevant port is appeared as “In Use,” then Dynamixel Wizard cannot be used.        Search Dynamixel. The search range can be set, if necessary.            Check the searched Dynamixel in the list on the left.            Start the management. (Please refer to how to manage for each Dynamixel.)      Firmware UpdateFirmware is a program installed in Dynamixel, and it controls Dynamixel.Dynamixel Wizard automatically detects a new firmware through internet and always keeps it updated.How to update Dynamixel Firmware      If Dynamixel is searched, the icon of Dynamixel is checked, and it announces the update is possible as below. Select the relevant Dynamixel, and then click firmware update button.            The firmware update is started with simple messages. Especially, please be careful not to disconnect or turn off the power during the update.            The name of currently connected Dynamixel model and firmware information can be checked.            If “Next” button is clicked, the firmware update is started. Please be careful not to disconnect or turn off the power until the update is completed.            The installation result of Dynamixel firmware is checked.      Firmware RecoveryIf any problems occur in Dynamixel firmware, Dynamixel Wizard can restore the firmware.Caution Every data value will be initialized after the firmware restoration. Please check once again the ID and Baud rate before executing the program if you restored the firmware.Please check the mode on the USB2Dynamixel. 3 pin cables should be set to TTL and 4 pin cables should be set to the RS485 switch.How to Restore Dynamixel Firmware      Execute Dynamixel Firmware Restoration Wizard. Execute Dynamixel Firmware Wizard by clicking firmware restoration button on the tools. When COM port is connected, the corresponding button will be inactivated. Then, please disconnect the port, and start the firmware restoration wizard.            Dynamixel Firmware Restoration Wizard is started with simple messages.            Connect only 1 Dynamixel when Dynamixel firmware is being restored.            Select Dynamixel Connection Port Dynamixel cannot be searched automatically because the firmware is not recognized. Therefore, the users must set the Dynamixel connected port manually.  Since Dynamixel cannot be recognized if the port is in use, finish other programs, and then continue the procedure. Select USB2Dynamixel-connected port and press “Search” button.            Turn off the power of Dynamixel and then turn it back on. Turn off the power of Dynamixel for restoration and then turn it on again to detect Dynamixel.            If Dynamixel search is succeeded, you can see the window as below.            Select Dynamixel Firmware If Dynamixel is found, the information of downloadable firmware is appeared.  The users must select the correct model because the model name cannot be recognized automatically in Dynamixel firmware restoration mode. If an incorrect model is chosen, it is not operated normally.            Restore Firmware Click “Next” button to start firmware restoration.  Please be careful not to disconnect or turn off the power until it is completed.            Check Dynamixel Firmware Restoration Result.      Test and SetupManagement WindowThe window for Dynamixel test and set up is as below.If the search is complete,  the searched Dynamixel is appeared on the left of the list.When the correct Dynamixel is selected from the list to test/setup as below, a appropriate management window is displayed on the right.The window helps the users manage Dynamixel more easily.  Please refer to Dynamixel manual for more information regarding each function.MX Series CalibrationIf during gear replacement the horn’s position becomes misaligned position can be realigned with calibration.Attention This feature is only available in the MX series.MX Series Calibration Procedure      Connect hardware Connect the MX hardware to USB2Dynamixel. Select the switch to either TTL or RS485. Use a separate power supply for the calibration adapter.            Run Dynamixel Wizard and click on the calibration icon. Click on the calibration icon before selecting the COM port            Begin Dynamixel calibration            Connect only one Dynamixel at a time.            Select Dynamixel connection port. If the firmware does not allow connection then automatic connection is not possible. In such case select the port manually and connect. If Dynamixel cannot be detected by the port due use by another program then close that other program and start again. Select the port and click on the search icon.            Dynamixel power on/off Turn power off and on for search. A message will pop for successful search.            Select connected Dynamixel                Install Dynamixel calibration firmware.            Select first position.            Select second position            Select third position            Select fourth position            Calibration complete      Videos",
        "url": " http://localhost:4000/docs/en/software/rplus1/dynamixe_wizard/"
      } ,
  
      "docs-en-software-sdk-embedded-c-cm510":  {
        "title": "Embedded C(CM-510/700)",
      "content"	 : "IntroductionIt makes the users possible to develop their own firmware. The characteristics are as follows:  All the sources are written in C Language.  The examples of how to control each part of the controller directly are provided.Note If you want to use Embedded C, you need the knowledge of software and hardware. If you are a beginner, we recommend you use Embedded C after learing the software and the hardware.Note If you use Embedded C, you cannot use RoboPlus since the controller’s firmware is changed. If you want to use RoboPlus again, you must restore the firmware using RoboPlus.CM-510/700  Download CM-510 SDK  Download CM-700 SDKFile Structure  ../include : Necessary header files when using library  ../src : Library sources  ../lib : Library files  ../example : Examples which can be executed in the controllerGetting StartedInstall WinAVRWinAVR is necessary for AVR programming.WinAVR can be downloaded from the following website, and it is free-of-charge.http://winavr.sourceforge.net/The installation process is as below.      Select a language.            The initial window is as below.            The window below is about the license agreement. You must agree to continue the installation.            Select a folder for the installation, and then click “Next” button.            Select programs and environment options.  If there are no specific reasons, it is recommended to install all in the list.            Start WinAVR installation.            WinAVR installation is completed.      Install Atmel StudioAtmel Studio provides users various Macro, Library, and comprehensive environment for easy programming.Atmel Studio can be downloaded from the website below, and it is free-of-charge.http://www.atmel.com/dyn/products/tools_card.asp?tool_id=2725The installation procedure is as follows.      The initial window is as below.            The window below is about license agreement.  You must agree to continue the installation.            Select a folder for the installation, and then click “Next” button.            Click “Next” to continue the installation.            Start Atmel Studio installation.            Atmel Studio installation is completed.      Environment SettingIf you want to use Embedded C, you must select the basic environment of the installed program.  If Atmel Studio is installed after WinAVR, if it is not an exceptional case, you can do programming using Atmel Studio only.  To run the examples Dynamixel(s) or other external devices maybe required in addition to the controller connected to the PC via serial cable.      Click on Debug - Options and Settings.            With the left mouse click select Toolchain. Selcts Atmel AVR 8-bit (C language). Click on Add Flavour.            Click on […] and select version’s 20100110 bin folder. Ex) c:WinAVR-20100110bin            Select Win AVR then click on the OK button.            Click on File - Open - Project/Solution.            Select the example file then open it.            Click to select the c file located to the right of Solution Explorer. Click on Project -&amp;gt; Properties. If Solution Explorer cannot be seen then select Solution Explorer from View.            From the left hand menu click on Toolchain. Click on Directories. Click on the green + to add item.            This will select the Include. Ex) c:embedded_c(cm700_v1.01)include            Its possible to verify in the include folder has been added.            On Solution Explorer, from the right, click on the project file and click on Add Library.            Click on Browse Libraries. Click on [Browse] on the lower right side.            To select the library select and open the lib folder.            To add the 3 libraries select all and lick on [open] from the lower right.            its possible to verify that all 3 libraries have been added.            To compile click on Build -&amp;gt; Rebuild Solution and check for Build succeeded on the output window Build Succeeded.      Restore RoboPlusThe result made by Embedded C is a controller firmware (hex file).  If you install it, you cannot use RoboPlus since the existing controller firmware is erased.  If you want to use RoboPlus again, you must install the original controller firmware built-in from the factory.  You can install the original controller firmware easily using RoboPlus Manager.For more information, please refer to Firmware Restoration of RoboPlus Manager.ProgrammingHardware Port MapThe following hardware port map shows the hardware main pin functions of the controller.Each port or internal functions can be controlled easily with macro function provided by Atmel Studio.CM-510            Port Name      Function                  PORTF1 ~ PORTF6      ADC              PORTD0      Start Button              PORTD1 ~ PORTD2      Tx, Rx              PORTA2 ~ PORTA7      External Output ( 5 Pin Port)              PORTC0 ~ PORTC6      Controller LED ( Status, Power )              PORTB5  Buzzer      Control Port              PORTE4 ~ PORTE6      Direction Button (U, D, L, R)              PORTD4 ~ PORTD6      Communication Control Port      The external port pin composition of CM-510 is as below.  You can check port 1 ~ port 6 by the scale marks on the external port.For more information, please refer to CM-510.  As shown below, among 5 pins, No.3 ADC Pin is facing PORTF1 ~ PORTF6 of Micro Controller.For example, ADC pin facing external port 3 as below is connected to PORTF3 of Micro Controller.  As shown below, among 5 pins, No.1 OUT Pin is facing PORTA2 ~ PORTA7 of Micro Controller.For example, OUT pin facing external port 3 as below is connected to PORTA4 of Micro Controller.  OUT : 5V Output Available  VCC (5V)  ADC : Analogue signals of sensors made by users can be read.  GND  NC : Not usedCM-700            Port Name      Function                  PORTF1 ~ PORTF6      ADC              PORTD0      Start Button              PORTD2 ~ PORTD3      Tx, Rx              PORTA2 ~ PORTA7      External Output ( 5 Pin Port)              PORTC0 ~ PORTC6      Controller LED ( Status, Power )      The external port pin composition of CM-700 is as below.  You can check port 1 ~ port 6 by the letters written on the bottom of Sub-board.For more information, please refer to CM-700.  As shown below, among 5 pins, No.3 ADC Pin is facing PORTF1 ~ PORTF6 of Micro Controller.  As shown below, among 5 pins, No.1 OUT Pin is facing PORTA2 ~ PORTA7of Micro Controller.  OUT : 5V Output Available  VCC (5V)  ADC : Analogue signals of sensors made by users can be read.  GND  NC : Not usedBasic ProgrammingIt explains how to make simple Embedded C examples on Atmel Studio.Creating ProjectThe procedure of creating project is as below.      From the File menu select New -&amp;gt; Project.            Select GCC C Executable Project Name for template, This sets the items Location, Solution name. After setup click on [OK].            From the multiple devices list select ATmega2561 (ATmega128 for CM5). Click on [OK].      Creating Code and ComplingThe following example is about the basic PORT I/O Control.      The following is code from the generated project.     #define F_CPU 16000000L #include &amp;lt;avr/io.h&amp;gt; #include &amp;lt;util/delay.h&amp;gt; int main(void) {   DDRC  = 0x7F;   PORTC = 0x7E;   while (1)   {     int i;     for(i = 0; i &amp;lt;= 6; i++)     {       PORTC = ~(1 &amp;lt;&amp;lt; i);       _delay_ms(250);     }   }   return 1; }            From the Build menu click on [Build Solution] to run the build command.            When build succeeded message appears on the output window then compiling is complete. The firmware’s hex file can be found in the default folder from the project’s folder.      Downloading hex file  To install the firmware on the controller, you must use RoboPlus Terminal and Boot Loader.  For more information on the installation and the execution of firmware, please refer to Installing/Executing Program.  If the firmware is installed normally, you can see all LEDs are turned on.Boot LoaderBoot Loader makes the users possible to use the controller.  Boot Loader cannot be erased by the users.  If it is broken down, the controller cannot be used. Boot Loader is built-in on the controller when it is manufactured in the factory.The available commands in Boot Loader can be found using “Help” command.Install/Execute ProgramPreparations for installing a firmware of the controller are as follows:  Prepare a firmware (hex file) of the controller to be installed.  Connect PC and the controller.  Set the communication port by executing RoboPlus Terminal.  Execute Boot Loader of the controller. (Please refer to how to enter Boot Loader.)A firmware of the controller can be installed according to the procedure below.      Input “L” command (or Load) in Boot Loader.            Select “Transmit File” in the Files menu of RoboPlus Terminal, and then select the prepared firmware. (hex file)            The file is transmitted. Please do not let the power of the controller turn off, and be careful the cable does not take off while the file is being transmitted.        When the file transmission is completed, you can execute the program using GO command.          In case of inputting only “GO” command, the program is executed from 0 address.      Like G [Address], if you input execution address (hexadecimal) after “G” command, the program is executed from the location.      Entering/Exiting Boot LoaderEntering Boot LoaderTo enter into the boot loader, while pressing the  ‘#’ button(Shift + 3), turn on the controller or press down the reset switch.  If you did correctly, following screen page will be shown.Exiting Boot LoaderIf the work is completed, you may exit by jumping to the desired address using “GO” command or by resetting the controller.How to Use APP/SYSThe program start position can be set by APP/SYS command.  Once the program start position is set, the program is executed on the program start position when the power is turned on or reset.The memory map using Atmega2561 is as below.      If you input APP command on the window after entering Boot Loader, User Application Area is executed first after the next reset.(Most programs such as provided firmware, user program etc. start from 0 address, if there are no specific reasons.)        If you input SYS command on the window after entering Boot Loader, Boot Loader is executed after the next reset.(It is started as Boot Loader status, even if you do not press “#.”)  ExamplesLED ControlEach LED of the controller can be controlled.  Prepare          CM-510 or 700        Theory          The micro controller can control the peripheral devices such as LED connected to the controller through I/O Port.  You can control LEDs on the controller using this example.      PORTC is used in this example.  Please refer to Controller Port Map.            Source      PORTC = ~(1 &amp;lt;&amp;lt; i);  _delay_ms(250);              Turn on the LEDs in order by controlling PORTC.        Result          All LEDs will be turned on in order.      ButtonInput of the button can be received.  Prepare          CM-510 or 700        Theory          Electronic signals of the devices connected to the controller can be read through I/O Port of the micro controller.  You can see the status of pressed built-in switches through this example.      PORTC and PORTE are used in this example.  Please refer to Controller Port Map.        Source                  The Example of CM-510          if(~PINE &amp;amp; BTN_UP)  PORTC &amp;amp;= ~LED_MANAGE;  else if(~PINE &amp;amp; BTN_DOWN)  PORTC &amp;amp;= ~LED_AUX;  else if(~PINE &amp;amp; BTN_LEFT)  PORTC &amp;amp;= ~LED_PROGRAM;  else if(~PINE &amp;amp; BTN_RIGHT)  PORTC &amp;amp;= ~LED_PLAY;  else if(~PIND &amp;amp; BTN_START)  PORTC = ~(LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM|LED_PLAY);  else PORTC = LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM|LED_PLAY;                You can see the pressed buttons through PORTD and PORTE, and LEDs can be turned on and off by controlling PORTC depending on the pressed buttons.  You can use macro function PIND and PINE to get input value through PORTD and PORTE.  PIND and PINE are 1 byte, and the pins of PORTD and PORTE are facing each bit.  Therefore, you can read the value of the certain pin through “&amp;amp;” operation etc.                    The Example of CM-700          if(~PIND &amp;amp; BTN_START)  PORTC = ~(LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM|LED_PLAY);  else PORTC = LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM|LED_PLAY;                You can see the pressed buttons through PORTD, and LEDs can be turned on and off by controlling PORTC depending on the pressed buttons.  You can use macro fuction PIND to get the input value through PORTD.  PIND is 1 byte, and the pins of PORTD are facing each bit.  Therefore, you can read the value of the certain pin through “&amp;amp;” operation etc.              Result          If you press buttons, depending on pressed buttons, different LEDs are turned on.      Serial CommunicationPC and the controller can perform serial communication.  Prepare          Serial cable for PC.      The communication speed of the example is set to 57,600bps.        Theory          Serial communication is the basic method to show the value of the controller to users by transmitting to PC.  You can try serial communication with the controller through this example.            Source      serial_initialize(57600); // USART Initialize  sei(); // set enable interrupt        This part is for initialization to use serial communication.  The serial initialization function is included in serial library, and it is initialized if communication speed is transmitted by data.  In case of sei(), it is an internal command makes users possible to use “Interrupt.”          unsigned char ReceivedData = getchar();  if(ReceivedData == &#39;u&#39;)  Value++;  else if(ReceivedData == &#39;d&#39;)  Value--;  printf(&quot;%drn&quot;, Value);        This part is for printing results by adding 1 if the received data is u, while by subtracting 1 if it is d.  The data is received using getchar() function; if the data is not received, it will wait.    Result                  If you input “u”, the result is printed out by adding 1 to currently memorized number, while if you input “d”, it is printed out by subtracting 1.                    BuzzerBuzzer on the controller can be used.  Prepare          CM-510 (CM-700 has no buzzer.)        Theory          Signals of the buzzer circuit can be controlled through I/O Port of the micro controller.  The buzzer can play different musical notes by adjusting signal frequency.      PORTB, PORTC and PORTD are used in this example.  Please refer to Controller Port Map.      The relationship between musical scale and frequency is as below.              Time is a reciprocal number of frequency.  The conversion formula is as below.        Time(Sec) =  1 / (Frequency)                        Octave/Scale      1      2      3      4      5      6      7      8                  C      32.7032      65.4064      130.8128      261.6256      523.2511      1046.502      2093.005      4186.009              C#      34.6478      69.2957      138.5913      277.1826      554.3653      1108.731      2217.461      4434.922              D      36.7081      73.4162      146.8324      293.6648      587.3295      1174.659      2349.318      4698.636              D#      38.8909      77.7817      155.5635      311.1270      622.2540      1244.508      2489.016      4978.032              E      41.2034      82.4069      164.8138      329.6276      659.2551      1318.510      2637.020      5274.041              F      43.6535      87.3071      174.6141      349.2282      698.4565      1396.913      2793.826      5587.652              F#      46.2493      92.4986      184.9972      369.9944      739.9888      1479.978      2959.955      5919.911              G      48.9994      97.9989      195.9977      391.9954      783.9909      1567.982      3135.963      6271.927              G#      51.9130      103.8262      207.6523      415.3047      830.6094      1661.219      3322.438      6644.875              A      55.0000      110.0000      220.0000      440.0000      880.0000      1760.000      3520.000      7040.000              A#      58.2705      116.5409      233.0819      466.1638      932.3275      1864.655      3729.310      7458.620              G      61.7354      123.4708      246.9417      493.8833      987.7666      1975.533      3951.066      7902.133        Unit : Hz  Source                  This is an example for CM-510.  This is not applicable for CM-700 because it has no buzzers.        if(~PIND &amp;amp; SW_START){  PORTC = ~(LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM|LED_PLAY);  _delay_ms(1);  PORTB |= 0x20;  _delay_ms(1);  PORTB &amp;amp;= ~0x20;}else{  PORTC = LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM|LED_PLAY;  PORTB &amp;amp;= ~0x20;}                Pressed buttons are checked by PORTD, LEDs and Buzzers can be turned on and off by controlling PORTB and PORTC pursuant to pressed buttons.You can use macro function PIND to get the input value through PORTD.PIND is 1 byte, and the pins of PORTD are facing each bit.Therefore, you can read the value of the certain pin through “&amp;amp;” operation etc.If “Start” button is pressed, the buzzer makes sounds through PORTB as soon as all LEDs are turned on.              Result          All LEDs are turned on, and the buzzer makes sounds of same musical notes continuously while “Start” button is being pressed.      MICExternal sounds can be detected through MIC.  Prepare          CM-510 (CM-700 has no mic.)        Theory          If more than a certain level of sounds is detected on the MIC circuit, signals are made to I/O Port of the micro controller.  External sounds can be detected by sensing the signals.      PORTC and PORTD are used in the example.  Please refer to Controller Port Map.        Source                  This is an example for CM-510.  This is not applicable for CM-700 because it has no buzzers.        if(~PIND &amp;amp; MIC_SIGNAL){  PORTC = ~(LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM|LED_PLAY);  _delay_ms(1000);}else PORTC = LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM|LED_PLAY;                Pressed buttons are checked by PORTD, LEDs can be turned on or off by controlling PORTC pursuant to pressed buttons.You can use macro function PIND to get the input value through PORTD.PIND is 1 byte, and the pins of PORTD are facing each bit.Therefore, you can read the value of the certain pin through “&amp;amp;” operation etc.If the MIC signals are detected through PORTD, turn on all LEDs and wait for a second.              Result          When the MIC signals are detected, all LEDs are turned on and off for a second.      IR SensorHere you can learn how t o use the ADC of external ports. (This example is using the IR sensor for explanation. )  Prepare          CM-510 or 700      IR Sensor (Connected to the external sensor No.1)        Theory          Analog signals can be changed into digital values through the micro controller.  Through this example, the analog voltage values of external IR Sensor, Gyro Sensor etc. can be read.      PORTA is used in the example.  Please refer to Controller Port Map.            Source    serial_initialize(57600);sei();ADCSRA = (1 &amp;lt;&amp;lt; ADEN) | (1 &amp;lt;&amp;lt; ADPS2) | (1 &amp;lt;&amp;lt; ADPS1); // ADC Enable, Clock 1/64div.ADMUX = ADC_PORT_1; // ADC Port 1 Select        This part is for initialization to use serial communication.  The serial initialization function is included in serial library, and the serial port is initialized if communication speed is transmitted by data.In the case of sei(), it is an internal command makes users possible to use “Interrupt.”Besides that, there is a register setting for ADC control.  For the control, please refer to the datasheet of Atmega2561.The datasheet can be downloaded at http://www.atmel.com.        PORTA &amp;amp;= ~0x80; // ADC Port 1 IR ON   _delay_us(12); // Short Delay for rising sensor signalADCSRA |= (1 &amp;lt;&amp;lt; ADIF); // AD-Conversion Interrupt Flag ClearADCSRA |= (1 &amp;lt;&amp;lt; ADSC); // AD-Conversion Start   while( !(ADCSRA &amp;amp; (1 &amp;lt;&amp;lt; ADIF)) ); // Wait until AD-Conversion complete   PORTA = 0xFC; // IR-LED Off   printf( &quot;%drn&quot;, ADC); // Print Value on USART_delay_ms(50);        This part is for analyzing and transmitting the analog signals detected through PORTA.First of all, turn on the IR LED 1 of PORTA, and then start converting the amount of received light into digital values.When the conversion is complete, turn off the IR LED, and then transmit the values through serial communication.    Result          When it is connected to PC in serial, IR sensor values are printed on the screen.      Read/Write DynamixelThe location of Dynamixel can be set and read.  Prepare          The controller and Dynamixel are connected.      This example is operated if the Dynamixel ID is 1.        Theory          Dynamixel can be controlled by transmitting designated packet.  The location of Dynamixel can be controlled using provided library.            Source    unsigned short GoalPos[2] = {0, 1023};//unsigned short wGoalPos[2] = {0, 4095}; // for EX series        Like EX 106+, if an actuator belongs to the location range between 0 and 4095, notes are applied to the upper line but not applied to the lower line.    serial_initialize(57600);dxl_initialize( 0, DEFAULT_BAUDNUM ); // Not using device indexsei(); // Interrupt Enable        This part is for initialization to use serial communication.  The serial initialization function is included in serial library, and the serial port is initialized if communication speed is transmitted by data.In the case of sei(), it is an internal command makes users possible to use “Interrupt.”In the case of dxl_initialize() function, communication environemnt of the controller is initialized if device index and communication speed are transmitted by data.DEFAULT_BAUDNUM is 1.If there are no specific reasons, device index is 0.    // Check moving donebMoving = dxl_read_byte( id, P_MOVING );CommStatus = dxl_get_result();if( CommStatus == COMM_RXSUCCESS ){  if( bMoving == 0 )  {    // Change goal position    if( index == 0 )    index = 1;    else    index = 0;    // Write goal position    dxl_write_word( id, P_GOAL_POSITION_L, GoalPos[index] );  }  PrintErrorCode();     // Read present position  wPresentPos = dxl_read_word( id, P_PRESENT_POSITION_L );  printf( &quot;%d   %dn&quot;,GoalPos[index], wPresentPos );}else  PrintCommStatus(CommStatus);        This part describes that Dynamixel is sent to certain location, and the current location is read at the same time.First of all, if the current movement status has been read, and the motor is not moving, the movement command to the designated location can be carried on by dxl_write_word() function.The data of dxl_write_word() function are respectively (the ID, address, and position values of connected Dynamixel).Later, the current location is read and transmitted by serial communication.    Result          Dynamixel is moved back and forth in the disgnated location, and the current location is printed through terminal.      Dynamixel Sync ControlMultiple Dynamixels can be controlled by synchronization.  Prepare          The controller and Dynamixel are connected.      This example is operated when the Dynamixel ID is designated from 1 to 3 in order.        Theory          Dynamixel can be controlled by transmitting designated packet.  The location of Dynamixel can be controlled using provided library.            Source    int AmpPos = 512;//int AmpPos = 2048; // for EX series        Like EX 106+, if an actuator belongs to the location range between 0 and 4095, notes are applied to the upper line but not applied to the lower line.    serial_initialize(57600);dxl_initialize( 0, DEFAULT_BAUDNUM ); // Not using device indexsei(); // Interrupt Enable        This part is for initialization to use serial communication.  The serial initialization function is included in serial library, and the serial port is initialized if communication speed is transmitted by data.In the case of sei(), it is an internal command makes users possible to use “Interrupt.”In the case of dxl_initialize() function, communication environment of the controller is initialized if device index and communication speed are transmitted by data.DEFAULT_BAUDNUM is 1.If there are no specific reasons, device index is 0.    for( i=0; i&amp;lt;NUM_ACTUATOR; i++ ){  id[i] = i+1;  phase[i] = 2*PI * (float)i / (float)NUM_ACTUATOR;}// Set goal speeddxl_write_word( BROADCAST_ID, P_GOAL_SPEED_L, 0 );// Set goal positiondxl_write_word( BROADCAST_ID, P_GOAL_POSITION_L, AmpPos );_delay_ms(1000);        This part is for calculation of the initial location and initialization of the location of each Dynamixel.The speed of all Dynamixels is set to the maximum level, and the location is set to the center using dxl_write_word() function.    // Make syncwrite packetdxl_set_txpacket_id(BROADCAST_ID);dxl_set_txpacket_instruction(INST_SYNC_WRITE);dxl_set_txpacket_parameter(0, P_GOAL_POSITION_L);dxl_set_txpacket_parameter(1, 2);for( i=0; i&amp;lt;NUM_ACTUATOR; i++ ){  dxl_set_txpacket_parameter(2+3*i, id[i]);  GoalPos = (int)((sin(theta+phase[i]) + 1.0) * (float)AmpPos);  printf( &quot;%d  &quot;, GoalPos );  dxl_set_txpacket_parameter(2+3*i+1, dxl_get_lowbyte(GoalPos));  dxl_set_txpacket_parameter(2+3*i+2, dxl_get_highbyte(GoalPos));}dxl_set_txpacket_length((2+1)*NUM_ACTUATOR+4);This part is for packet creation.  Please refer to Dynamixel Packet Structure.All connected actuator packets are created and transmitted.   printf( &quot;n&quot; );   dxl_txrx_packet();CommStatus = dxl_get_result();if( CommStatus == COMM_RXSUCCESS )PrintErrorCode();elsePrintCommStatus(CommStatus);   theta += STEP_THETA;if( theta &amp;gt; 2*PI )theta -= 2*PI;_delay_ms(CONTROL_PERIOD);        After receiving result packets, if there are errors, the error codes are printed.If a value exceeds the calculated location boundary value, the increase/decrease direction is changed to the opposite.    Result          Multiple Dynamixels are moved back and forth in the designated location, and the current location is printed through terminal.      RC-100/ZIGBEEThe controller can be operated using RC-100.  Prepare          CM-510 or 700      One pair of Zig-100/110      RC-100        Theory          The controller can be controlled by RC100 remote controller equipped with Zig 100.      PORTC and PORTD are used in this example.  Please refer to Controller Port Map.            Source    PORTD &amp;amp;= ~0x80; //PORT_LINK_PLUGIN = 0;   // no pull upPORTD &amp;amp;= ~0x20; //PORT_ENABLE_RXD_LINK_PC = 0;PORTD |= 0x40; //PORT_ENABLE_RXD_LINK_ZIGBEE = 1;zgb_initialize( 0 ); // Not using device indexsei(); // Interrupt Enable            Set the environment to use  ZigBee.  The environment of PORTD must be set as below.    PORTD &amp;amp;= ~0x80; //PORT_LINK_PLUGIN = 0;   // no pull upPORTD &amp;amp;= ~0x20; //PORT_ENABLE_RXD_LINK_PC = 0;PORTD |= 0x40; //PORT_ENABLE_RXD_LINK_ZIGBEE = 1;        This part is for initialization to use ZigBee communication. The initialization function is included in Zigbee library, and the Zigbee is initialized if device index is transmitted by data.If there are no specific cases, device index is 0.In the case of sei(), it is an internal command makes users possible to use “Interrupt.”    if(zgb_rx_check() == 1){  RcvData = zgb_rx_data();  if(RcvData &amp;amp; RC100_BTN_1)    PORTC &amp;amp;= ~LED_MANAGE;  else    PORTC |= LED_MANAGE;  if(RcvData &amp;amp; RC100_BTN_2)    PORTC &amp;amp;= ~LED_PROGRAM;  else    PORTC |= LED_PROGRAM;  if(RcvData &amp;amp; RC100_BTN_3)    PORTC &amp;amp;= ~LED_PLAY;  else    PORTC |= LED_PLAY;}        The received data by Zigbee Module can be read using zgb_rx_data() function.If the received packet is RC-100 button, LEDs are turned on or off by controlling PORTC pursuant to pressed buttons of RC-100.    Caution Due to the UART sharing, there  happen a system collision when you use the zigBee and serial communication library at the same source. If you want to use both of them at once, you must modify the source properly in advance.    Result          If Zigbee is connected normally, LEDs are turned on and off whenever the buttons of RC-100 is pressed.      ",
        "url": " http://localhost:4000/docs/en/software/sdk/embedded_c_cm510/"
      } ,
  
      "docs-en-software-sdk-embedded-c-cm530":  {
        "title": "Embedded C(CM-530)",
      "content"	 : "IntroductionIt makes the users possible to develop their own firmware. The characteristics are as follows:  All the sources are written in C Language.  The examples of how to control each part of the controller directly are provided.Note If you want to use Embedded C, you need the knowledge of software and hardware. If you are a beginner, we recommend you use Embedded C after learing the software and the hardware.Note If you use Embedded C, you cannot use RoboPlus since the controller’s firmware is changed. If you want to use RoboPlus again, you must restore the firmware using RoboPlus.CM-530  Download CM-530 SDKFile Structure  .. : stm32f10x_conf.h, Makefile, stm32.ld contants of these files and sub-directories.  ../stm32f10x_lib : library files.  ../APP/inc : example header files.  ../APP/src : example source files.Getting StartedNote If an error occurs during installation in Windows 8.1.10, click HERE. Once downloading and unzipping are completed, copy the files to C:￦WinARM￦utils￦bin. (You can replace the existing file.) (EX error :/usr/bin/sh: fork: Resource temporarily unavailable)Install JREJRE(Java Runtime Environment) is a required component to run Eclipse.To verify whether JRE has been installed input ‘java’ at the command prompt. You can download JRE here.http://www.oracle.com/technetwork/java/javase/downloads/index.htmlSelect the version that best matches your working system.Install WinARMYou can download WinARM here.The downloaded file is a compressed file. Decompressed the file in C:WinARM directory.You must register WinARM to complete installation.Go to [Control Panel] &amp;gt; [System] &amp;gt; [Advanced system settings] and select [Advanced] tab. Click on the [Environment Variables] button.Find “Path” variable in the [System variables] group and edit its value.If the “Path” variable is not exist then create new path by clicking on the “New” button.Click on the [New] button and add below items at the end of path lists for Windows 10 users.C:WinArmbinC:WinARMutilsbinOther than Windows 10, append below items at the end of the variable value. Don’t miss the delimiter ‘;’(semicolon)  in between each path.C:WinArmbin;C:WinARMutilsbin;To verify proper installation, open the command window and type ‘arm-eabi-gcc –v’.If it does not work well, turn off the cmd window and re-run cmd, then try again.Install EclipseYou can download Eclipse here.http://www.eclipse.org/downloads/Select the version that best matches your working system.To run Eclipse just run the eclipse.exe file.http://www.eclipse.org/downloads/packages/eclipse-ide-cc-developers/neonrVerify InstallationVerify successful installation.by opening a sample project.Decompress the file (no root user rights needed).When you first run Eclipse, it requires to set up workspace like the picture below.  if you leave the default path, it may not be able to read the project. Please change it to another path.Click on the left lower box to prevent this window.Run Eclipse and go to File – New – Makefile Project with Existing Code.Click on Browse select 01 LED and click on Verify.After selecting the project go to Project – Clean, BuildTo see progress check the terminal window.If progress is not as shown below then check the working development environment.Note If an error occurs during installation in Windows 8.1.10, click HERE. Once downloading and unzipping are completed, copy the files to C:￦WinARM￦utils￦bin. (You can replace the existing file.) (EX error :/usr/bin/sh: fork: Resource temporarily unavailable)Restore RoboPlusThe result made by Embedded C is a controller firmware (bin file). If you install it, you cannot use RoboPlus since the existing controller firmware is erased. If you want to use RoboPlus again, you must install the original controller firmware built-in from the factory. You can install the original controller firmware easily using RoboPlus Manager.For more information, please refer to Firmware Restoration of RoboPlus Manager.ProgrammingHardware Port MapThe following hardware port map shows the hardware main pin functions of the controller.Macros and libraries for the STM32F10X ports and internal functionalities are provided for easy access and control.CM-530            Pin #      Pin Name      NET NAME      Description                  1      Vbat      VCC_33L      3.3V power supply              2      PC13      LED0      LED POWER              3      PC14      LED_TX      LED TX              4      PC15      LED_RX      LED RX              5      OSC_IN      XTAL1      X-TAL INPUT              6      OSC_OUT      XTAL2      X-TAL OUTPUT              7      NRST      RESET      RESET              8      PC0      SIG_ADC0      ADC0 INPUT              9      PC1      ADC_SELECT0      ANALOG MUX SELECT0              10      PC2      ADC_SELECT1      ANALOG MUX SELECT1              11      PC3      VDD_VOLT      input voltage  ADC              12      VSSA      VSSA      ADC reference voltage  3.3V              13      VDDA      VDDA      ADC reference voltage  0V              14      PA0      SIG_MOT1+      #1 external port  OUPUT              15      PA1      SIG_MOT1-      1 external port  OUPUT              16      A2      SIG_MOT2+      #2 external port  OUPUT              17      PA3      SIG_MOT2-      #2 external port  OUPUT              18      VSS4      GND      0V reference voltage              19      VDD4      VCC_33L      3.3V reference voltage              20      PA4      NC      RESERVED              21      PA5      SIG_ADC1      ADC1 INPUT              22      PA6      SIG_BUZZER      Buzzer OUTPUT              23      PA7      NC      RESERVED              24      PC4      SIG_MIC      MIC Signal INPUT              25      PC5      NC      RESERVED              26      PB0      NC      RESERVED              27      PB1      NC      RESERVED              28      PB2      BOOT1      RESERVED              29      PB10      PC_TXD      PC transmit              30      PB11      PC_RXD      PC receive              31      VSS1      GND      0V reference voltage              32      VDD1      VCC_33L      3.3V reference voltage              33      PB12      LED3      LED AUX              34      PB13      LED4      LED MANAGE              35      PB14      LED5      LED PROGRAM              36      PB15      LED6      LED PLAY              37      PC6      SIG_MOT3+      #3 external port  OUPUT              38      PC7      SIG_MOT3-      #3 external port  OUPUT              39      PC8      SIG_MOT4+      #4 external port  OUPUT              40      PC9      SIG_MOT4-      #4 external port  OUPUT              41      PA8      SIG_MOT5+      #5 external port  OUPUT              42      PA9      NC      RESERVED              43      PA10      NC      RESERVED              44      PA11      SIG_MOT5-      #5 external port OUPUT              45      PA12      ZIGBEE_RESET      Zigbee ENABLE              46      PA13      USB_SLEEP      USB connections              47      VSS2      GND      0V reference voltage              48      VDD2      VCC_33L      3.3V reference voltage              49      PA14      SW_RT      R Button              50      PA15      SW_LF      L Button              51      PC10      SW_DN      D Button              52      PC11      SW_UP      U Button              53      PC12      ZIGBEE_TXD      Zigbee transmit              54      PD2      ZIGBEE_RXD      Zigbee receive              55      PB3      SW_START      START Button              56      PB4      ENABLE_TX      Dynamixel transmit  ENABLE              57      PB5      ENABLE_RX      Dynamixel receive ENABLE              58      PB6      DXL_TXD      Dynamixel transmit              59      PB7      DXL_RXD      Dynamixel receive              60      BOOT0      BOOT0      RESERVED              61      PB8      SIG_MOT6+      #6 external port OUPUT              62      PB9      SIG_MOT6-      #6 external port OUPUT              63      VSS3      GND      0V reference voltage              64      VDD3      VCC_33L      3.3V reference voltage      The external ports of the CM-530 are listed below from 1 to 6. Please refer to CM-530 controller for reference regarding ports.  OUT1 : Output voltage 3.3V (0.3A max)  VCC (5V)  ADC : Ports for analog signal devices  GND  OUT2 : Output voltage 3.3V (0.3A max)Open ProjectOpen 01 LED projectRun Eclipse and go to Fle – New – makefile Project with existing code.Click on Browse select 01 LED and click on Verify.After selecting the project go to Project – Clean, BuildTo see progress check the terminal window.If progress is not as shown below then check the working development environment.Download bin FileAfter a successful build the bin file will be located at the sample directory.The firmware can be loaded into the controller via bootloader from RoboPlus Terminal.Please refer to the bootloader program for firmware installation and running.Boot LoaderBoot Loader makes the users possible to use the controller. Boot Loader cannot be erased by the users. If it is broken down, the controller cannot be used. Boot Loader is built-in on the controller when it is manufactured in the factory.The available commands in Boot Loader can be found using “Help” command.Entering/Exiting Boot LoaderEntering Boot LoaderTo enter into the boot loader, while pressing the  ‘#’ button(Shift + 3), turn on the controller or press down the reset switch.If you did correctly, following screen page will be shown.Exiting Boot LoaderIf the work is completed, you may exit by jumping to the desired address using “GO” command or by resetting the controller.How to Use APP/SYSThe program start position can be set by APP/SYS command. Once the program start position is set, the program is executed on the program start position when the power is turned on or reset.The memory map using STM32F103RE is as below.      If you input APP command on the window after entering Boot Loader, User Application Area is executed first after the next reset.(Most programs such as provided firmware, user program etc. start from 0 address, if there are no specific reasons.)        If you input SYS command on the window after entering Boot Loader, Boot Loader is executed after the next reset.(It is started as Boot Loader status, even if you do not press “#.”)  Install/Execute ProgramPreparations for installing a firmware of the controller are as follows:  Prepare a firmware (hex file) of the controller to be installed.  Connect PC and the controller.  Set the communication port by executing RoboPlus Terminal.  Execute Boot Loader of the controller. (Please refer to how to enter Boot Loader.)A firmware of the controller can be installed according to the procedure below.      Input “L” command (or Load) in Boot Loader.            Select “Transmit File” in the Files menu of RoboPlus Terminal, and then select the prepared firmware. (bin file)            The file is transmitted.  Please do not let the power of the controller turn off, and be careful the cable does not take off while the file is being transmitted.        When the file transmission is completed, you can execute the program using GO command.          In case of inputting only “GO” command, the program is executed from 0 address.      Like G [Address], if you input execution address (hexadecimal) after “G” command, the program is executed from the location.      Additional DescriptionFile creationThe newly made file can be changed from the samplemakefile designation. From makefile you can rename the file after ‘MAIN_OUT =’.Object file listFrom the illustration ‘sampleappsrc’ directory object files are produced from the .c files; where the Makefile requires these object files.Firmware start addressThe memory maps and bootloader domain are divided into the following.The firmware starting address is 0X8003000 by default user-modifiable.The following example is with address 0X8003000      changing stm32.ld            changing the vector table      ExamplesLED ControlEach LED of the controller can be controlled.  Prepare          CM-530        Theory          The micro controller can control the peripheral devices such as LED connected to the controller through I/O Port. You can control LEDs on the controller using this example.      Refer to controller’s port for port and pin number in 01 LEDappsrcmain.c            Source    int main(void){/* System Clocks Configuration */RCC_Configuration();/* NVIC configuration */NVIC_Configuration();/* Configure the GPIO ports */GPIO_Configuration();SysTick_Configuration();   while(1){  GPIO_SetBits(PORT_LED_POWER, PIN_LED_POWER);  GPIO_ResetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);  mDelay(250);  GPIO_SetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);  GPIO_ResetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);  mDelay(250);  GPIO_SetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);  GPIO_ResetBits(PORT_LED_PLAY, PIN_LED_PLAY);  mDelay(250);  GPIO_SetBits(PORT_LED_PLAY, PIN_LED_PLAY);  GPIO_ResetBits(PORT_LED_TX, PIN_LED_TX);  mDelay(250);  GPIO_SetBits(PORT_LED_TX, PIN_LED_TX);  GPIO_ResetBits(PORT_LED_RX, PIN_LED_RX);  mDelay(250);  GPIO_SetBits(PORT_LED_RX, PIN_LED_RX);  GPIO_ResetBits(PORT_LED_AUX, PIN_LED_AUX);  mDelay(250);  GPIO_SetBits(PORT_LED_AUX, PIN_LED_AUX);  GPIO_ResetBits(PORT_LED_POWER, PIN_LED_POWER);  mDelay(250);  }  return 0;}        Result          All LEDs will be turned on in order.      ButtonInput of the button can be received.  Prepare          CM-530        Theory          Electronic signals of the devices connected to the controller can be read through I/O Port of the micro controller. You can see the status of pressed built-in switches through this example.      Refer to controller’s port for port and pin number in 02 BUTTON appsrcmain.c            Source    int main(void){  /* System Clocks Configuration */  RCC_Configuration();  /* NVIC configuration */  GPIO_Configuration();  /* Configure the GPIO ports */  NVIC_Configuration();  GPIO_ResetBits(PORT_LED_POWER, PIN_LED_POWER);       while(1)  {    if( GPIO_ReadInputDataBit(PORT_SW_UP, PIN_SW_UP) != SET )      GPIO_ResetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);    else if( GPIO_ReadInputDataBit(PORT_SW_DOWN, PIN_SW_DOWN) != SET )      GPIO_ResetBits(PORT_LED_AUX, PIN_LED_AUX);    else if( GPIO_ReadInputDataBit(PORT_SW_LEFT, PIN_SW_LEFT) != SET )      GPIO_ResetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);    else if( GPIO_ReadInputDataBit(PORT_SW_RIGHT, PIN_SW_RIGHT) != SET )      GPIO_ResetBits(PORT_LED_PLAY, PIN_LED_PLAY);    else if( GPIO_ReadInputDataBit(PORT_SW_START, PIN_SW_START) != SET )    {      GPIO_ResetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);      GPIO_ResetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);      GPIO_ResetBits(PORT_LED_PLAY, PIN_LED_PLAY);      GPIO_ResetBits(PORT_LED_TX, PIN_LED_TX);      GPIO_ResetBits(PORT_LED_RX, PIN_LED_RX);      GPIO_ResetBits(PORT_LED_AUX, PIN_LED_AUX);    }    else    {      GPIO_SetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);      GPIO_SetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);      GPIO_SetBits(PORT_LED_PLAY, PIN_LED_PLAY);      GPIO_SetBits(PORT_LED_TX, PIN_LED_TX);      GPIO_SetBits(PORT_LED_RX, PIN_LED_RX);      GPIO_SetBits(PORT_LED_AUX, PIN_LED_AUX);    }  }  return 0;}        Result          If you press buttons, depending on pressed buttons, different LEDs are turned on.      Serial CommunicationPC and the controller can perform serial communication.  Prepare          CM-530 PC connection status      The communication speed of the example is set to 57600bps.        Theory          Serial communication is the basic method to show the value of the controller to users by transmitting to PC. You can try serial communication with the controller through this example.      The microcontroller and PC comm are in USART channel 3      Refer to controller’s port for port and pin number in  03 SERIAL COMMUNICATIONAPPsrcmain.c            Source    int main(void){  /* System Clocks Configuration */  RCC_Configuration();  /* NVIC configuration */  NVIC_Configuration();  /* Configure the GPIO ports */  GPIO_Configuration();  /* USART Configuration */  USART_Configuration(57600);  GPIO_ResetBits(PORT_LED_POWER, PIN_LED_POWER);       while(1)  {    ReceivedData = RxDByte_PC();    if(ReceivedData == &#39;w&#39;)      TxDString(&quot;Welcome!rn&quot;);    else if(ReceivedData == &#39;g&#39;)      TxDString(&quot;Goodbye!rn&quot;);  }  return 0;}        Result                  Press the w for welcome and g key for goodbye.                    BuzzerBuzzer on the controller can be used.  Prepare          CM-530        Theory          Signals of the buzzer circuit can be controlled through I/O Port of the micro controller. The buzzer can play different musical notes by adjusting signal frequency.              Refer to controller’s port for port and pin number in 04 BUZZERAPPsrcmain.c            The relationship between musical scale and frequency is as below.              Time is a reciprocal number of frequency. The conversion formula is as below.        Time(Sec) =  1 / (Frequency)                        Octave/Scale      1      2      3      4      5      6      7      8                  C      32.7032      65.4064      130.8128      261.6256      523.2511      1046.502      2093.005      4186.009              C#      34.6478      69.2957      138.5913      277.1826      554.3653      1108.731      2217.461      4434.922              D      36.7081      73.4162      146.8324      293.6648      587.3295      1174.659      2349.318      4698.636              D#      38.8909      77.7817      155.5635      311.1270      622.2540      1244.508      2489.016      4978.032              E      41.2034      82.4069      164.8138      329.6276      659.2551      1318.510      2637.020      5274.041              F      43.6535      87.3071      174.6141      349.2282      698.4565      1396.913      2793.826      5587.652              F#      46.2493      92.4986      184.9972      369.9944      739.9888      1479.978      2959.955      5919.911              G      48.9994      97.9989      195.9977      391.9954      783.9909      1567.982      3135.963      6271.927              G#      51.9130      103.8262      207.6523      415.3047      830.6094      1661.219      3322.438      6644.875              A      55.0000      110.0000      220.0000      440.0000      880.0000      1760.000      3520.000      7040.000              A#      58.2705      116.5409      233.0819      466.1638      932.3275      1864.655      3729.310      7458.620              G      61.7354      123.4708      246.9417      493.8833      987.7666      1975.533      3951.066      7902.133        Unit : Hz      Source    int main(void){  /* System Clocks Configuration */  RCC_Configuration();  /* NVIC configuration */  NVIC_Configuration();  /* Configure the GPIO ports */  GPIO_Configuration();  SysTick_Configuration();  GPIO_ResetBits(PORT_LED_POWER, PIN_LED_POWER);       while(1)  {    if( GPIO_ReadInputDataBit(PORT_SW_UP, PIN_SW_UP) != SET )    {      GPIO_ResetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);      GPIO_ResetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);      GPIO_ResetBits(PORT_LED_PLAY, PIN_LED_PLAY);      GPIO_ResetBits(PORT_LED_TX, PIN_LED_TX);      GPIO_ResetBits(PORT_LED_RX, PIN_LED_RX);      GPIO_ResetBits(PORT_LED_AUX, PIN_LED_AUX);      GPIO_ResetBits(PORT_BUZZER, PIN_BUZZER);      mDelay(1);      GPIO_SetBits(PORT_BUZZER, PIN_BUZZER);      mDelay(1);    }    else    {      GPIO_SetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);      GPIO_SetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);      GPIO_SetBits(PORT_LED_PLAY, PIN_LED_PLAY);      GPIO_SetBits(PORT_LED_TX, PIN_LED_TX);      GPIO_SetBits(PORT_LED_RX, PIN_LED_RX);      GPIO_SetBits(PORT_LED_AUX, PIN_LED_AUX);      GPIO_SetBits(PORT_BUZZER, PIN_BUZZER);    }  }}            Result          Press start the power LED turns on, 6 other LED’s turn on, and buzzer sounds off.      MICExternal sounds can be detected through MIC.  Prepare          CM-530        Theory          If more than a certain level of sounds is detected on the MIC circuit, signals are made to I/O Port of the micro controller. External sounds can be detected by sensing the signals.      Refer to controller’s port for port and pin number in 05 MICAPPsrcmain.c        Sourceint main(void){  /* System Clocks Configuration */  RCC_Configuration();  /* NVIC configuration */  NVIC_Configuration();  /* NVIC configuration */  GPIO_Configuration();  SysTick_Configuration();  GPIO_ResetBits(PORT_LED_POWER, PIN_LED_POWER);     while(1)  {    if( GPIO_ReadInputDataBit(PORT_MIC, PIN_MIC) != SET)    {      GPIO_ResetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);      GPIO_ResetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);      GPIO_ResetBits(PORT_LED_PLAY, PIN_LED_PLAY);      GPIO_ResetBits(PORT_LED_TX, PIN_LED_TX);      GPIO_ResetBits(PORT_LED_RX, PIN_LED_RX);      GPIO_ResetBits(PORT_LED_AUX, PIN_LED_AUX);      mDelay(1000);    }    else    {      GPIO_SetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);      GPIO_SetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);      GPIO_SetBits(PORT_LED_PLAY, PIN_LED_PLAY);      GPIO_SetBits(PORT_LED_TX, PIN_LED_TX);      GPIO_SetBits(PORT_LED_RX, PIN_LED_RX);      GPIO_SetBits(PORT_LED_AUX, PIN_LED_AUX);    }  }  return 0;}  Result          When the MIC signals are detected, all LEDs are turned on and off for a second.      OLLO Servo CW/CCWLearning ollo servo motor rotation direction  Prepare          CM-530      OLLO servo motor (Connected to the external port No.1)        Theory                  The controller controls rotation direction with MOT1+ and MOT1- via SIG_MOT1+ and SIG_MOT1-                            Refer to controller’s port for port and pin number in 06 OLLO MOTOR ROTATEAPPsrcmain.c  Sourceint main(void){   /* System Clocks Configuration */  RCC_Configuration();  /* NVIC configuration */  NVIC_Configuration();  /* GPIO configuration */  GPIO_Configuration();  SysTick_Configuration();  GPIO_ResetBits(PORT_SIG_MOT1P,PIN_SIG_MOT1P);  GPIO_ResetBits(PORT_SIG_MOT1M,PIN_SIG_MOT1M);  GPIO_ResetBits(PORT_LED_POWER, PIN_LED_POWER);     while(1)  {    GPIO_SetBits(PORT_SIG_MOT1P,PIN_SIG_MOT1P);    GPIO_ResetBits(PORT_SIG_MOT1M,PIN_SIG_MOT1M);    mDelay(5000);    GPIO_SetBits(PORT_SIG_MOT1M,PIN_SIG_MOT1M);    mDelay(5000);    GPIO_SetBits(PORT_SIG_MOT1P,PIN_SIG_MOT1P);    GPIO_SetBits(PORT_SIG_MOT1M,PIN_SIG_MOT1M);    mDelay(2000);  }  return 0;}  Result          The servo motor rotates for 5 seconds and repeats rotating after a 2-second halt.      OLLO Servo PositionLearning ollo servo motor position reading  Prepare          CM-530      OLLO servo motor        Theory          The controller can change input analog signals into digital form. This example converts the motor’s analog position signal.              Refer to controller’s port for port and pin number in  06 OLLO MOTOR ROTATEAPPsrcmain.c                            The ANALOG MUX (74HC4052D) blocks impedance and converts voltage from 5V to 3.3V.      ADX MUX circuit combines signal from ADC_SELECT0, and ADC_SELECT1; SIG_ADC0 selects a signal from ADC1, ADC2, or ADC3 and feeds it into the microcontroller; SIG_ADC1 selects a signal from ADC4, ADC5, or ADC6 and feeds it into the microcontroller; then this signal gets converted into digital.      Refer to controller’s port for port and pin number in  07 OLLO MOTOR POSITIONAPPsrcmain.c        Sourceint main(void){  /* System Clocks Configuration */  RCC_Configuration();  /* NVIC configuration */  NVIC_Configuration();  /* GPIO configuration */  GPIO_Configuration();  SysTick_Configuration();  /* ADC configuration */  ADC_Configuration();  GPIO_ResetBits(PORT_SIG_MOT1P,PIN_SIG_MOT1P);  GPIO_ResetBits(PORT_SIG_MOT1M,PIN_SIG_MOT1M);  GPIO_ResetBits(PORT_SIG_MOT2P,PIN_SIG_MOT2P);  GPIO_ResetBits(PORT_SIG_MOT2M,PIN_SIG_MOT2M);  GPIO_ResetBits(PORT_SIG_MOT3P,PIN_SIG_MOT3P);  GPIO_ResetBits(PORT_SIG_MOT3M,PIN_SIG_MOT3M);  GPIO_ResetBits(PORT_SIG_MOT4P,PIN_SIG_MOT4P);  GPIO_ResetBits(PORT_SIG_MOT4M,PIN_SIG_MOT4M);  GPIO_ResetBits(PORT_SIG_MOT5P,PIN_SIG_MOT5P);  GPIO_ResetBits(PORT_SIG_MOT5M,PIN_SIG_MOT5M);  GPIO_ResetBits(PORT_SIG_MOT6P,PIN_SIG_MOT6P);  GPIO_ResetBits(PORT_SIG_MOT6M,PIN_SIG_MOT6M);  GPIO_ResetBits(PORT_LED_POWER, PIN_LED_POWER);     while(1)  {    GPIO_ResetBits(PORT_ADC_SELECT0,PIN_ADC_SELECT0);    GPIO_ResetBits(PORT_ADC_SELECT1,PIN_ADC_SELECT1);    mDelay(10);    /* Start ADC1,ADC2 Software Conversion */    ADC_SoftwareStartConvCmd(ADC1, ENABLE);    ADC_SoftwareStartConvCmd(ADC2, ENABLE);    mDelay(10);    POT_1 = (ADC_GetConversionValue(ADC1))&amp;gt;&amp;gt;2;    POT_4 = (ADC_GetConversionValue(ADC2))&amp;gt;&amp;gt;2;    GPIO_SetBits(PORT_ADC_SELECT0,PIN_ADC_SELECT0);    GPIO_ResetBits(PORT_ADC_SELECT1,PIN_ADC_SELECT1);    mDelay(10);    /* Start ADC1,ADC2 Software Conversion */    ADC_SoftwareStartConvCmd(ADC1, ENABLE);    ADC_SoftwareStartConvCmd(ADC2, ENABLE);    mDelay(10);    POT_2 = (ADC_GetConversionValue(ADC1))&amp;gt;&amp;gt;2;    POT_5 = (ADC_GetConversionValue(ADC2))&amp;gt;&amp;gt;2;    GPIO_ResetBits(PORT_ADC_SELECT0,PIN_ADC_SELECT0);    GPIO_SetBits(PORT_ADC_SELECT1,PIN_ADC_SELECT1);    mDelay(10);    /* Start ADC1,ADC2 Software Conversion */    ADC_SoftwareStartConvCmd(ADC1, ENABLE);    ADC_SoftwareStartConvCmd(ADC2, ENABLE);    mDelay(10);    POT_3 = (ADC_GetConversionValue(ADC1))&amp;gt;&amp;gt;2;    POT_6 = (ADC_GetConversionValue(ADC2))&amp;gt;&amp;gt;2;    TxDWord16(POT_1);    TxDByte_PC(&#39; &#39;);    TxDWord16(POT_2);    TxDByte_PC(&#39; &#39;);    TxDWord16(POT_3);    TxDByte_PC(&#39; &#39;);    TxDWord16(POT_4);    TxDByte_PC(&#39; &#39;);    TxDWord16(POT_5);    TxDByte_PC(&#39; &#39;);    TxDWord16(POT_6);    TxDByte_PC(&#39; &#39;);    TxDByte_PC(&#39;r&#39;);    TxDByte_PC(&#39;n&#39;);  }  return 0;}  Result                  From any port the controller can read the position value of the servo motor. The range is from 0 to 0x03FF. The following illustration is with a servo motor in port 3.                    IR SensorHere you can learn how t o use the ADC of external ports.  Prepare          Connect the CM-530 to the PC via USB cable.      IR Sensor (Connected to the external sensor No.1)        Theory                  The controller can change input analog signals into digital form. This example converts the motor’s analog position signal.                            The ANALOG MUX (74HC4052D) blocks impedance and converts voltage from 5V to 3.3V.      The ADX MUX circuit combines signal from ADC_SELECT0, and ADC_SELECT1; SIG_ADC0 selects a signal from ADC1, ADC2, or ADC3 and feeds it into the microcontroller; SIG_ADC1 selects a signal from ADC4, ADC5, or ADC6 and feeds it into the microcontroller; then this signal gets converted into digital.      Refer to controller’s port for port and pin number in 08 IR SENSORAPPsrcmain.c        Sourceint main(void){  /* System Clocks Configuration */  RCC_Configuration();  /* NVIC configuration */  NVIC_Configuration();  /* GPIO configuration */  GPIO_Configuration();  SysTick_Configuration();  /* ADC configuration */  ADC_Configuration();  GPIO_ResetBits(PORT_SIG_MOT1P,PIN_SIG_MOT1P);  GPIO_ResetBits(PORT_SIG_MOT1M,PIN_SIG_MOT1M);  //GPIO_ResetBits(PORT_LED_POWER, PIN_LED_POWER);     while(1)  {    GPIO_SetBits(PORT_SIG_MOT1P, PIN_SIG_MOT1P);    GPIO_ResetBits(PORT_SIG_MOT1M, PIN_SIG_MOT1M);    GPIO_ResetBits(PORT_ADC_SELECT0,PIN_ADC_SELECT0);    GPIO_ResetBits(PORT_ADC_SELECT1,PIN_ADC_SELECT1);    uDelay(30);    /* Start ADC1,ADC2 Software Conversion */    ADC_SoftwareStartConvCmd(ADC1, ENABLE);    //ADC_SoftwareStartConvCmd(ADC2, ENABLE);    uDelay(5);    IR_1 = (ADC_GetConversionValue(ADC1));    GPIO_ResetBits(PORT_SIG_MOT1P, PIN_SIG_MOT1P);    GPIO_ResetBits(PORT_SIG_MOT1M, PIN_SIG_MOT1M);    TxDWord16(IR_1);    TxDByte_PC(&#39;r&#39;);    TxDByte_PC(&#39;n&#39;);    mDelay(5);  }  return 0;}  Result          Connect the IR sensor to port 1 and reading values ar displayed onscreen.      Read/Write DynamixelThe location of Dynamixel can be set and read. (For more details refer to Dynamixel SDK)  Prepare          The controller and Dynamixel are connected.      This example is operated if the Dynamixel ID is 1.        Theory          Dynamixel can be controlled by transmitting designated packet. The location of Dynamixel can be controlled using provided library.      The microcontroller and Dynamixel comm are in USART channel 1      the diagram below show a circuit for Dynamixel comm for a half-duplex buffer.              Refer to controller’s port for port and pin number in 09 DXL READ_WRITEAPPsrcmain.c                      Sourceint main(void){  /* System Clocks Configuration */  RCC_Configuration();  /* NVIC configuration */  NVIC_Configuration();  /* GPIO configuration */  GPIO_Configuration();  SysTick_Configuration();  dxl_initialize( 0, 1 );  USART_Configuration(USART_PC, Baudrate_PC);  TxDString(&quot;nnDynamixel Read/Write example for CM-530nn&quot;);     while(1)  {    bMoving = dxl_read_byte( id, P_MOVING );    CommStatus = dxl_get_result();    if( CommStatus == COMM_RXSUCCESS )    {      if( bMoving == 0 )      {        // Change goal position        if( INDEX == 0 )          INDEX = 1;        else          INDEX = 0;        // Write goal position        dxl_write_word( id, P_GOAL_POSITION_L, GoalPos[INDEX] );      }      PrintErrorCode();      // Read present position      wPresentPos = dxl_read_word( id, P_PRESENT_POSITION_L );      TxDWord16(GoalPos[INDEX]);      TxDString(&quot;   &quot;);      TxDWord16(wPresentPos);      TxDByte_PC(&#39;r&#39;);      TxDByte_PC(&#39;n&#39;);    }    else      PrintCommStatus(CommStatus);  }  return 0;}  Result          Dynamixel is moved back and forth in the disgnated location, and the current location is printed through terminal.      Dynamixel Sync ControlMultiple Dynamixels can be controlled by synchronization. (For more details refer to Dynamixel SDK)  Prepare          The controller and Dynamixel are connected.      This example is operated when the Dynamixel ID is designated from 1 to 3 in order.        Theory          Dynamixel can be controlled by transmitting designated packet. The location of Dynamixel can be controlled using provided library.      The microcontroller and Dynamixel comm are in USART channel 1      the diagram below show a circuit for Dynamixel comm for a half-duplex buffer.              Refer to controller’s port for port and pin number in 10 DXL SYNC WRITEAPPsrcmain.c                      Sourceint main(void){  /* System Clocks Configuration */  RCC_Configuration();  /* NVIC configuration */  NVIC_Configuration();  /* GPIO configuration */  GPIO_Configuration();  SysTick_Configuration();  dxl_initialize( 0, 1 );  USART_Configuration(USART_PC, Baudrate_PC);  TxDString(&quot;nnDynamixel SyncWrite example for CM-530nn&quot;);  for( i=0; i&amp;lt;NUM_ACTUATOR; i++ )  {    id[i] = i+1;  }  // Set goal speed  dxl_write_word( BROADCAST_ID, P_GOAL_SPEED_L, 0 );  // Set goal position  dxl_write_word( BROADCAST_ID, P_GOAL_POSITION_L, AmpPos );  mDelay(1000);     while(1)  {    // Make syncwrite packet    dxl_set_txpacket_id(BROADCAST_ID);    dxl_set_txpacket_instruction(INST_SYNC_WRITE);    dxl_set_txpacket_parameter(0, P_GOAL_POSITION_L);    dxl_set_txpacket_parameter(1, 2);    for( i=0; i&amp;lt;NUM_ACTUATOR; i++ )    {      dxl_set_txpacket_parameter(2+3*i, id[i]);      dxl_set_txpacket_parameter(2+3*i+1, dxl_get_lowbyte(GoalPos));      dxl_set_txpacket_parameter(2+3*i+2, dxl_get_highbyte(GoalPos));      TxDByte_PC(&#39;r&#39;);      TxDByte_PC(&#39;n&#39;);      TxDWord16(GoalPos);    }    dxl_set_txpacket_length((2+1)*NUM_ACTUATOR+4);    dxl_txrx_packet();    CommStatus = dxl_get_result();    if( CommStatus == COMM_RXSUCCESS )      PrintErrorCode();    else      PrintCommStatus(CommStatus);    GoalPos += 100;    if( GoalPos &amp;gt; MAX_POSITION )      GoalPos -= MAX_POSITION;    mDelay(CONTROL_PERIOD);  }  return 0;}  Result          Multiple Dynamixels are moved back and forth in the designated location, and the current location is printed through terminal.      RC-100/ZIGBEEThe controller can be operated using RC-100.  Prepare          CM-530      One pair of Zig-100/110      RC-100        Theory          The controller can be controlled by RC100 remote controller equipped with Zig 100.              The microcontroller and RC-100 comm are in USART channel 5                    The diagram above show Zigbee’s connector and power supply circuit.      Refer to controller’s port for port and pin number in  11 RC100 ZIGBEEAPPsrcmain.c        Sourceint main(void){  /* System Clocks Configuration */  RCC_Configuration();  /* NVIC configuration */  NVIC_Configuration();  /* Configure the GPIO ports */  GPIO_Configuration();  SysTick_Configuration();  zgb_initialize(0);  USART_Configuration(USART_PC, 57600);  GPIO_ResetBits(PORT_LED_POWER, PIN_LED_POWER);     while(1)  {    if(zgb_rx_check() == 1)    {      RcvData = zgb_rx_data();      TxDWord16(RcvData);      TxDByte_PC(&#39;r&#39;);      TxDByte_PC(&#39;n&#39;);      if(RcvData &amp;amp; RC100_BTN_1)        GPIO_ResetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);      else        GPIO_SetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);      if(RcvData &amp;amp; RC100_BTN_2)        GPIO_ResetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);      else        GPIO_SetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);      if(RcvData &amp;amp; RC100_BTN_3)        GPIO_ResetBits(PORT_LED_PLAY, PIN_LED_PLAY);      else        GPIO_SetBits(PORT_LED_PLAY, PIN_LED_PLAY);    }  }  return 0;}  Result          If Zigbee is connected normally, LEDs are turned on and off whenever the buttons of RC-100 is pressed.      ",
        "url": " http://localhost:4000/docs/en/software/sdk/embedded_c_cm530/"
      } ,
  
      "docs-en-dxl-ex-ex-106":  {
        "title": "EX-106+",
      "content"	 : "EX-106+Warning EX-106+ has been discontinued.Specifications            Item      Specifications                  Baud Rate      7843 bps ~ 1 Mbps              Resolution      0.06°              Running Degree      0° ~ 251°Endless Turn              Weight      154g              Dimensions (W x H x D)      40.2mm x 65.1mm x 46mm              Gear Ratio      184 : 1              Stall Torque      10.9 N*m (at 18.5V, 7A)              No Load Speed      91rpm (at 18.5V)              Operating Temperature      -5°C ~ +80°C              Input Voltage      12 ~ 18.5V (Recommended : 14.8V)              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multi Drop Bus(Daisy Chain Type Connector)              ID      0 ~ 253              Feedback      Position, Temperature, Load, Input Voltage, etc              Material      Full Metal Gear, Aluminium Front Case,Engineering Plastic Body              Standby Current      55mA      Note Stall torque is the maximum instantaneous and static  torque. Stable motions are possible with robots designed for loads with 1/5 or less of the stall torque.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to [Protocol] for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed when the value of Torque Enable(64) is cleared to ‘0’.SizeThe Size of data varies from 1 to 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      107              2      1      Firmware Version      Firmware Version      R      -              3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      Counter-Clockwise Angle Limit      RW      4095              10      1      Drive Mode      Dual Mode Setting      RW      0              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      240              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On/Off      RW      0              25      1      LED      Status LED On/Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      1              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      1              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW      -              32      2      Moving Speed      Moving Speed      RW      -              34      2      Torque Limit      Torque Limit(Goal Torque)      RW      ADD 14&amp;amp;15              36      2      Present Position      Present Position      R      -              38      2      Present Speed      Present Speed      R      -              40      2      Present Load      Present Load      R      -              42      1      Present Voltage      Present Voltage      R      -              43      1      Present Temperature      Present Temperature      R      -              44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      0              56      2      Sensed Current      Consuming Current      R      -      Control Table DescriptionModel Number (0)This address stores model number of the DYNAMIXEL.Firmware Version (2)This address stores firmware version of the DYNAMIXEL.ID (3)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet. 0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate (4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate      Margin of Error                  1(Default)      1M      0.000%              3      500,000      0.000%              4      400,000      0.000%              7      250,000      0.000%              9      200,000      0.000%              16      115200      -2.124%              34      57600      0.794%              103      19200      -0.160%              207      9600      -0.160%      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time (5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.                   Value      Description                  Unit      2[μsec]      -              Range      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      CW/CCW Angle Limit(6, 8)The angle limit allows the motion to be restrained.The range and the unit of the value is the same as Goal Position(Address 30, 31).CW Angle Limit: the minimum value of Goal Position(Address 30, 31)CCW Angle Limit: the maximum value of Goal Position(Address 30, 31)The following two modes can be set pursuant to the value of CW and CCW.            Operation Type      CW / CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheel-type operation robots since motors of the robots spin infinitely. The joint mode can be used to multi-joints robot since the robots can be controlled with specific angles.Drive Mode(10)            Bit      Item      Description                  Bit 2 ~ 7      N/A      -              Bit 1      Master/Slave Mode      0: Master Mode1 : Slave Mode              Bit 0      Normal/Reverse Mode      0: Normal Mode1: Reverse mode            Master ModeIn case of being used as dual joints, it is set to designate as master.        Slave ModeIn case of being used as dual joints, it is set to designate as slave.        General ModeSets the direction of rotation to set direction.Reads normal data values from position.        Reverse ModeSets the direction of rotation  opposite to set direction.Reads inverse data values from position.    Note Reverse mode is to reverse the rotational direction. It can be used conveniently when a symmetrical joint is required.  Dual JointsDual joints are used as 1 joint by controlling 2 motors simultaneously.To use the dual joints, 1 unit of motor set in master mode and 1 unit of motor set in slave mode are needed.Next, the motors must be connected to each other using synchronization cable.  Normal mode synch cable: Drives Master and PWM signals synchronized.  Reverse mode synch cable: Drives PWM signals in reverse.Note Slave is synchronized by directly receiving the control command through synchronization cable from Master.  Slave Mode unit responds to communication through command packets, but data related to motor drive are processed only through the synchronization.Note In a dual master-slave configuration position information from the slave is ignored and the position of the dual configuration is based on the master in PWM control. When master and slave are not physically connected there could be a slight difference on the driven load. Use the frame shown in the below image to achieve dual configuration.The Highest Limit TemperatureCaution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Using the product when the temperature is high may and can cause damage.Min/Max Voltage LimitIt is the operation range of voltage.            Unit      Value Range      Description                  About 0.1V      50 ~ 250      5.0 ~ 25.0V      For example, if the value is 80, the voltage is 8V.If Present Voltage(42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.Max TorqueIt is the torque value of maximum output. 0 to 1023 (0x3FF) can be used, and the unit is about 0.1%.For example, Data 1023 (0x3FF) means that Dynamixel will use 100% of the maximum torque it can produce while Data 512 (0x200) means that Dynamixel will use 50% of the maximum torque. When the power is turned on, Torque Limit (Addresses 34 and 35) uses the value as the initial value.Status Return LevelIt decides how to return Status Packet. There are three ways like the below table.            Value      Return of Status Packet                  0      No return against all commands (Except PING Command)              1      Return only for the READ command              2      Return for all commands      When Instruction Packet is Broadcast ID, Status Packet is not returned regardless of Status Return Level.Alarm LED / Alarm ShutdownDynamixel can protect itself by detecting errors occur during the operation.The errors can be set are as the table below.            Bit      Name      Description                  Bit 7      0      -              Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’. That is, if 0X05 (binary 00000101) is set, both Input Voltage Error and Overheating Error can be detected.If errors occur, in case of Alarm LED, the LED blinks; in case of Alarm Shutdown, the motor output becomes 0 % by making the value of Torque Limit(Address 34, 35) as 0.Torque Enable            Value      Description                  0      Keeps Torque from generating by interrupting the power of motor              1      Generates Torque by impressing the power to the motor.      LED            Bit      Description                  0      Turn OFF the LED              1      Turn ON the LED      Compliance MarginIt exists in each direction of CW/CCW and means the error between goal position and present position.The range of the value is 0~255, and the unit is the same as Goal Position.(Address 30,31)The greater the value, the more difference occurs.Compliance SlopeIt exists in each direction of CW/CCW and sets the level of Torque near the goal position.Compliance Slope is set in 7 steps, the higher the value, the more flexibility is obtained.Data representative value is actually used value.  That is, even if the value is set to 25, 16 is used internally as the representative value.            Step      Data Value      Data Representative Value                  1      0(0x00) ~ 3(0x03)      2(0x02)              2      4(0x04) ~ 7(0x07)      4(0x04)              3      8(0x08)~15(0x0F)      8(0x08)              4      16(0x10)~31(0x1F)      16(0x10)              5      32(0x20)~63(0x3F)      32(0x20)              6      64(0x40)~127(0x7F)      64(0x40)              7      128(0x80)~254(0xFE)      128(0x80)      Compliance is to set the control flexibility of the motor.The following diagram shows the relationship between output torque and position of the motor.Goal PositionIt is a position value of destination.0 to 1023 (0x3FF) is available.  The unit is 0.29 degree.If Goal Position is out of the range, Angle Limit Error Bit (Bit1) of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED/Shutdown.The picture above is the front view of DynamixelNote If it is set to Wheel Mode, this value is not used.Moving SpeedIt is a moving speed to Goal Position.The range and the unit of the value may vary depending on the operation mode.      Join Mode0~1023 (0X3FF) can be used, and the unit is about 0.111rpm.If it is set to 0, it means the maximum rpm of the motor is used without controlling the speed.If it is 1023, it is about 114rpm.For example, if it is set to 300, it is about 33.3 rpm.        Wheel Mode0~2047( 0X7FF) can be used, the unit is about 0.1%.If a value in the range of 0~1023 is used, it is stopped by setting to 0 while rotating to CCW direction.If a value in the range of 1024~2047 is used, it is stopped by setting to 1024 while rotating to CW direction.That is, the 10th bit becomes the direction bit to control the direction.In Wheel Mode, only the output control is possible, not speed.For example, if it is set to 512, it means the output is controlled by 50% of the maximum output.  Note Please check the maximum rpm of the Dynamixel. The motor cannot exceed the maximum rpm with the higher Moving Speed value.Torque LimitIt is the value of the maximum torque limit.0 to 1023 (0x3FF) is available, and the unit is about 0.1%.For example, if the value is 512, it is about 50%; that means only 50% of the maximum torque will be used.If the power is turned on, the value of Max Torque (Address 14, 15) is used as the initial value.Note If the function of Alarm Shutdown is triggered, the motor loses its torque because the value becomes 0. At this moment, if the value is changed to the value other than 0, the motor can be used again.Present PositionIt is the current position value of Dynamixel.The range of the value is 0~1023 (0x3FF), and the unit is 0.29 degree.The picture above is the front view of Dynamixel.      Wheel ModeThe range of the value is 0~65535(0XFFFF), and the unit is 0.06 degree. In case of Wheel Mode, only the moving distance can be measured since the present location outputs the value of Encoder. It is increased or decreased by 1 depending on the moving direction of wheel. If it is decreased when the value is 0, it becomes 65535; if it is increased when it is 65535, the value becomes 0.    Total Moved Angle = (The value currently measured - The value measured in the past) x 0.06According to the formula above, if the total moved angle is greater than 0, it is turned to the direction of CCW; if it is less than 0, it is turned to the direction of CW.For example, The value is changed from 5000 to 10000, (10000 - 5000) x 0.06 = 300, and the total moved angle becomes 300 degrees.  Present SpeedIt is the current moving speed.0~2047 (0X7FF) can be used.If a value is in the rage of 0~1023, it means that the motor rotates to the CCW direction.If a value is in the rage of 1024~2047, it means that the motor rotates to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 0 and 1024 are equal.The unit of this value varies depending on operation mode.      Joint ModeThe unit is about 0.111rpm.For example, if it is set to 300, it means that the motor is moving to the CCW direction at a rate of about 33.3rpm.        Wheel ModeThe unit is about 0.1%.For example, if it is set to 512, it means that the torque is controlled by 50% of the maximum torque to the CCW direction.  Present LoadIt means currently applied load.The range of the value is 0~2047, and the unit is about 0.1%.If the value is 0~1023, it means the load works to the CCW direction.If the value is 1024~2047, it means the load works to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 1024 is equal to 0.For example, the value is 512, it means the load is detected in the direction of CCW about 50% of the maximum torque.            Bit      15 ~ 11      10      9 ~ 0                  Value      0      Load Direction      Data (Load Ratio)      Note CCW Load : Load Direction = 0, CW Load : Load Direction = 1Note Present load is an inferred value based on the internal output value; not a measured value using torque sensor, etc. Therefore, it may be inaccurate for measuring weight or torque. It is recommended to use it for predicting the direction and size of the force being applied to the joint.Present VoltageIt is the size of the current voltage supplied.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)Present TemperatureIt is the internal temperature of Dynamixel in Celsius.Data value is identical to the actual temperature in Celsius. For example, if the data value is 85 (0x55), the current internal temperature is 85°C.Registered Instruction            Value      Description                  0      There are no commands transmitted by REG_WRITE              1      There are commands transmitted by REG_WRITE      Note If ACTION command is executed, the value is changed into 0.Moving            Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock            Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.PunchCurrent to drive motor is at minimum.Can choose vales from 0x20 to 0x3FF.Sensed CurrentIt is the amount of current in use. The range from 0 to 1023 is used, and the unit is 10mA. The value less than 512 means the motor consumes the current and torques to the direction of CCW. The value greater than 512 means the motor consumes the current and torques to the direction of CW. 512 is equal to 0mA, and it means there is no torque from the motor.For example, if the value is 612, the motor torques to the direction of CW and consumes 1000mA(612-512=100 =&amp;gt; 100x10mA = 1,000mA).If the value is 312, the motor torques to the direction of CW and consumes 2000mA(512-312= -200 =&amp;gt; 200x10mA=2,000mA).How to AssembleMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators, the main controller needs to convert its UART signals to the half duplex type. The recommended circuit diagram for this is shown below.TTL CommunicationRS-485 CommunicationThe power of Dynamixel is supplied via Pin1(-), Pin2(+).(The above circuit is built into Dynamixel-only controller.)In the above circuit diagram, the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as follows:In case of DIRECTION485 Level = High: The signal of TxD is output to D+ and D-.In case of DIRECTION485 Level = Low: The signal of D+ and D- is output to RxD.Pin AssignmentThe connector pin assignments are as the following. The two connectors on the Dynamixel are connected pin to pin, thus the Dynamixel can be operated with only one connector attached.",
        "url": " http://localhost:4000/docs/en/dxl/ex/ex-106+/"
      } ,
  
      "docs-en-edu-ollo-explorer":  {
        "title": "OLLO EXPLORER",
      "content"	 : "OLLO EXPLORERIntroductionCreate robots using the controllers and sensors.Through 12-session curriculum, learn scientific principle and physics theory such as power of robot, usage of sensors, speed and force, walking, and running etc. by experiment.Note For OLLO Explorer, the instructor will download the program.  If you want to download and learn the program for yourself, you must purchase USB Downloader(LN-101) separately. If you want to build and program your robots using more peripheral devices, please purchase OLLO Inventor.Part List  CM-100  Geared MotorQuick StartHow to PlayFor the controller(CM-100) included with OLLO Explorer, a comprehensive program which can be used without downloading is installed.Caution The comprehensive program in the controller will be overwritten when downloading a program. Therefore, you must download the program using USB Downloader(LN-101).If the button on the controller is pressed sequentially, the musical notes are played. Depending on the pressed number, the installed program can be selected.Select ProgramPlease refer to the learning material in the kit for more information.            Button Press      Musical Note      Chapters      Robots                  1      Do      E-1Chapter 1, 2                    2      Re      E-1Chapter 3                    3      Mi      E-1Chapter 4                    4      Fa      E-2Chapter 1                    5      Sol      E-2Chapter 2                    6      Ra      E-2Chapter 3                    7      Si      E-2Chapter 4                    8      Do      E-3Chapter 1            Note The example which cannot be selected by the comprehensive program must be downloaded using USB Downloader(LN101).DownloadPlease refer to Explorer Learning Material on How to Assemble or motions during the execution for each example.Also, please refer to How to Download of task code for more information.  Integrated example program          This program is basically included in the main controller when you purchase the goods      Please refer to the Operating Method to see how to use this program.  Download OLLO_L2_Total_EN.tsk        Example program of each chapter            Robots      E-1                  1. Elephant      Download OLLO_L2_Elephant_EN.tsk              2. Windmill      Download OLLO_L2_Windmill_EN.tsk              3. Avoider      Download OLLO_L2_Avoider_EN.tsk              4. Imagine      Download OLLO_L2_DistanceSensor_EN.tskDownload OLLO_L2_Penguin_EN.tskDownload OLLO_L2_CardGiver_EN.tsk                  Robots      E-2                  5. Seal      Download OLLO_L2_Seal_EN.tsk              6. Line Tracer      Download OLLO_L2_Linetracer_EN.tsk              7. Howitzer      Download OLLO_L2_Howitzer_EN.tsk              8. Imagine      Download OLLO_L2_SoundSensor_EN.tskDownload OLLO_L2_Dancing_EN.tskDownload OLLO_L2_Cradle_EN.tsk                  Robots      E-3                  9. Lady Bug      Download OLLO_L2_Ladybug_EN.tsk              10. Wheel Puppy      Download OLLO_L2_WheelPuppy_EN.tsk              11. Mouse      Download OLLO_L2_Mouse_EN.tsk              12. Battle Bug      Download OLLO_L2_Battlebug_EN.tsk      ",
        "url": " http://localhost:4000/docs/en/edu/ollo/explorer/"
      } ,
  
      "docs-cn-faq":  {
        "title": "FAQ",
      "content"	 : "",
        "url": " http://localhost:4000/docs/cn/faq"
      } ,
  
      "docs-en-faq":  {
        "title": "FAQ",
      "content"	 : "  Product Compatibility Guide  Download Task Code  Task Rule Check  CM 510/530 Fuse Replacement",
        "url": " http://localhost:4000/docs/en/faq/"
      } ,
  
      "docs-jp-faq":  {
        "title": "FAQ",
      "content"	 : "",
        "url": " http://localhost:4000/docs/jp/faq"
      } ,
  
      "docs-kr-faq":  {
        "title": "FAQ",
      "content"	 : "  컨텐츠 작성방법",
        "url": " http://localhost:4000/docs/kr/faq"
      } ,
  
      "docs-en-parts-motor-gm-10a":  {
        "title": "Geared Motor(GM-10A)",
      "content"	 : "Geared Motor(GM-10A)IntroductionIt is the motor used in OLLO; it is connected to CM-100, and the direction of spin and the speed of spin can be adjusted through port control.It can be operated as general DC motors by connecting OLLO switch and the battery box.Compatibility Guide Controller CompatibilitySpecifications  Weight : 15g  Dimensions : 18mm x 36mm x 24mm  Gear Ratio : 70:1  Speed : 125RPM @ 1.5V, 250RPM @ 3.0V  Output on both Axles  Safety Clutch installedPinout  MOT-  MOT+Caution Cables can may be damaged when not properly connected (i.e. wrong orientation), or use of excessive force during connection.Tutorials  RoboPlus Task : Please refer to Geared Motor section in the Roboplus Task.Videos",
        "url": " http://localhost:4000/docs/en/parts/motor/gm-10a/"
      } ,
  
      "docs-en-platform-op-getting-started":  {
        "title": "DARwIn-OP",
      "content"	 : "IntroductionCongratulations on purchasing DARWIN-OP. DARWIN-OP will lead you to the robot world with virtually unlimited research possibilities and opportunities. Read this guide before getting with DARWIN-OP.What is DARWIN-OP?Safety InformationCaution Exercise safety when using this product. Robotis is not responsible, in any ways, for any accidents due to user negligence.  Please read the instructions carefully before getting started.  This product may not be suitable for children aged below 15.  Do not use any other tools other than the ones provided with the kit.  Face the robot away from you during operations.  Do not place your fingers at the robot’s joints.  Do not operate robot near water or direct sunlight.Getting StartedPackage Contents  Fully-assembled DARWIN-OP robot  3 battery packs  1 battery pack charger  1 DC power supply  1 power cable  1 ethernet cable  2 wrenches, 2 screwdrivers  1 set of spare cables  1 set of spare bolts and nuts  1 red ball  1 set of color patches (7 individual)  1 USB thumb drive (with installed recovery software)  1 quick start guide  1 CD with RoboPlus software  2 spare fusesLayoutCharging BatteryCharging StatusCaution If the connection is unstable, please unplug the battery pack completely and plug the battery pack again.Caution Only use the supplied battery charger. Charging the battery pack with any other charger may cause damages.Battery Hot SwapOne distinguishing feature of DARWIN-OP is its ability to change the battery pack without the need of shutting down.To switch battery pack, while operating, perform the following:      Connect the DC power to the DC jack.            Disconnect the battery cable from the battery jack.            Unscrew the thumbscrew from the battery compartment door.            Remove the battery pack.            Insert a fully-charged battery pack; close and screw the thumbscrew.            Connect the battery cable to the battery jack(The connector is a standard deans jack with the same dimensions).            Remove DC power from the DC jack.      OperatingPreparationThe following procedure takes you through the set up process.      Set DARWIN-OP in the kneeling position as illustrated below      Caution Setting DARWIN-OP in any position other than kneeling may cause physical damages.      If DC power (12V) supply is used to provide power to DARWIN-OP  Connect the AC plug of your power adapter into a power outlet and the DC connector into DARWIN-OP’s DC jack. The DC jack is located at the back and lower right side of DARWIN-OP.            If Battery Pack (11.1V) is used instead of the DC power supply  You can select either DC power supply or battery pack to power on DARWIN-OP. If you want to use the battery pack please follow the steps below.    Ensure the battery pack is fully charged.  Open the battery back compartment door (unscrew the thumbscrew) and insert the battery pack.  Close and secure the compartment (screw the thumbscrew) afterwards.  Connect the battery pack cable to the battery power jack.  Disconnect DC power supply.Note To prevent unexpected shut down ensure that DARWIN-OP is connected to at least 1 active power source.![](/assets/images/platform/op/op_003.jpg)      Switching On  Turn rocker switch on located on the back lower right side of DARWIN-OP.      Once power is on the following will take place sequentially            Status      Description                        The eye LED is turned onPower is on                    The head LED is turned on greenThe PC inside DARWIN-OP operating system is booting                    The head LED is turned on amberDemo program is loaded and DARWIN-OP is ready to operate                    Demo program is loaded and DARWIN-OP is ready to operate      Demo ProgramDARWIN-OP comes with preconfigured 4 modes of operations:  Demonstration-ready mode  Autonomous Soccer mode  Interactive Motion mode  Vision Processing modeDARWIN-OP defaults to Demonstration-ready mode when turned on.To switch between modes, press the MODE button. DARWIN-OP announces each mode with each pressing. Each mode has its own indicating LED.To run each mode, press START button. After pressing START DARWIN-OP will stand up and begin operations.RESET ButtonThe RESET button resets the actuators, not the entire robot. Please keep in mind that the demo program is still running in the main controller.Caution The RESET button powers off all actuators. It is highly recommended that DARWIN-OP is set at kneeling position before pressing RESET or hold DARWIN-OP by its carrying handle. Pressing the RESET button while DARWIN-OP is moving may result in damages the the actuator(s) or/and robot itself.Demonstration Ready ModeThis is the default mode when you turn DARWIN-OP on. LED 1 (red), LED 2 (blue) and LED 3 (green) are on; the head LED changes from green to amber and DARWIN-OP announces “demonstration-ready mode.” DARWIN-OP is ready for action.Note DARWIN-OP remains in kneeling position and does not move under this mode. This is the best-suited mode to change power source.If you wish to completely end the demo program without turning DARWIn-OP off please refer here.Autonomous Soccer ModeDARWIN-OP pursues and kicks a red ball (you can change the ball color), playing a soccer by itself. When DARWIN-OP falls down, either on its back or belly, it gets up resumes ball search and pursuit.Start Autonomous Soccer Mode      Press the “MODE” button until the LED 1 (red) is on. DARWIN-OP announces “Autonomous soccer mode.”        Press the “START” button to begin. DARWIN-OP will stand up and announce “Start soccer demonstration.”  Right after then DARWIN-OP announces either          “sensor calibration complete” if you hear this message DARWIN-OP is ready to run under Soccer mode      “sensor calibration failed” if you hear this message DARWIN-OP will remain standing until gyroscope sensors are properly calibrated followed by “sensor calibration complete” announcement. If sensor calibration cannot be completed then run demo program again.        When DARWIN-OP sees the ball it walks towards the ball. Once the ball is close DARWIN-OP kicks the ball with either left or right foot. If DARWIN-OP falls during ball pursuit or kick it gets back up.Stop Autonomous Soccer ModePress the “MODE” button DARWIN-OP returns to Demonstration-Ready Mode.Interactive Motion ModeDARWIN-OP performs pre-programmed motions sequentially while talking.Start Interactive Motion Mode      Press the “MODE” button until LED 2 (blue) is on. DARWIN-OP announces “Interactive motion mode.”        Press the “START” button to begin. DARWIN-OP will stand up and announce “Start motion demonstration.”  DARWIN-OP performs the following actions sequentially                                                1. Thank you      2. Introduction      3. Wow      4. Sit Down                                              5. Stand Up      6. Clap      7. Oops      8. Bye Bye      Stop Interactive Motion ModePress the “MODE” button DARWIN-OP returns to Demonstration-Ready Mode.Image Processing ModeDARWIN-OP performs the same motions as Interactive motion mode, but individually, depending on the color(s) card. Use the supplied color cards.Color Card SetYou may download the cards from here.Start Vision Processing Mode  Press the “MODE” button until the LED 3 (green) is on. DARWIN-OP announces “Vision processing mode.”  Press the “START” button to begin. DARWIN-OP announces “Start vision processing demonstration” and gets up.  Select a color(s) card and place it in front of DARWIN-OP. The card should be approximately 15cm (about 6in) in front of DARWIN-OP.Stop Vision Processing ModePress the “MODE” button DARWIN-OP returns to Demonstration-Ready Mode.If you experience difficulties with DARWIN-OP reading the card you may need to adjust color and white balance. For more information refer to Camera CalibrationCamera CalibrationIf it the lighting around DARWIN-OP is too bright or dark, it maybw difficult to operate DARWIN-OP.You may change settings for color and white balance.You may modify color settings to change ball color for Soccer Mode.To be able to manipulate color settings you must:  Connect to DARWIN-OP via ether wired or wireless LAN.  Check on the ‘Obtain an IP address automatically’ menu from Internet Protocol (TCP/IP) properties of ‘Local area connection properties’  Have a web browser Firefox (recommenced) or Internet Explorer.The following procedure to access color settings assumes a connection via wired LAN:  Ensure you have a proper connection with DARWIN-OP.  Open up your computer’s web browser.Note Please abstain from using Chrome web browser as it can cause memory leaks!  On the address line type: http://192.168.123.1:8080  Click on the increment/decrement buttons until you have desired settings. You can see the changes visually.The following values are the default values.                   Ball      Red      Yellow      Blue                  Hue(0 ~ 360)      356      0      60      225              Tolerance(0 ~ 180)      15      15      15      15              Minimum Saturation(0 ~ 100)      50      55      45      45              Minimum Value(0 ~ 100)      10      0      0      0              Gain(0 ~ 255)      255      255      255      255              Exposure(0 ~ 10,000)      1,000      1,000      1,000      1,000      HSV Color SpaceThe HSV(Hue, Saturation, Value) model, also known as HSB (Hue, Saturation, Brightness), define color space in terms of three constituent components:Hue Scale  Hue          The color type (such as red, blue, or yellow)      Ranges from 0-360 (but normalized to 0-100% in some applications)        Saturation (chroma)          The “vibrancy” of the color      Ranges from 0-100%      This is sometimes called the “purity” by analogy to the colorimetric quantities excitation purity and colorimetric purity      The lower the saturation of a color the more faded its appearance; thus useful to define desaturation as the qualitative inverse of saturation        Value (intensity)          The brightness of the color      Ranges from 0-100%      How do you know if color calibration for the ball has been properly adjusted for the desired color?The illustration above depicts the ball covered in a patch of orange and green at the bottom right.  Orange means that color calibration has been properly matched to the color of the ball desired. In this particular case the color of the ball is blue.However, there is also a patch of green at the lower right portion of the ball.  Green means that the hue tolerance range between the ball settings and one of the other colors settings (blue in this case) overlap.Recall that the default hue for blue is 225 with a tolerance of 15. This gives blue a hue range from 210 to 240.In this example the hue value for the ball has been changed to 216 (for a blue ball) with tolerance at 15. This gives the ball hue range from 201 to 231.Values between 210 and 231 overlap. This means that the hue value(s) at the lower right portion of the ball is between 210 and 231.ShutdownTo shut down the computer inside DARWIN-OP perform one of the following:1) Press the depression button (1st depression), located on the front left side of the chest, 3 times.2) If you can connect a monitor and see the screen, click on “darwin” (located at the top right corner of the screen) and then click on “Shut Down.”DARWIN-OP will announce ‘bye-bye” and begin shut-down procedure:DARWIN-OP’s head LED will blink on and off (OS shutdown). Once the head LED stops blinking and remains off you may cut the power off. The eye LED’s remain on. Ignore the eye LED’s; turn power off.Note If you cut the power off while the head LED blink, then DARWIN-OP may have problems turning on the next time.",
        "url": " http://localhost:4000/docs/en/platform/op/getting_started/"
      } ,
  
      "docs-en-platform-op2-getting-started":  {
        "title": "ROBOTIS-OP2",
      "content"	 : "IntroductionWhat is OP2?Open Platform Humanoid ProjectROBOTIS OP2 (as known as “DARWIN 2” or DARWIN-OP2”) has been upgraded with greater computational performance compare to ROBOTIS OP (as known as “DARwIn-OP”).Despite the change in name the robot may be colloquially still be called “Darwin”. The only major change comes from the upgrade in computational power.When ROBOTIS OP was first released it was stated that it supported Windows OS.This claim is, and remains, technically true. However, in practice installing Windows is impossible due to the 4GB cap of the embedded SSD from ROBOTIS OP’s PC.The scant 4GB made difficult installing the later releases of Ubuntu and significant workaround was required to be able to install the later Linux releases.ROBOTIS OP2 upgrade is aimed at eliminating the difficulties relating to computing from the previous generation.You can now focus your efforts more into developing the robot and less on devoting resources for computing.  Visual differences with ROBOTIS OP:          Other than the color difference, the overall appearance remains unchanged.            Here are some mechanical differences :          New mini HDMI port connector on the ROBOTIS OP2      Location of the ports      ROBOTIS OP2 no longer has the 3.5mm microphone and audio jacks                  Here are some mechnamical differences        Advantages of ROBOTIS OP2 compared to ROBOTIS OP          User-replaceable SSD      User-replaceable RAM      Significantly increased computation power      Reduced size of the PC      Reduced size of the management controller (CM-730 ⇨ CM-740)        Hardware Spec Comparison                   DARWIN OP      ROBOTIS OP2                  CPU      Intel Atom Z530@1.6GHz single core      Intel Atom N2600@1.6GHz dual core              RAM      1GB DDR2(fi xed capacity)      up to 4GB DDR3204-pin SO-DIMM module(user-replaceable)              Storage      4GB NAND flash IDE100(fixed capacity)      half-size mSATA module (32GB)(user-replaceable)              LAN speed      100 Mbps      1 Gbps              Installable OS      Linux only (32-bit)      any Linux release (32-bit)any Windows release (32-bit)              wi-fi      802.11g      802.11n (2.4GHz-only)      ROBOTIS OP2 is an affordable, miniature-humanoid-robot platform with advanced computational power, sophisticated sensors,high payload capacity, and dynamic motion ability to enable many exciting research and education activities.Safety InformationCaution ROBOTIS will not be responsible for any loss or damage whatsoever caused resulting fromuser’s negligence or misuse of the product.  Read the instruction carefully before getting started.  Not suitable for children under 15 years old.  Do not use any other tools other than those provided in the kit.  Keep the robot away from your face and body when the robot is operating.  Prevent from getting your fingers stuck between frames.  Do not place the robot near water, heat or fire.  Only use the battery and charger included in the kit.  Gears must be replaced after long excessive use.Package ContentsCheck your ROBOTIS OP2 package for the following items.Note Korean version offers a different type of charger.LayoutCharging BatteryPlease charge the battery pack according to the following procedure.Battery Hot SwapOne distinguishing feature of ROBOTIS OP2 is its ability to change the battery without the need of shutting down.To replace the battery during operation, please follow the procedures below.Quick StartPower OnExecute Demo ProgramRunning Demonstration ProgramsDemonstration Ready ModeAutonomous ModeInteractive Motion ModeVision Processing ModeCamera CalibrationPower OffProgramming GuideConnect to OP2Development EnvironmentSource CodeYou may find the source code directory at /robotis from ROBOTIS OP2’s PC.The pre-installed source code may be updated without prior notice. Please check for updates periodically.You may obtain updated source code at the following website https://sourceforge.net/projects/darwinop/files/We strongly suggest you to practice the included tutorial programs installed at ‘/robotis/Linux/project/tutorial’ in ROBOTIS OP2’s PC.FrameworkSoftware UtilitiesRecovery SoftwareThe supplied USB thumb drive contains the same software that comes preinstalled with ROBOTISOP2.You may obtain updates softwares at the link below.http://support.robotis.comSoftware updates may be performed without prior notice. Please check the site periodically forupdate information.Useful InformationYou may download other ROBOTIS OP2-related items at:https://sourceforge.net/projects/darwinop/files/  For any other inquiries send us an email.          International : contactus2@robotis.com      Korea : korea@robotis.com        Third party terminal client          PuTTY : http://www.chiark.greenend.org.uk/~sgtatham/putty/      VNC : http://www.realvnc.com/      ZOC : http://www.emtec.com/zoc/      RBrowser (for Mac users) : http://www.rbrowser.com/      Chicken of the VNC (for Mac users) : http://sourceforge.net/projects/cotvnc/      MiscellaneousSystem Block DiagramID MapWarrantyROBOTIS OP2 includes the following warranty:A. 90 days warranty against manufacture defects (RMA required) *B. Local Maintenance Service (by local partner) : 1 years **  Re-installation of S/W and fi rmware  Replacement for cable/gear/screw (RMA required – exempt from faulty return)  Replacement for faulty frame/cover/actuator (RMA required)C. Core System Maintenance Service (by ROBOTIS) : 1 years  Replacement for faulty PC/sub-boards (RMA required)  Maintenance for actuator/sub-boards (RMA required)  Maintenance for PC (RMA required, additional fee applies)D. Parts replacement for malfunctions during normal operation for 1 years.* Please download RMA (Return Material Authorization)(http://en.robotis.com/index/service_04.php?tab=4)No return shipping will be accepted without a RMA number issued by ROBOTIS.** Customers who require extended warranty period may purchase another “1 year warranty”from ROBOTIS before their standard warranty period is over.Important Notice:      Product registration is required for all customers. http://support.robotis.com        Parts replacement can only be done through RMA(Return Material Authorization) application.        After the initial 90 days, shipping fee is not covered under warranty.    Warranty does NOT cover ordinary wear/tear, any accident or damage caused by followings.          Physical damage equivalent to dropping the robot from 20cm or higher      Disabling system safety function (DYNAMIXEL Overload Shutdown)      Dangerous movement (jump, roll, fi ght) or excessive operation without rest      Any liquid or unauthorized chemical material to the robot      Unauthorized power or electric shock applied to the robot      Improvising core system programming area.        Direct check-up service  Evaluation, maintenance and quality assurance of assembled robot can be provided by ROBOTIS only.  RMA is required and additional fee may apply. Service will not be rendered for seriously customized hardware.Sub Controller(CM-740)  Download ZIP Framework  Download PDF Schematics  Download ZIP Reference GuideYou can also get information about the  gyroscope and accelerometer.            Feature      Specifications                  CPU      STMicroelectronics 32F103RE ARM Cortex 32-bit CPU (clocked @ 72MHz)(512KB Flash, 64KB SRAM )              Interface      1x LED , 1 x Buzzer              External ports      3 x ADC /I/O Ports              Sensor      3-axis gyroscope , 3-axis accelerometer, supply voltage sensor              Communication      USB Port, Serial Port , 5x TTL Ports (for Dynamixel)              Audio &amp;amp; Mic Amp      Audio amp gain : 20, mic amp gain : 2027              ETC      Dynamixel Power Control Unit, Head board port, Interface board port.              External supply voltage      8V ~ 14.8v              Current consumption      Maximum 200mA , Standby 130mA              Dimensions      80.0mm x 43.0mm x 20.0mm              Operation temperature      -65°C to +80°C              Weight      26g      Control TableControl Table consists of data regarding the current status and operation of CM-740. The user can control CM-740 by changing data of Control Table via Instruction packet.EEPROM and RAMData in RAM area is reset to initial values whenever the power is turned on while data in EEPROM area is kept once values are set even if the power is turned off.AddressRepresents the location of data. To read from or write data to the control table the user should assign the correct address in the Instruction packet.AccessCM-740 has two kinds of data: Read-only data, used mainly for sensing, and read-and-write data used for driving.Initial ValueIn case of data in the EEPROM Area, the initial values on the right side of the below Control Table are the factory default settings.In case of data in the RAM Area, the initial values on the right side of the following control table are the ones when the power is turned on.Highest/Lowest ByteIn the Control table, some data share the same name, but they are attached with (L) or (H) at the end of each name to distinguish the address. This data requires 16-bit, but it is divided into 8bit each for the addresses (low) and (high). These two addresses should be written with one Instruction Packet simutaneously.EEPROM Area            Address      Name      Description      Access      Init Value                  0 (0X00)      Model Number(L)      model number low byte      R      0(0X00)              1 (0X01)      Model Number(H)      model number high byte      R      116 (0X74)              2 (0X02)      Version of Firmware      firmware version      R      -              3 (0X03)      ID      Dynamixel ID      RW      200 (0XC8)              4 (0X04)      Baud Rate      Dynamixel baud rate      RW      1 (0X01)              5 (0X05)      Return Delay Time      Return Delay Time      RW      0 (0X0)              16 (0X10)      Status Return Level      Status Return Level      RW      2 (0X02)      RAM Area            Address      Name      Description      Access      Init Value                  24 (0X18)      Dynamixel Power      Dynamixel On/Off      RW      0 (0X00)              25 (0X19)      LED Pannel      LED Pannel On/Off      RW      0 (0X00)              26 (0X1A)      LED 5 (L)      LED 5 low byte      RW      0 (0X00)              27 (0X1B)      LED 5 (H)      LED 5 high byte      RW      0 (0X01)              28 (0X1C)      LED 6 (L)      LED 6 low byte      RW      0 (0X00)              29 (0X1D)      LED 6 (H)      LED 6 high byte      RW      0 (0X01)              30 (0X1E)      Button      Button status      R      -              38 (0X26)      Gyro_Z(L)      Gyroscope Z-axis low byte      R      -              39 (0X27)      Gyro_Z(H)      Gyroscope Z-axis high byte      R      -              40 (0X28)      Gyro_Y(L)      Gyroscope Y-axis low byte      R      -              41 (0X29)      Gyro_Y(H)      Gyroscope Y-axis high byte      R      -              42 (0X2A)      Gyro_X(L)      Gyroscope X-axis low byte      R      -              43 (0X2B)      Gyro_X(H)      Gyroscope X-axis high byte      R      -              44 (0X2C)      ACC_X(L)      Accelerometer X-axis low byte      R      -              45 (0X2D)      ACC_X(H)      Accelerometer X-axis high byte      R      -              46 (0X2E)      ACC_Y(L)      Accelerometer Y-axis low byte      R      -              47 (0X2F)      ACC_Y(H)      Accelerometer Y-axis high byte      R      -              48 (0X30)      ACC_Z(L)      Accelerometer Z-axis low byte      R      -              49 (0x31)      ACC_Z(H)      Accelerometer Z-axis high byte      R      -              50 (0X32)      Present Voltage      Current Voltage      R      -              51 (0X33)      MIC 1 (L)      Mic 1 low byte      R      -              52(0x34)      MIC 1 (H)      Mic 1 high byte      R      -              53(0x35)      ADC 2(L)      ADC channel 2 low byte      R      -              54(0x36)      ADC 2(H)      ADC channel 2 high byte      R      -              55(0x37)      ADC 3(L)      ADC channel 3 low byte      R      -              56(0x38)      ADC 3(H)      ADC channel 3 high vyte      R      -              57(0x39)      ADC 4(L)      ADC channel 4 low byte      R      -              58(0x3A)      ADC 4(H)      ADC channel 4 high byte      R      -              59(0x3B)      ADC 5(L)      ADC channel 5 low byte      R      -              60(0x3C)      ADC 5(H)      ADC channel 5 high byte      R      -              61(0x3D)      ADC 6(L)      ADC channel 6 low byte      R      -              62(0x3E)      ADC 6(H)      ADC channel 6 high byte      R      -              63(0x3F)      ADC 7(L)      ADC channel 7 low byte      R      -              64(0x40)      ADC 7(H)      ADC channel 7 high byte      R      -              65(0x41)      ADC 8(L)      ADC channel 8 low byte      R      -              66(0x42)      ADC 8(H)      ADC channel 8 high byte      R      -              67(0x43)      MIC 2 (L)      Mic 2 low byte      R      -              68(0x44)      MIC 2 (H)      Mic 2 high byte      R      -              69(0x45)      ADC 10(L)      ADC channel 10 low byte      R      -              70(0x46)      ADC 10(H)      ADC channel 10 high byte      R      -              71(0x47)      ADC 11(L)      ADC channel 11 low byte      R      -              72(0x48)      ADC 11(H)      ADC channel 11 high byte      R      -              73(0x49)      ADC 12(L)      ADC channel 12 low byte      R      -              74(0x4A)      ADC 12(H)      ADC channel 12 high byte      R      -              75(0x4B)      ADC 13(L)      ADC channel 13 low byte      R      -              76(0x4C)      ADC 13(H)      ADC channel 13 high byte      R      -              77(0x4D)      ADC 14(L)      ADC channel 14 low byte      R      -              78(0x4E)      ADC 14(H)      ADC channel 14 high byte      R      -              79(0x4F)      ADC 15(L)      ADC channel 15 low byte      R      -              80(0x50)      ADC 15(H)      ADC channel 15 high byte      R      -      Address Function HelpModel NumberRepresents the Model Number.Firmware VersionRepresents the firmware version.IDIs a unique number to identify Dynamixel.Values range from 0 (0x00) to 253 (0xFD), Value 254 (0xFE) is used as the Broadcast ID.If the Broadcast ID is used to transmit Instruction Packet, then it can command to all Dynamixels.Note Please be careful not to duplicate the ID of connected Dynamixels.Baud RateRepresents the communication speed. 0 (0x00) to 254 (0xFE) can be used for it. This speed is calculated by using the below formula.Speed(BPS) = 2000000/(Data+1)            Data      Set BPS      Target BPS      Tolerance                  1      1000000.0      1000000.0      0.000 %              3      500000.0      500000.0      0.000 %              4      400000.0      400000.0      0.000 %              7      250000.0      250000.0      0.000 %              9      200000.0      200000.0      0.000 %              16      117647.1      115200.0      -2.124 %              34      57142.9      57600.0      0.794 %              103      19230.8      19200.0      -0.160 %              207      9615.4      9600.0      -0.160 %      Note Maximum Baud Rate error of 3% is within the tolerance of UART communication.Return Delay TimeIs the delay time per data value that takes from the transmission of Instruction packet until the return of Status packet.0 (0x00) to 254 (0xFE) can be used. The delay time per data value is 2 microseconds (usec).If the data value is delayed by 10, 20 usec the initial value is 250 (0xFA) (i.e., 0.5 msec).Status Return LevelDecides how to return Status packet. There are three possibilities:            Value      Return of Status Packet                  0      No return against all commands (Except PING Command)              1      Return only for the READ command              2      Return for all commands      Note When Instruction packet is Broadcast ID, Status packet is not returned regardless of Status return level.Dynamixel Power            Value      Meaning                  0      Turn off the power of all Dynamixels connected to CM-740.              1      Turn on the power of all Dynamixels connected to CM-740.      LED Pannel            BIT      7 ~ 3      2      1      0                  Value      X      LED4      LED3      LED2      If each bit is SET, applicable LED lights up.If each bit is RESET, applicable LED goes off.EX) When the LED Panel = 3 (00000101), the LED4 and LED2 light up.LED5 / LED6            BIT      15      14 ~ 10      9 ~ 5      4 ~ 0                  Value      X      the value of blue light      the value of green light      the value of red light      LED HEAD/ LED EYE is 3 color LED. It can represent the value of 32 steps by colors.It can be represent by controling the value of light by colors.BUTTON STATUS            BIT      7 ~ 2      1      0                  Value      X      the state value of START button      the state value of MODE button      It is the value which represents the state of buttons.If the bit is SET, it represents that the button is pressed.If the bit is RESET, it represents that the button isn’t pressed.GYRO / ACCThe following picture is the direction of axis at CM-740.The Gyroscope and Accelerometer is 10mm distant respectively from the central axis of Dawin.  The positions of central axis and sensor at Dawin  Gyroscope  Accelerometer                                    The Gyroscope axis in the ROBOTIS-OP2      The Accelerometer axis in ROBOTIS-OP2      GYRO_X, GYRO_Y, GYRO_ZThey represent the angular velocity values of X-axis, Y-axis, Z-axis respectively.The observable maximum velocity is -500DPS ~ 500DPS.The following graph shows the process that angular velocity represents to value in reality.ACC_X, ACC_Y, ACC_ZThey represent the acceleration values of X-axis, Y-axis, Z-axis respectively.The observable maximum velocity is -4g ~ +4g.The following graph shows the process that acceleration represents to value in reality.PRESENT VOLTAGEPresent (input) voltage.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)MIC 1 , MIC 2They are the wave values of MIC on the ears at HEAD PCB.It is the value of ADC, and its range is 0~1023.ADC 2 ~ ADC15They are ADC values of ADC channel connected external port(J8).CM-740 has ADC of 10BIT RESOLUTION.Its range is 0 ~ 1,023",
        "url": " http://localhost:4000/docs/en/platform/op2/getting_started/"
      } ,
  
      "docs-en-platform-op3-getting-started":  {
        "title": "ROBOTIS-OP3",
      "content"	 : "IntroductionWhat is OP3?Open Platform Humanoid ProjectROBOTIS OP3 is the latest miniature humanoid robot platform from ROBOTIS that succeeds ROBOTIS OP(aka “DARWIN OP”) and ROBOTIS OP2(aka “DARWIN 2” or “DARWIN OP2”). One of the noticeable changes of ROBOTIS OP3 is made in actuator by replacing MX-28 actuators with XM-430 actuators. Another significant change is also made in internal PC by replacing Atom based SBC(Single Board Computer) with Intel i3 based NUC. With the XM-430 which supports Dynamixel Protocol 2.0, OP3 has improved torque along with current based control and loaded with various functions. Intel NUC allows highly improved computing power that supports 64-bit OS and Bluetooth 4.1. In addition, OP3 is developed under ROS(Robot Operating System) to utilize various packages in ROS ecosystem. All these hardware improvements and ROS support allows developers to focus more on research and development compare to the preceding robots.  Physical Differences from ROBOTIS OP2          ROBOTIS OP3 does not come with a design skin, however, 3D modeling files are provided in order to support 3D print for the default design skin.          OP3 looks quite different from OP2 as default skin is not provided. Users can download design skin files.Downloaded skin files can be used for 3D printing.ROBOTIS OP3 is loaded Intel NUC with i3 processor to achieve significant improvement in computing power.OP3 supports HDMI and Display Port(DP) while OP2 only supports mini HDMI.There are 1 RGB LED and 3 LEDs, 4 buttons on the back of OP3. From left to right, each button stands for Mode, Start, User, Reset.  Here are some mechanical differences :          New mini HDMI port connector on the ROBOTIS OP2      Location of the ports      ROBOTIS OP3 no longer has the 3.5mm microphone and audio jacks                  Moderate changes have been made in the back panel of OP3.        Advantages of developing with ROBOTIS OP3 compared to ROBOTIS OP2As mentioned above, there are several changes in OP3 and advantages of the new OP3 are listed as follows:          New Actuators(higher torque)      Increase of SSD capacity      Increase of RAM capacity      Dramatic improvement in computational power      Replacing Mini HDMI with HDMI      User friendly sub-controller(CM-730 → OpenCR)      Improved camera        Hardware Spec Comparison                   ROBOTIS OP2      ROBOTIS OP3                  Actuator      MX-28      XM430-W350              CPU      Intel Atom N2600@1.6GHz dual core      Intel Core i3 processordual core              RAM      2GB DDR3 SODIMM 1066MHz(user-replaceable)      8GB DDR4 SODIMMs 2133MHz(32GB maximum)(user-replaceable)              Storage      half-size mSATA module (32GB)(user-replaceable)      M.2 SSD module (128GB)(user-replaceable)              Compatible OS      any Linux release (32-bit)any Windows release (32-bit)      any Linux release (32-bit/64-bit)any Windows release (32-bit/64-bit)              Networking      Realtek 10/100/1000 Mbps Ethernet802.11n (2.4GHz-only)      Intel 10/100/1000 Mbps Ethernet802.11ac (2.4GHz, 5GHz)Bluetooth 4.1              Camera      Logitech C905 (1600x1200)      Logitech C920 (1920x1080)      ROBOTIS OP3 is an affordable, miniature humanoid robot platform with advanced computational power, sophisticated sensors, high payload capacity, and dynamic motion ability to enable many exciting research and education activities.  Actuator Spec Comparisons                   MX-28      XM430-W350                  Weight      77g      82g              Dimension      35.6mm x 50.6mm x 35.5mm      28.5mm x 46.5mm x 34.0mm              Gear Ratio      193 : 1      353.5 : 1              Stall Torque      2.5 N.m      4.1 N.m              Stall Current      1.4 A      2.3 A              No Load Speed      55 RPM      46 RPM              Protocol      1.0 Only      1.0, 2.0        XM430 series actuator is easier to assemble and maintain as well as supporting various control algorithms.          Reduced size and increased torque      Metal case with integrated assembly bolt taps      Hollow back case with cable cover      6 operating modes      Current-based torque control      Profile control for smooth motion planning        ROBOTIS-OP3 Specifications                   ROBOTIS OP3                  Height      About 510mm              Weight      About 3.5kg (without skin cover)              DOF      20              Actuator      XM430-W350-R              Main Controller      INTEL NUC i3Intel Core i3 processor dual core8GB RAM DDR4 SODIMMs 2133MHz128GB M.2 SSD              Sub Controller      OpenCR              Camera      Logitech C920 HD Pro Webcam              IMU Sensor      3-Axis Gyroscope, 3-Axis Accelerometer, 3-Axis Magnetometer              Battery      Lipo 3cell 11.1v 1800mA              IO Device      RGB LED x 1, LED x 3 (Red, Green, Blue), Button x 4, Speaker x 1              Installable OS      any Linux release (32-bit/64-bit)any Windows release (32-bit/64-bit)              DevelopmentEnvironment      OS : Linux (64-bit)C++, ROS, Dynamixel SDK      Safety InformationCaution ROBOTIS will not be responsible for any loss or damage whatsoever caused resulting fromuser’s negligence or misuse of the product.  Read the instruction carefully before getting started.  Not suitable for children under 15 years old.  Do not use any other tools other than those provided in the kit.  Keep the robot away from your face and body when the robot is operating.  Prevent from getting your fingers stuck between frames.  Do not place the robot near water, heat or fire.  Only use the battery and charger included in the kit.  Gears must be replaced after long excessive use.Package ContentsCheck your ROBOTIS OP3 package for the following items.LayoutCaution Layout of the front and back panel is subject to change depends on the selected built-in PC.Charging BatteryPlease charge the battery pack according to the following procedure.Battery Hot SwapThe battery of ROBOTIS-OP3 can be replaced without shutting down the robot.To replace battery during operation, please follow the below procedure.Quick StartPower OnThe following procedure takes you through the set up process.Warning Manually configuring ROBOTIS OP3’s ready pose other than the above pose may cause mechanical damages when posing for initial stance.Connect the AC plug of the power adapter into a power outlet and plug the DC connector into ROBOTIS OP3’s DC jack.The DC jack is located on the back panel of ROBOTIS OP3.You can select either the DC power supply or battery pack to power ROBOTIS OP3.If you want to use the battery pack, please follow the below procedure.  Ensure the battery pack is fully charged.  Open the battery compartment door (unscrew the thumbscrew) and insert the battery pack.  Connect the battery cable to the battery power jack.  Close and secure the compartment door (screw the thumbscrew) afterwards.  Disconnect DC power supply.Note To prevent unexpected shutdown, ensure that ROBOTIS OP3 is connected with at least one active power source.Pushing the power switch to the right will power up the ROBOTIS OP3 (to the right : power on, to the left : power off)Once Power is on, the following procedure will be sequentially executed.Execute Demo ProgramRunning Demonstration ProgramsROBOTIS OP3 is loaded with the following pre-configured operation modes :  Demonstration-Ready Mode  Autonomous Soccer Mode  Vision Processing Mode  Interactive Motion ModeDemonstration-Ready mode is set as a default mode when ROBOTIS OP3 is turned on.Press MODE button to navigate the mode.ROBOTIS OP3 will verbally announce the selected mode when pressing the button.The indicating LED will also change its color to the corresponding operation mode.Press START button to run the selected mode.After pressing START ROBOTIS OP3 will stand up and begin operations.RESET ButtonThe RESET button only resets actuators and the OpenCR sub-controller, not the entire system. Please keep in mind that the demo program is still running in the main controller when RESET button is pressed.Pressing RESET button will disable torque on all actuator. It is highly recommended to set ROBOTIS OP3 for kneeling pose before pressing RESET button or hold ROBOTIS OP3 using its carrying handle.Demonstration Ready ModeThe Demonstration-Ready mode is a default mode when ROBOTIS OP3 is turned on. LED 1 (red), LED 2 (green) and LED 3 (blue) will be lit.The chest LED will switch the color from red to green while ROBOTIS OP3 verbally announces “Demonstration-ready mode”.Now ROBOTIS OP3 is ready for action!ROBOTIS OP3 stays in kneeling pose and does not move while in this mode.This is the most recommended mode to change the power source.Autonomous ModeROBOTIS OP3 follows and kicks a red ball (user can change the color of ball) and plays soccer by itself.If ROBOTIS OP3 falls down (either on its back or belly) it will stand up and resume ball tracking, then pursuit.  Start Autonomous Soccer Mode                  Press MODE button until LED1(red) is lit.  ROBOTIS OP3 will verbally announce “Autonomous soccer mode”.                            Press START button to begin.  ROBOTIS OP3 will stand up and walk around to find the ball.ROBOTIS-OP3 will verbally announce “Start soccer demonstration”                    When ROBOTIS OP3 sees a ball with the matching color, it will walk toward the ball.  If ROBOTIS OP3 gets close enough to the ball, ROBOTIS OP3 will kick the ball with one of its feet.  If ROBOTIS OP3 falls down during pursuit or kick, it will stand up and resume.              Stop Autonomous Soccer Mode          Press MODE button until LED 3(blue) is lit. ROBOTIS OP3 will verbally announce “Interactive motion mode”.      Interactive Motion ModeROBOTIS OP3 performs pre-programmed motions sequentially while talking.  Start Interactive Motion Mode                  Press MODE button until LED 3(blue) is lit. ROBOTIS OP3 will verbally announce “Interactive motion mode”.                    Press START button to begin. ROBOTIS OP3 will stand up and announce “Start motion demonstration”.      ROBOTIS OP3 will perform following actions sequentially.            Stop Interactive Motion Mode          If MODE button is pressed for at least 2 seconds, ROBOTIS-OP3 will return to demonstration-ready mode.      Vision Processing ModeThe new vision processing demo for ROBOTIS OP3 is “Face detection and tracking”. ROBOTIS OP3 is developed with ROS.Therefore various ROS packages such as face detecting package can be applied for vision processing mode to track recognized face in front of the robot.Please refer the below website link.Face detecting : https://github.com/phil333/face_detection  Start Vision Processing Mode                  Press MODE button until LED 2(green) is lit. ROBOTIS OP3 will verbally announce “Vision processing mode”.                    Press START button to begin. ROBOTIS OP3 will verbally announce “Start vision processing demonstration” and stand up.      The target face should be located approximately 90cm(36”) away from ROBOTIS OP3.  If ROBOTIS OP3 detects the target face, chest LED will be lit in white whereas the LED will be off if ROBOTIS OP3 doesn’t detect the face.  ROBOTIS OP3 will keep track on the first recognized target face.        Stop Vision Processing Mode          If MODE button is pressed for at least 2 seconds, ROBOTIS-OP3 will return to Demonstration-Ready mode.        ETC          Modifying parameters of the ‘face_detection’ package might improve recognition of the face. Please refer to the following website for more details.      face_detection package : https://github.com/ROBOTIS-GIT/face_detection      usb_cam package : http://wiki.ros.org/usb_cam      Camera CalibrationIf ambient light of ROBOTIS OP3 is either too dim or too bright, user can adjust camera setting for optimizing acquired image from the camera.The color of the ball for soccer demo can also be modified from the setting.Please refer to the wiki manual from below link.https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wikiPower OffPlease perform below procedures in order to shutdown the computer inside ROBOTIS OP3.      Press PC power button which is located on the bottom side of the chest. ROBOTIS OP3 will verbally announce “bye-bye” and initiate shutdown process.        When the internal computer of ROBOTIS OP3 is turned off, blue LED at the chest will be off. After the blue LED is turned off, shutdown the main power with the switch in the back of the robot.        If ROBOTIS OP3 does not announce “bye-bye” then you may need to force shutdown by holding the power button until the blue LED at the chest turns off.  Note If power supply is cut off before the blue LED is turned off, ROBOTIS OP3 may have problems in the next startup.Programming GuideConnect to OP3From your computer go to Wi-Fi Setting and set to obtain an IP address automatically using DHCP.Then connect to ROBOTIS OP3 wifi network(SSID : ROBOTIS-OP3-share). Password is 11111111.Example : SSH Client (for Windows)  Execute SSH client program (ex: PuTTY)  Input ROBOTIS OP3’s IP address: 10.42.0.1  Select SSH as a connection type and open the connection.  Input ROBOTIS OP3’s user name : robotis  Input ROBOTIS OP3’s Password : 111111Example: SSH Client (for Linux)  Open the terminal window.  Input the following SSH command with ROBOTIS OP3’s user name and IP address : $ ssh robotis@10.42.0.1  Input ROBOTIS OP3’s Password : 111111Example: VNC client (for Windows)  Users who are familiar to graphical interface may use remote desktop softwares.  Execute VNC client program (ex: Ultra VNC Viewer)  Input the ROBOTIS OP3’s IP address : 10.42.0.1  Input the ROBOTIS OP3’s Password : 111111Development EnvironmentThe following is the list of tools for source code development.  OS : Linux (64-bit)  Compiler : GNU project C and C++ Compiler, Catkin  Programming Language : C++For more detailed information, please refer to the ROBOTIS OP3 WIKI. https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wikiSource CodeYou may find the source code directory at /robotis from ROBOTIS OP3’s PC.The pre-installed source code may be updated without prior notice. Please check for updates periodically. You may obtain updated source code from the below GitHub links :  https://github.com/ROBOTIS-GIT/DynamixelSDK  https://github.com/ROBOTIS-GIT/ROBOTIS-Framework  https://github.com/ROBOTIS-GIT/ROBOTIS-Framework-msgs  https://github.com/ROBOTIS-GIT/ROBOTIS-Math  https://github.com/ROBOTIS-GIT/ROBOTIS-OP3  https://github.com/ROBOTIS-GIT/ROBOTIS-OP3-Common  https://github.com/ROBOTIS-GIT/ROBOTIS-OP3-Demo  https://github.com/ROBOTIS-GIT/ROBOTIS-OP3-msgs  https://github.com/ROBOTIS-GIT/ROBOTIS-OP3-Tools  https://github.com/ROBOTIS-GIT/ROBOTIS-UtilityFrameworkThe following flow diagram represent class breakdown and data pipelines.You may modify the framework at “/home/robotis/catkin_ws/src/ROBOTIS-Framework”.For more information, please refer to the ROBOTIS OP3 WIKI.https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wikiSoftware UtilitiesUser who wishes to customize or diagnose ROBOTIS OP3 should establish a connection with the robot via SSH or Remote Desktop(VNC).The tools are located in the following directory :home/robotis/catkin_ws/src/ROBOTIS-OP3/ROBOTIS-OP3-ToolsIn the directory you can find code for :Recovery SoftwareThe supplied USB thumb drive contains the software pre-installed to ROBOTIS OP3.You may obtain updated software from the link below.https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wikiSoftware may be updated without prior notice. Please check for updates periodically.Useful InformationYou can download other ROBOTIS OP3-related items and more detailed information from the wiki manual.https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki  For any inquiries send us an email.          International : contactus2@robotis.com      Korea : korea@robotis.com        Third party terminal client          PuTTY : http://www.chiark.greenend.org.uk/~sgtatham/putty/      RealVNC : http://www.realvnc.com/      MiscellaneousSystem Block DiagramThe below diagram illustrates the overall system structure of ROBOTIS OP3.  Main Controller is powered by Intel i3 dual-core(Intel NUC i3)  Sub Controller is powered by STMicroelectronics Cortex-M7 32F746GT6 (clocked at 216MHz).  Camera          1080p Full HD movie recording      Carl Zeiss® optics with 20-step autofocus      Built-in dual stereo mics with noise reduction      H.264 video encoding      ID MapThe following diagram illustrates the default ID number of actuators in ROBOTIS OP3.WarrantyROBOTIS OP3 includes the following warranty:A. 90 days warranty against manufacture defects (RMA required) *B. Local Maintenance Service (by local partner) : 1 years **  Re-installation of S/W and firmware  Replacement for cable/gear/screw (RMA required – exempt from faulty return)  Replacement for faulty frame/cover/actuator (RMA required)C. Core System Maintenance Service (by ROBOTIS) : 1 years  Replacement for faulty PC/sub-boards (RMA required)  Maintenance for actuator/sub-boards (RMA required)  Maintenance for PC (RMA required, additional fee applies)D. Parts replacement for malfunctions during normal operation for 1 years.* Please download RMA (Return Material Authorization)(http://en.robotis.com/index/service_04.php?tab=4)No return shipping will be accepted without a RMA number issued by ROBOTIS.** Customers who require extended warranty period may purchase another “1 year warranty”from ROBOTIS before their standard warranty period is over.Important Notice:      Product registration is required for all customers. http://support.robotis.com        Parts replacement can only be done through RMA(Return Material Authorization) application.        After the initial 90 days, shipping fee is not covered under warranty.    Warranty does NOT cover ordinary wear/tear, any accident or damage caused by followings.          Physical damage equivalent to dropping the robot from 20cm or higher      Disabling system safety function (DYNAMIXEL Overload Shutdown)      Dangerous movement (jump, roll, fi ght) or excessive operation without rest      Any liquid or unauthorized chemical material to the robot      Unauthorized power or electric shock applied to the robot      Improvising core system programming area.        Direct check-up service  Evaluation, maintenance and quality assurance of assembled robot can be provided by ROBOTIS only.  RMA is required and additional fee may apply. Service will not be rendered for seriously customized hardware.Sub Controller(OpenCR)Control TableControl Table consists of data regarding the current status and operation of OpenCR. The user can control OpenCR by changing data of Control Table via Instruction packet.EEPROM and RAMData in RAM area is reset to initial values whenever the power is turned on while data in EEPROM area is kept once values are set even if the power is turned off.AddressRepresents the location of data. To read from or write data to the control table the user should assign the correct address in the Instruction packet.AccessOpenCR has two kinds of data: Read-only data, used mainly for sensing, and read-and-write data used for driving.Initial ValueIn case of data in the EEPROM Area, the initial values on the right side of the below Control Table are the factory default settings.In case of data in the RAM Area, the initial values on the right side of the following control table are the ones when the power is turned on.Highest/Lowest ByteIn the Control table, some data share the same name, but they are attached with (L) or (H) at the end of each name to distinguish the address. This data requires 16-bit, but it is divided into 8bit each for the addresses (low) and (high). These two addresses should be written with one Instruction Packet simutaneously.EEPROM Area            Address      Name      Description      Access      Init Value                  0 (0X00)      Model Number(L)      model number low byte      R      0(0X00)              1 (0X01)      Model Number(H)      model number high byte      R      116 (0X74)              2 (0X02)      Version of Firmware      firmware version      R      -              3 (0X03)      ID      OpenCR ID      RW      200 (0XC8)              4 (0X04)      Baud Rate      Dynamixel baud rate      RW      1 (0X01)              5 (0X05)      Return Delay Time      Return Delay Time      RW      0 (0X0)              16 (0X10)      Status Return Level      Status Return Level      RW      0 (0X00)      RAM Area            Address      Name      Description      Access      Init Value                  24 (0X18)      Dynamixel Power      Dynamixel On/Off      RW      0 (0X00)              25 (0X19)      LED      LED Pannel On/Off      RW      0 (0X00)              26 (0X1A)      LED_RGB(L)      LED 5 low byte      RW      0 (0X00)              27 (0X1B)      LED_RGB(H)      LED 5 high byte      RW      0 (0X00)              28 (0X1C)      Buzzer(L)      LED 6 low byte      RW      0 (0X00)              29 (0X1D)      Buzzer(H)      LED 6 high byte      RW      0 (0X00)              30 (0X1E)      Button      Button status      R      -              31 (0X1F)      Voltage      Power Voltage      R      -              32 (0X20)      Gyro_Z(L)      Gyroscope Z-axis low byte      R      -              33 (0X21)      Gyro_Z(H)      Gyroscope Z-axis high byte      R      -              34 (0X22)      Gyro_Y(L)      Gyroscope Y-axis low byte      R      -              35 (0X23)      Gyro_Y(H)      Gyroscope Y-axis high byte      R      -              36 (0X24)      Gyro_X(L)      Gyroscope X-axis low byte      R      -              37 (0X25)      Gyro_X(H)      Gyroscope X-axis high byte      R      -              38 (0X26)      ACC_X(L)      Accelerometer X-axis low byte      R      -              39 (0X27)      ACC_X(H)      Accelerometer X-axis high byte      R      -              40 (0X28)      ACC_Y(L)      Accelerometer Y-axis low byte      R      -              41 (0X29)      ACC_Y(H)      Accelerometer Y-axis high byte      R      -              42 (0X2A)      ACC_Z(L)      Accelerometer Z-axis low byte      R      -              43 (0X2B)      ACC_Z(H)      Accelerometer Z-axis high byte      R      -              44 (0X2C)      Roll(L)      IMU Roll low byte      R      -              45 (0X2D)      Roll(H)      IMU Roll high byte      R      -              46 (0X2E)      Pitch(L)      IMU Pitch low byte      R      -              47 (0X2F)      Pitch(H)      IMU Pitch high byte      R      -              48 (0X30)      Yaw(L)      IMU Yaw low byte      R      -              49 (0x31)      Yaw(H)      IMU Yaw high byte      R      -              50 (0X32)      IMU_Control      IMU Control      RW      0x00      Address Function HelpModel NumberRepresents the Model Number.Firmware VersionRepresents the firmware version.IDIs a unique number to identify Dynamixel.Values range from 0 (0x00) to 252 (0xFC), Value 254 (0xFE) is used as the Broadcast ID.If the Broadcast ID is used to transmit Instruction Packet, then it can command to all Dynamixels.Note Do NOT assign an identical ID for DYNAMIXELs in the same network.Baud RateRepresents the communication speed. 0 (0x00) to 254 (0xFE) can be used for it. This speed is calculated by using the below formula.Speed(BPS) = 2000000/(Data+1)            Data      Set BPS      Target BPS      Tolerance                  1      1000000.0      1000000.0      0.000 %              3      500000.0      500000.0      0.000 %              4      400000.0      400000.0      0.000 %              7      250000.0      250000.0      0.000 %              9      200000.0      200000.0      0.000 %              16      117647.1      115200.0      -2.124 %              34      57142.9      57600.0      0.794 %              103      19230.8      19200.0      -0.160 %              207      9615.4      9600.0      -0.160 %      Note Maximum Baud Rate error of 3% is within the tolerance of UART communication.Return Delay TimeReturn Delay Time will set a timer to hold a Status Packet transmission for a received Instruction Packet.This data has a multiplier of 2μsec, therefore set value will be multiplied by 2 microseconds.For example, if Return Delay Time is set to 10, a Status Packet will be transmitted after 20 microseconds after receiving an Instruction Packet.Available data values range from 0 (0x00) to 254 (0xFE).Status Return LevelStatus Return Level decides whether to return a Status Packet or not for an Instruction Packet.There are three options as below table.If an Instruction Packet has a Broadcast ID, Status Packet will not be returned regardless of Status Return Level.            Value      Return of Status Packet                  0      No return against all commands (Except PING Command)              1      Return only for the READ command              2      Return for all commands      Note When Instruction packet is Broadcast ID, Status packet is not returned regardless of Status return level.Dynamixel Power            Value      Meaning                  0      Turn off the power of all Dynamixels connected to OpenCR.              1      Turn on the power of all Dynamixels connected to OpenCR.      LED Pannel            BIT      7 ~ 3      2      1      0                  Value      X      LED3      LED2      LED1      For each set bit, corresponding LED will be turned on.For each reset bit, corresponding LED will be turned off.LED_RGB            BIT      15      14 ~ 10      9 ~ 5      4 ~ 0                  Value      X      LED_B      LED_G      LED_R      Chest LED is a tricolor LED and the color can be represented with RGB values.Buzzer            Value      Description                  0 ~ 65535      Frequency(Hz) of Buzzer      If the Buzzer value is set to 0, the buzzer will be turned off.BUTTON STATUS            BIT      7 ~ 4      3      2      1      0                  Value      X      BUTTON_S4      BUTTON_S3      BUTTON_S2      BUTTON_S1      For each bit set to 1, the button is being pressed.For each bit set to 0, the button is released.VOLTAGEThis value stands for the input voltage of the controller with a multiplier of 10.For example, when 10V is supplied to the controller, the Voltage value will be 100.GYRO X/Y/ZThe following image represents the direction of Gyro axis of OpenCR.Each arrow represents the orientation of gyroscope axis.The data range is -2000dps ~ +2000dps.The following graph shows relation between actual data value and angular velocity value.Acceleration X/Y/ZThe following picture represents the direction of accelerometer axis of OpenCR.Each arrow represents the orientation of accelerometer axis.The data range is -2g ~ +2g.The following graph shows relation between actual data value and acceleration value.IMU_ControlThis data controls roll / pitch / yaw offset values for the IMU sensor.            BIT      7 ~ 4      3      2      1      0                  Value      X      Gyro      Yaw      Pitch      Roll      For each bit set to 1, corresponding roll, pitch, yaw, gyro values will be used for calculating offset values.The calculation will take for 2 seconds and then each bit will be reset to 0.GPIO Pin Assignments            Pin      Assignments                  PIN_LED_R      Red LED pin              PIN_LED_G      Green LED pin              PIN_LED_B      Blue LED pin              PIN_LED_1      LED output 1              PIN_LED_2      LED output 2              PIN_LED_3      LED output 3              PIN_BUTTON_S1      Button Input S1              PIN_BUTTON_S2      Button Input S2              PIN_BUTTON_S3      Button Input S3              PIN_BUTTON_S4      Button Input S4 (Reset Dynamixel Power)      ",
        "url": " http://localhost:4000/docs/en/platform/op3/getting_started/"
      } ,
  
      "docs-en-platform-thormang3-getting-started":  {
        "title": "THORMANG3",
      "content"	 : "IntroductionCongratulations on purchasing THORMANG.THORMANG will lead you to the robot world with virtually unlimited research possibilities and opportunities.Read this guide thouroughly before getting with THORMANG.THORMANG3 User Guide Wiki  Download ZIP thormang3_stp.zip  Download ZIP sim_for_thormang3_stl.zipWhat is THORMANG3?THOR (Tactical Hazardous Operations Robot) is an affordable, full size humanoid robot platform with advancedcomputational power, sophisticated sensors, high payload capacity, and dynamic motion abilities to enable many exciting researches and educational activities.Package Contents  THORMANG3(fully-assembled) × 1  Battery packs(in robot) × 1  Battery charger × 1  Wrench set × 1  Screwdrivers × 2  Spare cables  Spare bolts and nuts  USB ×1  Carrying Case × 1  Carabiner and rope × 2  Lift × 1  Wireless (D-Link DIR-806A) × 1LayoutSpecificationsHardware            Feature      Description                  DOF      29              Actuator      200W x 10 / 100W x 11 / 20W x 8              Computer      Intel® NUC with Intel® Core™ i5 Processor(DDR4 RAM 8GB / M.2 SSD 128GB) x2              Wireless router      Dlink DIR-806A x 1              Sensor      Logitech C920 HD Camera x 1Intel Realsense(Option) x 1Hokuyo UTM-30LX-EW(Option) x 1F/T: ATi Mini58-SI-2800-120 x 2IMU: MicroSrain 3DM-GX4-25 x 1              Battery      22V, 22000mA x 118.5V, 11000mA x 1              Height      137.5cm              Weight      42Kg      SoftwareThe followings are source code development environments.  OS : Linux (Ubuntu LTS 64-bit) with ROS (Robot Operating System)  Compiler : GNU project C and C++ Compiler  Programming Language : C++Safety InformationROBOTIS is not responsible for any damages or losses resulting from any accidents caused by user’s negligence.  Read the instructions carefully before getting started.  Parental guide is necessary for users under 15 years old.  Do not use tools other than those provided in the kit.  Keep away from the action radius of the robot when the robot is moving.  Prevent from getting your fingers stuck in any moving parts.  Do not keep the robot near water, heat, or fire.  Do not use batteries or chargers other than provided in the kit.  Gears must be replaced after long excessive use.Quick StartUnpacking  Open the case and remove the sponge. Red dot Direction of the robot’s head  Take out shock absorption sponge, Charger supply, Consumables box.  Close the case. The head should face up. Red dot Direction of the robot’s head  Open the box and hang the carabiners on the lift  Hang the i-bolt on the carabiners. Drag the upper body out of the case. Yellow dot Location of the i-bolt  The robot will come out naturally via the lift. Please use your hands to take out the robot’s legs.  Raise the lift and take out the battery charger box. Yellow square is the Battery charger boxPower On  Hang THORMANG on the lift. Raise THORMANG’s feet off the ground.  (Using power supply) Plug into the power supply(18V, over 10A) to provide power to pc cable.  Plug into the power supply(24V, over 30A) to provide power to body cable(Using Battery Pack instead of the power supply)  You can select either the power supply or battery pack to supply power on THORMANG.  If you want to use the battery pack, please follow the steps below.          Ensure the battery packs are fully charged.      Open the battery compartment door (unscrew the thumbscrew) and insert the battery packs. Close and secure the compartment (screw the thumbscrew).      Connect battery connectors with two battery power connectors.        First, witch on three switches on the power board, and then turn on the MPC and PPC.  Release the E-stop button. If the E-stop button is pressed, the system is inactive.Connect to THORMANG3Open the network setting page of your computer and set the IP address of your computer to be in the same network with THROMANG3(Example: 10.17.3.xxx)  Connection Information          MPC (Motion PC) IP Address : 10.17.3.30      PPC (Perception PC) IP Address : 10.17.3.35      MPC &amp;amp; PPC user name : robotis      MPC &amp;amp; PPC password : 111111      Example with SSH Client (Windows)  Execute SSH client program (ex: PuTTY)  Input THOR-MANG 3 MPC’s IP address : 10.17.3.30  Select SSH as a connection type and then open the connection.  Input THOR-MANG 3 MPC’s user name : robotisInput THOR-MANG 3 MPC’s password : 111111ROBOTIS recommends users to connect with THROMANG3 via SSH client.Example: SSH Client (Ubuntu)  Open the terminal window.  Type the following SSH command with the MPC’s user name and IP address : $ ssh –l robotis 10.17.3.30  Input the MPC’s password : 111111Example: VNC client (Windows)  Execute VNC client program (e.g. Ultra VNC Viewer)  Input the MPC’s IP address : 10.17.3.30  Input the MPC’s password : 111111Basic OperationBasic Manipulation Demo  Connect to the PPC with SSH client program (IP: 10.17.3.35)  $ ssh 10.17.3.35 -l robotis (password: 111111)  The following command will execute the manipulation demo.  $ rosrun thormang3_manipulation_demo thormang3_manipulation_demo  5 commands are programmed and can be executed from  the terminal window.          demo 1 : go to initial pose (from base module)         $ rostopic pub -1 /robotis/manipulation_demo/command std_msgs/String &quot;ini_pose&quot;            demo 2 : set manipulation module    $ rostopic pub -1 /robotis/manipulation_demo/command std_msgs/String &quot;set_mode&quot;            demo 3 : go to manipulation base pose - Joint Space Control    $ rostopic pub -1 /robotis/manipulation_demo/command std_msgs/String &quot;base_pose&quot;            demo 4 : move right arm (without torso) - Task Space Control    $ rostopic pub -1 /robotis/manipulation_demo/command std_msgs/String &quot;right_arm&quot;            demo 5 : move left arm (with torso) - Task Space Control    $ rostopic pub -1 /robotis/manipulation_demo/command std_msgs/String &quot;left_arm&quot;      Basic Walking Simple Demo  Connect to the PPC with SSH client program (IP: 10.17.3.35).  $ ssh 10.17.3.35 -l robotis(password: 111111)     The following command will execute the walking demo.  $ rosrun thormang3_walking_demo thormang3_walking_demo     5 commands are programmed and can be executed from the terminal window.          demo 1 : go to initial pose (from base module)         $ rostopic pub -1 /robotis/walking_demo/command std_msgs/String &quot;ini_pose&quot;             - demo 2 : set manipulation module         $ rostopic pub -1 /robotis/walking_demo/command std_msgs/String &quot;set_mode&quot;            demo 3 : enable/disable balance algorithm – Balance ON / OFF    $ rostopic pub -1 /robotis/walking_demo/command std_msgs/String “balance_on”  $ rostopic pub -1 /robotis/walking_demo/command std_msgs/String “balance_off”            demo 4 : walk forward – One step forward walking (balance should be turned on)    $rostopic pub -1 /robotis/walking_demo/command std_msgs/String “forward”            demo 5 : walk backward – One step backward walking (balance should be turned on)    $ rostopic pub -1 /robotis/walking_demo/command std_msgs/String “backward”      Power Off  Hang THORMANG on the lift  Press the E-Stop button(Turn off the DXL power)  After both PCs are turned off, switch off three switches on the power board.Battery Charge  Connect all battery sockets in to the battery charger sockets.          Channel 1 connect the yellow jack      Channel 2 has a white terminal              Connect the DC power supply to the battery charger.      Insert the AC plug of the DC power supply into the power socket.            Power on and check the settings. See the below images. The different settings to match the settings by pressing the button.  Connect the white male charging connector to the female connector of the battery. Connect the battery’s white balance connector to the cell balance connector(6 pin connector).  Connect the yellow male charging connector to the female connector of the battery.  Connect the battery’s white balance connector to the cell balance connector(7 pin connector).  Select channel A. Then, press and hold the START button when the cursor is on the “Charge” option. When the screen changes, press ENTER to start charging battery if configuration is fine.  Select channel A. Then, press and hold the START button when the cursor is on the “Charge” option. When the screen changes, press ENTER to start charging battery if configuration is fine.  Melody is played (when the battery is fully charged), press the ESC button and unplug all connectors.Note Each 4 channels can be charged independently.Repacking  Put the battery charger box into the case.  Pack the robot by placing its feet first. Please be careful with the handling to prevent damage to the robot’s arm.  Bend the robot’s head forward. If the lift doesn’t go down, separate the lift and carabiners  Refer to the pictures: Put the sponge for arm and head protection.  Refer to the pictures for robot arm arrangement. Put the sponge for upper body and knee protection.  Cover the case with the sponge and close the lid.Getting StartedOS InstallUbuntu 16.04 LTS is installed on PCs in the THORMANG3 and the PC for Remote Control Version.Note Install Ubuntu DesktopNetwork SettingThis section explains how to configure the network for MPC(Motion PC) and PPC(Perception PC) of the robot, as well as the Wi-Fi switch and the OPC(Operating PC).Access Point SettingAccess Point(AP) Information  Model : D-Link DIR-806A  Account          user : admin      password : admin      Note DIR-806A Product ManualAP Server  Router Mode(Orange light)  IP Address : 10.17.3.1  WiFi Name (2.4G) : THORMANG-Sxx (xx : number)  WiFi Name (5G) : THORMANG-Sxx-5G (xx : number)  WiFi Password : 11111111AP in THORMANG3  Repeater Mode(Green light)PC SettingMPC (Motion PC)  IP Address : 10.17.3.30  Netmask : 255.255.255.0  Gateway : 10.17.3.1PPC (Perception PC)  IP Address : 10.17.3.35  Netmask : 255.255.255.0  Gateway : 10.17.3.1OPC (Operating PC)  IP Address : 10.17.3.100  Netmask : 255.255.255.0  Gateway : 10.17.3.1ROS InstallROS(Robot Operating System) is required in order to control THORMANG3. Currently THORMANG3 is developed and tested with Kinetic Kame version of ROS.Note Install ROSROS Environment SettingNote Environment Setting ReferenceNote ROS Network Setup ReferenceNetwork Setting ExampleAbove configuration has to be repeatedly done whenever a new terminal window is created. The following method will load configuration file when creating a terminal window. ROS Network setup is also performed when the configuration file is loaded.System configuration  PPC(Perception PC) : core PC          IP : 10.17.3.35        MPC(Motion PC)          IP : 10.17.3.30        OPC(Operation PC)          IP : 10.17.3.100      Example setting for PPC  Open the bash file with an editor to apply configuration.     $ gedit ~/.bashrc        Append below contents at the end of the .bashrc file.     # Set ROS Kinetic source /opt/ros/kinetic/setup.bash source ~/catkin_ws/devel/setup.bash ##### Set ROS Network #### # PPC CORE(10.17.3.35) export ROS_MASTER_URI=http://10.17.3.35:11311 # local ROS IP export ROS_IP=10.17.3.35        Use below command to apply modified configuration or open a new terminal window.     $ source ~/.bashrc      Example setting for MPC  Open the bash file with an editor to apply configuration.     $ gedit ~/.bashrc        Append below contents at the end of the .bashrc file.     # Set ROS Kinetic source /opt/ros/kinetic/setup.bash source ~/catkin_ws/devel/setup.bash ##### Set ROS Network #### # PPC CORE(10.17.3.35) export ROS_MASTER_URI=http://10.17.3.35:11311 # local ROS IP export ROS_IP=10.17.3.30        Use below command to apply modified configuration or open a new terminal window.     $ source ~/.bashrc      Example setting for OPC  Open the bash file with an editor to apply configuration.     $ gedit ~/.bashrc        Append below contents at the end of the .bashrc file.     # Set ROS Kinetic source /opt/ros/kinetic/setup.bash source ~/catkin_ws/devel/setup.bash ##### Set ROS Network #### # PPC CORE(10.17.3.35) export ROS_MASTER_URI=http://10.17.3.35:11311 # local ROS IP export ROS_IP=10.17.3.100        Use below command to apply modified configuration or open a new terminal window.     $ source ~/.bashrc      Time SynchronizationIn order to run the ROS on multiple PCs, each PC clock has to be synchronized. The following script file comes in handy for this synchronization procedure. PPC time becomes the reference for synchronization, and perform below procedures only for MPC and OPC.  Create the script file with an editor.     $ gedit ~/timesync        Copy and paste below contents to the script file     #! /bin/sh sudo date --set=&#39;-2 secs&#39; sudo ntpdate 10.17.3.35 sudo hwclock -w PPC(10.17.3.35)        Modify the script file permission(Add execute permission)     $ sudo chmod +x timesync        Run the script file to sync time for PPC, MPC and OPC.     $ ~/timesync        If NTP socket is running, Stop the ntp service and sync time.      $ sudo service ntp stop  $ ~/timesync      ROBOTIS ROS Package InstallThis section introduces how to install the ROBOTIS ROS Package for THORMANG3.  ROBOTIS-Framework : DXL SDK based Framework for ROBOTIS platforms  ROBOTIS-Framework-msgs : ROS Messages used in the ROBOTIS-Framework  ROBOTIS-THORMANG-MPC : ROS Packages for the Motion PC of THORMANG3  ROBOTIS-THORMANG-PPC : ROS Packages for the Perception PC of THORMANG3  ROBOTIS-THORMANG-OPC : ROS Packages for the Operating PC of THORMANG3  ROBOTIS-THORMANG-Common : Common ROS Packages for THORMANG3  ROBOTIS-THORMANG-msgs : ROS Messages used in the ROBOTIS THORMANG3 packages  ROBOTIS-THORMANG-TooMPC InstallationInstall the ROBOTIS ROS Package from the MPC. The ROS Package is installed by default.  Download Packages from GitHub to the source folder in the catkin workspace.     $ cd ~/catkin_ws/src $ git clone https://github.com/ROBOTIS-GIT/DynamixelSDK.git $ git clone https://github.com/ROBOTIS-GIT/ROBOTIS-Math.git $ git clone https://github.com/ROBOTIS-GIT/ROBOTIS-Framework.git $ git clone https://github.com/ROBOTIS-GIT/ROBOTIS-Framework-msgs.git $ git clone https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-MPC.git $ git clone https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-Common.git $ git clone https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-msgs.git $ git clone https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-Tools.git        After installing all dependent packages, go to the workspace and build. Use j1 option when building for the first time.     $ cd ~/catkin_ws $ catkin_make -j1        :heavy_exclamation_mark: Find ft_calibration_data.yaml and ft_data.yaml from provided USB and copy them to thormang3_manager/config/.PPC InstallationInstall the ROBOTIS ROS Package from the PPC. The ROS Package is installed by default.  Download Packages from GitHub to the source folder in the catkin workspace.     $ cd ~/catkin_ws/src $ git clone https://github.com/ROBOTIS-GIT/ROBOTIS-Framework-msgs.git $ git clone https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-msgs.git $ git clone https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-PPC.git        After installing all dependent packages, go to the workspace and build. Use j1 option when building for the first time.     $ cd ~/catkin_ws $ catkin_make -j1      OPC InstallationInstall the ROBOTIS ROS Package from the OPC.  Download Packages from GitHub to the source folder in the catkin workspace.     $ cd ~/catkin_ws/src $ git clone https://github.com/ROBOTIS-GIT/ROBOTIS-Framework-msgs.git $ git clone https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-OPC.git $ git clone https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-msgs.git $ git clone https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-Common.git            After installing all dependent packages, go to the workspace and build. Use j1 option when building for the first time.    Note Dependencies : qt-ros, map_server, nav_msgs, humanoid_nav_msgs, sbpl, octomap-ros    Note sbpl needs to be installed manually. Please follow the sbpl install instruction.     $ sudo apt install ros-kinetic-map-server $ sudo apt install ros-kinetic-humanoid-nav-msgs $ sudo apt install ros-kinetic-octomap ros-kinetic-octomap-msgs ros-kinetic-octomap-ros ros-kinetic-octomap-server $ sudo apt install ros-kinetic-qt-ros $ cd ~/catkin_ws/src $ git clone https://github.com/AravindaDP/humanoid_navigation.git $ cd ~/catkin_ws $ catkin_make -j1            Troubling Shot for libGL in 64bit Ubuntu    Note Reference : Link  UpdateWhen the source is modified, update &amp;amp; build is necessary.  Go to the folder where source is copied and run the pull command.(ex : ROBOTIS-THORMANG-OPC)     $ cd ~/catkin_ws/src/ROBOTIS-THORMANG-OPC $ git pull        Build     $ cd ~/catkin_ws $ catkin_make      Additional ROS Package InstallThe followings are required ROS Packages for THORMANG3 when installing desktop-full.ROS Packages for MPCInstall below ROS Packages from the MPC. The Package is installed by default.urg_node : ROS Package for Lidar$ cd ~/catkin_ws/src$ git clone https://github.com/ros-drivers/urg_node$ git clone https://github.com/ros-drivers/urg_c$ git clone https://github.com/ros-perception/laser_procNote Reference : http://wiki.ros.org/urg_nodeROS Packages for PPCInstall the below ROS Package from the PPC. The Package is installed by default.uvc_camera : ROS Package for USB camera$ sudo apt install libv4l-dev$ cd ~/catkin_ws/src$ git clone https://github.com/ktossell/camera_umdNote Reference : http://wiki.ros.org/uvc_camerarealsenseNote Reference : http://wiki.ros.org/RealSense",
        "url": " http://localhost:4000/docs/en/platform/thormang3/getting_started/"
      } ,
  
      "docs-en-software-opencm-ide-getting-started":  {
        "title": "OpenCM IDE",
      "content"	 : "IntroductionThe ROBOTIS OpenCM is a development Software and download tool for the OpenCM9.04 embedded board.Sources of the ROBOTIS OpenCM are released under licenses of their respective authors.Copyright (c)  ROBOTIS Co., Ltd. Modified or newly-created codes are released under the GNUGPL or LGPL licenses.For more information on the OpenCM9.04 refer to the Appendix section of the e-manuals.  GNU GPL  GNL LGPLOpenCM9.04 Software DownloadOpenCM9.04 uses the ROBOTIS OpenCM Integrated Developmental Environment (IDE) to allow users to program with ease.The download link for the ROBOTIS OpenCM IDE can be found below:  [Windows XP, Vista, 7, 8] 32bit/64bit : ROBOTIS-v1.0.4-windows.zip  [Mac OS X] Tested in OS X 10.12.2 : ROBOTIS_OpenCM-v1.0.3-macosx.zip  [Linux 64bit] Tested in Ubuntu 12.04 : ROBOTIS_OpenCM-v1.0.2-linux64.tgz  [Linux 32bit] Tested in Ubuntu 10.10 : ROBOTIS_OpenCM-v1.0.2-linux32.tgzGetting StartedInstall SoftwareWindowsPrepare the OpenCM9.04 and USB cableFor the cable you must prepare an Android phone/pad Micro-B type USB cable. (This is included as a component of the package for the B type, and for the A type you must purchase through an accessory kit. Android smartphone cable is supported.)  Micro-B USB cable : same as Android smartphoneDownload the Windows release for ROBOTIS OpenCM IDEDownload the latest version from the ROBOTIS E-manual(support.robotis.com) site and unzip the file in an adequate directory, which will contain the execution file ROBOTIS_OpenCM.exe and the USB driver folder(drivers) as shown below.  Directory structure after unzipping the fileNote that the ROBOTIS OpenCM is a portable program that only needs to be unzipped and executed without the need for any separate installation process. If you wish to remove the program, you simply need to delete the directly fully.Connect the OpenCM9.04 to the PCFor the installation of the USB driver, simply connect the OpenCM9.04 to the PC using the USB cable as shown below.  Figure 2.4.1-4 Connecting the OpenCM9.04 to the PCHowever we do recommend you avoid connecting to a USB hub that is in use with many other USB devices, and instead you connect to the PC directly. There can be rare cases in which if there is not enough electric current from the USB hub then the download can fail.Driver InstallationFor Window 8 or 10, go to “PC settings -&amp;gt; Update and recovery -&amp;gt; Recovery -&amp;gt; Advanced startup -&amp;gt; Troubleshoot -&amp;gt; Advanced options -&amp;gt; Startup Settings -&amp;gt; Restart -&amp;gt; Select 7) Disable driver signature enforcement, and then restart” and then install using Run as administrator.In the previous step, connecting the OpenCM board to the PC will make a device called “ROBOTIS Virtual COM Port” appear in the Device Manager.Right-click on that device and select “Update Driver Software”.Next select “Browse my computer for driver software”.Click on “Browse” and select the directory that you unzipped above(ROBOTISdrivers).Click Next and the installation proceeds.If the USB driver is installed successfully, a message will appear that says “Windows has successfully updated your driver software” as shown below.At this stage it is important to check in the Device Manager what COM Port number the ROBOTIS Virtual COM Port has just been installed as.Connecting to another USB port may change the COM Port number so if you connected to another port then check again and proceed to download.Run ROBOTIS_OpenCM.exeIn the unzipped directory(ROBOTIS) double-click on the file ROBOTIS_OpenCM.exe.This will execute the ROBOTIS OpenCM tool as shown below.Open the Example BlinkGo to File → Examples → 01.Basics → b_BlinkSelect the BoardIn Tools → Board, select ROBOTIS OpenCM9.04.Select the Serial PortMake sure you select the COM Port number that you checked in the previous step.Proceed to DownloadClick on the Download button as shown below. As the download begins the board’s green LED is continuously turned on. Once the download is complete the board resets and the Blink example is executed, and the LED blinks.Note If the power turns on for the board and the green LED is continuously turned on then restart the Download. Please refer to the Emergency Recovery Mode(Force Download) section.MAC OS XDownload the Mac OS X release for ROBOTIS OpenCMDownload the installation image file(dmg) for Mac OS X from the E-manual.When the download finishes, double-click on the dmg file below and proceed to Mount.After mounting, when an installation window appears, click on the Robotis icon with the mouse and drag it to Application.Then the installation will proceed as below.Run the ROBOTIS OpenCMUsing Finder, look in the Application folder to find the ROBOTIS.app application package and double-click on it to run the program.As in the figure below, select the Open button.The ROBOTIS OpenCM is executed as shown below.Open the Example BlinkGo to File → Examples → 01. Basics → b_BlinkSelect BoardSelect ROBOTIS OpenCM9.04.Select Serial Port.Select tty.usbmodemXXX. The number on the end is different for each PC.Proceed to DownloadClick on the Download button as shown below. As the download begins the board’s green LED is continuously turned on. Once the download is complete the board resets and the Blink example is executed, and the LED blinks.Note If the board’s green Status LED does not turn on even after clicking on the Download button, press on the User button and while keeping the button pressed connect the USB to the PC.Note If the power turns on for the board and the green LED is continuously turned on then restart the Download. Please refer to the Emergency Recovery Mode(Force Download) section.LinuxDownload the Linux release for ROBOTIS OpenCMIf the Linux you are using is 32bit then download the Linux 32 bit package, and if it is 64bit then download the Linux 64 bit package from the e-Manual.After downloading, use the following command to unzip the file. The description below is an example for when using 32bit.If you unzip the file it will create a ROBOTIS folder as shown below.Install JRE(Java Runtime Environment)Same as for Arduino, the ROBOTIS OpenCM tool is a program that has been developed using Java and therefore requires JRE(Java Runtime Environment). The Windows package includes JRE inside but the Linux version does not include it.If it is installed then proceed to the next step. The way to check if JRE is installed is to use java –version in Terminal as shown below.If you get a message as above then you need to install JAVA JRE(Java Runtime Environment) or JDK.Here is how you install openjdk-7-jre-headless.$sudo apt-get install openjdk-7-jreNow that Java JRE has been successfully installed, you can run ROBOTIS OpenCM.Install i386 Library (Linux 64bit)In order to use in Linux 64bit OS, you need to install ia32-libs.$sudo dpkg –add-architecture i386$sudo apt-get update$sudo apt-get install ia32-libsIf the installation completes successfully, the Processing trigger runs properly as shown below.Run ROBOTIS OpenCMAs shown below, double-clicking ROBOTIS_OpenCM or entering ./ROBOTIS_OpenCM in Terminal and pressing Enter will run the program.Click on the Execute button.Then the program will run as shown below.Open the Example BlinkGo to File → Examples → 01. Basics → b_BlinkSelect BoardIn Tools → Board, select ROBOTIS OpenCM9.04.Select Serial PortThe serial port is shown as ttyACMX, where X is a different number for each PC.The Linux/Mac OS X releases have the USB CDC Driver included in the kernel, so unlike the Windows release you can run the program right away without the need to install a driver separately.Proceed to DownloadClick on the Download button as shown below.As the download begins the board’s green LED is continuously turned on. Once the download is complete the board resets and the Blink example is executed, and the LED blinks.Note If the board’s green Status LED does not turn on even after clicking on the Download button, press on the User button and while keeping the button pressed connect the USB to the PC.Note If the power turns on for the board and the green LED is continuously turned on then restart the Download. Please refer to the Emergency Recovery Mode(Force Download) section.OpenCM IDERun the ProgramIf you run the program the following screen appears.            Item      Description                  Menu      You can select from File, Edit, Sketch, Tools, and Help.              Toolbar      You can select from a list of shortcut icons of frequently used functions.                    Executes only the compilation and prints a message on the status bar or console stating whether it was fail or success                    Executes compilation and proceeds to download right away. Make sure the board is connected when using this function                    Creates a new file                    Opens a file                    Saves the current file                    Runs the serial monitor              Editor      This is the field where you edit the source.              Status Bar      This is the field where it shows the progress of the requested function visually.              Console      Shows the current cursor location’s line number and the selected board and COM Port.              Tab Menu      This is the menu that you select when adding or removing a tab.      A Look at Some ExamplesThe ROBOTIS OpenCM IDE provides some simple examples of functions provided by the OpenCM hardware board, and you can check the File (e.g.)Examples menu to see the various examples shown below.Code Editing FunctionAuto Highlight FunctionWhen typing code, registered keywords will be highlighted in yellow or blue automatically (as opposed to the usual black) as shown below.Registered API will change colors as shown below, so that you can check if the name of the API you are trying to use is typed correctly.You can also modify or add to the Auto highlight function at any time in the keyword.txt file located in the directory below.Using the Auto Format FunctionBy using the function in Tools → Auto Format, codes that have been typed jumbled or messy are automatically organized neatly.Codes such as below are automatically organized neatly by pressing Ctrl+T.Adding and Removing CommentsSelect Edit → Comment/Uncomment as shown below or press the hotkey Ctrl+/ to comment the entire line, and press the hotkey again to uncomment the line.If you select a block as shown above and then press Ctrl+/ it will comment the entire block as shown below.If you press Ctrl+/ again it will uncomment the selected lines.Increase and Decrease IndentIf you select Edit → Increase Indent/Decrease Indent you can control the indentation level from the current cursor. You can also press the hotkeys Ctrl+} to move one tab to the right, or press Ctrl+} to move one tab to the left.Pressing Ctrl+} repeatedly will move the cursor to the right one tab at a time as shown below.Compile and DownloadAfter you write your code it is useful when programming to use the Compile menu in order to check that the code you wrote is grammatically correct and has no errors.If the build is successful then in the status window below in the build’s binary size section it will show the maximum binary size, and the share proportional to the size as 0%.If you have modified the codes in the Core directory shown below, you must delete the Object files that were previously created.ROBOTIShardwarerobotiscoresrobotisDo this by selecting the Tools → Clean Objects menu and then build again. It will take a long time to build the first time, but from the second time on it will be fast again since it will reuse the Object files from the first build.The Object files are saved in each corresponding board directory inside the Core directory shown below.If the whole code is compiled properly with no errors you can now download. Simply click on the down arrow and it will compile and download all at once.When the download finishes successfully there will be a message that says Done downloading in the status bar and the downloaded code will be executes directly in OpenCM9.04.Using the Serial MonitorROBOTIS OpenCM provides a terminal program, similar to Windows’s hyper terminal or TeraTerm, by default as an Add-on program.If you wish to communicate with the selected COM1 port then click on the serial monitor icon located on the upper-right side of the toolbar to open the serial monitor. You can also use the hotkey Ctrl + Shift + M to open the serial monitor.Precautions Regarding the Serial MonitorWhen OpenCM9.04 is downloading, USB communication will not be available. Do not open the serial monitor when downloading is in progress. ( If it is a different COM port then it does not matter.)PreferencesManage your settings preferences in File → Preferences.      Sketchbook location : This is the user’s default work directory. Sketch files will be saved and opened from this directory.            Editor language: This changes the font of the program to a different language.            Show verbose output during : If you check Compilation then it will show a detailed output during the compilation process. If you check Download then it will show a detailed output of the download process, after the compile has finished. Compile and download can become slower when using this option, so we recommend you do not use it unless it is essential to use it.  LibrariesInstalling LibrariesThe installation method of libraries is the same as for Arduino. The library’s path is inside the IDE folder as libraries. ( ROBOTISlibraries)In the case of Mac, access the path below.Documents/ROBOTIS/librariesAs above, organize the libraries folder so that inside there are files RC100.cpp, RC100.h with the same name as the folder RC100. You can put in code written with C file in the utility folder.The examples folder is for sketch examples composed of the corresponding library. Examples are also organized as folders, and the folder name and the ino file name must be the same to be recognized.Recovery ModeIf you are unable to download and the message “Board is not responding” shows up, please try using the recovery mode to force the download.If you force the download once, the board should be recovered and normal downloads will be possible again.Hold down the User Button on the OpenCM9.04 and connect the board to a PC using an USB cable.Please have any other power source disconnected, and just connect to the USB while having the User Button held down.  Hold down the User Button when entering recovery mode.When successful, the green LED should stay on as shown in the image below. When the download is completed the board will reset and the LED will turn off.If unable to download, you must remove any code that may disturb the USB interrupt in the code you wrote.ExamplesEEPROM(Flash)In the CPU of EEPROM(Flash) Library OpenCM9.04, which is STM32F103CB, there is a 128kbyte flash memory.The flash memory is where we save the programming in binary format and also run it. The flash memory is a non-volatile memory so even if the power is turned off the saved data does not disappear.However flash reads and writes data by unit of a page so it can be relatively inconvenient for saving one or two bytes.However its speed is fast. Therefore in OpenCM9.04 we have created a separate library called the EEPROM emulator to save user data in the unit of bytes.Example#include &quot;EEPROM.h&quot;int i;EEPROM CM9_EEPROM;void setup(){      CM9_EEPROM.begin();  Serial2.begin(57600);    Serial2.println(&quot;##### Start OpenCM9.04 EEPROM Memory Test ##############&quot;);}void loop(){    delay(1000);    for(i=0;i &amp;lt; 10;i++){        Serial2.print(&quot;EEPROMExample = &quot;);         Serial2.println(CM9_EEPROM.read(i), HEX);// read data from virtualaddress 0~9  }  if(Serial2.available()){        Serial2.read();           Serial2.println(&quot;******************EEPROM Writing Start *******************&quot;);         for(i=0; i&amp;lt;10;i++){      CM9_EEPROM.write(i,i*2);//      write i*2 to virtual address 0~9        }        }}If you compile the code above and download it, it will read the values of the EEPROM virtual addresses from 0~9 through Serial2 as shown below.Since there are no data all values will be printed as 0xffff.In contrast with the BKP, the initialization of the flash memory will set all bits to 1.Therefore 0xffff is printed. And pressing any key will input a value between 0~12 to the virtual addresses 0~9.Now press the Reset button to restart.Now we unplug the power and plug in again to check.Sensor ModuleAll Robotis sensor modules can be connected to 5-pin ports. Please refer to the OpenCM9.04 Hardware Manual for the connection method.For the A-type you will need to separately solder the 5-pin connector, but for the B-type and C-type the 5-pin connector will already be embedded.Please note that the pins assigned to the 5-pin are also shared with the 40-pin IO on both sides, so in the header you must not use the IO pins assigned to the ports used below.For example, if you connect the IR sensor to Port 1, you must not use Pins 2, 6, and 7 in the header.IR Sensor Module      Connectivity The way it works, as explained in the E-manual, is if High is given to SIG2(MOT+), the transmitter LED is turned on and its infrared is detected by the detector LED and is shown as ADC. It is recommended that you connect the infrared sensor module to the Ports 1, 4 of SIG2 that have a transistor circuit. Ports 2, 3 will have a low ADC value. The figure below shows when it is connected to Port 1. The direction for the connector is to connect the gray cord to the USB. You can read the maximum value of the ADC value if you read it after approximately 10~15us. And the properties of the ADC values that can be detected according to their distance are shown below, so this must be taken into consideration for use. It is not possible to detect objects that are farther than 15cm and object that are too close will reflect the infrared and the angle entering the detector LED will not be valid and result in a section that the sensor values will fall.(This corresponds to the section between 0~1.5cm)        Confirming Operation Open ROBOTIS OpenCM’s Example –&amp;gt; 07. Sensors –&amp;gt; IR_Read. After downloading, open the serial monitor and place the object(maximum when white) close and you will be able to see the ADC values as shown below.            Operation Code The IR sensor can perform IR sensing as long as it controls the pin that corresponds to the SIG2 and the ADC port. The OLLO library is already coded with this principle.        Check that Pins 2, 6, 7 are assigned to Port 1. In setup(), initialize Pins 6, 7 that are assigned to SIG1,2 to LOW and initialize Pin 2 to analog input.        In function readIR, set SIG2(Pin 7) as HIGH to turn the transmitter LED as ON and if you read the analog value after 15us you can read the optimal ADC value. And if you send SIG2 again as LOW then one cycle will be finished. It does not matter if there is nothing 30us afterwards. The OLLO library is already coded with this principle so you can easily use it.  DMS Sensor Module      Connectivity By default, you approve voltage using the 3 middle pins of the 5 pins and afterwards read the ADC value to utilize it. It has the advantage that even if the color and reflectivity change compared to the infrared sensor, there is virtually no change to the output value corresponding to the distance. There is no difference connecting to any of the 5-pin sensor ports of OpenCM9.04. The DMS sensor does not use SIG1, 2 so it does not distinguish ports. Below it was connected to Port 2 and the example code is explained based on Port 2.        Confirming Operation In File –&amp;gt; Examples –&amp;gt; 07. Sensors, you can download example OLLO_DMS_Read and check using the serial monitor.            Operation Code Sensors such as the DMS sensor module which are comprised of 3 pins from the 5 pin only need to keep on Reading the analog input. They do not need a separate initial code.      Gyro Sensor      Connectivity and Sensor Internal Structure The Robotis gyro sensor can also be connected to Pin 5 of OpenCM9.04 to measure the angular speeds of X, Y (rotational acceleration).        Connect the gyro sensor module of OpenCM9.04 to Pins 1 and 2 of the 5-pin port. Connect the X-axis pint to Port 1 and the Y-axis pin to Port 2 as shown in the connectivity below.        Operation Code Download from Examples -&amp;gt; 07. Sensors -&amp;gt; OLLO_Gyro_Read and open the serial monitor to check the rotational acceleration of the X- and Y-axis in ADC as shown below. Initialize Port 1 connected to the X-axis pin and Port 2 connected to the Y-axis pin and in the loop, read the ADC value of the rotational acceleration of the X- and Y-axis in a 60ms cycle.        As for the DMS sensor module, you simply need to read the analog pin value from the loop.      LED Module      Connectivity and Internal Structure The LED module is not a sensor module but simple a module to use 2 LED’s as a display format. By looking at the circuit diagram you can tell that it is being controlled in a Current Sink method where MOT+- will be OFF when HIGH, and ON when LOW. The SIG2 pins of Ports 1 and 4 of OpenCM9.04 does not turn LOW so there is a restriction in using the LED module, so use Ports 2 and 3 of the 5-pin ports. The figure below shows an example of using Port 3 to connect the LED module.        Confirming Operation In File -&amp;gt; Examples -&amp;gt; 07. Sensors, download and run example OLLO_LED_Blink and you will see that both LED’s from each side will blink alternatively. The LED module does not need the ADC pin so you only need to use pins SIG1 and 2. You can use the LED module by initializing Port 3 in setup() as shown below.      Touch Sensor      Connectivity and Internal Structure The touch sensor works by detecting whether it has been touched, just as a button, when it is simply pressed from the top. You can also use it simply as a button. The circuit diagram is also nothing more than a frequently used button circuit. When the button is pressed it returns HIGH and when the button is released it returns LOW. You connect it to Port 2 of OpenCM9.04.        Operation Code Download OLLO_TOUCH_Read from the OLLO library and open the serial monitor to check the result. 1 means the button is not pressed, and if the button is pressed than the value 0 will be output. The touch sensor only uses the middle 3 pins of the 5 pins as well. We recommend using the ADC pin by declaring it as a digital input. Since the touch sensor does not have an internal Pull-down circuit you must define INPUT_PULLDOWN as a Pull-down option. The OLLO library will internally initialize the pins of the 5-pin sensor in this way.          Digital I/OConnect the LED to Pin 13.Connect the LED and resistor to OpenCM9.04 as shown below. Connect to Port 13.For digital output you must use pinMode(13, OUTPUT) in setup() to set Pin 13 as OUTPUT. And use the function digitalWrite() to assign HIGH/LOW value.digitalWrite(13, HIGH); //Outputs HIGH to Pin 13.digitalWrite(13,LOW); // Outputs LOW to Pin 13.When Pin 13 is assigned as LOW, it becomes a GND(negative terminal) and an electric current is formed so the LED turns on. On the contrary, if Pin 13 is assigned as HIGH it becomes 3.3V and there is no electric current formed so the LED turns off. This is the principle by which you can write a sketch code that will make the LED blink.void setup(){  pinMode(13, OUTPUT);}void loop(){  digitalWrite(13, HIGH);  delay(100); //delay of 0.1 second  delay(100); //delay of 0.1 second  delay(100); //delay of 0.1 second}You will see the LED blink every 0.1 second.Let us make the Status LED blink.In OpenCM9.04 you can even test using the green Status LED built-in to the board without having to connect the LED as in the example above.The Status LED is connected to Pin 14 and you can use the predefined function BOARD_LED_PIN to control it. This provides the advantage that if you write a sketch code using BOARD_LED_PIN then even if the board is changed you do not have to modify the code. Open an example file by selecting File –&amp;gt; Examples –&amp;gt; 01. Basics –&amp;gt; b_Blink_LED.If you download it then the green Status LED will blink.Let us receive a digital input in Pin 7.Connect the button and pull-down resistor as shown below. Use Port 7 to receive the digital input.For digital input on the I/O Pin of OpenCM9.04 you must use pinMode(7, INPUT) in setup() to configure Pin 7 as INPUT. Then receive HIGH/LOW values with the function digitalRead() as shown below.int value = digitalRead(7); // Reads Pin 7 and assigns it to the variable value Now it checks with the entire code. If the button is pressed then HIGH will be detected, and if the switch is separated then LOW will be detected.The reason why LOW is detected when the button is separated is because there is a GND connected to the pull-down resistorvoid setup(){     pinMode(7, INPUT);  SerialUSB.begin();}  void loop(){    int value = digitalRead(7);  if ( value == HIGH)    SerialUSB.println(“HIGH Detected!”);  else    SerialUSB.println(“LOW Detected!”);  delay(100);  }   If you change the circuit above to a pull-up circuit as shown below, it will work in the opposite way. If the button is pressed then LOW will be detected, and if it is separated then HIGH will be detected.The reason why HIGH is detected when the button is separated is because there is a 3.3V voltage connected to the pull-up resistor.Let us receive digital input without either pull-up or pull-down resistors.In OpenCM9.04 it is possible to configure a switch circuit in digital input without a pull-down or pull-up resistor. The 26 GPIO Pins in OpenCM9.04 have internal input Pull-up/Pull-down resistors that you can configure with the software.If you need an internal pull-up you can configure as pinMode(7, INPUT_PULLUP) and if you need a pull-down circuit you can configure as pinMode(7, INPUT_PULLDOWN).If you define as INPUT then it would mean digital input made as floating so there will need to be an exterior pull-up or pull-down circuit. Let us look at an example.The circuit shown below is a circuit that receives digital input through Pin 7 but the button is directly connected to GND. In this case we can define Pin 7 as INPUT_PULLUP in order for the button to work normally.In this case if the button in pressed then LOW will be detected, and if the switch is separated then HIGH will be detected due to the internal pull-up.void setup(){     pinMode(7, INPUT_PULLUP);  SerialUSB.begin();}  void loop(){    int value = digitalRead(7);  if ( value == HIGH)    SerialUSB.println(“HIGH Detected!”);  else    SerialUSB.println(“LOW Detected!”);  delay(100);  }For the opposite case connect the button directly to the 3.3V as shown in the connectivity below.In this case if the button is pressed then HIGH will be detected, and if the switch is separated then LOW will be detected due to the internal pull-down.void setup(){     pinMode(7, INPUT_PULLDOWN);  SerialUSB.begin();}  void loop(){    int value = digitalRead(7);  if ( value == HIGH)    SerialUSB.println(“HIGH Detected!”);  else    SerialUSB.println(“LOW Detected!”);  delay(100);  }Let us receive an input using the User Button.Similar to the built-in Status LED, there is a built-in User Button that can be used without the need to make a separate button circuit. If you look at the circuit diagram you can see the built-in pull-down input being used.The User Button is connected to Pin 23 so you can designate Pin 23 directly or use BOARD_BUTTON_PIN.void setup(){     pinMode(BOARD_BUTTON_PIN, INPUT_PULLDOWN);  SerialUSB.begin();}  void loop(){    int value = digitalRead(BOARD_BUTTON_PIN);  if ( value == HIGH)    SerialUSB.println(“HIGH Detected!”);  else    SerialUSB.println(“LOW Detected!”);  delay(100);  }If you download you will see that when the User Button is pressed then HIGH will be input, and if the switch is separated then LOW will be input due to the internal pull-down circuit.Let us toggle the Status LED.If the current output of Pin 1 is HIGH then it will change to LOW, and if it is currently LOW then it will change to HIGH.digitalWrite(1, HIGH); // Pin 1 which was HIGH will become LOW again.togglePin(1); // Pin 1 which was HIGH will become LOW again.We can now easily write the LED Blink example by using this principle. Let us simply use togglePin() with the Status LED.void setup(){     pinMode(BOARD_LED_PIN, OUTPUT); //}  void loop(){     togglePin(BOARD_LED_PIN);  delay(100); //Delay 0.1 second}The LED will blink with a 0.1 second interval. Note that using toggleLED() which only toggles BOARD_LED_PIN will achieve the same actions.Analog I/OFor analog input, it is important to note that only Pins 0~9 located in the OpenCM9.04 silk screen’s ANALOG IN area will support analog input. Analog output is substituted by PWM Output using TIMER.Pin 3 receives analog input by a variable resistor.Connect a variable resistor to Pin 3 and a voltage of 3.3V as shown below.For the analog input in Pin 3, use pinMode(3, INPUT_ANALOG) to configure the Pin Mode as analog input and you are now ready. Use analogRead() to read analog values through Pin 3 as we configured.int value = analogRead(3); // Reads analog input through Pin 0 and assigns it to the variable value.Here the value that is assigned to the variable value is a 12bit ADC value between 0 ~ 4,095. Let us output the ADC value that is read through the entire code.void setup(){  pinMode(3, INPUT_ANALOG);  }void loop(){  int value = analogRead(3);  SerialUSB.println(value);   // let us output the value.  delay(100); //delay time for USB transfer}Let us perform analog output(PWM) to Pin 6.We can control the LED using PWM outputted to Pin 6. Connect the LED and resistor using a breadboard and connect to Pin 6 as shown below.Configure Pin 6 to analog using pinMode(6, PWM). Use analogWrite() to PWM Output to Pin 6 as configured.analogWrite(6, 10000);Analog output is substituted by PWM Output. PWM’s Duty cycle is controlled through the second argument. Here we have used the value 10000 but the duty cycle can be set to a value between 0~ 65535. The value 0 represents a 0% duty cycle and the value 65535 represents a 100% duty cycle.Now it checks the entire code.void setup(){  pinMode(6, PWM);}  void loop(){  for(int i=1; i &amp;lt; 7; i++){    analogWrite(6, i*10000);//generate pwm as 10000 ~ 60000 scale    delay(100);  }}By controlling the second argument of analogWrite() we can implement PWM with a variety of Duty Cycles as shown below.Let us perform Dimming so that the Status LED will turn off slowly.The Status LED is connected to Pin 14 which is also capable of PWM output. Open an example file by selecting File –&amp;gt; Examples –&amp;gt; 01. Basics –&amp;gt; f_Led_Fadin.If you download to OpenCM9.04 it will make the Status LED repeatedly turn on and off slowly.Serial CommunicationOpenCM9.04 has a total of 4 serial devices. There are Serial1, Serial2, Serial3, and SerialUSB, but Serial1 is assigned exclusively as a Dynamixel communication port so there are restrictions for using it. Serial 2 is for using Bluetooth devices with 4 pin ports such as BT-210 and BT-110A. Serial3 is shown at the back-side of the PCB as TX3(24), RX3(25).The SerialUSB is very important in OpenCM9.04. It performs the firmware download for ROBOTIS OpenCM and also performs data communication as do Serials 1,2,3. The instructions to use it is almost the same as for Serials 1,2,3.Let us send data using a serial device.Using LN-101 connect the 4 pin communication port to the PC as shown below. Use RoboPlus Terminal or a serial monitor in the PC to open the COM port.You must perform an initialization for the Serial 2 device as shown below and then perform the following examples in loop().void setup(){  Serial2.begin(57600);}void loop(){  //Test example code }Sending data can be done using print() and println() methods, where the print() method will print without changing lines and the println() method will print as well as change lines.Serial2.print(“Hello World This is OpenCM9.04”);Let us print the “Hello World” string through the Serial2(TX2, RX2) device.Serial2.print(“OpenCM9.04 is the first product of OpenCM Series”);Serial2.println(“ println() ends this line”);Seirla2.println(“This is new line”);println() will change lines and print as a new line.  You can check the printing as shown below.Serial2.print(12);This will print 12 as a decimal number.int abc = 128;Seial2.print(abc);This will print the value 128 of variable abc.Serial2.print(abc, 16);This will print the value 128 of variable abc as a hexadecimal value. 0x80 will be printed.Serial2.print(abc, 2);This will print the value 128 of variable abc as a binary value. In the same way, if you set the second argument as 8 then it will print as an octal value, and if there is no second argument then by default it will print as a decimal value.Serial2.println(3.14);This will print 3.14 as a Double type and then change lines. It will print to 2 decimal places. You can also define a variable Double and then print it.double  var = 1.234;Serial2.println(var);This will print the analog values read from Pin 0, 1, and 2 through Serial 2 in their respective order. If you use many print() and println() methods then you can print neatly as shown below.int sensorValue0=0;int sensorValue1=0;int sensorValue2=0;sensorValue0 = analogRead(0);sensorValue1 = analogRead(1);sensorValue2 = analogRead(2);Serial2.print(“Sensor0 = “); Serial2.print(sensorValue0);Serial2.print(“ Sensor1 = “); Serial2.print(sensorValue1);Serial2.print(“ Sensor2 = “); Serial2.println(sensorValue2);At last If you change lines by using the println() method only for printing sensorValue2 then you can achieve a neat printing of the 3 analog inputs.Let us receive data using a serial device.We will implement an Echo function using a serial device. When data comes to the Serial 2 device through a char-type variable temp then we will save the data using the read() method and print right away using the print() method to implement the Echo function.char temp = 0;loop(){  if ( Serial2.available() ){    temp = Serial2.read();    Serial2.print(temp);  }  }  The entire code is shown below.void setup(){  Serial2.begin(57600);}byte temp = 0;  void loop(){  if ( Serial2.available() ){    temp = Serial2.read();    Serial2.print(temp);  }}Let us implement it in an interrupt driven method as shown below. The interrupt of a Serial device is configured as a function that does not have a return type and contains one byte-type argument. And here if we print the data given by the print() method right away then we have implemented the Echo function. You can implement and use in any location without separately defining a prototype.void serialInterrupt(byte buffer){    Serial2.print(buffer);}Inside setup() we can configure the implemented serialInterrupt() as a function pointer format using attachInterrupt().Serial2.attachInterrupt(serialInterrupt);   The entire code for inputting data of Serial 2 using the interrupt is shown below.void setup(){  Serial2.begin(57600);  Serial2.attachInterrupt(serialInterrupt);}void serialInterrupt(byte buffer){    Serial2.print(buffer);}  void loop(){  //Code is not necessary.}Let us print data using the SerialUSB device.Use the Micro-B USB connector of OpenCM9.04 to connect directly to the PC as shown below. In this example we communicate with the PC only using OpenCM9.04 without any device such as LN-101.You must perform an initialization for the SerialUSB device as shown below and then perform the following examples in loop(). There is no designation of Baud rate.void setup(){  SerialUSB.begin();}void loop(){  //Test example code}The instructions to use it is almost the same as for the Serial devices. You can control it in the same way by using print() and println() methods.SerialUSB.print(“CM-900 is the first product of CM-9 Series”);  SerialUSB.println(“ println() ends this line”);  SeirlaUSB.println(“This is new line”);  ``This will print 12 as a decimal number.```cSerialUSB.print(12);  This will print through an int-type variable.int abc = 128;  SerialUSB.print(abc);  This time we will print the value of variable abc as a hexadecimal value.SerialUSB.print(abc, 16);  This will print the value 128 of variable abc as a hexadecimal value, which is 0x80.SerialUSB.print(abc, 2);  This will print the value 128 of variable abc as a binary value. In the same way, if you set the second argument as 8 then it will print as an octal value, and if there is no second argument then by default it will print as a decimal value.SerialUSB.println(3.14);  This will print 3.14 as a Double type and then change lines. It will print to 2 decimal places. You can also define a variable Double and then print it.double  var = 1.234;  SerialUSB.println(var);  Let us receive data using the Serial USB device.We will implement an Echo function using the Serial USB device. When data comes to the Serial USB device through a char-type variable temp then we will save the data using the read() method and print right away using the print() method to implement the Echo function.char temp = 0;  loop(){    if ( SerialUSB.available() ){      temp = SerialUSB.read();    SerialUSB.print(temp);  }}The entire code is shown below.void setup(){  SerialUSB.begin();}byte temp = 0;  void loop(){  if ( SerialUSB.available() ){    temp = SerialUSB.read();    SerialUSB.print(temp);  }}Let us implement it in an interrupt driven method as shown below. The interrupt of the Serial USB device is configured as a function that does not have a return type and contains a byte-type argument and a byte* argument. And here if we print the data given by the print() method right away then we have implemented the Echo function. If you write data to the USB COM Port through the PC’s terminal it will send 1 byte at a time so it is sufficient to set nCount =1 and Echo only the Index 0 data of the buffer.void usbInterrupt(byte nCount, byte* buffer){  SerialUSB.print(buffer[0]);}Inside setup() we can configure the implemented usbInterrupt() as a function pointer format using attachInterrupt()SerialUSB.attachInterrupt(usbInterrupt);We can leave the loop() function as an empty function as shown below.void loop(){}The entire code for using the Interrupt of the SerialUSB device is shown below.void setup(){  SerialUSB.begin();  SerialUSB.attachInterrupt(usbInterrupt);}void usbInterrupt (byte nCount, byte* buffer){    SerialUSB.print(buffer[0]);}  void loop(){  //Code is not necessary.}External InterruptLet us write a code that turns the LED off and on when the signal input to Pin 7 changes. Connect the switch connected to the 3.3V to Pin 7 as shown below. We will use the internal input pull-down option without using the external pull-down circuit. In the same way connect the LED and resistor to the 3.3V and then connect it to Pin 13. Be cautious of the direction of the LED.Let us use a global variable to make a flag and apply the method of toggling the flag in the interrupt routine whenever the signal from Pin 7 changes.volatile int state = LOW;In setup() we will configure the external interrupt with the attachInterrupt() function and define the related Pin 7 as INPUT_PULLDOWN in pinMode.pinMode(7, INPUT_PULLDOWN);attachInterrupt(7, LedChange, CHANGE);We will implement LedChange () as a void LedChange (void) type.void LedChange (){  if(state == HIGH)  state = LOW;  else  state= HIGH;}  loop(){    digitalWrite(BOARD_LED_PIN, state);}The entire code is shown below.Dynamixel InstructionsThe Dynamixel used in the example below will be under the premise that ID=1 and the communication speed have all been initialized to 1Mbps. Even though the Dynamixel class has not been defined explicitly, we will assume that is has been predefined as shown below.Dynamixel Dxl(1); // Dynamixel Bus on Serial1(USART1)Let us read the model number and firmware version of AX-12A.In the E-manual the address value of the model number and firmware version in the Control Table is shown below.In AX-12A, for which the ID number is 1, we will read from address number 0 which corresponds to the model number’s low-order byte and from address number 2 which corresponds to the firmware version information. They are all 1 byte so we can use a byte-type variable.byte nModel = Dxl.readByte(1, 0); // First we read the model numberbyte vFirmware = Dxl.readByte(1, 2); // Then we read the firmware version.We will print as below.SerialUSB.print(“Model Number : “);SerialUSB.print(nModel);SerialUSB.print(“ Firmware Ver : “);SerialUSB.println(vFirmware);We will read the internal temperature of AX-12A, for which the ID number is 1.The address value that corresponds to the internal temperature of AX-12A in the Control Table is shown below.Using the same method we will read one byte using readByte().byte temp = Dxl.readByte(1, 43);SerialUSB.print(“Current Temperature : “);SerialUSB.println(temp);Let us configure the ID as 2 for AX-12.We will record 1 byte in the address number 3, which corresponds to the Dynamixel ID, using the method writeByte().void setup(){  Dxl.begin(1);  delay(1000);  // It is good to give about 1 second of delay.  Dxl.writeByte(1, 3, 2); //Changes the ID number 1 of the Dynamixel to ID number 2}void loop(){  Dxl.writeByte(2, 25, 1);  //LED Blinking using the changed ID number  delay(100);  Dxl.writeByte(2, 25, 0);  delay(100);}If the change in ID number successfully finishes the Dynamixel’s LED will blink.Let us change the Baud Rate to 57600 bps.The communication speed of the Dynamixel can be changed by using the Baud rate in address number 4. Similar to change the ID number we will use the writByte() method. If we utilize the Dynamixel speed computation of 57,600bps then the index value comes out as 34. For the Dynamixel 2.0 protocol please refer to the new Baud rate table - for 57600bps the index value will be 1.void setup(){  Dxl.begin(1);  delay(1000);  // It is good to give about 1 second of delay.  Dxl.writeByte(1, 4, 34); // 34 = 57600 bps  Dxl.begin(34); // Initializes to the changed Baud rate  delay(1000);}void loop(){  Dxl.writeByte(1, 25, 1);    delay(100);  Dxl.writeByte(1, 25, 0);  delay(100);}Since the Baud rate has been modified we need to initialize the Bus again to Dxl.begin(34).Let us check whether the Dynamixel for which ID number is 1 has moved or not.We can check the current movement status of AX-12A by using the value 46(0x2E) in the Control Table.byte bMoving = Dxl.readByte(1, 46);If the Dynamixel with ID number 1 is currently moving then the value 1 will be returned for the variable bMoving, and if it is not moving then the value 0 will be returned.Let us move the AX-12A Dynamixel to a location of 150 degrees.To move the Dynamixel to the desired location (150 degrees) we need to input the desired location to the address that corresponds to the Goal Position. It is composed of 2 bytes (a low-order byte and a high-order byte) as shown below, and instead of accesses them individually we recommend recording 2 bytes (1 word) to the low-order byte 30(0x1E) using writeWord().In the E-manual we can check that the location that corresponds to 150 degrees it matched to 512 as shown below.Dxl.writeWord(1, 30, 512);Now check if the communication was successful using the function Dxl.getResult().For each RX-64 let us move them each to the following locations and speeds. After we finish moving them we will return them all to their original location of 0. This action will be repeated continuously.Let us create a Sync Write packet data that we will send to each Dynamixel. We will create a Sync Write packet data for the 0 location and another packet data to save the goal position and speed.#define PACKET_LEN 12#define NUM_OF_DATA 2int SyncPage1[PACKET_LEN]={  1, 010, 150,  2, 220, 360,  3, 020, 170  4, 220, 380};int SyncPage2[PACKET_LEN]={  1, 0, 0,  2, 0, 0,  3, 0, 0  4, 0, 0};void loop(){  Dxl.syncWrite(30, NUM_OF_DATA, SyncPage1, PACKET_LEN);  delay(1000);  Dxl.syncWrite(30, NUM_OF_DATA, SyncPage2, PACKET_LEN);  delay(1000);}Let us restrict the movement angle to 0~150 degrees.If the CCW Angle Limit is 0x3FF then it is 300 degrees, so we will send 0x200 which corresponds to 150 degrees using the writeByte() method.Caution If you set the CCW Angle Limit in number 8 to 0 then it will change to wheel mode and you will not be able to control the Goal position.Dxl.writeWord(1, 8, 0x200);if( Dxl.getResult() == COMM_RXSUCCESS ){ // Check if the communication was successful…}Let us configure the movement voltage to 10V ~ 17V.The data for 10V is 100(0x64), and the data for 17V is 170(0xAA), so we use the writeByte() method for each of them to record the lower and upper limits. The Control Table addresses for them are lower-range voltage= 12(0x0C) and upper-range voltage = 13(0x0D) respectively.Dxl.writeByte(1, 12, 100);Dxl.writeByte(1, 13, 170);if( Dxl.getResult() == COMM_RXSUCCESS ){ // Check if the communication was successful…}Let us limit the torque to only 50% of its maximum value.We will configure the MAX Torque value from its maximum value 0x3FF to 50% which is 0x1FF. We will write the data to the Max Torque’s lower-order byte address 14(0x0E) using writeByte().Dxl.writeByte(1, 14, 0x1FF);   if( Dxl.getResult() == COMM_RXSUCCESS ){ // Check if the communication was successful…}You need to turn the power off and then restart the power for the Max Torque to change.Let us move to the Position of 180 degrees with speed 57RPM.Moving Speed( Address 32(0x20) ) = 512(0x200)Goal Position( Address 30(0x1E) ) = 512 (0x200). We will access data by units of words as shown below. Dxl.writeWord(1, 32, 512);  // Configure the speed as 57 RPM Dxl.writeWord(1, 30, 512);   // Move to location 180 degreesif( Dxl.getResult() == COMM_RXSUCCESS ){ // Check if the communication was successful…}Move AX-12 which has ID number 0 to location of 0 degrees, and move AX-12 which has ID number 1 to location of 300 degrees. (We will start with borth AX-12 in the same position)Similar to Syncwrite, we will create a Packets directly using the setTxPacketXXX() method. In this case we will make a Packet using INST_REG_WRITE and INST_ACTION. Note that the location of 1 degrees corresponds to 0, and the location of 300 degrees corresponds to 1023(0x3FF).ID=0, Instruction = INST_REG_WRITE, Address = 30(0x1E), Data = 0ID=1, Instruction = INST_REG_WRITE, Address = 30(0x1E), Data = 1023Dxl.setTxPacketId(0); // We specify the control of ID number 0.Dxl.setTxPacketInstruction(INST_REG_WRITE);Dxl.setTxPacketParameter(0, 30); // Goal Position AddressDxl.setTxPacketParameter(1, Dxl.getLowByte(0)); // Low ByteDxl.setTxPacketParameter(2, Dxl.getHighByte(0)); // High ByteDxl.setTxPacketLength(5);  //Total data length = Data length + 3Dxl.txrxPacket();if( Dxl.getResult() == COMM_RXSUCCESS ){ // Check if the communication was successful…}Sending packet for the second DynamixelDxl.setTxPacketId(1);Dxl.setTxPacketInstruction(INST_REG_WRITE);Dxl.setTxPacketParameter(0, 30); // Goal Position AddressDxl.setTxPacketParameter(1,Dxl.getLowByte(1023)); //Low ByteDxl.setTxPacketParameter(2, Dxl.getHighByte(1023)); //High ByteDxl.setPacketLength(5);Dxl.txrxPacket();if( Dxl.getResult() == COMM_RXSUCCESS ){ // Check if the communication was successful…}To execute the Instruction that was on standby in the registers of Dynamixels number 0 and 1, send the Packet INST_ACTION.Dxl.setTxPacketId(BROADCAST_ID);Dxl.setTxPacketInstruction(INST_ACTION);Dxl.setTxPacketLength(2);Dxl.txrxPacket();if( Dxl.getResult() == COMM_RXSUCCESS ){ // Check if the communication was successful…}We recommend checking if the communications was successful after creating and sending each Packet.RC-100How to connect OpenCM9.04 using RC100 by using OpenCM’s RC100 library we can control OpenCM9.04 remotely. Below you can see the various wireless connections that you can make between OpenCM9.04 and RC100.The RC100 library will only work normally if a communication model is connected to the 4 pin communication port of OpenCM9.04.Please refer to the RC-100 for information on the RC-100 communication packet.Bluetooth connection using RC-100B + BT-100 or BT-210  Connecting to the RC100 controller using BluetoothZigBee connection using RC-100B + ZIG-100/ZIG-110A  Connecting OpenCM9.04 and the RC100 controller using ZigBeeInfrared connection using RC-100B + IR Receiver OIR-10Please refer to OIR-10 for information on infrared communication methods for RC-100A or RC-100B.Bluetooth connection using an Android smartphone + BT-210For Android smartphones you can use the R+ m.Task application’s RC100 simulation to send RC-100 packets. You can download R+m.Task through Google Play.  Connecting OpenCM9.04 and your smartphone using Bluetooth – using the RC100 feature of R+m.TaskLet us make the Status LED of OpenCM9.04 blink when Button 1 of RC100 is pressed.The RC100 library is used to process the RC100 packets in OpenCM9.04.The RC100 library can be started in 2 modes, the wireless communication mode and the infrared communication mode.Wireless communication mode(1) – Bluetooth module(BT-210/BT-110A), ZigBee module(ZIG-110A)Infrared communication mode(2) – Infrared receiver(OIR-10)We will initialize to the RC100 library using the wireless communication mode.#include &amp;lt;RC100.h&amp;gt;RC100 Controller;Controller.begin(1);  //RC100 init as remote modePlease refer below for defining each button of RC100.#define RC100_BTN_U (1)#define RC100_BTN_D (2)#define RC100_BTN_L (4)#define RC100_BTN_R (8)#define RC100_BTN_1 (16)#define RC100_BTN_2 (32)#define RC100_BTN_3 (64)#define RC100_BTN_4 (128)#define RC100_BTN_5 (256)#define RC100_BTN_6 (512)If the packet data read using the RC100 library is Button 1 then output the Status LED to LOW.if(Controller.available()){RcvData = Controller.readData()if(RcvData &amp;amp; RC100_BTN_1)  digitalWrite(BOARD_LED_PIN, LOW);}The entire code is shown below, and you can open the same code by selecting File -&amp;gt; Examples -&amp;gt; RC100 -&amp;gt; RC100_LED_Control.In the same way, we will make the Status LED blink using the OIR-10 Infrared receiver.We will initialize the Infrared communication mode to the number 2 as shown below.#include &amp;lt;RC100.h&amp;gt;RC100 Controller;Controller.begin(2);  //RC100 init as IR modeThe remaining actions are the same as the previous example.BKP LibraryThe BKP Memory always preserves the data as long as the power is kept on so it is useful for temporarily saving user data or important data and then, after returning from reset, accessing the data again. The OpenCM board provides API for the BKP Memory as an external library. Select File -&amp;gt; Examples -&amp;gt;  BKP -&amp;gt; ReadWrite as shown below.Once you select the examples the following codes appear.Example ExplanationIn setup() we initialize the BKP Memory and initialize the Serial2 device to 57600bps. Then print “Start OpenCM9.04 BKP Memory Test” through Serial2 and start loop().STM32F103CB of OpenCM is composed of a BKP Memory with a total of ten 16bit registers.In loop() we will output data from addresses 1 to 10 with a 1 second interval, and when#include &quot;BKP.h&quot;BKP BKP_MEMORY;int i;void setup(){  /* Initialize clock and registers for BKP*/  BKP_MEMORY.begin();  Serial2.begin(57600);  Serial2.println(&quot;Start OpenCM9.04 BKP Memory Test&quot;);}void loop(){ delay(1000); for(i=1; i&amp;lt;11;i++){   Serial2.print(&quot;BKP Memory Read = &quot;);   Serial2.println(BKP_MEMORY.read(i)); } if(Serial2.available()){       BKP_MEMORY.enable();   for(i=1; i&amp;lt;11;i++){     BKP_MEMORY.write(i,i*10);   }       BKP_MEMORY.disable(); }}An important property of the BKP Memory is that even if you press Reset and the CPU restarts, the BKP Memory values will remain the same.However if you unplug the power and then plug in the power again the data will disappear. Below you can check the property of the BKP Memory using the output value.",
        "url": " http://localhost:4000/docs/en/software/opencm_ide/getting_started/"
      } ,
  
      "docs-en-software-rplus1-task-getting-started":  {
        "title": "R+ Task 1.0",
      "content"	 : "IntroductionA Task is a set of motions to perform a certain actions. RoboPlus refers to the source code that specifies tasks to be executed by the robot as Task Code. The robot moves according to your task codes. RoboPlus Task is a software to make writing these task codes easier.Task code files have a file extension .tsk, and the icon shown on the left.Note Task files from newer versions are not compatible with older versions.InstallDownload RoboPlus TaskRoboPlus is a software to create a customized programme for every ROBOTIS product.RoboPlus System Requirements  OS : Windows XP Service Pack 2 or above / Vista/ 7 (32/64bit)/8 (32/64bit)  32bit(x86) or 64bit (x64) processor with over 800MHz  Graphic card with 3D acceleration  System memory over 512MB  Hard disk with the extra space of 500MBNote To execute RoboPlus, .NET FrameWork 3.5 or higher version is required. When installing RoboPlus, if the automatic installation of .NET FrameWork fails, .NET FrameWork must be installed separately.RoboPlus Install FailureMost reason for installation failure is caused by .NET Framework install error. Please manually intsall Windows Installer 3.1 and .NET Framework 3.5Windows installer and .NET Framework can be downloaded from Microsoft Download Center.Download Windows installer 3.1, .NET Framework 3.5Getting StartedSelect CommandDouble click on a blank line or click on the line and press enter.  Choose a command from the list of commands supported by the selected controller.If the controller has not been selected yet, the program will ask you to choose the type of controller that will be used by the current program.Select ParameterParameter refers required fields or information  to execute commands. A question mark(?) indicates that a parameter has not been set.After selecting a command, you must designate a parameter to complete the command line.      Go to ‘edit mode’ by double clicking the mouse or pressing the enter key.            Choose the parameter to create by pressing left/right arrow keys or by clicking on the question mark.            Press enter or double click to see the parameter selection window.            Choose the appropriate parameter. It is very important to learn and understand the functions of parameter.  Program DownloadDownload the task codes into your controller. You only have to download once, as the task codes is be saved inside of controller till you download a new task code over it.      Connect the controller before downloading the task code.To download the task code, the controller must be connected to the PC. (Please refer to controller information on how to connect the controller to the PC.)        Select the correct COM port (if you know) or else use the Automatic Search function  to easily find out the appropriate port.        If RoboPlus Task is unable to find a controller, the following error message will be shown.              Check if the controller is connected to the PC.      Check if the controller is turned on.      Check if the correct communication port was chosen.            If the program has an error, you must find the error and correct it. (See rule check error messages)            Select the download menu. If the downloading fails, it will automatically try again from the beginning.            Execute the task code -&amp;gt; Your robot will move. Turn on the controller and execute the downloaded task code. (Please refer to controller information to learn how to execute the task code.)  Videos      Download RoboPlus Program(for CM-100)            Download RoboPlus Program(for CM-510/530)      Print on the ScreenControllers usually do not have display devices the way a PC has a monitor, so it is hard to keep track of what goes on in a controller.  Therefore, a “terminal” is used to “borrow” the PC’s monitor.Open the Program Output MonitorTo see the output of the program, you must open the Program Output Monitor BEFORE executing the program. There are three ways to open the Program Output Monitor.      Click the ‘View Print of Program’ on the Download Program window.      Click the View Print of Program button in the tool bar.  Press F5 or click on View Print of Program(V) menu under Program(P).Print/Print with Carriage ReturnUse the “Print” parameter in your task code to see desired values on the screen.Print : Print the value, then move the cursor to next line.Print with New Line: Print out the value, and move the cursor to next line.Error : Please check the following  Values from the controller                  A welcome screen is shown when the program starts                    Error messages during program operation(Error Messages)                  Values from task code : All decimal numbers between -32767 and +32767 can be displayed(Printing characters or custom messages is not possible).                  To print numbers                    To print values from sensors            Clear ScreenYou may erase everything on the screen.Virtual Robot ControlRoboPlus Task supports virtual robot control, which makes controlling of robot possible without a remote controller devices like RC-100. Click the appropriate button with the mouse or press the appropriate key.Please refer to the table below to control the remote control with the  keyboard.            Actual RC-100 Key      Key on the Keyboard                  U      Arrow Key(↑)              D      Arrow Key(↓)              L      Arrow Key(←)              R      Arrow Key(→)              1      Number Key(1)              2      Number Key(2)              3      Number Key(3)              4      Number Key(4)              5      Number Key(5)              6      Number Key(6)      ",
        "url": " http://localhost:4000/docs/en/software/rplus1/task/getting_started/"
      } ,
  
      "docs-kr-platform-thormang3-getting-started":  {
        "title": "THORMANG3",
      "content"	 : "",
        "url": " http://localhost:4000/docs/kr/platform/thormang3/getting_started/"
      } ,
  
      "docs-kr-software-rplus1-task-getting-started":  {
        "title": "R+ Task 1.0",
      "content"	 : "개요로보플러스 태스크어떤 일을 처리하기 위한 행동들의 집합을 태스크(Task)라고 합니다. 로봇이 해야할 태스크를 프로그래밍 한 소스를 로보플러스(RoboPlus)에서는 태스크 코드(Task Code)라고 합니다. 로봇은 사용자가 작성한 태스크 코드에 따라 동작하게 되며, 이러한 태스크 코드를 쉽게 작성할 수 있도록 도와주는 것이 로보플러스 태스크(RoboPlus Task) 프로그램입니다.태스크 코드 파일은 PC 에서 .tsk 라는 확장자를 가지며 좌측과 같은 아이콘으로 표시됩니다.참고 상위버젼의 Task 파일은 하위버젼에서 호환되지 않습니다.설치하기다운로드 로보티즈 홈페이지 자료실로보플러스는 모든 로보티즈 제품을 프로그래밍할 수 있는 통합 소프트웨어입니다.RoboPlus 시스템 요구 사항  OS : Windows XP Service Pack 2 이상/ Vista/ 7 (32/64bit)/8 (32/64bit)  800MHz이상의 32비트(x86) 또는 64비트 (x64) 프로세서  3D 가속 기능을 지원하는 그래픽 카드  512MB이상 시스템 메모리  여유공간이 500MB 이상인 하드디스크참고 로보플러스를 실행하기 위해선 .NET FrameWork 3.5이상의 버전이 필요 합니다. 로보플러스 설치시 .NET FrameWork 자동설치가 실패할 경우엔 .NET FreameWork를 별도로 설치하세요.RoboPlus 설치 실패시대부분의 RoboPlus 설치 실패의 원인은 사용자 PC환경에 따른 .NET FrameWork 자동 설치 실패 입니다. 따라서 사용자가 직접 .NET FrameWork 3.5를 수동으로 설치 하셔야 합니다..NET FrameWork 3.5를 수동으로 설치 하기 전에 Windows installer 3.1이상이 설치 되어 있어야 합니다.Windows installer와 .NET Framework는 마이크로소프트 다운로드 센터에서 다운로드가 가능합니다.Windows installer 3.1 다운로드.NET Framework 3.5 다운로드시작하기명령줄 만들기명령을 작성하고 싶은 빈 줄을 더블클릭하거나, 마우스를 클릭 후 엔터를 입력하면 선택한 제어기에서 사용할 수 있는 명령을 입력할 수 있습니다.만약, 제어기가 선택되어 있지 않다면, 사용자에게 현재 프로그램에서 사용할 제어기를 묻게 됩니다.파라미터 만들기파라미터(Parameter)는 명령이 수행되기 위해 필요한 대상입니다. 아무것도 설정되지 않았다면 ‘?’표시로 나타나게 됩니다.명령을 선택한 다음에는 명령줄을 완성하기 위해 파라미터를 만들어야 합니다.      Enter키를 누르거나 마우스를 더블클릭하여 편집 모드로 들어갑니다.            좌/우 방향키를 누르거나 마우스로 클릭하면 만들 파라미터를 선택할 수 있습니다.            Enter키를 누르거나 마우스를 더블클릭하면 파라미터 선택창이 나타납니다.            적절한 파라미터를 선택합니다. 각 파라미터의 사용법을 익히는 것이 매우 중요합니다.  프로그램 다운로드태스크 코드를 제어기에 다운로드합니다. 다운로드 과정은 제어기 내부에 태스크 코드를 저장하므로 한번만 수행하면 됩니다.      PC 와 제어기가 연결되어야 합니다. 태스크 코드를 다운로드하기 위해서는 PC 와 제어기가 연결되어야 합니다. (연결 방법은 각 제어기 정보를 참고하세요.)        사용할 통신 포트를 선택해야 합니다. 자동 찾기 기능을 이용하면 쉽게 통신 포트를 설정할 수 있습니다.        RoboPlus Task 가 제어기를 찾지 못하면 아래와 같은 에러 메시지가 나타납니다.        PC 와 제어기가 연결되어 있는지 확인합니다. (연결 방법은 각 제어기 정보를 참고하세요.) 제어기의 전원이 켜져 있는지 확인합니다. 제어기가 연결된 통신 포트가 바르게 선택되어 있는지 확인합니다.        다운로드 메뉴를 선택합니다. 만약, 프로그램에 오류가 있다면 오류를 찾아 수정해야 합니다. (룰 체크 에러 메시지 확인)            다운로드를 진행합니다. 만약 다운로드에 실패했다면 처음부터 다시 시도합니다.            태스크 코드(Task Code)를 실행합니다. -&amp;gt; 로봇의 동작을 실행 합니다. 제어기를 켜고 다운로드 한 태스크 코드를 실행합니다. (태스크 코드 실행 방법은 각 제어기 정보를  참고하세요.)  동영상      로보플러스 프로그램 다운로드(CM-100)            로보플러스 프로그램 다운로드(CM-510/530)      프로그램 결과 출력일반적으로 제어기는 PC와 같이 모니터와 같은 출력 장치가 없기 때문에 내부 상태를 확인하기 어렵습니다. 따라서, 터미널(Terminal)이라는 프로그램을 통해 PC 모니터를 빌려쓰는 방식을 사용합니다. RoboPlus Task에는 터미널 프로그램이 포함되어 있어서 제어기의 상태를 확인할 수 있습니다.프로그램 출력용 모니터 창 띄우기프로그램 실행 시 화면 출력을 보기 위해서는 반드시 프로그램 실행 전에 프로그램 출력용 모니터 창을 띄워야 합니다. 프로그램 출력용 모니터 창을 띄우는 방법은 아래와 같이 여러 가지가 있습니다.      프로그램 다운로드 창에서 프로그램 출력 보기 버튼을 클릭      도구 모음에서 프로그램 출력 보기 버튼을 클릭  프로그램(P) 메뉴의 프로그램 출력 보기(V) 메뉴 선택 혹은 단축키 F5화면 출력/화면 출력 후 줄바꿈태스크 코드에 화면 출력 파라미터를 사용하면 원하는 값을 볼 수 있습니다.화면 출력 : 값을 출력하고 커서를 옆으로 한 칸 이동시킵니다.화면 출력 후 줄바꿈 : 값을 출력하고 커서를 다음 줄로 이동시킵니다.화면 출력 내용  제어기 자체 출력 내용                  프로그램 시작 메시지가 처음에 출력됩니다.                    프로그램 수행 중 에러 메시지 (에러 메시지 종류 보기)              태스크 코드 출력 내용 : -32767 ~ +32767 범위의 10진수로 표시됩니다. (글자는 출력할 수 없습니다.)                  숫자를 출력하는 경우                    센서 값을 출력하는 경우            화면 지우기화면의 내용을 지울 수 있습니다.가상로봇 조종RboPlus Task는 RC-100 등과 같은 조종기가 없어도 조종 기능을 사용할 수 있도록 가상 로봇 조종 기능을 지원하며, 조종기 버튼을 마우스로 클릭하거나 키보드를 이용하여 사용할 수 있습니다.키보드 조종은 아래 표를 참고하세요.            실제 RC-100 키      가상 RC-100의 키보드 키                  U      방향키(↑)              D      방향키(↓)              L      방향키(←)              R      방향키(→)              1      숫자키(1)              2      숫자키(2)              3      숫자키(3)              4      숫자키(4)              5      숫자키(5)              6      숫자키(6)      ",
        "url": " http://localhost:4000/docs/kr/software/rplus1/task/getting_started/"
      } ,
  
      "docs-kr-software-rplus2-manager-getting-started":  {
        "title": "R+Manager 2.0",
      "content"	 : "개요로보플러스 매니저 2.0로보플러스 매니저 2.0은 로봇을 구성하는 제어기와 다이나믹셀 장치들을 통합 관리합니다.제품을 연결하면 해당 제품을 최신버전으로 업데이트할 수 있으며, 컨트롤 테이블을 테스트해볼 수 있습니다.기존의 로보플러스 매니저1.0과 위자드1.0에서 제공하던 기능이 로보플러스 매니저 2.0에서 통합되었습니다.사용전 주의사항V2.0.0 기준으로 지원 제품이 한정됩니다. 지원 제품 목록에 포함되지 않는 제품의 경우 로보플러스 매니저1.0과 위자드1.0을 사용하시기 바랍니다.지원 제품 목록  로보티즈 드림  로보티즈 스마트(스마트2)  로보티즈 IoT  로보티즈 미니  다이나믹셀 2.0 시리즈 (MX-28, MX-64, MX-106, XL-320, XM시리즈, XH시리즈, Pro시리즈)펌웨어 정의펌웨어는 하드웨어 장치를 구동하기 위하여 장치에 설치하는 기본적인 소프트웨어입니다. 펌웨어에는 PC나 스마트폰, 다른 장치와의 통신 약속이 포함되기 때문에 가급적 펌웨어를 최신상태로 유지할 것을 권장합니다.모든 장치(제어기, 다이나믹셀 등)는 처음 구매시 펌웨어가 설치되어있으나, 기능 추가 / 버그 수정이 있을 경우 새로운 버전을 배포하기도 합니다.제어기 펌웨어의 역할  로보플러스 태스크를 통해 작성한 제어프로그램을 구동합니다.  로보플러스 모션을 통해 작성한 모션 데이터를 해석합니다.  PC나 스마트폰, 다이나믹셀과의 패킷 통신 기능을 합니다.다이나믹셀 펌웨어의 역할  제어기에서 제어프로그램이나 모션 구동시 제어기와의 패킷 통신 기능을 합니다.  PC나 스마트폰, 다이나믹셀과의 패킷 통신 기능을 합니다.펌웨어 업데이트의 중요성  새로운 기능이 추가되거나 기존의 기능이 수정될 경우, 새로운 펌웨어가 배포될 수 있습니다.  새로운 S/W를 지원해야 하는 경우, 호환성 향상을 위해 새로운 펌웨어가 배포될 수 있습니다.  버그 수정이 있을 경우, 새로운 버전의 펌웨어가 배포될 수 있습니다.  제품이 정상적으로 동작하지 않거나, 통신이 원활하지 않을 경우, 최신 펌웨어 업데이트를 통해 문제가 해결될 수 있습니다.메뉴 설명단계별 편집 탭작업 영역이 홈 탭, 관리 탭, 터미널 탭으로 분리됩니다.(V2.0.0 기준으로 관리 탭의 자가진단 / 캘리브래이션 기능과 터미널 탭 기능이 미지원 됩니다.)홈 탭프로그램 시작시 첫 화면으로 제품 선택 메뉴와 펌웨어 업데이트 내역 기능 등을 제공합니다.관리 탭앞서 선택한 제품의 펌웨어 업데이트 / 테스트 / 복구 기능을 제공합니다. 선택된 제품에 따라 사용할 수 있는 기능이 필터링되어 나타납니다.아래 그림은 컨트롤 테이블을 테스트하는 화면입니다. 검색된 제품을 통신속도, 모델에 따라 분류하여 나타내며, 컨트롤 테이블 값을 수정하며 테스트해볼 수 있습니다.터미널 탭해당 기능은 현재 준비 중이며 추후 업데이트를 통해 지원할 예정입니다.기본 기능펌웨어 업데이트      홈 탭에서 업데이트 및 테스트를 진행할 제품을 선택합니다. (예시에서는 ROBOTIS MINI를 선택함)            “업데이트 및 테스트” 메뉴를 선택합니다.             안내에 따라 제품과 PC를 연결한 후 제품을 켭니다.            연결할 포트를 선택한 후 “다음”버튼을 클릭합니다. (예시에서는 블루투스 시리얼 포트를 사용함)             검색할 통신속도를 선택한 후 “다음”버튼을 클릭합니다.(블루투스 시리얼 포트 사용시 57600bps만 가능함)            관리할 대상이 정상적으로 검색되었는지 확인한 후 다음 버튼을 클릭합니다. (만약, 제품 검색이 정상적으로 이뤄지지 않을 경우 다시 시도 버튼을 클릭하세요.)            업데이트할 내용이 감지되면 아래의 “지금 업데이트” 버튼이 활성화됩니다. 업데이트 내용을 확인한 후 “지금 업데이트”버튼을 클릭합니다.             업데이트가 정상적으로 완료될 때까지 기다린 후, “다음” 버튼을 클릭합니다.            업데이트가 완료되면 “컨트롤 테이블 테스트” 기능이 실행됩니다. (일부 제어기는 업데이트 완료 후 전원이 꺼지며, 대화창이 종료됩니다.)      펌웨어 복구      홈 탭에서 펌웨어 복구를 진행할 제품을 선택합니다. (예시에서는 ROBOTIS MINI를 선택함)            “펌웨어 복구” 메뉴를 선택합니다.            안내 메시지를 확인한 후 “다음” 버튼을 클릭하세요.            복구를 진행할 제품을 선택한 후 “다음” 버튼을 클릭합니다. (예시에서는 OpenCM9.04를 선택함.)         안내를 순서대로 따라서 진행합니다. 노란색 경고 문구를 반드시 숙지하세요!      모든 준비를 마치면 “다음” 버튼을 클릭합니다.            연결할 포트를 선택한 후 “다음”버튼을 클릭합니다. (예시에서는 블루투스 시리얼 포트를 사용함)            장치가 연결되면 펌웨어 설치를 위해 부트로더를 감지합니다. “다음” 버튼이 활성화되면 클릭합니다.            설치할 펌웨어 정보를 확인한 후 “다음” 버튼을 클릭합니다.             복구가 정상적으로 완료되면 “마침” 버튼을 클릭합니다.      다이나믹셀 컨트롤 테이블  컨트롤 테이블 창이 열려있다는 가정으로 진행합니다.(연결하는 과정은 “업데이트 하기”를 참고하세요.)      컨트롤 테이블 창은 장치를 통신속도, 장치, 순으로 분류합니다. 테스트할 통신속도 그룹과 장치를 선택합니다. (예시에서는 XL-320을 선택함.)            좌측 메뉴에서 “팩토리 리셋” 버튼을 클릭하면 제품을 공장 초기화 상태로 되돌릴 수 있습니다. (이때, ID와 Baudrate 값은 변경하지 않습니다.) 좌측 메뉴에서 “리부팅” 버튼을 클릭하면 해당 다이나믹셀을 재부팅할 수 있습니다. 좌측 메뉴에서 “토크 켜기” 버튼을 클릭하면 해당 다이나믹셀의 토크를 켜거나 끌 수 있습니다.        좌측 메뉴의 “토크 켜기” 버튼을 클릭하여 다이나믹셀의 토크를 켭니다.  컨트롤 테이블 항목에서 “Goal Position”항목을 찾아 선택합니다.      우측 하단의 위치 값 컨트롤을 사용하여 모터를 움직여봅니다.(값을 조정하는 과정에서 모터가 갑작스럽게 움직일 수 있으니 주의하세요.)        좌측 하단의 “통신 상태” LED를 통해 현재 PC와 제품의 통신이 원활히 이루어지고 있는지 확인할 수 있습니다. (초록색 : 정상, 노란색 : 타임아웃, 빨간색 : 데이터 소실)  좌측 하단의 “응답 에러” 메시지를 통해 다이나믹셀의 응답상태를 확인할 수 있습니다.      좌측 하단의 “하드웨어 알람” 메시지를 통해 하드웨어의 에러상태를 확인할 수 있습니다.             일부 다이나믹셀의 경우 프로파일 타입 상태 보기 기능을 제공합니다. 특정 Operating Mode에서 Profile Acceleration 값과 Profile Velocity 값에 따라 프로파일 타입이 결정됩니다. 자세한 사항은 해당 다이나믹셀의 E-Manual을 참고하세요. (지원 가능한 제품 : XM시리즈와 XH시리즈)        컨트롤 테이블에 대한 더 많은 정보를 얻으려면 각 제품의 E-Manual을 참고하세요. (다이나믹셀 E-Manual 바로가기. 다이나믹셀 프로 E-Manual 바로가기)",
        "url": " http://localhost:4000/docs/kr/software/rplus2/manager/getting_started/"
      } ,
  
      "docs-en-edu-bioloid-gp":  {
        "title": "BIOLOID GP",
      "content"	 : "BIOLOID GPIntroduction  Best humanoid robot with high-quality Dynamixel AX-18F (legs)  Strong, lightweight aluminum frames  Excellent mobility such as turning during walking or high-speed walking  Basic humanoid motions such as combat and soccer modes provided  Self-position-correcting using Gyro sensor  Gripper set and sensors included for various missions  Wireless remote included (Zigbee installed)  Up-to-date version of RoboPlus- programming software- included  Digital Packet communication and simple Daisy Chain cable arrangementGetting StartedPart ListOperatingDownloading the Program  Program for type A is installed by default in CM-530.  You can find task codes and motion files for other actions on the Default Program page.Turning the Robot on  Turn the power switch on and the LED will start blinking.  Use the MODE button to move the LED to “PLAY”. (The LED will move each time you press the MODE button)  Press the START button. (Check whether the LED on “PLAY” is blinking)          If the LED does not turn on, check the power cable/connection.      If there are no problems with cable, recharge your battery. (Please refer to Charging for more information)      The power does not turn on.  Is the battery properly connected?  Is the battery fully charged?  Is the battery fuse intact?          Please refer Fuse Replacement for information on how to replace the fuse.      I want to check how much battery I have left.Turn the CM-530 on and press the U button. The LED will turn on to show how much battery you have left as seen in the figure below.The robot makes a continuous warning sound while moving.  The alarm indicates that the robot is low on batteries.  Immediately recharge your battery(Refer to Charge).  If you do not replace the battery right away, the robot may turn off without warning and fall, which can cause severe damage.Checking the robot’s basic posture (To check whether the robot has been assembled correctly)  When the robot is turned on, it defaults to the pose shown below.      Check the angles of the arms and legs. If they are different from the picture, go back to “Check Assembly Mode”.        Check whether the cables have been assembled on the outer part of the leg.  Note If the robot has been incorrectly assembled to an extent where it may be severely damaged, a warning sound will be activated. Also, the LED of the motor with the problem will turn on and release its torque to prevent damage.Robot in Action  U : Soccer Mode  D : Battle Mode  L or R : Performance ModeNote Operating the robot with the RC-100 without selecting the mode will automatically start the soccer mode.  Press the POWER/MODE button for 2 seconds to power on.  Press the buttons below to control the robot.Walking Motions            Buttons      Motion      Buttons      Motion                  U      Forward      D      Backward              L      Turn Left      R      Turn Right              U + L      Walk Forward + Left      U + R      Walk Forward + Right              L + 5      Left Sidestep      L + 5 + 6      Fast Left Sidestep              L + U + 5      Left Forward Diagonal Step      L + D + 5      Left Backward Diagonal Step              R + 5      Right Sidestep      R + 5 + 6      Fast Right Sidestep              R + U + 5      Right Forward Diagonal Step      R + D + 5      Right Backward Diagonal Step      Standard|Buttons| Motion |Buttons| Motion ||:—:|:—:|:—:|:—:||1 + U|Gets up facing up|1 + D|Gets up facing down||5+6+U+1|Soccer Mode(Change Mode)|5+6+D+3|Battle Mode(Change Mode)||5+6+L+2|Performance Mode(Change Mode)|-|-|U: Soccer Mode            Buttons      Motion      Buttons      Motion                  2 + U      Left Leg + Forward Kick      4 + U      Right Leg + Forward Kick              2 + D      Left Leg + Back Kick      4 + D      Right Leg + Back Kick              2 + L      Left Leg + Left Kick      4 + L      Right Leg + Left Kick              2 + R      Left Leg + Right Kick      4 + R      Right Leg + Right Kick              3      Defense Standby      3 + L      Block Ball + Left              3 + U      Defense      3 + R      Block Ball + Right      D: Battle Mode            Buttons      Motion      Buttons      Motion                  2 + U      Hit + Forward Attack      3      Defense              2 + L      Hit + Left Attack      2 + R      Hit + Right Attack              4 + U      Upper Body Tackle      4 + D      Lower Body Tackle              4 + L      Left Strong Tackle      4 + R      Right Strong Tackle      L/R: Performance Mode            Buttons      Motion      Buttons      Motion                  2 + U      Gretting      2 + R      Handstand              2 + D      Clap(Twice)      3 + U      Roll on Side              2 + L      Clap(337)      3 + D      Push ups      After mounting the IR receiver on CM-530 under control mode, you can set the channels to control it remotely by pressing the Aux button. If you change the channel of the controller, you must also change the channel of RC-100. On how to change the channel of RC-100, please refer to Changing RC-100’s Channel.  Setting the CM-530 IR Channels (Start + U/L/D/R)            Buttons      Description                  Start + U      Set the RC-100 channel as 1              Start + L      Set the RC-100 channel as 2              Start + D      Set the RC-100 channel as 3              Start + R      Set the RC-100 channel as 4      My remote controller does not work properly.  Set to control mode.  Check whether the IR receiver has been properly connected.  Check whether the remote controller is on. Replace the battery and try again.  Point towards the IR receiver and try again.  Check if there are others controlling robots nearby, which may cause wireless interferences.We want to play soccer or battle with several robots.  In order to play a game with several users, you must install the ZIG-110 set.  ZIG-110 set is available at the Robotis shopping mall.  Please refer to Controller and RC-100 for installation information.Battery ChargeYou may obtain Lithium polymer batteries from www.robotis-shop-en.com.If the robot alarm sounds off during operations then recharge the battery.During charging the charger’s red LED turns on. When complete the green LED turns on.      Take the battery out            Connect the charger            Charge    Charging(Red LED), Complete(Green LED)            You can connect the robot to an external power source through SMPS.            The battery is equipped with a connector to charge the battery and another to move the robot      Charging Time and Battery Life/OperatingCharging Time  When fully discharged : 1~1.5 hour  Leaving the battery fully discharged for too long may reduce its lifespan drastically.  Time to charge the battery depends on the status of the battery(If the charging time or battery life becomes too short, you may need to replace your battery).  Caution  Do NOT  keep the battery connected with a robot or a charger.  If you will not use the battery for a long time from now on, please keep it HALF-CHARGED.  Do NOT  put the battery with an environment with high temperature or humidity.VideoTutorialScreen OutputObjective for this tutorial is to print 1 and 2 on the output screen as below.Write Task Code      Execute RoboPlus Task Program.    As seen in the picture below, go to Start &amp;gt; All Programs &amp;gt; ROBOTIS &amp;gt; RoboPlus &amp;gt; Software &amp;gt; RoboPlus Task to execute RoboPlus Task.              RoboPlus Task Initial Screen                Select a Controller.    Double click an empty line or press Enter, In the Select Control window, select the controller to use, then press the OK button.            Generating Start Program.    Select Start Program from the Select Instruction Type window, Start Program will be automatically generated in RoboPlus Task.            Input Endless Loop command    To print the numbers on the screen endlessly, use the Endless Loop command(Create a command line). Double click or press Enter on an empty line between { and } of Start Program to invoke the Select Instruction Type window. Select Loop &amp;gt; Endless Loop(while(1)) from the list.            Input Load command    Use Load command to input a Print command, which is needed to print numbers on the screen. Insert Execute &amp;gt; Load (Assignment value) into an empty line between { and } of Endless Loop.            Load 1 into Print    Choose the left parameter ( ? ) among the Load parameters(Explanation on the parameter). The left parameter receives input from the right parameter. Double click the left parameter ( ? ), or press Enter key after clicking it once to invoke the Select Parameter Window. Select Controller &amp;gt; Print then press OK.        Select Constant Numbers &amp;gt; Number &amp;gt; 1 for the right parameter ( ? ) in the same way.        When both parameters of the Load command have been set, it should look like below.            Load 2 into Print with Line    Select } under Print command (at the end of the endless loop section), and add new lines by pressing the Space key. Repeat Steps 5 and 6 to input the Load command and to input  Controller &amp;gt; Print with Line and 2. The final task code is shown below.            Save Task Code    Press Ctrl + S or the Save icon.      Download Task CodeDownload the task code created above.(How to Download Task Code)Execute Task Code      Open the Program Output Monitor    To see the output of the program, you must open the Program Output Monitor BEFORE executing the program. There are three ways to open the Program Output Monitor.                  Click on the View Print of Program in the Download Program window                    Click on the View Print of Program button in TOOLS.      Press F5 or click on View Print of Program (V)  menu under Program (P).            Executing the Program    When you turn on the controller, the LED will blink, showing it is in standby mode. Press the MODE button to move it to PLAY, then press START to execute the downloaded task code. You should see “1” and “2” being printed on the Program Output Monitor.      Button &amp;amp; LEDObjective for this tutorial is to program the U button to turn the AUX LED on and the D button to turn it off. Pressing the START button will end the program.Write Task CodeDownload Task CodeDownload the task code created above.(How to Download Task Code)Execute Task CodeExecute the program and check whether the AUX LED turns on when you press the U button and turns off when you press the D button. Press START button to end.Download            File Type      Download                  Humanoid Task Code      Download              Humanoid Basic Motion File      Download              QuickStart Guide PDF File      Download      ReferencesReplacing FuseThe fuse in the CM-510/CM-530 prevents it from overloading,which can damage the circuit.If the CM-510/CM-530 does not turn on with the battery but turns on when connected to the SMPS, replace your fuse.※ The size of the fuse is shown below. Use a 125V/5A~10A fuse.※ How to replace the fuse      Find the fuse on the back of the CM-510/CM-530.            Use a pincette to replace the fuse with a new one.      Dynamixel ManagementDynamixels used as robot actuators possess many functions. This section explains how to change the dynamixel’s settings.Changing the ID  Select the port the controller is connected to.      Click “Connect”.        A list of connected dynamixels is shown on the left. Click on the dynamixel you wish to change the ID of.  Click on the ID row in the Control Table.      Click on the ID List combo box to see a list of possible ID’s. Select the ID, then click Apply.        To use in RoboPlus Motion and RoboPlus Task, the ID must be within the following ranges.          The Dynamixel’s ID must be between 0 and 25.      The ID for AX-S1 should be set between 100 and 109.      Changing the Movement ModeThe dynamixel can operate in 2 different modes.  Wheel Mode : Rotates 360 degrees like a regular motor.  Joint Mode : Moves at a set angle with normal servo motors.The mode can be changed using RoboPlus Manager. Once the mode is set, it will be maintained, even when turned off.  Select the port the controller is connected to.      Click “Connect”.        A list of connected Dynamixels is shown on the left.  Click on the Dynamixel you wish to change the mode of. Then, click on the CW/CCW Angle Limit line in the Control Table.      To set to Wheel Mode, change the CW/CCW Angle Limit value to “0.”  Or, simply click on the “Wheel Mode” button.        To set to Joint Mode again, set the CW/CCW Angle Limit value to any number other than “0”. The initial values for Joint Mode are “0” for CW Angle Limit, and “1023” for CCW Angle Limit.TroubleshootingIf you cannot find the dynamixel you are looking for using RoboPlus Manager, try the following :  Connect just 1 Dynamixel and check if there are any duplicate IDs. If you see a Dynamixel on the left even though only 1 Dynamixel is connected, there is a high probability of a duplicate ID. Change the ID immediately.  If you are unable to find any Dynamixels as in the image below, click on “Dynamixel Search”. If the communication speed is not set to 1Mbps, the “Dynamixel Search” function automatically resets the controller’s communication speed to 1Mbps to enable it to be recognized.If the problem persists, your dynamixel may need repair. Please contact the service department of the company you purchased from.ZIGBee Wireless ControlZIGBeeZIG-100/110 uses ZIGBee for wireless communication. ZIGBee, like Bluetooth, is the communication technology commonly used in Personal Area Network (PAN). The communication quality of ZIGBee is better than that of IR, so it allows many users to control their robots without interferences.Caution Please note that not all products include a zigbee module and may need to be purchased separately.Controller &amp;amp; ZIGBeeOLLO and Bioloid both use the RC-100, which uses IR communication method. To upgrade to the Zigbee communication method, you must purchase the  ZIG-110 set separately. The ZIG-110 set includes one Zig-100 module, which is attached to the RC-100, and one Zig-110 module which is attached to the Controller.Note The modules in a single Zigbee set have been preconfigured to communicate with each other. Therefore, a module from one set may not work with a module from another set. Please be careful not to mix them up.            ZIG-100 installed in RC-100      ZIG-110 installed in CM-100                                          ZIG-110 installed in CM-510      ZIG-100 installed in CM-5                              ZIG-110A Set Assembly Method(GP)Control Multiple RobotsThis method is to give out commands at once to several robots being used for dance or demonstrationGives out commands to the robot at once using the zigbee module’s broadcast modeBioloid(Entry/Advanced)      Communication with the Zig2Serial and carious robots            Communication with the RC-100 and carious robots        To use the CM-5, connect the controller and ZIG-100 module together.  Use the RoboPlus Manager to set the wireless ID of ZIG-100 module on the opposite party’s robot to 65535.  No need to set the broadcast channel for communication.  Use the RC-100 to give commands directly or use the Zig2Serial to give commands using the PC.            Device      Channel Default Value      Whether or not the channel can be changed                  CM-5      1      Unchangeable              Zig2Serial      1      Changeable              RC-100      1      Changeable      The channel for the ZIG-100 mounted on the CM-5 is unchangeable. Thus, all users must set their channel to #1 for broadcast communication. All channels for the devises must pair to communicate.Bioloid Premium Kit(CM-700)      Communication with the Zig2Serial and carious robots            Communication with the RC-100 and carious robots        When using the CM-510/CM-700, connect the ZIG-100 module with the controller.  Use the RoboPlus Manager to change the opposite party’s wireless ID to 65535.  The channel on the ZIG-110 connected to the controller it set to #4, so the channels on the Zig2Serial and RC-100 must be set to #4.  How to change the RC-100 channel  How to change the Zig2Serial channel            Device      Channel Default Value      Whether or not the channel can be changed                  CM-510CM530      4      Unchangeable              Zig2Serial      1      Changeable              RC-100      1      Changeable      The channel for the zigbee connected to the controller is not changeable. Thus, all users must set their channel to #4 for broadcast communicationAll channels for the devises must pair to communicate.Adding SensorsWith the Bioloid Premium Kit, you can connect additional IR Sensor and Touch Sensor to the CM-530.For more information on each sensors, please click on the names of the sensors.IR Sensor  IR Sensor Applications          The IR sensor can detects objects in front of the robot.      It can also be used to detect object on the side when walking or moving.      More informationTouch Sensor  Touch Sensor Applications          The touch sensor enables the robot to feel when it has been touched.      For example, the sensor can be used to make the robot react to certain touches.      More informationDMS(Distance Measuring Sensor)More informationMake Your Own SensorYou can make your own sensor with simple control functions using the ADC port and OUT port on CM-510/CM-530.Caution Connecting poorly designed circuits may damage the controller. Please be sure to acquire sufficient knowledge about circuits beforehand.PIN Information  Below is a pin diagram of CM-510’s external port.          OUT : 5V Output      VCC (5V)      ADC : Can read analog signals made by users.      GND      NC : Not used        Below is a pin diagram of CM-530’s external port.          OUT1 : 3.3V Output (Maximum Allowed Current 0.3A)      VCC (5V)      ADC : Can read analog signals made by users.      GND      OUT2 : 3.3V Output (Maximum Allowed Current 0.3A)      Note Please use the 5P Cable when using other sensors. The 5P cable can be purchased from ROBOTIS.Controlling User’s DeviceExternal Output ControlBelow is an example of an LED circuit to turn the LED on and off using the OUT port (Pin 1).You need to adjust the amound of resistance depending on the type of controller and/or the type of LED.A high signal can be sent to the OUT port using RoboPlus Task.  Select the user’s device in the writable parameter such as LOAD and CALCULATE, then select the port on which the device is connected.  Then, set the high signal to the readable parameter using a constant.When the code above is executed, high signal will be sent to the OUT port of the device connected to PORT 3, and the LED will turn on.Reading the ADC ValueMost of the sensors used in robots, such as IR sensors and distance sensors, support analog output. The CM-510 can use its external ports to read the sensor’s analog output signals. These sensors may be designed by the user or bought from a store.  Below is an image of a tilt sensor. When the sensor is tilted, it prints the tilted value as the analog singal.  The left pin of the tilt sensor is 5V VCC. The center is an analog signal output pin, and the right pin is GND.  This sensor can be used by connecting its pins to the corresponding pins on CM-510’s external port.  To try for yourself, please refer to the pin information for CM-510’s external ports.  You can incorporate the sensor’s analog output to your robot’s movements as in the example below.",
        "url": " http://localhost:4000/docs/en/edu/bioloid/gp/"
      } ,
  
      "docs-en-parts-sensor-gs-12":  {
        "title": "Gyro Sensor(GS-12)",
      "content"	 : "Gyro Sensor(GS-12)Introduction  Measures angular velocity.  Calculates which side the robot is tilted or is getting more power.  Maintains the robot’s balance and can be used for other movement applications.Compatibility Guide Controller CompatibilitySpecifications  Weight : 2.8g  Size : 23mm x 23mm x 10mm  Working Temperature : -40°C ~ 85°C  Angular Velocity Calculation Range : -300°/s ~ 300°/s  Bandwidth : 140Hz  Sensitivity : 3.33mV/dps  Recommended Voltage Supply : 4.5 ~ 5.5 VPinout  X Axis Pin          ADC : Outputs the angular velocity into analog signals.      GND      VCC ( 5V )        Y Axis Pin          VCC ( 5V )      GND      ADC : Outputs the angular velocity value into analog signals.      Sensor Output            Item      MAX      ~      MIN                  Output Value      455      250      45              Angular Velocity      +300°/s      0°/s      -300°/s              Voltage      2.23 V      1.23V      0.23V        Standard VCC Voltage Value is 5V.  When the angular velocity is 0 (when still), the output value is approximately 250. When it suddenly turns to one axis, the max value output is 455 and the minimum 45, showing a 300°/s angular velocity. Here the mark or sign represents direction.  Depending on the temperature, there may be 1% difference.  There may be a difference in value depending on the standard VCC voltage value and circuit noise. Thus, we recommend to average several values before use.(When sampling, the robot must not be moving.)      You can READ the value using the User’s Device Parameter in RoboPlus Task.            You may sample it out like below. It reads 10 values per 0.1 sec and makes an average. This value can be used as the standard value.      Tutorials  RoboPlus Task : Please refer to User’s Device Parameter section in the Roboplus Task.",
        "url": " http://localhost:4000/docs/en/parts/sensor/gs-12/"
      } ,
  
      "docs-en-dxl-pro-h42-20-s300-r":  {
        "title": "H42-20-S300-R",
      "content"	 : "H42-20-S300-RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps ~ 10.5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      340g (11.9oz)              Dimensions (W x H x D)      42mm x 84mm x 42mm (1.65 x 3.31 x 1.65)              Resolution      303,750 steps/rev              Gear Ratio      303.8 : 1              Backlash      3.8arcmin (0.06°)              No Load Speed      32.7rpm              No Load Current      0.57A              Continuous Speed      29.2rpm              Continuous Torque      5.1Nm (722 ozf-in)              Continuous Current      1.5A              Output      20W              Operating Temperature      5°C ~ 55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multidrop BUS              ID      0 ~ 252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different. Stall torque is measured from the max torque that it can reach. This is generally how RC servos measure their torque. For the Performance graph with the N-T curves, it is measured with the load gradually increasing. The motor operation environment is closer to the performance graph, not stall torque method. This is probably why the performance graph is being broadly used in the industrial market. This is why the max torque of the performance grap can actually be less than the stall torque.Caution When connecting to power supply, it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL.Do not connect or disconnect DYNAMIXEL when power is being supplied.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 2.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(64) is cleared to ‘0’.SizeThe Size of data varies from 1 to 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. For data larger than 2 bytes will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      51200              2      4      Model Information      Model Information      R      -              6      1      Firmware Version      Firmware Version      R      -              7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW      -              30      2      Torque Limit      Maximum Torque Limit      RW      -              32      4      Velocity Limit      Maximum Velocity Limit      RW      -              36      4      Max Position Limit      Maximum Position Limit      RW      -              40      4      Min Position Limit      Minimum Position Limit      RW      -              44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On/Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW      -              588      2      Velocity P Gain      P Gain of Velocity      RW      -              594      2      Position P Gain      P Gain of Position      RW      -              596      4      Goal Position      Target Position Value      RW      -              600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R      -              611      4      Present Position      Present Position Value      R      -              615      4      Present Velocity      Present Velocity Value      R      -              621      2      Present Current      Present Current Value      R      -              623      2      Present Input Voltage      Present Input Voltage      R      -              625      1      Present Temperature      Present Internal Temperature      R      -              626      2      External Port Data 1      External Port Data 1      R/RW      0              628      2      External Port Data 2      External Port Data 2      R/RW      0              630      2      External Port Data 3      External Port Data 3      R/RW      0              632      2      External Port Data 4      External Port Data 4      R/RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable(562) is cleared to ‘0’.Model Number(0)This address stores model number of the DYNAMIXEL.            Model Name      Model Number                  H42-20-S300-R      51200 (0xC800)      Firmware Version(6)This address stores firmware version of the DYNAMIXEL.ID(7)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate(8)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate                  8      10.5M              7      4.5M              6      4M              5      3M              4      2M              3      1M              2      115,200              1(Default)      57,600              0      9,600      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time(9)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      Operating Mode(11)            Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque. Speed and Position will not be controlled.              1      Velocity Control Mode      This mode controls Velocity and Torque. Position will not be controlled.              3(Default)      Position Control Mode      This mode controls Position, Velocity and Torque.              4      Extended Position Control Mode      This mode controls Position, Velocity and Torque. Multi-turn is enabled.      Homing Offset(13)Users can adjust the Home position by setting Homing Offset(13). The Homing Offset value is added to the Present Position(611).Present Position(611) = Actual Position + Homing Offset(13).            Value Range                  -2,147,483,648 ~ 2,147,483,647      Moving Threshold(17)If Present Velocity(615) is bigger than this value, Moving(610) is set to ‘1’ and otherwise Moving(610) is cleared to ‘0’. This value determines whether Dynamixel is in motion or not.            Value Range                  0 ~ 2,147,483,647      Temperature Limit(21)This value limits operating temperature. When the Present Temperature(625) that indicates internal temperature of Dynamixel is greater than the Temperature Limit(21), the Over Heating Error Bit(Bit 2) in the Hardware Error Status(892) will be set. If Overheating Error Bit(Bit 2) is configured in the Shutdown(48) when Over Heating Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 1°      0 ~ 100      0 ~ 100°      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage Limit(24, 22)These values are maximum and minimum operating voltages.When current input voltage acquired from Present Input Voltage(623) exceeds the range of Max Voltage Limit(36) and Min Voltage Limit(40), Input Voltage Error Bit(Bit 0) in the Hardware Error Status(892) will be set to ‘1’. If Input Voltage Error Bit(Bit 0) is configured in the Shutdown(48) when Input Voltage Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 0.1V      0 ~ 400      0 ~ 40.0V      Acceleration Limit(26)This value indicates acceleration limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Torque Limit(30)This value indicates torque limit. Goal Torque(604) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 32,767      Velocity Limit(32)This value indicates velocity limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Min/Max Position Limits(40, 36)These values limit maximum and minimum target positions. The Goal Position(596) can’t exceed these values.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet. In Extended Position Control Mode, these limits will be ignored.            Model Name      Value Range                  H54-200-S500-RH54-100-S500-R      -250,961 ~ 250,961              H42-20-S300-R      -151,875 ~ 151,875              M54-60-S250-RM54-40-S250-R      -125,708 ~ 125,708              M42-10-S260-R      -131,593 ~ 131,593              L54-50-S290-R      -103,846 ~ 103,846              L54-50-S500-RL54-30-S500-R      -180,692 ~ 180,692              L54-30-S400-R      -144,197 ~ 144,197      External Port Mode(44 ~ 47)/Data(626 ~ 632)Dynamixel PRO is equipped with multi-purpose expansion ports.            Item      Range                  Voltage      0 ~ 3.3V              Current      0 ~ 5mA        Analog input mode: analog values from an external port get converted to digital. These values are automatically updated in External port data(626 ~ 632).  Output mode: can adjust external port voltage 0V or 3.3V. External port data value of 0 is 0V, 1 for 3.3V.  Pull-up input mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-up. Depending on needs an external strong pull-up is acceptable.  Pull-up output mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-down. Depending on needs an external strong pull-down is acceptable.External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector.            Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3.3V      PORT1      PORT2      PORT3      PORT4      Shutdown(48)The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation. Each Bit is inclusively processed with the ‘OR’ logic, therefore, multiple options can be generated. For instance, when ‘0x05’ (binary : 00000101) is defined as Shutdown(48), Dynamixel can detect both Input Voltage Error(binary : 00000001) and Overheating Error(binary : 00000100). If those errors are detected, Torque Enable(562) is cleared to ‘0’ and the motor output becomes 0[%]. In order to reuse Dynamixel Pro in shutdown status, REBOOT has to be done. The followings are detectable situations.            Bit      Item      Description                  Bit 7      -      -              Bit 6      -      -              Bit 5      Overload Error(default)      Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error(default)      Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error(default)      Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs, use below method to reboot Dynamixels.  H/W REBOOT : Turn off the power and turn on again  S/W REBOOT : Transmit REBOOT Instruction (For more details, please refer to the Protocol section of e-Manual.)Indirect Address, Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses. Sequential addresses increase Instruction Packet efficiency. Addresses that can be defined as Indirect Address is limited to RAM area(Address 562 ~ 892).If specific address is allocated to Indirect Address, Indirect Address inherits features and properties of the Data from the specific Address. Property includes Size(Byte length), value range, and Access property(Read Only, Read/Write). For instance, if address 563(LED Red) is allocated to Indirect Address 1(49), Indirect Data 1(634) will have the exactly same value of LED Red(563).Example 1 Allocating 1 byte LED(563) to Indirect Data 1(634).  Indirect Address 1(49) : change the value to ‘563’ which is the address of LED Red.  Set Indirect Data 1(634) to ‘1’ : LED Red(563) also becomes ‘1’ and Red LED will be turned on.  Set Indirect Data 1(634) to ‘0’ : LED Red(563) also becomes ‘0’ and Red LED will be turned off.Example 2 Allocating Size 4 byte Goal Position(596) to Indirect Data 2(635), 4 sequential bytes have to be allocated.  Indirect Address 2(51) : change the value to ‘596’ which is the first address of Goal Position.  Indirect Address 3(53) : change the value to ‘597’ which is the second address of Goal Position.  Indirect Address 4(55) : change the value to ‘598’ which is the third address of Goal Position.  Indirect Address 5(57) : change the value to ‘599’ which is the fourth address of Goal Position.  Set 4 byte value 305,419,896(0x12345678) to Indirect Data 2 : Goal Position(596) also becomes 305,419,896(0x12345678) as below.            Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2[byte] to Indirect Address, all address must be allocated to Indirect Address like the above Example 2.Note Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.Torque Enable(562)Controls Torque ON/OFF. Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected.            Value      Description                  0(Default)      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      Note Present Position(132) can be reset when Operating Mode(11) and Torque Enable(64) are updated. For more details, please refer to the Homing Offset(20) and Present Position(132).RGB LED(563)Controls the RGB LED on Dynamixel PRO.            Address      Color      Range                  563      Red      0 ~ 255              564      Green      0 ~ 255              565      Blue      0 ~ 255      Velocity PI Gain(588, 586)These values indicate P and I Gains of Velocity Control Mode. The I Gain includes sampling time. Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI.            Gain Value Range                  0 ~ 32,767      Note KPA stands for Anti-windup Gain that cannot be modified by users. For more details about the PID controller, please refer to the PID Controller at wikipedia.Position P Gain(594)This P Gain is used in Position Control Mode. Below figure is a block diagram describing the Position Control Mode. The Position Controller is cascaded with the Velocity Controller. KPP stands for Position P Gain.            Gain Value Range                  0 ~ 32,767      Goal Position(596), Present Position(611)Target position can be set with Goal Position(596). This value can’t be smaller than the Min Position Limit(40) or larger than Max Position Limit(36).            Model      Angle Range      Position Range      Description                  H54-200-S500-RH54-100-S500-R      -180° ~ 180 °      -250,961.5 ~ 250,961.5                    H42-20-S300-R      -180° ~ 180 °      -151,875 ~ 151,875            Goal Velocity(600)Goal Velocity(600) can be used to set a target velocity and this value cannot exceed Velocity Limit (32).In case of Position Control Mode or Extended Position Control Mode, Goal Velocity will be used to limit the velocity.However, if Goal Velocity is set to ‘0’, Velocity Limit(32) will be used to limit the velocity. (Please refer to the block diagram of Position P Gain)The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor.Output RPM = Goal Velocity * Scale Factor            Model      Scale Factor(RPM)                  H54-200-S500-RH54-100-S500-R      0.00199234              H42-20-S300-R      0.00329218              M54-60-S250-RM54-40-S250-R      0.00397746              M42-10-S260-R      0.00389076              L54-50-S290-R      0.00346667              L54-50-S500-RL54-30-S500-R      0.00199234              L54-30-S400-R      0.00249657      Goal Torque(604)Goal torque (604) can be used to set a target torque and this value cannot exceed Torque Limit(30).When the Operating Mode(11) is set other than Torque Control Mode, Goal Torque will be used to limit the torque.However, if Goal Torque is set to ‘0’, Torque Limit(30) will be used to limit the torque. (Please refer to the block diagram of Position Gain or Velocity Gain)The relationship between torque, current, and goal torque is shown below.            Model      Formula                  PRO 54      A = V * 33,000 / 2,048A : Current[mA]V : Present Current/Goal Torque              PRO 42      A = V * 8,250 / 2,048A : Current[mA]V : Present Current/Goal Torque      Goal Acceleration(606)Goal Acceleration(606) can be used to set a target acceleration. This value is used in Velocity Control Mode, Position Control Mode and Extended Position Control Mode. The profile control will be enabled when both Goal Acceleration(606) and Goal Velocity(600) are not ‘0’.Please refer to the Goal Velocity(600) for RPM conversion constant.            Value Range      Unit                  -2,147,483,647 ~ 2,147,483,647      58,000 RPM2 @ Core Motor      Moving(610)This value indicates whether Dynamixel Pro is in motion or not. If absolute value of Present Velocity(615) is greater than Moving Threshold(17), Moving(610) is set to ‘1’. Otherwise, it will be cleared to ‘0’. However, this value will always be set to ‘1’ regardless of Present Velocity(615) while Profile is in progress with Goal Position(596) instruction.            Value      Description                  0      Movement is not detected              1      Movement is detected, or Profile is in progress(Goal Position(596) instruction is being processed)      Present Velocity(615)This value indicates present Velocity. For more details, please refer to the Goal Velocity(600).Present Current(621)This value indicates present Current. For more details, please refer to the Goal Torque(604).Present Input Voltage(623)This value indicates present voltage that is being supplied. For more details, please refer to the Min/Max Voltage Limit(24, 22).Present Temperature (625)This value indicates present internal Temperature. For more details, please refer to the Temperature Limit(21).Registered Instruction(890)            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Status Return Level(891)This value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Hardware Error Status(892)This value indicates hardware error status. For more details, please refer to the Shutdown(48).How to AssembleOption Frame Assembly  FRP42-H110K, FRP42-H120K SetMaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF, DWG, STEP, IGES",
        "url": " http://localhost:4000/docs/en/dxl/pro/h42-20-s300-r/"
      } ,
  
      "docs-en-dxl-pro-h54-100-s500-r":  {
        "title": "H54-100-S500-R",
      "content"	 : "H54-100-S500-RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps ~ 10.5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      732g (25.8oz)              Dimensions (W x H x D)      54mm x 108mm x 54mm (2.13 x 4.25 x 2.13)              Resolution      501,923 steps/rev              Gear Ratio      501.9 : 1              Backlash      3.5arcmin (0.06°)              No Load Speed      33.3rpm              No Load Current      1.13A              Continuous Speed      29.2rpm              Continuous Torque      25.3Nm (3,582 ozf-in)              Continuous Current      5.5A              Output      100W              Operating Temperature      5°C ~ 55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multidrop BUS              ID      0 ~ 252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different. Stall torque is measured from the max torque that it can reach. This is generally how RC servos measure their torque. For the Performance graph with the N-T curves, it is measured with the load gradually increasing. The motor operation environment is closer to the performance graph, not stall torque method. This is probably why the performance graph is being broadly used in the industrial market. This is why the max torque of the performance grap can actually be less than the stall torque.Caution When connecting to power supply, it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL.Do not connect or disconnect DYNAMIXEL when power is being supplied.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 2.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(64) is cleared to ‘0’.SizeThe Size of data varies from 1 to 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. For data larger than 2 bytes will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      53768              2      4      Model Information      Model Information      R      -              6      1      Firmware Version      Firmware Version      R      -              7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW      -              30      2      Torque Limit      Maximum Torque Limit      RW      -              32      4      Velocity Limit      Maximum Velocity Limit      RW      -              36      4      Max Position Limit      Maximum Position Limit      RW      -              40      4      Min Position Limit      Minimum Position Limit      RW      -              44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On/Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW      -              588      2      Velocity P Gain      P Gain of Velocity      RW      -              594      2      Position P Gain      P Gain of Position      RW      -              596      4      Goal Position      Target Position Value      RW      -              600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R      -              611      4      Present Position      Present Position Value      R      -              615      4      Present Velocity      Present Velocity Value      R      -              621      2      Present Current      Present Current Value      R      -              623      2      Present Input Voltage      Present Input Voltage      R      -              625      1      Present Temperature      Present Internal Temperature      R      -              626      2      External Port Data 1      External Port Data 1      R/RW      0              628      2      External Port Data 2      External Port Data 2      R/RW      0              630      2      External Port Data 3      External Port Data 3      R/RW      0              632      2      External Port Data 4      External Port Data 4      R/RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable(562) is cleared to ‘0’.Model Number(0)This address stores model number of the DYNAMIXEL.            Model Name      Model Number                  H54-100-S500-R      53768 (0xD208)      Firmware Version(6)This address stores firmware version of the DYNAMIXEL.ID(7)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate(8)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate                  8      10.5M              7      4.5M              6      4M              5      3M              4      2M              3      1M              2      115,200              1(Default)      57,600              0      9,600      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time(9)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      Operating Mode(11)            Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque. Speed and Position will not be controlled.              1      Velocity Control Mode      This mode controls Velocity and Torque. Position will not be controlled.              3(Default)      Position Control Mode      This mode controls Position, Velocity and Torque.              4      Extended Position Control Mode      This mode controls Position, Velocity and Torque. Multi-turn is enabled.      Homing Offset(13)Users can adjust the Home position by setting Homing Offset(13). The Homing Offset value is added to the Present Position(611).Present Position(611) = Actual Position + Homing Offset(13).            Value Range                  -2,147,483,648 ~ 2,147,483,647      Moving Threshold(17)If Present Velocity(615) is bigger than this value, Moving(610) is set to ‘1’ and otherwise Moving(610) is cleared to ‘0’. This value determines whether Dynamixel is in motion or not.            Value Range                  0 ~ 2,147,483,647      Temperature Limit(21)This value limits operating temperature. When the Present Temperature(625) that indicates internal temperature of Dynamixel is greater than the Temperature Limit(21), the Over Heating Error Bit(Bit 2) in the Hardware Error Status(892) will be set. If Overheating Error Bit(Bit 2) is configured in the Shutdown(48) when Over Heating Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 1°      0 ~ 100      0 ~ 100°      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage Limit(24, 22)These values are maximum and minimum operating voltages.When current input voltage acquired from Present Input Voltage(623) exceeds the range of Max Voltage Limit(36) and Min Voltage Limit(40), Input Voltage Error Bit(Bit 0) in the Hardware Error Status(892) will be set to ‘1’. If Input Voltage Error Bit(Bit 0) is configured in the Shutdown(48) when Input Voltage Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 0.1V      0 ~ 400      0 ~ 40.0V      Acceleration Limit(26)This value indicates acceleration limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Torque Limit(30)This value indicates torque limit. Goal Torque(604) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 32,767      Velocity Limit(32)This value indicates velocity limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Min/Max Position Limits(40, 36)These values limit maximum and minimum target positions. The Goal Position(596) can’t exceed these values.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet. In Extended Position Control Mode, these limits will be ignored.            Model Name      Value Range                  H54-200-S500-RH54-100-S500-R      -250,961 ~ 250,961              H42-20-S300-R      -151,875 ~ 151,875              M54-60-S250-RM54-40-S250-R      -125,708 ~ 125,708              M42-10-S260-R      -131,593 ~ 131,593              L54-50-S290-R      -103,846 ~ 103,846              L54-50-S500-RL54-30-S500-R      -180,692 ~ 180,692              L54-30-S400-R      -144,197 ~ 144,197      External Port Mode(44 ~ 47)/Data(626 ~ 632)Dynamixel PRO is equipped with multi-purpose expansion ports.            Item      Range                  Voltage      0 ~ 3.3V              Current      0 ~ 5mA        Analog input mode: analog values from an external port get converted to digital. These values are automatically updated in External port data(626 ~ 632).  Output mode: can adjust external port voltage 0V or 3.3V. External port data value of 0 is 0V, 1 for 3.3V.  Pull-up input mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-up. Depending on needs an external strong pull-up is acceptable.  Pull-up output mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-down. Depending on needs an external strong pull-down is acceptable.External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector.            Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3.3V      PORT1      PORT2      PORT3      PORT4      Shutdown(48)The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation. Each Bit is inclusively processed with the ‘OR’ logic, therefore, multiple options can be generated. For instance, when ‘0x05’ (binary : 00000101) is defined as Shutdown(48), Dynamixel can detect both Input Voltage Error(binary : 00000001) and Overheating Error(binary : 00000100). If those errors are detected, Torque Enable(562) is cleared to ‘0’ and the motor output becomes 0[%]. In order to reuse Dynamixel Pro in shutdown status, REBOOT has to be done. The followings are detectable situations.            Bit      Item      Description                  Bit 7      -      -              Bit 6      -      -              Bit 5      Overload Error(default)      Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error(default)      Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error(default)      Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs, use below method to reboot Dynamixels.  H/W REBOOT : Turn off the power and turn on again  S/W REBOOT : Transmit REBOOT Instruction (For more details, please refer to the Protocol section of e-Manual.)Indirect Address, Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses. Sequential addresses increase Instruction Packet efficiency. Addresses that can be defined as Indirect Address is limited to RAM area(Address 562 ~ 892).If specific address is allocated to Indirect Address, Indirect Address inherits features and properties of the Data from the specific Address. Property includes Size(Byte length), value range, and Access property(Read Only, Read/Write). For instance, if address 563(LED Red) is allocated to Indirect Address 1(49), Indirect Data 1(634) will have the exactly same value of LED Red(563).Example 1 Allocating 1 byte LED(563) to Indirect Data 1(634).  Indirect Address 1(49) : change the value to ‘563’ which is the address of LED Red.  Set Indirect Data 1(634) to ‘1’ : LED Red(563) also becomes ‘1’ and Red LED will be turned on.  Set Indirect Data 1(634) to ‘0’ : LED Red(563) also becomes ‘0’ and Red LED will be turned off.Example 2 Allocating Size 4 byte Goal Position(596) to Indirect Data 2(635), 4 sequential bytes have to be allocated.  Indirect Address 2(51) : change the value to ‘596’ which is the first address of Goal Position.  Indirect Address 3(53) : change the value to ‘597’ which is the second address of Goal Position.  Indirect Address 4(55) : change the value to ‘598’ which is the third address of Goal Position.  Indirect Address 5(57) : change the value to ‘599’ which is the fourth address of Goal Position.  Set 4 byte value 305,419,896(0x12345678) to Indirect Data 2 : Goal Position(596) also becomes 305,419,896(0x12345678) as below.            Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2[byte] to Indirect Address, all address must be allocated to Indirect Address like the above Example 2.Note Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.Torque Enable(562)Controls Torque ON/OFF. Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected.            Value      Description                  0(Default)      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      Note Present Position(132) can be reset when Operating Mode(11) and Torque Enable(64) are updated. For more details, please refer to the Homing Offset(20) and Present Position(132).RGB LED(563)Controls the RGB LED on Dynamixel PRO.            Address      Color      Range                  563      Red      0 ~ 255              564      Green      0 ~ 255              565      Blue      0 ~ 255      Velocity PI Gain(588, 586)These values indicate P and I Gains of Velocity Control Mode. The I Gain includes sampling time. Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI.            Gain Value Range                  0 ~ 32,767      Note KPA stands for Anti-windup Gain that cannot be modified by users. For more details about the PID controller, please refer to the PID Controller at wikipedia.Position P Gain(594)This P Gain is used in Position Control Mode. Below figure is a block diagram describing the Position Control Mode. The Position Controller is cascaded with the Velocity Controller. KPP stands for Position P Gain.            Gain Value Range                  0 ~ 32,767      Goal Position(596), Present Position(611)Target position can be set with Goal Position(596). This value can’t be smaller than the Min Position Limit(40) or larger than Max Position Limit(36).            Model      Angle Range      Position Range      Description                  H54-200-S500-RH54-100-S500-R      -180° ~ 180 °      -250,961.5 ~ 250,961.5                    H42-20-S300-R      -180° ~ 180 °      -151,875 ~ 151,875            Goal Velocity(600)Goal Velocity(600) can be used to set a target velocity and this value cannot exceed Velocity Limit (32).In case of Position Control Mode or Extended Position Control Mode, Goal Velocity will be used to limit the velocity.However, if Goal Velocity is set to ‘0’, Velocity Limit(32) will be used to limit the velocity. (Please refer to the block diagram of Position P Gain)The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor.Output RPM = Goal Velocity * Scale Factor            Model      Scale Factor(RPM)                  H54-200-S500-RH54-100-S500-R      0.00199234              H42-20-S300-R      0.00329218              M54-60-S250-RM54-40-S250-R      0.00397746              M42-10-S260-R      0.00389076              L54-50-S290-R      0.00346667              L54-50-S500-RL54-30-S500-R      0.00199234              L54-30-S400-R      0.00249657      Goal Torque(604)Goal torque (604) can be used to set a target torque and this value cannot exceed Torque Limit(30).When the Operating Mode(11) is set other than Torque Control Mode, Goal Torque will be used to limit the torque.However, if Goal Torque is set to ‘0’, Torque Limit(30) will be used to limit the torque. (Please refer to the block diagram of Position Gain or Velocity Gain)The relationship between torque, current, and goal torque is shown below.            Model      Formula                  PRO 54      A = V * 33,000 / 2,048A : Current[mA]V : Present Current/Goal Torque              PRO 42      A = V * 8,250 / 2,048A : Current[mA]V : Present Current/Goal Torque      Goal Acceleration(606)Goal Acceleration(606) can be used to set a target acceleration. This value is used in Velocity Control Mode, Position Control Mode and Extended Position Control Mode. The profile control will be enabled when both Goal Acceleration(606) and Goal Velocity(600) are not ‘0’.Please refer to the Goal Velocity(600) for RPM conversion constant.            Value Range      Unit                  -2,147,483,647 ~ 2,147,483,647      58,000 RPM2 @ Core Motor      Moving(610)This value indicates whether Dynamixel Pro is in motion or not. If absolute value of Present Velocity(615) is greater than Moving Threshold(17), Moving(610) is set to ‘1’. Otherwise, it will be cleared to ‘0’. However, this value will always be set to ‘1’ regardless of Present Velocity(615) while Profile is in progress with Goal Position(596) instruction.            Value      Description                  0      Movement is not detected              1      Movement is detected, or Profile is in progress(Goal Position(596) instruction is being processed)      Present Velocity(615)This value indicates present Velocity. For more details, please refer to the Goal Velocity(600).Present Current(621)This value indicates present Current. For more details, please refer to the Goal Torque(604).Present Input Voltage(623)This value indicates present voltage that is being supplied. For more details, please refer to the Min/Max Voltage Limit(24, 22).Present Temperature (625)This value indicates present internal Temperature. For more details, please refer to the Temperature Limit(21).Registered Instruction(890)            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Status Return Level(891)This value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Hardware Error Status(892)This value indicates hardware error status. For more details, please refer to the Shutdown(48).How to AssembleOption Frame Assembly      FRP54-H110K, FRP54-H120K Set        FRP54-H210K, FRP54-H220K Set  MaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF, DWG, STEP, IGES",
        "url": " http://localhost:4000/docs/en/dxl/pro/h54-100-s500-r/"
      } ,
  
      "docs-en-dxl-pro-h54-200-s500-r":  {
        "title": "H54-200-S500-R",
      "content"	 : "H54-200-S500-RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps ~ 10.5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      855g (30.1oz)              Dimensions (W x H x D)      54mm x 126mm x 54mm (2.13 x 4.96 x 2.13)              Resolution      501,923 steps/rev              Gear Ratio      501.9 : 1              Backlash      3.5arcmin (0.06°)              No Load Speed      33.1rpm              No Load Current      1.65A              Continuous Speed      29.0rpm              Continuous Torque      44.7Nm (6,330 ozf-in)              Continuous Current      9.3A              Output      200W              Operating Temperature      5°C ~ 55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multidrop BUS              ID      0 ~ 252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different. Stall torque is measured from the max torque that it can reach. This is generally how RC servos measure their torque. For the Performance graph with the N-T curves, it is measured with the load gradually increasing. The motor operation environment is closer to the performance graph, not stall torque method. This is probably why the performance graph is being broadly used in the industrial market. This is why the max torque of the performance grap can actually be less than the stall torque.Caution When connecting to power supply, it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL.Do not connect or disconnect DYNAMIXEL when power is being supplied.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 2.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(64) is cleared to ‘0’.SizeThe Size of data varies from 1 to 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. For data larger than 2 bytes will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      54024              2      4      Model Information      Model Information      R      -              6      1      Firmware Version      Firmware Version      R      -              7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW      -              30      2      Torque Limit      Maximum Torque Limit      RW      -              32      4      Velocity Limit      Maximum Velocity Limit      RW      -              36      4      Max Position Limit      Maximum Position Limit      RW      -              40      4      Min Position Limit      Minimum Position Limit      RW      -              44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On/Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW      -              588      2      Velocity P Gain      P Gain of Velocity      RW      -              594      2      Position P Gain      P Gain of Position      RW      -              596      4      Goal Position      Target Position Value      RW      -              600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R      -              611      4      Present Position      Present Position Value      R      -              615      4      Present Velocity      Present Velocity Value      R      -              621      2      Present Current      Present Current Value      R      -              623      2      Present Input Voltage      Present Input Voltage      R      -              625      1      Present Temperature      Present Internal Temperature      R      -              626      2      External Port Data 1      External Port Data 1      R/RW      0              628      2      External Port Data 2      External Port Data 2      R/RW      0              630      2      External Port Data 3      External Port Data 3      R/RW      0              632      2      External Port Data 4      External Port Data 4      R/RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable(562) is cleared to ‘0’.Model Number(0)This address stores model number of the DYNAMIXEL.            Model Name      Model Number                  H54-200-S500-R      54024 (0xD308)      Firmware Version(6)This address stores firmware version of the DYNAMIXEL.ID(7)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate(8)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate                  8      10.5M              7      4.5M              6      4M              5      3M              4      2M              3      1M              2      115,200              1(Default)      57,600              0      9,600      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time(9)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      Operating Mode(11)            Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque. Speed and Position will not be controlled.              1      Velocity Control Mode      This mode controls Velocity and Torque. Position will not be controlled.              3(Default)      Position Control Mode      This mode controls Position, Velocity and Torque.              4      Extended Position Control Mode      This mode controls Position, Velocity and Torque. Multi-turn is enabled.      Homing Offset(13)Users can adjust the Home position by setting Homing Offset(13). The Homing Offset value is added to the Present Position(611).Present Position(611) = Actual Position + Homing Offset(13).            Value Range                  -2,147,483,648 ~ 2,147,483,647      Moving Threshold(17)If Present Velocity(615) is bigger than this value, Moving(610) is set to ‘1’ and otherwise Moving(610) is cleared to ‘0’. This value determines whether Dynamixel is in motion or not.            Value Range                  0 ~ 2,147,483,647      Temperature Limit(21)This value limits operating temperature. When the Present Temperature(625) that indicates internal temperature of Dynamixel is greater than the Temperature Limit(21), the Over Heating Error Bit(Bit 2) in the Hardware Error Status(892) will be set. If Overheating Error Bit(Bit 2) is configured in the Shutdown(48) when Over Heating Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 1°      0 ~ 100      0 ~ 100°      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage Limit(24, 22)These values are maximum and minimum operating voltages.When current input voltage acquired from Present Input Voltage(623) exceeds the range of Max Voltage Limit(36) and Min Voltage Limit(40), Input Voltage Error Bit(Bit 0) in the Hardware Error Status(892) will be set to ‘1’. If Input Voltage Error Bit(Bit 0) is configured in the Shutdown(48) when Input Voltage Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 0.1V      0 ~ 400      0 ~ 40.0V      Acceleration Limit(26)This value indicates acceleration limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Torque Limit(30)This value indicates torque limit. Goal Torque(604) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 32,767      Velocity Limit(32)This value indicates velocity limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Min/Max Position Limits(40, 36)These values limit maximum and minimum target positions. The Goal Position(596) can’t exceed these values.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet. In Extended Position Control Mode, these limits will be ignored.            Model Name      Value Range                  H54-200-S500-RH54-100-S500-R      -250,961 ~ 250,961              H42-20-S300-R      -151,875 ~ 151,875              M54-60-S250-RM54-40-S250-R      -125,708 ~ 125,708              M42-10-S260-R      -131,593 ~ 131,593              L54-50-S290-R      -103,846 ~ 103,846              L54-50-S500-RL54-30-S500-R      -180,692 ~ 180,692              L54-30-S400-R      -144,197 ~ 144,197      External Port Mode(44 ~ 47)/Data(626 ~ 632)Dynamixel PRO is equipped with multi-purpose expansion ports.            Item      Range                  Voltage      0 ~ 3.3V              Current      0 ~ 5mA        Analog input mode: analog values from an external port get converted to digital. These values are automatically updated in External port data(626 ~ 632).  Output mode: can adjust external port voltage 0V or 3.3V. External port data value of 0 is 0V, 1 for 3.3V.  Pull-up input mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-up. Depending on needs an external strong pull-up is acceptable.  Pull-up output mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-down. Depending on needs an external strong pull-down is acceptable.External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector.            Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3.3V      PORT1      PORT2      PORT3      PORT4      Shutdown(48)The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation. Each Bit is inclusively processed with the ‘OR’ logic, therefore, multiple options can be generated. For instance, when ‘0x05’ (binary : 00000101) is defined as Shutdown(48), Dynamixel can detect both Input Voltage Error(binary : 00000001) and Overheating Error(binary : 00000100). If those errors are detected, Torque Enable(562) is cleared to ‘0’ and the motor output becomes 0[%]. In order to reuse Dynamixel Pro in shutdown status, REBOOT has to be done. The followings are detectable situations.            Bit      Item      Description                  Bit 7      -      -              Bit 6      -      -              Bit 5      Overload Error(default)      Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error(default)      Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error(default)      Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs, use below method to reboot Dynamixels.  H/W REBOOT : Turn off the power and turn on again  S/W REBOOT : Transmit REBOOT Instruction (For more details, please refer to the Protocol section of e-Manual.)Indirect Address, Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses. Sequential addresses increase Instruction Packet efficiency. Addresses that can be defined as Indirect Address is limited to RAM area(Address 562 ~ 892).If specific address is allocated to Indirect Address, Indirect Address inherits features and properties of the Data from the specific Address. Property includes Size(Byte length), value range, and Access property(Read Only, Read/Write). For instance, if address 563(LED Red) is allocated to Indirect Address 1(49), Indirect Data 1(634) will have the exactly same value of LED Red(563).Example 1 Allocating 1 byte LED(563) to Indirect Data 1(634).  Indirect Address 1(49) : change the value to ‘563’ which is the address of LED Red.  Set Indirect Data 1(634) to ‘1’ : LED Red(563) also becomes ‘1’ and Red LED will be turned on.  Set Indirect Data 1(634) to ‘0’ : LED Red(563) also becomes ‘0’ and Red LED will be turned off.Example 2 Allocating Size 4 byte Goal Position(596) to Indirect Data 2(635), 4 sequential bytes have to be allocated.  Indirect Address 2(51) : change the value to ‘596’ which is the first address of Goal Position.  Indirect Address 3(53) : change the value to ‘597’ which is the second address of Goal Position.  Indirect Address 4(55) : change the value to ‘598’ which is the third address of Goal Position.  Indirect Address 5(57) : change the value to ‘599’ which is the fourth address of Goal Position.  Set 4 byte value 305,419,896(0x12345678) to Indirect Data 2 : Goal Position(596) also becomes 305,419,896(0x12345678) as below.            Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2[byte] to Indirect Address, all address must be allocated to Indirect Address like the above Example 2.Note Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.Torque Enable(562)Controls Torque ON/OFF. Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected.            Value      Description                  0(Default)      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      Note Present Position(132) can be reset when Operating Mode(11) and Torque Enable(64) are updated. For more details, please refer to the Homing Offset(20) and Present Position(132).RGB LED(563)Controls the RGB LED on Dynamixel PRO.            Address      Color      Range                  563      Red      0 ~ 255              564      Green      0 ~ 255              565      Blue      0 ~ 255      Velocity PI Gain(588, 586)These values indicate P and I Gains of Velocity Control Mode. The I Gain includes sampling time. Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI.            Gain Value Range                  0 ~ 32,767      Note KPA stands for Anti-windup Gain that cannot be modified by users. For more details about the PID controller, please refer to the PID Controller at wikipedia.Position P Gain(594)This P Gain is used in Position Control Mode. Below figure is a block diagram describing the Position Control Mode. The Position Controller is cascaded with the Velocity Controller. KPP stands for Position P Gain.            Gain Value Range                  0 ~ 32,767      Goal Position(596), Present Position(611)Target position can be set with Goal Position(596). This value can’t be smaller than the Min Position Limit(40) or larger than Max Position Limit(36).            Model      Angle Range      Position Range      Description                  H54-200-S500-RH54-100-S500-R      -180° ~ 180 °      -250,961.5 ~ 250,961.5                    H42-20-S300-R      -180° ~ 180 °      -151,875 ~ 151,875            Goal Velocity(600)Goal Velocity(600) can be used to set a target velocity and this value cannot exceed Velocity Limit (32).In case of Position Control Mode or Extended Position Control Mode, Goal Velocity will be used to limit the velocity.However, if Goal Velocity is set to ‘0’, Velocity Limit(32) will be used to limit the velocity. (Please refer to the block diagram of Position P Gain)The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor.Output RPM = Goal Velocity * Scale Factor            Model      Scale Factor(RPM)                  H54-200-S500-RH54-100-S500-R      0.00199234              H42-20-S300-R      0.00329218              M54-60-S250-RM54-40-S250-R      0.00397746              M42-10-S260-R      0.00389076              L54-50-S290-R      0.00346667              L54-50-S500-RL54-30-S500-R      0.00199234              L54-30-S400-R      0.00249657      Goal Torque(604)Goal torque (604) can be used to set a target torque and this value cannot exceed Torque Limit(30).When the Operating Mode(11) is set other than Torque Control Mode, Goal Torque will be used to limit the torque.However, if Goal Torque is set to ‘0’, Torque Limit(30) will be used to limit the torque. (Please refer to the block diagram of Position Gain or Velocity Gain)The relationship between torque, current, and goal torque is shown below.            Model      Formula                  PRO 54      A = V * 33,000 / 2,048A : Current[mA]V : Present Current/Goal Torque              PRO 42      A = V * 8,250 / 2,048A : Current[mA]V : Present Current/Goal Torque      Goal Acceleration(606)Goal Acceleration(606) can be used to set a target acceleration. This value is used in Velocity Control Mode, Position Control Mode and Extended Position Control Mode. The profile control will be enabled when both Goal Acceleration(606) and Goal Velocity(600) are not ‘0’.Please refer to the Goal Velocity(600) for RPM conversion constant.            Value Range      Unit                  -2,147,483,647 ~ 2,147,483,647      58,000 RPM2 @ Core Motor      Moving(610)This value indicates whether Dynamixel Pro is in motion or not. If absolute value of Present Velocity(615) is greater than Moving Threshold(17), Moving(610) is set to ‘1’. Otherwise, it will be cleared to ‘0’. However, this value will always be set to ‘1’ regardless of Present Velocity(615) while Profile is in progress with Goal Position(596) instruction.            Value      Description                  0      Movement is not detected              1      Movement is detected, or Profile is in progress(Goal Position(596) instruction is being processed)      Present Velocity(615)This value indicates present Velocity. For more details, please refer to the Goal Velocity(600).Present Current(621)This value indicates present Current. For more details, please refer to the Goal Torque(604).Present Input Voltage(623)This value indicates present voltage that is being supplied. For more details, please refer to the Min/Max Voltage Limit(24, 22).Present Temperature (625)This value indicates present internal Temperature. For more details, please refer to the Temperature Limit(21).Registered Instruction(890)            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Status Return Level(891)This value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Hardware Error Status(892)This value indicates hardware error status. For more details, please refer to the Shutdown(48).How to AssembleOption Frame Assembly      FRP54-H110K, FRP54-H120K Set        FRP54-H210K, FRP54-H220K Set  MaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF, DWG, STEP, IGES",
        "url": " http://localhost:4000/docs/en/dxl/pro/h54-200-s500-r/"
      } ,
  
      "docs-en-parts-motor-h-speed-geared-motor":  {
        "title": "High Speed Geared Motor",
      "content"	 : "High Speed Geared MotorIntroductionIt is the motor used in OLLO; it is connected to CM-100, and the direction of spin and the speed of spin can be adjusted through port control.It can be operated as general DC motors by connecting OLLO switch and the battery box.Compatibility Guide Controller CompatibilitySpecifications  Weight : 15g  Dimensions : 18mm x 36mm x 24mm  Gear Ratio : 70:1  Speed : 160RPM @ 1.5V, 350RPM @ 3.0V  Output on both Axles  Safety Clutch installedPinout  MOT-  MOT+Caution Cables can may be damaged when not properly connected (i.e. wrong orientation), or use of excessive force during connection.Tutorials  RoboPlus Task : Please refer to Geared Motor section in the Roboplus Task.Videos",
        "url": " http://localhost:4000/docs/en/parts/motor/h_speed_geared_motor/"
      } ,
  
      "docs-help":  {
        "title": "",
      "content"	 : "",
        "url": " "
      } ,
  
      "docs-cn":  {
        "title": "",
      "content"	 : "Robotis电子手册用法      找到你正在寻找从在搜索框中手动或类型的顶部菜单栏上的产品。        阅读手册。  经常发现内容DYNAMIXEL控制表",
        "url": " http://localhost:4000/docs/cn/"
      } ,
  
      "docs-en-software-sdk":  {
        "title": "",
      "content"	 : "  Controller Embedded C  Dynamixel SDK  ZIGBEE SDKDynamixel SDK            Protocol 1.0      Protocol 2.0      ROS      Windows      Linux      OS X      LabVIEW      MATLAB      VB      C#      C++      Java                  O      O      O      O      O      O      O      O      X      O      O      O        Download Dynamixel SDKROBOTIS Manipulator SDK            Protocol 1.0      Protocol 2.0      ROS      Windows      Linux      LabVIEW      MATLAB      VB      C#      C++      Java                  X      O      O      O      X      X      X      X      X      O      X        Download ROBOTIS Manipulator SDKController SDK            Controllers      Protocol 1.0      Protocol 2.0      ROS      Windows      Linux      LabVIEW      MATLAB      VB      C#      C++      Java                  CM-Series      O      X      X      O      X      X      X      X      X      X      X              OpenCM/CR      O      O      O      O      O      X      X      X      X      O      X        Download CM-510 SDK  Download CM-530 SDK  Download CM-700 SDKWireless Control SDK            SDK      Protocol 1.0      Protocol 2.0      ROS      Windows      Linux      LabVIEW      MATLAB      VB      C#      C++      Java                  Plug-in(Motion)      X      X      X      X      X      X      X      X      O      X      X              ZIGBEE Porting      X      X      X      X      X      X      X      X      X      X      X              ZIG2Serial(Windows)      X      X      X      O      X      X      X      O      O      O      X              ZIG2Serial(Linux)      X      X      X      X      O      X      X      X      X      X      X        Download Plug-In SDK(Motion)  Download ZIGBEE Porting SDK  Download ZIG2Serial SDK for 32bit Windows  Download ZIG2Serial SDK for 64bit Windows  Download ZIG2Serial SDK for Linux",
        "url": " http://localhost:4000/docs/en/software/sdk/"
      } ,
  
      "docs-jp":  {
        "title": "",
      "content"	 : "Robotis e-Manualの使い方      探している製品をマニュアル上部のメニューバーから検索したり、検索窓に入力します。        マニュアルを読みました。  頻繁に訪れるコンテンツDYNAMIXELコントロールテーブル",
        "url": " http://localhost:4000/docs/jp/"
      } ,
  
      "docs-kr-dxl":  {
        "title": "",
      "content"	 : "                                                                              다이나믹셀                                                                                                                                                                AX 시리즈                                              AX 시리즈                                                                                                                                                              EX 시리즈                                              EX 시리즈                                                                                                                                                              DX 시리즈                                              DX 시리즈                                                                                                                                                              RX 시리즈                                              RX 시리즈                                                                                                                                                              MX 시리즈                                              MX 시리즈                                                                                                                                                              X 시리즈                                              X 시리즈                                                                                                                                                              PRO 시리즈                                              PRO 시리즈                                          ",
        "url": " http://localhost:4000/docs/kr/dxl/"
      } ,
  
      "docs-kr":  {
        "title": "",
      "content"	 : "로보티즈 e-Manual 사용법      찾고자 하는 제품을 매뉴얼 상단의 메뉴바에서 찾거나 검색창에 입력합니다.        매뉴얼을 읽습니다.  자주 찾는 컨텐츠Note DYNAMIXEL 컨트롤 테이블Note 컨텐츠 작성방법",
        "url": " http://localhost:4000/docs/kr/"
      } ,
  
      "":  {
        "title": "",
      "content"	 : "ForumNew ROBOTIS Community Forum is available. Please checkout the Forum if you have any issue with ROBOTIS Products.Quick References  DYNAMIXEL Control Table          AX-12W, AX-12+/12A, AX-18F/18A      EX-106      DX-113, DX-116, DX-117      RX-10, RX-24F, RX-28, RX-64      MX-12W, MX-28, MX-28(2.0), MX-64, MX-64(2.0), MX-106, MX-106(2.0)      XL320, XL430-W250, XM430-W210, XM430-W350, XH430-W210, XH430-W350, XH430-V210, XH430-V350      H54-200-S500-R, H54-100-S500-R, H42-20-S300-R      M54-60-S250-R, M54-40-S250-R, M42-10-S260-R      L54-50-S500-R, L54-50-S290-R, L54-30-S500-R, L54-30-S400-R, L42-10-S300-R            DYNAMIXEL SDK SDK Download, Documentation        DYNAMIXEL Protocol Protocol 1.0, Protocol 2.0    Comatibility Guide Controller",
        "url": " http://localhost:4000/"
      } ,
  
      "docs-en-platform-manipulator-h-introduction":  {
        "title": "Manipulator-H",
      "content"	 : "Manipulator-HIntroduction  This manual applies to the Dynamixel PRO-based Robotis Manipulator.  All parameters in this manual are based on default values.  The manipulator’s configuration is provided. The ArmSDK is based on Windows7 and Visual Studio 2010.  It is strongly recommended with proficiency with Dynamixel PRO and C++.  The units utilized in the ArmSDK are in radians (rad) and millimeters (mm).  Modifying the wiring and components or performances not stated on this guide may result on adverse operations.  This manual utilizes the term “arm,” “Manipulator,” and “robot” interchangeably to describe product. The guide also may refer to Dynamixel Pro actuators to simply “Dynamixel,” “servo,” “motor,” or “actuator.”Last Updated : 5 November, 2014Safety InformationDANGERInformation appearing in a DANGER concerns the protection of personnel from the immediate and imminent hazards that, if not avoided, will result in immediate, serious personal injury or loss of life in addition to equipment damage.  Keep away from the robot while its moving..  Do not touch with the robot with wet hands.  Turn off power of the robot whenever robot is problematic.WARNINGInformation appearing in a WARNING concerns the protection of personnel and equipment from potential hazards that can result in personal injury or loss of life in addition to equipment damage.  Setup robot in an environment low on dust and humidity.  The robot must always be attached to the based when powered on.  The robot wiring must be checked prior to powering on.  The robot connection to power supplly must be check prior to powering on.  Do not change wiring on Robotis Manipulator while powered on.CAUTIONInformation appearing in a CAUTION concerns the protection of personnel and equipment, software, and data from hazards that can result in minor personal injury or equipment damage.  Keep robot’s workspace clear of object.  Ensure wiring is not tangled up on every joint.  Make sure USB2Dynamixel and PC does not interfere with the robot’s movingPackage Contents            Name      Quantity                  Manipulator      1              USB2Dyanmixel      1              4P Cable(500mm)      2              Power Cable(1,200mm)      2              4P expansion hub      1              Power expansion hub      1              Gripper(optional)      1              Support(optional)      2              Base Plate(optional)      1              3x8 wrench bolt      20              3x12 wrench bolt      20      LayoutDimension of Manipulator-HDimension of Manipulator-LWiring  The diagram above illustrates joints 1~6 connected in daisy-chain (serial) configuration with 4P Cable.  Joint 1 (labeled as “1st”) connects to USB2Dynamixel via 4P Cable.  USB2Dynamixel connects to PC via USB hub.  Dynamixel Pro is powered from a a power supply via power expansion hub.  Joints 5 and 6 (model: L42 - 10 - S300 – R) are not separately powered; instead power comes from the same 4P Cable.  You may obtain more 4P or Power Cables via ROBOTIS or see section 2.2 Preparation - ii) Cable.  Please refer to “2.1 Installation of Manipulator” for more info.Specifications            Item      Description                  DOF      6 DOF              Payload      3kg              Operating voltage      24V              Resolution      Joint 1 : -π(rad) ~ π(rad) , -251000 ~ 251000 (pulse)Joint 2 : -π(rad) ~ π(rad) , -251000 ~ 251000 (pulse)Joint 3 : -π(rad) ~ π(rad) , -251000 ~ 251000 (pulse)Joint 4 : -π(rad) ~ π(rad) , -251000 ~ 251000 (pulse)Joint 5 : -π(rad) ~ π(rad) , -151875 ~ 151875 (pulse)Joint 6 : -π(rad) ~ π(rad) , -151875 ~ 151875 (pulse)              Dynamixel ProModel Name      Joint 1, 2 : H54-200-S500-RJoint 3, 4 : H54-100-S500-RJoint 5, 6 : H42-20-S300-R              Operating Range      Joint 1 : -π(rad) ~ π(rad)Joint 2 : -π/2(rad) ~ π/2(rad)Joint 3 : -π/2(rad) ~ 3π/4(rad)Joint 4 : -π(rad) ~ π(rad)Joint 5 : -π/2(rad) ~ π/2(rad)Joint 6 : -π(rad) ~ π(rad)              Default ID      Joint 1 (ID:1), Joint 2 (ID:2), Joint 3 (ID:3),Joint 4 (ID:4), Joint 5 (ID:5), Joint 6 (ID:6)              Motor type      Brushless DC Servo(H54 Series),Coreless DC Motor(H42 Series)              Position sensor type      Absolute Encoder(for Homing),Incremental Encoder(for Control)              Communications      RS485      D-H Configuration  DH Parameter            Link      Link Length(mm)      Link Twist(rad)      Joint Offset(mm)      Joint Angle(rad)      DXL Angle(rad)                  1      0      -π/2      0      0      0              2      265.69      0      0      0                    3      30      -π/2      0      0                    4      0      -π/2      258      0      0              5      0      -π/2      0      0      0              6      0      0      0      0      0      Home PositionThe diagram below shows the “home position” of the Dynamixel PROs from Robotis Manipulator.Getting StartedPrerequisite  The ArmSDK is based on Window 7 OS and Visual Studio 2010.  The ArmSDK trajectory is generated from the MotionPlay class’ instance and utilizes QueryPerformanceCounter. This requires the use of a thread, in which sharing said thread may reach to 100%.It is highly recommended your PC is at least dual-core-based.  The Numerical IK implements Damped Least Square Method to reach target by acquiring each joint’s angle. This allows joints to go from initial position to a point and then return to its initial pose.This will allow you to perform tests to the Manipulator.  Allow sufficient workspace prior to setup by clearing objects in the arm’s vicinity.  Always ensure the Manipulator is properly fixed to the base plate prior to operations; otherwise arm movements can cause damage and physical injury.  Supply power to the Manipulator after making sure all cables are properly connected. While powered on do not touch the cables as it may cause erroneous operations or/and damage.  When handling the Manipulator do so carefully as not to have your fingers stuck in the frames.  If the Manipulator operates erroneously quickly cut off power by turning the power supply off.  While the Manipulator is in operation keep out of its workspace; ensure no objects enter the workspace during operations.PreparationPower SupplyThe Manipulator requires 24V for operations. Ensure the power supply is capable of supplying 24V and 15A or higher.4P CableThe 4P Cable connects the Manipulator and USB2Dynamixel.Power CableThe power cable supplies power to the Manipulator.For additional power or 4P cables contact ROBOTIS or obtain them with the specifications listed above. USB2DynamixelThe USB2Dynamixel sends ArmSDK commands to the Manipulator. Connect the USB2Dynamixel to the PC via USB hub.Product AssemblyNote The content below is based on an optional base plate and differs from the actual base plate.  Rest and fix joint 1 of the Manipulator.      The photo on the left is the external wiring for the arm. Label “1” shows a pair of 4P cables and power connector; these connect to joint 1 as shown on the right picture.        Label “2” shows a 4P connector and 4 power connectors and these connect to the power expansion hub and the 4P cable connects to the extension.    Once connections are complete fix the arm to the base plate as shown on the photo above. The joint fixed to the plate is joint 1.  Connect USB2Dynamixel to the hub with 4P cable; connect another port of the 4P hub to the extension.Caution Connect the USB2Dynamixel to the PC via USB hub. The USB hub acts as an isolator to protect the PC from any possible unexpected surges caused by arm action.USB2Dynamixel Setting            Communication      Description                  TTL      AX, 3-pin MX; communicate with 3-pin Dynamixel              RS485      RX, 4-pin MX and Pro; communicate with 4-pin Dynamixel              RS232      CM-5, CM-510; communicate with these controllers. Communicate with other RS-232 devices      Note The manipulator is based on RS-485 communications so make sure to set the dongle to 485.Manipulator Test  Test the arm with Dynamixel Wizard to check for any anomalies. DynamixelWizard is included in RoboPlus suite. RoboPlus can be downloaded from ROBOTIS home page’s Support -&amp;gt; Downloads(http://www.robotis.com/xe/download).Caution Do NOT download RoboPlus v2.0. Use RoboPlus v1.0 for Manipulator-H.      Install and run RoboPlus; click on Dynamixel Wizard button to start Dynamixel Wizard.      Operating the ManipulatorDanger Before starting Dynamixel Wizard ensure the arm is fixed to the base plate; then extend the arm. Otherwise; it may cause physical harm.      USB2Dynamixel to the PC after wiring is complete. From the PC check the COM port number of USB2Dynamixel.                Select the Port Settings tab and click on the Advanced button-&amp;gt; change the latency time from 16 (default) to 1.  After changing the COM port settings supply the 24V to the arm (of course, this means wiring is complete).Caution Always ensure before powering on. While power is on do not change wires; otherwise it may cause undesired operations.      The picture on the left is the COM port number of USB2Dynamixel (which should be connected to the arm). Click on the   to continue            Once connected make sure that 1000000bps box is checked and “DXL 2.0” is selected. Then click on Search. The arm’s default baud rate is 1 Mbps.                Once search is complete the arm’s components (Dynamixel PROs) are listed on the left. Click on an individual Dynamixel PRO to display the contents of its Control Table.                Dynamixel Pro will only move (operate) when Torque Mode is on. So always make sure the Torque Mode is on prior to sending moving commands.Torque Enable is located on address number 562. A value of 1 means on and 0 means off.                        Turn ‘Torque Enable’ on to all joints. The pose of the arm will become rigid (check by applying a small force). Afterwards click on joint 6.        Now verify the arm moves properly by changing Goal Position. Move the end effector (joint 6) +90 degrees.To move joint 6 to +90 degrees set Goal Position of the Dynamixel PRO model H42-20-S300-R to 75938 or L42-10-S300-R to 1024.  Once Goal Position has been set visually verify that joint 6 has rotated 90 degrees.  To actually get Dynamixel PRO to move to its respective Goal Position, click on the Apply button after setting the value. If there is no movement, make sure Torque Enable is turned on (set to 1).      Set Goal Position back to 0 to set position to its original position.        Click on ID. Set the Goal Position to 1000 (500 for L42 model).  To actually get Dynamixel PRO to move to its respective Goal Position, click on the Apply button after setting the value. If there is no movement, make sure Torque Enable is turned on (set to 1).  Set Goal Position back to 0 to set position to its original position..  Do the same procedure for joint 2 through 6.Goal Position Values with Respect to Rotation  Goal Position value determines the rotational position of Dynamixel PRO.            Model Name      Relationship between angle(deg) and position value                  H54-200-S500-RH54-100-S500-R      -180 ~ 180 (deg) → -251000 ~ 251000              H42-20-S300-R      -180 ~ 180 (deg) → -151875 ~ 151875              L54-50-S500-R      -180 ~ 180 (deg) → -125700 ~ 125700              L54-30-S500-R      -180 ~ 180 (deg) → -144180 ~ 144180              L42-20-S300-R      -180 ~ 180 (deg) → -2048 ~ 2048      Manipulator SDK      Preparation Before using Robotis Manipulator SDK.The following are pre-requisites for the ArmSDK.Eigen Package(http://eigen.tuxfamily.org, version 3.0.6 or Later)        Installation Package          Download and unzip Eigen Package.              Start Visual Studio go to “Project Properties -&amp;gt; VC++ Directories -&amp;gt; Include Directories” set Eigen’s source directory.                                    Repeat procedure (i)~(ii) to include the examples and include directories.      Once preparations are complete press the F7 key to compile and build.      ExamplesArmMonitorArmMonitor allows viewing of a joint current position, target position, end effector’s pose, and joint parameters (Velocity, Acceleration, Position P, I, D Gain, Velocity P, I Gain). Change the values from the table below to see changes.  Joint’s values tableNote that a press of [, { key denote decrease by shown units and }, ] denote increase by shown units.How to Use ArmMonitorArmMonitor01  To start ArmMonitor01, create a new project; once created press the Ctrl + F5 keys to run.You will need to enter the COM port number and baud rate. Simply enter the values and “Succeed to open USB2Dynamixel” should appear onscreen followed by “Press any key to move first pose.” Use the keyboard to move the arm.The following table is a list of baud rate values and its corresponding speed; Robotis Manipulator default value is 3 (1Mbps).The following table is a list of baud rate values and its corresponding speed; Robotis Manipulator default value is 3 (1Mbps).            Baudrate Number      baudrate                  0      2,400 bps              1      57,600 bps              2      115,200 bps              3      1,000,000 bps              4      2,000,000 bps              5      3,000,000 bps      The photo below is the arm in its “arrival” pose.  Press the Ctrl + F5 keys simultaneously and the screen should appears like the picture above  From ArmMonitor01 change the joint’s target position and joint parameter to move the arm.  Use the directional keys to move cursor. Use the ‘[’ ‘{’ keys to lower values and ‘]’ ‘}’ to increase.  From the picture (from the screen output) with the red area with “1” it shows the joints current pose (Present Value) and end effector’s pose.  The red area with “2” shows the target pose (Goal Value) for all joints.  The red area with “3” shows the parameters of all joints (Velocity, Acceleration, Position P Gain, I Gain, D Gain, Velocity P Gain, I Gain).  Values from joints 2 and 3, Calc&amp;lt;rad&amp;gt; and DYNAMIXEL&amp;lt;rad&amp;gt;, show on the red ares with “1” and “2” due to difference between point of origin and DH Configuration.  Calc&amp;lt;rad&amp;gt; is the calculated angle from DH and DYNAMIXEL&amp;lt;rad&amp;gt; from the servo’s. The cursor and only control Goal Value Joint Parameter.The Goal Value of Arm의 Calc&amp;lt;rad&amp;gt; value (enclosed by the red frame) can be increased with the‘]’ key. The unit is (π/180)rad.After adjusting the joint, check if the Manipulator follows.ArmMonitor02ArmMonitor02 allows direct control of the end effector. Control the end effector is done by  ComputeIK function where it moves each joint to its solution position (rad).  EndEffector pose tableTo setup and run ArmMonitor02 follow the same procedure as in ArmMonitor01.As in ArmMonitor01 you will be asked to enter COM port number and baud rate. You should also see “Succeed to open USB2Dynamixel” followed by “Press any key to move first pose.” The arm moves to its initial pose.The photo below is the arm in its “arrival” pose.The different values of the end effector depicted from the red areas with “1” and “2” (from the screen output image above) is due to the difference of Dynamixel Pro’s Goal Position and Present Position values (gear backlash) and DH with the point of origin. ”1” shows the end effector’s pose via calculations from kinematics and “2” the actual pose.Press the ] key to increase the end effector’s pose value by (π/180)rad ; X increases by 2mm.Visually verify arm movement every time when changing position.Arm Monitor Source Descriptioncmd_process.cpp      void DrawPage(void)    printf(&quot;//======================== Present Value of Arm =======================//n&quot;);printf(&quot; &amp;lt;Calc(rad)&amp;gt; | &amp;lt;DXL(unit)&amp;gt; | &amp;lt;DXL(rad)&amp;gt; | &amp;lt;EndEffector&#39;s Pose&amp;gt; n&quot;);printf(&quot;Joint1 : | | | X(mm) : n&quot;);printf(&quot;Joint2 : | | | Y(mm) : n&quot;);printf(&quot;Joint3 : | | | Z(mm) : n&quot;);printf(&quot;Joint4 : | | | Roll(rad) : n&quot;);printf(&quot;Joint5 : | | | Pitch(rad) : n&quot;);printf(&quot;Joint6 : | | | Yaw(rad) : n&quot;);printf(&quot;//========================= Goal Value of Arm =========================//n&quot;);printf(&quot; &amp;lt;Calc(rad)&amp;gt; | &amp;lt;DXL(unit)&amp;gt; | &amp;lt;DXL(rad)&amp;gt; | n&quot;);printf(&quot;Joint1 : | | | n&quot;);printf(&quot;Joint2 : | | | n&quot;);printf(&quot;Joint3 : | | | n&quot;);printf(&quot;Joint4 : | | | n&quot;);printf(&quot;Joint5 : | | | n&quot;);printf(&quot;Joint6 : | | | n&quot;);printf(&quot;//========================== Joint Parameter ==========================//n&quot;);printf(&quot; Velocity | Acceleration | Pos_P | Pos_I | Pos_D | Vel_P | Vel_I n&quot;);printf(&quot;Joint1 : | | | | | | n&quot;);printf(&quot;Joint2 : | | | | | | n&quot;);printf(&quot;Joint3 : | | | | | | n&quot;);printf(&quot;Joint4 : | | | | | | n&quot;);printf(&quot;Joint5 : | | | | | | n&quot;);printf(&quot;Joint6 : | | | | | | n&quot;);printf(&quot;[Status] n&quot;);GotoCursur(GOAL_JOINT1_ROW, CALC_ANGLE_RAD_COL);              the above is DrawPage code for ArmMonitor.            voidGotoCursur(int row, int col)    COORD pos={col, row};SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);              This allows the cursor to jump between rows and columns.      These 4 functions allows the directional keys to control cursor location.  void MoveUpCursor()  void MoveDownCursor()  void MoveLeftCursor()      void MoveRightCursor()        void UpDownValue(int dir)    giOldRow = giRow;giOldCol = giCol;GotoCursur(STATUS_ROW, STATUS_COL);printf(&quot; &quot;);if(giRow &amp;lt;= GOAL_JOINT6_ROW)UpDownGoalValue(dir);else if((giRow &amp;gt; GOAL_JOINT6_ROW) &amp;amp;&amp;amp; (giRow &amp;lt;= PARAMETER_JOINT6_ROW))UpDownJointParameter(dir);WriteValue();GotoCursur(giOldRow, giOldCol);giRow = giOldRow;giCol = giOldCol;              UpDownValue allows cursor to increase/decrease values.            void initialize(void)initialize() function described below.    gpArmComm = new Pro_Arm_Comm_Win()              gpArmComm is a class of Pro_Arm_Comm_Win. Pro_Arm_Comm_Win includes ID and baud num-related aspects.        gpArmComm-&amp;gt;DXL_Set_Init_Param(Port, Baud)              Sets Port Number  Baudrate from pointer        gpRobotisArm-&amp;gt;AddJoint          double LinkLength      double LinkTwist      double JointOffset      double JointAngle      double MaxAngleInRad      double MinAngleInRad      int MaxAngleValue      int MinAngleValue      double MaxAngleLimitInRad      double MinAngleLimitInRad      unsigned int Dynamixel_ID              Input each joint’s DH joint parameters.        gpArmComm-&amp;gt;Arm_ID_Setup(gpRobotisArm-&amp;gt;GetArmIDList())              From AddJoint rearrange ID List.        gpArmKinematics = new Kinematics(gpRobotisArm)              gpRobotisArm-&amp;gt;AddJoint (RobotInfo Class) generates Kinematics Class.        gpArmKinematics-&amp;gt;SetMaximumNumberOfIterationsForIK(60)              This function calculates the IK’s max number of iterations. In this case 60.        gpArmKinematics-&amp;gt;SetConvergenceCondition(0.001, 5.0)              Sets convergence for IK. 1st value to determine solution; second value maximum allowed.        gvdGoalCalculationAngleRad.resize(gpRobotisArm-&amp;gt;GetRobotInfo()-&amp;gt;size())              Setup target pose value (rad).        gvdRealCalculationAngleRad.resize(gpRobotisArm-&amp;gt;GetRobotInfo()-&amp;gt;size())              Current pose value (rad).        gvdGoalDynamixelAngleRad.resize(gpRobotisArm-&amp;gt;GetRobotInfo()-&amp;gt;size())              Target joint’s position value (rad)        gvdRealDynamixelAngleRad.resize(gpRobotisArm-&amp;gt;GetRobotInfo()-&amp;gt;size())              Actual joint’s position value (rad).        gviGoalDynamixelAngleUnit.resize(gpRobotisArm-&amp;gt;GetRobotInfo()-&amp;gt;size())              Actual joint’s target position value (value).        gviRealDynamixelAngleUnit.resize(gpRobotisArm-&amp;gt;GetRobotInfo()-&amp;gt;size())              Actual joint’s position value.(value).        gviPositionPGain.resize(gpRobotisArm-&amp;gt;GetRobotInfo()-&amp;gt;size())              Position P Gain value.        gviPositionIGain.resize(gpRobotisArm-&amp;gt;GetRobotInfo()-&amp;gt;size())              Position I Gain value.        gviPositionDGain.resize(gpRobotisArm-&amp;gt;GetRobotInfo()-&amp;gt;size())              Position D Gain value.        gviVelocityPGain.resize(gpRobotisArm-&amp;gt;GetRobotInfo()-&amp;gt;size())              Velocity P Gain value.        gviVelocityIGain.resize(gpRobotisArm-&amp;gt;GetRobotInfo()-&amp;gt;size())              Velocity I Gain value.        gviDynamixelVelocity.resize(gpRobotisArm-&amp;gt;GetRobotInfo()-&amp;gt;size())              Velocity value.        gviDynamixelAcceleration.resize(gpRobotisArm-&amp;gt;GetRobotInfo()-&amp;gt;size())              Acceleration value        gvdGoalCalculationAngleRad = gpArmKinematics-&amp;gt;GetCurrentAngle();gvdRealCalculationAngleRad = gpArmKinematics-&amp;gt;GetCurrentAngle();              From gpArmKinematics (mCurrentAngle) current pose value initialize gvdGoal CalculationAngleInRad and gvdRealCalculationAngleInRad.        gvdAngleGapCalcandDynamixelRad.resize(gpRobotisArm-&amp;gt;GetRobotInfo()-&amp;gt;size());gvdAngleGapCalcandDynamixelRad&amp;lt;&amp;lt; 0.0, ML_PI_2 - 6.4831 * ML_PI/ 180.0, ML_PI_4 + 6.4831 * ML_PI/ 180.0, 0.0, 0.0, 0.0;              This function has been introduced due to the differences between point of origin and actual joints’ point of origin from the DH Configuration.Once the size of angle adjustment has been assigned per joint enter the difference between point of origin and the joint actual point of origin.        gvdGoalDynamixelAngleRad&amp;lt;&amp;lt;0.0, ML_PI/4.0, -ML_PI/4.0, 0.0, -ML_PI/4.0,0.0;              GoalDynamixelAngleRad is the initial pose default values.        gviPositionPGain.fill(DEFAULT_POSITION_P_GAIN);gviPositionIGain.fill(DEFAULT_POSITION_I_GAIN);gviPositionDGain.fill(DEFAULT_POSITION_D_GAIN);              Position P, I, D Gain functions. Default P gain value is 64; I and D Gain are 0. The .fill contains every joint’s PID values individually.        gpArmComm-&amp;gt;Arm_Torque_On();              This function gets initialized before moving the arm to its initial pose.        gpArmComm-&amp;gt;Arm_Set_Position_PID_Gain(DEFAULT_POSITION_P_GAIN,DEFAULT_POSITION_I_GAIN,DEFAULT_POSITION_D_GAIN);              Sets the manipulator joints’ PID gain values..        gpArmTrajectory = new TrajectoryGenerator(gpArmKinematics)gpArmTrajectory-&amp;gt;Set_P2P(gvdRealDynamixelAngleRad-gvdAngleGapCalcandDynamixelRad,gvdGoalDynamixelAngleRad-gvdAngleGapCalcandDynamixelRad,5.0, 1.0);              The generated Kinematics, StartPose, EndPose, TotalTime, AccelTime get inputted into the trajectory. Trajectory is generated via P2P. The StartPose is the current pose and EndPose is ArmMonitor’s initial pose. TotalTime is 5.0sec where AccelTime is 1.0sec. For more information on trajectory generation, please go to 4.2 How to Program and 6.3 MotionEngine’s Trajectory Generator.        gpMotionPlayer = new MotionPlay(gpArmKinematics, gpArmTrajectory);              MotionPlay’s CurrentTime, ElapsedTime get initialized and setp up MotionProfile. These are required variables for kinematics and trajectory’s motion.        gpMotionPlayer-&amp;gt;Set_Time_Period(5);              Motion’s time period in 5msec.        _tempMotionTimer.Start();gvdGoalCalculationAngleRad = gpMotionPlayer-&amp;gt;NextStep(&amp;amp;ErrorStatus);gvdGoalDynamixelAngleRad = gvdGoalCalculationAngleRad + gvdAngleGapCalcandDynamixelRad;gviGoalDynamixelAngleUnit = gpRobotisArm-&amp;gt;Rad2Value(gvdGoalDynamixelAngleRad);CommResult = gpArmComm-&amp;gt;Arm_Set_JointPosition(gviGoalDynamixelAngleUnit);gvdGoalCalculationAngleRad = gpMotionPlayer-&amp;gt;NextStep(&amp;amp;ErrorStatus);gvdGoalDynamixelAngleRad = gvdGoalCalculationAngleRad + gvdAngleGapCalcandDynamixelRad;_tempMotionTimer.Stop();_tempMotionTimer.Wait(Period ㅡ _tempMotionTimer.GetElapsedTime());              The functions above have set motion time periods where functions are performed via while loop during their duration.First, the set Control Time Period gets matched.        _tempMotionTimer.Start();......_tempMotionTimer.Stop();_tempMotionTimer.Wait(Period ㅡ _tempMotionTimer.GetElapsedTime());              Measure elapsed start and stop time then subtract its difference with elapsed calculated time in set Control Time Period(5msec in this case).The target pose from the current step obtained from the algorithm below.        gvdGoalCalculationAngleRad = gpMotionPlayer-&amp;gt;NextStep(&amp;amp;ErrorStatus);gvdGoalDynamixelAngleRad = gvdGoalCalculationAngleRad + gvdAngleGapCalcandDynamixelRad;gviGoalDynamixelAngleUnit = gpRobotisArm-&amp;gt;Rad2Value(gvdGoalDynamixelAngleRad);CommResult = gpArmComm-&amp;gt;Arm_Set_JointPosition(gviGoalDynamixelAngleUnit);gvdGoalCalculationAngleRad = gpMotionPlayer-&amp;gt;NextStep(&amp;amp;ErrorStatus);gvdGoalDynamixelAngleRad = gvdGoalCalculationAngleRad + gvdAngleGapCalcandDynamixelRad;              First, NextStep gets the current step’s target angles, which are from the D-H Configuration. However, the actual Dynamixel PRO start point and the D-H Configuration’s differ.This difference is taken into account and each joint Goal Position Value is set again with Rad2Value, the resulting Arm_Set_JointPosition moves the manipulator.If successful, the manipulator’s communications Arm_Set_JointPosition returns a value of 1.        gvdRealDynamixelAngleRad = gpRobotisArm-&amp;gt;Value2Rad(gviRealDynamixelAngleUnit);gvdRealCalculationAngleRad = gvdRealDynamixelAngleRad - gvdAngleGapCalcandDynamixelRad;              After motion is complete it print’s the joint’s actual pose(rad) and calculated pose(rad).        gpArmKinematics-&amp;gt;Forward(gvdRealCalculationAngleRad, &amp;amp;gRealPose);gpArmKinematics-&amp;gt;Forward(gvdGoalCalculationAngleRad, &amp;amp;gGoalPose);              Factor’s current angle and goal angle to Forward Kinematics. The end effectot’s actual and goal pose (gRealPose, gGoalPose) can be assigned.        gpArmComm-&amp;gt;Arm_Set_JointAcceleration(DEFAULT_JOINT_ACCELERATION);gviDynamixelAcceleration.fill(DEFAULT_JOINT_ACCELERATION);              Sets every joint’s acceleration value individually. DEFAULT_JOINT_ACCELERATION has 4 values        gpArmComm-&amp;gt;Arm_Set_JointVelocity(DEFAULT_JOINT_VELOCITY);gviDynamixelVelocity.fill(DEFAULT_JOINT_VELOCITY);              Sets every joint’s velocity value individually. DEFAULT_JOINT_VELOCITY 9000 values.        void UpDownGoalValue(int dir);void UpDownJointParameter(int dir);void UpDownValue(int dir);              UpdownGoalValue allows change in goal pose, UpDownJointParameter allows changes to  joint’s parameters (Velocity, Acceleration, Position P, I, D Gain,  Velocity P,  I Gain). UpDownValue combines both functions.      SimplePtoPWarning Product may move fast with this example. When testing this example keep a safe distance while able to cut power off in case of undesired operation.SimplePtoP is the end effector’s move point (from P1 to P2).How to Use SimplePtoPTo start SimplePtoP follow the same procedure for ArmMonitor. Then press the Ctrl + F5 keys to run.You will be asked for COM port number and baud rate.If succeeded then you will see a ‘Succeed to open USB2Dynamixel’ followed by ‘Press any key to move first pose.’ Press a key to move the arm to its initial pose.Then press a key to begin P2P Motion. The photo below is the arm in its initial pose.SimplePtoP displays the joints’ pose(rad). In SimplePtoP prssing the ‘p’ or ‘P’ will cause motion to pause. Press the ESC key to end.SimplePtoP Source Descriptionvecd P1, P2;P1.resize(RobotisArm.GetRobotInfo()-&amp;gt;size());P2.resize(RobotisArm.GetRobotInfo()-&amp;gt;size());  P1, P2 sets every joint’s position.P1.fill(0.0);P1 -= gvdAngleGapCalcandDynamixelRad;P2.fill(0.5);P2 -= gvdAngleGapCalcandDynamixelRad;  P1.fill, P2.fill input every joint’s position(rad) individually. Differences between DH Configuration’s point of origin and actual point of origin are taken into consideration so P1 and P2 are to be adjusted accordingly.ArmComm.Arm_Set_Position_PID_Gain(64, 0, 0);  Joint’s Position P, I, and D gain values.respectively.ArmComm.Arm_Set_JointVelocity(0);  Joint’s velocity value .0 denotes max velocity.ArmComm.Arm_Set_JointAcceleration(0);  Joint’s acceleration value .0 denotes max velocity.ArmTrajectory.ClearMF();  MotionProfile clears the set space..ArmTrajectory.Set_P2P(P1, P2, 10.0, 0.5);  Sets P1, P2(Start, EndPose). In this case P1 is 0.0 rad and P2 is 0.5 rad. Trajectory is from P1 to P2ArmTrajectory.Set_P2P(P2, P1, 10.0, 0.5);  Sets P1, P2(Start, EndPose). In this case P1 is 0.0 rad and P2 is 0.5 rad. Trajectory is from P2 to P1MotionPlayer.All_Info_Reload();  MotionProfile calls Info(Robot, Kinematics, Trajectory).MoionPlayer.Initialize();  MotionProfile, Step, are initialized.MotionPlayer.Set_Time_Period(DEFAULT_Ctrl_TIME_PERIOD);  Sets time period. For value lesser than 0 then a default value (=8) gets inputted.SimpleIKWarning Use of this example may pose safety risks. When testing the example keep a safe distance while able to cut power off in case of undesired operation.      Allows operation of end effector’s pose via position(X, Y, Z) and orientation(Roll, Pitch, Yaw). The keys for SimpleIK are q, w, e, r, t, y and a, s ,d ,f, g, h.        EndEffector Pose table              Control EndEffector      Position -&amp;gt; +5mmorientation -&amp;gt; +(3π/180)rad      Position -&amp;gt; -5mmorientation -&amp;gt; -(3π/180)rad                  Position X      q      a              Position Y      w      s              Position Z      e      d              Orientation Roll      r      f              Orientation Pitch      t      g              Orientation Yaw      y      h      How to Use SimpleIKTo start SimpleIK start a new project just like SimplePtoP. Then press the Ctrl + F5 ekys to begin.In SimpleIK you will be asked for COM port and baud rate numbers. If succeeded you will see a ‘Succeed to open USB2Dynamixel’ followed by ‘Press any key to move first pose.’ Press a key to begin.The arm moves to its initial pose as shown below.This windows pops up after the arms moves to its initial pose. The values printed are the joints’ angles(rad). Press the keys(ex : q, w….) to move the end effector.SimpleIK q key control the 3rd value.Q controls the end effector position (X) by increasing delta(5mm)amounts.Visually verify arm movement every time when changing position.Press the q and r keys 3 times each. The r key controls the end effector’s roll. The orientation (Roll, Pitch, Yaw) change by (3π/180)rad per keystroke.Visually verify arm movement every time when changing position.SimpleIK Source Descriptionif(temp == &#39;q&#39;){  DesiredPose = CurrentPose;  DesiredPose.x += delta;  ArmKinematics.ComputeIK(DesiredPose, &amp;amp;angle_rad, angle_rad, &amp;amp;ErrorStatus);  if(ErrorStatus == ARMSDK_NO_ERROR)  {    cout&amp;lt;&amp;lt;&quot;Answer&quot;&amp;lt;&amp;lt;endl;    cout&amp;lt;&amp;lt;angle_rad&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;endl;    ArmComm.Arm_Set_JointPosition(RobotisArm.Rad2Value(angle_rad + gvdAngleGapCalcandDynamixelRad));  }  else if(ErrorStatus &amp;amp; ARMSDK_ACCEPTABLE_ERROR)  {    cout&amp;lt;&amp;lt; &quot;No IK solution&quot; &amp;lt;&amp;lt;endl;    cout&amp;lt;&amp;lt; &quot;But the calcuation result is acceptable&quot; &amp;lt;&amp;lt;endl;    char answer;    while(true)    {      cout&amp;lt;&amp;lt; &quot;Do you want make the Robot move? (Y/N)&quot;;      cin &amp;gt;&amp;gt; answer;      if((answer == &#39;y&#39;) || (answer == &#39;n&#39;) || (answer == &#39;Y&#39;) || (answer == &#39;N&#39;))        break;      else        cout&amp;lt;&amp;lt; &quot;Invaild Answer&quot;&amp;lt;&amp;lt;endl;    }    if((answer == &#39;y&#39;) || (answer == &#39;Y&#39;) )      ArmComm.Arm_Set_JointPosition(RobotisArm.Rad2Value(angle_rad + gvdAngleGapCalcandDynamixelRad));    else      continue;  }  else  {    cout&amp;lt;&amp;lt; &quot;No IK Solution&quot; &amp;lt;&amp;lt;endl;    continue;  }  ArmKinematics.Forward(angle_rad, &amp;amp;CurrentPose);}  The code shows that by pressing the q key the program runs. A press of q moves the end effector pose in the (X) coordinate by delta (5mm).If there are no errors the end effector will move according to keystroke. All joints are in radians.Press the ‘q‘ key to to goal pose by X position in delta incrememts.Despite having errors and not being able to get the IK moving can be allowed. If ‘Do you want make the Robot move? (Y/N)’ appears onscreen press the y key to move the endeffector in the X coordinate by +5mm. Then the joints pose(rad) are displayed.Warning Product may go to pose fast after pressing the Y key posing a safety risk. When testing the example keep a safe distance while able to cut power off in case of undesired operation.When error is too large and IK is unrealizable ‘No IK Solution‘ will be displayed the end effector will remain as is.The sample code from above is broken down below.ArmKinematics.ComputeIK(DesiredPose, &amp;amp;angle_rad, angle_rad, &amp;amp;ErrorStatus);All joints set to a desired pose by taking input from DesiredPose and angle_rad. Once DesiredPose values go to CurrentPose then the arm moves in X coordinate and DesirePose gets set again. angle_rad is CurrentPose’s consistent joints  angles. IK’s solution for desired pose joint angles and &amp;amp;angle_rad get set. &amp;amp;ErrorStatus is the error sent to Dynamixel.ArmComm.Arm_Set_JointPosition(RobotisArm.Rad2Value(angle_rad + gvdAngleGapCalcandDynamixelRad));  The ComputeIK function sets an array for joint position in &amp;amp;angle_rad.ArmKinematics.Forward(angle_rad, &amp;amp;CurrentPose);  Once moved to desired pose angle_rad(array) gets the end effector’s pose and runs forward kinematics; then CurrentPose sets the pose. This function returns the end effectors transform matric (4x4).else if(temp == &#39;r&#39;){  DesiredPose = CurrentPose;  matd DesiredRotation = Algebra::GetOrientationMatrix(delta_angle_rad, 0.0, 0.0) *      Algebra::GetOrientationMatrix(CurrentPose.Roll, CurrentPose.Pitch, CurrentPose.Yaw);  vecd DesiredRPY = Algebra::GetEulerRollPitchYaw(DesiredRotation);  DesiredPose.Roll = DesiredRPY(0);  DesiredPose.Pitch = DesiredRPY(1);  DesiredPose.Yaw = DesiredRPY(2);  ArmKinematics.ComputeIK(DesiredPose, &amp;amp;angle_rad, angle_rad, &amp;amp;ErrorStatus);  if(ErrorStatus == ARMSDK_NO_ERROR)  {    cout&amp;lt;&amp;lt;&quot;Answer&quot;&amp;lt;&amp;lt;endl;    cout&amp;lt;&amp;lt;angle_rad&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;endl;    ArmComm.Arm_Set_JointPosition(RobotisArm.Rad2Value(angle_rad + gvdAngleGapCalcandDynamixelRad));  }  else if(ErrorStatus &amp;amp; ARMSDK_ACCEPTABLE_ERROR)  {    cout&amp;lt;&amp;lt; &quot;No IK solution&quot; &amp;lt;&amp;lt;endl;    cout&amp;lt;&amp;lt; &quot;But the caluation result is acceptable&quot; &amp;lt;&amp;lt;endl;    char answer;    while(true)    {      cout&amp;lt;&amp;lt; &quot;Do you want make the Robot move? (Y/N)&quot;;      cin &amp;gt;&amp;gt; answer;      if((answer == &#39;y&#39;) || (answer == &#39;n&#39;) || (answer == &#39;Y&#39;) || (answer == &#39;N&#39;))        break;      else        cout&amp;lt;&amp;lt; &quot;Invaild Answer&quot; &amp;lt;&amp;lt;endl;    }    if((answer == &#39;y&#39;) || (answer == &#39;Y&#39;) )      ArmComm.Arm_Set_JointPosition(RobotisArm.Rad2Value(angle_rad + gvdAngleGapCalcandDynamixelRad));    else      continue;  }  else  {    cout&amp;lt;&amp;lt; &quot;No IK Solution&quot;&amp;lt;&amp;lt;endl;    continue;  }  ArmKinematics.Forward(angle_rad, &amp;amp;CurrentPose);}  The goal pose runs IK my moving the roll gets increased by delta(rad). The end effector moves to whatever the IK has solved and displays the joint poses(rad).Despite having errors and not being able to get the IK moving can be allowed. If ‘Do you want make the Robot move? (Y/N)’ appears onscreen press the y key to turn the end effector in the roll axis by delta_angle_rad. Then the joints pose(rad) are displayed.A roll (roll-only) delta is ( delta_angle_rad = (3π/180)rad)When error is too large and IK is unrealizable ‘No IK Solution‘ will be displayed the end effector will remain as is.The sample code from above is broken down below. Press the r key to move the roll by delta_angle_rad.The desired rotation matrix can then be obtain with the followingWhere the code is shown below.matd DesiredRotation = Algebra::GetOrientationMatrix(delta_angle_rad, 0.0, 0.0)  *Algebra::GetOrientationMatrix(CurrentPose.Roll, CurrentPose.Pitch, CurrentPose.Yaw);  The CurrentPose’s Orientation roll increase by delta_angle_rad GoalPose(DesiredRotation).vecd DesiredRPY = Algebra::GetEulerRollPitchYaw(DesiredRotation);  DesiredRotation’s roll, pitch, and yaw.SimpleTorqueFKTurns the Manipulator joints’ torque on/off. When torque goes off→on Forward Kinematics runs and putputs all joints pose(rad) and end effector’s position and orientation.How to Use SimpleTorqueOnOffandFKTo start SimpleTorqueOnOffandFK start a new project just like SimplePtoP. Then press the Ctrl+F5 keys to begin.SimpleTorqueOnOffandFK.Input the COM port and baud rate numbers. If succeeded you will see a ‘Succeed to open USB2Dynamixel;’ then torque gets turned off.Press the Enter key turn torque on and the arm’s joints pose(rad) and end effector’s pose(rad) will be displayed (joints 1 through 6).Press Enter again to turn torque off and it will display ‘Torque Off.’Press the Enter key once again to turn torque on and the values be displayed again.SimpleTorqueOnOffandFK Source Descriptionwhile(true){  char temp = _getch();  if(temp == 27)  break;  else if(temp == 13)  {    if(gbArmTorque)    {      ArmComm.Arm_Torque_Off();      std::cout&amp;lt;&amp;lt;&quot;Torque Off&quot;&amp;lt;&amp;lt;std::endl;      gbArmTorque = false;    }    else    {      ArmComm.Arm_Torque_On();      cout&amp;lt;&amp;lt;&quot;Torque On&quot;&amp;lt;&amp;lt;endl;      if(ArmComm.Arm_Get_JointPosition(&amp;amp;angle_unit) != COMM_RXSUCCESS)      {        printf(&quot;Communication Error Occurredn&quot;);      }      cout&amp;lt;&amp;lt;&quot;JointAngle is&quot;&amp;lt;&amp;lt;endl;      angle_rad = RobotisArm.Value2Rad(angle_unit);      cout&amp;lt;&amp;lt; angle_rad - gvdAngleGapCalcandDynamixelRad &amp;lt;&amp;lt;endl&amp;lt;&amp;lt;endl;      cout&amp;lt;&amp;lt;&quot;Angle of Dynamixel is&quot;&amp;lt;&amp;lt;endl;      angle_rad = RobotisArm.Value2Rad(angle_unit);      cout&amp;lt;&amp;lt; angle_rad &amp;lt;&amp;lt;endl&amp;lt;&amp;lt;endl;      cout&amp;lt;&amp;lt;&quot;EndEffector&#39;s Pose is&quot;&amp;lt;&amp;lt;endl;      Pose3D CurrentPose;      ArmKinematics.Forward(angle_rad - gvdAngleGapCalcandDynamixelRad, &amp;amp;CurrentPose);      cout&amp;lt;&amp;lt;&quot;x = &quot;&amp;lt;&amp;lt;CurrentPose.x &amp;lt;&amp;lt;endl;      cout&amp;lt;&amp;lt;&quot;y = &quot;&amp;lt;&amp;lt;CurrentPose.y &amp;lt;&amp;lt;endl;      cout&amp;lt;&amp;lt;&quot;z = &quot;&amp;lt;&amp;lt;CurrentPose.z &amp;lt;&amp;lt;endl;      cout&amp;lt;&amp;lt;&quot;roll = &quot;&amp;lt;&amp;lt;CurrentPose.Roll &amp;lt;&amp;lt;endl;      cout&amp;lt;&amp;lt;&quot;pitch = &quot;&amp;lt;&amp;lt;CurrentPose.Pitch &amp;lt;&amp;lt;endl;      cout&amp;lt;&amp;lt;&quot;yaw = &quot;&amp;lt;&amp;lt;CurrentPose.Yaw &amp;lt;&amp;lt;endl&amp;lt;&amp;lt;endl;      gbArmTorque = true;    }  }  else    continue;}  The program aborts without starting by pressing the Esc key.While the program is running press the Enter key to toggle torque between on and off. When torque gets turned on the joints and end effector pose get outputted onscreen. This happens with every “on” state.Press the Esc key then Enter key and the arm remains as is.The sample code from above is broken down below. The joint angles and Dynamixel angles may not be the same so it must be taken into consideration. Angle of Dynamixel is the output of the actual angle of Dynamixel.Manipulator SDK ProgrammingSDK DescriptionRobotInfoWhen building Manipulator at ARM SDK, you may use the Addjoint function after generating Instance of RobotInfo Class.AddJoint gets values from D-H Parameter and actuator’s max and min turn angle in rad and value as well as actuator ID number (min and max turn angles may not be the same as joint angle limits).KinematicsForward Kinematics(FK), Inverse Kinematics(IK) can be calculated once the instance for kinematics class is generated. Kinematics class get the instance from RobotInfo class.ComputeIK’s factor’s the pose from end effector and joint values, as well as, initial joint angle and error for IK. The result is joint angles when the returned error status is not 0 then the IK is not properly solved.The Roll(φ), Pitch(θ) and Yaw(ψ) are calculated as Rx(φ), Ry(θ), Rz(ψ) in the rotation transformation matrix. This is to be taken into consideration when entering the pose for ComputeIK.Trajectory GeneratingThe TrajectoryGenerator class generates an instance for the arm’s trajectory. The SDK’s  Point to Point, Linear, and Circular can generate a trajectory. For arm-only trajectory then only Set_PTP, Set_LIN, Set_Circular; for the gripper then Set_PTPwithHand, Set_LINwithHand, Set_CIRCwithHand.Velocity ProfileThe SDK’s Velocity Profile does not take max velocity and max acceleration into consideration in the Trapezoidal Velocity Profile. The initial and final velocity are always set to 0. The following methods generate velocity profile in Joint Space and Cartesian Space, where both are independent of each other.Set_PTPThe Set_PTP function determines 2 poses for the manipulator (initial and final) by factoring in Trapezoidal Velocity Profile and receives velocity time and total time. Initial and final pose are in rad and joint angle in mm or rad (x, y, z, roll, pitch, yaw). When generating the trajectory it is recommended to factor in joint angles.Set_LINThe Set_LIN function generates a 3-point coordinates for the robot’s straight trajectory. This factors in initial and final pose for Linear Euler Interpolation for orientation.Set_CIRCThe Set_CIRC function generates a 3-point coordinates for the robot’s circular trajectory. This factors in initial and final pose. It sets a point of origin in the area and proceeds to trajectory via MotionPlay and vector generation.Trajectory FollowingWhen moving by the generated trajectory from TrajectorGenerator class’s instance just use NextStep function from MotionPlay. MotionPlay class accounts trajectoryGenerator class.The control period from MotionPlay default value is 8ms but can be changed with SetTimePeriod. If TimePeriod is 0 then 8ms default value is applied.Pro_Arm_Comm_WinPro_Arm_Comm_Win utilizes DYNAMIXEL 2.0 Protocol from the Windows version of DYNAMIXEL SDK. Pro_Arm_Comm_Win’s functions utilizes DYNAMIXEL Pro’s control (i.e. read/write Control Table values).This is useful when writing separate code.SDK FlowchartFirmware RecoveryWhen Dynamixel detection fails ensure is properly wired. If problems persists restore Dynamixel firmware (shown below).Warning After firmware restoration you will need to set ID and baud rate values again. Always make sure to set USB2Dynamixel switch to “485.”  Restoring firmware          From Dynamixel Wizard click on the  icon to begin.      Select the corresponding COM port number for USB2Dynamixel.                Firmware restore process steps explained.            Always connect one Dynamixel at a time.        Pick the COM port number          With an incorrect number Dynamixel cannot be automatically detected. Always make sure to get the port number right.      Click on Search.            Disconnect and connect Dynamixel          The Next button should become clickable                Upon successful detection the Next button is clickable        Pick the right model          Pick the right type from the list. If not it may result in problems                    During restoration          While restoring, the LED will blink. Do not cut power off during this stage.              All Control Table settings are set to default values.ReferencesAMSDK DefinePose3D  Data Fields          double x, y, z      double Roll, Pitch, Yaw        Description          Position(x,y,z) and Orientation(Roll, Pitch, Yaw) elements      timeprofile  Data Fields          double ta, tc, td, totaltime      double a0[3], a1[3], a2[3]      double distance, distance1      int Method        Description          Trapezoidal Velocity Profile’s elements      distance1 only used in circular trajectory.      MotionPose  Data Fields          vecd StartPose, EndPose      Pose3D StartPose3D, ViaPose3D, EndPose3D      Position3D CenterPosition      int Method        Description          Declaration of manipulator step’s StartPose, EndPose and trajectory method      ViaPose and CenterPosition for circular trajectory      ARMSDK Mathstatic matd GetOrientationMatrix(double Roll, double Pitch, double Yaw)  Parameter          double Roll, double Pitch, double Yaw        Returns          3 x 3 Rotation Matrix        Description          orientation(Roll, Pitch, Yaw) input      3 x 3 orientation matrix output      static matd GetTransformMatrix(double Roll, double Pitch, double Yaw, double x, double y, double z)  Parameter          double Roll, double Pitch, double Yaw      double x, double y, double z        Returns          4 x 4 Transformation Matrix        Description          orientation(Roll, Pitch, Yaw), Position(X, Y, Z) input      4 x 4 transform Matrix output      static vecd rot2omega(mat3d Rerr)  Parameter          Rotation Matrix        Returns          angular velocity array        Description          rotation matrix gets input and outputs velocity array      static vecd ConvertRad2Deg(vecd q)  Parameter          radian Array        Returns          Degree Array        Description          (rad) gets input, change to (value) and return      static vecd GetEulerRollPitchYaw(matd T)  Parameter          3 x 3 rotation Matrix or 4 x 4 Transformation Matrix        Returns          3 x 1 array (Roll, Pitch, Yaw)        Description          vecd rpy(3);      rpy(0) = atan2( T(2,1), T(2,2));      rpy(1) = atan2(-T(2,0), sqrt(T(2,1)*T(2,1) + T(2,2)*T(2,2)) );      rpy(2) = atan2( T(1,0), T(0,0));      MotionEngineError.hvoid ErrorCheck(int Error)  Parameter          int Error        Return          void        Description          No error(ARMSDK_NO_ERROR 0x00)      IK solution does not exist(ARMSDK_NO_IK_SOLUTION 0x01)      No IK solution and allowable error(ARMSDK_ACCEPTABLE_ERROR 0x02)      Joints’ next and previous step large difference in angle(ARMSDK_TOO_MUCH_ANGLE_CHANGE 0x04)      Angle or not within JointData’s limit(ARMSDK_OUT_OF_JOINT_RANGE 0x08)The 5 types of ERROR      JointData.hvoid SetJointID(unsigned int ID)  Parameter          unsigned int ID        Return          void        Description          Assign Joint ID      void SetJointAngle(double JointAngle);  Parameter          double JointAngle        Return          void        Description          Set Joint Angle      void SetMinAngleInRad(double MinAngleInRad);  Parameter          double MinAngleInRad        Return          void        Description          Set actuator min angle(rad)      Value utilized in 6.3 MotionEngine - iii) RobotInfo’s rad2value function      void SetMaxAngleInRad(double MaxAngleInRad);  Parameter          double MaxAngleInRad        Return          void        Description          Set actuator max angle(rad)      Value utilized in 6.3 MotionEngine - iii) RobotInfo’s rad2value function      void SetMinAngleInValue(int Min_AngleValue);  Parameter          int Min_AngleValue        Return          void        Description          Set actuator min value      utilized in 6.3 MotionEngine - iii) RobotInfo’s rad2value, value2rad functions      void SetMaxAngleInValue(int Max_AngleValue);  Parameter          int Max_AngleValue        Return          void        Description          Set actuator max value      Utilized in 6.3 MotionEngine - iii) RobotInfo’s rad2value, value2rad functions      void SetMinAngleLimitInRad(double MinAngleLimitInRad);  Parameter          double MinAngleLimitInRad        Return          void        Description          Set joint min angle(rad)      Also sets the value      void SetMaxAngleLimitInRad(double MaxAngleLimitInRad);  Parameter          double MaxAngleLimitInRad        Return          void        Description          Set joint max angle(rad)      Also sets the value      unsigned int GetID(void);  Parameter          void        Return          unsigned int (ID)        Description          Returns joint ID (number)      void SetJointDataDH(double LinkLength, double LinkTwist, double JointOffset, double JointAngle);  Parameter          double LinkLength, double LinkTwist      double JointOffset, double JointAngle        Return          void        Description          Set Manipulator’s joint DH parameters in DH Configuration      double GetJointAngle(void);  Parameter          void        Return          double current Angle        Description          Returns joint angle limit(rad)      double GetMinAngleInRad(void);  Parameter          void        Return          MinAngle(rad) of Actuator        Description          SetMinAngleInRad returns actuator min angle(rad)      double GetMaxAngleInRad(void);  Parameter          void        Return          MaxAngle(rad) of Actuator        Description          SetMaxAngleInRad returns actuator max angle(rad)      int GetMinAngleInValue(void);  Parameter          void        Return          MinAngle(value) of Actuator        Description          SetMinAngleInValue returns actuator min angle(value)      int GetMaxAngleInValue(void);  Parameter          void        Return          MaxAngle(value) of Actuator        Description          SetMaxAngleInValue returns actuator max angle(value)      double GetMinAngleLimitInRad(void);  Parameter          void        Return          MinAngle(rad) of Joint        Description          SetMinAngleLimitInRad returns joint min angle(rad)      double GetMaxAngleLimitInRad(void);  Parameter          void        Return          MaxAngle(rad) of Joint        Description          SetMaxAngleLimitInRad returns joint max angle(rad)      int GetMinAngleLimitInValue(void);  Parameter          void        Return          MinAngle(value) of Joint        Description          SetMinAngleLimitInRad returns joint min angle(value)      int GetMaxAngleLimitInValue(void);  Parameter          void        Return          MaxAngle(value) of Joint        Description          SetMaxAngleLimitInRad returns joint max angle(value)      matd GetTransformMatirx(void);  Parameter          void        Return          matd TransformMatrix of each Link        Description          Returns transform matrix for each link      RobotInfo.hint AddJoint (double LinkLength, double LinkTwist, double JointOffset, double JointAngle, double MaxAngleInRad, double MinAngleInRad, int MaxAngleValue , int MinAngleValue, double MaxAngleLimitInRad, double MinAngleLimitInRad, unsigned int Dynamixel_ID);  Parameter          LinkLength, LinkTwist, JointOffset, JointAngle – DH parameter      MaxAngleInRad - Maximum Angle of Actuator(not Joint Limit)      MinAngleInRad – Minimum Angle of Actuator(not Joint Limit)      MaxAngleInValue – AngleValue corresponding to the Maxangle      MinAngleInValue – AngleValie corresponding to the Minangle      MaxAngleLimitInRad – Maximum Joint Angle Limit of Actuator      MinAngleLimitInRad – Minimum Joint Angle Limit of Actuator        Return          Error Value        Description          Sets joint’s DH-Parameter and Joint-Parameter values      Error of 0 is no error and 1 when there is error.      Error happens when min value is greater than max value      JointData GetJointInfo(int joint_number);  Parameter          int Joint_number        Return          JointData        Description          Returns JointData from AddJoint      std::vector* GetRobotInfo(void);  Parameter          JointData        Return          address of robotInfo        Description          Returns address values from RobotInfomation      void ClearRobotInfo(void);  Parameter          void        Return          void        Description          Clears out RobotInfo      veci GetArmIDList(void);  Parameter          void        Return          ID List of Robot Actuators        Description          Returns joint ID in aray form inAddJoint      veci Rad2Value(vecd q);  Parameter          double array of Actuators Angle(Rad)        Return          int array of Actuators Angle(Value)        Description          Transforms joint’s rad to value.      vecd Value2Rad(veci q);  Parameter          int array of Actuators Angle(Value)        Return          double array of Actuators Angle(Rad)        Description          Transforms joint’s value to rad.      Kinematics.hvoid RobotInfoReload(void);  Parameter          void        Return          void        Description          Calls RobotInfo      matd Forward(vecd angle);  Parameter          Angle of All Joints(rad)        Return          4x4 TransformMatrix form        Description          RobotInfoReload calls joints angles runs FK and returns end effector’s transformation matrix      matd Forward(vecd angle, Pose3D *pose);  Parameter          Angle of All Joints(rad)        Return          4x4 EndEffector’s TransformMatrix form        Description          RobotInfoReload calls joint angles runs FK and returns end effector’s transformation matrix. It also sets pose pointer (*pose)      void SetMaximumNumberOfIterationsForIK(unsigned int max_num);  Parameter          unsigned int max_num for IK        Return          void        Description          Sets IK’s number of iterations for solution      void SetConvergenceCondition(double max_error, double max_acceptable_error);  Parameter          double max_error, double max_acceptable_error        Return          void        Description          IK’s amount of telorable error.      The first input value is max convergence error. A lesser value than max can allow solution.      The second value is max allowable error; acceptable as long as is lower than value entered. When value exceeds then there is no solution..      matd Jacobian(void);  Parameter          void        Return          Matrix of Jacobian        Description          Returns jacobian for IK solution      vecd CalcError(Pose3D _desired, matd _current);  Parameter          Pose3D goalPose, TransformMatrix of EndEffector        Return          Error between Goal and Currnet Pose        Description          Compares end effector’s goal pose and current pose      void ComputeIK(Pose3D _desired , vecd *q_rad, vecd Initangle_rad, int *ErrorStatus);  Parameter          Pose3D goalPose, vecd initangle, int ErrorStatus        Return          void        Description          get jacobian’s Damped Least Square Method for IK solution      _desired is end effector’s desired pose      *q_rad sets joints pose after running IK      Initangle_rad is joint angles prior to running IK      ErrorStatus is pointer for error type      ErrorStatus.                  No error(ARMSDK_NO_ERROR 0x00)          No solution from IK(ARMSDK_NO_IK_SOLUTION 0x01)          no solution from IK, allowable error(ARMSDK_ACCEPTABLE_ERROR 0x02)          joint angles exceed JointData’s set angles(ARMSDK_OUT_OFF_JOINT_RANGE 0x08)                    TrajectoryGenerator.hvoid KinematicsInfoReload(void);  Parameter          void        Return          void        Description          Calls Kinematics info      void Set_P2P(vecd StartPose, vecd EndPose, double TotalTime, double AccelTime);  Parameter          vecd StartPose / vecd EndPose      double TotalTime / double AccelTime        Returns          void        Description          sets P2P trajectory fromStartPose, EndPose, TotalTime, AccelTime      void Set_P2P(Pose3D StartPose, Pose3D EndPose, double TotalTime, double AccelTime);  Parameter          Pose3D StartPose / Pose3D EndPose      double TotalTime / double AccelTime        Returns          void        Description          Sets P2P trajectory from StartPose, EndPose, TotalTime, AccelTime      void Set_LIN(vecd StartPose, vecd EndPose, double TotalTime, double AccelTime);  Parameter          vecd StartPose / vecd EndPose      double TotalTime / double AccelTime        Returns          void        Description          Sets linear trajectory from StartPose, EndPose, TotalTime, AccelTime      void Set_LIN(Pose3D StartPose, Pose3D EndPose, double TotalTime, double AccelTime);  Parameter          Pose3D StartPose / Pose3D EndPose      double TotalTime / double AccelTime        Returns          void        Description          Sets linear trajectory from StartPose, EndPose, TotalTime, AccelTime      void Set_CIRC(vecd StartPose, vecd ViaPose, vecd EndPose, double TotalTime, double AccelTime);  Parameter          vecd StartPose / vecd ViaPose / vecd EndPose      double TotalTime / double AccelTime        Returns          void        Description          Sets circular trajectory from StartPose, ViaPose, EndPose, TotalTime, AccelTime.      void Set_CIRC(Pose3D StartPose, Pose3D ViaPose, Pose3D EndPose, double TotalTime, double AccelTime);  Parameter          Pose3D StartPose / Pose3D EndPose      double TotalTime / double AccelTime        Returns          void        Description          Sets circular trajectory fom StartPose, ViaPose, EndPose, TotalTime, AccelTime      void Set_P2PwithHand(vecd StartPose, vecd EndPose, veci Hand1, veci Hand2, double TotalTime, double AccelTime);  Parameter          vecd StartPose / vecd EndPose      veci Hand1 / veci Hand2      double TotalTime / double AccelTime        Returns          void        Description          Sets P2P trajectory from StartPose, EndPose, Start HandPose, End HandPose, TotalTime, AccelTime      void Set_P2PwithHand(Pose3D StartPose, Pose3D EndPose, veci Hand1, veci Hand2, double TotalTime, double AccelTime);  Parameter          Pose3D StartPose / Pose3D EndPose      veci Hand1 / veci Hand2      double TotalTime / double AccelTime        Returns          void        Description          Sets P2P trajectory from StartPose, EndPose, Start HandPose, End HandPose, TotalTime, AccelTime      void Set_LINwithHand(vecd StartPose, vecd EndPose, veci Hand1, veci Hand2, double TotalTime, double AccelTime);  Parameter          vecd StartPose / vecd EndPose      veci Hand1 / veci Hand2      double TotalTime / double AccelTime        Returns          void        Description          Sets linear trajectory from StartPose, EndPose, Start HandPose, End HandPose, TotalTime, AccelTime.      void Set_LINwithHand(Pose3D StartPose, Pose3D EndPose, veci Hand1, veci Hand2, double TotalTime, double AccelTime);  Parameter          Pose3D StartPose / Pose3D EndPose      veci Hand1 / veci Hand2      double TotalTime / double AccelTime        Returns          void        Description          Sets linear trajectory from StartPose, EndPose, Start HandPose, End HandPose, TotalTime, AccelTime      void Set_CIRCwithHand(vecd StartPose, vecd ViaPose, vecd EndPose, veci Hand1, veci Hand2, double TotalTime, double AccelTime);  Parameter          vecd StartPose / vecd EndPose / vecd ViaPose      veci Hand1 / veci Hand2      double TotalTime / double AccelTime        Returns          void        Description          Sets circular trajectory from StartPose, ViaPose, EndPose, Start HandPose, End HandPose, TotalTime, AccelTime      void Set_CIRCwithHand(Pose3D StartPose, Pose3D ViaPose, Pose3D EndPose, veci Hand1, veci Hand2, double TotalTime, double AccelTime);  Parameter          Pose3D StartPose / Pose3D ViaPose / Pose3D EndPose      veci Hand1 / veci Hand2      double TotalTime / double AccelTime        Returns          void        Description          Sets circular trajectory from StartPose, ViaPose, EndPose, Start HandPose, End HandPose, TotalTime, AccelTime      void ClearMF(void)  Parameter          void        Returns          void        Description          Clears out motion profile      double GetMotionTotalTime(void)  Parameter          void        Returns          TotalTime in sec        Description          Returns motion run time      MotionPlay.hvoid All_Info_Reload(void);  Parameter          void        Returns          void        Description          Calls motion’s Info(RobotInfo, Kinematics, Trajectory)      void initialize(void)  Parameter          void        Returns          void        Description          Initializes motion profile, done time, step, current time      void Set_Time_Period(int MilliSecond)  Parameter          int MilliSecond        Returns          void        Description          Provides period time for motion      vecd NextStepAtTime(double CurrentTime, int *ErrorStatus)  Parameter          double CurrentTime      int *ErrorStatus        Returns          Joint Angle of next Step        Description          Returns next Goal Joint Angle array      ErrorStatus is pointer for error type      veci NextStepAtTimeforHand(double CurrentTime)  Parameter          CurrentTime - current time in sec        Returns          Angle Value array of Fingers for next step        Description          Returns following Goal Joint Angle array for hand      Assumes hand is attached to arm            vecd CalcIK(Pose3D desiredPose, int *ErrorStatus)    Parameter          Pose3D desiredPose / int *ErrorStatus        Returns          Joint Angle of desiredPose        Description          Returns desired pose of end effector via IK      ErrorStatus is pointer for error type                  no error(ARMSDK_NO_ERROR 0x00)          No solution from IK(ARMSDK_NO_IK_SOLUTION 0x01)          no solution from IK, allowable error(ARMSDK_ACCEPTABLE_ERROR 0x02)          joint angles exceed JointData’s set angles(ARMSDK_OUT_OFF_JOINT_RANGE 0x08)                    vecd NextStep(int* ErrorStatus)  Parameter          ErrorStatus        Returns          Angle rad array for next step        Description          Returns next motion’s joint angles      ErrorStatus is pointer for error type      veci NextStepforHand(void)  Parameter          void        Returns          Angle Value array of Fingers for next step        Description          Returns hand’s next motion position      vecd GetCurrentAngle(void);  Parameter          void        Returns          All Joint Angle(rad)        Description          Returns robot’s current pos(rad) array      Pose3D GetCurrentEndPose(void);  Parameter          void        Returns          Pose3D of EndEffector        Description          Returns end effector’s current pose      double Get_CurrentTime(void);  Parameter          void        Returns          double CurrentTime        Description          Returns current time      RobotisLibPro_Arm_Comm_win.hvoid DXL_Set_Init_Param(int portnum, int baudnum);  Parameter          int portnum, int baudnum        Returns          void        Description          Sets Dynamixel comms from portnum and baudnum      int DXL_Open();  Parameter          void        Returns          void        Description          Opens/access comms to DYNAMIXEL_Set_Init_Param      SerialPort* DXL_Get_Port(void);  Parameter          void        Returns          PortNumber        Description          Returns SerialPort pointer address      void DXL_Close(void);  Parameter          void        Returns          void        Description          End communications with Dynamixel      void Arm_ID_Setup(veci Arm_ID_LIST);  Parameter          array of ID List        Returns          void        Description          Sets arm’s ID list      int Arm_Torque_On(void);  Parameter          void        Returns          Communication Result        Description          Turn torque on every joint      COMM_RXSUCCESS return of 1      int Arm_Torque_Off(void);  Parameter          void        Returns          Communication Result        Description          Turns torque off on every joint      COMM_RXSUCCESS return of 1      int Arm_Set_JointPosition(veci position);  Parameter          joint angle array        Returns          Communication Result        Description          Sets joint angles      COMM_RXSUCCESS return of 1      int Arm_Set_JointVelocity(veci velocity);  Parameter          int joint velocity array        Returns          Communication Result        Description          Sets joint valocities      COMM_RXSUCCESS return of 1      int Arm_Set_JointVelocity(int velocity);  Parameter          int joint velocity        Returns          Communication Result        Description          Sets joint velocities      COMM_RXSUCCESS return of 1      int Arm_Set_JointAcceleration(veci accel);  Parameter          int joint Acceleration array        Returns          Communication Result        Description          Sets joint accelerations      COMM_RXSUCCESS return of 1      int Arm_Set_JointAcceleration(int accel);  Parameter          int joint Acceleration        Returns          Communication Result        Description          Sets joint accelerations      COMM_RXSUCCESS return of 1      int Arm_Set_Position_PID_Gain(int P_Gain, int I_Gain, int D_Gain);  Parameter          int joint Position P, I, D gain        Returns          Communication Result        Description          Sets joints’ PID gain values      COMM_RXSUCCESS return of 1      int Arm_Set_Position_PID_Gain(int id, int P_Gain, int I_Gain, int D_Gain, int* ErrorStatus);  Parameter          int id, int joint Position P, I, D gain        Returns          Communication Result        Description          Sets joints’ PID gain values      ErrorStatus is error pointer      COMM_RXSUCCESS return of 1      int Arm_Get_JointPosition(veci *position);  Parameter          joint position array        Returns          Communication Result        Description          Access position array and gets joint positions      COMM_RXSUCCESS return of 1      int Arm_Get_JointCurrent(veci *torque);  Parameter          joint current array        Returns          Communication Result        Description          Reads joint’s electrical current flow and saves in (*torque) return pointer      COMM_RXSUCCESS return of 1      int Arm_LED_On(void);  Parameter          void        Returns          Communication Result        Description          Turns joints’ LED on      COMM_RXSUCCESS return of 1      int Arm_LED_Off(void);  Parameter          void        Returns          Communication Result        Description          Turns joints’ LED off      COMM_RXSUCCESS return of 1      int Arm_LED_On(int r, int g, int b);  Parameter          int r, int g, int b        Returns          Communication Result        Description          Controls DYNAMIXEL Pro’s RGB LED      r, g, b, rage is 0~255 each      COMM_RXSUCCESS return of 1      int Arm_Red_LED_On(void);int Arm_Green_LED_On(void);int Arm_Blue_LED_On(void);  Parameter          void        Returns          Communication Result        Description          turns joints’ LED on to red(Arm_Red_LED_On)      turns joints’ LED on to green(Arm_Green_LED_On)      turns joints’ LED on to blue(Arm_Blue_LED_On)      COMM_RXSUCCESS return of 1      void Gripper_ID_Setup(veci Gripper_ID_List);  Parameter          ID array        Returns          void        Description          Sets ID for gripper.      int Gripper_Ping(void);  Parameter          void        Returns          Communication Result        Description          Pings comm to gripperGripper      COMM_RXSUCCESS return of 1      int Gripper_Torque_On(void);  Parameter          void        Returns          Communication Result        Description          Turns gripper torque on      COMM_RXSUCCESS return of 1      int Gripper_Torque_Off(void);  Parameter          void        Returns          Communication Result        Description          Turns gripper torque off      COMM_RXSUCCESS return of 1      int Gripper_Get_Joint_Value(veci *value);  Parameter          Joint value array stored in address        Returns          Communication Result        Description          Access gripper’s angles from stored address      COMM_RXSUCCESS return of 1      int Gripper_Set_Joint_Value(veci value);  Parameter          Joint value array        Returns          Communication Result        Description          Sets gripper joint value      COMM_RXSUCCESS return of 1      TimerMotionTimer.htime measurement fromQueryPerformanceCountervoid Start(void)  Parameter          void        Returns          void        Description          Sets start time      void Stop(void)  Parameter          void        Returns          void        Description          Stops time measurement      double GetElapsedTime(void)  Parameter          void        Returns          ElapsedTime in milliseconds        Description          Returns time from start to stop      void Wait(double millisec)  Parameter          millisecond - waiting time in milliseconds you want        Returns          void        Description          Waits amount of time(msec) for standby      Mass PropertyCoordinateTotal Mass : 5,551gLink 1  Mass(g) : 1,030  Center of Gravity(mm)          x : 0      y : 1      z : -1.1        Inertia Tensor(g * mm2)          Ixx Ixy Ixz : 1.4957303e+06 0.0000000e+00 0.0000000e+00      Iyx Iyy Iyz : 0.0000000e+00 4.5009641e+05 -1.0959043e+04      Izz Izy Izz : 0.0000000e+00 -1.0959043e+04 1.4874997e+06        Principal Moments(g * mm2)          I1 : 4.4998065e+05      I2 : 1.4876155e+06      I3 : 1.4957303e+06      Link 2  Mass(g) : 1,404  Center of Gravity(mm)          x : 17.9      y : 0.3      z : 206.9        Inertia Tensor(g * mm2)          Ixx Ixy Ixz : 1.0627201e+07 1.2357497e+04 -1.2920605e+06      Iyx Iyy Iyz : 1.2357497e+04 1.0014640e+07 1.5798255e+05      Izz Izy Izz : -1.2920605e+06 1.5798255e+05 1.9568681e+06        Principal Moments(g * mm2)          I1 : 1.7653895e+06      I2 : 1.0017530e+07      I3 : 1.0815789e+07      Link 3  Mass(g) : 1,236  Center of Gravity(mm)          x : 0.2      y : 0.3      z : 387.9        Inertia Tensor(g * mm2)          Ixx Ixy Ixz : 3.1318491e+06 –6.0760429e+03 2.4765806e+04      Iyx Iyy Iyz : -6.0760429e+03 2.9193915e+06 4.2823763e+04      Izz Izy Izz : 2.4765806e+04 4.2823763e+04 9.2402606e+05        Principal Moments(g * mm2)          I1 : 9.2282696e+05      I2 : 2.9201652e+06      I3 : 3.1322745e+06      Link 4  Mass(g) : 491  Center of Gravity(mm)          x : 0      y : -1.5      z : 514.3        Inertia Tensor(g * mm2)          Ixx Ixy Ixz : 3.9670485e+05 –3.3867048e+00 -4.7608394e+01      Iyx Iyy Iyz : -3.3867048e+00 2.3556702e+05 3.9098238e+03      Izz Izy Izz : -4.7608394e+01 3.9098238e+03 2.9647894e+05        Principal Moments(g * mm2)          I1 : 2.3531708e+05      I2 : 2.9672886e+05      I3 : 3.9670487e+05      Link 5  Mass(g) : 454  Center of Gravity(mm)          x : 0      y : 0.8      z : 591.5        Inertia Tensor(g * mm2)          Ixx Ixy Ixz : 4.7548066e+05 0.0000000e+00 0.0000000e+00      Iyx Iyy Iyz : 0.0000000e+00 3.9961989e+05 1.4840847e+04      Izz Izy Izz : 0.0000000e+00 1.4840847e+04 1.9795791e+05        Principal Moments(g * mm2)          I1 : 1.9687159e+05      I2 : 4.0070622e+05      I3 : 4.7548066e+05      ",
        "url": " http://localhost:4000/docs/en/platform/manipulator_h/introduction/"
      } ,
  
      "docs-en-platform-turtlebot3-introduction":  {
        "title": "TurtleBot3",
      "content"	 : "IntroductionTurtleBot3TurtleBot3 is a new generation mobile robot that is modular, compact and customizable. Let’s explore ROS and create exciting applications for education, research and product development.The goal of TurtleBot3 is to drastically reduce the size and lower the price of the platform without sacrificing capability, functionality, and quality. Optional parts such as chassis, computers and sensors are available, and TurtleBot3 can be customized in various ways. TurtleBot3 is willing to be in the center of the maker movement by applying the latest technical advances of the SBC(Single Board Computer), the Depth sensor and 3D printing technology.TurtleBot3 is a collaboration project among Open Robotics, ROBOTIS, and more partners like Intel, Onshape, OROCA. The Open Robotics is in charge of software and community activities, while ROBOTIS is in charge of manufacturing and global distribution. We need more partners who can provide technology, educational service or distribution in each country.News  10/13/2017 Top 10 Open Source Linux Robots, Linux.com  09/22/2017 “TurtleBot3 AutoRace” on ROSCon2017, PDF, Video  09/21/2017 “Introducing OpenManipulator; the full open robot platform” on ROSCon2017, PDF, Video  07/16/2017 The TurtleBot3 Teacher: Learn the ROS platform with this robot kit, IEEE Spectrum  06/16/2017 Turtlebot3, the Open Source Ubuntu/ROS-Based Robot Kit, Open Electronics  06/14/2017 Open Source TurtleBot 3 Robot Kit Runs Ubuntu and ROS on Raspberry Pi, Linux.com  06/09/2017 Ubuntu-driven TurtleBot gets a major rev with a Pi or Joule in the driver’s seat, LinuxGizmos.com  05/31/2017 The Turtlebot 3 has launched, Ubuntu  05/29/2017 All the Latest, Most Exciting Robotics Research From ICRA 2017, IEEE Spectrum  05/17/2017 The Silicon Valley Startup Creating Robot DNA, Bloomberg  05/02/2017 Hands-on With TurtleBot 3, a Powerful Little Robot for Learning ROS, IEEE Spectrum  12/28/2016 Celebrating 9 Years of ROS, ROBOHUB  10/13/2016 Advances in robotics made easier by forthcoming 3D printed TurtleBot, 3D Printing Industry  10/12/2016 Robotis and OSRF Announce TurtleBot 3: Smaller, Cheaper, and Modular, IEEE Spectrum  09/21/2016 “Introducing the Turtlebot3” on ROSCon2016, PDF, Video  03/26/2013 TurtleBot Inventors Tell Us Everything About the Robot, IEEE SpectrumFeaturesWORLD’S MOST POPULAR ROS PLATFORMTurtleBot is the most popular open source robot for education and research. The new generation ‘TurtleBot3’ is a small, low cost, fully programmable, ROS based mobile robot. It is intended to be used for education, research, hobby and product prototyping.AFFORDABLE COSTTurtleBot was developed to meet the cost-conscious needs of schools, laboratories and companies. TurtleBot3 is the most affordable robot among the SLAM-able mobile robots equipped with a 360 Laser Distance Sensor LDS-01.SMALL SIZEThe dimension of TurtleBot3 Burger is only 138mm x 178mm x 192mm (L x W x H). Its size is about 1/4 of the size of the predecessor. Imagine keeping TurtleBot3 in your backpack and develop your program and test it anywhere you go.ROS STANDARDThe TurtleBot brand is managed by Open Robotics, which develops and maintains ROS. Nowadays, ROS has become the go-to platform for all the roboticists around the world. TurtleBot can be integrated with existing ROS-based robot components, but TurtleBot3 can be an affordable platform for whom want to get started learning ROS.EXTENSIBILITYTurtleBot3 encourages users to customize its mechanical structure with some alternative options: open source embedded board (as a control board), computer and sensors. Turtlebot3 Burger is a two-wheeled differential drive type platform but it is able to be structurally and mechanically customized in many ways: Cars, Bikes, Trailers and so on. Extend your ideas beyond imagination with various SBC, sensors and motors on a scalable structure.MODULAR ACTUATOR FOR MOBILE ROBOTTurtleBot3 is able to get a precise spatial data by using 2 DYNAMIXELs in the wheel joints. DYNAMIXEL XM series can be operated by one of 6 operating modes(XL series: 4 operating modes): Velocity control mode for wheels, Torque control mode or Position control mode for joint, etc. DYNAMIXEL can be used even to make a mobile manipulator which is light but can be precisely controlled with velocity, torque and position control. DYNAMIXEL is a core component that makes TurtleBot3 perfect. It is easy to assemble, maintain, replace and reconfigure.OPEN CONTROL BOARD FOR ROSThe control board is open-sourced in hardware wise and in software wise for ROS communication. The open source control board OpenCR1.0 is powerful enough to control not only DYNAMIXELs but also ROBOTIS sensors that are frequently being used for basic recognition tasks in cost effective way. Various sensors such as Touch sensor, Infrared sensor, Color sensor and a handful more are available. The OpenCR1.0 has an IMU sensor inside the board so that it can enhance precise control for countless applications. The board has 3.3V, 5V, 12V power supplies to reinforce the available computer device lineups.STRONG SENSOR LINEUPSTurtleBot3 Burger uses enhanced 360° LiDAR, 9-Axis Inertial Measurement Unit and precise encoder for your research and development. TurtleBot3 Waffle is equipped with an identical 360° LiDAR as well but additionally proposes a powerful Intel® RealSense™ with the recognition SDK. This will be the best hardware solution for making a mobile robot.OPEN SOURCEThe hardware, firmware and software of TurtleBot3 are open source which means that users are welcomed to download, modify and share source codes. All components of TurtleBot3 are manufactured with injection molded plastic to achieve low cost, however, the 3D CAD data is also available for 3D printing.The 3D CAD data is released via Onshape which is a full-cloud 3D CAD editor. Users can get an access with a web browser on desktop PC, laptop and even portable devices. Onshape allows to draw 3D models and to assemble them with colleagues.Besides, for the users who want to make OpenCR1.0 board by themselves, all details of the OpenCR1.0 board such as schematics, PCB gerber files, BOM and firmware source code are fully opened under the open-source licenses for users and ROS community.You can modify downloaded source code and hardware to share it with your friends.SpecificationsHardware Specifications            Items      Burger      Waffle                  Maximum translational velocity      0.22 m/s      0.26 m/s              Maximum rotational velocity      2.84 rad/s (162.72 deg/s)      1.82 rad/s (104.27 deg/s)              Maximum payload      15kg      30kg              Size (L x W x H)      138mm x 178mm x 192mm      281mm x 306mm x 141mm              Weight (+ SBC + Battery + Sensors)      1kg      1.8kg              Threshold of climbing              &amp;lt;td colspan=2&amp;gt; 10 mm or lower                       &amp;lt;/td&amp;gt;                            Expected operating time      2h 30m      2h              Expected charging time             &amp;lt;td colspan=2&amp;gt; 2h 30m                               &amp;lt;/td&amp;gt;                            MCU                                &amp;lt;td colspan=2&amp;gt; 32-bit ARM Cortex®-M7 with FPU (216 MHz, 462 DMIPS)&amp;lt;/td&amp;gt;                            IMU                                &amp;lt;td colspan=2&amp;gt; Gyroscope 3 AxisAccelerometer 3 AxisMagnetometer 3 Axis&amp;lt;/td&amp;gt;                            Power connectors                   &amp;lt;td colspan=2&amp;gt; 3.3V / 800mA5V / 4A12V / 1A&amp;lt;/td&amp;gt;                            Expansion pins                     &amp;lt;td colspan=2&amp;gt; GPIO 18 pinsArduino 32 pin&amp;lt;/td&amp;gt;                            Peripheral                         &amp;lt;td colspan=2&amp;gt; UART x3, CAN x1, SPI x1, I2C x1, ADC x5, 5pin OLLO x4&amp;lt;/td&amp;gt;                            Dynamixel ports                    &amp;lt;td colspan=2&amp;gt; RS485 x 3, TTL x 3&amp;lt;/td&amp;gt;                            Audio                              &amp;lt;td colspan=2&amp;gt; Several programmable beep sequences&amp;lt;/td&amp;gt;                            Programmable LEDs                  &amp;lt;td colspan=2&amp;gt; User LED x 4&amp;lt;/td&amp;gt;                            Status LEDs                        &amp;lt;td colspan=2&amp;gt; Board status LED x 1Arduino LED x 1Power LED x 1&amp;lt;/td&amp;gt;                            Buttons and Switches               &amp;lt;td colspan=2&amp;gt; Push buttons x 2, Reset button x 1, Dip switch x 2&amp;lt;/td&amp;gt;                            Battery                            &amp;lt;td colspan=2&amp;gt; Lithium polymer 11.1V 1800mAh / 19.98Wh 5C&amp;lt;/td&amp;gt;                            PC connection                      &amp;lt;td colspan=2&amp;gt; USB&amp;lt;/td&amp;gt;                            Firmware upgrade                   &amp;lt;td colspan=2&amp;gt; via USB / via JTAG&amp;lt;/td&amp;gt;                            Power adapter (SMPS)               &amp;lt;td colspan=2&amp;gt; Input : 100-240V, AC 50/60Hz, 1.5A @maxOutput : 12V DC, 5A&amp;lt;/td&amp;gt;                    Dimension and MassData of TurtleBot3 BurgerData of TurtleBot3 WaffleComponentsSBC      Raspberry Pi 3 Model B : https://www.raspberrypi.org/products/raspberry-pi-3-model-b/        Intel® Joule™ : http://ark.intel.com/products/96414/Intel-Joule-570x-Developer-Kit  Sensor      360 Laser Distance Sensor LDS-01 : http://turtlebot3.robotis.com/en/latest/appendix_lds.html        Intel® Realsense™ R200 : https://software.intel.com/en-us/RealSense/R200Camera  Control board  OpenCR1.0 : http://turtlebot3.robotis.com/en/latest/appendix_opencr.htmlActuator  Dynamixel X series : http://en.robotis.com/index/product.php?cate_code=10121110Hardware SetupMain ComponentsPart ListTurtleBot3 has two different models: Burger and Waffle. The following list shows their components. The big differences between two models are the Motor, the SBC(Single Board Computer) and the Sensors.Chasis Parts            Part Name      Burger      Waffle                  Waffle-Plate      8      24              Plate Support M3x35mm      4      12              Plate Support M3x45mm      10      10              PCB Support      12      12              Wheel      2      2              Tire      2      2              Ball Caster      1      2      Motor            Part Name      Burger      Waffle                  DYNAMIXEL (XL430-W250-T)      2      0              DYNAMIXEL (XM430-W210-T)      0      2      Board            Part Name      Burger      Waffle                  OpenCR1.0      1      1              Raspberry Pi 3      1      0              Intel® Joule™      0      1              USB2LDS      1      1      Sensor            Part Name      Burger      Waffle                  LDS (HLS-LFCD2)      1      1              Intel® Realsense™ R200      0      1      Memory            Part Name      Burger      Waffle                  MicroSD Card      1      0      Cable            Part Name      Burger      Waffle                  Raspberry Pi 3 Power Cable      1      0              Intel® Joule™ Power Cable      0      1              Li-Po Battery Extension Cable      1      1              DYNAMIXEL to OpenCR Cable      2      2              USB Cable      2      2      Power            Part Name      Burger      Waffle                  SMPS 12V5A      1      1              A/C Cord      1      1              LIPO Battery 11.1V 1800mAh      1      1      Tools            Part Name      Burger      Waffle                  Screw driver      1      1              Rivet tool      1      1              USB3.0 HUB      0      1              LIPO Battery charger      1      1      Miscellenous            Part Name      Burger      Waffle                  PH_M2x4mm_K      8      8              PH_T2x6mm_K      4      8              PH_M2x12mm_K      0      4              PH_M2.5x8mm_K      16      12              PH_M2.5x12mm_K      0      18              PH_T2.6x12mm_K      16      0              PH_M2.5x16mm_K      4      4              PH_M3x8mm_K      44      140              NUT_M2      0      4              NUT_M2.5      20      18              NUT_M3      16      96              Rivet_1      14      20              Spacer      4      4              Bracket      5      8              Adapter Plate      1      1              Rivet_2      2      2      Assembly ManualTurtleBots3 is delivered as unassembled parts in the boxes. Follow the instructions to assemble TurtleBot3.  Download PDF Assembly manual for TurtleBot3 Burger  Download PDF Assembly manual for TurtleBot3 WaffleAssembly VideoIf it is difficult to assemble with the assembly manual, please refer to the following assembly video.TurtleBot3 BurgerTurtleBot3 Waffle[Basic Operation]You can use PUSH SW 1 and PUSH SW 2 buttons to see whether your robot has been properly assembled. This process tests the left and right DYNAMIXELs and the OpenCR1.0 board.  After assembling TurtleBot3, connect the battery to OpenCR1.0 and turn on the power switch. You can see that the Power LED of OpenCR1.0 turns on.  Place the robot on the floor. For the test, safety radius of 1 meter (about 40 inches) is recommended.  Press and hold PUSH SW 1 for a few seconds to command the robot to move 30 centimeters (about 12 inches) forward.  Press and hold PUSH SW 2 for a few seconds to command the robot to rotate 180 degrees in place.Open Source HardwareCore components of Turtlebot3 are the followings: Chassis, Motors, Wheels, OpenCR1.0, SBC Computer, Sensor and Battery. The chassis are Waffle Plates that holds other components. The Waffle Plate plays an important role as a chassis although its size is as small as your palm. Waffle plate is manufactured with injection mold method to lower the manufacturing cost. However, the CAD data of waffle plate for 3D printing is also available via Onshape. Turtlebot3 Burger is a Two-wheeled differential drive type platform, but it is customizable structurally and mechanically in many ways: Cars, Bikes, Trailers and so on.The CAD data is released to the Onshape, which is a full-cloud 3D CAD editor. Get access through a web browser from your PC or from portable devices. OnShape allows drawing and assemblying parts with co-workers.  TurtleBot3 Burger 3D Model: https://goo.gl/n3bGNr  TurtleBot3 Waffle 3D Model: https://goo.gl/wCDvVI",
        "url": " http://localhost:4000/docs/en/platform/turtlebot3/introduction/"
      } ,
  
      "docs-en-edu-ollo-inventor":  {
        "title": "OLLO INVENTOR",
      "content"	 : "OLLO INVENTORIntroductionCreate robots using the controller, geared motors, sensors, and servo motors and perform basic programming.Through 12-session curriculum, learn programming and experiment on wireless communication, the concept of control, sensors and various module applications.Part List  RC-100  LN-101  Servo Motor  IR Sensor  LED Module  Touch SensorQuick StartZIGBee Wireless ControlZIGBeeZIG-100/110 uses ZIGBee for wireless communication. ZIGBee, like Bluetooth, is the communication technology commonly used in Personal Area Network (PAN). The communication quality of ZIGBee is better than that of IR, so it allows many users to control their robots without interferences.Caution Please note that not all products include a zigbee module and may need to be purchased separately.Controller &amp;amp; ZIGBeeOLLO and Bioloid both use the RC-100, which uses IR communication method. To upgrade to the Zigbee communication method, you must purchase the  ZIG-110 set separately. The ZIG-110 set includes one Zig-100 module, which is attached to the RC-100, and one Zig-110 module which is attached to the Controller.Note The modules in a single Zigbee set have been preconfigured to communicate with each other. Therefore, a module from one set may not work with a module from another set. Please be careful not to mix them up.            ZIG-100 installed in RC-100      ZIG-110 installed in CM-100                                          ZIG-110 installed in CM-510      ZIG-100 installed in CM-5                              [Download]Please refer to Inventor Learning Material on How to Assemble or motions during the execution for each example.Also, please refer to How to Download of task code for more information.            I-1      TASK Code      Description                  1. Crossing Gate      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot              2. Bump Car      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot              3. Probing Car      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot              4. Guitar      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot                  I-2      TASK Code      Description                  5. Bird      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot              6. Crane      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot              7. Combat Car      DownloadDownload      Example program for assembly checkExample program for robot              8. Tank      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot                  I-3      TASK Code      Description                  9. Flag Game      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot              10. Battle Bug      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot              11. Knight      DownloadDownloadDownload      Example program for assembly checkExample program for programmingExample program for robot              12. Racing Car      DownloadDownloadDownloadDownload      Example program for assembly checkExample program for programming 1Example program for programming 2Example program for robot      ",
        "url": " http://localhost:4000/docs/en/edu/ollo/inventor/"
      } ,
  
      "docs-en-parts-sensor-ir-array":  {
        "title": "IR Sensor Array",
      "content"	 : "IR Sensor ArrayIntroduction  The IR sensor array is a device with 7 mounted infrared sensors. Each IR sensor is capable of detecting black and white colors. The array is capable of emitting sounds.  The IR array can perform detection at proper distances. The infrared sensors transmitters/receivers  have optimal operating range of 0-5CM.Specifications            Item      Specifications                  Weight      18g              Resolution      10bit(1,024)              Operation Temperature      -5°C ~ +85°C              Voltage      7 ~ 15V (Recommended Voltage 11.1V)              Maximum Current      100mA              Command Signal      Digital Packet              Protocol Type      Half duplex Asynchronous Serial Communication (8bit,1stop,No Parity)              Link (Physical)      TTL Level Multi Drop (daisy chain type Connector)              ID      254 ID (0~253)              Communication Speed      7,843bps ~ 1 Mbps              Feedback      Input Voltage, IR Sensor Data x 7      How to UseLEDThe LEDs will be turned on if the sensor value is smaller than the sensor value for black color detection.Black Color Detecting CalibrationThe 3-Pin connector provides power; pressing the right button initializes the array with set threshold values. Press the button one more time the arrays halts auto-calibration and reverts back to set threshold values. Set values = (MAX_VALUE + 2 * MIN_VALUE) / 3; where MAX_VALUE is max value of sensors between the first and second button presses, and MIN_VALUE is the min value of sensors between the first and second button presses.ResetPress the left button once and the IR array will reset via the supplied 3Pin cable. Note that this will not change set black detection values.Communications ProtocolIR array communications and communications-related hardware are shown here.  Comm protocal, packet component please refer to Dynamixel comm.  Comm hardware refer to the AX series.Control TableControl Table consists of data regarding the current status and operation, which exists inside of Dynamixel. The user can control Dynamixel by changing data of Control Table via Instruction Packet.EEPROM and RAMData in RAM area is reset to the initial value whenever the power is turned on while data in EEPROM area is kept once the value is set even if the power is turned off.AddressIt represents the location of data. To read from or write data to Control Table, the user should assign the correct address in the Instruction Packet.AccessDynamixel has two kinds of data: Read-only data, which is mainly used for sensing, and Read-and-Write data, which is used for driving.Initial ValueIn case of data in the EEPROM Area, the initial values on the right side of the below Control Table are the factory default settings. In case of data in the RAM Area, the initial values on the right side of the above Control Tables are the ones when the power is turned on.Highest/Lowest ByteIn the Control table, some data share the same name, but they are attached with (L) or (H) at the end of each name to distinguish the address. This data requires 16bit, but it is divided into 8bit each for the addresses (low) and (high). These two addresses should be written with one Instruction Packet at the same time.EEPROM Area            Address      Data Name      Description      Access      Initial Value                  0(0x00)      Model Number(L)      Lowest Byte of Model Number      R      74(0x4A)              1(0x01)      Model Number(H)      Highest Byte of Model Number      R      1(0x01)              2(0x02)      Firmware Version      Firmware Version      R      -              3(0x03)      ID      DYNAMIXEL ID      RW      100(0x64)              4(0x04)      Baud Rate      Communication Speed      RW      1(0x0x)              5(0x05)      Return Delay Time      Response Delay Time      RW      250(0xFA)              6(0x06)      IR Threshold_L 1      Low Byte of IR Sensor #1 Threshold      RW      16(0x10)              7(0x07)      IR Threshold_H 1      High Byte of IR Sensor #1 Threshold      RW      3(0x03)              8(0x08)      IR Threshold_L 2      Low Byte of IR Sensor #2 Threshold      RW      16(0x10)              9(0x09)      IR Threshold_H 2      High Byte of IR Sensor #2 Threshold      RW      3(0x03)              10(0x0A)      IR Threshold_L 3      Low Byte of IR Sensor #3 Threshold      RW      16(0x10)              11(0x0B)      IR Threshold_H 3      High Byte of IR Sensor #3 Threshold      RW      3(0x03)              12(0x0C)      IR Threshold_L 4      Low Byte of IR Sensor #4 Threshold      RW      16(0x10)              13(0x0D)      IR Threshold_H 4      High Byte of IR Sensor #4 Threshold      RW      3(0x03)              14(0x0E)      IR Threshold_L 5      Low Byte of IR Sensor #5 Threshold      RW      16(0x10)              15(0x0F)      IR Threshold_H 5      High Byte of IR Sensor #5 Threshold      RW      3(0x03)              16(0x10)      Status Return Level      Select Types of Status Return      RW      2(0x02)              17(0x11)      IR Threshold_L 6      Low Byte of IR Sensor #6 Threshold      RW      16(0x10)              18(0x12)      IR Threshold_H 6      High Byte of IR Sensor #6 Threshold      RW      3(0x03)              20(0x14)      IR Threshold_L 7      Low Byte of IR Sensor #7 Threshold      RW      16(0x10)              21(0x15)      IR Threshold_H 7      High Byte of IR Sensor #7 Threshold      RW      3(0x03)      RAM Area            Address      Data Name      Description      Access      Initial Value                  24(0x18)      IR Data_L 1      Low Byte of IR Sensor #1 Value      R      -              25(0x19)      IR Data_H 1      High Byte of IR Sensor #1 Value      R      -              26(0x1A)      IR Data_L 2      Low Byte of IR Sensor #2 Value      R      -              27(0x1B)      IR Data_H 2      High Byte of IR Sensor #2 Value      R      -              28(0x1C)      IR Data_L 3      Low Byte of IR Sensor #3 Value      R      -              29(0x1D)      IR Data_H 3      High Byte of IR Sensor #3 Value      R      -              30(0x1E)      IR Data_L 4      Low Byte of IR Sensor #4 Value      R      -              31(0x1F)      IR Data_H 4      High Byte of IR Sensor #4 Value      R      -              32(0x20)      IR Data_L 5      Low Byte of IR Sensor #5 Value      R      -              33(0x21)      IR Data_H 5      High Byte of IR Sensor #5 Value      R      -              34(0x22)      IR Data_L 6      Low Byte of IR Sensor #6 Value      R      -              35(0x23)      IR Data_H 6      High Byte of IR Sensor #6 Value      R      -              36(0x24)      IR Data_L 7      Low Byte of IR Sensor #7 Value      R      -              37(0x25)      IR Data_H 7      High Byte of IR Sensor #7 Value      R      -              40(0X28)      Buzzer Data 0      Buzzer Notes      RW      -              41(0X29)      Buzzer Data 1      Buzzer Ringing Time      RW      -              42(0x2A)      Auto Threshold      Set Automatic Object Detection Mode      RW      0(0x00)              43(0x2B)      IR Obstacle Detected      IR Object Detection      R      -              44(0X2C)      Registered      Registration of Instruction      RW      0(0X00)              47(0X2F)      Lock      Locking EEPROM      RW      0(0X00)              48(0X30)      IR Threshold_L 1      Low Byte of IR Sensor #1 Set Value      RW      16(0x10)              49(0X31)      IR Threshold_H 1      High Byte of IR Sensor #1 Set Value      RW      3(0x03)              50(0X32)      IR Threshold_L 2      Low Byte of IR Sensor #2 Set Value      RW      16(0x10)              51(0X33)      IR Threshold_H 2      High Byte of IR Sensor #2 Set Value      RW      3(0x03)              52(0X34)      IR Threshold_L 3      Low Byte of IR Sensor #3 Set Value      RW      16(0x10)              53(0X35)      IR Threshold_H 3      High Byte of IR Sensor #3 Set Value      RW      3(0x03)              54(0X36)      IR Threshold_L 4      Low Byte of IR Sensor #4 Set Value      RW      16(0x10)              55(0X37)      IR Threshold_H 4      High Byte of IR Sensor #4 Set Value      RW      3(0x03)              56(0X38)      IR Threshold_L 5      Low Byte of IR Sensor #5 Set Value      RW      16(0x10)              57(0X39)      IR Threshold_H 5      High Byte of IR Sensor #5 Set Value      RW      3(0x03)              58(0X3A)      IR Threshold_L 6      Low Byte of IR Sensor #6 Set Value      RW      16(0x10)              59(0X3B)      IR Threshold_H 6      High Byte of IR Sensor #6 Set Value      RW      3(0x03)              60(0X3C)      IR Threshold_L 7      Low Byte of IR Sensor #7 Set Value      RW      16(0x10)              61(0X3D)      IR Threshold_H 7      High Byte of IR Sensor #7 Set Value      RW      3(0x03)      Control Table DescriptionModel Number (0)This address stores model number of the DYNAMIXEL.Firmware Version (2)This address stores firmware version of the DYNAMIXEL.ID (3)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate (4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate(bps)      Margin of Error                  1      1M      0.000%              3      500,000      0.000%              4      400,000      0.000%              7      250,000      0.000%              9      200,000      0.000%              16      115200      -2.124%              34(Default)      57600      0.794%              103      19200      -0.160%              207      9600      -0.160%      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time (5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      IR Detecting ThresholdSet black values for IR #1 ~ #7This value is referred when detecting black and white color.            Values      Black detection      LED                  Sensor value &amp;lt;= Threshold      BIT 1      ON              Sensor value &amp;gt; set value      BIT 0      OFF      When the sensor is powered, the value in EEPROM area will be used to initialize RAM area Threshold.IR sensor values (1 ~ 7)If infrared light is emitted with enough intensity it will reflect off walls, objects, the receiver will detect the reflected light. Light reflected from bright walls and objects will be read as a high value. Measured value range is 0-1,023.Infrared light measured from walls, objects, textures may be output differently including a difference in measurement.Buzzer NotesA buzzer is installed in AX-S1, and simple beep sounds can be made.  Total 52 musical notes can be made in Buzzer Notes, and various notes can be made because there are whole tones and halftones in each octave.  The values of Buzzer Notes are assigned as the table below.Buzzer Ringing TimeAX-S1 has a function to control the buzzer alarming time.  It is possible to control by the unit of 0.1 second, and the minimum length is set to 0.3 seconds; the time can be extended up to maximum 5 seconds.  That is, if 0~3 is entered, the buzzer rings for 0.3 seconds; if the value over 50 is entered, the buzzer rings only for 5 seconds regardless of the value.  Moreover, if the ringing is finished, the buzzer ringing time is automatically initialized to ‘0’.There are 2 special buzzer ringing time functions for AX-S1.  Firstly, the buzzer can be ringing without stopping.  If 254 is entered in buzzer ringing time, and the number of desired musical notes is entered, the buzzer rings without stopping.  To stop the ringing, ‘0’ is entered in buzzer ringing time.Secondly, the buzzer can play special melodies.  If 255 is entered in buzzer ringing time, and then the value 0~26 is entered in buzzer notes, 27 melodies corresponding to each number can be played. If the ringing is finished, the buzzer ringing time is automatically initialized to ‘0’.Automatic set black detection modeMode for automatic black detection set-up from start to finish paramenters. From ‘0’ to ‘1’ starts; from ‘1’ to ‘0’ finishes.In the IR array if each IR sensor detected black value is lower than the set black valuethe values will be assigned as shown below; the LED turns on.            BIT      Name                  Bit 0      Black detection for IR sensor #1              Bit 1      Black detection for IR sensor #2              Bit 2      Black detection for IR sensor #3              Bit 3      Black detection for IR sensor #4              Bit 4      Black detection for IR sensor #5              Bit 5      Black detection for IR sensor #6              Bit 6      Black detection for IR sensor #7      Registered Instruction            Value      Meaning                  0      There are no commands transmitted by REG_WRITE              1      There are commands transmitted by REG_WRITE.      Note If ACTION command is executed, the value is changed into 0.Lock            Value      Meaning                  0      EEPROM area can be modified.              1      EEPROM area cannot be modified.      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.",
        "url": " http://localhost:4000/docs/en/parts/sensor/ir-array/"
      } ,
  
      "docs-en-parts-sensor-irss-10":  {
        "title": "IR Sensor(IRSS-10)",
      "content"	 : "IR Sensor(IRSS-10)Introduction  It uses a method which produces infrared lights and calculates the amount reflected back.  Infrared light is not suitable to measure distance between objects because even though two objects are at the same distance, the reflected amount can be varied depending on the color and brightness.Compatibility Guide Controller CompatibilitySpecifications  Weight : 4g  Dimensions : 24mm x 18mm x 12mmPinout  SIG1 : Maintains low signal  GND  ADC : Outputs the value detected from IR receiver into analog signals  VCC ( 3.3V )  SIG2 : Can turn on the LED by sending High SignalsCaution Cables can may be damaged when not properly connected (i.e. wrong orientation), or use of excessive force during connection.Caution Make connections to the controlled while unpowered. Making connections while the controller is powered may cause it to malfunction or/and damage.Sensor Output  Below is a graph representing a rough estimate of the sensor value’s changes from the white object’s distance. The sensor’s value is subject to change depending on the object’s color and surrounding environment.  The IR sensor is divided into a receiver and transmitter. When an object is too close, the angle where the reflected infrared light comes is not even making it difficult to know the area which the sensor value decreases. Also, it can barely detect object further than 15cm.Tutorials  RoboPlus Task : Please refer to [IR Sensor] section in the Roboplus Task.Videos",
        "url": " http://localhost:4000/docs/en/parts/sensor/irss-10/"
      } ,
  
      "docs-en-dxl-pro-l42-10-s300-r":  {
        "title": "L42-10-S300-R",
      "content"	 : "L42-10-S300-RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps ~ 10.5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      257g (9.0oz)              Dimensions (W x H x D)      42mm x 72mm x 42mm (1.65 x 2.83 x 1.65)              Resolution      4,096 steps/rev              Gear Ratio      303.8 : 1              Backlash      4.6arcmin (0.08°)              No Load Speed      29.7rpm              No Load Current      0.72A              Continuous Speed      27.9rpm              Continuous Torque      1.2Nm (170 ozf-in)              Continuous Current      0.8A              Output      10W              Operating Temperature      5°C ~ 55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multidrop BUS              ID      0 ~ 252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different. Stall torque is measured from the max torque that it can reach. This is generally how RC servos measure their torque. For the Performance graph with the N-T curves, it is measured with the load gradually increasing. The motor operation environment is closer to the performance graph, not stall torque method. This is probably why the performance graph is being broadly used in the industrial market. This is why the max torque of the performance grap can actually be less than the stall torque.Caution When connecting to power supply, it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL.Do not connect or disconnect DYNAMIXEL when power is being supplied.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 2.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(64) is cleared to ‘0’.SizeThe Size of data varies from 1 to 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. For data larger than 2 bytes will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      35072              2      4      Model Information      Model Information      R      -              6      1      Firmware Version      Firmware Version      R      -              7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW      -              30      2      Torque Limit      Maximum Torque Limit      RW      -              32      4      Velocity Limit      Maximum Velocity Limit      RW      -              36      4      Max Position Limit      Maximum Position Limit      RW      -              40      4      Min Position Limit      Minimum Position Limit      RW      -              44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      48              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On/Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              590      2      Position D Gain      D Gain of Position      RW      -              592      2      Position I Gain      I Gain of Position      RW      -              594      2      Position P Gain      P Gain of Position      RW      -              596      4      Goal Position      Target Position Value      RW      -              600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R      -              611      4      Present Position      Present Position Value      R      -              615      4      Present Velocity      Present Velocity Value      R      -              621      2      Present Current      Present Current Value      R      -              623      2      Present Input Voltage      Present Input Voltage      R      -              625      1      Present Temperature      Present Internal Temperature      R      -              626      2      External Port Data 1      External Port Data 1      R/RW      0              628      2      External Port Data 2      External Port Data 2      R/RW      0              630      2      External Port Data 3      External Port Data 3      R/RW      0              632      2      External Port Data 4      External Port Data 4      R/RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable(562) is cleared to ‘0’.Model Number(0)This address stores model number of the DYNAMIXEL.            Model Name      Model Number                  L42-10-S300-R      35072 (0x8900)      Firmware Version(6)This address stores firmware version of the DYNAMIXEL.ID(7)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate(8)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate                  8      10.5M              7      4.5M              6      4M              5      3M              4      2M              3      1M              2      115,200              1(Default)      57,600              0      9,600      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time(9)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      Operating Mode(11)            Value      Operating Mode      Description                  1      Velocity Control Mode      This mode controls Velocity and Torque. Position will not be controlled.              3(Default)      Position Control Mode      This mode controls Position, Velocity and Torque.      Moving Threshold(17)If Present Velocity(615) is bigger than this value, Moving(610) is set to ‘1’ and otherwise Moving(610) is cleared to ‘0’. This value determines whether Dynamixel is in motion or not.            Value Range                  0 ~ 2,147,483,647      Temperature Limit(21)This value limits operating temperature. When the Present Temperature(625) that indicates internal temperature of Dynamixel is greater than the Temperature Limit(21), the Over Heating Error Bit(Bit 2) in the Hardware Error Status(892) will be set. If Overheating Error Bit(Bit 2) is configured in the Shutdown(48) when Over Heating Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 1°      0 ~ 100      0 ~ 100°      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage Limit(24, 22)These values are maximum and minimum operating voltages.When current input voltage acquired from Present Input Voltage(623) exceeds the range of Max Voltage Limit(36) and Min Voltage Limit(40), Input Voltage Error Bit(Bit 0) in the Hardware Error Status(892) will be set to ‘1’. If Input Voltage Error Bit(Bit 0) is configured in the Shutdown(48) when Input Voltage Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 0.1V      0 ~ 400      0 ~ 40.0V      Acceleration Limit(26)This value indicates acceleration limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Torque Limit(30)This value indicates torque limit. Goal Torque(604) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 32,767      Velocity Limit(32)This value indicates velocity limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Min/Max Position Limits(40, 36)These values limit maximum and minimum target positions. The Goal Position(596) can’t exceed these values.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet. In Extended Position Control Mode, these limits will be ignored.            Model Name      Value Range                  H54-200-S500-RH54-100-S500-R      -250,961 ~ 250,961              H42-20-S300-R      -151,875 ~ 151,875              M54-60-S250-RM54-40-S250-R      -125,708 ~ 125,708              M42-10-S260-R      -131,593 ~ 131,593              L54-50-S290-R      -103,846 ~ 103,846              L54-50-S500-RL54-30-S500-R      -180,692 ~ 180,692              L54-30-S400-R      -144,197 ~ 144,197      External Port Mode(44 ~ 47)/Data(626 ~ 632)Dynamixel PRO is equipped with multi-purpose expansion ports.            Item      Range                  Voltage      0 ~ 3.3V              Current      0 ~ 5mA        Analog input mode: analog values from an external port get converted to digital. These values are automatically updated in External port data(626 ~ 632).  Output mode: can adjust external port voltage 0V or 3.3V. External port data value of 0 is 0V, 1 for 3.3V.  Pull-up input mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-up. Depending on needs an external strong pull-up is acceptable.  Pull-up output mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-down. Depending on needs an external strong pull-down is acceptable.External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector.            Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3.3V      PORT1      PORT2      PORT3      PORT4      Shutdown(48)The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation. Each Bit is inclusively processed with the ‘OR’ logic, therefore, multiple options can be generated. For instance, when ‘0x05’ (binary : 00000101) is defined as Shutdown(48), Dynamixel can detect both Input Voltage Error(binary : 00000001) and Overheating Error(binary : 00000100). If those errors are detected, Torque Enable(562) is cleared to ‘0’ and the motor output becomes 0[%]. In order to reuse Dynamixel Pro in shutdown status, REBOOT has to be done. The followings are detectable situations.            Bit      Item      Description                  Bit 7      -      -              Bit 6      -      -              Bit 5      Overload Error(default)      Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error(default)      Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error(default)      Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs, use below method to reboot Dynamixels.  H/W REBOOT : Turn off the power and turn on again  S/W REBOOT : Transmit REBOOT Instruction (For more details, please refer to the Protocol section of e-Manual.)Indirect Address, Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses. Sequential addresses increase Instruction Packet efficiency. Addresses that can be defined as Indirect Address is limited to RAM area(Address 562 ~ 892).If specific address is allocated to Indirect Address, Indirect Address inherits features and properties of the Data from the specific Address. Property includes Size(Byte length), value range, and Access property(Read Only, Read/Write). For instance, if address 563(LED Red) is allocated to Indirect Address 1(49), Indirect Data 1(634) will have the exactly same value of LED Red(563).Example 1 Allocating 1 byte LED(563) to Indirect Data 1(634).  Indirect Address 1(49) : change the value to ‘563’ which is the address of LED Red.  Set Indirect Data 1(634) to ‘1’ : LED Red(563) also becomes ‘1’ and Red LED will be turned on.  Set Indirect Data 1(634) to ‘0’ : LED Red(563) also becomes ‘0’ and Red LED will be turned off.Example 2 Allocating Size 4 byte Goal Position(596) to Indirect Data 2(635), 4 sequential bytes have to be allocated.  Indirect Address 2(51) : change the value to ‘596’ which is the first address of Goal Position.  Indirect Address 3(53) : change the value to ‘597’ which is the second address of Goal Position.  Indirect Address 4(55) : change the value to ‘598’ which is the third address of Goal Position.  Indirect Address 5(57) : change the value to ‘599’ which is the fourth address of Goal Position.  Set 4 byte value 305,419,896(0x12345678) to Indirect Data 2 : Goal Position(596) also becomes 305,419,896(0x12345678) as below.            Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2[byte] to Indirect Address, all address must be allocated to Indirect Address like the above Example 2.Note Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.Torque Enable(562)Controls Torque ON/OFF. Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected.            Value      Description                  0(Default)      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      Note Present Position(132) can be reset when Operating Mode(11) and Torque Enable(64) are updated. For more details, please refer to the Homing Offset(20) and Present Position(132).RGB LED(563)Controls the RGB LED on Dynamixel PRO.            Address      Color      Range                  563      Red      0 ~ 255              564      Green      0 ~ 255              565      Blue      0 ~ 255      Position PID Gain(594, 592, 590)These Gains are used in Position Control Mode. Below figure is a block diagram describing the Position Control Mode. KPD, KPI, KPP stands for Position D Gain, Position I Gain and Position P Gain respectively.            Gain Value Range                  0 ~ 32,767      Goal Position(596)Target position can be set with Goal Position(596). This value can’t be smaller than the Min Position Limit(40) or larger than Max Position Limit(36).When CW/CCW Angle Limit are exceeded the status packet sends an Angle limit error bit (bit 1) to 1. The alarm LED is triggered and initiate shutdown.            Model      Angle Range      Position Range      Description                  L42-10-S300-R      0° ~ 360 °      0 ~ 4,095            Goal Velocity(600)      Position Control ModeSpeed for Goal Position. Range is from 0 ~ 1,023 (0x3FF) and 0.114rpm is a RPM conversion unit. If Goal Velocity is set to ‘0’, maximum rpm will be used.For example, if Goal Velocity is set to ‘1,023’, 1,023 * 0.114rpm = 116.62rpm        Speed Control ModeIt is a velocity to a target direction.-1,023 ~ 1,023 (0x3FF) can be used, and the conversion unit is about 0.114rpm.If a value in the range of 0 ~ 1,023 is used, rotating direction is CCW and ‘0’ will stop rotation.If a value in the range of -1,023 ~ 0 is used, rotating direction is CW and ‘0’ will stop rotation.    Note Please check the maximum rpm of the Dynamixel. The motor cannot exceed the maximum rpm with the higher Moving Speed value.  Goal Torque(604)It is the value of the maximum torque limit.0 ~ 1,023(0x3FF) is available, and the unit is about 0.1%.For example, if the value is 512, it is about 50%; that means only 50% of the maximum torque will be used.If the power is turned on, the value of Torque Limit(30) is used as an initial value.Goal Acceleration(606)Goal Acceleration(606) can be used to set a target acceleration. This value is used in Velocity Control Mode and Position Control Mode. The profile control will be enabled when both Goal Acceleration(606) and Goal Velocity(600) are not ‘0’.Please refer to the Goal Velocity(600) for RPM conversion constant.            Value Range      Unit                  -2,147,483,647 ~ 2,147,483,647      214 RPM2 @ Core Motor      Moving(610)This value indicates whether Dynamixel Pro is in motion or not. If absolute value of Present Velocity(615) is greater than Moving Threshold(17), Moving(610) is set to ‘1’. Otherwise, it will be cleared to ‘0’. However, this value will always be set to ‘1’ regardless of Present Velocity(615) while Profile is in progress with Goal Position(596) instruction.            Value      Description                  0      Movement is not detected              1      Movement is detected, or Profile is in progress(Goal Position(596) instruction is being processed)      Present Position(611)This value indicates present Position. For more details, please refer to the Goal Position(596).Present Velocity(615)This value indicates present Velocity.It is a velocity to a target direction.-1,023 ~ 1,023 (0x3FF) can be used, and the conversion unit is about 0.114rpm.For more details, please refer to the Goal Velocity(600).Present Current(621)            Formula                  A = V * 8,250 / 2,048A : Current[mA]V : Present Current/Goal Torque      Present Input Voltage(623)This value indicates present voltage that is being supplied. For more details, please refer to the Min/Max Voltage Limit(24, 22).Present Temperature (625)This value indicates present internal Temperature. For more details, please refer to the Temperature Limit(21).Registered Instruction(890)            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Status Return Level(891)This value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Hardware Error Status(892)This value indicates hardware error status. For more details, please refer to the Shutdown(48).How to AssembleOption Frame Assembly  FRP42-H110K, FRP42-H120K SetMaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF, DWG, STEP, IGES",
        "url": " http://localhost:4000/docs/en/dxl/pro/l42-10-s300-r/"
      } ,
  
      "docs-en-dxl-pro-l54-30-s400-r":  {
        "title": "L54-30-S400-R",
      "content"	 : "L54-30-S400-RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps ~ 10.5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      612g (21.6oz)              Dimensions (W x H x D)      54mm x 108mm x 54mm (2.13 x 4.25 x 2.13)              Resolution      288,395 steps/rev              Gear Ratio      400.5 : 1              Backlash      4.6arcmin (0.08°)              No Load Speed      28.7rpm              No Load Current      1.19A              Continuous Speed      26.9rpm              Continuous Torque      2.5Nm (354 ozf-in)              Continuous Current      1.6A              Output      30W              Operating Temperature      5°C ~ 55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multidrop BUS              ID      0 ~ 252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different. Stall torque is measured from the max torque that it can reach. This is generally how RC servos measure their torque. For the Performance graph with the N-T curves, it is measured with the load gradually increasing. The motor operation environment is closer to the performance graph, not stall torque method. This is probably why the performance graph is being broadly used in the industrial market. This is why the max torque of the performance grap can actually be less than the stall torque.Caution When connecting to power supply, it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL.Do not connect or disconnect DYNAMIXEL when power is being supplied.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 2.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(64) is cleared to ‘0’.SizeThe Size of data varies from 1 to 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. For data larger than 2 bytes will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      37928              2      4      Model Information      Model Information      R      -              6      1      Firmware Version      Firmware Version      R      -              7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW      -              30      2      Torque Limit      Maximum Torque Limit      RW      -              32      4      Velocity Limit      Maximum Velocity Limit      RW      -              36      4      Max Position Limit      Maximum Position Limit      RW      -              40      4      Min Position Limit      Minimum Position Limit      RW      -              44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On/Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW      -              588      2      Velocity P Gain      P Gain of Velocity      RW      -              594      2      Position P Gain      P Gain of Position      RW      -              596      4      Goal Position      Target Position Value      RW      -              600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R      -              611      4      Present Position      Present Position Value      R      -              615      4      Present Velocity      Present Velocity Value      R      -              621      2      Present Current      Present Current Value      R      -              623      2      Present Input Voltage      Present Input Voltage      R      -              625      1      Present Temperature      Present Internal Temperature      R      -              626      2      External Port Data 1      External Port Data 1      R/RW      0              628      2      External Port Data 2      External Port Data 2      R/RW      0              630      2      External Port Data 3      External Port Data 3      R/RW      0              632      2      External Port Data 4      External Port Data 4      R/RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable(562) is cleared to ‘0’.Model Number(0)This address stores model number of the DYNAMIXEL.            Model Name      Model Number                  L54-30-S400-R      37928 (0x9428)      Firmware Version(6)This address stores firmware version of the DYNAMIXEL.ID(7)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate(8)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate                  8      10.5M              7      4.5M              6      4M              5      3M              4      2M              3      1M              2      115,200              1(Default)      57,600              0      9,600      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time(9)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      Operating Mode(11)            Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque. Speed and Position will not be controlled.              1      Velocity Control Mode      This mode controls Velocity and Torque. Position will not be controlled.              3(Default)      Position Control Mode      This mode controls Position, Velocity and Torque.              4      Extended Position Control Mode      This mode controls Position, Velocity and Torque. Multi-turn is enabled.      Homing Offset(13)Users can adjust the Home position by setting Homing Offset(13). The Homing Offset value is added to the Present Position(611).Present Position(611) = Actual Position + Homing Offset(13).            Value Range                  -2,147,483,648 ~ 2,147,483,647      Moving Threshold(17)If Present Velocity(615) is bigger than this value, Moving(610) is set to ‘1’ and otherwise Moving(610) is cleared to ‘0’. This value determines whether Dynamixel is in motion or not.            Value Range                  0 ~ 2,147,483,647      Temperature Limit(21)This value limits operating temperature. When the Present Temperature(625) that indicates internal temperature of Dynamixel is greater than the Temperature Limit(21), the Over Heating Error Bit(Bit 2) in the Hardware Error Status(892) will be set. If Overheating Error Bit(Bit 2) is configured in the Shutdown(48) when Over Heating Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 1°      0 ~ 100      0 ~ 100°      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage Limit(24, 22)These values are maximum and minimum operating voltages.When current input voltage acquired from Present Input Voltage(623) exceeds the range of Max Voltage Limit(36) and Min Voltage Limit(40), Input Voltage Error Bit(Bit 0) in the Hardware Error Status(892) will be set to ‘1’. If Input Voltage Error Bit(Bit 0) is configured in the Shutdown(48) when Input Voltage Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 0.1V      0 ~ 400      0 ~ 40.0V      Acceleration Limit(26)This value indicates acceleration limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Torque Limit(30)This value indicates torque limit. Goal Torque(604) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 32,767      Velocity Limit(32)This value indicates velocity limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Min/Max Position Limits(40, 36)These values limit maximum and minimum target positions. The Goal Position(596) can’t exceed these values.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet. In Extended Position Control Mode, these limits will be ignored.            Model Name      Value Range                  H54-200-S500-RH54-100-S500-R      -250,961 ~ 250,961              H42-20-S300-R      -151,875 ~ 151,875              M54-60-S250-RM54-40-S250-R      -125,708 ~ 125,708              M42-10-S260-R      -131,593 ~ 131,593              L54-50-S290-R      -103,846 ~ 103,846              L54-50-S500-RL54-30-S500-R      -180,692 ~ 180,692              L54-30-S400-R      -144,197 ~ 144,197      External Port Mode(44 ~ 47)/Data(626 ~ 632)Dynamixel PRO is equipped with multi-purpose expansion ports.            Item      Range                  Voltage      0 ~ 3.3V              Current      0 ~ 5mA        Analog input mode: analog values from an external port get converted to digital. These values are automatically updated in External port data(626 ~ 632).  Output mode: can adjust external port voltage 0V or 3.3V. External port data value of 0 is 0V, 1 for 3.3V.  Pull-up input mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-up. Depending on needs an external strong pull-up is acceptable.  Pull-up output mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-down. Depending on needs an external strong pull-down is acceptable.External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector.            Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3.3V      PORT1      PORT2      PORT3      PORT4      Shutdown(48)The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation. Each Bit is inclusively processed with the ‘OR’ logic, therefore, multiple options can be generated. For instance, when ‘0x05’ (binary : 00000101) is defined as Shutdown(48), Dynamixel can detect both Input Voltage Error(binary : 00000001) and Overheating Error(binary : 00000100). If those errors are detected, Torque Enable(562) is cleared to ‘0’ and the motor output becomes 0[%]. In order to reuse Dynamixel Pro in shutdown status, REBOOT has to be done. The followings are detectable situations.            Bit      Item      Description                  Bit 7      -      -              Bit 6      -      -              Bit 5      Overload Error(default)      Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error(default)      Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error(default)      Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs, use below method to reboot Dynamixels.  H/W REBOOT : Turn off the power and turn on again  S/W REBOOT : Transmit REBOOT Instruction (For more details, please refer to the Protocol section of e-Manual.)Indirect Address, Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses. Sequential addresses increase Instruction Packet efficiency. Addresses that can be defined as Indirect Address is limited to RAM area(Address 562 ~ 892).If specific address is allocated to Indirect Address, Indirect Address inherits features and properties of the Data from the specific Address. Property includes Size(Byte length), value range, and Access property(Read Only, Read/Write). For instance, if address 563(LED Red) is allocated to Indirect Address 1(49), Indirect Data 1(634) will have the exactly same value of LED Red(563).Example 1 Allocating 1 byte LED(563) to Indirect Data 1(634).  Indirect Address 1(49) : change the value to ‘563’ which is the address of LED Red.  Set Indirect Data 1(634) to ‘1’ : LED Red(563) also becomes ‘1’ and Red LED will be turned on.  Set Indirect Data 1(634) to ‘0’ : LED Red(563) also becomes ‘0’ and Red LED will be turned off.Example 2 Allocating Size 4 byte Goal Position(596) to Indirect Data 2(635), 4 sequential bytes have to be allocated.  Indirect Address 2(51) : change the value to ‘596’ which is the first address of Goal Position.  Indirect Address 3(53) : change the value to ‘597’ which is the second address of Goal Position.  Indirect Address 4(55) : change the value to ‘598’ which is the third address of Goal Position.  Indirect Address 5(57) : change the value to ‘599’ which is the fourth address of Goal Position.  Set 4 byte value 305,419,896(0x12345678) to Indirect Data 2 : Goal Position(596) also becomes 305,419,896(0x12345678) as below.            Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2[byte] to Indirect Address, all address must be allocated to Indirect Address like the above Example 2.Note Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.Torque Enable(562)Controls Torque ON/OFF. Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected.            Value      Description                  0(Default)      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      Note Present Position(132) can be reset when Operating Mode(11) and Torque Enable(64) are updated. For more details, please refer to the Homing Offset(20) and Present Position(132).RGB LED(563)Controls the RGB LED on Dynamixel PRO.            Address      Color      Range                  563      Red      0 ~ 255              564      Green      0 ~ 255              565      Blue      0 ~ 255      Velocity PI Gain(588, 586)These values indicate P and I Gains of Velocity Control Mode. The I Gain includes sampling time. Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI.            Gain Value Range                  0 ~ 32,767      Note KPA stands for Anti-windup Gain that cannot be modified by users. For more details about the PID controller, please refer to the PID Controller at wikipedia.Position P Gain(594)This P Gain is used in Position Control Mode. Below figure is a block diagram describing the Position Control Mode. The Position Controller is cascaded with the Velocity Controller. KPP stands for Position P Gain.            Gain Value Range                  0 ~ 32,767      Goal Position(596), Present Position(611)Target position can be set with Goal Position(596). This value can’t be smaller than the Min Position Limit(40) or larger than Max Position Limit(36).            Model      Angle Range      Position Range      Description                  H54-200-S500-RH54-100-S500-R      -180° ~ 180 °      -250,961.5 ~ 250,961.5                    H42-20-S300-R      -180° ~ 180 °      -151,875 ~ 151,875            Goal Velocity(600)Goal Velocity(600) can be used to set a target velocity and this value cannot exceed Velocity Limit (32).In case of Position Control Mode or Extended Position Control Mode, Goal Velocity will be used to limit the velocity.However, if Goal Velocity is set to ‘0’, Velocity Limit(32) will be used to limit the velocity. (Please refer to the block diagram of Position P Gain)The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor.Output RPM = Goal Velocity * Scale Factor            Model      Scale Factor(RPM)                  H54-200-S500-RH54-100-S500-R      0.00199234              H42-20-S300-R      0.00329218              M54-60-S250-RM54-40-S250-R      0.00397746              M42-10-S260-R      0.00389076              L54-50-S290-R      0.00346667              L54-50-S500-RL54-30-S500-R      0.00199234              L54-30-S400-R      0.00249657      Goal Torque(604)Goal torque (604) can be used to set a target torque and this value cannot exceed Torque Limit(30).When the Operating Mode(11) is set other than Torque Control Mode, Goal Torque will be used to limit the torque.However, if Goal Torque is set to ‘0’, Torque Limit(30) will be used to limit the torque. (Please refer to the block diagram of Position Gain or Velocity Gain)The relationship between torque, current, and goal torque is shown below.            Model      Formula                  PRO 54      A = V * 33,000 / 2,048A : Current[mA]V : Present Current/Goal Torque              PRO 42      A = V * 8,250 / 2,048A : Current[mA]V : Present Current/Goal Torque      Goal Acceleration(606)Goal Acceleration(606) can be used to set a target acceleration. This value is used in Velocity Control Mode, Position Control Mode and Extended Position Control Mode. The profile control will be enabled when both Goal Acceleration(606) and Goal Velocity(600) are not ‘0’.Please refer to the Goal Velocity(600) for RPM conversion constant.            Value Range      Unit                  -2,147,483,647 ~ 2,147,483,647      58,000 RPM2 @ Core Motor      Moving(610)This value indicates whether Dynamixel Pro is in motion or not. If absolute value of Present Velocity(615) is greater than Moving Threshold(17), Moving(610) is set to ‘1’. Otherwise, it will be cleared to ‘0’. However, this value will always be set to ‘1’ regardless of Present Velocity(615) while Profile is in progress with Goal Position(596) instruction.            Value      Description                  0      Movement is not detected              1      Movement is detected, or Profile is in progress(Goal Position(596) instruction is being processed)      Present Velocity(615)This value indicates present Velocity. For more details, please refer to the Goal Velocity(600).Present Current(621)This value indicates present Current. For more details, please refer to the Goal Torque(604).Present Input Voltage(623)This value indicates present voltage that is being supplied. For more details, please refer to the Min/Max Voltage Limit(24, 22).Present Temperature (625)This value indicates present internal Temperature. For more details, please refer to the Temperature Limit(21).Registered Instruction(890)            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Status Return Level(891)This value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Hardware Error Status(892)This value indicates hardware error status. For more details, please refer to the Shutdown(48).How to AssembleOption Frame Assembly      FRP54-H110K, FRP54-H120K Set        FRP54-H210K, FRP54-H220K Set  MaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF, DWG, STEP, IGES",
        "url": " http://localhost:4000/docs/en/dxl/pro/l54-30-s400-r/"
      } ,
  
      "docs-en-dxl-pro-l54-30-s500-r":  {
        "title": "L54-30-S500-R",
      "content"	 : "L54-30-S500-RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps ~ 10.5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      591g (20.8oz)              Dimensions (W x H x D)      54mm x 108mm x 54mm (2.13 x 4.25 x 2.13)              Resolution      361,384 steps/rev              Gear Ratio      501.9 : 1              Backlash      5.0arcmin (0.08°)              No Load Speed      23.0rpm              No Load Current      1.1A              Continuous Speed      21.0rpm              Continuous Torque      5.4Nm (764 ozf-in)              Continuous Current      1.6A              Output      30W              Operating Temperature      5°C ~ 55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multidrop BUS              ID      0 ~ 252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different. Stall torque is measured from the max torque that it can reach. This is generally how RC servos measure their torque. For the Performance graph with the N-T curves, it is measured with the load gradually increasing. The motor operation environment is closer to the performance graph, not stall torque method. This is probably why the performance graph is being broadly used in the industrial market. This is why the max torque of the performance grap can actually be less than the stall torque.Caution When connecting to power supply, it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL.Do not connect or disconnect DYNAMIXEL when power is being supplied.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 2.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(64) is cleared to ‘0’.SizeThe Size of data varies from 1 to 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. For data larger than 2 bytes will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      37896              2      4      Model Information      Model Information      R      -              6      1      Firmware Version      Firmware Version      R      -              7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW      -              30      2      Torque Limit      Maximum Torque Limit      RW      -              32      4      Velocity Limit      Maximum Velocity Limit      RW      -              36      4      Max Position Limit      Maximum Position Limit      RW      -              40      4      Min Position Limit      Minimum Position Limit      RW      -              44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On/Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW      -              588      2      Velocity P Gain      P Gain of Velocity      RW      -              594      2      Position P Gain      P Gain of Position      RW      -              596      4      Goal Position      Target Position Value      RW      -              600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R      -              611      4      Present Position      Present Position Value      R      -              615      4      Present Velocity      Present Velocity Value      R      -              621      2      Present Current      Present Current Value      R      -              623      2      Present Input Voltage      Present Input Voltage      R      -              625      1      Present Temperature      Present Internal Temperature      R      -              626      2      External Port Data 1      External Port Data 1      R/RW      0              628      2      External Port Data 2      External Port Data 2      R/RW      0              630      2      External Port Data 3      External Port Data 3      R/RW      0              632      2      External Port Data 4      External Port Data 4      R/RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable(562) is cleared to ‘0’.Model Number(0)This address stores model number of the DYNAMIXEL.            Model Name      Model Number                  L54-30-S500-R      37896 (0x9408)      Firmware Version(6)This address stores firmware version of the DYNAMIXEL.ID(7)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate(8)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate                  8      10.5M              7      4.5M              6      4M              5      3M              4      2M              3      1M              2      115,200              1(Default)      57,600              0      9,600      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time(9)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      Operating Mode(11)            Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque. Speed and Position will not be controlled.              1      Velocity Control Mode      This mode controls Velocity and Torque. Position will not be controlled.              3(Default)      Position Control Mode      This mode controls Position, Velocity and Torque.              4      Extended Position Control Mode      This mode controls Position, Velocity and Torque. Multi-turn is enabled.      Homing Offset(13)Users can adjust the Home position by setting Homing Offset(13). The Homing Offset value is added to the Present Position(611).Present Position(611) = Actual Position + Homing Offset(13).            Value Range                  -2,147,483,648 ~ 2,147,483,647      Moving Threshold(17)If Present Velocity(615) is bigger than this value, Moving(610) is set to ‘1’ and otherwise Moving(610) is cleared to ‘0’. This value determines whether Dynamixel is in motion or not.            Value Range                  0 ~ 2,147,483,647      Temperature Limit(21)This value limits operating temperature. When the Present Temperature(625) that indicates internal temperature of Dynamixel is greater than the Temperature Limit(21), the Over Heating Error Bit(Bit 2) in the Hardware Error Status(892) will be set. If Overheating Error Bit(Bit 2) is configured in the Shutdown(48) when Over Heating Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 1°      0 ~ 100      0 ~ 100°      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage Limit(24, 22)These values are maximum and minimum operating voltages.When current input voltage acquired from Present Input Voltage(623) exceeds the range of Max Voltage Limit(36) and Min Voltage Limit(40), Input Voltage Error Bit(Bit 0) in the Hardware Error Status(892) will be set to ‘1’. If Input Voltage Error Bit(Bit 0) is configured in the Shutdown(48) when Input Voltage Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 0.1V      0 ~ 400      0 ~ 40.0V      Acceleration Limit(26)This value indicates acceleration limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Torque Limit(30)This value indicates torque limit. Goal Torque(604) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 32,767      Velocity Limit(32)This value indicates velocity limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Min/Max Position Limits(40, 36)These values limit maximum and minimum target positions. The Goal Position(596) can’t exceed these values.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet. In Extended Position Control Mode, these limits will be ignored.            Model Name      Value Range                  H54-200-S500-RH54-100-S500-R      -250,961 ~ 250,961              H42-20-S300-R      -151,875 ~ 151,875              M54-60-S250-RM54-40-S250-R      -125,708 ~ 125,708              M42-10-S260-R      -131,593 ~ 131,593              L54-50-S290-R      -103,846 ~ 103,846              L54-50-S500-RL54-30-S500-R      -180,692 ~ 180,692              L54-30-S400-R      -144,197 ~ 144,197      External Port Mode(44 ~ 47)/Data(626 ~ 632)Dynamixel PRO is equipped with multi-purpose expansion ports.            Item      Range                  Voltage      0 ~ 3.3V              Current      0 ~ 5mA        Analog input mode: analog values from an external port get converted to digital. These values are automatically updated in External port data(626 ~ 632).  Output mode: can adjust external port voltage 0V or 3.3V. External port data value of 0 is 0V, 1 for 3.3V.  Pull-up input mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-up. Depending on needs an external strong pull-up is acceptable.  Pull-up output mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-down. Depending on needs an external strong pull-down is acceptable.External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector.            Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3.3V      PORT1      PORT2      PORT3      PORT4      Shutdown(48)The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation. Each Bit is inclusively processed with the ‘OR’ logic, therefore, multiple options can be generated. For instance, when ‘0x05’ (binary : 00000101) is defined as Shutdown(48), Dynamixel can detect both Input Voltage Error(binary : 00000001) and Overheating Error(binary : 00000100). If those errors are detected, Torque Enable(562) is cleared to ‘0’ and the motor output becomes 0[%]. In order to reuse Dynamixel Pro in shutdown status, REBOOT has to be done. The followings are detectable situations.            Bit      Item      Description                  Bit 7      -      -              Bit 6      -      -              Bit 5      Overload Error(default)      Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error(default)      Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error(default)      Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs, use below method to reboot Dynamixels.  H/W REBOOT : Turn off the power and turn on again  S/W REBOOT : Transmit REBOOT Instruction (For more details, please refer to the Protocol section of e-Manual.)Indirect Address, Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses. Sequential addresses increase Instruction Packet efficiency. Addresses that can be defined as Indirect Address is limited to RAM area(Address 562 ~ 892).If specific address is allocated to Indirect Address, Indirect Address inherits features and properties of the Data from the specific Address. Property includes Size(Byte length), value range, and Access property(Read Only, Read/Write). For instance, if address 563(LED Red) is allocated to Indirect Address 1(49), Indirect Data 1(634) will have the exactly same value of LED Red(563).Example 1 Allocating 1 byte LED(563) to Indirect Data 1(634).  Indirect Address 1(49) : change the value to ‘563’ which is the address of LED Red.  Set Indirect Data 1(634) to ‘1’ : LED Red(563) also becomes ‘1’ and Red LED will be turned on.  Set Indirect Data 1(634) to ‘0’ : LED Red(563) also becomes ‘0’ and Red LED will be turned off.Example 2 Allocating Size 4 byte Goal Position(596) to Indirect Data 2(635), 4 sequential bytes have to be allocated.  Indirect Address 2(51) : change the value to ‘596’ which is the first address of Goal Position.  Indirect Address 3(53) : change the value to ‘597’ which is the second address of Goal Position.  Indirect Address 4(55) : change the value to ‘598’ which is the third address of Goal Position.  Indirect Address 5(57) : change the value to ‘599’ which is the fourth address of Goal Position.  Set 4 byte value 305,419,896(0x12345678) to Indirect Data 2 : Goal Position(596) also becomes 305,419,896(0x12345678) as below.            Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2[byte] to Indirect Address, all address must be allocated to Indirect Address like the above Example 2.Note Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.Torque Enable(562)Controls Torque ON/OFF. Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected.            Value      Description                  0(Default)      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      Note Present Position(132) can be reset when Operating Mode(11) and Torque Enable(64) are updated. For more details, please refer to the Homing Offset(20) and Present Position(132).RGB LED(563)Controls the RGB LED on Dynamixel PRO.            Address      Color      Range                  563      Red      0 ~ 255              564      Green      0 ~ 255              565      Blue      0 ~ 255      Velocity PI Gain(588, 586)These values indicate P and I Gains of Velocity Control Mode. The I Gain includes sampling time. Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI.            Gain Value Range                  0 ~ 32,767      Note KPA stands for Anti-windup Gain that cannot be modified by users. For more details about the PID controller, please refer to the PID Controller at wikipedia.Position P Gain(594)This P Gain is used in Position Control Mode. Below figure is a block diagram describing the Position Control Mode. The Position Controller is cascaded with the Velocity Controller. KPP stands for Position P Gain.            Gain Value Range                  0 ~ 32,767      Goal Position(596), Present Position(611)Target position can be set with Goal Position(596). This value can’t be smaller than the Min Position Limit(40) or larger than Max Position Limit(36).            Model      Angle Range      Position Range      Description                  H54-200-S500-RH54-100-S500-R      -180° ~ 180 °      -250,961.5 ~ 250,961.5                    H42-20-S300-R      -180° ~ 180 °      -151,875 ~ 151,875            Goal Velocity(600)Goal Velocity(600) can be used to set a target velocity and this value cannot exceed Velocity Limit (32).In case of Position Control Mode or Extended Position Control Mode, Goal Velocity will be used to limit the velocity.However, if Goal Velocity is set to ‘0’, Velocity Limit(32) will be used to limit the velocity. (Please refer to the block diagram of Position P Gain)The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor.Output RPM = Goal Velocity * Scale Factor            Model      Scale Factor(RPM)                  H54-200-S500-RH54-100-S500-R      0.00199234              H42-20-S300-R      0.00329218              M54-60-S250-RM54-40-S250-R      0.00397746              M42-10-S260-R      0.00389076              L54-50-S290-R      0.00346667              L54-50-S500-RL54-30-S500-R      0.00199234              L54-30-S400-R      0.00249657      Goal Torque(604)Goal torque (604) can be used to set a target torque and this value cannot exceed Torque Limit(30).When the Operating Mode(11) is set other than Torque Control Mode, Goal Torque will be used to limit the torque.However, if Goal Torque is set to ‘0’, Torque Limit(30) will be used to limit the torque. (Please refer to the block diagram of Position Gain or Velocity Gain)The relationship between torque, current, and goal torque is shown below.            Model      Formula                  PRO 54      A = V * 33,000 / 2,048A : Current[mA]V : Present Current/Goal Torque              PRO 42      A = V * 8,250 / 2,048A : Current[mA]V : Present Current/Goal Torque      Goal Acceleration(606)Goal Acceleration(606) can be used to set a target acceleration. This value is used in Velocity Control Mode, Position Control Mode and Extended Position Control Mode. The profile control will be enabled when both Goal Acceleration(606) and Goal Velocity(600) are not ‘0’.Please refer to the Goal Velocity(600) for RPM conversion constant.            Value Range      Unit                  -2,147,483,647 ~ 2,147,483,647      58,000 RPM2 @ Core Motor      Moving(610)This value indicates whether Dynamixel Pro is in motion or not. If absolute value of Present Velocity(615) is greater than Moving Threshold(17), Moving(610) is set to ‘1’. Otherwise, it will be cleared to ‘0’. However, this value will always be set to ‘1’ regardless of Present Velocity(615) while Profile is in progress with Goal Position(596) instruction.            Value      Description                  0      Movement is not detected              1      Movement is detected, or Profile is in progress(Goal Position(596) instruction is being processed)      Present Velocity(615)This value indicates present Velocity. For more details, please refer to the Goal Velocity(600).Present Current(621)This value indicates present Current. For more details, please refer to the Goal Torque(604).Present Input Voltage(623)This value indicates present voltage that is being supplied. For more details, please refer to the Min/Max Voltage Limit(24, 22).Present Temperature (625)This value indicates present internal Temperature. For more details, please refer to the Temperature Limit(21).Registered Instruction(890)            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Status Return Level(891)This value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Hardware Error Status(892)This value indicates hardware error status. For more details, please refer to the Shutdown(48).How to AssembleOption Frame Assembly      FRP54-H110K, FRP54-H120K Set        FRP54-H210K, FRP54-H220K Set  MaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF, DWG, STEP, IGES",
        "url": " http://localhost:4000/docs/en/dxl/pro/l54-30-s500-r/"
      } ,
  
      "docs-en-dxl-pro-l54-50-s290-r":  {
        "title": "L54-50-S290-R",
      "content"	 : "L54-50-S290-RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps ~ 10.5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      656g (23.1oz)              Dimensions (W x H x D)      54mm x 108mm x 54mm (2.13 x 4.25 x 2.13)              Resolution      207,692 steps/rev              Gear Ratio      288.5 : 1              Backlash      4.6arcmin (0.08°)              No Load Speed      26.0rpm              No Load Current      1.05A              Continuous Speed      22.1rpm              Continuous Torque      4.8Nm (680 ozf-in)              Continuous Current      1.9A              Output      50W              Operating Temperature      5°C ~ 55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multidrop BUS              ID      0 ~ 252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different. Stall torque is measured from the max torque that it can reach. This is generally how RC servos measure their torque. For the Performance graph with the N-T curves, it is measured with the load gradually increasing. The motor operation environment is closer to the performance graph, not stall torque method. This is probably why the performance graph is being broadly used in the industrial market. This is why the max torque of the performance grap can actually be less than the stall torque.Caution When connecting to power supply, it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL.Do not connect or disconnect DYNAMIXEL when power is being supplied.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 2.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(64) is cleared to ‘0’.SizeThe Size of data varies from 1 to 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. For data larger than 2 bytes will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      38176              2      4      Model Information      Model Information      R      -              6      1      Firmware Version      Firmware Version      R      -              7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW      -              30      2      Torque Limit      Maximum Torque Limit      RW      -              32      4      Velocity Limit      Maximum Velocity Limit      RW      -              36      4      Max Position Limit      Maximum Position Limit      RW      -              40      4      Min Position Limit      Minimum Position Limit      RW      -              44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On/Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW      -              588      2      Velocity P Gain      P Gain of Velocity      RW      -              594      2      Position P Gain      P Gain of Position      RW      -              596      4      Goal Position      Target Position Value      RW      -              600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R      -              611      4      Present Position      Present Position Value      R      -              615      4      Present Velocity      Present Velocity Value      R      -              621      2      Present Current      Present Current Value      R      -              623      2      Present Input Voltage      Present Input Voltage      R      -              625      1      Present Temperature      Present Internal Temperature      R      -              626      2      External Port Data 1      External Port Data 1      R/RW      0              628      2      External Port Data 2      External Port Data 2      R/RW      0              630      2      External Port Data 3      External Port Data 3      R/RW      0              632      2      External Port Data 4      External Port Data 4      R/RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable(562) is cleared to ‘0’.Model Number(0)This address stores model number of the DYNAMIXEL.            Model Name      Model Number                  L54-50-S290-R      38176 (0x9520)      Firmware Version(6)This address stores firmware version of the DYNAMIXEL.ID(7)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate(8)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate                  8      10.5M              7      4.5M              6      4M              5      3M              4      2M              3      1M              2      115,200              1(Default)      57,600              0      9,600      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time(9)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      Operating Mode(11)            Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque. Speed and Position will not be controlled.              1      Velocity Control Mode      This mode controls Velocity and Torque. Position will not be controlled.              3(Default)      Position Control Mode      This mode controls Position, Velocity and Torque.              4      Extended Position Control Mode      This mode controls Position, Velocity and Torque. Multi-turn is enabled.      Homing Offset(13)Users can adjust the Home position by setting Homing Offset(13). The Homing Offset value is added to the Present Position(611).Present Position(611) = Actual Position + Homing Offset(13).            Value Range                  -2,147,483,648 ~ 2,147,483,647      Moving Threshold(17)If Present Velocity(615) is bigger than this value, Moving(610) is set to ‘1’ and otherwise Moving(610) is cleared to ‘0’. This value determines whether Dynamixel is in motion or not.            Value Range                  0 ~ 2,147,483,647      Temperature Limit(21)This value limits operating temperature. When the Present Temperature(625) that indicates internal temperature of Dynamixel is greater than the Temperature Limit(21), the Over Heating Error Bit(Bit 2) in the Hardware Error Status(892) will be set. If Overheating Error Bit(Bit 2) is configured in the Shutdown(48) when Over Heating Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 1°      0 ~ 100      0 ~ 100°      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage Limit(24, 22)These values are maximum and minimum operating voltages.When current input voltage acquired from Present Input Voltage(623) exceeds the range of Max Voltage Limit(36) and Min Voltage Limit(40), Input Voltage Error Bit(Bit 0) in the Hardware Error Status(892) will be set to ‘1’. If Input Voltage Error Bit(Bit 0) is configured in the Shutdown(48) when Input Voltage Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 0.1V      0 ~ 400      0 ~ 40.0V      Acceleration Limit(26)This value indicates acceleration limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Torque Limit(30)This value indicates torque limit. Goal Torque(604) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 32,767      Velocity Limit(32)This value indicates velocity limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Min/Max Position Limits(40, 36)These values limit maximum and minimum target positions. The Goal Position(596) can’t exceed these values.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet. In Extended Position Control Mode, these limits will be ignored.            Model Name      Value Range                  H54-200-S500-RH54-100-S500-R      -250,961 ~ 250,961              H42-20-S300-R      -151,875 ~ 151,875              M54-60-S250-RM54-40-S250-R      -125,708 ~ 125,708              M42-10-S260-R      -131,593 ~ 131,593              L54-50-S290-R      -103,846 ~ 103,846              L54-50-S500-RL54-30-S500-R      -180,692 ~ 180,692              L54-30-S400-R      -144,197 ~ 144,197      External Port Mode(44 ~ 47)/Data(626 ~ 632)Dynamixel PRO is equipped with multi-purpose expansion ports.            Item      Range                  Voltage      0 ~ 3.3V              Current      0 ~ 5mA        Analog input mode: analog values from an external port get converted to digital. These values are automatically updated in External port data(626 ~ 632).  Output mode: can adjust external port voltage 0V or 3.3V. External port data value of 0 is 0V, 1 for 3.3V.  Pull-up input mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-up. Depending on needs an external strong pull-up is acceptable.  Pull-up output mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-down. Depending on needs an external strong pull-down is acceptable.External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector.            Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3.3V      PORT1      PORT2      PORT3      PORT4      Shutdown(48)The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation. Each Bit is inclusively processed with the ‘OR’ logic, therefore, multiple options can be generated. For instance, when ‘0x05’ (binary : 00000101) is defined as Shutdown(48), Dynamixel can detect both Input Voltage Error(binary : 00000001) and Overheating Error(binary : 00000100). If those errors are detected, Torque Enable(562) is cleared to ‘0’ and the motor output becomes 0[%]. In order to reuse Dynamixel Pro in shutdown status, REBOOT has to be done. The followings are detectable situations.            Bit      Item      Description                  Bit 7      -      -              Bit 6      -      -              Bit 5      Overload Error(default)      Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error(default)      Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error(default)      Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs, use below method to reboot Dynamixels.  H/W REBOOT : Turn off the power and turn on again  S/W REBOOT : Transmit REBOOT Instruction (For more details, please refer to the Protocol section of e-Manual.)Indirect Address, Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses. Sequential addresses increase Instruction Packet efficiency. Addresses that can be defined as Indirect Address is limited to RAM area(Address 562 ~ 892).If specific address is allocated to Indirect Address, Indirect Address inherits features and properties of the Data from the specific Address. Property includes Size(Byte length), value range, and Access property(Read Only, Read/Write). For instance, if address 563(LED Red) is allocated to Indirect Address 1(49), Indirect Data 1(634) will have the exactly same value of LED Red(563).Example 1 Allocating 1 byte LED(563) to Indirect Data 1(634).  Indirect Address 1(49) : change the value to ‘563’ which is the address of LED Red.  Set Indirect Data 1(634) to ‘1’ : LED Red(563) also becomes ‘1’ and Red LED will be turned on.  Set Indirect Data 1(634) to ‘0’ : LED Red(563) also becomes ‘0’ and Red LED will be turned off.Example 2 Allocating Size 4 byte Goal Position(596) to Indirect Data 2(635), 4 sequential bytes have to be allocated.  Indirect Address 2(51) : change the value to ‘596’ which is the first address of Goal Position.  Indirect Address 3(53) : change the value to ‘597’ which is the second address of Goal Position.  Indirect Address 4(55) : change the value to ‘598’ which is the third address of Goal Position.  Indirect Address 5(57) : change the value to ‘599’ which is the fourth address of Goal Position.  Set 4 byte value 305,419,896(0x12345678) to Indirect Data 2 : Goal Position(596) also becomes 305,419,896(0x12345678) as below.            Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2[byte] to Indirect Address, all address must be allocated to Indirect Address like the above Example 2.Note Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.Torque Enable(562)Controls Torque ON/OFF. Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected.            Value      Description                  0(Default)      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      Note Present Position(132) can be reset when Operating Mode(11) and Torque Enable(64) are updated. For more details, please refer to the Homing Offset(20) and Present Position(132).RGB LED(563)Controls the RGB LED on Dynamixel PRO.            Address      Color      Range                  563      Red      0 ~ 255              564      Green      0 ~ 255              565      Blue      0 ~ 255      Velocity PI Gain(588, 586)These values indicate P and I Gains of Velocity Control Mode. The I Gain includes sampling time. Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI.            Gain Value Range                  0 ~ 32,767      Note KPA stands for Anti-windup Gain that cannot be modified by users. For more details about the PID controller, please refer to the PID Controller at wikipedia.Position P Gain(594)This P Gain is used in Position Control Mode. Below figure is a block diagram describing the Position Control Mode. The Position Controller is cascaded with the Velocity Controller. KPP stands for Position P Gain.            Gain Value Range                  0 ~ 32,767      Goal Position(596), Present Position(611)Target position can be set with Goal Position(596). This value can’t be smaller than the Min Position Limit(40) or larger than Max Position Limit(36).            Model      Angle Range      Position Range      Description                  H54-200-S500-RH54-100-S500-R      -180° ~ 180 °      -250,961.5 ~ 250,961.5                    H42-20-S300-R      -180° ~ 180 °      -151,875 ~ 151,875            Goal Velocity(600)Goal Velocity(600) can be used to set a target velocity and this value cannot exceed Velocity Limit (32).In case of Position Control Mode or Extended Position Control Mode, Goal Velocity will be used to limit the velocity.However, if Goal Velocity is set to ‘0’, Velocity Limit(32) will be used to limit the velocity. (Please refer to the block diagram of Position P Gain)The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor.Output RPM = Goal Velocity * Scale Factor            Model      Scale Factor(RPM)                  H54-200-S500-RH54-100-S500-R      0.00199234              H42-20-S300-R      0.00329218              M54-60-S250-RM54-40-S250-R      0.00397746              M42-10-S260-R      0.00389076              L54-50-S290-R      0.00346667              L54-50-S500-RL54-30-S500-R      0.00199234              L54-30-S400-R      0.00249657      Goal Torque(604)Goal torque (604) can be used to set a target torque and this value cannot exceed Torque Limit(30).When the Operating Mode(11) is set other than Torque Control Mode, Goal Torque will be used to limit the torque.However, if Goal Torque is set to ‘0’, Torque Limit(30) will be used to limit the torque. (Please refer to the block diagram of Position Gain or Velocity Gain)The relationship between torque, current, and goal torque is shown below.            Model      Formula                  PRO 54      A = V * 33,000 / 2,048A : Current[mA]V : Present Current/Goal Torque              PRO 42      A = V * 8,250 / 2,048A : Current[mA]V : Present Current/Goal Torque      Goal Acceleration(606)Goal Acceleration(606) can be used to set a target acceleration. This value is used in Velocity Control Mode, Position Control Mode and Extended Position Control Mode. The profile control will be enabled when both Goal Acceleration(606) and Goal Velocity(600) are not ‘0’.Please refer to the Goal Velocity(600) for RPM conversion constant.            Value Range      Unit                  -2,147,483,647 ~ 2,147,483,647      58,000 RPM2 @ Core Motor      Moving(610)This value indicates whether Dynamixel Pro is in motion or not. If absolute value of Present Velocity(615) is greater than Moving Threshold(17), Moving(610) is set to ‘1’. Otherwise, it will be cleared to ‘0’. However, this value will always be set to ‘1’ regardless of Present Velocity(615) while Profile is in progress with Goal Position(596) instruction.            Value      Description                  0      Movement is not detected              1      Movement is detected, or Profile is in progress(Goal Position(596) instruction is being processed)      Present Velocity(615)This value indicates present Velocity. For more details, please refer to the Goal Velocity(600).Present Current(621)This value indicates present Current. For more details, please refer to the Goal Torque(604).Present Input Voltage(623)This value indicates present voltage that is being supplied. For more details, please refer to the Min/Max Voltage Limit(24, 22).Present Temperature (625)This value indicates present internal Temperature. For more details, please refer to the Temperature Limit(21).Registered Instruction(890)            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Status Return Level(891)This value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Hardware Error Status(892)This value indicates hardware error status. For more details, please refer to the Shutdown(48).How to AssembleOption Frame Assembly      FRP54-H110K, FRP54-H120K Set        FRP54-H210K, FRP54-H220K Set  MaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF, DWG, STEP, IGES",
        "url": " http://localhost:4000/docs/en/dxl/pro/l54-50-s290-r/"
      } ,
  
      "docs-en-dxl-pro-l54-50-s500-r":  {
        "title": "L54-50-S500-R",
      "content"	 : "L54-50-S500-RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps ~ 10.5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      656g (23.1oz)              Dimensions (W x H x D)      54mm x 108mm x 54mm (2.13 x 4.25 x 2.13)              Resolution      361,384 steps/rev              Gear Ratio      501.9 : 1              Backlash      5.0arcmin (0.08°)              No Load Speed      16.0rpm              No Load Current      0.7A              Continuous Speed      13.7rpm              Continuous Torque      14.0Nm (1,982 ozf-in)              Continuous Current      1.9A              Output      100W              Operating Temperature      5°C ~ 55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multidrop BUS              ID      0 ~ 252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different. Stall torque is measured from the max torque that it can reach. This is generally how RC servos measure their torque. For the Performance graph with the N-T curves, it is measured with the load gradually increasing. The motor operation environment is closer to the performance graph, not stall torque method. This is probably why the performance graph is being broadly used in the industrial market. This is why the max torque of the performance grap can actually be less than the stall torque.Caution When connecting to power supply, it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL.Do not connect or disconnect DYNAMIXEL when power is being supplied.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 2.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(64) is cleared to ‘0’.SizeThe Size of data varies from 1 to 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. For data larger than 2 bytes will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      38152              2      4      Model Information      Model Information      R      -              6      1      Firmware Version      Firmware Version      R      -              7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW      -              30      2      Torque Limit      Maximum Torque Limit      RW      -              32      4      Velocity Limit      Maximum Velocity Limit      RW      -              36      4      Max Position Limit      Maximum Position Limit      RW      -              40      4      Min Position Limit      Minimum Position Limit      RW      -              44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On/Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW      -              588      2      Velocity P Gain      P Gain of Velocity      RW      -              594      2      Position P Gain      P Gain of Position      RW      -              596      4      Goal Position      Target Position Value      RW      -              600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R      -              611      4      Present Position      Present Position Value      R      -              615      4      Present Velocity      Present Velocity Value      R      -              621      2      Present Current      Present Current Value      R      -              623      2      Present Input Voltage      Present Input Voltage      R      -              625      1      Present Temperature      Present Internal Temperature      R      -              626      2      External Port Data 1      External Port Data 1      R/RW      0              628      2      External Port Data 2      External Port Data 2      R/RW      0              630      2      External Port Data 3      External Port Data 3      R/RW      0              632      2      External Port Data 4      External Port Data 4      R/RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable(562) is cleared to ‘0’.Model Number(0)This address stores model number of the DYNAMIXEL.            Model Name      Model Number                  L54-50-S500-R      38152 (0x9508)      Firmware Version(6)This address stores firmware version of the DYNAMIXEL.ID(7)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate(8)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate                  8      10.5M              7      4.5M              6      4M              5      3M              4      2M              3      1M              2      115,200              1(Default)      57,600              0      9,600      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time(9)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      Operating Mode(11)            Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque. Speed and Position will not be controlled.              1      Velocity Control Mode      This mode controls Velocity and Torque. Position will not be controlled.              3(Default)      Position Control Mode      This mode controls Position, Velocity and Torque.              4      Extended Position Control Mode      This mode controls Position, Velocity and Torque. Multi-turn is enabled.      Homing Offset(13)Users can adjust the Home position by setting Homing Offset(13). The Homing Offset value is added to the Present Position(611).Present Position(611) = Actual Position + Homing Offset(13).            Value Range                  -2,147,483,648 ~ 2,147,483,647      Moving Threshold(17)If Present Velocity(615) is bigger than this value, Moving(610) is set to ‘1’ and otherwise Moving(610) is cleared to ‘0’. This value determines whether Dynamixel is in motion or not.            Value Range                  0 ~ 2,147,483,647      Temperature Limit(21)This value limits operating temperature. When the Present Temperature(625) that indicates internal temperature of Dynamixel is greater than the Temperature Limit(21), the Over Heating Error Bit(Bit 2) in the Hardware Error Status(892) will be set. If Overheating Error Bit(Bit 2) is configured in the Shutdown(48) when Over Heating Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 1°      0 ~ 100      0 ~ 100°      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage Limit(24, 22)These values are maximum and minimum operating voltages.When current input voltage acquired from Present Input Voltage(623) exceeds the range of Max Voltage Limit(36) and Min Voltage Limit(40), Input Voltage Error Bit(Bit 0) in the Hardware Error Status(892) will be set to ‘1’. If Input Voltage Error Bit(Bit 0) is configured in the Shutdown(48) when Input Voltage Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 0.1V      0 ~ 400      0 ~ 40.0V      Acceleration Limit(26)This value indicates acceleration limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Torque Limit(30)This value indicates torque limit. Goal Torque(604) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 32,767      Velocity Limit(32)This value indicates velocity limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Min/Max Position Limits(40, 36)These values limit maximum and minimum target positions. The Goal Position(596) can’t exceed these values.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet. In Extended Position Control Mode, these limits will be ignored.            Model Name      Value Range                  H54-200-S500-RH54-100-S500-R      -250,961 ~ 250,961              H42-20-S300-R      -151,875 ~ 151,875              M54-60-S250-RM54-40-S250-R      -125,708 ~ 125,708              M42-10-S260-R      -131,593 ~ 131,593              L54-50-S290-R      -103,846 ~ 103,846              L54-50-S500-RL54-30-S500-R      -180,692 ~ 180,692              L54-30-S400-R      -144,197 ~ 144,197      External Port Mode(44 ~ 47)/Data(626 ~ 632)Dynamixel PRO is equipped with multi-purpose expansion ports.            Item      Range                  Voltage      0 ~ 3.3V              Current      0 ~ 5mA        Analog input mode: analog values from an external port get converted to digital. These values are automatically updated in External port data(626 ~ 632).  Output mode: can adjust external port voltage 0V or 3.3V. External port data value of 0 is 0V, 1 for 3.3V.  Pull-up input mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-up. Depending on needs an external strong pull-up is acceptable.  Pull-up output mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-down. Depending on needs an external strong pull-down is acceptable.External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector.            Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3.3V      PORT1      PORT2      PORT3      PORT4      Shutdown(48)The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation. Each Bit is inclusively processed with the ‘OR’ logic, therefore, multiple options can be generated. For instance, when ‘0x05’ (binary : 00000101) is defined as Shutdown(48), Dynamixel can detect both Input Voltage Error(binary : 00000001) and Overheating Error(binary : 00000100). If those errors are detected, Torque Enable(562) is cleared to ‘0’ and the motor output becomes 0[%]. In order to reuse Dynamixel Pro in shutdown status, REBOOT has to be done. The followings are detectable situations.            Bit      Item      Description                  Bit 7      -      -              Bit 6      -      -              Bit 5      Overload Error(default)      Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error(default)      Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error(default)      Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs, use below method to reboot Dynamixels.  H/W REBOOT : Turn off the power and turn on again  S/W REBOOT : Transmit REBOOT Instruction (For more details, please refer to the Protocol section of e-Manual.)Indirect Address, Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses. Sequential addresses increase Instruction Packet efficiency. Addresses that can be defined as Indirect Address is limited to RAM area(Address 562 ~ 892).If specific address is allocated to Indirect Address, Indirect Address inherits features and properties of the Data from the specific Address. Property includes Size(Byte length), value range, and Access property(Read Only, Read/Write). For instance, if address 563(LED Red) is allocated to Indirect Address 1(49), Indirect Data 1(634) will have the exactly same value of LED Red(563).Example 1 Allocating 1 byte LED(563) to Indirect Data 1(634).  Indirect Address 1(49) : change the value to ‘563’ which is the address of LED Red.  Set Indirect Data 1(634) to ‘1’ : LED Red(563) also becomes ‘1’ and Red LED will be turned on.  Set Indirect Data 1(634) to ‘0’ : LED Red(563) also becomes ‘0’ and Red LED will be turned off.Example 2 Allocating Size 4 byte Goal Position(596) to Indirect Data 2(635), 4 sequential bytes have to be allocated.  Indirect Address 2(51) : change the value to ‘596’ which is the first address of Goal Position.  Indirect Address 3(53) : change the value to ‘597’ which is the second address of Goal Position.  Indirect Address 4(55) : change the value to ‘598’ which is the third address of Goal Position.  Indirect Address 5(57) : change the value to ‘599’ which is the fourth address of Goal Position.  Set 4 byte value 305,419,896(0x12345678) to Indirect Data 2 : Goal Position(596) also becomes 305,419,896(0x12345678) as below.            Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2[byte] to Indirect Address, all address must be allocated to Indirect Address like the above Example 2.Note Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.Torque Enable(562)Controls Torque ON/OFF. Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected.            Value      Description                  0(Default)      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      Note Present Position(132) can be reset when Operating Mode(11) and Torque Enable(64) are updated. For more details, please refer to the Homing Offset(20) and Present Position(132).RGB LED(563)Controls the RGB LED on Dynamixel PRO.            Address      Color      Range                  563      Red      0 ~ 255              564      Green      0 ~ 255              565      Blue      0 ~ 255      Velocity PI Gain(588, 586)These values indicate P and I Gains of Velocity Control Mode. The I Gain includes sampling time. Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI.            Gain Value Range                  0 ~ 32,767      Note KPA stands for Anti-windup Gain that cannot be modified by users. For more details about the PID controller, please refer to the PID Controller at wikipedia.Position P Gain(594)This P Gain is used in Position Control Mode. Below figure is a block diagram describing the Position Control Mode. The Position Controller is cascaded with the Velocity Controller. KPP stands for Position P Gain.            Gain Value Range                  0 ~ 32,767      Goal Position(596), Present Position(611)Target position can be set with Goal Position(596). This value can’t be smaller than the Min Position Limit(40) or larger than Max Position Limit(36).            Model      Angle Range      Position Range      Description                  H54-200-S500-RH54-100-S500-R      -180° ~ 180 °      -250,961.5 ~ 250,961.5                    H42-20-S300-R      -180° ~ 180 °      -151,875 ~ 151,875            Goal Velocity(600)Goal Velocity(600) can be used to set a target velocity and this value cannot exceed Velocity Limit (32).In case of Position Control Mode or Extended Position Control Mode, Goal Velocity will be used to limit the velocity.However, if Goal Velocity is set to ‘0’, Velocity Limit(32) will be used to limit the velocity. (Please refer to the block diagram of Position P Gain)The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor.Output RPM = Goal Velocity * Scale Factor            Model      Scale Factor(RPM)                  H54-200-S500-RH54-100-S500-R      0.00199234              H42-20-S300-R      0.00329218              M54-60-S250-RM54-40-S250-R      0.00397746              M42-10-S260-R      0.00389076              L54-50-S290-R      0.00346667              L54-50-S500-RL54-30-S500-R      0.00199234              L54-30-S400-R      0.00249657      Goal Torque(604)Goal torque (604) can be used to set a target torque and this value cannot exceed Torque Limit(30).When the Operating Mode(11) is set other than Torque Control Mode, Goal Torque will be used to limit the torque.However, if Goal Torque is set to ‘0’, Torque Limit(30) will be used to limit the torque. (Please refer to the block diagram of Position Gain or Velocity Gain)The relationship between torque, current, and goal torque is shown below.            Model      Formula                  PRO 54      A = V * 33,000 / 2,048A : Current[mA]V : Present Current/Goal Torque              PRO 42      A = V * 8,250 / 2,048A : Current[mA]V : Present Current/Goal Torque      Goal Acceleration(606)Goal Acceleration(606) can be used to set a target acceleration. This value is used in Velocity Control Mode, Position Control Mode and Extended Position Control Mode. The profile control will be enabled when both Goal Acceleration(606) and Goal Velocity(600) are not ‘0’.Please refer to the Goal Velocity(600) for RPM conversion constant.            Value Range      Unit                  -2,147,483,647 ~ 2,147,483,647      58,000 RPM2 @ Core Motor      Moving(610)This value indicates whether Dynamixel Pro is in motion or not. If absolute value of Present Velocity(615) is greater than Moving Threshold(17), Moving(610) is set to ‘1’. Otherwise, it will be cleared to ‘0’. However, this value will always be set to ‘1’ regardless of Present Velocity(615) while Profile is in progress with Goal Position(596) instruction.            Value      Description                  0      Movement is not detected              1      Movement is detected, or Profile is in progress(Goal Position(596) instruction is being processed)      Present Velocity(615)This value indicates present Velocity. For more details, please refer to the Goal Velocity(600).Present Current(621)This value indicates present Current. For more details, please refer to the Goal Torque(604).Present Input Voltage(623)This value indicates present voltage that is being supplied. For more details, please refer to the Min/Max Voltage Limit(24, 22).Present Temperature (625)This value indicates present internal Temperature. For more details, please refer to the Temperature Limit(21).Registered Instruction(890)            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Status Return Level(891)This value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Hardware Error Status(892)This value indicates hardware error status. For more details, please refer to the Shutdown(48).How to AssembleOption Frame Assembly      FRP54-H110K, FRP54-H120K Set        FRP54-H210K, FRP54-H220K Set  MaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF, DWG, STEP, IGES",
        "url": " http://localhost:4000/docs/en/dxl/pro/l54-50-s500-r/"
      } ,
  
      "docs-en-parts-motor-l-speed-geared-motor":  {
        "title": "",
      "content"	 : "Low Speed Geared MotorIntroductionThis motor is used in ROBOTIS DREAM LEVEL 1Compatibility Guide Controller CompatibilitySpecifications  Weight : 15g  Dimensions : 18mm x 36mm x 24mm  Gear Ratio : 70:1  Speed : 150RPM @ 3.7V  Output on both Axles  Safety Clutch installedPinout  MOT-  MOT+Caution Cables can may be damaged when not properly connected (i.e. wrong orientation), or use of excessive force during connection.Tutorials  RoboPlus Task : Please refer to Geared Motor section in the Roboplus Task.Videos",
        "url": " http://localhost:4000/docs/en/parts/motor/l_speed_geared_motor/"
      } ,
  
      "docs-en-parts-display-lm-10":  {
        "title": "LED Module(LM-10)",
      "content"	 : "LM-10IntroductionThe module makes light with LED. There are two types of LED: Orange and Blue.  ON/OFF of each LED can be controlled separately through port control.  Weight : 4g  Dimensions : 24mm x 18mm x 12mmCompatibility Guide Controller CompatibilityPinout  OUT2 : The second LED can be turned on when High signal is applied.  GND  NCC : Not used  VCC  OUT1 : The first LED can be turned on when High signal is applied.Caution Cables can may be damaged when not properly connected (i.e. wrong orientation), or use of excessive force during connection.Tutorials  RoboPlus Task : Please refer to LED Module section in the RoboPlus Task.Videos",
        "url": " http://localhost:4000/docs/en/parts/display/lm-10/"
      } ,
  
      "docs-en-parts-interface-ln-101":  {
        "title": "USB Downloader(LN-101)",
      "content"	 : "USB Downloader(LN-101)IntroductionHow to UseUSB Downloader is used to connect the USB port of PC and the 4-pin port of the controller through serial communication.Serial Communication  Download Task Code written in PC using the controller  Print out the result of task code execution on the screen of PC  Virtual robot control of RoboPlusAvailable Controller  CM-100  CM-150  CM-200  CM-700  OpenCM9.04Note Difference in voltage may cause unstable LN-101 connections. Ensure that both connecting equipment and PC are properly grounded.Check DriverHow to check whether the USB downloader(LN-101) driver is installed correctly.      Connect USB Downloader (LN-101) to the USB Port of PC.            Select Manage in the popped-up menu shown by right-clicking My Computer.            Check USB Serial Converter in Universal Serial Bus Controllers of Device Manager.            Check USB Serial Port(COMx) in the list of Ports(COM &amp;amp; LPT). COM Port number may vary depending on each system.      Install Driver ManuallyIf you installed RoboPlus, FTDI Driver (USB2Dynamixel, USB Downloader (LN-101) driver) is installed together automatically. If you didn’t install the RoboPlus yet, or if the driver is not installed appropriately, please install it manually according to following procedures.      Connect a device to PC. If the driver is not installed yet, Found New Hardware Wizard will be popped up. Install from a list or specific location (Advanced)(S) -&amp;gt; Next(N)            Decide the location of Driver. If RoboPlus S/W has been installed automatically, the driver is in LN101 folder of RoboPlus Installation folder. Or if you want to install the newest version, download the newest version VCP driver from FTDI Driver Download page.                Click the Next(N) button to start the installation. Installation of USB Serial Converter driver is completed.            Install the USB Serial Port driver in the same way.      VideosSetting up the port",
        "url": " http://localhost:4000/docs/en/parts/interface/ln-101/"
      } ,
  
      "docs-en-dxl-pro-m42-10-s260-r":  {
        "title": "M42-10-S260-R",
      "content"	 : "M42-10-S260-RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps ~ 10.5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      269g (9.5oz)              Dimensions (W x H x D)      42mm x 72mm x 42mm (1.65 x 2.83 x 1.65)              Resolution      263,187 steps/rev              Gear Ratio      257.0 : 1              Backlash      4.2arcmin (0.07°)              No Load Speed      28.0rpm              No Load Current      0.52A              Continuous Speed      26.0rpm              Continuous Torque      1.7Nm (241 ozf-in)              Continuous Current      0.6A              Output      10W              Operating Temperature      5°C ~ 55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multidrop BUS              ID      0 ~ 252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different. Stall torque is measured from the max torque that it can reach. This is generally how RC servos measure their torque. For the Performance graph with the N-T curves, it is measured with the load gradually increasing. The motor operation environment is closer to the performance graph, not stall torque method. This is probably why the performance graph is being broadly used in the industrial market. This is why the max torque of the performance grap can actually be less than the stall torque.Caution When connecting to power supply, it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL.Do not connect or disconnect DYNAMIXEL when power is being supplied.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 2.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(64) is cleared to ‘0’.SizeThe Size of data varies from 1 to 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. For data larger than 2 bytes will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      43288              2      4      Model Information      Model Information      R      -              6      1      Firmware Version      Firmware Version      R      -              7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW      -              30      2      Torque Limit      Maximum Torque Limit      RW      -              32      4      Velocity Limit      Maximum Velocity Limit      RW      -              36      4      Max Position Limit      Maximum Position Limit      RW      -              40      4      Min Position Limit      Minimum Position Limit      RW      -              44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On/Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW      -              588      2      Velocity P Gain      P Gain of Velocity      RW      -              594      2      Position P Gain      P Gain of Position      RW      -              596      4      Goal Position      Target Position Value      RW      -              600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R      -              611      4      Present Position      Present Position Value      R      -              615      4      Present Velocity      Present Velocity Value      R      -              621      2      Present Current      Present Current Value      R      -              623      2      Present Input Voltage      Present Input Voltage      R      -              625      1      Present Temperature      Present Internal Temperature      R      -              626      2      External Port Data 1      External Port Data 1      R/RW      0              628      2      External Port Data 2      External Port Data 2      R/RW      0              630      2      External Port Data 3      External Port Data 3      R/RW      0              632      2      External Port Data 4      External Port Data 4      R/RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable(562) is cleared to ‘0’.Model Number(0)This address stores model number of the DYNAMIXEL.            Model Name      Model Number                  H42-20-S300-R      43288 (0xA918)      Firmware Version(6)This address stores firmware version of the DYNAMIXEL.ID(7)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate(8)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate                  8      10.5M              7      4.5M              6      4M              5      3M              4      2M              3      1M              2      115,200              1(Default)      57,600              0      9,600      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time(9)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      Operating Mode(11)            Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque. Speed and Position will not be controlled.              1      Velocity Control Mode      This mode controls Velocity and Torque. Position will not be controlled.              3(Default)      Position Control Mode      This mode controls Position, Velocity and Torque.              4      Extended Position Control Mode      This mode controls Position, Velocity and Torque. Multi-turn is enabled.      Homing Offset(13)Users can adjust the Home position by setting Homing Offset(13). The Homing Offset value is added to the Present Position(611).Present Position(611) = Actual Position + Homing Offset(13).            Value Range                  -2,147,483,648 ~ 2,147,483,647      Moving Threshold(17)If Present Velocity(615) is bigger than this value, Moving(610) is set to ‘1’ and otherwise Moving(610) is cleared to ‘0’. This value determines whether Dynamixel is in motion or not.            Value Range                  0 ~ 2,147,483,647      Temperature Limit(21)This value limits operating temperature. When the Present Temperature(625) that indicates internal temperature of Dynamixel is greater than the Temperature Limit(21), the Over Heating Error Bit(Bit 2) in the Hardware Error Status(892) will be set. If Overheating Error Bit(Bit 2) is configured in the Shutdown(48) when Over Heating Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 1°      0 ~ 100      0 ~ 100°      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage Limit(24, 22)These values are maximum and minimum operating voltages.When current input voltage acquired from Present Input Voltage(623) exceeds the range of Max Voltage Limit(36) and Min Voltage Limit(40), Input Voltage Error Bit(Bit 0) in the Hardware Error Status(892) will be set to ‘1’. If Input Voltage Error Bit(Bit 0) is configured in the Shutdown(48) when Input Voltage Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 0.1V      0 ~ 400      0 ~ 40.0V      Acceleration Limit(26)This value indicates acceleration limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Torque Limit(30)This value indicates torque limit. Goal Torque(604) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 32,767      Velocity Limit(32)This value indicates velocity limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Min/Max Position Limits(40, 36)These values limit maximum and minimum target positions. The Goal Position(596) can’t exceed these values.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet. In Extended Position Control Mode, these limits will be ignored.            Model Name      Value Range                  H54-200-S500-RH54-100-S500-R      -250,961 ~ 250,961              H42-20-S300-R      -151,875 ~ 151,875              M54-60-S250-RM54-40-S250-R      -125,708 ~ 125,708              M42-10-S260-R      -131,593 ~ 131,593              L54-50-S290-R      -103,846 ~ 103,846              L54-50-S500-RL54-30-S500-R      -180,692 ~ 180,692              L54-30-S400-R      -144,197 ~ 144,197      External Port Mode(44 ~ 47)/Data(626 ~ 632)Dynamixel PRO is equipped with multi-purpose expansion ports.            Item      Range                  Voltage      0 ~ 3.3V              Current      0 ~ 5mA        Analog input mode: analog values from an external port get converted to digital. These values are automatically updated in External port data(626 ~ 632).  Output mode: can adjust external port voltage 0V or 3.3V. External port data value of 0 is 0V, 1 for 3.3V.  Pull-up input mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-up. Depending on needs an external strong pull-up is acceptable.  Pull-up output mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-down. Depending on needs an external strong pull-down is acceptable.External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector.            Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3.3V      PORT1      PORT2      PORT3      PORT4      Shutdown(48)The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation. Each Bit is inclusively processed with the ‘OR’ logic, therefore, multiple options can be generated. For instance, when ‘0x05’ (binary : 00000101) is defined as Shutdown(48), Dynamixel can detect both Input Voltage Error(binary : 00000001) and Overheating Error(binary : 00000100). If those errors are detected, Torque Enable(562) is cleared to ‘0’ and the motor output becomes 0[%]. In order to reuse Dynamixel Pro in shutdown status, REBOOT has to be done. The followings are detectable situations.            Bit      Item      Description                  Bit 7      -      -              Bit 6      -      -              Bit 5      Overload Error(default)      Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error(default)      Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error(default)      Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs, use below method to reboot Dynamixels.  H/W REBOOT : Turn off the power and turn on again  S/W REBOOT : Transmit REBOOT Instruction (For more details, please refer to the Protocol section of e-Manual.)Indirect Address, Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses. Sequential addresses increase Instruction Packet efficiency. Addresses that can be defined as Indirect Address is limited to RAM area(Address 562 ~ 892).If specific address is allocated to Indirect Address, Indirect Address inherits features and properties of the Data from the specific Address. Property includes Size(Byte length), value range, and Access property(Read Only, Read/Write). For instance, if address 563(LED Red) is allocated to Indirect Address 1(49), Indirect Data 1(634) will have the exactly same value of LED Red(563).Example 1 Allocating 1 byte LED(563) to Indirect Data 1(634).  Indirect Address 1(49) : change the value to ‘563’ which is the address of LED Red.  Set Indirect Data 1(634) to ‘1’ : LED Red(563) also becomes ‘1’ and Red LED will be turned on.  Set Indirect Data 1(634) to ‘0’ : LED Red(563) also becomes ‘0’ and Red LED will be turned off.Example 2 Allocating Size 4 byte Goal Position(596) to Indirect Data 2(635), 4 sequential bytes have to be allocated.  Indirect Address 2(51) : change the value to ‘596’ which is the first address of Goal Position.  Indirect Address 3(53) : change the value to ‘597’ which is the second address of Goal Position.  Indirect Address 4(55) : change the value to ‘598’ which is the third address of Goal Position.  Indirect Address 5(57) : change the value to ‘599’ which is the fourth address of Goal Position.  Set 4 byte value 305,419,896(0x12345678) to Indirect Data 2 : Goal Position(596) also becomes 305,419,896(0x12345678) as below.            Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2[byte] to Indirect Address, all address must be allocated to Indirect Address like the above Example 2.Note Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.Torque Enable(562)Controls Torque ON/OFF. Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected.            Value      Description                  0(Default)      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      Note Present Position(132) can be reset when Operating Mode(11) and Torque Enable(64) are updated. For more details, please refer to the Homing Offset(20) and Present Position(132).RGB LED(563)Controls the RGB LED on Dynamixel PRO.            Address      Color      Range                  563      Red      0 ~ 255              564      Green      0 ~ 255              565      Blue      0 ~ 255      Velocity PI Gain(588, 586)These values indicate P and I Gains of Velocity Control Mode. The I Gain includes sampling time. Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI.            Gain Value Range                  0 ~ 32,767      Note KPA stands for Anti-windup Gain that cannot be modified by users. For more details about the PID controller, please refer to the PID Controller at wikipedia.Position P Gain(594)This P Gain is used in Position Control Mode. Below figure is a block diagram describing the Position Control Mode. The Position Controller is cascaded with the Velocity Controller. KPP stands for Position P Gain.            Gain Value Range                  0 ~ 32,767      Goal Position(596), Present Position(611)Target position can be set with Goal Position(596). This value can’t be smaller than the Min Position Limit(40) or larger than Max Position Limit(36).            Model      Angle Range      Position Range      Description                  H54-200-S500-RH54-100-S500-R      -180° ~ 180 °      -250,961.5 ~ 250,961.5                    H42-20-S300-R      -180° ~ 180 °      -151,875 ~ 151,875            Goal Velocity(600)Goal Velocity(600) can be used to set a target velocity and this value cannot exceed Velocity Limit (32).In case of Position Control Mode or Extended Position Control Mode, Goal Velocity will be used to limit the velocity.However, if Goal Velocity is set to ‘0’, Velocity Limit(32) will be used to limit the velocity. (Please refer to the block diagram of Position P Gain)The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor.Output RPM = Goal Velocity * Scale Factor            Model      Scale Factor(RPM)                  H54-200-S500-RH54-100-S500-R      0.00199234              H42-20-S300-R      0.00329218              M54-60-S250-RM54-40-S250-R      0.00397746              M42-10-S260-R      0.00389076              L54-50-S290-R      0.00346667              L54-50-S500-RL54-30-S500-R      0.00199234              L54-30-S400-R      0.00249657      Goal Torque(604)Goal torque (604) can be used to set a target torque and this value cannot exceed Torque Limit(30).When the Operating Mode(11) is set other than Torque Control Mode, Goal Torque will be used to limit the torque.However, if Goal Torque is set to ‘0’, Torque Limit(30) will be used to limit the torque. (Please refer to the block diagram of Position Gain or Velocity Gain)The relationship between torque, current, and goal torque is shown below.            Model      Formula                  PRO 54      A = V * 33,000 / 2,048A : Current[mA]V : Present Current/Goal Torque              PRO 42      A = V * 8,250 / 2,048A : Current[mA]V : Present Current/Goal Torque      Goal Acceleration(606)Goal Acceleration(606) can be used to set a target acceleration. This value is used in Velocity Control Mode, Position Control Mode and Extended Position Control Mode. The profile control will be enabled when both Goal Acceleration(606) and Goal Velocity(600) are not ‘0’.Please refer to the Goal Velocity(600) for RPM conversion constant.            Value Range      Unit                  -2,147,483,647 ~ 2,147,483,647      58,000 RPM2 @ Core Motor      Moving(610)This value indicates whether Dynamixel Pro is in motion or not. If absolute value of Present Velocity(615) is greater than Moving Threshold(17), Moving(610) is set to ‘1’. Otherwise, it will be cleared to ‘0’. However, this value will always be set to ‘1’ regardless of Present Velocity(615) while Profile is in progress with Goal Position(596) instruction.            Value      Description                  0      Movement is not detected              1      Movement is detected, or Profile is in progress(Goal Position(596) instruction is being processed)      Present Velocity(615)This value indicates present Velocity. For more details, please refer to the Goal Velocity(600).Present Current(621)This value indicates present Current. For more details, please refer to the Goal Torque(604).Present Input Voltage(623)This value indicates present voltage that is being supplied. For more details, please refer to the Min/Max Voltage Limit(24, 22).Present Temperature (625)This value indicates present internal Temperature. For more details, please refer to the Temperature Limit(21).Registered Instruction(890)            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Status Return Level(891)This value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Hardware Error Status(892)This value indicates hardware error status. For more details, please refer to the Shutdown(48).How to AssembleOption Frame Assembly  FRP42-H110K, FRP42-H120K SetMaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF, DWG, STEP, IGES",
        "url": " http://localhost:4000/docs/en/dxl/pro/m42-10-s260-r/"
      } ,
  
      "docs-en-dxl-pro-m54-40-s250-r":  {
        "title": "M54-40-S250-R",
      "content"	 : "M54-40-S250-RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps ~ 10.5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      710g (25.0oz)              Dimensions (W x H x D)      54mm x 108mm x 54mm (2.13 x 4.25 x 2.13)              Resolution      251,417 steps/rev              Gear Ratio      251.4 : 1              Backlash      3.8arcmin (0.06°)              No Load Speed      28.4rpm              No Load Current      1.32A              Continuous Speed      24.2rpm              Continuous Torque      3.9Nm (552 ozf-in)              Continuous Current      1.9A              Output      40W              Operating Temperature      5°C ~ 55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multidrop BUS              ID      0 ~ 252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different. Stall torque is measured from the max torque that it can reach. This is generally how RC servos measure their torque. For the Performance graph with the N-T curves, it is measured with the load gradually increasing. The motor operation environment is closer to the performance graph, not stall torque method. This is probably why the performance graph is being broadly used in the industrial market. This is why the max torque of the performance grap can actually be less than the stall torque.Caution When connecting to power supply, it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL.Do not connect or disconnect DYNAMIXEL when power is being supplied.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 2.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(64) is cleared to ‘0’.SizeThe Size of data varies from 1 to 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. For data larger than 2 bytes will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      46096              2      4      Model Information      Model Information      R      -              6      1      Firmware Version      Firmware Version      R      -              7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW      -              30      2      Torque Limit      Maximum Torque Limit      RW      -              32      4      Velocity Limit      Maximum Velocity Limit      RW      -              36      4      Max Position Limit      Maximum Position Limit      RW      -              40      4      Min Position Limit      Minimum Position Limit      RW      -              44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On/Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW      -              588      2      Velocity P Gain      P Gain of Velocity      RW      -              594      2      Position P Gain      P Gain of Position      RW      -              596      4      Goal Position      Target Position Value      RW      -              600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R      -              611      4      Present Position      Present Position Value      R      -              615      4      Present Velocity      Present Velocity Value      R      -              621      2      Present Current      Present Current Value      R      -              623      2      Present Input Voltage      Present Input Voltage      R      -              625      1      Present Temperature      Present Internal Temperature      R      -              626      2      External Port Data 1      External Port Data 1      R/RW      0              628      2      External Port Data 2      External Port Data 2      R/RW      0              630      2      External Port Data 3      External Port Data 3      R/RW      0              632      2      External Port Data 4      External Port Data 4      R/RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable(562) is cleared to ‘0’.Model Number(0)This address stores model number of the DYNAMIXEL.            Model Name      Model Number                  M54-40-S250-R      46096 (0xB410)      Firmware Version(6)This address stores firmware version of the DYNAMIXEL.ID(7)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate(8)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate                  8      10.5M              7      4.5M              6      4M              5      3M              4      2M              3      1M              2      115,200              1(Default)      57,600              0      9,600      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time(9)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      Operating Mode(11)            Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque. Speed and Position will not be controlled.              1      Velocity Control Mode      This mode controls Velocity and Torque. Position will not be controlled.              3(Default)      Position Control Mode      This mode controls Position, Velocity and Torque.              4      Extended Position Control Mode      This mode controls Position, Velocity and Torque. Multi-turn is enabled.      Homing Offset(13)Users can adjust the Home position by setting Homing Offset(13). The Homing Offset value is added to the Present Position(611).Present Position(611) = Actual Position + Homing Offset(13).            Value Range                  -2,147,483,648 ~ 2,147,483,647      Moving Threshold(17)If Present Velocity(615) is bigger than this value, Moving(610) is set to ‘1’ and otherwise Moving(610) is cleared to ‘0’. This value determines whether Dynamixel is in motion or not.            Value Range                  0 ~ 2,147,483,647      Temperature Limit(21)This value limits operating temperature. When the Present Temperature(625) that indicates internal temperature of Dynamixel is greater than the Temperature Limit(21), the Over Heating Error Bit(Bit 2) in the Hardware Error Status(892) will be set. If Overheating Error Bit(Bit 2) is configured in the Shutdown(48) when Over Heating Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 1°      0 ~ 100      0 ~ 100°      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage Limit(24, 22)These values are maximum and minimum operating voltages.When current input voltage acquired from Present Input Voltage(623) exceeds the range of Max Voltage Limit(36) and Min Voltage Limit(40), Input Voltage Error Bit(Bit 0) in the Hardware Error Status(892) will be set to ‘1’. If Input Voltage Error Bit(Bit 0) is configured in the Shutdown(48) when Input Voltage Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 0.1V      0 ~ 400      0 ~ 40.0V      Acceleration Limit(26)This value indicates acceleration limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Torque Limit(30)This value indicates torque limit. Goal Torque(604) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 32,767      Velocity Limit(32)This value indicates velocity limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Min/Max Position Limits(40, 36)These values limit maximum and minimum target positions. The Goal Position(596) can’t exceed these values.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet. In Extended Position Control Mode, these limits will be ignored.            Model Name      Value Range                  H54-200-S500-RH54-100-S500-R      -250,961 ~ 250,961              H42-20-S300-R      -151,875 ~ 151,875              M54-60-S250-RM54-40-S250-R      -125,708 ~ 125,708              M42-10-S260-R      -131,593 ~ 131,593              L54-50-S290-R      -103,846 ~ 103,846              L54-50-S500-RL54-30-S500-R      -180,692 ~ 180,692              L54-30-S400-R      -144,197 ~ 144,197      External Port Mode(44 ~ 47)/Data(626 ~ 632)Dynamixel PRO is equipped with multi-purpose expansion ports.            Item      Range                  Voltage      0 ~ 3.3V              Current      0 ~ 5mA        Analog input mode: analog values from an external port get converted to digital. These values are automatically updated in External port data(626 ~ 632).  Output mode: can adjust external port voltage 0V or 3.3V. External port data value of 0 is 0V, 1 for 3.3V.  Pull-up input mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-up. Depending on needs an external strong pull-up is acceptable.  Pull-up output mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-down. Depending on needs an external strong pull-down is acceptable.External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector.            Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3.3V      PORT1      PORT2      PORT3      PORT4      Shutdown(48)The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation. Each Bit is inclusively processed with the ‘OR’ logic, therefore, multiple options can be generated. For instance, when ‘0x05’ (binary : 00000101) is defined as Shutdown(48), Dynamixel can detect both Input Voltage Error(binary : 00000001) and Overheating Error(binary : 00000100). If those errors are detected, Torque Enable(562) is cleared to ‘0’ and the motor output becomes 0[%]. In order to reuse Dynamixel Pro in shutdown status, REBOOT has to be done. The followings are detectable situations.            Bit      Item      Description                  Bit 7      -      -              Bit 6      -      -              Bit 5      Overload Error(default)      Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error(default)      Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error(default)      Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs, use below method to reboot Dynamixels.  H/W REBOOT : Turn off the power and turn on again  S/W REBOOT : Transmit REBOOT Instruction (For more details, please refer to the Protocol section of e-Manual.)Indirect Address, Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses. Sequential addresses increase Instruction Packet efficiency. Addresses that can be defined as Indirect Address is limited to RAM area(Address 562 ~ 892).If specific address is allocated to Indirect Address, Indirect Address inherits features and properties of the Data from the specific Address. Property includes Size(Byte length), value range, and Access property(Read Only, Read/Write). For instance, if address 563(LED Red) is allocated to Indirect Address 1(49), Indirect Data 1(634) will have the exactly same value of LED Red(563).Example 1 Allocating 1 byte LED(563) to Indirect Data 1(634).  Indirect Address 1(49) : change the value to ‘563’ which is the address of LED Red.  Set Indirect Data 1(634) to ‘1’ : LED Red(563) also becomes ‘1’ and Red LED will be turned on.  Set Indirect Data 1(634) to ‘0’ : LED Red(563) also becomes ‘0’ and Red LED will be turned off.Example 2 Allocating Size 4 byte Goal Position(596) to Indirect Data 2(635), 4 sequential bytes have to be allocated.  Indirect Address 2(51) : change the value to ‘596’ which is the first address of Goal Position.  Indirect Address 3(53) : change the value to ‘597’ which is the second address of Goal Position.  Indirect Address 4(55) : change the value to ‘598’ which is the third address of Goal Position.  Indirect Address 5(57) : change the value to ‘599’ which is the fourth address of Goal Position.  Set 4 byte value 305,419,896(0x12345678) to Indirect Data 2 : Goal Position(596) also becomes 305,419,896(0x12345678) as below.            Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2[byte] to Indirect Address, all address must be allocated to Indirect Address like the above Example 2.Note Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.Torque Enable(562)Controls Torque ON/OFF. Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected.            Value      Description                  0(Default)      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      Note Present Position(132) can be reset when Operating Mode(11) and Torque Enable(64) are updated. For more details, please refer to the Homing Offset(20) and Present Position(132).RGB LED(563)Controls the RGB LED on Dynamixel PRO.            Address      Color      Range                  563      Red      0 ~ 255              564      Green      0 ~ 255              565      Blue      0 ~ 255      Velocity PI Gain(588, 586)These values indicate P and I Gains of Velocity Control Mode. The I Gain includes sampling time. Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI.            Gain Value Range                  0 ~ 32,767      Note KPA stands for Anti-windup Gain that cannot be modified by users. For more details about the PID controller, please refer to the PID Controller at wikipedia.Position P Gain(594)This P Gain is used in Position Control Mode. Below figure is a block diagram describing the Position Control Mode. The Position Controller is cascaded with the Velocity Controller. KPP stands for Position P Gain.            Gain Value Range                  0 ~ 32,767      Goal Position(596), Present Position(611)Target position can be set with Goal Position(596). This value can’t be smaller than the Min Position Limit(40) or larger than Max Position Limit(36).            Model      Angle Range      Position Range      Description                  H54-200-S500-RH54-100-S500-R      -180° ~ 180 °      -250,961.5 ~ 250,961.5                    H42-20-S300-R      -180° ~ 180 °      -151,875 ~ 151,875            Goal Velocity(600)Goal Velocity(600) can be used to set a target velocity and this value cannot exceed Velocity Limit (32).In case of Position Control Mode or Extended Position Control Mode, Goal Velocity will be used to limit the velocity.However, if Goal Velocity is set to ‘0’, Velocity Limit(32) will be used to limit the velocity. (Please refer to the block diagram of Position P Gain)The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor.Output RPM = Goal Velocity * Scale Factor            Model      Scale Factor(RPM)                  H54-200-S500-RH54-100-S500-R      0.00199234              H42-20-S300-R      0.00329218              M54-60-S250-RM54-40-S250-R      0.00397746              M42-10-S260-R      0.00389076              L54-50-S290-R      0.00346667              L54-50-S500-RL54-30-S500-R      0.00199234              L54-30-S400-R      0.00249657      Goal Torque(604)Goal torque (604) can be used to set a target torque and this value cannot exceed Torque Limit(30).When the Operating Mode(11) is set other than Torque Control Mode, Goal Torque will be used to limit the torque.However, if Goal Torque is set to ‘0’, Torque Limit(30) will be used to limit the torque. (Please refer to the block diagram of Position Gain or Velocity Gain)The relationship between torque, current, and goal torque is shown below.            Model      Formula                  PRO 54      A = V * 33,000 / 2,048A : Current[mA]V : Present Current/Goal Torque              PRO 42      A = V * 8,250 / 2,048A : Current[mA]V : Present Current/Goal Torque      Goal Acceleration(606)Goal Acceleration(606) can be used to set a target acceleration. This value is used in Velocity Control Mode, Position Control Mode and Extended Position Control Mode. The profile control will be enabled when both Goal Acceleration(606) and Goal Velocity(600) are not ‘0’.Please refer to the Goal Velocity(600) for RPM conversion constant.            Value Range      Unit                  -2,147,483,647 ~ 2,147,483,647      58,000 RPM2 @ Core Motor      Moving(610)This value indicates whether Dynamixel Pro is in motion or not. If absolute value of Present Velocity(615) is greater than Moving Threshold(17), Moving(610) is set to ‘1’. Otherwise, it will be cleared to ‘0’. However, this value will always be set to ‘1’ regardless of Present Velocity(615) while Profile is in progress with Goal Position(596) instruction.            Value      Description                  0      Movement is not detected              1      Movement is detected, or Profile is in progress(Goal Position(596) instruction is being processed)      Present Velocity(615)This value indicates present Velocity. For more details, please refer to the Goal Velocity(600).Present Current(621)This value indicates present Current. For more details, please refer to the Goal Torque(604).Present Input Voltage(623)This value indicates present voltage that is being supplied. For more details, please refer to the Min/Max Voltage Limit(24, 22).Present Temperature (625)This value indicates present internal Temperature. For more details, please refer to the Temperature Limit(21).Registered Instruction(890)            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Status Return Level(891)This value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Hardware Error Status(892)This value indicates hardware error status. For more details, please refer to the Shutdown(48).How to AssembleOption Frame Assembly      FRP54-H110K, FRP54-H120K Set        FRP54-H210K, FRP54-H220K Set  MaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF, DWG, STEP, IGES",
        "url": " http://localhost:4000/docs/en/dxl/pro/m54-40-s250-r/"
      } ,
  
      "docs-en-dxl-pro-m54-60-s250-r":  {
        "title": "M54-60-S250-R",
      "content"	 : "M54-60-S250-RSpecifications            Item      Specifications                  Motor      BLDC              Baud Rate      9600 bps ~ 10.5 Mbps              Operating Modes      Torque Control ModeVelocity Control ModePosition Control ModeExtended Position Control Mode              Weight      853g (30.0oz)              Dimensions (W x H x D)      54mm x 126mm x 54mm (2.13 x 4.96 x 2.13)              Resolution      251,417 steps/rev              Gear Ratio      251.4 : 1              Backlash      3.8arcmin (0.06°)              No Load Speed      33.1rpm              No Load Current      1.25A              Continuous Speed      28.3rpm              Continuous Torque      10.1Nm (1,430 ozf-in)              Continuous Current      3.0A              Output      60W              Operating Temperature      5°C ~ 55°C              Nominal Voltage      24V              Command Signal      Digital Packet              Protocol Type      RS485 Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multidrop BUS              ID      0 ~ 252      Performance GraphNote The max torque measurement method for the Stall Torque and Performance Graph is different. Stall torque is measured from the max torque that it can reach. This is generally how RC servos measure their torque. For the Performance graph with the N-T curves, it is measured with the load gradually increasing. The motor operation environment is closer to the performance graph, not stall torque method. This is probably why the performance graph is being broadly used in the industrial market. This is why the max torque of the performance grap can actually be less than the stall torque.Caution When connecting to power supply, it is recommended using ROBOTIS controller or SMPS2DYNAMIXEL.Do not connect or disconnect DYNAMIXEL when power is being supplied.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 2.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(64) is cleared to ‘0’.SizeThe Size of data varies from 1 to 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. For data larger than 2 bytes will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      46352              2      4      Model Information      Model Information      R      -              6      1      Firmware Version      Firmware Version      R      -              7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Speed      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              11      1      Operating Mode      Operating Mode      RW      3              13      4      Homing Offset      Home Position Offset      RW      0              17      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      50              21      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              22      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      400              24      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      150              26      4      Acceleration Limit      Maximum Accleration Limit      RW      -              30      2      Torque Limit      Maximum Torque Limit      RW      -              32      4      Velocity Limit      Maximum Velocity Limit      RW      -              36      4      Max Position Limit      Maximum Position Limit      RW      -              40      4      Min Position Limit      Minimum Position Limit      RW      -              44      1      External Port Mode 1      External Port Mode 1      RW      0              45      1      External Port Mode 2      External Port Mode 2      RW      0              46      1      External Port Mode 3      External Port Mode 3      RW      0              47      1      External Port Mode 4      External Port Mode 4      RW      0              48      1      Shutdown      Shutdown Error Information      RW      58              49      2      Indirect Address 1      Indirect Address 1      RW      634              51      2      Indirect Address 2      Indirect Address 2      RW      635              53      2      Indirect Address 3      Indirect Address 3      RW      636              …      2      Indirect Address N      Indirect Address N      RW      …              559      2      Indirect Address 256      Indirect Address 256      RW      889      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  562      1      Torque Enable      Motor Torque On/Off      RW      0              563      1      LED Red      Red LED Intensity Value      RW      0              564      1      LED Green      Green LED Intensity Value      RW      0              565      1      LED Blue      Blue LED Intensity Value      RW      0              586      2      Velocity I Gain      I Gain of Velocity      RW      -              588      2      Velocity P Gain      P Gain of Velocity      RW      -              594      2      Position P Gain      P Gain of Position      RW      -              596      4      Goal Position      Target Position Value      RW      -              600      4      Goal Velocity      Target Velocity Value      RW      0              604      2      Goal Torque      Target Current Value      RW      0              606      4      Goal Acceleration      Target Acceleration Value      RW      0              610      1      Moving      Movement Status      R      -              611      4      Present Position      Present Position Value      R      -              615      4      Present Velocity      Present Velocity Value      R      -              621      2      Present Current      Present Current Value      R      -              623      2      Present Input Voltage      Present Input Voltage      R      -              625      1      Present Temperature      Present Internal Temperature      R      -              626      2      External Port Data 1      External Port Data 1      R/RW      0              628      2      External Port Data 2      External Port Data 2      R/RW      0              630      2      External Port Data 3      External Port Data 3      R/RW      0              632      2      External Port Data 4      External Port Data 4      R/RW      0              634      1      Indirect Data 1      Indirect Data 1      RW      0              635      1      Indirect Data 2      Indirect Data 2      RW      0              636      1      Indirect Data 3      Indirect Data 3      RW      0              …      1      Indirect Data N      Indirect Data N      RW      0              889      1      Indirect Data 256      Indirect Data 256      RW      0              890      1      Registered Instruction      Check Reception of Instruction      R      0              891      1      Status Return Level      Select Types of Status Return      RW      2              892      1      Hardware Error Status      Hardware Error Status      R      0      Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable(562) is cleared to ‘0’.Model Number(0)This address stores model number of the DYNAMIXEL.            Model Name      Model Number                  M54-60-S250-R      46352 (0xB510)      Firmware Version(6)This address stores firmware version of the DYNAMIXEL.ID(7)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate(8)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate                  8      10.5M              7      4.5M              6      4M              5      3M              4      2M              3      1M              2      115,200              1(Default)      57,600              0      9,600      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time(9)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      Operating Mode(11)            Value      Operating Mode      Description                  0      Torque Control Mode      This mode only controls Torque. Speed and Position will not be controlled.              1      Velocity Control Mode      This mode controls Velocity and Torque. Position will not be controlled.              3(Default)      Position Control Mode      This mode controls Position, Velocity and Torque.              4      Extended Position Control Mode      This mode controls Position, Velocity and Torque. Multi-turn is enabled.      Homing Offset(13)Users can adjust the Home position by setting Homing Offset(13). The Homing Offset value is added to the Present Position(611).Present Position(611) = Actual Position + Homing Offset(13).            Value Range                  -2,147,483,648 ~ 2,147,483,647      Moving Threshold(17)If Present Velocity(615) is bigger than this value, Moving(610) is set to ‘1’ and otherwise Moving(610) is cleared to ‘0’. This value determines whether Dynamixel is in motion or not.            Value Range                  0 ~ 2,147,483,647      Temperature Limit(21)This value limits operating temperature. When the Present Temperature(625) that indicates internal temperature of Dynamixel is greater than the Temperature Limit(21), the Over Heating Error Bit(Bit 2) in the Hardware Error Status(892) will be set. If Overheating Error Bit(Bit 2) is configured in the Shutdown(48) when Over Heating Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 1°      0 ~ 100      0 ~ 100°      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage Limit(24, 22)These values are maximum and minimum operating voltages.When current input voltage acquired from Present Input Voltage(623) exceeds the range of Max Voltage Limit(36) and Min Voltage Limit(40), Input Voltage Error Bit(Bit 0) in the Hardware Error Status(892) will be set to ‘1’. If Input Voltage Error Bit(Bit 0) is configured in the Shutdown(48) when Input Voltage Error occurs, Torque Enable(562) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(48) section.            Unit      Value Range      Description                  About 0.1V      0 ~ 400      0 ~ 40.0V      Acceleration Limit(26)This value indicates acceleration limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Torque Limit(30)This value indicates torque limit. Goal Torque(604) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 32,767      Velocity Limit(32)This value indicates velocity limit. The Goal Velocity(600) can’t exceed this value.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet.            Value Range                  0 ~ 2,147,483,647      Min/Max Position Limits(40, 36)These values limit maximum and minimum target positions. The Goal Position(596) can’t exceed these values.Trying to write an exceeding value will fail and result in receiving a Limit Error Bit from the Status Packet. In Extended Position Control Mode, these limits will be ignored.            Model Name      Value Range                  H54-200-S500-RH54-100-S500-R      -250,961 ~ 250,961              H42-20-S300-R      -151,875 ~ 151,875              M54-60-S250-RM54-40-S250-R      -125,708 ~ 125,708              M42-10-S260-R      -131,593 ~ 131,593              L54-50-S290-R      -103,846 ~ 103,846              L54-50-S500-RL54-30-S500-R      -180,692 ~ 180,692              L54-30-S400-R      -144,197 ~ 144,197      External Port Mode(44 ~ 47)/Data(626 ~ 632)Dynamixel PRO is equipped with multi-purpose expansion ports.            Item      Range                  Voltage      0 ~ 3.3V              Current      0 ~ 5mA        Analog input mode: analog values from an external port get converted to digital. These values are automatically updated in External port data(626 ~ 632).  Output mode: can adjust external port voltage 0V or 3.3V. External port data value of 0 is 0V, 1 for 3.3V.  Pull-up input mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-up. Depending on needs an external strong pull-up is acceptable.  Pull-up output mode: Verify port value of 0 or 1. External port data value changes by following voltage from expansion port; 0V to 0. 3.3V to 1. This becomes a weak pull-down. Depending on needs an external strong pull-down is acceptable.External expansion port location and pin functionRemove bolts and cover plate to reveal External Port connector.            Pin 1      Pin 2      Pin 3      Pin 4      Pin 5      Pin 6                  GND      3.3V      PORT1      PORT2      PORT3      PORT4      Shutdown(48)The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation. Each Bit is inclusively processed with the ‘OR’ logic, therefore, multiple options can be generated. For instance, when ‘0x05’ (binary : 00000101) is defined as Shutdown(48), Dynamixel can detect both Input Voltage Error(binary : 00000001) and Overheating Error(binary : 00000100). If those errors are detected, Torque Enable(562) is cleared to ‘0’ and the motor output becomes 0[%]. In order to reuse Dynamixel Pro in shutdown status, REBOOT has to be done. The followings are detectable situations.            Bit      Item      Description                  Bit 7      -      -              Bit 6      -      -              Bit 5      Overload Error(default)      Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error(default)      Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error(default)      Detect internal temperature exceeds the configured operating temperature              Bit 1      Motor Hall Sensor Error      Motor hall sensor value exceeds normal range              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs, use below method to reboot Dynamixels.  H/W REBOOT : Turn off the power and turn on again  S/W REBOOT : Transmit REBOOT Instruction (For more details, please refer to the Protocol section of e-Manual.)Indirect Address, Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses. Sequential addresses increase Instruction Packet efficiency. Addresses that can be defined as Indirect Address is limited to RAM area(Address 562 ~ 892).If specific address is allocated to Indirect Address, Indirect Address inherits features and properties of the Data from the specific Address. Property includes Size(Byte length), value range, and Access property(Read Only, Read/Write). For instance, if address 563(LED Red) is allocated to Indirect Address 1(49), Indirect Data 1(634) will have the exactly same value of LED Red(563).Example 1 Allocating 1 byte LED(563) to Indirect Data 1(634).  Indirect Address 1(49) : change the value to ‘563’ which is the address of LED Red.  Set Indirect Data 1(634) to ‘1’ : LED Red(563) also becomes ‘1’ and Red LED will be turned on.  Set Indirect Data 1(634) to ‘0’ : LED Red(563) also becomes ‘0’ and Red LED will be turned off.Example 2 Allocating Size 4 byte Goal Position(596) to Indirect Data 2(635), 4 sequential bytes have to be allocated.  Indirect Address 2(51) : change the value to ‘596’ which is the first address of Goal Position.  Indirect Address 3(53) : change the value to ‘597’ which is the second address of Goal Position.  Indirect Address 4(55) : change the value to ‘598’ which is the third address of Goal Position.  Indirect Address 5(57) : change the value to ‘599’ which is the fourth address of Goal Position.  Set 4 byte value 305,419,896(0x12345678) to Indirect Data 2 : Goal Position(596) also becomes 305,419,896(0x12345678) as below.            Indirect Data Address      Goal Position Address      Saved HEX Value                  635      596      0x78              636      597      0x56              637      598      0x34              638      599      0x12      Note In order to allocate Data in the Control Table longer than 2[byte] to Indirect Address, all address must be allocated to Indirect Address like the above Example 2.Note Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.Torque Enable(562)Controls Torque ON/OFF. Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected.            Value      Description                  0(Default)      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      Note Present Position(132) can be reset when Operating Mode(11) and Torque Enable(64) are updated. For more details, please refer to the Homing Offset(20) and Present Position(132).RGB LED(563)Controls the RGB LED on Dynamixel PRO.            Address      Color      Range                  563      Red      0 ~ 255              564      Green      0 ~ 255              565      Blue      0 ~ 255      Velocity PI Gain(588, 586)These values indicate P and I Gains of Velocity Control Mode. The I Gain includes sampling time. Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and Velocity I Gain is abbreviated to KVI.            Gain Value Range                  0 ~ 32,767      Note KPA stands for Anti-windup Gain that cannot be modified by users. For more details about the PID controller, please refer to the PID Controller at wikipedia.Position P Gain(594)This P Gain is used in Position Control Mode. Below figure is a block diagram describing the Position Control Mode. The Position Controller is cascaded with the Velocity Controller. KPP stands for Position P Gain.            Gain Value Range                  0 ~ 32,767      Goal Position(596), Present Position(611)Target position can be set with Goal Position(596). This value can’t be smaller than the Min Position Limit(40) or larger than Max Position Limit(36).            Model      Angle Range      Position Range      Description                  H54-200-S500-RH54-100-S500-R      -180° ~ 180 °      -250,961.5 ~ 250,961.5                    H42-20-S300-R      -180° ~ 180 °      -151,875 ~ 151,875            Goal Velocity(600)Goal Velocity(600) can be used to set a target velocity and this value cannot exceed Velocity Limit (32).In case of Position Control Mode or Extended Position Control Mode, Goal Velocity will be used to limit the velocity.However, if Goal Velocity is set to ‘0’, Velocity Limit(32) will be used to limit the velocity. (Please refer to the block diagram of Position P Gain)The Goal Velocity stands for the RPM of the motor before the reduction gears and output RPM after the reduction gears can be calculated using below scale factor.Output RPM = Goal Velocity * Scale Factor            Model      Scale Factor(RPM)                  H54-200-S500-RH54-100-S500-R      0.00199234              H42-20-S300-R      0.00329218              M54-60-S250-RM54-40-S250-R      0.00397746              M42-10-S260-R      0.00389076              L54-50-S290-R      0.00346667              L54-50-S500-RL54-30-S500-R      0.00199234              L54-30-S400-R      0.00249657      Goal Torque(604)Goal torque (604) can be used to set a target torque and this value cannot exceed Torque Limit(30).When the Operating Mode(11) is set other than Torque Control Mode, Goal Torque will be used to limit the torque.However, if Goal Torque is set to ‘0’, Torque Limit(30) will be used to limit the torque. (Please refer to the block diagram of Position Gain or Velocity Gain)The relationship between torque, current, and goal torque is shown below.            Model      Formula                  PRO 54      A = V * 33,000 / 2,048A : Current[mA]V : Present Current/Goal Torque              PRO 42      A = V * 8,250 / 2,048A : Current[mA]V : Present Current/Goal Torque      Goal Acceleration(606)Goal Acceleration(606) can be used to set a target acceleration. This value is used in Velocity Control Mode, Position Control Mode and Extended Position Control Mode. The profile control will be enabled when both Goal Acceleration(606) and Goal Velocity(600) are not ‘0’.Please refer to the Goal Velocity(600) for RPM conversion constant.            Value Range      Unit                  -2,147,483,647 ~ 2,147,483,647      58,000 RPM2 @ Core Motor      Moving(610)This value indicates whether Dynamixel Pro is in motion or not. If absolute value of Present Velocity(615) is greater than Moving Threshold(17), Moving(610) is set to ‘1’. Otherwise, it will be cleared to ‘0’. However, this value will always be set to ‘1’ regardless of Present Velocity(615) while Profile is in progress with Goal Position(596) instruction.            Value      Description                  0      Movement is not detected              1      Movement is detected, or Profile is in progress(Goal Position(596) instruction is being processed)      Present Velocity(615)This value indicates present Velocity. For more details, please refer to the Goal Velocity(600).Present Current(621)This value indicates present Current. For more details, please refer to the Goal Torque(604).Present Input Voltage(623)This value indicates present voltage that is being supplied. For more details, please refer to the Min/Max Voltage Limit(24, 22).Present Temperature (625)This value indicates present internal Temperature. For more details, please refer to the Temperature Limit(21).Registered Instruction(890)            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Status Return Level(891)This value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Hardware Error Status(892)This value indicates hardware error status. For more details, please refer to the Shutdown(48).How to AssembleOption Frame Assembly      FRP54-H110K, FRP54-H120K Set        FRP54-H210K, FRP54-H220K Set  MaintenanceReferenceNote Pro Compatibility GuideQuick StartDrawingsDownload PDF, DWG, STEP, IGES",
        "url": " http://localhost:4000/docs/en/dxl/pro/m54-60-s250-r/"
      } ,
  
      "assets-js-main-min-js":  {
        "title": "",
      "content"	 : "/*! * Minimal Mistakes Jekyll Theme 4.4.1 by Michael Rose * Copyright 2017 Michael Rose - mademistakes.com | @mmistakes * Licensed under MIT */!function(e,t){&quot;object&quot;==typeof module&amp;&amp;&quot;object&quot;==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(&quot;jQuery requires a window with a document&quot;);return t(e)}:t(e)}(&quot;undefined&quot;!=typeof window?window:this,function(e,t){function n(e){var t=!!e&amp;&amp;&quot;length&quot;in e&amp;&amp;e.length,n=pe.type(e);return&quot;function&quot;===n||pe.isWindow(e)?!1:&quot;array&quot;===n||0===t||&quot;number&quot;==typeof t&amp;&amp;t&gt;0&amp;&amp;t-1 in e}function r(e,t,n){if(pe.isFunction(t))return pe.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return pe.grep(e,function(e){return e===t!==n});if(&quot;string&quot;==typeof t){if(Te.test(t))return pe.filter(t,e,n);t=pe.filter(t,e)}return pe.grep(e,function(e){return pe.inArray(e,t)&gt;-1!==n})}function i(e,t){do e=e[t];while(e&amp;&amp;1!==e.nodeType);return e}function o(e){var t={};return pe.each(e.match(je)||[],function(e,n){t[n]=!0}),t}function a(){re.addEventListener?(re.removeEventListener(&quot;DOMContentLoaded&quot;,s),e.removeEventListener(&quot;load&quot;,s)):(re.detachEvent(&quot;onreadystatechange&quot;,s),e.detachEvent(&quot;onload&quot;,s))}function s(){(re.addEventListener||&quot;load&quot;===e.event.type||&quot;complete&quot;===re.readyState)&amp;&amp;(a(),pe.ready())}function l(e,t,n){if(void 0===n&amp;&amp;1===e.nodeType){var r=&quot;data-&quot;+t.replace(He,&quot;-$1&quot;).toLowerCase();if(n=e.getAttribute(r),&quot;string&quot;==typeof n){try{n=&quot;true&quot;===n?!0:&quot;false&quot;===n?!1:&quot;null&quot;===n?null:+n+&quot;&quot;===n?+n:_e.test(n)?pe.parseJSON(n):n}catch(i){}pe.data(e,t,n)}else n=void 0}return n}function u(e){var t;for(t in e)if((&quot;data&quot;!==t||!pe.isEmptyObject(e[t]))&amp;&amp;&quot;toJSON&quot;!==t)return!1;return!0}function c(e,t,n,r){if(Ie(e)){var i,o,a=pe.expando,s=e.nodeType,l=s?pe.cache:e,u=s?e[a]:e[a]&amp;&amp;a;if(u&amp;&amp;l[u]&amp;&amp;(r||l[u].data)||void 0!==n||&quot;string&quot;!=typeof t)return u||(u=s?e[a]=ne.pop()||pe.guid++:a),l[u]||(l[u]=s?{}:{toJSON:pe.noop}),&quot;object&quot;!=typeof t&amp;&amp;&quot;function&quot;!=typeof t||(r?l[u]=pe.extend(l[u],t):l[u].data=pe.extend(l[u].data,t)),o=l[u],r||(o.data||(o.data={}),o=o.data),void 0!==n&amp;&amp;(o[pe.camelCase(t)]=n),&quot;string&quot;==typeof t?(i=o[t],null==i&amp;&amp;(i=o[pe.camelCase(t)])):i=o,i}}function d(e,t,n){if(Ie(e)){var r,i,o=e.nodeType,a=o?pe.cache:e,s=o?e[pe.expando]:pe.expando;if(a[s]){if(t&amp;&amp;(r=n?a[s]:a[s].data)){pe.isArray(t)?t=t.concat(pe.map(t,pe.camelCase)):t in r?t=[t]:(t=pe.camelCase(t),t=t in r?[t]:t.split(&quot; &quot;)),i=t.length;for(;i--;)delete r[t[i]];if(n?!u(r):!pe.isEmptyObject(r))return}(n||(delete a[s].data,u(a[s])))&amp;&amp;(o?pe.cleanData([e],!0):de.deleteExpando||a!=a.window?delete a[s]:a[s]=void 0)}}}function f(e,t,n,r){var i,o=1,a=20,s=r?function(){return r.cur()}:function(){return pe.css(e,t,&quot;&quot;)},l=s(),u=n&amp;&amp;n[3]||(pe.cssNumber[t]?&quot;&quot;:&quot;px&quot;),c=(pe.cssNumber[t]||&quot;px&quot;!==u&amp;&amp;+l)&amp;&amp;Me.exec(pe.css(e,t));if(c&amp;&amp;c[3]!==u){u=u||c[3],n=n||[],c=+l||1;do o=o||&quot;.5&quot;,c/=o,pe.style(e,t,c+u);while(o!==(o=s()/l)&amp;&amp;1!==o&amp;&amp;--a)}return n&amp;&amp;(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&amp;&amp;(r.unit=u,r.start=c,r.end=i)),i}function p(e){var t=$e.split(&quot;|&quot;),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}function h(e,t){var n,r,i=0,o=&quot;undefined&quot;!=typeof e.getElementsByTagName?e.getElementsByTagName(t||&quot;*&quot;):&quot;undefined&quot;!=typeof e.querySelectorAll?e.querySelectorAll(t||&quot;*&quot;):void 0;if(!o)for(o=[],n=e.childNodes||e;null!=(r=n[i]);i++)!t||pe.nodeName(r,t)?o.push(r):pe.merge(o,h(r,t));return void 0===t||t&amp;&amp;pe.nodeName(e,t)?pe.merge([e],o):o}function m(e,t){for(var n,r=0;null!=(n=e[r]);r++)pe._data(n,&quot;globalEval&quot;,!t||pe._data(t[r],&quot;globalEval&quot;))}function g(e){Be.test(e.type)&amp;&amp;(e.defaultChecked=e.checked)}function v(e,t,n,r,i){for(var o,a,s,l,u,c,d,f=e.length,v=p(t),y=[],b=0;f&gt;b;b++)if(a=e[b],a||0===a)if(&quot;object&quot;===pe.type(a))pe.merge(y,a.nodeType?[a]:a);else if(Ue.test(a)){for(l=l||v.appendChild(t.createElement(&quot;div&quot;)),u=(ze.exec(a)||[&quot;&quot;,&quot;&quot;])[1].toLowerCase(),d=Xe[u]||Xe._default,l.innerHTML=d[1]+pe.htmlPrefilter(a)+d[2],o=d[0];o--;)l=l.lastChild;if(!de.leadingWhitespace&amp;&amp;We.test(a)&amp;&amp;y.push(t.createTextNode(We.exec(a)[0])),!de.tbody)for(a=&quot;table&quot;!==u||Ye.test(a)?&quot;&quot;!==d[1]||Ye.test(a)?0:l:l.firstChild,o=a&amp;&amp;a.childNodes.length;o--;)pe.nodeName(c=a.childNodes[o],&quot;tbody&quot;)&amp;&amp;!c.childNodes.length&amp;&amp;a.removeChild(c);for(pe.merge(y,l.childNodes),l.textContent=&quot;&quot;;l.firstChild;)l.removeChild(l.firstChild);l=v.lastChild}else y.push(t.createTextNode(a));for(l&amp;&amp;v.removeChild(l),de.appendChecked||pe.grep(h(y,&quot;input&quot;),g),b=0;a=y[b++];)if(r&amp;&amp;pe.inArray(a,r)&gt;-1)i&amp;&amp;i.push(a);else if(s=pe.contains(a.ownerDocument,a),l=h(v.appendChild(a),&quot;script&quot;),s&amp;&amp;m(l),n)for(o=0;a=l[o++];)Re.test(a.type||&quot;&quot;)&amp;&amp;n.push(a);return l=null,v}function y(){return!0}function b(){return!1}function x(){try{return re.activeElement}catch(e){}}function w(e,t,n,r,i,o){var a,s;if(&quot;object&quot;==typeof t){&quot;string&quot;!=typeof n&amp;&amp;(r=r||n,n=void 0);for(s in t)w(e,s,n,r,t[s],o);return e}if(null==r&amp;&amp;null==i?(i=n,r=n=void 0):null==i&amp;&amp;(&quot;string&quot;==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),i===!1)i=b;else if(!i)return e;return 1===o&amp;&amp;(a=i,i=function(e){return pe().off(e),a.apply(this,arguments)},i.guid=a.guid||(a.guid=pe.guid++)),e.each(function(){pe.event.add(this,t,i,r,n)})}function C(e,t){return pe.nodeName(e,&quot;table&quot;)&amp;&amp;pe.nodeName(11!==t.nodeType?t:t.firstChild,&quot;tr&quot;)?e.getElementsByTagName(&quot;tbody&quot;)[0]||e.appendChild(e.ownerDocument.createElement(&quot;tbody&quot;)):e}function T(e){return e.type=(null!==pe.find.attr(e,&quot;type&quot;))+&quot;/&quot;+e.type,e}function k(e){var t=it.exec(e.type);return t?e.type=t[1]:e.removeAttribute(&quot;type&quot;),e}function E(e,t){if(1===t.nodeType&amp;&amp;pe.hasData(e)){var n,r,i,o=pe._data(e),a=pe._data(t,o),s=o.events;if(s){delete a.handle,a.events={};for(n in s)for(r=0,i=s[n].length;i&gt;r;r++)pe.event.add(t,n,s[n][r])}a.data&amp;&amp;(a.data=pe.extend({},a.data))}}function S(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!de.noCloneEvent&amp;&amp;t[pe.expando]){i=pe._data(t);for(r in i.events)pe.removeEvent(t,r,i.handle);t.removeAttribute(pe.expando)}&quot;script&quot;===n&amp;&amp;t.text!==e.text?(T(t).text=e.text,k(t)):&quot;object&quot;===n?(t.parentNode&amp;&amp;(t.outerHTML=e.outerHTML),de.html5Clone&amp;&amp;e.innerHTML&amp;&amp;!pe.trim(t.innerHTML)&amp;&amp;(t.innerHTML=e.innerHTML)):&quot;input&quot;===n&amp;&amp;Be.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&amp;&amp;(t.value=e.value)):&quot;option&quot;===n?t.defaultSelected=t.selected=e.defaultSelected:&quot;input&quot;!==n&amp;&amp;&quot;textarea&quot;!==n||(t.defaultValue=e.defaultValue)}}function N(e,t,n,r){t=oe.apply([],t);var i,o,a,s,l,u,c=0,d=e.length,f=d-1,p=t[0],m=pe.isFunction(p);if(m||d&gt;1&amp;&amp;&quot;string&quot;==typeof p&amp;&amp;!de.checkClone&amp;&amp;rt.test(p))return e.each(function(i){var o=e.eq(i);m&amp;&amp;(t[0]=p.call(this,i,o.html())),N(o,t,n,r)});if(d&amp;&amp;(u=v(t,e[0].ownerDocument,!1,e,r),i=u.firstChild,1===u.childNodes.length&amp;&amp;(u=i),i||r)){for(s=pe.map(h(u,&quot;script&quot;),T),a=s.length;d&gt;c;c++)o=u,c!==f&amp;&amp;(o=pe.clone(o,!0,!0),a&amp;&amp;pe.merge(s,h(o,&quot;script&quot;))),n.call(e[c],o,c);if(a)for(l=s[s.length-1].ownerDocument,pe.map(s,k),c=0;a&gt;c;c++)o=s[c],Re.test(o.type||&quot;&quot;)&amp;&amp;!pe._data(o,&quot;globalEval&quot;)&amp;&amp;pe.contains(l,o)&amp;&amp;(o.src?pe._evalUrl&amp;&amp;pe._evalUrl(o.src):pe.globalEval((o.text||o.textContent||o.innerHTML||&quot;&quot;).replace(ot,&quot;&quot;)));u=i=null}return e}function A(e,t,n){for(var r,i=t?pe.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||pe.cleanData(h(r)),r.parentNode&amp;&amp;(n&amp;&amp;pe.contains(r.ownerDocument,r)&amp;&amp;m(h(r,&quot;script&quot;)),r.parentNode.removeChild(r));return e}function j(e,t){var n=pe(t.createElement(e)).appendTo(t.body),r=pe.css(n[0],&quot;display&quot;);return n.detach(),r}function L(e){var t=re,n=ut[e];return n||(n=j(e,t),&quot;none&quot;!==n&amp;&amp;n||(lt=(lt||pe(&quot;&quot;)).appendTo(t.documentElement),t=(lt[0].contentWindow||lt[0].contentDocument).document,t.write(),t.close(),n=j(e,t),lt.detach()),ut[e]=n),n}function D(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function I(e){if(e in kt)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=Tt.length;n--;)if(e=Tt[n]+t,e in kt)return e}function _(e,t){for(var n,r,i,o=[],a=0,s=e.length;s&gt;a;a++)r=e[a],r.style&amp;&amp;(o[a]=pe._data(r,&quot;olddisplay&quot;),n=r.style.display,t?(o[a]||&quot;none&quot;!==n||(r.style.display=&quot;&quot;),&quot;&quot;===r.style.display&amp;&amp;qe(r)&amp;&amp;(o[a]=pe._data(r,&quot;olddisplay&quot;,L(r.nodeName)))):(i=qe(r),(n&amp;&amp;&quot;none&quot;!==n||!i)&amp;&amp;pe._data(r,&quot;olddisplay&quot;,i?n:pe.css(r,&quot;display&quot;))));for(a=0;s&gt;a;a++)r=e[a],r.style&amp;&amp;(t&amp;&amp;&quot;none&quot;!==r.style.display&amp;&amp;&quot;&quot;!==r.style.display||(r.style.display=t?o[a]||&quot;&quot;:&quot;none&quot;));return e}function H(e,t,n){var r=xt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||&quot;px&quot;):t}function O(e,t,n,r,i){for(var o=n===(r?&quot;border&quot;:&quot;content&quot;)?4:&quot;width&quot;===t?1:0,a=0;4&gt;o;o+=2)&quot;margin&quot;===n&amp;&amp;(a+=pe.css(e,n+Pe[o],!0,i)),r?(&quot;content&quot;===n&amp;&amp;(a-=pe.css(e,&quot;padding&quot;+Pe[o],!0,i)),&quot;margin&quot;!==n&amp;&amp;(a-=pe.css(e,&quot;border&quot;+Pe[o]+&quot;Width&quot;,!0,i))):(a+=pe.css(e,&quot;padding&quot;+Pe[o],!0,i),&quot;padding&quot;!==n&amp;&amp;(a+=pe.css(e,&quot;border&quot;+Pe[o]+&quot;Width&quot;,!0,i)));return a}function M(e,t,n){var r=!0,i=&quot;width&quot;===t?e.offsetWidth:e.offsetHeight,o=ht(e),a=de.boxSizing&amp;&amp;&quot;border-box&quot;===pe.css(e,&quot;boxSizing&quot;,!1,o);if(0&gt;=i||null==i){if(i=mt(e,t,o),(0&gt;i||null==i)&amp;&amp;(i=e.style[t]),dt.test(i))return i;r=a&amp;&amp;(de.boxSizingReliable()||i===e.style[t]),i=parseFloat(i)||0}return i+O(e,t,n||(a?&quot;border&quot;:&quot;content&quot;),r,o)+&quot;px&quot;}function P(e,t,n,r,i){return new P.prototype.init(e,t,n,r,i)}function q(){return e.setTimeout(function(){Et=void 0}),Et=pe.now()}function F(e,t){var n,r={height:e},i=0;for(t=t?1:0;4&gt;i;i+=2-t)n=Pe[i],r[&quot;margin&quot;+n]=r[&quot;padding&quot;+n]=e;return t&amp;&amp;(r.opacity=r.width=e),r}function B(e,t,n){for(var r,i=(W.tweeners[t]||[]).concat(W.tweeners[&quot;*&quot;]),o=0,a=i.length;a&gt;o;o++)if(r=i[o].call(n,t,e))return r}function z(e,t,n){var r,i,o,a,s,l,u,c,d=this,f={},p=e.style,h=e.nodeType&amp;&amp;qe(e),m=pe._data(e,&quot;fxshow&quot;);n.queue||(s=pe._queueHooks(e,&quot;fx&quot;),null==s.unqueued&amp;&amp;(s.unqueued=0,l=s.empty.fire,s.empty.fire=function(){s.unqueued||l()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,pe.queue(e,&quot;fx&quot;).length||s.empty.fire()})})),1===e.nodeType&amp;&amp;(&quot;height&quot;in t||&quot;width&quot;in t)&amp;&amp;(n.overflow=[p.overflow,p.overflowX,p.overflowY],u=pe.css(e,&quot;display&quot;),c=&quot;none&quot;===u?pe._data(e,&quot;olddisplay&quot;)||L(e.nodeName):u,&quot;inline&quot;===c&amp;&amp;&quot;none&quot;===pe.css(e,&quot;float&quot;)&amp;&amp;(de.inlineBlockNeedsLayout&amp;&amp;&quot;inline&quot;!==L(e.nodeName)?p.zoom=1:p.display=&quot;inline-block&quot;)),n.overflow&amp;&amp;(p.overflow=&quot;hidden&quot;,de.shrinkWrapBlocks()||d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],Nt.exec(i)){if(delete t[r],o=o||&quot;toggle&quot;===i,i===(h?&quot;hide&quot;:&quot;show&quot;)){if(&quot;show&quot;!==i||!m||void 0===m[r])continue;h=!0}f[r]=m&amp;&amp;m[r]||pe.style(e,r)}else u=void 0;if(pe.isEmptyObject(f))&quot;inline&quot;===(&quot;none&quot;===u?L(e.nodeName):u)&amp;&amp;(p.display=u);else{m?&quot;hidden&quot;in m&amp;&amp;(h=m.hidden):m=pe._data(e,&quot;fxshow&quot;,{}),o&amp;&amp;(m.hidden=!h),h?pe(e).show():d.done(function(){pe(e).hide()}),d.done(function(){var t;pe._removeData(e,&quot;fxshow&quot;);for(t in f)pe.style(e,t,f[t])});for(r in f)a=B(h?m[r]:0,r,d),r in m||(m[r]=a.start,h&amp;&amp;(a.end=a.start,a.start=&quot;width&quot;===r||&quot;height&quot;===r?1:0))}}function R(e,t){var n,r,i,o,a;for(n in e)if(r=pe.camelCase(n),i=t[r],o=e[n],pe.isArray(o)&amp;&amp;(i=o[1],o=e[n]=o[0]),n!==r&amp;&amp;(e[r]=o,delete e[n]),a=pe.cssHooks[r],a&amp;&amp;&quot;expand&quot;in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function W(e,t,n){var r,i,o=0,a=W.prefilters.length,s=pe.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;for(var t=Et||q(),n=Math.max(0,u.startTime+u.duration-t),r=n/u.duration||0,o=1-r,a=0,l=u.tweens.length;l&gt;a;a++)u.tweens[a].run(o);return s.notifyWith(e,[u,o,n]),1&gt;o&amp;&amp;l?n:(s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:pe.extend({},t),opts:pe.extend(!0,{specialEasing:{},easing:pe.easing._default},n),originalProperties:t,originalOptions:n,startTime:Et||q(),duration:n.duration,tweens:[],createTween:function(t,n){var r=pe.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;r&gt;n;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),c=u.props;for(R(c,u.opts.specialEasing);a&gt;o;o++)if(r=W.prefilters[o].call(u,e,c,u.opts))return pe.isFunction(r.stop)&amp;&amp;(pe._queueHooks(u.elem,u.opts.queue).stop=pe.proxy(r.stop,r)),r;return pe.map(c,B,u),pe.isFunction(u.opts.start)&amp;&amp;u.opts.start.call(e,u),pe.fx.timer(pe.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function $(e){return pe.attr(e,&quot;class&quot;)||&quot;&quot;}function X(e){return function(t,n){&quot;string&quot;!=typeof t&amp;&amp;(n=t,t=&quot;*&quot;);var r,i=0,o=t.toLowerCase().match(je)||[];if(pe.isFunction(n))for(;r=o[i++];)&quot;+&quot;===r.charAt(0)?(r=r.slice(1)||&quot;*&quot;,(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function U(e,t,n,r){function i(s){var l;return o[s]=!0,pe.each(e[s]||[],function(e,s){var u=s(t,n,r);return&quot;string&quot;!=typeof u||a||o[u]?a?!(l=u):void 0:(t.dataTypes.unshift(u),i(u),!1)}),l}var o={},a=e===Kt;return i(t.dataTypes[0])||!o[&quot;*&quot;]&amp;&amp;i(&quot;*&quot;)}function Y(e,t){var n,r,i=pe.ajaxSettings.flatOptions||{};for(r in t)void 0!==t[r]&amp;&amp;((i[r]?e:n||(n={}))[r]=t[r]);return n&amp;&amp;pe.extend(!0,e,n),e}function V(e,t,n){for(var r,i,o,a,s=e.contents,l=e.dataTypes;&quot;*&quot;===l[0];)l.shift(),void 0===i&amp;&amp;(i=e.mimeType||t.getResponseHeader(&quot;Content-Type&quot;));if(i)for(a in s)if(s[a]&amp;&amp;s[a].test(i)){l.unshift(a);break}if(l[0]in n)o=l[0];else{for(a in n){if(!l[0]||e.converters[a+&quot; &quot;+l[0]]){o=a;break}r||(r=a)}o=o||r}return o?(o!==l[0]&amp;&amp;l.unshift(o),n[o]):void 0}function G(e,t,n,r){var i,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&amp;&amp;(n[e.responseFields[o]]=t),!l&amp;&amp;r&amp;&amp;e.dataFilter&amp;&amp;(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if(&quot;*&quot;===o)o=l;else if(&quot;*&quot;!==l&amp;&amp;l!==o){if(a=u[l+&quot; &quot;+o]||u[&quot;* &quot;+o],!a)for(i in u)if(s=i.split(&quot; &quot;),s[1]===o&amp;&amp;(a=u[l+&quot; &quot;+s[0]]||u[&quot;* &quot;+s[0]])){a===!0?a=u[i]:u[i]!==!0&amp;&amp;(o=s[0],c.unshift(s[1]));break}if(a!==!0)if(a&amp;&amp;e[&quot;throws&quot;])t=a(t);else try{t=a(t)}catch(d){return{state:&quot;parsererror&quot;,error:a?d:&quot;No conversion from &quot;+l+&quot; to &quot;+o}}}return{state:&quot;success&quot;,data:t}}function Z(e){return e.style&amp;&amp;e.style.display||pe.css(e,&quot;display&quot;)}function J(e){if(!pe.contains(e.ownerDocument||re,e))return!0;for(;e&amp;&amp;1===e.nodeType;){if(&quot;none&quot;===Z(e)||&quot;hidden&quot;===e.type)return!0;e=e.parentNode}return!1}function K(e,t,n,r){var i;if(pe.isArray(t))pe.each(t,function(t,i){n||rn.test(e)?r(e,i):K(e+&quot;[&quot;+(&quot;object&quot;==typeof i&amp;&amp;null!=i?t:&quot;&quot;)+&quot;]&quot;,i,n,r)});else if(n||&quot;object&quot;!==pe.type(t))r(e,t);else for(i in t)K(e+&quot;[&quot;+i+&quot;]&quot;,t[i],n,r)}function Q(){try{return new e.XMLHttpRequest}catch(t){}}function ee(){try{return new e.ActiveXObject(&quot;Microsoft.XMLHTTP&quot;)}catch(t){}}function te(e){return pe.isWindow(e)?e:9===e.nodeType?e.defaultView||e.parentWindow:!1}var ne=[],re=e.document,ie=ne.slice,oe=ne.concat,ae=ne.push,se=ne.indexOf,le={},ue=le.toString,ce=le.hasOwnProperty,de={},fe=&quot;1.12.4&quot;,pe=function(e,t){return new pe.fn.init(e,t)},he=/^[suFEFFxA0]+|[suFEFFxA0]+$/g,me=/^-ms-/,ge=/-([da-z])/gi,ve=function(e,t){return t.toUpperCase()};pe.fn=pe.prototype={jquery:fe,constructor:pe,selector:&quot;&quot;,length:0,toArray:function(){return ie.call(this)},get:function(e){return null!=e?0&gt;e?this[e+this.length]:this[e]:ie.call(this)},pushStack:function(e){var t=pe.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return pe.each(this,e)},map:function(e){return this.pushStack(pe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(ie.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0&gt;e?t:0);return this.pushStack(n&gt;=0&amp;&amp;t&gt;n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ae,sort:ne.sort,splice:ne.splice},pe.extend=pe.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for(&quot;boolean&quot;==typeof a&amp;&amp;(u=a,a=arguments[s]||{},s++),&quot;object&quot;==typeof a||pe.isFunction(a)||(a={}),s===l&amp;&amp;(a=this,s--);l&gt;s;s++)if(null!=(i=arguments[s]))for(r in i)e=a[r],n=i[r],a!==n&amp;&amp;(u&amp;&amp;n&amp;&amp;(pe.isPlainObject(n)||(t=pe.isArray(n)))?(t?(t=!1,o=e&amp;&amp;pe.isArray(e)?e:[]):o=e&amp;&amp;pe.isPlainObject(e)?e:{},a[r]=pe.extend(u,o,n)):void 0!==n&amp;&amp;(a[r]=n));return a},pe.extend({expando:&quot;jQuery&quot;+(fe+Math.random()).replace(/D/g,&quot;&quot;),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return&quot;function&quot;===pe.type(e)},isArray:Array.isArray||function(e){return&quot;array&quot;===pe.type(e)},isWindow:function(e){return null!=e&amp;&amp;e==e.window},isNumeric:function(e){var t=e&amp;&amp;e.toString();return!pe.isArray(e)&amp;&amp;t-parseFloat(t)+1&gt;=0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},isPlainObject:function(e){var t;if(!e||&quot;object&quot;!==pe.type(e)||e.nodeType||pe.isWindow(e))return!1;try{if(e.constructor&amp;&amp;!ce.call(e,&quot;constructor&quot;)&amp;&amp;!ce.call(e.constructor.prototype,&quot;isPrototypeOf&quot;))return!1}catch(n){return!1}if(!de.ownFirst)for(t in e)return ce.call(e,t);for(t in e);return void 0===t||ce.call(e,t)},type:function(e){return null==e?e+&quot;&quot;:&quot;object&quot;==typeof e||&quot;function&quot;==typeof e?le[ue.call(e)]||&quot;object&quot;:typeof e},globalEval:function(t){t&amp;&amp;pe.trim(t)&amp;&amp;(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(me,&quot;ms-&quot;).replace(ge,ve)},nodeName:function(e,t){return e.nodeName&amp;&amp;e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var r,i=0;if(n(e))for(r=e.length;r&gt;i&amp;&amp;t.call(e[i],i,e[i])!==!1;i++);else for(i in e)if(t.call(e[i],i,e[i])===!1)break;return e},trim:function(e){return null==e?&quot;&quot;:(e+&quot;&quot;).replace(he,&quot;&quot;)},makeArray:function(e,t){var r=t||[];return null!=e&amp;&amp;(n(Object(e))?pe.merge(r,&quot;string&quot;==typeof e?[e]:e):ae.call(r,e)),r},inArray:function(e,t,n){var r;if(t){if(se)return se.call(t,e,n);for(r=t.length,n=n?0&gt;n?Math.max(0,r+n):n:0;r&gt;n;n++)if(n in t&amp;&amp;t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;n&gt;r;)e[i++]=t[r++];if(n!==n)for(;void 0!==t[r];)e[i++]=t[r++];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,a=e.length,s=!n;a&gt;o;o++)r=!t(e[o],o),r!==s&amp;&amp;i.push(e[o]);return i},map:function(e,t,r){var i,o,a=0,s=[];if(n(e))for(i=e.length;i&gt;a;a++)o=t(e[a],a,r),null!=o&amp;&amp;s.push(o);else for(a in e)o=t(e[a],a,r),null!=o&amp;&amp;s.push(o);return oe.apply([],s)},guid:1,proxy:function(e,t){var n,r,i;return&quot;string&quot;==typeof t&amp;&amp;(i=e[t],t=e,e=i),pe.isFunction(e)?(n=ie.call(arguments,2),r=function(){return e.apply(t||this,n.concat(ie.call(arguments)))},r.guid=e.guid=e.guid||pe.guid++,r):void 0},now:function(){return+new Date},support:de}),&quot;function&quot;==typeof Symbol&amp;&amp;(pe.fn[Symbol.iterator]=ne[Symbol.iterator]),pe.each(&quot;Boolean Number String Function Array Date RegExp Object Error Symbol&quot;.split(&quot; &quot;),function(e,t){le[&quot;[object &quot;+t+&quot;]&quot;]=t.toLowerCase()});var ye=function(e){function t(e,t,n,r){var i,o,a,s,l,u,d,p,h=t&amp;&amp;t.ownerDocument,m=t?t.nodeType:9;if(n=n||[],&quot;string&quot;!=typeof e||!e||1!==m&amp;&amp;9!==m&amp;&amp;11!==m)return n;if(!r&amp;&amp;((t?t.ownerDocument||t:B)!==I&amp;&amp;D(t),t=t||I,H)){if(11!==m&amp;&amp;(u=ve.exec(e)))if(i=u[1]){if(9===m){if(!(a=t.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(h&amp;&amp;(a=h.getElementById(i))&amp;&amp;q(t,a)&amp;&amp;a.id===i)return n.push(a),n}else{if(u[2])return K.apply(n,t.getElementsByTagName(e)),n;if((i=u[3])&amp;&amp;w.getElementsByClassName&amp;&amp;t.getElementsByClassName)return K.apply(n,t.getElementsByClassName(i)),n}if(w.qsa&amp;&amp;!X[e+&quot; &quot;]&amp;&amp;(!O||!O.test(e))){if(1!==m)h=t,p=e;else if(&quot;object&quot;!==t.nodeName.toLowerCase()){for((s=t.getAttribute(&quot;id&quot;))?s=s.replace(be,&quot;$&amp;&quot;):t.setAttribute(&quot;id&quot;,s=F),d=E(e),o=d.length,l=fe.test(s)?&quot;#&quot;+s:&quot;[id=&#39;&quot;+s+&quot;&#39;]&quot;;o--;)d[o]=l+&quot; &quot;+f(d[o]);p=d.join(&quot;,&quot;),h=ye.test(e)&amp;&amp;c(t.parentNode)||t}if(p)try{return K.apply(n,h.querySelectorAll(p)),n}catch(g){}finally{s===F&amp;&amp;t.removeAttribute(&quot;id&quot;)}}}return N(e.replace(se,&quot;$1&quot;),t,n,r)}function n(){function e(n,r){return t.push(n+&quot; &quot;)&gt;C.cacheLength&amp;&amp;delete e[t.shift()],e[n+&quot; &quot;]=r}var t=[];return e}function r(e){return e[F]=!0,e}function i(e){var t=I.createElement(&quot;div&quot;);try{return!!e(t)}catch(n){return!1}finally{t.parentNode&amp;&amp;t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split(&quot;|&quot;),r=n.length;r--;)C.attrHandle[n[r]]=t}function a(e,t){var n=t&amp;&amp;e,r=n&amp;&amp;1===e.nodeType&amp;&amp;1===t.nodeType&amp;&amp;(~t.sourceIndex||Y)-(~e.sourceIndex||Y);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){var n=t.nodeName.toLowerCase();return&quot;input&quot;===n&amp;&amp;t.type===e}}function l(e){return function(t){var n=t.nodeName.toLowerCase();return(&quot;input&quot;===n||&quot;button&quot;===n)&amp;&amp;t.type===e}}function u(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&amp;&amp;(n[i]=!(r[i]=n[i]))})})}function c(e){return e&amp;&amp;&quot;undefined&quot;!=typeof e.getElementsByTagName&amp;&amp;e}function d(){}function f(e){for(var t=0,n=e.length,r=&quot;&quot;;n&gt;t;t++)r+=e[t].value;return r}function p(e,t,n){var r=t.dir,i=n&amp;&amp;&quot;parentNode&quot;===r,o=R++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,a){var s,l,u,c=[z,o];if(a){for(;t=t[r];)if((1===t.nodeType||i)&amp;&amp;e(t,n,a))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(u=t[F]||(t[F]={}),l=u[t.uniqueID]||(u[t.uniqueID]={}),(s=l[r])&amp;&amp;s[0]===z&amp;&amp;s[1]===o)return c[2]=s[2];if(l[r]=c,c[2]=e(t,n,a))return!0}}}function h(e){return e.length&gt;1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function m(e,n,r){for(var i=0,o=n.length;o&gt;i;i++)t(e,n[i],r);return r}function g(e,t,n,r,i){for(var o,a=[],s=0,l=e.length,u=null!=t;l&gt;s;s++)(o=e[s])&amp;&amp;(n&amp;&amp;!n(o,r,i)||(a.push(o),u&amp;&amp;t.push(s)));return a}function v(e,t,n,i,o,a){return i&amp;&amp;!i[F]&amp;&amp;(i=v(i)),o&amp;&amp;!o[F]&amp;&amp;(o=v(o,a)),r(function(r,a,s,l){var u,c,d,f=[],p=[],h=a.length,v=r||m(t||&quot;*&quot;,s.nodeType?[s]:s,[]),y=!e||!r&amp;&amp;t?v:g(v,f,e,s,l),b=n?o||(r?e:h||i)?[]:a:y;if(n&amp;&amp;n(y,b,s,l),i)for(u=g(b,p),i(u,[],s,l),c=u.length;c--;)(d=u[c])&amp;&amp;(b[p[c]]=!(y[p[c]]=d));if(r){if(o||e){if(o){for(u=[],c=b.length;c--;)(d=b[c])&amp;&amp;u.push(y[c]=d);o(null,b=[],u,l)}for(c=b.length;c--;)(d=b[c])&amp;&amp;(u=o?ee(r,d):f[c])&gt;-1&amp;&amp;(r[u]=!(a[u]=d))}}else b=g(b===a?b.splice(h,b.length):b),o?o(null,a,b,l):K.apply(a,b)})}function y(e){for(var t,n,r,i=e.length,o=C.relative[e[0].type],a=o||C.relative[&quot; &quot;],s=o?1:0,l=p(function(e){return e===t},a,!0),u=p(function(e){return ee(t,e)&gt;-1},a,!0),c=[function(e,n,r){var i=!o&amp;&amp;(r||n!==A)||((t=n).nodeType?l(e,n,r):u(e,n,r));return t=null,i}];i&gt;s;s++)if(n=C.relative[e[s].type])c=[p(h(c),n)];else{if(n=C.filter[e[s].type].apply(null,e[s].matches),n[F]){for(r=++s;i&gt;r&amp;&amp;!C.relative[e[r].type];r++);return v(s&gt;1&amp;&amp;h(c),s&gt;1&amp;&amp;f(e.slice(0,s-1).concat({value:&quot; &quot;===e[s-2].type?&quot;*&quot;:&quot;&quot;})).replace(se,&quot;$1&quot;),n,r&gt;s&amp;&amp;y(e.slice(s,r)),i&gt;r&amp;&amp;y(e=e.slice(r)),i&gt;r&amp;&amp;f(e))}c.push(n)}return h(c)}function b(e,n){var i=n.length&gt;0,o=e.length&gt;0,a=function(r,a,s,l,u){var c,d,f,p=0,h=&quot;0&quot;,m=r&amp;&amp;[],v=[],y=A,b=r||o&amp;&amp;C.find.TAG(&quot;*&quot;,u),x=z+=null==y?1:Math.random()||.1,w=b.length;for(u&amp;&amp;(A=a===I||a||u);h!==w&amp;&amp;null!=(c=b[h]);h++){if(o&amp;&amp;c){for(d=0,a||c.ownerDocument===I||(D(c),s=!H);f=e[d++];)if(f(c,a||I,s)){l.push(c);break}u&amp;&amp;(z=x)}i&amp;&amp;((c=!f&amp;&amp;c)&amp;&amp;p--,r&amp;&amp;m.push(c))}if(p+=h,i&amp;&amp;h!==p){for(d=0;f=n[d++];)f(m,v,a,s);if(r){if(p&gt;0)for(;h--;)m[h]||v[h]||(v[h]=Z.call(l));v=g(v)}K.apply(l,v),u&amp;&amp;!r&amp;&amp;v.length&gt;0&amp;&amp;p+n.length&gt;1&amp;&amp;t.uniqueSort(l)}return u&amp;&amp;(z=x,A=y),m};return i?r(a):a}var x,w,C,T,k,E,S,N,A,j,L,D,I,_,H,O,M,P,q,F=&quot;sizzle&quot;+1*new Date,B=e.document,z=0,R=0,W=n(),$=n(),X=n(),U=function(e,t){return e===t&amp;&amp;(L=!0),0},Y=1n;n++)if(e[n]===t)return n;return-1},te=&quot;checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped&quot;,ne=&quot;[x20trnf]&quot;,re=&quot;(?:.|[w-]|[^x00-xa0])+&quot;,ie=&quot;[&quot;+ne+&quot;*(&quot;+re+&quot;)(?:&quot;+ne+&quot;*([*^$|!~]?=)&quot;+ne+&quot;*(?:&#39;((?:.|[^&#39;])*)&#39;|&quot;((?:.|[^&quot;])*)&quot;|(&quot;+re+&quot;))|)&quot;+ne+&quot;*]&quot;,oe=&quot;:(&quot;+re+&quot;)(?:(((&#39;((?:.|[^&#39;])*)&#39;|&quot;((?:.|[^&quot;])*)&quot;)|((?:.|[^()[]]|&quot;+ie+&quot;)*)|.*))|)&quot;,ae=new RegExp(ne+&quot;+&quot;,&quot;g&quot;),se=new RegExp(&quot;^&quot;+ne+&quot;+|((?:^|[^])(?:.)*)&quot;+ne+&quot;+$&quot;,&quot;g&quot;),le=new RegExp(&quot;^&quot;+ne+&quot;*,&quot;+ne+&quot;*&quot;),ue=new RegExp(&quot;^&quot;+ne+&quot;*([&gt;+~]|&quot;+ne+&quot;)&quot;+ne+&quot;*&quot;),ce=new RegExp(&quot;=&quot;+ne+&quot;*([^]&#39;&quot;]*?)&quot;+ne+&quot;*]&quot;,&quot;g&quot;),de=new RegExp(oe),fe=new RegExp(&quot;^&quot;+re+&quot;$&quot;),pe={ID:new RegExp(&quot;^#(&quot;+re+&quot;)&quot;),CLASS:new RegExp(&quot;^.(&quot;+re+&quot;)&quot;),TAG:new RegExp(&quot;^(&quot;+re+&quot;|[*])&quot;),ATTR:new RegExp(&quot;^&quot;+ie),PSEUDO:new RegExp(&quot;^&quot;+oe),CHILD:new RegExp(&quot;^:(only|first|last|nth|nth-last)-(child|of-type)(?:(&quot;+ne+&quot;*(even|odd|(([+-]|)(d*)n|)&quot;+ne+&quot;*(?:([+-]|)&quot;+ne+&quot;*(d+)|))&quot;+ne+&quot;*)|)&quot;,&quot;i&quot;),bool:new RegExp(&quot;^(?:&quot;+te+&quot;)$&quot;,&quot;i&quot;),needsContext:new RegExp(&quot;^&quot;+ne+&quot;*[&gt;+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:(&quot;+ne+&quot;*((?:-d)?d*)&quot;+ne+&quot;*)|)(?=[^-]|$)&quot;,&quot;i&quot;)},he=/^(?:input|select|textarea|button)$/i,me=/^hd$/i,ge=/^[^{]+{s*[native w/,ve=/^(?:#([w-]+)|(w+)|.([w-]+))$/,ye=/[+~]/,be=/&#39;|/g,xe=new RegExp(&quot;([da-f]{1,6}&quot;+ne+&quot;?|(&quot;+ne+&quot;)|.)&quot;,&quot;ig&quot;),we=function(e,t,n){var r=&quot;0x&quot;+t-65536;return r!==r||n?t:0&gt;r?String.fromCharCode(r+65536):String.fromCharCode(r&gt;&gt;10|55296,1023&amp;r|56320)},Ce=function(){D()};try{K.apply(G=Q.call(B.childNodes),B.childNodes),G[B.childNodes.length].nodeType}catch(Te){K={apply:G.length?function(e,t){J.apply(e,Q.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}w=t.support={},k=t.isXML=function(e){var t=e&amp;&amp;(e.ownerDocument||e).documentElement;return t?&quot;HTML&quot;!==t.nodeName:!1},D=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:B;return r!==I&amp;&amp;9===r.nodeType&amp;&amp;r.documentElement?(I=r,_=I.documentElement,H=!k(I),(n=I.defaultView)&amp;&amp;n.top!==n&amp;&amp;(n.addEventListener?n.addEventListener(&quot;unload&quot;,Ce,!1):n.attachEvent&amp;&amp;n.attachEvent(&quot;onunload&quot;,Ce)),w.attributes=i(function(e){return e.className=&quot;i&quot;,!e.getAttribute(&quot;className&quot;)}),w.getElementsByTagName=i(function(e){return e.appendChild(I.createComment(&quot;&quot;)),!e.getElementsByTagName(&quot;*&quot;).length}),w.getElementsByClassName=ge.test(I.getElementsByClassName),w.getById=i(function(e){return _.appendChild(e).id=F,!I.getElementsByName||!I.getElementsByName(F).length}),w.getById?(C.find.ID=function(e,t){if(&quot;undefined&quot;!=typeof t.getElementById&amp;&amp;H){var n=t.getElementById(e);return n?[n]:[]}},C.filter.ID=function(e){var t=e.replace(xe,we);return function(e){return e.getAttribute(&quot;id&quot;)===t}}):(delete C.find.ID,C.filter.ID=function(e){var t=e.replace(xe,we);return function(e){var n=&quot;undefined&quot;!=typeof e.getAttributeNode&amp;&amp;e.getAttributeNode(&quot;id&quot;);return n&amp;&amp;n.value===t}}),C.find.TAG=w.getElementsByTagName?function(e,t){return&quot;undefined&quot;!=typeof t.getElementsByTagName?t.getElementsByTagName(e):w.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if(&quot;*&quot;===e){for(;n=o[i++];)1===n.nodeType&amp;&amp;r.push(n);return r}return o},C.find.CLASS=w.getElementsByClassName&amp;&amp;function(e,t){return&quot;undefined&quot;!=typeof t.getElementsByClassName&amp;&amp;H?t.getElementsByClassName(e):void 0},M=[],O=[],(w.qsa=ge.test(I.querySelectorAll))&amp;&amp;(i(function(e){_.appendChild(e).innerHTML=&quot;&quot;,e.querySelectorAll(&quot;[msallowcapture^=&#39;&#39;]&quot;).length&amp;&amp;O.push(&quot;[*^$]=&quot;+ne+&quot;*(?:&#39;&#39;|&quot;&quot;)&quot;),e.querySelectorAll(&quot;[selected]&quot;).length||O.push(&quot;[&quot;+ne+&quot;*(?:value|&quot;+te+&quot;)&quot;),e.querySelectorAll(&quot;[id~=&quot;+F+&quot;-]&quot;).length||O.push(&quot;~=&quot;),e.querySelectorAll(&quot;:checked&quot;).length||O.push(&quot;:checked&quot;),e.querySelectorAll(&quot;a#&quot;+F+&quot;+*&quot;).length||O.push(&quot;.#.+[+~]&quot;)}),i(function(e){var t=I.createElement(&quot;input&quot;);t.setAttribute(&quot;type&quot;,&quot;hidden&quot;),e.appendChild(t).setAttribute(&quot;name&quot;,&quot;D&quot;),e.querySelectorAll(&quot;[name=d]&quot;).length&amp;&amp;O.push(&quot;name&quot;+ne+&quot;*[*^$|!~]?=&quot;),e.querySelectorAll(&quot;:enabled&quot;).length||O.push(&quot;:enabled&quot;,&quot;:disabled&quot;),e.querySelectorAll(&quot;*,:x&quot;),O.push(&quot;,.*:&quot;)})),(w.matchesSelector=ge.test(P=_.matches||_.webkitMatchesSelector||_.mozMatchesSelector||_.oMatchesSelector||_.msMatchesSelector))&amp;&amp;i(function(e){w.disconnectedMatch=P.call(e,&quot;div&quot;),P.call(e,&quot;[s!=&#39;&#39;]:x&quot;),M.push(&quot;!=&quot;,oe)}),O=O.length&amp;&amp;new RegExp(O.join(&quot;|&quot;)),M=M.length&amp;&amp;new RegExp(M.join(&quot;|&quot;)),t=ge.test(_.compareDocumentPosition),q=t||ge.test(_.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&amp;&amp;t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&amp;&amp;16&amp;e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},U=t?function(e,t){if(e===t)return L=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&amp;n||!w.sortDetached&amp;&amp;t.compareDocumentPosition(e)===n?e===I||e.ownerDocument===B&amp;&amp;q(B,e)?-1:t===I||t.ownerDocument===B&amp;&amp;q(B,t)?1:j?ee(j,e)-ee(j,t):0:4&amp;n?-1:1)}:function(e,t){if(e===t)return L=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,s=[e],l=[t];if(!i||!o)return e===I?-1:t===I?1:i?-1:o?1:j?ee(j,e)-ee(j,t):0;if(i===o)return a(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;s[r]===l[r];)r++;return r?a(s[r],l[r]):s[r]===B?-1:l[r]===B?1:0},I):I},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==I&amp;&amp;D(e),n=n.replace(ce,&quot;=&#39;$1&#39;]&quot;),w.matchesSelector&amp;&amp;H&amp;&amp;!X[n+&quot; &quot;]&amp;&amp;(!M||!M.test(n))&amp;&amp;(!O||!O.test(n)))try{var r=P.call(e,n);if(r||w.disconnectedMatch||e.document&amp;&amp;11!==e.document.nodeType)return r}catch(i){}return t(n,I,null,[e]).length&gt;0},t.contains=function(e,t){return(e.ownerDocument||e)!==I&amp;&amp;D(e),q(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==I&amp;&amp;D(e);var n=C.attrHandle[t.toLowerCase()],r=n&amp;&amp;V.call(C.attrHandle,t.toLowerCase())?n(e,t,!H):void 0;return void 0!==r?r:w.attributes||!H?e.getAttribute(t):(r=e.getAttributeNode(t))&amp;&amp;r.specified?r.value:null},t.error=function(e){throw new Error(&quot;Syntax error, unrecognized expression: &quot;+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(L=!w.detectDuplicates,j=!w.sortStable&amp;&amp;e.slice(0),e.sort(U),L){for(;t=e[i++];)t===e[i]&amp;&amp;(r=n.push(i));for(;r--;)e.splice(n[r],1)}return j=null,e},T=t.getText=function(e){var t,n=&quot;&quot;,r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if(&quot;string&quot;==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=T(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=T(t);return n},C=t.selectors={cacheLength:50,createPseudo:r,match:pe,attrHandle:{},find:{},relative:{&quot;&gt;&quot;:{dir:&quot;parentNode&quot;,first:!0},&quot; &quot;:{dir:&quot;parentNode&quot;},&quot;+&quot;:{dir:&quot;previousSibling&quot;,first:!0},&quot;~&quot;:{dir:&quot;previousSibling&quot;}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(xe,we),e[3]=(e[3]||e[4]||e[5]||&quot;&quot;).replace(xe,we),&quot;~=&quot;===e[2]&amp;&amp;(e[3]=&quot; &quot;+e[3]+&quot; &quot;),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),&quot;nth&quot;===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(&quot;even&quot;===e[3]||&quot;odd&quot;===e[3])),e[5]=+(e[7]+e[8]||&quot;odd&quot;===e[3])):e[3]&amp;&amp;t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&amp;&amp;e[2];return pe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||&quot;&quot;:n&amp;&amp;de.test(n)&amp;&amp;(t=E(n,!0))&amp;&amp;(t=n.indexOf(&quot;)&quot;,n.length-t)-n.length)&amp;&amp;(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(xe,we).toLowerCase();return&quot;*&quot;===e?function(){return!0}:function(e){return e.nodeName&amp;&amp;e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=W[e+&quot; &quot;];return t||(t=new RegExp(&quot;(^|&quot;+ne+&quot;)&quot;+e+&quot;(&quot;+ne+&quot;|$)&quot;))&amp;&amp;W(e,function(e){return t.test(&quot;string&quot;==typeof e.className&amp;&amp;e.className||&quot;undefined&quot;!=typeof e.getAttribute&amp;&amp;e.getAttribute(&quot;class&quot;)||&quot;&quot;)})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?&quot;!=&quot;===n:n?(o+=&quot;&quot;,&quot;=&quot;===n?o===r:&quot;!=&quot;===n?o!==r:&quot;^=&quot;===n?r&amp;&amp;0===o.indexOf(r):&quot;*=&quot;===n?r&amp;&amp;o.indexOf(r)&gt;-1:&quot;$=&quot;===n?r&amp;&amp;o.slice(-r.length)===r:&quot;~=&quot;===n?(&quot; &quot;+o.replace(ae,&quot; &quot;)+&quot; &quot;).indexOf(r)&gt;-1:&quot;|=&quot;===n?o===r||o.slice(0,r.length+1)===r+&quot;-&quot;:!1):!0}},CHILD:function(e,t,n,r,i){var o=&quot;nth&quot;!==e.slice(0,3),a=&quot;last&quot;!==e.slice(-4),s=&quot;of-type&quot;===t;return 1===r&amp;&amp;0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,d,f,p,h,m=o!==a?&quot;nextSibling&quot;:&quot;previousSibling&quot;,g=t.parentNode,v=s&amp;&amp;t.nodeName.toLowerCase(),y=!l&amp;&amp;!s,b=!1;if(g){if(o){for(;m;){for(f=t;f=f[m];)if(s?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;h=m=&quot;only&quot;===e&amp;&amp;!h&amp;&amp;&quot;nextSibling&quot;}return!0}if(h=[a?g.firstChild:g.lastChild],a&amp;&amp;y){for(f=g,d=f[F]||(f[F]={}),c=d[f.uniqueID]||(d[f.uniqueID]={}),u=c[e]||[],p=u[0]===z&amp;&amp;u[1],b=p&amp;&amp;u[2],f=p&amp;&amp;g.childNodes[p];f=++p&amp;&amp;f&amp;&amp;f[m]||(b=p=0)||h.pop();)if(1===f.nodeType&amp;&amp;++b&amp;&amp;f===t){c[e]=[z,p,b];break}}else if(y&amp;&amp;(f=t,d=f[F]||(f[F]={}),c=d[f.uniqueID]||(d[f.uniqueID]={}),u=c[e]||[],p=u[0]===z&amp;&amp;u[1],b=p),b===!1)for(;(f=++p&amp;&amp;f&amp;&amp;f[m]||(b=p=0)||h.pop())&amp;&amp;((s?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++b||(y&amp;&amp;(d=f[F]||(f[F]={}),c=d[f.uniqueID]||(d[f.uniqueID]={}),c[e]=[z,b]),f!==t)););return b-=i,b===r||b%r===0&amp;&amp;b/r&gt;=0}}},PSEUDO:function(e,n){var i,o=C.pseudos[e]||C.setFilters[e.toLowerCase()]||t.error(&quot;unsupported pseudo: &quot;+e);return o[F]?o(n):o.length&gt;1?(i=[e,e,&quot;&quot;,n],C.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),a=i.length;a--;)r=ee(e,i[a]),e[r]=!(t[r]=i[a])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=S(e.replace(se,&quot;$1&quot;));return i[F]?r(function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&amp;&amp;(e[s]=!(t[s]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length&gt;0}}),contains:r(function(e){return e=e.replace(xe,we),function(t){return(t.textContent||t.innerText||T(t)).indexOf(e)&gt;-1}}),lang:r(function(e){return fe.test(e||&quot;&quot;)||t.error(&quot;unsupported lang: &quot;+e),e=e.replace(xe,we).toLowerCase(),function(t){var n;do if(n=H?t.lang:t.getAttribute(&quot;xml:lang&quot;)||t.getAttribute(&quot;lang&quot;))return n=n.toLowerCase(),n===e||0===n.indexOf(e+&quot;-&quot;);while((t=t.parentNode)&amp;&amp;1===t.nodeType);return!1}}),target:function(t){var n=e.location&amp;&amp;e.location.hash;return n&amp;&amp;n.slice(1)===t.id},root:function(e){return e===_},focus:function(e){return e===I.activeElement&amp;&amp;(!I.hasFocus||I.hasFocus())&amp;&amp;!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return&quot;input&quot;===t&amp;&amp;!!e.checked||&quot;option&quot;===t&amp;&amp;!!e.selected},selected:function(e){return e.parentNode&amp;&amp;e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeTypen?n+t:n]}),even:u(function(e,t){for(var n=0;t&gt;n;n+=2)e.push(n);return e}),odd:u(function(e,t){for(var n=1;t&gt;n;n+=2)e.push(n);return e}),lt:u(function(e,t,n){for(var r=0&gt;n?n+t:n;--r&gt;=0;)e.push(r);return e}),gt:u(function(e,t,n){for(var r=0&gt;n?n+t:n;++r2&amp;&amp;&quot;ID&quot;===(a=o[0]).type&amp;&amp;w.getById&amp;&amp;9===t.nodeType&amp;&amp;H&amp;&amp;C.relative[o[1].type]){if(t=(C.find.ID(a.matches[0].replace(xe,we),t)||[])[0],!t)return n;u&amp;&amp;(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=pe.needsContext.test(e)?0:o.length;i--&amp;&amp;(a=o[i],!C.relative[s=a.type]);)if((l=C.find[s])&amp;&amp;(r=l(a.matches[0].replace(xe,we),ye.test(o[0].type)&amp;&amp;c(t.parentNode)||t))){if(o.splice(i,1),e=r.length&amp;&amp;f(o),!e)return K.apply(n,r),n;break}}return(u||S(e,d))(r,t,!H,n,!t||ye.test(e)&amp;&amp;c(t.parentNode)||t),n},w.sortStable=F.split(&quot;&quot;).sort(U).join(&quot;&quot;)===F,w.detectDuplicates=!!L,D(),w.sortDetached=i(function(e){return 1&amp;e.compareDocumentPosition(I.createElement(&quot;div&quot;))}),i(function(e){return e.innerHTML=&quot;&quot;,&quot;#&quot;===e.firstChild.getAttribute(&quot;href&quot;)})||o(&quot;type|href|height|width&quot;,function(e,t,n){return n?void 0:e.getAttribute(t,&quot;type&quot;===t.toLowerCase()?1:2)}),w.attributes&amp;&amp;i(function(e){return e.innerHTML=&quot;&quot;,e.firstChild.setAttribute(&quot;value&quot;,&quot;&quot;),&quot;&quot;===e.firstChild.getAttribute(&quot;value&quot;)})||o(&quot;value&quot;,function(e,t,n){return n||&quot;input&quot;!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),i(function(e){return null==e.getAttribute(&quot;disabled&quot;)})||o(te,function(e,t,n){var r;return n?void 0:e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&amp;&amp;r.specified?r.value:null}),t}(e);pe.find=ye,pe.expr=ye.selectors,pe.expr[&quot;:&quot;]=pe.expr.pseudos,pe.uniqueSort=pe.unique=ye.uniqueSort,pe.text=ye.getText,pe.isXMLDoc=ye.isXML,pe.contains=ye.contains;var be=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&amp;&amp;9!==e.nodeType;)if(1===e.nodeType){if(i&amp;&amp;pe(e).is(n))break;r.push(e)}return r},xe=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&amp;&amp;e!==t&amp;&amp;n.push(e);return n},we=pe.expr.match.needsContext,Ce=/^(?:|)$/,Te=/^.[^:#[.,]*$/;pe.filter=function(e,t,n){var r=t[0];return n&amp;&amp;(e=&quot;:not(&quot;+e+&quot;)&quot;),1===t.length&amp;&amp;1===r.nodeType?pe.find.matchesSelector(r,e)?[r]:[]:pe.find.matches(e,pe.grep(t,function(e){return 1===e.nodeType}))},pe.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if(&quot;string&quot;!=typeof e)return this.pushStack(pe(e).filter(function(){for(t=0;i&gt;t;t++)if(pe.contains(r[t],this))return!0}));for(t=0;i&gt;t;t++)pe.find(e,r[t],n);return n=this.pushStack(i&gt;1?pe.unique(n):n),n.selector=this.selector?this.selector+&quot; &quot;+e:e,n},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,&quot;string&quot;==typeof e&amp;&amp;we.test(e)?pe(e):e||[],!1).length}});var ke,Ee=/^(?:s*()[^&gt;]*|#([w-]*))$/,Se=pe.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||ke,&quot;string&quot;==typeof e){if(r=&quot;&quot;===e.charAt(e.length-1)&amp;&amp;e.length&gt;=3?[null,e,null]:Ee.exec(e),!r||!r[1]&amp;&amp;t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof pe?t[0]:t,pe.merge(this,pe.parseHTML(r[1],t&amp;&amp;t.nodeType?t.ownerDocument||t:re,!0)),Ce.test(r[1])&amp;&amp;pe.isPlainObject(t))for(r in t)pe.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}if(i=re.getElementById(r[2]),i&amp;&amp;i.parentNode){if(i.id!==r[2])return ke.find(e);this.length=1,this[0]=i}return this.context=re,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):pe.isFunction(e)?&quot;undefined&quot;!=typeof n.ready?n.ready(e):e(pe):(void 0!==e.selector&amp;&amp;(this.selector=e.selector,this.context=e.context),pe.makeArray(e,this))};Se.prototype=pe.fn,ke=pe(re);var Ne=/^(?:parents|prev(?:Until|All))/,Ae={children:!0,contents:!0,next:!0,prev:!0};pe.fn.extend({has:function(e){var t,n=pe(e,this),r=n.length;return this.filter(function(){for(t=0;r&gt;t;t++)if(pe.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],a=we.test(e)||&quot;string&quot;!=typeof e?pe(e,t||this.context):0;i&gt;r;r++)for(n=this[r];n&amp;&amp;n!==t;n=n.parentNode)if(n.nodeType-1:1===n.nodeType&amp;&amp;pe.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length&gt;1?pe.uniqueSort(o):o)},index:function(e){return e?&quot;string&quot;==typeof e?pe.inArray(this[0],pe(e)):pe.inArray(e.jquery?e[0]:e,this):this[0]&amp;&amp;this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(pe.uniqueSort(pe.merge(this.get(),pe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),pe.each({parent:function(e){var t=e.parentNode;return t&amp;&amp;11!==t.nodeType?t:null},parents:function(e){return be(e,&quot;parentNode&quot;)},parentsUntil:function(e,t,n){return be(e,&quot;parentNode&quot;,n)},next:function(e){return i(e,&quot;nextSibling&quot;)},prev:function(e){return i(e,&quot;previousSibling&quot;)},nextAll:function(e){return be(e,&quot;nextSibling&quot;)},prevAll:function(e){return be(e,&quot;previousSibling&quot;)},nextUntil:function(e,t,n){return be(e,&quot;nextSibling&quot;,n)},prevUntil:function(e,t,n){return be(e,&quot;previousSibling&quot;,n)},siblings:function(e){return xe((e.parentNode||{}).firstChild,e)},children:function(e){return xe(e.firstChild)},contents:function(e){return pe.nodeName(e,&quot;iframe&quot;)?e.contentDocument||e.contentWindow.document:pe.merge([],e.childNodes)}},function(e,t){pe.fn[e]=function(n,r){var i=pe.map(this,t,n);return&quot;Until&quot;!==e.slice(-5)&amp;&amp;(r=n),r&amp;&amp;&quot;string&quot;==typeof r&amp;&amp;(i=pe.filter(r,i)),this.length&gt;1&amp;&amp;(Ae[e]||(i=pe.uniqueSort(i)),Ne.test(e)&amp;&amp;(i=i.reverse())),this.pushStack(i)}});var je=/S+/g;pe.Callbacks=function(e){e=&quot;string&quot;==typeof e?o(e):pe.extend({},e);var t,n,r,i,a=[],s=[],l=-1,u=function(){for(i=e.once,r=t=!0;s.length;l=-1)for(n=s.shift();++l-1;)a.splice(n,1),l&gt;=n&amp;&amp;l--}),this},has:function(e){return e?pe.inArray(e,a)&gt;-1:a.length&gt;0},empty:function(){return a&amp;&amp;(a=[]),this},disable:function(){return i=s=[],a=n=&quot;&quot;,this},disabled:function(){return!a},lock:function(){return i=!0,n||c.disable(),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=n||[],n=[e,n.slice?n.slice():n],s.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},pe.extend({Deferred:function(e){var t=[[&quot;resolve&quot;,&quot;done&quot;,pe.Callbacks(&quot;once memory&quot;),&quot;resolved&quot;],[&quot;reject&quot;,&quot;fail&quot;,pe.Callbacks(&quot;once memory&quot;),&quot;rejected&quot;],[&quot;notify&quot;,&quot;progress&quot;,pe.Callbacks(&quot;memory&quot;)]],n=&quot;pending&quot;,r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return pe.Deferred(function(n){pe.each(t,function(t,o){var a=pe.isFunction(e[t])&amp;&amp;e[t];i[o[1]](function(){var e=a&amp;&amp;a.apply(this,arguments);e&amp;&amp;pe.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+&quot;With&quot;](this===r?n.promise():this,a?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?pe.extend(e,r):r}},i={};return r.pipe=r.then,pe.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&amp;&amp;a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+&quot;With&quot;](this===i?r:this,arguments),this},i[o[0]+&quot;With&quot;]=a.fireWith}),r.promise(i),e&amp;&amp;e.call(i,i),i},when:function(e){var t,n,r,i=0,o=ie.call(arguments),a=o.length,s=1!==a||e&amp;&amp;pe.isFunction(e.promise)?a:0,l=1===s?e:pe.Deferred(),u=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length&gt;1?ie.call(arguments):i,r===t?l.notifyWith(n,r):--s||l.resolveWith(n,r)}};if(a&gt;1)for(t=new Array(a),n=new Array(a),r=new Array(a);a&gt;i;i++)o[i]&amp;&amp;pe.isFunction(o[i].promise)?o[i].promise().progress(u(i,n,t)).done(u(i,r,o)).fail(l.reject):--s;return s||l.resolveWith(r,o),l.promise()}});var Le;pe.fn.ready=function(e){return pe.ready.promise().done(e),this},pe.extend({isReady:!1,readyWait:1,holdReady:function(e){e?pe.readyWait++:pe.ready(!0)},ready:function(e){(e===!0?--pe.readyWait:pe.isReady)||(pe.isReady=!0,e!==!0&amp;&amp;--pe.readyWait&gt;0||(Le.resolveWith(re,[pe]),pe.fn.triggerHandler&amp;&amp;(pe(re).triggerHandler(&quot;ready&quot;),pe(re).off(&quot;ready&quot;))))}}),pe.ready.promise=function(t){if(!Le)if(Le=pe.Deferred(),&quot;complete&quot;===re.readyState||&quot;loading&quot;!==re.readyState&amp;&amp;!re.documentElement.doScroll)e.setTimeout(pe.ready);else if(re.addEventListener)re.addEventListener(&quot;DOMContentLoaded&quot;,s),e.addEventListener(&quot;load&quot;,s);else{re.attachEvent(&quot;onreadystatechange&quot;,s),e.attachEvent(&quot;onload&quot;,s);var n=!1;try{n=null==e.frameElement&amp;&amp;re.documentElement}catch(r){}n&amp;&amp;n.doScroll&amp;&amp;!function i(){if(!pe.isReady){try{n.doScroll(&quot;left&quot;)}catch(t){return e.setTimeout(i,50)}a(),pe.ready()}}()}return Le.promise(t)},pe.ready.promise();var De;for(De in pe(de))break;de.ownFirst=&quot;0&quot;===De,de.inlineBlockNeedsLayout=!1,pe(function(){var e,t,n,r;n=re.getElementsByTagName(&quot;body&quot;)[0],n&amp;&amp;n.style&amp;&amp;(t=re.createElement(&quot;div&quot;),r=re.createElement(&quot;div&quot;),r.style.cssText=&quot;position:absolute;border:0;width:0;height:0;top:0;left:-9999px&quot;,n.appendChild(r).appendChild(t),&quot;undefined&quot;!=typeof t.style.zoom&amp;&amp;(t.style.cssText=&quot;display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1&quot;,de.inlineBlockNeedsLayout=e=3===t.offsetWidth,e&amp;&amp;(n.style.zoom=1)),n.removeChild(r))}),function(){var e=re.createElement(&quot;div&quot;);de.deleteExpando=!0;try{delete e.test}catch(t){de.deleteExpando=!1}e=null}();var Ie=function(e){var t=pe.noData[(e.nodeName+&quot; &quot;).toLowerCase()],n=+e.nodeType||1;return 1!==n&amp;&amp;9!==n?!1:!t||t!==!0&amp;&amp;e.getAttribute(&quot;classid&quot;)===t},_e=/^(?:{[wW]*}|[[wW]*])$/,He=/([A-Z])/g;pe.extend({cache:{},noData:{&quot;applet &quot;:!0,&quot;embed &quot;:!0,&quot;object &quot;:&quot;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000&quot;},hasData:function(e){return e=e.nodeType?pe.cache[e[pe.expando]]:e[pe.expando],!!e&amp;&amp;!u(e)},data:function(e,t,n){return c(e,t,n)},removeData:function(e,t){return d(e,t)},_data:function(e,t,n){return c(e,t,n,!0)},_removeData:function(e,t){return d(e,t,!0)}}),pe.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&amp;&amp;o.attributes;if(void 0===e){if(this.length&amp;&amp;(i=pe.data(o),1===o.nodeType&amp;&amp;!pe._data(o,&quot;parsedAttrs&quot;))){for(n=a.length;n--;)a[n]&amp;&amp;(r=a[n].name,0===r.indexOf(&quot;data-&quot;)&amp;&amp;(r=pe.camelCase(r.slice(5)),l(o,r,i[r])));pe._data(o,&quot;parsedAttrs&quot;,!0)}return i}return&quot;object&quot;==typeof e?this.each(function(){pe.data(this,e)}):arguments.length&gt;1?this.each(function(){pe.data(this,e,t)}):o?l(o,e,pe.data(o,e)):void 0},removeData:function(e){return this.each(function(){pe.removeData(this,e)})}}),pe.extend({queue:function(e,t,n){var r;return e?(t=(t||&quot;fx&quot;)+&quot;queue&quot;,r=pe._data(e,t),n&amp;&amp;(!r||pe.isArray(n)?r=pe._data(e,t,pe.makeArray(n)):r.push(n)),r||[]):void 0},dequeue:function(e,t){t=t||&quot;fx&quot;;var n=pe.queue(e,t),r=n.length,i=n.shift(),o=pe._queueHooks(e,t),a=function(){pe.dequeue(e,t)};&quot;inprogress&quot;===i&amp;&amp;(i=n.shift(),r--),i&amp;&amp;(&quot;fx&quot;===t&amp;&amp;n.unshift(&quot;inprogress&quot;),delete o.stop,i.call(e,a,o)),!r&amp;&amp;o&amp;&amp;o.empty.fire()},_queueHooks:function(e,t){var n=t+&quot;queueHooks&quot;;return pe._data(e,n)||pe._data(e,n,{empty:pe.Callbacks(&quot;once memory&quot;).add(function(){pe._removeData(e,t+&quot;queue&quot;),pe._removeData(e,n)})})}}),pe.fn.extend({queue:function(e,t){var n=2;return&quot;string&quot;!=typeof e&amp;&amp;(t=e,e=&quot;fx&quot;,n--),arguments.lengths;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:u?t.call(e):l?t(e[0],n):o},Be=/^(?:checkbox|radio)$/i,ze=/a&quot;,de.leadingWhitespace=3===e.firstChild.nodeType,de.tbody=!e.getElementsByTagName(&quot;tbody&quot;).length,de.htmlSerialize=!!e.getElementsByTagName(&quot;link&quot;).length,de.html5Clone=&quot;&quot;!==re.createElement(&quot;nav&quot;).cloneNode(!0).outerHTML,n.type=&quot;checkbox&quot;,n.checked=!0,t.appendChild(n),de.appendChecked=n.checked,e.innerHTML=&quot;x&quot;,de.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue,t.appendChild(e),n=re.createElement(&quot;input&quot;),n.setAttribute(&quot;type&quot;,&quot;radio&quot;),n.setAttribute(&quot;checked&quot;,&quot;checked&quot;),n.setAttribute(&quot;name&quot;,&quot;t&quot;),e.appendChild(n),de.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,de.noCloneEvent=!!e.addEventListener,e[pe.expando]=1,de.attributes=!e.getAttribute(pe.expando)}();var Xe={option:[1,&quot;&quot;,&quot;&quot;],legend:[1,&quot;&quot;,&quot;&quot;],area:[1,&quot;&quot;,&quot;&quot;],param:[1,&quot;&quot;,&quot;&quot;],thead:[1,&quot;&quot;,&quot;&quot;],tr:[2,&quot;&quot;,&quot;&quot;],col:[2,&quot;&quot;,&quot;&quot;],td:[3,&quot;&quot;,&quot;&quot;],_default:de.htmlSerialize?[0,&quot;&quot;,&quot;&quot;]:[1,&quot;X&quot;,&quot;&quot;]};Xe.optgroup=Xe.option,Xe.tbody=Xe.tfoot=Xe.colgroup=Xe.caption=Xe.thead,Xe.th=Xe.td;var Ue=/-1&amp;&amp;(h=p.split(&quot;.&quot;),p=h.shift(),h.sort()),a=p.indexOf(&quot;:&quot;)1?l:u.bindType||p,o=(pe._data(s,&quot;events&quot;)||{})[t.type]&amp;&amp;pe._data(s,&quot;handle&quot;),o&amp;&amp;o.apply(s,n),o=a&amp;&amp;s[a],o&amp;&amp;o.apply&amp;&amp;Ie(s)&amp;&amp;(t.result=o.apply(s,n),t.result===!1&amp;&amp;t.preventDefault());if(t.type=p,!i&amp;&amp;!t.isDefaultPrevented()&amp;&amp;(!u._default||u._default.apply(f.pop(),n)===!1)&amp;&amp;Ie(r)&amp;&amp;a&amp;&amp;r[p]&amp;&amp;!pe.isWindow(r)){c=r[a],c&amp;&amp;(r[a]=null),pe.event.triggered=p;try{r[p]()}catch(m){}pe.event.triggered=void 0,c&amp;&amp;(r[a]=c)}return t.result}},dispatch:function(e){e=pe.event.fix(e);var t,n,r,i,o,a=[],s=ie.call(arguments),l=(pe._data(this,&quot;events&quot;)||{})[e.type]||[],u=pe.event.special[e.type]||{};if(s[0]=e,e.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,e)!==!1){for(a=pe.event.handlers.call(this,e,l),t=0;(i=a[t++])&amp;&amp;!e.isPropagationStopped();)for(e.currentTarget=i.elem,n=0;(o=i.handlers[n++])&amp;&amp;!e.isImmediatePropagationStopped();)e.rnamespace&amp;&amp;!e.rnamespace.test(o.namespace)||(e.handleObj=o,e.data=o.data,r=((pe.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s),void 0!==r&amp;&amp;(e.result=r)===!1&amp;&amp;(e.preventDefault(),e.stopPropagation()));return u.postDispatch&amp;&amp;u.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,a=[],s=t.delegateCount,l=e.target;if(s&amp;&amp;l.nodeType&amp;&amp;(&quot;click&quot;!==e.type||isNaN(e.button)||e.buttonn;n++)o=t[n],i=o.selector+&quot; &quot;,void 0===r[i]&amp;&amp;(r[i]=o.needsContext?pe(i,this).index(l)&gt;-1:pe.find(i,this,null,[l]).length),r[i]&amp;&amp;r.push(o);r.length&amp;&amp;a.push({elem:l,handlers:r})}return s]&quot;,&quot;i&quot;),tt=/]*)/&gt;/gi,nt=/0||&quot;embed&quot;===this.tagName.toLowerCase()&amp;&amp;n.parent(&quot;object&quot;).length||n.parent(&quot;.fluid-width-video-wrapper&quot;).length)){n.css(&quot;height&quot;)||n.css(&quot;width&quot;)||!isNaN(n.attr(&quot;height&quot;))&amp;&amp;!isNaN(n.attr(&quot;width&quot;))||(n.attr(&quot;height&quot;,9),n.attr(&quot;width&quot;,16));var i=&quot;object&quot;===this.tagName.toLowerCase()||n.attr(&quot;height&quot;)&amp;&amp;!isNaN(parseInt(n.attr(&quot;height&quot;),10))?parseInt(n.attr(&quot;height&quot;),10):n.height(),o=isNaN(parseInt(n.attr(&quot;width&quot;),10))?n.width():parseInt(n.attr(&quot;width&quot;),10),a=i/o;if(!n.attr(&quot;id&quot;)){var s=&quot;fitvid&quot;+t;n.attr(&quot;id&quot;,s)}n.wrap(&#39;&#39;).parent(&quot;.fluid-width-video-wrapper&quot;).css(&quot;padding-top&quot;,100*a+&quot;%&quot;),n.removeAttr(&quot;height&quot;).removeAttr(&quot;width&quot;)}})})}}(window.jQuery||window.Zepto),$(document).ready(function(){function e(){l=n.width()-10,u=n.children().length,c=s[u-1],c&gt;l?(n.children().last().prependTo(r),u-=1,e()):l&gt;s[u]&amp;&amp;(r.children().first().appendTo(n),u+=1,e()),t.attr(&quot;count&quot;,i-u),u===i?t.addClass(&quot;hidden&quot;):t.removeClass(&quot;hidden&quot;)}var t=$(&quot;nav.greedy-nav button&quot;),n=$(&quot;nav.greedy-nav .visible-links&quot;),r=$(&quot;nav.greedy-nav .hidden-links&quot;),i=0,o=0,a=1e3,s=[];n.children().outerWidth(function(e,t){o+=t,i+=1,s.push(o)});var l,u,c,d;$(window).resize(function(){e()}),t.on(&quot;click&quot;,function(){r.toggleClass(&quot;hidden&quot;),$(this).toggleClass(&quot;close&quot;),clearTimeout(d)}),r.on(&quot;mouseleave&quot;,function(){d=setTimeout(function(){r.addClass(&quot;hidden&quot;),t.toggleClass(&quot;close&quot;)},a)}).on(&quot;mouseenter&quot;,function(){clearTimeout(d)}),e()}),function(e){var t,n,r,i,o,a,s,l=&quot;Close&quot;,u=&quot;BeforeClose&quot;,c=&quot;AfterClose&quot;,d=&quot;BeforeAppend&quot;,f=&quot;MarkupParse&quot;,p=&quot;Open&quot;,h=&quot;Change&quot;,m=&quot;mfp&quot;,g=&quot;.&quot;+m,v=&quot;mfp-ready&quot;,y=&quot;mfp-removing&quot;,b=&quot;mfp-prevent-close&quot;,x=function(){},w=!!window.jQuery,C=e(window),T=function(e,n){t.ev.on(m+e+g,n)},k=function(t,n,r,i){var o=document.createElement(&quot;div&quot;);return o.className=&quot;mfp-&quot;+t,r&amp;&amp;(o.innerHTML=r),i?n&amp;&amp;n.appendChild(o):(o=e(o),n&amp;&amp;o.appendTo(n)),o},E=function(n,r){t.ev.triggerHandler(m+n,r),t.st.callbacks&amp;&amp;(n=n.charAt(0).toLowerCase()+n.slice(1),t.st.callbacks[n]&amp;&amp;t.st.callbacks[n].apply(t,e.isArray(r)?r:[r]))},S=function(n){return n===s&amp;&amp;t.currTemplate.closeBtn||(t.currTemplate.closeBtn=e(t.st.closeMarkup.replace(&quot;%title%&quot;,t.st.tClose)),s=n),t.currTemplate.closeBtn},N=function(){e.magnificPopup.instance||(t=new x,t.init(),e.magnificPopup.instance=t)},A=function(){var e=document.createElement(&quot;p&quot;).style,t=[&quot;ms&quot;,&quot;O&quot;,&quot;Moz&quot;,&quot;Webkit&quot;];if(void 0!==e.transition)return!0;for(;t.length;)if(t.pop()+&quot;Transition&quot;in e)return!0;return!1};x.prototype={constructor:x,init:function(){var n=navigator.appVersion;t.isIE7=-1!==n.indexOf(&quot;MSIE 7.&quot;),t.isIE8=-1!==n.indexOf(&quot;MSIE 8.&quot;),t.isLowIE=t.isIE7||t.isIE8,t.isAndroid=/android/gi.test(n),t.isIOS=/iphone|ipad|ipod/gi.test(n),t.supportsTransition=A(),t.probablyMobile=t.isAndroid||t.isIOS||/(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent),i=e(document),t.popupsCache={}},open:function(n){r||(r=e(document.body));var o;if(n.isObj===!1){t.items=n.items.toArray(),t.index=0;var s,l=n.items;for(o=0;o(e||C.height())},_setFocus:function(){(t.st.focus?t.content.find(t.st.focus).eq(0):t.wrap).focus()},_onFocusIn:function(n){return n.target===t.wrap[0]||e.contains(t.wrap[0],n.target)?void 0:(t._setFocus(),!1)},_parseMarkup:function(t,n,r){var i;r.data&amp;&amp;(n=e.extend(r.data,n)),E(f,[t,n,r]),e.each(n,function(e,n){if(void 0===n||n===!1)return!0;if(i=e.split(&quot;_&quot;),i.length&gt;1){var r=t.find(g+&quot;-&quot;+i[0]);if(r.length&gt;0){var o=i[1];&quot;replaceWith&quot;===o?r[0]!==n[0]&amp;&amp;r.replaceWith(n):&quot;img&quot;===o?r.is(&quot;img&quot;)?r.attr(&quot;src&quot;,n):r.replaceWith(&#39;&#39;):r.attr(i[1],n)}}else t.find(g+&quot;-&quot;+e).html(n)})},_getScrollbarSize:function(){if(void 0===t.scrollbarSize){var e=document.createElement(&quot;div&quot;);e.id=&quot;mfp-sbm&quot;,e.style.cssText=&quot;width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;&quot;,document.body.appendChild(e),t.scrollbarSize=e.offsetWidth-e.clientWidth,document.body.removeChild(e)}return t.scrollbarSize}},e.magnificPopup={instance:null,proto:x.prototype,modules:[],open:function(t,n){return N(),t=t?e.extend(!0,{},t):{},t.isObj=!0,t.index=n||0,this.instance.open(t)},close:function(){return e.magnificPopup.instance&amp;&amp;e.magnificPopup.instance.close()},registerModule:function(t,n){n.options&amp;&amp;(e.magnificPopup.defaults[t]=n.options),e.extend(this.proto,n.proto),this.modules.push(t)},defaults:{disableOn:0,key:null,midClick:!1,mainClass:&quot;&quot;,preloader:!0,focus:&quot;&quot;,closeOnContentClick:!1,closeOnBgClick:!0,closeBtnInside:!0,showCloseBtn:!0,enableEscapeKey:!0,modal:!1,alignTop:!1,removalDelay:0,prependTo:null,fixedContentPos:&quot;auto&quot;,fixedBgPos:&quot;auto&quot;,overflowY:&quot;auto&quot;,closeMarkup:&#39;&amp;times;&#39;,tClose:&quot;Close (Esc)&quot;,tLoading:&quot;Loading...&quot;}},e.fn.magnificPopup=function(n){N();var r=e(this);if(&quot;string&quot;==typeof n)if(&quot;open&quot;===n){var i,o=w?r.data(&quot;magnificPopup&quot;):r[0].magnificPopup,a=parseInt(arguments[1],10)||0;o.items?i=o.items[a]:(i=r,o.delegate&amp;&amp;(i=i.find(o.delegate)),i=i.eq(a)),t._openClick({mfpEl:i},r,o)}else t.isOpen&amp;&amp;t[n].apply(t,Array.prototype.slice.call(arguments,1));else n=e.extend(!0,{},n),w?r.data(&quot;magnificPopup&quot;,n):r[0].magnificPopup=n,t.addGroup(r,n);return r};var j,L,D,I=&quot;inline&quot;,_=function(){D&amp;&amp;(L.after(D.addClass(j)).detach(),D=null)};e.magnificPopup.registerModule(I,{options:{hiddenClass:&quot;hide&quot;,markup:&quot;&quot;,tNotFound:&quot;Content not found&quot;},proto:{initInline:function(){t.types.push(I),T(l+&quot;.&quot;+I,function(){_()})},getInline:function(n,r){if(_(),n.src){var i=t.st.inline,o=e(n.src);if(o.length){var a=o[0].parentNode;a&amp;&amp;a.tagName&amp;&amp;(L||(j=i.hiddenClass,L=k(j),j=&quot;mfp-&quot;+j),D=o.after(L).detach().removeClass(j)),t.updateStatus(&quot;ready&quot;)}else t.updateStatus(&quot;error&quot;,i.tNotFound),o=e(&quot;&quot;);return n.inlineElement=o,o}return t.updateStatus(&quot;ready&quot;),t._parseMarkup(r,{},n),r}}});var H,O=&quot;ajax&quot;,M=function(){H&amp;&amp;r.removeClass(H)},P=function(){M(),t.req&amp;&amp;t.req.abort()};e.magnificPopup.registerModule(O,{options:{settings:null,cursor:&quot;mfp-ajax-cur&quot;,tError:&#39;The content could not be loaded.&#39;},proto:{initAjax:function(){t.types.push(O),H=t.st.ajax.cursor,T(l+&quot;.&quot;+O,P),T(&quot;BeforeChange.&quot;+O,P)},getAjax:function(n){H&amp;&amp;r.addClass(H),t.updateStatus(&quot;loading&quot;);var i=e.extend({url:n.src,success:function(r,i,o){var a={data:r,xhr:o};E(&quot;ParseAjax&quot;,a),t.appendContent(e(a.data),O),n.finished=!0,M(),t._setFocus(),setTimeout(function(){t.wrap.addClass(v)},16),t.updateStatus(&quot;ready&quot;),E(&quot;AjaxContentAdded&quot;)},error:function(){M(),n.finished=n.loadError=!0,t.updateStatus(&quot;error&quot;,t.st.ajax.tError.replace(&quot;%url%&quot;,n.src))}},t.st.ajax.settings);return t.req=e.ajax(i),&quot;&quot;}}});var q,F=function(n){if(n.data&amp;&amp;void 0!==n.data.title)return n.data.title;var r=t.st.image.titleSrc;if(r){if(e.isFunction(r))return r.call(t,n);if(n.el)return n.el.attr(r)||&quot;&quot;}return&quot;&quot;};e.magnificPopup.registerModule(&quot;image&quot;,{options:{markup:&#39;&#39;,cursor:&quot;mfp-zoom-out-cur&quot;,titleSrc:&quot;title&quot;,verticalFit:!0,tError:&#39;The image could not be loaded.&#39;},proto:{initImage:function(){var e=t.st.image,n=&quot;.image&quot;;t.types.push(&quot;image&quot;),T(p+n,function(){&quot;image&quot;===t.currItem.type&amp;&amp;e.cursor&amp;&amp;r.addClass(e.cursor)}),T(l+n,function(){e.cursor&amp;&amp;r.removeClass(e.cursor),C.off(&quot;resize&quot;+g)}),T(&quot;Resize&quot;+n,t.resizeImage),t.isLowIE&amp;&amp;T(&quot;AfterChange&quot;,t.resizeImage)},resizeImage:function(){var e=t.currItem;if(e&amp;&amp;e.img&amp;&amp;t.st.image.verticalFit){var n=0;t.isLowIE&amp;&amp;(n=parseInt(e.img.css(&quot;padding-top&quot;),10)+parseInt(e.img.css(&quot;padding-bottom&quot;),10)),e.img.css(&quot;max-height&quot;,t.wH-n)}},_onImageHasSize:function(e){e.img&amp;&amp;(e.hasSize=!0,q&amp;&amp;clearInterval(q),e.isCheckingImgSize=!1,E(&quot;ImageHasSize&quot;,e),e.imgHidden&amp;&amp;(t.content&amp;&amp;t.content.removeClass(&quot;mfp-loading&quot;),e.imgHidden=!1))},findImageSize:function(e){var n=0,r=e.img[0],i=function(o){q&amp;&amp;clearInterval(q),q=setInterval(function(){return r.naturalWidth&gt;0?void t._onImageHasSize(e):(n&gt;200&amp;&amp;clearInterval(q),n++,void(3===n?i(10):40===n?i(50):100===n&amp;&amp;i(500)))},o)};i(1)},getImage:function(n,r){var i=0,o=function(){n&amp;&amp;(n.img[0].complete?(n.img.off(&quot;.mfploader&quot;),n===t.currItem&amp;&amp;(t._onImageHasSize(n),t.updateStatus(&quot;ready&quot;)),n.hasSize=!0,n.loaded=!0,E(&quot;ImageLoadComplete&quot;)):(i++,200&gt;i?setTimeout(o,100):a()))},a=function(){n&amp;&amp;(n.img.off(&quot;.mfploader&quot;),n===t.currItem&amp;&amp;(t._onImageHasSize(n),t.updateStatus(&quot;error&quot;,s.tError.replace(&quot;%url%&quot;,n.src))),n.hasSize=!0,n.loaded=!0,n.loadError=!0)},s=t.st.image,l=r.find(&quot;.mfp-img&quot;);if(l.length){var u=document.createElement(&quot;img&quot;);u.className=&quot;mfp-img&quot;,n.img=e(u).on(&quot;load.mfploader&quot;,o).on(&quot;error.mfploader&quot;,a),u.src=n.src,l.is(&quot;img&quot;)&amp;&amp;(n.img=n.img.clone()),u=n.img[0],u.naturalWidth&gt;0?n.hasSize=!0:u.width||(n.hasSize=!1)}return t._parseMarkup(r,{title:F(n),img_replaceWith:n.img},n),t.resizeImage(),n.hasSize?(q&amp;&amp;clearInterval(q),n.loadError?(r.addClass(&quot;mfp-loading&quot;),t.updateStatus(&quot;error&quot;,s.tError.replace(&quot;%url%&quot;,n.src))):(r.removeClass(&quot;mfp-loading&quot;),t.updateStatus(&quot;ready&quot;)),r):(t.updateStatus(&quot;loading&quot;),n.loading=!0,n.hasSize||(n.imgHidden=!0,r.addClass(&quot;mfp-loading&quot;),t.findImageSize(n)),r)}}});var B,z=function(){return void 0===B&amp;&amp;(B=void 0!==document.createElement(&quot;p&quot;).style.MozTransform),B};e.magnificPopup.registerModule(&quot;zoom&quot;,{options:{enabled:!1,easing:&quot;ease-in-out&quot;,duration:300,opener:function(e){return e.is(&quot;img&quot;)?e:e.find(&quot;img&quot;)}},proto:{initZoom:function(){var e,n=t.st.zoom,r=&quot;.zoom&quot;;if(n.enabled&amp;&amp;t.supportsTransition){var i,o,a=n.duration,s=function(e){var t=e.clone().removeAttr(&quot;style&quot;).removeAttr(&quot;class&quot;).addClass(&quot;mfp-animated-image&quot;),r=&quot;all &quot;+n.duration/1e3+&quot;s &quot;+n.easing,i={position:&quot;fixed&quot;,zIndex:9999,left:0,top:0,&quot;-webkit-backface-visibility&quot;:&quot;hidden&quot;},o=&quot;transition&quot;;return i[&quot;-webkit-&quot;+o]=i[&quot;-moz-&quot;+o]=i[&quot;-o-&quot;+o]=i[o]=r,t.css(i),t},c=function(){t.content.css(&quot;visibility&quot;,&quot;visible&quot;)};T(&quot;BuildControls&quot;+r,function(){if(t._allowZoom()){if(clearTimeout(i),t.content.css(&quot;visibility&quot;,&quot;hidden&quot;),e=t._getItemToZoom(),!e)return void c();o=s(e),o.css(t._getOffset()),t.wrap.append(o),i=setTimeout(function(){o.css(t._getOffset(!0)),i=setTimeout(function(){c(),setTimeout(function(){o.remove(),e=o=null,E(&quot;ZoomAnimationEnded&quot;)},16)},a)},16)}}),T(u+r,function(){if(t._allowZoom()){if(clearTimeout(i),t.st.removalDelay=a,!e){if(e=t._getItemToZoom(),!e)return;o=s(e)}o.css(t._getOffset(!0)),t.wrap.append(o),t.content.css(&quot;visibility&quot;,&quot;hidden&quot;),setTimeout(function(){o.css(t._getOffset())},16)}}),T(l+r,function(){t._allowZoom()&amp;&amp;(c(),o&amp;&amp;o.remove(),e=null)})}},_allowZoom:function(){return&quot;image&quot;===t.currItem.type},_getItemToZoom:function(){return t.currItem.hasSize?t.currItem.img:!1},_getOffset:function(n){var r;r=n?t.currItem.img:t.st.zoom.opener(t.currItem.el||t.currItem);var i=r.offset(),o=parseInt(r.css(&quot;padding-top&quot;),10),a=parseInt(r.css(&quot;padding-bottom&quot;),10);i.top-=e(window).scrollTop()-o;var s={width:r.width(),height:(w?r.innerHeight():r[0].offsetHeight)-a-o};return z()?s[&quot;-moz-transform&quot;]=s.transform=&quot;translate(&quot;+i.left+&quot;px,&quot;+i.top+&quot;px)&quot;:(s.left=i.left,s.top=i.top),s}}});var R=&quot;iframe&quot;,W=&quot;//about:blank&quot;,$=function(e){if(t.currTemplate[R]){var n=t.currTemplate[R].find(&quot;iframe&quot;);n.length&amp;&amp;(e||(n[0].src=W),t.isIE8&amp;&amp;n.css(&quot;display&quot;,e?&quot;block&quot;:&quot;none&quot;))}};e.magnificPopup.registerModule(R,{options:{markup:&#39;&#39;,srcAction:&quot;iframe_src&quot;,patterns:{youtube:{index:&quot;youtube.com&quot;,id:&quot;v=&quot;,src:&quot;//www.youtube.com/embed/%id%?autoplay=1&quot;},vimeo:{index:&quot;vimeo.com/&quot;,id:&quot;/&quot;,src:&quot;//player.vimeo.com/video/%id%?autoplay=1&quot;},gmaps:{index:&quot;//maps.google.&quot;,src:&quot;%id%&amp;output=embed&quot;}}},proto:{initIframe:function(){t.types.push(R),T(&quot;BeforeChange&quot;,function(e,t,n){t!==n&amp;&amp;(t===R?$():n===R&amp;&amp;$(!0))}),T(l+&quot;.&quot;+R,function(){$()})},getIframe:function(n,r){var i=n.src,o=t.st.iframe;e.each(o.patterns,function(){return i.indexOf(this.index)&gt;-1?(this.id&amp;&amp;(i=&quot;string&quot;==typeof this.id?i.substr(i.lastIndexOf(this.id)+this.id.length,i.length):this.id.call(this,i)),i=this.src.replace(&quot;%id%&quot;,i),!1):void 0});var a={};return o.srcAction&amp;&amp;(a[o.srcAction]=i),t._parseMarkup(r,a,n),t.updateStatus(&quot;ready&quot;),r}}});var X=function(e){var n=t.items.length;return e&gt;n-1?e-n:0&gt;e?n+e:e},U=function(e,t,n){return e.replace(/%curr%/gi,t+1).replace(/%total%/gi,n)};e.magnificPopup.registerModule(&quot;gallery&quot;,{options:{enabled:!1,arrowMarkup:&#39;&#39;,preload:[0,2],navigateByImgClick:!0,arrows:!0,tPrev:&quot;Previous (Left arrow key)&quot;,tNext:&quot;Next (Right arrow key)&quot;,tCounter:&quot;%curr% of %total%&quot;},proto:{initGallery:function(){var n=t.st.gallery,r=&quot;.mfp-gallery&quot;,o=Boolean(e.fn.mfpFastClick);return t.direction=!0,n&amp;&amp;n.enabled?(a+=&quot; mfp-gallery&quot;,T(p+r,function(){n.navigateByImgClick&amp;&amp;t.wrap.on(&quot;click&quot;+r,&quot;.mfp-img&quot;,function(){return t.items.length&gt;1?(t.next(),!1):void 0}),i.on(&quot;keydown&quot;+r,function(e){37===e.keyCode?t.prev():39===e.keyCode&amp;&amp;t.next()})}),T(&quot;UpdateStatus&quot;+r,function(e,n){n.text&amp;&amp;(n.text=U(n.text,t.currItem.index,t.items.length))}),T(f+r,function(e,r,i,o){var a=t.items.length;i.counter=a&gt;1?U(n.tCounter,o.index,a):&quot;&quot;}),T(&quot;BuildControls&quot;+r,function(){if(t.items.length&gt;1&amp;&amp;n.arrows&amp;&amp;!t.arrowLeft){var r=n.arrowMarkup,i=t.arrowLeft=e(r.replace(/%title%/gi,n.tPrev).replace(/%dir%/gi,&quot;left&quot;)).addClass(b),a=t.arrowRight=e(r.replace(/%title%/gi,n.tNext).replace(/%dir%/gi,&quot;right&quot;)).addClass(b),s=o?&quot;mfpFastClick&quot;:&quot;click&quot;;i[s](function(){t.prev()}),a[s](function(){t.next()}),t.isIE7&amp;&amp;(k(&quot;b&quot;,i[0],!1,!0),k(&quot;a&quot;,i[0],!1,!0),k(&quot;b&quot;,a[0],!1,!0),k(&quot;a&quot;,a[0],!1,!0)),t.container.append(i.add(a))}}),T(h+r,function(){t._preloadTimeout&amp;&amp;clearTimeout(t._preloadTimeout),t._preloadTimeout=setTimeout(function(){t.preloadNearbyImages(),t._preloadTimeout=null},16)}),void T(l+r,function(){i.off(r),t.wrap.off(&quot;click&quot;+r),t.arrowLeft&amp;&amp;o&amp;&amp;t.arrowLeft.add(t.arrowRight).destroyMfpFastClick(),t.arrowRight=t.arrowLeft=null})):!1},next:function(){t.direction=!0,t.index=X(t.index+1),t.updateItemHTML()},prev:function(){t.direction=!1,t.index=X(t.index-1),t.updateItemHTML()},goTo:function(e){t.direction=e&gt;=t.index,t.index=e,t.updateItemHTML()},preloadNearbyImages:function(){var e,n=t.st.gallery.preload,r=Math.min(n[0],t.items.length),i=Math.min(n[1],t.items.length);for(e=1;e&#39;).on(&quot;load.mfploader&quot;,function(){r.hasSize=!0}).on(&quot;error.mfploader&quot;,function(){r.hasSize=!0,r.loadError=!0,E(&quot;LazyLoadError&quot;,r)}).attr(&quot;src&quot;,r.src)),r.preloaded=!0}}}});var Y=&quot;retina&quot;;e.magnificPopup.registerModule(Y,{options:{replaceSrc:function(e){return e.src.replace(/.w+$/,function(e){return&quot;@2x&quot;+e})},ratio:1},proto:{initRetina:function(){if(window.devicePixelRatio&gt;1){var e=t.st.retina,n=e.ratio;n=isNaN(n)?n():n,n&gt;1&amp;&amp;(T(&quot;ImageHasSize.&quot;+Y,function(e,t){t.img.css({&quot;max-width&quot;:t.img[0].naturalWidth/n,width:&quot;100%&quot;})}),T(&quot;ElementParse.&quot;+Y,function(t,r){r.src=e.replaceSrc(r,n)}))}}}}),function(){var t=1e3,n=&quot;ontouchstart&quot;in window,r=function(){C.off(&quot;touchmove&quot;+o+&quot; touchend&quot;+o)},i=&quot;mfpFastClick&quot;,o=&quot;.&quot;+i;e.fn.mfpFastClick=function(i){return e(this).each(function(){var a,s=e(this);if(n){var l,u,c,d,f,p;s.on(&quot;touchstart&quot;+o,function(e){d=!1,p=1,f=e.originalEvent?e.originalEvent.touches[0]:e.touches[0],u=f.clientX,c=f.clientY,C.on(&quot;touchmove&quot;+o,function(e){f=e.originalEvent?e.originalEvent.touches:e.touches,p=f.length,f=f[0],(Math.abs(f.clientX-u)&gt;10||Math.abs(f.clientY-c)&gt;10)&amp;&amp;(d=!0,r())}).on(&quot;touchend&quot;+o,function(e){r(),d||p&gt;1||(a=!0,e.preventDefault(),clearTimeout(l),l=setTimeout(function(){a=!1},t),i())})})}s.on(&quot;click&quot;+o,function(){a||i()})})},e.fn.destroyMfpFastClick=function(){e(this).off(&quot;touchstart&quot;+o+&quot; click&quot;+o),n&amp;&amp;C.off(&quot;touchmove&quot;+o+&quot; touchend&quot;+o)}}(),N()}(window.jQuery||window.Zepto),!function(e){&quot;function&quot;==typeof define&amp;&amp;define.amd?define([&quot;jquery&quot;],e):e(&quot;object&quot;==typeof module&amp;&amp;module.exports?require(&quot;jquery&quot;):jQuery)}(function(e){var t=&quot;1.7.2&quot;,n={},r={exclude:[],excludeWithin:[],offset:0,direction:&quot;top&quot;,delegateSelector:null,scrollElement:null,scrollTarget:null,beforeScroll:function(){},afterScroll:function(){},easing:&quot;swing&quot;,speed:400,autoCoefficient:2,preventDefault:!0},i=function(t){var n=[],r=!1,i=t.dir&amp;&amp;&quot;left&quot;===t.dir?&quot;scrollLeft&quot;:&quot;scrollTop&quot;;return this.each(function(){var t=e(this);return this!==document&amp;&amp;this!==window?!document.scrollingElement||this!==document.documentElement&amp;&amp;this!==document.body?void(t[i]()&gt;0?n.push(this):(t[i](1),r=t[i]()&gt;0,r&amp;&amp;n.push(this),t[i](0))):(n.push(document.scrollingElement),!1):void 0}),n.length||this.each(function(){this===document.documentElement&amp;&amp;&quot;smooth&quot;===e(this).css(&quot;scrollBehavior&quot;)&amp;&amp;(n=[this]),n.length||&quot;BODY&quot;!==this.nodeName||(n=[this])}),&quot;first&quot;===t.el&amp;&amp;n.length&gt;1&amp;&amp;(n=[n[0]]),n};e.fn.extend({scrollable:function(e){var t=i.call(this,{dir:e});return this.pushStack(t)},firstScrollable:function(e){var t=i.call(this,{el:&quot;first&quot;,dir:e});return this.pushStack(t)},smoothScroll:function(t,n){if(t=t||{},&quot;options&quot;===t)return n?this.each(function(){var t=e(this),r=e.extend(t.data(&quot;ssOpts&quot;)||{},n);e(this).data(&quot;ssOpts&quot;,r)}):this.first().data(&quot;ssOpts&quot;);var r=e.extend({},e.fn.smoothScroll.defaults,t),i=function(t){var n=function(e){return e.replace(/(:|.|/)/g,&quot;$1&quot;)},i=this,o=e(this),a=e.extend({},r,o.data(&quot;ssOpts&quot;)||{}),s=r.exclude,l=a.excludeWithin,u=0,c=0,d=!0,f={},p=e.smoothScroll.filterPath(location.pathname),h=e.smoothScroll.filterPath(i.pathname),m=location.hostname===i.hostname||!i.hostname,g=a.scrollTarget||h===p,v=n(i.hash);if(v&amp;&amp;!e(v).length&amp;&amp;(d=!1),a.scrollTarget||m&amp;&amp;g&amp;&amp;v){for(;d&amp;&amp;uImage #%curr% could not be loaded.&#39;},removalDelay:500,mainClass:&quot;mfp-zoom-in&quot;,callbacks:{beforeOpen:function(){this.st.image.markup=this.st.image.markup.replace(&quot;mfp-figure&quot;,&quot;mfp-figure mfp-with-anim&quot;)}},closeOnContentClick:!0,midClick:!0})});",
        "url": " "
      } ,
  
      "assets-css-main-css":  {
        "title": "",
      "content"	 : "/*! * Minimal Mistakes Jekyll Theme 4.4.1 by Michael Rose * Copyright 2017 Michael Rose - mademistakes.com | @mmistakes * Licensed under MIT (https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE.txt)*//*! *  Font Awesome 4.7.0 by @davegandy - http://fontawesome.io - @fontawesome *  License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License) */@font-face{font-family:&#39;FontAwesome&#39;;src:url(&quot;../fonts/fontawesome-webfont.eot?v=4.7.0&quot;);src:url(&quot;../fonts/fontawesome-webfont.eot?#iefix&amp;v=4.7.0&quot;) format(&quot;embedded-opentype&quot;),url(&quot;../fonts/fontawesome-webfont.woff2?v=4.7.0&quot;) format(&quot;woff2&quot;),url(&quot;../fonts/fontawesome-webfont.woff?v=4.7.0&quot;) format(&quot;woff&quot;),url(&quot;../fonts/fontawesome-webfont.ttf?v=4.7.0&quot;) format(&quot;truetype&quot;),url(&quot;../fonts/fontawesome-webfont.svg?v=4.7.0#fontawesomeregular&quot;) format(&quot;svg&quot;);font-weight:normal;font-style:normal}.fa{display:inline-block;font:normal normal normal 14px/1 FontAwesome;font-size:inherit;text-rendering:auto;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.fa-lg{font-size:1.33333em;line-height:.75em;vertical-align:-15%}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-fw{width:1.28571em;text-align:center}.fa-ul{padding-left:0;margin-left:2.14286em;list-style-type:none}.fa-ul&gt;li{position:relative}.fa-li{position:absolute;left:-2.14286em;width:2.14286em;top:.14286em;text-align:center}.fa-li.fa-lg{left:-1.85714em}.fa-border{padding:.2em .25em .15em;border:solid 0.08em #eee;border-radius:.1em}.fa-pull-left{float:left}.fa-pull-right{float:right}.fa.fa-pull-left{margin-right:.3em}.fa.fa-pull-right{margin-left:.3em}.pull-right{float:right}.pull-left{float:left}.fa.pull-left{margin-right:.3em}.fa.pull-right{margin-left:.3em}.fa-spin{-webkit-animation:fa-spin 2s infinite linear;animation:fa-spin 2s infinite linear}.fa-pulse{-webkit-animation:fa-spin 1s infinite steps(8);animation:fa-spin 1s infinite steps(8)}@-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}@keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}.fa-rotate-90{-ms-filter:&quot;progid:DXImageTransform.Microsoft.BasicImage(rotation=1)&quot;;-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);transform:rotate(90deg)}.fa-rotate-180{-ms-filter:&quot;progid:DXImageTransform.Microsoft.BasicImage(rotation=2)&quot;;-webkit-transform:rotate(180deg);-ms-transform:rotate(180deg);transform:rotate(180deg)}.fa-rotate-270{-ms-filter:&quot;progid:DXImageTransform.Microsoft.BasicImage(rotation=3)&quot;;-webkit-transform:rotate(270deg);-ms-transform:rotate(270deg);transform:rotate(270deg)}.fa-flip-horizontal{-ms-filter:&quot;progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)&quot;;-webkit-transform:scale(-1, 1);-ms-transform:scale(-1, 1);transform:scale(-1, 1)}.fa-flip-vertical{-ms-filter:&quot;progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)&quot;;-webkit-transform:scale(1, -1);-ms-transform:scale(1, -1);transform:scale(1, -1)}:root .fa-rotate-90,:root .fa-rotate-180,:root .fa-rotate-270,:root .fa-flip-horizontal,:root .fa-flip-vertical{filter:none}.fa-stack{position:relative;display:inline-block;width:2em;height:2em;line-height:2em;vertical-align:middle}.fa-stack-1x,.fa-stack-2x{position:absolute;left:0;width:100%;text-align:center}.fa-stack-1x{line-height:inherit}.fa-stack-2x{font-size:2em}.fa-inverse{color:#fff}.fa-glass:before{content:&quot;&quot;}.fa-music:before{content:&quot;&quot;}.fa-search:before{content:&quot;&quot;}.fa-envelope-o:before{content:&quot;&quot;}.fa-heart:before{content:&quot;&quot;}.fa-star:before{content:&quot;&quot;}.fa-star-o:before{content:&quot;&quot;}.fa-user:before{content:&quot;&quot;}.fa-film:before{content:&quot;&quot;}.fa-th-large:before{content:&quot;&quot;}.fa-th:before{content:&quot;&quot;}.fa-th-list:before{content:&quot;&quot;}.fa-check:before{content:&quot;&quot;}.fa-remove:before,.fa-close:before,.fa-times:before{content:&quot;&quot;}.fa-search-plus:before{content:&quot;&quot;}.fa-search-minus:before{content:&quot;&quot;}.fa-power-off:before{content:&quot;&quot;}.fa-signal:before{content:&quot;&quot;}.fa-gear:before,.fa-cog:before{content:&quot;&quot;}.fa-trash-o:before{content:&quot;&quot;}.fa-home:before{content:&quot;&quot;}.fa-file-o:before{content:&quot;&quot;}.fa-clock-o:before{content:&quot;&quot;}.fa-road:before{content:&quot;&quot;}.fa-download:before{content:&quot;&quot;}.fa-arrow-circle-o-down:before{content:&quot;&quot;}.fa-arrow-circle-o-up:before{content:&quot;&quot;}.fa-inbox:before{content:&quot;&quot;}.fa-play-circle-o:before{content:&quot;&quot;}.fa-rotate-right:before,.fa-repeat:before{content:&quot;&quot;}.fa-refresh:before{content:&quot;&quot;}.fa-list-alt:before{content:&quot;&quot;}.fa-lock:before{content:&quot;&quot;}.fa-flag:before{content:&quot;&quot;}.fa-headphones:before{content:&quot;&quot;}.fa-volume-off:before{content:&quot;&quot;}.fa-volume-down:before{content:&quot;&quot;}.fa-volume-up:before{content:&quot;&quot;}.fa-qrcode:before{content:&quot;&quot;}.fa-barcode:before{content:&quot;&quot;}.fa-tag:before{content:&quot;&quot;}.fa-tags:before{content:&quot;&quot;}.fa-book:before{content:&quot;&quot;}.fa-bookmark:before{content:&quot;&quot;}.fa-print:before{content:&quot;&quot;}.fa-camera:before{content:&quot;&quot;}.fa-font:before{content:&quot;&quot;}.fa-bold:before{content:&quot;&quot;}.fa-italic:before{content:&quot;&quot;}.fa-text-height:before{content:&quot;&quot;}.fa-text-width:before{content:&quot;&quot;}.fa-align-left:before{content:&quot;&quot;}.fa-align-center:before{content:&quot;&quot;}.fa-align-right:before{content:&quot;&quot;}.fa-align-justify:before{content:&quot;&quot;}.fa-list:before{content:&quot;&quot;}.fa-dedent:before,.fa-outdent:before{content:&quot;&quot;}.fa-indent:before{content:&quot;&quot;}.fa-video-camera:before{content:&quot;&quot;}.fa-photo:before,.fa-image:before,.fa-picture-o:before{content:&quot;&quot;}.fa-pencil:before{content:&quot;&quot;}.fa-map-marker:before{content:&quot;&quot;}.fa-adjust:before{content:&quot;&quot;}.fa-tint:before{content:&quot;&quot;}.fa-edit:before,.fa-pencil-square-o:before{content:&quot;&quot;}.fa-share-square-o:before{content:&quot;&quot;}.fa-check-square-o:before{content:&quot;&quot;}.fa-arrows:before{content:&quot;&quot;}.fa-step-backward:before{content:&quot;&quot;}.fa-fast-backward:before{content:&quot;&quot;}.fa-backward:before{content:&quot;&quot;}.fa-play:before{content:&quot;&quot;}.fa-pause:before{content:&quot;&quot;}.fa-stop:before{content:&quot;&quot;}.fa-forward:before{content:&quot;&quot;}.fa-fast-forward:before{content:&quot;&quot;}.fa-step-forward:before{content:&quot;&quot;}.fa-eject:before{content:&quot;&quot;}.fa-chevron-left:before{content:&quot;&quot;}.fa-chevron-right:before{content:&quot;&quot;}.fa-plus-circle:before{content:&quot;&quot;}.fa-minus-circle:before{content:&quot;&quot;}.fa-times-circle:before{content:&quot;&quot;}.fa-check-circle:before{content:&quot;&quot;}.fa-question-circle:before{content:&quot;&quot;}.fa-info-circle:before{content:&quot;&quot;}.fa-crosshairs:before{content:&quot;&quot;}.fa-times-circle-o:before{content:&quot;&quot;}.fa-check-circle-o:before{content:&quot;&quot;}.fa-ban:before{content:&quot;&quot;}.fa-arrow-left:before{content:&quot;&quot;}.fa-arrow-right:before{content:&quot;&quot;}.fa-arrow-up:before{content:&quot;&quot;}.fa-arrow-down:before{content:&quot;&quot;}.fa-mail-forward:before,.fa-share:before{content:&quot;&quot;}.fa-expand:before{content:&quot;&quot;}.fa-compress:before{content:&quot;&quot;}.fa-plus:before{content:&quot;&quot;}.fa-minus:before{content:&quot;&quot;}.fa-asterisk:before{content:&quot;&quot;}.fa-exclamation-circle:before{content:&quot;&quot;}.fa-gift:before{content:&quot;&quot;}.fa-leaf:before{content:&quot;&quot;}.fa-fire:before{content:&quot;&quot;}.fa-eye:before{content:&quot;&quot;}.fa-eye-slash:before{content:&quot;&quot;}.fa-warning:before,.fa-exclamation-triangle:before{content:&quot;&quot;}.fa-plane:before{content:&quot;&quot;}.fa-calendar:before{content:&quot;&quot;}.fa-random:before{content:&quot;&quot;}.fa-comment:before{content:&quot;&quot;}.fa-magnet:before{content:&quot;&quot;}.fa-chevron-up:before{content:&quot;&quot;}.fa-chevron-down:before{content:&quot;&quot;}.fa-retweet:before{content:&quot;&quot;}.fa-shopping-cart:before{content:&quot;&quot;}.fa-folder:before{content:&quot;&quot;}.fa-folder-open:before{content:&quot;&quot;}.fa-arrows-v:before{content:&quot;&quot;}.fa-arrows-h:before{content:&quot;&quot;}.fa-bar-chart-o:before,.fa-bar-chart:before{content:&quot;&quot;}.fa-twitter-square:before{content:&quot;&quot;}.fa-facebook-square:before{content:&quot;&quot;}.fa-camera-retro:before{content:&quot;&quot;}.fa-key:before{content:&quot;&quot;}.fa-gears:before,.fa-cogs:before{content:&quot;&quot;}.fa-comments:before{content:&quot;&quot;}.fa-thumbs-o-up:before{content:&quot;&quot;}.fa-thumbs-o-down:before{content:&quot;&quot;}.fa-star-half:before{content:&quot;&quot;}.fa-heart-o:before{content:&quot;&quot;}.fa-sign-out:before{content:&quot;&quot;}.fa-linkedin-square:before{content:&quot;&quot;}.fa-thumb-tack:before{content:&quot;&quot;}.fa-external-link:before{content:&quot;&quot;}.fa-sign-in:before{content:&quot;&quot;}.fa-trophy:before{content:&quot;&quot;}.fa-github-square:before{content:&quot;&quot;}.fa-upload:before{content:&quot;&quot;}.fa-lemon-o:before{content:&quot;&quot;}.fa-phone:before{content:&quot;&quot;}.fa-square-o:before{content:&quot;&quot;}.fa-bookmark-o:before{content:&quot;&quot;}.fa-phone-square:before{content:&quot;&quot;}.fa-twitter:before{content:&quot;&quot;}.fa-facebook-f:before,.fa-facebook:before{content:&quot;&quot;}.fa-github:before{content:&quot;&quot;}.fa-unlock:before{content:&quot;&quot;}.fa-credit-card:before{content:&quot;&quot;}.fa-feed:before,.fa-rss:before{content:&quot;&quot;}.fa-hdd-o:before{content:&quot;&quot;}.fa-bullhorn:before{content:&quot;&quot;}.fa-bell:before{content:&quot;&quot;}.fa-certificate:before{content:&quot;&quot;}.fa-hand-o-right:before{content:&quot;&quot;}.fa-hand-o-left:before{content:&quot;&quot;}.fa-hand-o-up:before{content:&quot;&quot;}.fa-hand-o-down:before{content:&quot;&quot;}.fa-arrow-circle-left:before{content:&quot;&quot;}.fa-arrow-circle-right:before{content:&quot;&quot;}.fa-arrow-circle-up:before{content:&quot;&quot;}.fa-arrow-circle-down:before{content:&quot;&quot;}.fa-globe:before{content:&quot;&quot;}.fa-wrench:before{content:&quot;&quot;}.fa-tasks:before{content:&quot;&quot;}.fa-filter:before{content:&quot;&quot;}.fa-briefcase:before{content:&quot;&quot;}.fa-arrows-alt:before{content:&quot;&quot;}.fa-group:before,.fa-users:before{content:&quot;&quot;}.fa-chain:before,.fa-link:before{content:&quot;&quot;}.fa-cloud:before{content:&quot;&quot;}.fa-flask:before{content:&quot;&quot;}.fa-cut:before,.fa-scissors:before{content:&quot;&quot;}.fa-copy:before,.fa-files-o:before{content:&quot;&quot;}.fa-paperclip:before{content:&quot;&quot;}.fa-save:before,.fa-floppy-o:before{content:&quot;&quot;}.fa-square:before{content:&quot;&quot;}.fa-navicon:before,.fa-reorder:before,.fa-bars:before{content:&quot;&quot;}.fa-list-ul:before{content:&quot;&quot;}.fa-list-ol:before{content:&quot;&quot;}.fa-strikethrough:before{content:&quot;&quot;}.fa-underline:before{content:&quot;&quot;}.fa-table:before{content:&quot;&quot;}.fa-magic:before{content:&quot;&quot;}.fa-truck:before{content:&quot;&quot;}.fa-pinterest:before{content:&quot;&quot;}.fa-pinterest-square:before{content:&quot;&quot;}.fa-google-plus-square:before{content:&quot;&quot;}.fa-google-plus:before{content:&quot;&quot;}.fa-money:before{content:&quot;&quot;}.fa-caret-down:before{content:&quot;&quot;}.fa-caret-up:before{content:&quot;&quot;}.fa-caret-left:before{content:&quot;&quot;}.fa-caret-right:before{content:&quot;&quot;}.fa-columns:before{content:&quot;&quot;}.fa-unsorted:before,.fa-sort:before{content:&quot;&quot;}.fa-sort-down:before,.fa-sort-desc:before{content:&quot;&quot;}.fa-sort-up:before,.fa-sort-asc:before{content:&quot;&quot;}.fa-envelope:before{content:&quot;&quot;}.fa-linkedin:before{content:&quot;&quot;}.fa-rotate-left:before,.fa-undo:before{content:&quot;&quot;}.fa-legal:before,.fa-gavel:before{content:&quot;&quot;}.fa-dashboard:before,.fa-tachometer:before{content:&quot;&quot;}.fa-comment-o:before{content:&quot;&quot;}.fa-comments-o:before{content:&quot;&quot;}.fa-flash:before,.fa-bolt:before{content:&quot;&quot;}.fa-sitemap:before{content:&quot;&quot;}.fa-umbrella:before{content:&quot;&quot;}.fa-paste:before,.fa-clipboard:before{content:&quot;&quot;}.fa-lightbulb-o:before{content:&quot;&quot;}.fa-exchange:before{content:&quot;&quot;}.fa-cloud-download:before{content:&quot;&quot;}.fa-cloud-upload:before{content:&quot;&quot;}.fa-user-md:before{content:&quot;&quot;}.fa-stethoscope:before{content:&quot;&quot;}.fa-suitcase:before{content:&quot;&quot;}.fa-bell-o:before{content:&quot;&quot;}.fa-coffee:before{content:&quot;&quot;}.fa-cutlery:before{content:&quot;&quot;}.fa-file-text-o:before{content:&quot;&quot;}.fa-building-o:before{content:&quot;&quot;}.fa-hospital-o:before{content:&quot;&quot;}.fa-ambulance:before{content:&quot;&quot;}.fa-medkit:before{content:&quot;&quot;}.fa-fighter-jet:before{content:&quot;&quot;}.fa-beer:before{content:&quot;&quot;}.fa-h-square:before{content:&quot;&quot;}.fa-plus-square:before{content:&quot;&quot;}.fa-angle-double-left:before{content:&quot;&quot;}.fa-angle-double-right:before{content:&quot;&quot;}.fa-angle-double-up:before{content:&quot;&quot;}.fa-angle-double-down:before{content:&quot;&quot;}.fa-angle-left:before{content:&quot;&quot;}.fa-angle-right:before{content:&quot;&quot;}.fa-angle-up:before{content:&quot;&quot;}.fa-angle-down:before{content:&quot;&quot;}.fa-desktop:before{content:&quot;&quot;}.fa-laptop:before{content:&quot;&quot;}.fa-tablet:before{content:&quot;&quot;}.fa-mobile-phone:before,.fa-mobile:before{content:&quot;&quot;}.fa-circle-o:before{content:&quot;&quot;}.fa-quote-left:before{content:&quot;&quot;}.fa-quote-right:before{content:&quot;&quot;}.fa-spinner:before{content:&quot;&quot;}.fa-circle:before{content:&quot;&quot;}.fa-mail-reply:before,.fa-reply:before{content:&quot;&quot;}.fa-github-alt:before{content:&quot;&quot;}.fa-folder-o:before{content:&quot;&quot;}.fa-folder-open-o:before{content:&quot;&quot;}.fa-smile-o:before{content:&quot;&quot;}.fa-frown-o:before{content:&quot;&quot;}.fa-meh-o:before{content:&quot;&quot;}.fa-gamepad:before{content:&quot;&quot;}.fa-keyboard-o:before{content:&quot;&quot;}.fa-flag-o:before{content:&quot;&quot;}.fa-flag-checkered:before{content:&quot;&quot;}.fa-terminal:before{content:&quot;&quot;}.fa-code:before{content:&quot;&quot;}.fa-mail-reply-all:before,.fa-reply-all:before{content:&quot;&quot;}.fa-star-half-empty:before,.fa-star-half-full:before,.fa-star-half-o:before{content:&quot;&quot;}.fa-location-arrow:before{content:&quot;&quot;}.fa-crop:before{content:&quot;&quot;}.fa-code-fork:before{content:&quot;&quot;}.fa-unlink:before,.fa-chain-broken:before{content:&quot;&quot;}.fa-question:before{content:&quot;&quot;}.fa-info:before{content:&quot;&quot;}.fa-exclamation:before{content:&quot;&quot;}.fa-superscript:before{content:&quot;&quot;}.fa-subscript:before{content:&quot;&quot;}.fa-eraser:before{content:&quot;&quot;}.fa-puzzle-piece:before{content:&quot;&quot;}.fa-microphone:before{content:&quot;&quot;}.fa-microphone-slash:before{content:&quot;&quot;}.fa-shield:before{content:&quot;&quot;}.fa-calendar-o:before{content:&quot;&quot;}.fa-fire-extinguisher:before{content:&quot;&quot;}.fa-rocket:before{content:&quot;&quot;}.fa-maxcdn:before{content:&quot;&quot;}.fa-chevron-circle-left:before{content:&quot;&quot;}.fa-chevron-circle-right:before{content:&quot;&quot;}.fa-chevron-circle-up:before{content:&quot;&quot;}.fa-chevron-circle-down:before{content:&quot;&quot;}.fa-html5:before{content:&quot;&quot;}.fa-css3:before{content:&quot;&quot;}.fa-anchor:before{content:&quot;&quot;}.fa-unlock-alt:before{content:&quot;&quot;}.fa-bullseye:before{content:&quot;&quot;}.fa-ellipsis-h:before{content:&quot;&quot;}.fa-ellipsis-v:before{content:&quot;&quot;}.fa-rss-square:before{content:&quot;&quot;}.fa-play-circle:before{content:&quot;&quot;}.fa-ticket:before{content:&quot;&quot;}.fa-minus-square:before{content:&quot;&quot;}.fa-minus-square-o:before{content:&quot;&quot;}.fa-level-up:before{content:&quot;&quot;}.fa-level-down:before{content:&quot;&quot;}.fa-check-square:before{content:&quot;&quot;}.fa-pencil-square:before{content:&quot;&quot;}.fa-external-link-square:before{content:&quot;&quot;}.fa-share-square:before{content:&quot;&quot;}.fa-compass:before{content:&quot;&quot;}.fa-toggle-down:before,.fa-caret-square-o-down:before{content:&quot;&quot;}.fa-toggle-up:before,.fa-caret-square-o-up:before{content:&quot;&quot;}.fa-toggle-right:before,.fa-caret-square-o-right:before{content:&quot;&quot;}.fa-euro:before,.fa-eur:before{content:&quot;&quot;}.fa-gbp:before{content:&quot;&quot;}.fa-dollar:before,.fa-usd:before{content:&quot;&quot;}.fa-rupee:before,.fa-inr:before{content:&quot;&quot;}.fa-cny:before,.fa-rmb:before,.fa-yen:before,.fa-jpy:before{content:&quot;&quot;}.fa-ruble:before,.fa-rouble:before,.fa-rub:before{content:&quot;&quot;}.fa-won:before,.fa-krw:before{content:&quot;&quot;}.fa-bitcoin:before,.fa-btc:before{content:&quot;&quot;}.fa-file:before{content:&quot;&quot;}.fa-file-text:before{content:&quot;&quot;}.fa-sort-alpha-asc:before{content:&quot;&quot;}.fa-sort-alpha-desc:before{content:&quot;&quot;}.fa-sort-amount-asc:before{content:&quot;&quot;}.fa-sort-amount-desc:before{content:&quot;&quot;}.fa-sort-numeric-asc:before{content:&quot;&quot;}.fa-sort-numeric-desc:before{content:&quot;&quot;}.fa-thumbs-up:before{content:&quot;&quot;}.fa-thumbs-down:before{content:&quot;&quot;}.fa-youtube-square:before{content:&quot;&quot;}.fa-youtube:before{content:&quot;&quot;}.fa-xing:before{content:&quot;&quot;}.fa-xing-square:before{content:&quot;&quot;}.fa-youtube-play:before{content:&quot;&quot;}.fa-dropbox:before{content:&quot;&quot;}.fa-stack-overflow:before{content:&quot;&quot;}.fa-instagram:before{content:&quot;&quot;}.fa-flickr:before{content:&quot;&quot;}.fa-adn:before{content:&quot;&quot;}.fa-bitbucket:before{content:&quot;&quot;}.fa-bitbucket-square:before{content:&quot;&quot;}.fa-tumblr:before{content:&quot;&quot;}.fa-tumblr-square:before{content:&quot;&quot;}.fa-long-arrow-down:before{content:&quot;&quot;}.fa-long-arrow-up:before{content:&quot;&quot;}.fa-long-arrow-left:before{content:&quot;&quot;}.fa-long-arrow-right:before{content:&quot;&quot;}.fa-apple:before{content:&quot;&quot;}.fa-windows:before{content:&quot;&quot;}.fa-android:before{content:&quot;&quot;}.fa-linux:before{content:&quot;&quot;}.fa-dribbble:before{content:&quot;&quot;}.fa-skype:before{content:&quot;&quot;}.fa-foursquare:before{content:&quot;&quot;}.fa-trello:before{content:&quot;&quot;}.fa-female:before{content:&quot;&quot;}.fa-male:before{content:&quot;&quot;}.fa-gittip:before,.fa-gratipay:before{content:&quot;&quot;}.fa-sun-o:before{content:&quot;&quot;}.fa-moon-o:before{content:&quot;&quot;}.fa-archive:before{content:&quot;&quot;}.fa-bug:before{content:&quot;&quot;}.fa-vk:before{content:&quot;&quot;}.fa-weibo:before{content:&quot;&quot;}.fa-renren:before{content:&quot;&quot;}.fa-pagelines:before{content:&quot;&quot;}.fa-stack-exchange:before{content:&quot;&quot;}.fa-arrow-circle-o-right:before{content:&quot;&quot;}.fa-arrow-circle-o-left:before{content:&quot;&quot;}.fa-toggle-left:before,.fa-caret-square-o-left:before{content:&quot;&quot;}.fa-dot-circle-o:before{content:&quot;&quot;}.fa-wheelchair:before{content:&quot;&quot;}.fa-vimeo-square:before{content:&quot;&quot;}.fa-turkish-lira:before,.fa-try:before{content:&quot;&quot;}.fa-plus-square-o:before{content:&quot;&quot;}.fa-space-shuttle:before{content:&quot;&quot;}.fa-slack:before{content:&quot;&quot;}.fa-envelope-square:before{content:&quot;&quot;}.fa-wordpress:before{content:&quot;&quot;}.fa-openid:before{content:&quot;&quot;}.fa-institution:before,.fa-bank:before,.fa-university:before{content:&quot;&quot;}.fa-mortar-board:before,.fa-graduation-cap:before{content:&quot;&quot;}.fa-yahoo:before{content:&quot;&quot;}.fa-google:before{content:&quot;&quot;}.fa-reddit:before{content:&quot;&quot;}.fa-reddit-square:before{content:&quot;&quot;}.fa-stumbleupon-circle:before{content:&quot;&quot;}.fa-stumbleupon:before{content:&quot;&quot;}.fa-delicious:before{content:&quot;&quot;}.fa-digg:before{content:&quot;&quot;}.fa-pied-piper-pp:before{content:&quot;&quot;}.fa-pied-piper-alt:before{content:&quot;&quot;}.fa-drupal:before{content:&quot;&quot;}.fa-joomla:before{content:&quot;&quot;}.fa-language:before{content:&quot;&quot;}.fa-fax:before{content:&quot;&quot;}.fa-building:before{content:&quot;&quot;}.fa-child:before{content:&quot;&quot;}.fa-paw:before{content:&quot;&quot;}.fa-spoon:before{content:&quot;&quot;}.fa-cube:before{content:&quot;&quot;}.fa-cubes:before{content:&quot;&quot;}.fa-behance:before{content:&quot;&quot;}.fa-behance-square:before{content:&quot;&quot;}.fa-steam:before{content:&quot;&quot;}.fa-steam-square:before{content:&quot;&quot;}.fa-recycle:before{content:&quot;&quot;}.fa-automobile:before,.fa-car:before{content:&quot;&quot;}.fa-cab:before,.fa-taxi:before{content:&quot;&quot;}.fa-tree:before{content:&quot;&quot;}.fa-spotify:before{content:&quot;&quot;}.fa-deviantart:before{content:&quot;&quot;}.fa-soundcloud:before{content:&quot;&quot;}.fa-database:before{content:&quot;&quot;}.fa-file-pdf-o:before{content:&quot;&quot;}.fa-file-word-o:before{content:&quot;&quot;}.fa-file-excel-o:before{content:&quot;&quot;}.fa-file-powerpoint-o:before{content:&quot;&quot;}.fa-file-photo-o:before,.fa-file-picture-o:before,.fa-file-image-o:before{content:&quot;&quot;}.fa-file-zip-o:before,.fa-file-archive-o:before{content:&quot;&quot;}.fa-file-sound-o:before,.fa-file-audio-o:before{content:&quot;&quot;}.fa-file-movie-o:before,.fa-file-video-o:before{content:&quot;&quot;}.fa-file-code-o:before{content:&quot;&quot;}.fa-vine:before{content:&quot;&quot;}.fa-codepen:before{content:&quot;&quot;}.fa-jsfiddle:before{content:&quot;&quot;}.fa-life-bouy:before,.fa-life-buoy:before,.fa-life-saver:before,.fa-support:before,.fa-life-ring:before{content:&quot;&quot;}.fa-circle-o-notch:before{content:&quot;&quot;}.fa-ra:before,.fa-resistance:before,.fa-rebel:before{content:&quot;&quot;}.fa-ge:before,.fa-empire:before{content:&quot;&quot;}.fa-git-square:before{content:&quot;&quot;}.fa-git:before{content:&quot;&quot;}.fa-y-combinator-square:before,.fa-yc-square:before,.fa-hacker-news:before{content:&quot;&quot;}.fa-tencent-weibo:before{content:&quot;&quot;}.fa-qq:before{content:&quot;&quot;}.fa-wechat:before,.fa-weixin:before{content:&quot;&quot;}.fa-send:before,.fa-paper-plane:before{content:&quot;&quot;}.fa-send-o:before,.fa-paper-plane-o:before{content:&quot;&quot;}.fa-history:before{content:&quot;&quot;}.fa-circle-thin:before{content:&quot;&quot;}.fa-header:before{content:&quot;&quot;}.fa-paragraph:before{content:&quot;&quot;}.fa-sliders:before{content:&quot;&quot;}.fa-share-alt:before{content:&quot;&quot;}.fa-share-alt-square:before{content:&quot;&quot;}.fa-bomb:before{content:&quot;&quot;}.fa-soccer-ball-o:before,.fa-futbol-o:before{content:&quot;&quot;}.fa-tty:before{content:&quot;&quot;}.fa-binoculars:before{content:&quot;&quot;}.fa-plug:before{content:&quot;&quot;}.fa-slideshare:before{content:&quot;&quot;}.fa-twitch:before{content:&quot;&quot;}.fa-yelp:before{content:&quot;&quot;}.fa-newspaper-o:before{content:&quot;&quot;}.fa-wifi:before{content:&quot;&quot;}.fa-calculator:before{content:&quot;&quot;}.fa-paypal:before{content:&quot;&quot;}.fa-google-wallet:before{content:&quot;&quot;}.fa-cc-visa:before{content:&quot;&quot;}.fa-cc-mastercard:before{content:&quot;&quot;}.fa-cc-discover:before{content:&quot;&quot;}.fa-cc-amex:before{content:&quot;&quot;}.fa-cc-paypal:before{content:&quot;&quot;}.fa-cc-stripe:before{content:&quot;&quot;}.fa-bell-slash:before{content:&quot;&quot;}.fa-bell-slash-o:before{content:&quot;&quot;}.fa-trash:before{content:&quot;&quot;}.fa-copyright:before{content:&quot;&quot;}.fa-at:before{content:&quot;&quot;}.fa-eyedropper:before{content:&quot;&quot;}.fa-paint-brush:before{content:&quot;&quot;}.fa-birthday-cake:before{content:&quot;&quot;}.fa-area-chart:before{content:&quot;&quot;}.fa-pie-chart:before{content:&quot;&quot;}.fa-line-chart:before{content:&quot;&quot;}.fa-lastfm:before{content:&quot;&quot;}.fa-lastfm-square:before{content:&quot;&quot;}.fa-toggle-off:before{content:&quot;&quot;}.fa-toggle-on:before{content:&quot;&quot;}.fa-bicycle:before{content:&quot;&quot;}.fa-bus:before{content:&quot;&quot;}.fa-ioxhost:before{content:&quot;&quot;}.fa-angellist:before{content:&quot;&quot;}.fa-cc:before{content:&quot;&quot;}.fa-shekel:before,.fa-sheqel:before,.fa-ils:before{content:&quot;&quot;}.fa-meanpath:before{content:&quot;&quot;}.fa-buysellads:before{content:&quot;&quot;}.fa-connectdevelop:before{content:&quot;&quot;}.fa-dashcube:before{content:&quot;&quot;}.fa-forumbee:before{content:&quot;&quot;}.fa-leanpub:before{content:&quot;&quot;}.fa-sellsy:before{content:&quot;&quot;}.fa-shirtsinbulk:before{content:&quot;&quot;}.fa-simplybuilt:before{content:&quot;&quot;}.fa-skyatlas:before{content:&quot;&quot;}.fa-cart-plus:before{content:&quot;&quot;}.fa-cart-arrow-down:before{content:&quot;&quot;}.fa-diamond:before{content:&quot;&quot;}.fa-ship:before{content:&quot;&quot;}.fa-user-secret:before{content:&quot;&quot;}.fa-motorcycle:before{content:&quot;&quot;}.fa-street-view:before{content:&quot;&quot;}.fa-heartbeat:before{content:&quot;&quot;}.fa-venus:before{content:&quot;&quot;}.fa-mars:before{content:&quot;&quot;}.fa-mercury:before{content:&quot;&quot;}.fa-intersex:before,.fa-transgender:before{content:&quot;&quot;}.fa-transgender-alt:before{content:&quot;&quot;}.fa-venus-double:before{content:&quot;&quot;}.fa-mars-double:before{content:&quot;&quot;}.fa-venus-mars:before{content:&quot;&quot;}.fa-mars-stroke:before{content:&quot;&quot;}.fa-mars-stroke-v:before{content:&quot;&quot;}.fa-mars-stroke-h:before{content:&quot;&quot;}.fa-neuter:before{content:&quot;&quot;}.fa-genderless:before{content:&quot;&quot;}.fa-facebook-official:before{content:&quot;&quot;}.fa-pinterest-p:before{content:&quot;&quot;}.fa-whatsapp:before{content:&quot;&quot;}.fa-server:before{content:&quot;&quot;}.fa-user-plus:before{content:&quot;&quot;}.fa-user-times:before{content:&quot;&quot;}.fa-hotel:before,.fa-bed:before{content:&quot;&quot;}.fa-viacoin:before{content:&quot;&quot;}.fa-train:before{content:&quot;&quot;}.fa-subway:before{content:&quot;&quot;}.fa-medium:before{content:&quot;&quot;}.fa-yc:before,.fa-y-combinator:before{content:&quot;&quot;}.fa-optin-monster:before{content:&quot;&quot;}.fa-opencart:before{content:&quot;&quot;}.fa-expeditedssl:before{content:&quot;&quot;}.fa-battery-4:before,.fa-battery:before,.fa-battery-full:before{content:&quot;&quot;}.fa-battery-3:before,.fa-battery-three-quarters:before{content:&quot;&quot;}.fa-battery-2:before,.fa-battery-half:before{content:&quot;&quot;}.fa-battery-1:before,.fa-battery-quarter:before{content:&quot;&quot;}.fa-battery-0:before,.fa-battery-empty:before{content:&quot;&quot;}.fa-mouse-pointer:before{content:&quot;&quot;}.fa-i-cursor:before{content:&quot;&quot;}.fa-object-group:before{content:&quot;&quot;}.fa-object-ungroup:before{content:&quot;&quot;}.fa-sticky-note:before{content:&quot;&quot;}.fa-sticky-note-o:before{content:&quot;&quot;}.fa-cc-jcb:before{content:&quot;&quot;}.fa-cc-diners-club:before{content:&quot;&quot;}.fa-clone:before{content:&quot;&quot;}.fa-balance-scale:before{content:&quot;&quot;}.fa-hourglass-o:before{content:&quot;&quot;}.fa-hourglass-1:before,.fa-hourglass-start:before{content:&quot;&quot;}.fa-hourglass-2:before,.fa-hourglass-half:before{content:&quot;&quot;}.fa-hourglass-3:before,.fa-hourglass-end:before{content:&quot;&quot;}.fa-hourglass:before{content:&quot;&quot;}.fa-hand-grab-o:before,.fa-hand-rock-o:before{content:&quot;&quot;}.fa-hand-stop-o:before,.fa-hand-paper-o:before{content:&quot;&quot;}.fa-hand-scissors-o:before{content:&quot;&quot;}.fa-hand-lizard-o:before{content:&quot;&quot;}.fa-hand-spock-o:before{content:&quot;&quot;}.fa-hand-pointer-o:before{content:&quot;&quot;}.fa-hand-peace-o:before{content:&quot;&quot;}.fa-trademark:before{content:&quot;&quot;}.fa-registered:before{content:&quot;&quot;}.fa-creative-commons:before{content:&quot;&quot;}.fa-gg:before{content:&quot;&quot;}.fa-gg-circle:before{content:&quot;&quot;}.fa-tripadvisor:before{content:&quot;&quot;}.fa-odnoklassniki:before{content:&quot;&quot;}.fa-odnoklassniki-square:before{content:&quot;&quot;}.fa-get-pocket:before{content:&quot;&quot;}.fa-wikipedia-w:before{content:&quot;&quot;}.fa-safari:before{content:&quot;&quot;}.fa-chrome:before{content:&quot;&quot;}.fa-firefox:before{content:&quot;&quot;}.fa-opera:before{content:&quot;&quot;}.fa-internet-explorer:before{content:&quot;&quot;}.fa-tv:before,.fa-television:before{content:&quot;&quot;}.fa-contao:before{content:&quot;&quot;}.fa-500px:before{content:&quot;&quot;}.fa-amazon:before{content:&quot;&quot;}.fa-calendar-plus-o:before{content:&quot;&quot;}.fa-calendar-minus-o:before{content:&quot;&quot;}.fa-calendar-times-o:before{content:&quot;&quot;}.fa-calendar-check-o:before{content:&quot;&quot;}.fa-industry:before{content:&quot;&quot;}.fa-map-pin:before{content:&quot;&quot;}.fa-map-signs:before{content:&quot;&quot;}.fa-map-o:before{content:&quot;&quot;}.fa-map:before{content:&quot;&quot;}.fa-commenting:before{content:&quot;&quot;}.fa-commenting-o:before{content:&quot;&quot;}.fa-houzz:before{content:&quot;&quot;}.fa-vimeo:before{content:&quot;&quot;}.fa-black-tie:before{content:&quot;&quot;}.fa-fonticons:before{content:&quot;&quot;}.fa-reddit-alien:before{content:&quot;&quot;}.fa-edge:before{content:&quot;&quot;}.fa-credit-card-alt:before{content:&quot;&quot;}.fa-codiepie:before{content:&quot;&quot;}.fa-modx:before{content:&quot;&quot;}.fa-fort-awesome:before{content:&quot;&quot;}.fa-usb:before{content:&quot;&quot;}.fa-product-hunt:before{content:&quot;&quot;}.fa-mixcloud:before{content:&quot;&quot;}.fa-scribd:before{content:&quot;&quot;}.fa-pause-circle:before{content:&quot;&quot;}.fa-pause-circle-o:before{content:&quot;&quot;}.fa-stop-circle:before{content:&quot;&quot;}.fa-stop-circle-o:before{content:&quot;&quot;}.fa-shopping-bag:before{content:&quot;&quot;}.fa-shopping-basket:before{content:&quot;&quot;}.fa-hashtag:before{content:&quot;&quot;}.fa-bluetooth:before{content:&quot;&quot;}.fa-bluetooth-b:before{content:&quot;&quot;}.fa-percent:before{content:&quot;&quot;}.fa-gitlab:before{content:&quot;&quot;}.fa-wpbeginner:before{content:&quot;&quot;}.fa-wpforms:before{content:&quot;&quot;}.fa-envira:before{content:&quot;&quot;}.fa-universal-access:before{content:&quot;&quot;}.fa-wheelchair-alt:before{content:&quot;&quot;}.fa-question-circle-o:before{content:&quot;&quot;}.fa-blind:before{content:&quot;&quot;}.fa-audio-description:before{content:&quot;&quot;}.fa-volume-control-phone:before{content:&quot;&quot;}.fa-braille:before{content:&quot;&quot;}.fa-assistive-listening-systems:before{content:&quot;&quot;}.fa-asl-interpreting:before,.fa-american-sign-language-interpreting:before{content:&quot;&quot;}.fa-deafness:before,.fa-hard-of-hearing:before,.fa-deaf:before{content:&quot;&quot;}.fa-glide:before{content:&quot;&quot;}.fa-glide-g:before{content:&quot;&quot;}.fa-signing:before,.fa-sign-language:before{content:&quot;&quot;}.fa-low-vision:before{content:&quot;&quot;}.fa-viadeo:before{content:&quot;&quot;}.fa-viadeo-square:before{content:&quot;&quot;}.fa-snapchat:before{content:&quot;&quot;}.fa-snapchat-ghost:before{content:&quot;&quot;}.fa-snapchat-square:before{content:&quot;&quot;}.fa-pied-piper:before{content:&quot;&quot;}.fa-first-order:before{content:&quot;&quot;}.fa-yoast:before{content:&quot;&quot;}.fa-themeisle:before{content:&quot;&quot;}.fa-google-plus-circle:before,.fa-google-plus-official:before{content:&quot;&quot;}.fa-fa:before,.fa-font-awesome:before{content:&quot;&quot;}.fa-handshake-o:before{content:&quot;&quot;}.fa-envelope-open:before{content:&quot;&quot;}.fa-envelope-open-o:before{content:&quot;&quot;}.fa-linode:before{content:&quot;&quot;}.fa-address-book:before{content:&quot;&quot;}.fa-address-book-o:before{content:&quot;&quot;}.fa-vcard:before,.fa-address-card:before{content:&quot;&quot;}.fa-vcard-o:before,.fa-address-card-o:before{content:&quot;&quot;}.fa-user-circle:before{content:&quot;&quot;}.fa-user-circle-o:before{content:&quot;&quot;}.fa-user-o:before{content:&quot;&quot;}.fa-id-badge:before{content:&quot;&quot;}.fa-drivers-license:before,.fa-id-card:before{content:&quot;&quot;}.fa-drivers-license-o:before,.fa-id-card-o:before{content:&quot;&quot;}.fa-quora:before{content:&quot;&quot;}.fa-free-code-camp:before{content:&quot;&quot;}.fa-telegram:before{content:&quot;&quot;}.fa-thermometer-4:before,.fa-thermometer:before,.fa-thermometer-full:before{content:&quot;&quot;}.fa-thermometer-3:before,.fa-thermometer-three-quarters:before{content:&quot;&quot;}.fa-thermometer-2:before,.fa-thermometer-half:before{content:&quot;&quot;}.fa-thermometer-1:before,.fa-thermometer-quarter:before{content:&quot;&quot;}.fa-thermometer-0:before,.fa-thermometer-empty:before{content:&quot;&quot;}.fa-shower:before{content:&quot;&quot;}.fa-bathtub:before,.fa-s15:before,.fa-bath:before{content:&quot;&quot;}.fa-podcast:before{content:&quot;&quot;}.fa-window-maximize:before{content:&quot;&quot;}.fa-window-minimize:before{content:&quot;&quot;}.fa-window-restore:before{content:&quot;&quot;}.fa-times-rectangle:before,.fa-window-close:before{content:&quot;&quot;}.fa-times-rectangle-o:before,.fa-window-close-o:before{content:&quot;&quot;}.fa-bandcamp:before{content:&quot;&quot;}.fa-grav:before{content:&quot;&quot;}.fa-etsy:before{content:&quot;&quot;}.fa-imdb:before{content:&quot;&quot;}.fa-ravelry:before{content:&quot;&quot;}.fa-eercast:before{content:&quot;&quot;}.fa-microchip:before{content:&quot;&quot;}.fa-snowflake-o:before{content:&quot;&quot;}.fa-superpowers:before{content:&quot;&quot;}.fa-wpexplorer:before{content:&quot;&quot;}.fa-meetup:before{content:&quot;&quot;}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}.mfp-counter{font-family:Georgia,Times,serif}.mfp-bg{top:0;left:0;width:100%;height:100%;z-index:1042;overflow:hidden;position:fixed;background:#000;opacity:.8;filter:alpha(opacity=80)}.mfp-wrap{top:0;left:0;width:100%;height:100%;z-index:1043;position:fixed;outline:none !important;-webkit-backface-visibility:hidden}.mfp-container{text-align:center;position:absolute;width:100%;height:100%;left:0;top:0;padding:0 8px;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.mfp-container:before{content:&#39;&#39;;display:inline-block;height:100%;vertical-align:middle}.mfp-align-top .mfp-container:before{display:none}.mfp-content{position:relative;display:inline-block;vertical-align:middle;margin:0 auto;text-align:left;z-index:1045}.mfp-inline-holder .mfp-content,.mfp-ajax-holder .mfp-content{width:100%;cursor:auto}.mfp-ajax-cur{cursor:progress}.mfp-zoom-out-cur,.mfp-zoom-out-cur .mfp-image-holder .mfp-close{cursor:-moz-zoom-out;cursor:-webkit-zoom-out;cursor:zoom-out}.mfp-zoom{cursor:pointer;cursor:-webkit-zoom-in;cursor:-moz-zoom-in;cursor:zoom-in}.mfp-auto-cursor .mfp-content{cursor:auto}.mfp-close,.mfp-arrow,.mfp-preloader,.mfp-counter{-webkit-user-select:none;-moz-user-select:none;user-select:none}.mfp-loading.mfp-figure{display:none}.mfp-hide{display:none !important}.mfp-preloader{color:#ccc;position:absolute;top:50%;width:auto;text-align:center;margin-top:-0.8em;left:8px;right:8px;z-index:1044}.mfp-preloader a{color:#ccc}.mfp-preloader a:hover{color:#fff}.mfp-s-ready .mfp-preloader{display:none}.mfp-s-error .mfp-content{display:none}button.mfp-close,button.mfp-arrow{overflow:visible;cursor:pointer;background:transparent;border:0;-webkit-appearance:none;display:block;outline:none;padding:0;z-index:1046;-webkit-box-shadow:none;box-shadow:none}button::-moz-focus-inner{padding:0;border:0}.mfp-close{width:44px;height:44px;line-height:44px;position:absolute;right:0;top:0;text-decoration:none;text-align:center;opacity:1;filter:alpha(opacity=100);padding:0 0 18px 10px;color:#fff;font-style:normal;font-size:28px;font-family:Georgia,Times,serif}.mfp-close:hover,.mfp-close:focus{opacity:1;filter:alpha(opacity=100)}.mfp-close:active{top:1px}.mfp-close-btn-in .mfp-close{color:#fff}.mfp-image-holder .mfp-close,.mfp-iframe-holder .mfp-close{color:#fff;right:-6px;text-align:right;padding-right:6px;width:100%}.mfp-counter{position:absolute;top:0;right:0;color:#ccc;font-size:12px;line-height:18px}.mfp-arrow{position:absolute;opacity:1;filter:alpha(opacity=100);margin:0;top:50%;margin-top:-55px;padding:0;width:90px;height:110px;-webkit-tap-highlight-color:transparent}.mfp-arrow:active{margin-top:-54px}.mfp-arrow:hover,.mfp-arrow:focus{opacity:1;filter:alpha(opacity=100)}.mfp-arrow:before,.mfp-arrow:after,.mfp-arrow .mfp-b,.mfp-arrow .mfp-a{content:&#39;&#39;;display:block;width:0;height:0;position:absolute;left:0;top:0;margin-top:35px;margin-left:35px;border:medium inset transparent}.mfp-arrow:after,.mfp-arrow .mfp-a{border-top-width:13px;border-bottom-width:13px;top:8px}.mfp-arrow:before,.mfp-arrow .mfp-b{border-top-width:21px;border-bottom-width:21px;opacity:0.7}.mfp-arrow-left{left:0}.mfp-arrow-left:after,.mfp-arrow-left .mfp-a{border-right:17px solid #fff;margin-left:31px}.mfp-arrow-left:before,.mfp-arrow-left .mfp-b{margin-left:25px;border-right:27px solid #fff}.mfp-arrow-right{right:0}.mfp-arrow-right:after,.mfp-arrow-right .mfp-a{border-left:17px solid #fff;margin-left:39px}.mfp-arrow-right:before,.mfp-arrow-right .mfp-b{border-left:27px solid #fff}.mfp-iframe-holder{padding-top:40px;padding-bottom:40px}.mfp-iframe-holder .mfp-content{line-height:0;width:100%;max-width:900px}.mfp-iframe-holder .mfp-close{top:-40px}.mfp-iframe-scaler{width:100%;height:0;overflow:hidden;padding-top:56.25%}.mfp-iframe-scaler iframe{position:absolute;display:block;top:0;left:0;width:100%;height:100%;box-shadow:0 0 8px rgba(0,0,0,0.6);background:#000}img.mfp-img{width:auto;max-width:100%;height:auto;display:block;line-height:0;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:40px 0 40px;margin:0 auto}.mfp-figure{line-height:0}.mfp-figure:after{content:&#39;&#39;;position:absolute;left:0;top:40px;bottom:40px;display:block;right:0;width:auto;height:auto;z-index:-1;box-shadow:0 0 8px rgba(0,0,0,0.6);background:#444}.mfp-figure small{color:#bdbdbd;display:block;font-size:12px;line-height:14px}.mfp-figure figure{margin:0}.mfp-figure figcaption{margin-top:0;margin-bottom:0}.mfp-bottom-bar{margin-top:-36px;position:absolute;top:100%;left:0;width:100%;cursor:auto}.mfp-title{text-align:left;line-height:18px;color:#f3f3f3;word-wrap:break-word;padding-right:36px}.mfp-image-holder .mfp-content{max-width:100%}.mfp-gallery .mfp-image-holder .mfp-figure{cursor:pointer}@media screen and (max-width: 800px) and (orientation: landscape), screen and (max-height: 300px){.mfp-img-mobile .mfp-image-holder{padding-left:0;padding-right:0}.mfp-img-mobile img.mfp-img{padding:0}.mfp-img-mobile .mfp-figure:after{top:0;bottom:0}.mfp-img-mobile .mfp-figure small{display:inline;margin-left:5px}.mfp-img-mobile .mfp-bottom-bar{background:rgba(0,0,0,0.6);bottom:0;margin:0;top:auto;padding:3px 5px;position:fixed;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.mfp-img-mobile .mfp-bottom-bar:empty{padding:0}.mfp-img-mobile .mfp-counter{right:5px;top:3px}.mfp-img-mobile .mfp-close{top:0;right:0;width:35px;height:35px;line-height:35px;background:rgba(0,0,0,0.6);position:fixed;text-align:center;padding:0}}@media all and (max-width: 900px){.mfp-arrow{-webkit-transform:scale(0.75);transform:scale(0.75)}.mfp-arrow-left{-webkit-transform-origin:0;transform-origin:0}.mfp-arrow-right{-webkit-transform-origin:100%;transform-origin:100%}.mfp-container{padding-left:6px;padding-right:6px}}.mfp-ie7 .mfp-img{padding:0}.mfp-ie7 .mfp-bottom-bar{width:600px;left:50%;margin-left:-300px;margin-top:5px;padding-bottom:5px}.mfp-ie7 .mfp-container{padding:0}.mfp-ie7 .mfp-content{padding-top:44px}.mfp-ie7 .mfp-close{top:0;right:0;padding-top:0}a:focus{outline:thin dotted #f89406;outline:5px auto #f89406;outline-offset:-2px}*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}html{box-sizing:border-box;background-color:#fff;font-size:16px;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}@media (min-width: 22.5em){html{font-size:18px}}@media (min-width: 30em){html{font-size:20px}}@media (min-width: 80em){html{font-size:22px}}body{margin:0}::-moz-selection{color:#fff;background:#000}::selection{color:#fff;background:#000}article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}audio,canvas,video{display:inline-block;*display:inline;*zoom:1}audio:not([controls]){display:none}a{color:#52adc8}a:hover,a:active{outline:0}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{max-width:100%;width:auto9;height:auto;display:block;margin:auto;vertical-align:middle;border:0;-ms-interpolation-mode:bicubic}.emoji img{display:inline}#map_canvas img,.google-maps img{max-width:none}button,input,select,textarea{margin:0;font-size:100%;vertical-align:middle}button,input{*overflow:visible;line-height:normal}button::-moz-focus-inner,input::-moz-focus-inner{padding:0;border:0}button,html input[type=&quot;button&quot;],input[type=&quot;reset&quot;],input[type=&quot;submit&quot;]{-webkit-appearance:button;cursor:pointer}label,select,button,input[type=&quot;button&quot;],input[type=&quot;reset&quot;],input[type=&quot;submit&quot;],input[type=&quot;radio&quot;],input[type=&quot;checkbox&quot;]{cursor:pointer}input[type=&quot;search&quot;]{box-sizing:content-box;-webkit-appearance:textfield}input[type=&quot;search&quot;]::-webkit-search-decoration,input[type=&quot;search&quot;]::-webkit-search-cancel-button{-webkit-appearance:none}textarea{overflow:auto;vertical-align:top}html{position:relative;min-height:100%}body{counter-reset:h1;margin:0;padding:0;color:#494e52;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;line-height:1.5}body.overflow--hidden{overflow:hidden}h1,h2,h3,h4,h5,h6{margin:1.5em 0 0.5em;line-height:1.2;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-weight:bold}h1 a,h2 a,h3 a,h4 a,h5 a,h6 a{color:inherit;text-decoration:none}h1{counter-reset:h2;font-size:1.25em;color:#134268}h1:before{counter-increment:h1;content:counter(h1) &quot;. &quot;}h2{margin-left:0.5em;counter-reset:h3;font-size:1em;color:#1a5b8f}h2:before{counter-increment:h2;content:counter(h1) &quot;. &quot; counter(h2) &quot;. &quot;}h2 ~ p{margin-left:0.5em}h2 ~ ul{margin-left:0.5em}h2 ~ ol{margin-left:0.5em}h3{margin-left:1em;counter-reset:h4;font-size:1em;color:#2174b6}h3:before{counter-increment:h3;content:counter(h1) &quot;. &quot; counter(h2) &quot;. &quot; counter(h3) &quot;. &quot;}h3 ~ p{margin-left:1em}h3 ~ ul{margin-left:1em}h3 ~ ol{margin-left:1em}h4{margin-left:1.5em;font-size:1em;color:#2686d2}h4:before{counter-increment:h4;content:counter(h1) &quot;. &quot; counter(h2) &quot;. &quot; counter(h3) &quot;. &quot; counter(h4) &quot;. &quot;}h4 ~ p{margin-left:1.5em}h4 ~ ul{margin-left:1.5em}h4 ~ ol{margin-left:1.5em}h5{margin-left:2em;font-size:.85em;font-style:italic}h6{margin-left:2.3em;font-size:.75em}small,.small{font-size:.75em}li{font-size:1em}li&gt;ul{margin-left:0}p{margin-bottom:1.3em}u,ins{text-decoration:none;border-bottom:1px solid #494e52}u a,ins a{color:inherit}del a{color:inherit}p,pre,blockquote,ul,ol,dl,figure,table,fieldset{orphans:3;widows:3}abbr[title],abbr[data-original-title]{text-decoration:none;cursor:help;border-bottom:1px dotted #494e52}blockquote{margin:2em 1em 2em 0;padding-left:1em;padding-right:1em;font-style:italic;border-left:0.25em solid #7a8288}blockquote cite{font-style:italic}blockquote cite:before{content:&quot;2014&quot;;padding-right:5px}a:hover,a:active{outline:0}tt,code,kbd,samp,pre{font-family:Monaco,Consolas,&quot;Lucida Console&quot;,monospace}pre{overflow-x:auto}p&gt;code,a&gt;code,li&gt;code,figcaption&gt;code,td&gt;code{padding-top:0.1rem;padding-bottom:0.1rem;font-size:1em;background:#fafafa;border:1px solid #f2f3f3;border-radius:4px;box-shadow:0 1px 1px rgba(0,0,0,0.125)}p&gt;code:before,p&gt;code:after,a&gt;code:before,a&gt;code:after,li&gt;code:before,li&gt;code:after,figcaption&gt;code:before,figcaption&gt;code:after,td&gt;code:before,td&gt;code:after{letter-spacing:-0.2em;content:&quot;00a0&quot;}hr{display:block;margin:1em 0;border:0;border-top:1px solid #f2f3f3}ul li,ol li{margin-bottom:0.3em}figure{display:-webkit-box;display:flex;-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:start;align-items:flex-start;flex-wrap:wrap;margin:2em 0}figure img,figure iframe,figure .fluid-width-video-wrapper{margin-bottom:1em}figure img{max-width:100%;border-radius:4px;-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out}figure&gt;a{display:block}@media (min-width: 18.75em){figure.half&gt;a,figure.half&gt;img{width:calc(50% - 0.5em)}}figure.half figcaption{width:100%}@media (min-width: 18.75em){figure.third&gt;a,figure.third&gt;img{width:calc(33.3333% - 0.5em)}}figure.third figcaption{width:100%}figcaption{margin-bottom:0.5em;color:#777a7d;font-family:Georgia,Times,serif;font-size:.85em}figcaption a{color:inherit;text-decoration:none;border-bottom:1px solid #bdc1c4;-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out}figcaption a:hover{color:#000;border-bottom-color:#000}svg:not(:root){overflow:hidden}nav ul{margin:0;padding:0}nav li{list-style:none}nav a{text-decoration:none}nav ul li,nav ol li{margin-bottom:0}nav li ul,nav li ol{margin-top:0}b,i,strong,em,blockquote,p,q,span,figure,img,h1,h2,header,input,a,tr,td,form button,input[type=&quot;submit&quot;],.btn,#goog-wm-sb,.highlight,.archive__item-teaser{-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out}form{margin:0 0 5px 0}form fieldset{margin-bottom:5px;padding:0;border-width:0}form legend{display:block;width:100%;margin-bottom:10px;*margin-left:-7px;padding:0;color:#494e52;border:0;border-bottom:1px solid #ccc;white-space:normal}form p{margin-bottom:5px / 2}form ul{list-style-type:none;margin:0 0 5px 0;padding:0}form br{display:none}label,input,button,select,textarea{vertical-align:baseline;*vertical-align:middle}input,button,select,textarea{box-sizing:border-box;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif}label{display:block;color:#494e52;cursor:pointer}label small{font-size:.85em}label input,label textarea,label select{display:block}input,textarea,select{display:inline-block;width:100%;padding:0.25em;margin-bottom:0.5em;color:#494e52;background-color:#ffb5b5;border:1px solid #ccc;border-radius:4px;box-shadow:0 1px 1px rgba(0,0,0,0.125)}input:hover,textarea:hover,select:hover{border-color:#bdc1c4}.input-mini{width:60px}.input-small{width:90px}input[type=&quot;image&quot;],input[type=&quot;checkbox&quot;],input[type=&quot;radio&quot;]{width:auto;height:auto;padding:0;margin:3px 0;*margin-top:0;line-height:normal;cursor:pointer;border-radius:0;border:0 9}input[type=&quot;checkbox&quot;],input[type=&quot;radio&quot;]{box-sizing:border-box;padding:0;*width:13px;*height:13px}input[type=&quot;image&quot;]{border:0;box-shadow:none}input[type=&quot;file&quot;]{width:auto;padding:initial;line-height:initial;border:initial;background-color:transparent;background-color:initial;box-shadow:none}input[type=&quot;button&quot;],input[type=&quot;reset&quot;],input[type=&quot;submit&quot;]{width:auto;height:auto;cursor:pointer;*overflow:visible}select,input[type=&quot;file&quot;]{*margin-top:4px}select{width:auto;background-color:#fff}select[multiple],select[size]{height:auto}textarea{resize:vertical;height:auto;overflow:auto;vertical-align:top}input[type=&quot;hidden&quot;]{display:none}.form{position:relative}.radio,.checkbox{padding-left:18px;font-weight:normal}.radio input[type=&quot;radio&quot;],.checkbox input[type=&quot;checkbox&quot;]{float:left;margin-left:-18px}.radio.inline,.checkbox.inline{display:inline-block;padding-top:5px;margin-bottom:0;vertical-align:middle}.radio.inline+.radio.inline,.checkbox.inline+.checkbox.inline{margin-left:10px}input[disabled],select[disabled],textarea[disabled],input[readonly],select[readonly],textarea[readonly]{opacity:0.5;cursor:not-allowed}input:focus,textarea:focus{border-color:#7a8288;outline:0;outline:thin dotted 9}input[type=&quot;file&quot;]:focus,input[type=&quot;radio&quot;]:focus,input[type=&quot;checkbox&quot;]:focus,select:focus{box-shadow:none}.help-block,.help-inline{color:#52adc8}.help-block{display:block;margin-bottom:1em;line-height:1em}.help-inline{display:inline-block;vertical-align:middle;padding-left:5px}.form-inline input,.form-inline textarea,.form-inline select{display:inline-block;margin-bottom:0}.form-inline label{display:inline-block}.form-inline .radio,.form-inline .checkbox,.form-inline .radio{padding-left:0;margin-bottom:0;vertical-align:middle}.form-inline .radio input[type=&quot;radio&quot;],.form-inline .checkbox input[type=&quot;checkbox&quot;]{float:left;margin-left:0;margin-right:3px}.form-search input,.form-search textarea,.form-search select{display:inline-block;margin-bottom:0}.form-search .search-query{padding-left:14px;padding-right:14px;margin-bottom:0;border-radius:14px}.form-search label{display:inline-block}.form-search .radio,.form-search .checkbox,.form-inline .radio{padding-left:0;margin-bottom:0;vertical-align:middle}.form-search .radio input[type=&quot;radio&quot;],.form-search .checkbox input[type=&quot;checkbox&quot;]{float:left;margin-left:0;margin-right:3px}.form--loading:before{content:&#39;&#39;}.form--loading .form__spinner{display:block}.form:before{position:absolute;top:0;left:0;width:100%;height:100%;background-color:rgba(255,255,255,0.7);z-index:10}.form__spinner{display:none;position:absolute;top:50%;left:50%;z-index:11}#goog-fixurl ul{list-style:none;margin-left:0;padding-left:0}#goog-fixurl ul li{list-style-type:none}#goog-wm-qt{width:auto;margin-right:10px;margin-bottom:20px;padding:8px 20px;display:inline-block;font-size:.85em;background-color:#fff;color:#000;border-width:2px !important;border-style:solid !important;border-color:gray;border-radius:4px}table{margin-bottom:1em;width:100%;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:.85em;border-collapse:collapse;border:1px solid #bdc1c4}table+table{margin-top:1em}thead{background-color:#f2f3f3;border-bottom:1px solid #bdc1c4}th{padding:0.5em;font-weight:bold;text-align:left;border-right:1px solid #bdc1c4}td{padding:0.5em;border-bottom:1px solid #bdc1c4;border-right:1px solid #bdc1c4}tr,td,th{vertical-align:middle}@-webkit-keyframes intro{0%{opacity:0}100%{opacity:1}}@keyframes intro{0%{opacity:0}100%{opacity:1}}.btn,#goog-wm-sb{display:inline-block;margin-bottom:0.25em;padding:0.5em 1em;color:#fff !important;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:.85em;font-weight:bold;text-align:center;text-decoration:none;background-color:#7a8288;border:0 !important;border-radius:4px;cursor:pointer}.btn:hover,#goog-wm-sb:hover{background-color:#333}.btn .icon,#goog-wm-sb .icon{margin-right:0.5em}.btn .icon+.hidden,#goog-wm-sb .icon+.hidden{margin-left:-0.5em}.btn--block{display:block;width:100%}.btn--block+.btn--block{margin-top:0.25em}.btn--inverse{color:#7a8288 !important;border:1px solid #bdc1c4 !important;background-color:#fff}.btn--inverse:hover{color:#fff !important;border-color:#7a8288}.btn--light-outline{border:1px solid #fff !important;background-color:transparent}.btn--info{background-color:#52adc8}.btn--info:hover{background-color:#428aa0}.btn--warning{background-color:#f89406}.btn--warning:hover{background-color:#c67605}.btn--success{background-color:#62c462}.btn--success:hover{background-color:#4e9d4e}.btn--danger{background-color:#ee5f5b}.btn--danger:hover{background-color:#be4c49}.btn--disabled{pointer-events:none;cursor:not-allowed;filter:alpha(opacity=65);box-shadow:none;opacity:0.65}.btn--facebook{background-color:#3b5998}.btn--facebook:hover{background-color:#2f477a}.btn--twitter{background-color:#55acee}.btn--twitter:hover{background-color:#448abe}.btn--google-plus{background-color:#dd4b39}.btn--google-plus:hover{background-color:#b13c2e}.btn--linkedin{background-color:#007bb6}.btn--linkedin:hover{background-color:#006292}.btn--x-large{font-size:1.25em}.btn--large{font-size:1em}.btn--small{font-size:.75em}.notice{margin:2em 0 !important;padding:1em;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:16px !important;text-indent:initial;background-color:#f8f9f9;border-radius:4px;box-shadow:0 1px 1px rgba(189,193,196,0.25)}.notice a{color:#52adc8;text-decoration:none}.notice a:hover{color:#254e5a}.notice code{background-color:#fcfcfc}.notice ul:last-child{margin-bottom:0}.notice--primary{margin:2em 0 !important;padding:1em;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:16px !important;text-indent:initial;background-color:#f2f3f3;border-radius:4px;box-shadow:0 1px 1px rgba(122,130,136,0.25)}.notice--primary a{color:#52adc8;text-decoration:none}.notice--primary a:hover{color:#254e5a}.notice--primary code{background-color:#f8f9f9}.notice--primary ul:last-child{margin-bottom:0}.notice--info{margin:2em 0 !important;padding:1em;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:16px !important;text-indent:initial;background-color:#eef7fa;border-radius:4px;box-shadow:0 1px 1px rgba(82,173,200,0.25)}.notice--info a{color:#52adc8;text-decoration:none}.notice--info a:hover{color:#254e5a}.notice--info code{background-color:#f6fbfc}.notice--info ul:last-child{margin-bottom:0}.notice--warning{margin:2em 0 !important;padding:1em;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:16px !important;text-indent:initial;background-color:#fef4e6;border-radius:4px;box-shadow:0 1px 1px rgba(248,148,6,0.25)}.notice--warning a{color:#52adc8;text-decoration:none}.notice--warning a:hover{color:#254e5a}.notice--warning code{background-color:#fffaf3}.notice--warning ul:last-child{margin-bottom:0}.notice--success{margin:2em 0 !important;padding:1em;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:16px !important;text-indent:initial;background-color:#eff9ef;border-radius:4px;box-shadow:0 1px 1px rgba(98,196,98,0.25)}.notice--success a{color:#52adc8;text-decoration:none}.notice--success a:hover{color:#254e5a}.notice--success code{background-color:#f7fcf7}.notice--success ul:last-child{margin-bottom:0}.notice--danger{margin:2em 0 !important;padding:1em;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:16px !important;text-indent:initial;background-color:#fdefef;border-radius:4px;box-shadow:0 1px 1px rgba(238,95,91,0.25)}.notice--danger a{color:#52adc8;text-decoration:none}.notice--danger a:hover{color:#254e5a}.notice--danger code{background-color:#fef7f7}.notice--danger ul:last-child{margin-bottom:0}.masthead{position:sticky;top:0px;z-index:10}.masthead__inner-wrap{max-width:100%;margin-left:auto;margin-right:auto;clear:both;display:-webkit-box;display:block;-webkit-box-pack:justify;justify-content:space-between;padding:0em 1em 0em;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif}.masthead__inner-wrap:after{content:&quot; &quot;;display:block;clear:both}.masthead__inner-wrap::after{clear:both;content:&quot;&quot;;display:table}@media (min-width: 80em){.masthead__inner-wrap{max-width:1280px}}.masthead__inner-wrap nav{z-index:10}.masthead__inner-wrap a{text-decoration:none}.masthead__search-wrap{max-width:1280px;margin-left:auto;margin-right:auto;clear:both;display:-webkit-box;display:flex;-webkit-box-pack:justify;justify-content:space-between;padding:0em 0em 0em;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif}.site-title{display:flex;align-self:stretch;-webkit-box-align:center;align-items:center;font-weight:bold;z-index:20}.masthead__menu{width:100%}.masthead__menu .site-nav{margin-left:0}@media (min-width: 18.75em){.masthead__menu .site-nav{float:right}}.masthead__menu ul{margin:0;padding:0;clear:both;list-style-type:none}.masthead__menu-item{display:block;list-style-type:none;white-space:nowrap}.masthead__menu-item--lg{padding-right:2em;font-weight:700}.container{overflow:hidden;background-color:#333;font-family:Arial;max-width:1280px;margin-left:auto;margin-right:auto}.dropdown{float:left;overflow:hidden}.dropdown .dropbtn{font-size:16px;border:none;outline:none;color:#fff;padding:14px 16px;background-color:#333;height:52px}.container a:hover,.dropdown:hover .dropbtn{background-color:#2581DC}.dropdown-content{display:none;position:absolute;background-color:#777;min-width:150px;z-index:1}.dropdown-content-wrapper{float:none;position:relative}.dropdown-content a{font-size:14px;color:#fff;padding:6px 16px;text-decoration:none;text-align:left;display:block}.dropdown-content a:hover{background-color:#333}.dropdown:hover .dropdown-content{display:block}.dropdown-2nd-content{display:none;position:absolute;right:-150px;top:-0.5px;background-color:#999;min-width:150px;box-shadow:0px 4px 8px 0px rgba(0,0,0,0.2);z-index:2}.dropdown-2nd-content a{float:none;color:#fff;padding:6px 16px;text-decoration:none;display:block;text-align:left}.dropdown-2nd-content a:hover{background-color:#333}.dropdown-content-wrapper:hover .dropdown-2nd-content{display:block}.breadcrumbs{max-width:100%;margin-left:auto;margin-right:auto;clear:both;margin-top:0;margin-bottom:0;padding-left:2em;padding-right:2em;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;-webkit-animation:intro 0.3s both;animation:intro 0.3s both;-webkit-animation-delay:0.30s;animation-delay:0.30s}.breadcrumbs:after{content:&quot; &quot;;display:block;clear:both}.breadcrumbs::after{clear:both;content:&quot;&quot;;display:table}@media (min-width: 30em){.breadcrumbs{padding-left:1em;padding-right:1em}}@media (min-width: 80em){.breadcrumbs{max-width:1280px}}.breadcrumbs ol{padding:0;list-style:none;font-size:.85em}@media (min-width: 30em){.breadcrumbs ol{width:83.05085%;float:right;margin-right:0}}@media (min-width: 80em){.breadcrumbs ol{padding-left:4.23729%}}.breadcrumbs li{display:inline}.breadcrumbs .current{font-weight:bold}.pagination{clear:both;width:100%;float:left;margin-left:0;margin-right:0;clear:both;margin-top:1em;padding-top:1em}.pagination::after{clear:both;content:&quot;&quot;;display:table}.pagination ul{margin:0;padding:0;list-style-type:none;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif}.pagination li{display:block;float:left;margin-left:-1px}.pagination li a{display:block;margin-bottom:0.25em;padding:0.5em 1em;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:14px;font-weight:bold;line-height:1.5;text-align:center;text-decoration:none;color:#9ba1a6;border:1px solid #bdc1c4;border-radius:0}.pagination li a:hover{color:#3e8296}.pagination li a.current{color:#fff;background:#7a8288}.pagination li a.disabled{color:#dee0e1;pointer-events:none;cursor:not-allowed}.pagination li:first-child{margin-left:0}.pagination li:first-child a{border-top-left-radius:4px;border-bottom-left-radius:4px}.pagination li:last-child a{border-top-right-radius:4px;border-bottom-right-radius:4px}.pagination--pager{display:block;padding:1em 2em;float:left;width:50%;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:1em;font-weight:bold;text-align:center;text-decoration:none;color:#52adc8;border:1px solid #bdc1c4;border-radius:4px}.pagination--pager:hover{color:#3e8296}.pagination--pager:first-child{border-top-right-radius:0;border-bottom-right-radius:0}.pagination--pager:last-child{margin-left:-1px;border-top-left-radius:0;border-bottom-left-radius:0}.pagination--pager.disabled{color:#dee0e1;pointer-events:none;cursor:not-allowed}.page__content+.pagination,.page__meta+.pagination,.comment__date+.pagination,.page__share+.pagination,.page__comments+.pagination{margin-top:2em;padding-top:2em;border-top:1px solid #f2f3f3}.greedy-nav{position:relative;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;background:#fff}.greedy-nav a{padding:0.3rem;color:#000;text-decoration:none}.greedy-nav a:hover{color:#5c6266}.greedy-nav button{padding:0 0.5rem;align-self:stretch;border:0;outline:none;color:#fff;background-color:#7a8288;cursor:pointer}.greedy-nav .visible-links{display:-webkit-box;display:flex;-webkit-box-pack:end;justify-content:flex-end;-webkit-box-flex:1;flex:1;padding-right:2rem;overflow:hidden}.greedy-nav .visible-links li{-webkit-box-flex:0;flex:none}.greedy-nav .visible-links li:last-child a{margin-right:0}.greedy-nav .visible-links a{position:relative}.greedy-nav .visible-links a:before{content:&quot;&quot;;position:absolute;left:0;bottom:0;height:4px;background:#bdc1c4;width:100%;-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;-webkit-transform:scaleX(0) translate3d(0, 0, 0);transform:scaleX(0) translate3d(0, 0, 0)}.greedy-nav .visible-links a:hover:before{-webkit-transform:scaleX(1);-ms-transform:scaleX(1);transform:scaleX(1)}.greedy-nav .hidden-links{position:absolute;top:100%;right:0;margin-top:15px;padding:5px;border:1px solid #f2f3f3;border-radius:4px;background:#fff;box-shadow:0 2px 4px 0 rgba(0,0,0,0.16),0 2px 10px 0 rgba(0,0,0,0.12)}.greedy-nav .hidden-links.hidden{display:none}.greedy-nav .hidden-links a{margin:0;padding:10px 20px;font-size:1em}.greedy-nav .hidden-links a:hover{color:#5c6266;background:#dee0e1}.greedy-nav .hidden-links:before{content:&quot;&quot;;position:absolute;top:-11px;right:10px;width:0;border-style:solid;border-width:0 10px 10px;border-color:#f2f3f3 transparent;display:block;z-index:0}.greedy-nav .hidden-links:after{content:&quot;&quot;;position:absolute;top:-10px;right:10px;width:0;border-style:solid;border-width:0 10px 10px;border-color:#fff transparent;display:block;z-index:1}.greedy-nav .hidden-links li{display:block;border-bottom:1px solid #f2f3f3}.greedy-nav .hidden-links li:last-child{border-bottom:none}.nav__list{margin-bottom:1.5em}.nav__list .nav__items{margin:0;font-size:1.25rem}.nav__items{width:100%;max-width:600px;background:#4d5158;margin:4em auto}.nav__items ul{display:none}.nav__items li{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.nav__items input[type=radio]{position:absolute;opacity:0}.nav__items label,.nav__items a{position:relative;display:block;background:#fff;box-shadow:inset 0 -1px #2174b6;color:#494e52;font-size:0.8rem;padding:3px 10px}.nav__items label:hover,.nav__items a:hover{background:#eee}.nav__items input[type=radio]:checked+label::after{background-position:-32px 0}.nav__items input[type=radio]:checked+label+ul,.nav__items input[type=radio]:checked+label:nth-of-type(n)+ul{display:block}.nav__items ul label,.nav__items ul a{background:#fff;box-shadow:inset 0 -1px #50adf7;color:#487ea9;font-size:0.9em;padding:3px 20px}.nav__items ul label:hover,.nav__items ul a:hover{background:#eee}.nav__items&gt;li:last-of-type&gt;label,.nav__items&gt;li:last-of-type&gt;a,.nav__items&gt;li&gt;ul&gt;li:last-of-type label,.nav__items&gt;li&gt;ul&gt;li:last-of-type a{box-shadow:none}.nav__items ul ul label,.nav__items ul ul a{font-size:0.9em;padding-left:30px}.nav__items ul ul ul label,.nav__items ul ul ul a{padding-left:118px}@media (max-width: 29.9375em){.nav__list input:checked ~ .nav__items{-webkit-transition:0.5s ease-in-out;transition:0.5s ease-in-out;max-height:9999px;overflow:visible;opacity:1;margin-top:1em;-webkit-transform:translate(0, 0);-ms-transform:translate(0, 0);transform:translate(0, 0)}}.nav__title{margin:0;padding:0.5rem 1rem;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:1em;font-weight:bold}.nav__sub-title{display:block;margin:0.5rem 0;padding:0.5rem 0;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:.85em;font-weight:bold;text-transform:uppercase;border-bottom:1px solid #f2f3f3}.toc{font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;color:#7a8288;text-transform:uppercase;letter-spacing:1px;background-color:#fff;border:1px solid #f2f3f3;border-radius:4px;box-shadow:0 1px 1px rgba(0,0,0,0.125)}.toc .nav__title{color:#fff;font-size:.85em;background:#7a8288;border-top-left-radius:4px;border-top-right-radius:4px}.toc__menu{margin:0;padding:0;width:100%;list-style:none;font-size:0.8rem}.toc__menu a{display:block;padding:0.5rem 1rem;color:#7a8288;font-size:.75em;font-weight:bold;line-height:1.5;border-bottom:1px solid #f2f3f3}.toc__menu a:hover{color:#000;background:#f2f3f3}.toc__menu&gt;li:last-child a{border-bottom:none}.toc__menu li ul&gt;li a{padding-left:2rem;font-weight:normal}.toc__menu li&gt;ul li{display:none}@media (min-width: 22.5em){.toc__menu li&gt;ul li{display:block}}.page__footer{clear:both;width:100%;float:left;margin-left:0;margin-right:0;clear:both;position:absolute;bottom:0;width:100%;clear:both;height:auto;margin-top:3em;color:#9ba1a6;-webkit-animation:intro 0.3s both;animation:intro 0.3s both;-webkit-animation-delay:0.45s;animation-delay:0.45s;background-color:#f2f3f3;border-top:1px solid #bdc1c4}.page__footer::after{clear:both;content:&quot;&quot;;display:table}.page__footer footer{max-width:100%;margin-left:auto;margin-right:auto;clear:both;margin-top:0em;padding:0 1em 0.5em}.page__footer footer:after{content:&quot; &quot;;display:block;clear:both}.page__footer footer::after{clear:both;content:&quot;&quot;;display:table}@media (min-width: 80em){.page__footer footer{max-width:1280px}}.page__footer a{color:inherit;text-decoration:none}.page__footer a:hover{text-decoration:underline}.page__footer .fa{color:#9ba1a6}.page__footer-copyright{font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:.75em}.page__footer-follow ul{margin:0;padding:0;list-style-type:none}.page__footer-follow li{display:inline-block;padding-top:5px;padding-bottom:5px;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:.85em;text-transform:uppercase}.page__footer-follow li+li:before{content:&quot;&quot;;padding-right:5px}.page__footer-follow a{padding-right:10px;font-weight:bold}div.highlighter-rouge,figure.highlight{position:relative;margin-bottom:1em;font-family:Monaco,Consolas,&quot;Lucida Console&quot;,monospace;font-size:.85em;line-height:1.8;border:1px solid #f2f3f3;border-radius:4px;background-color:#fafafa;box-shadow:0 1px 1px rgba(0,0,0,0.125)}div.highlighter-rouge:before,figure.highlight:before{position:absolute;top:0;right:0;padding:0.5em;background-color:#f2f3f3;content:&quot;f121&quot;;font-family:&quot;fontawesome&quot; !important;line-height:1;text-transform:none;speak:none}div.highlighter-rouge .highlight,figure.highlight .highlight{margin:0;padding:1em}figure.highlight{padding-left:1em;padding-right:1em}.highlight table{font-size:1em;border:0}.highlight table td{padding:5px;border:0}.highlight table td.gutter{padding-right:1em;color:#bdc1c4}.highlight table pre{margin:0}.highlight pre{width:100%}.highlight .c{color:#93a1a1}.highlight .err{color:#586e75}.highlight .g{color:#586e75}.highlight .k{color:#859900}.highlight .l{color:#586e75}.highlight .n{color:#586e75}.highlight .o{color:#859900}.highlight .x{color:#cb4b16}.highlight .p{color:#586e75}.highlight .cm{color:#93a1a1}.highlight .cp{color:#859900}.highlight .c1{color:#93a1a1}.highlight .cs{color:#859900}.highlight .gd{color:#2aa198}.highlight .ge{color:#586e75;font-style:italic}.highlight .gr{color:#dc322f}.highlight .gh{color:#cb4b16}.highlight .gi{color:#859900}.highlight .go{color:#586e75}.highlight .gp{color:#586e75}.highlight .gs{color:#586e75;font-weight:bold}.highlight .gu{color:#cb4b16}.highlight .gt{color:#586e75}.highlight .kc{color:#cb4b16}.highlight .kd{color:#22b3eb}.highlight .kn{color:#859900}.highlight .kp{color:#859900}.highlight .kr{color:#22b3eb}.highlight .kt{color:#dc322f}.highlight .ld{color:#586e75}.highlight .m{color:#2aa198}.highlight .s{color:#2aa198}.highlight .na{color:#586e75}.highlight .nb{color:#B58900}.highlight .nc{color:#22b3eb}.highlight .no{color:#cb4b16}.highlight .nd{color:#22b3eb}.highlight .ni{color:#cb4b16}.highlight .ne{color:#cb4b16}.highlight .nf{color:#22b3eb}.highlight .nl{color:#586e75}.highlight .nn{color:#586e75}.highlight .nx{color:#586e75}.highlight .py{color:#586e75}.highlight .nt{color:#22b3eb}.highlight .nv{color:#22b3eb}.highlight .ow{color:#859900}.highlight .w{color:#586e75}.highlight .mf{color:#2aa198}.highlight .mh{color:#2aa198}.highlight .mi{color:#2aa198}.highlight .mo{color:#2aa198}.highlight .sb{color:#93a1a1}.highlight .sc{color:#2aa198}.highlight .sd{color:#586e75}.highlight .s2{color:#2aa198}.highlight .se{color:#cb4b16}.highlight .sh{color:#586e75}.highlight .si{color:#2aa198}.highlight .sx{color:#2aa198}.highlight .sr{color:#dc322f}.highlight .s1{color:#2aa198}.highlight .ss{color:#2aa198}.highlight .bp{color:#22b3eb}.highlight .vc{color:#22b3eb}.highlight .vg{color:#22b3eb}.highlight .vi{color:#22b3eb}.highlight .il{color:#2aa198}.hidden{display:none;visibility:hidden}.load{display:none}.transparent{opacity:0}.visually-hidden,.screen-reader-text,.screen-reader-text span,.screen-reader-shortcut{position:absolute !important;clip:rect(1px, 1px, 1px, 1px);height:1px !important;width:1px !important;border:0 !important;overflow:hidden}body:hover .visually-hidden a,body:hover .visually-hidden input,body:hover .visually-hidden button{display:none !important}.screen-reader-text:focus,.screen-reader-shortcut:focus{clip:auto !important;height:auto !important;width:auto !important;display:block;font-size:1em;font-weight:bold;padding:15px 23px 14px;background:#fff;z-index:100000;text-decoration:none;box-shadow:0 0 2px 2px rgba(0,0,0,0.6)}.skip-link{position:fixed;z-index:20;margin:0;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;white-space:nowrap}.skip-link li{height:0;width:0;list-style:none}.text-left{text-align:left}.text-center{text-align:center}.text-right{text-align:right}.text-justify{text-align:justify}.text-nowrap{white-space:nowrap}.cf{clear:both}.wrapper{max-width:100%;margin-left:auto;margin-right:auto}.wrapper:after{content:&quot; &quot;;display:block;clear:both}.align-left{display:block;margin-left:auto;margin-right:auto}@media (min-width: 18.75em){.align-left{float:left;margin-right:1em}}.align-right{display:block;margin-left:auto;margin-right:auto}@media (min-width: 18.75em){.align-right{float:right;margin-left:1em}}.align-center{display:block;margin-left:auto;margin-right:auto}@media (min-width: 30em){.full{margin-right:-19.49153% !important}}.icon{display:inline-block;fill:currentColor;width:1em;height:1.1em;line-height:1;position:relative;top:-0.1em;vertical-align:middle}.social-icons .fa{color:#000}.social-icons .fa-behance,.social-icons .fa-behance-square{color:#1769FF}.social-icons .fa-bitbucket,.social-icons .fa-bitbucket-square{color:#205081}.social-icons .fa-dribbble{color:#ea4c89}.social-icons .fa-facebook,.social-icons .fa-facebook-square{color:#3b5998}.social-icons .fa-flickr{color:#ff0084}.social-icons .fa-foursquare{color:#0072b1}.social-icons .fa-github,.social-icons .fa-github-alt,.social-icons .fa-github-square{color:#171516}.social-icons .fa-google-plus,.social-icons .fa-google-plus-square{color:#dd4b39}.social-icons .fa-instagram{color:#517fa4}.social-icons .fa-lastfm,.social-icons .fa-lastfm-square{color:#d51007}.social-icons .fa-linkedin,.social-icons .fa-linkedin-square{color:#007bb6}.social-icons .fa-pinterest,.social-icons .fa-pinterest-p,.social-icons .fa-pinterest-square{color:#cb2027}.social-icons .fa-rss,.social-icons .fa-rss-square{color:#fa9b39}.social-icons .fa-soundcloud{color:#f30}.social-icons .fa-stack-exchange,.social-icons .fa-stack-overflow{color:#fe7a15}.social-icons .fa-tumblr,.social-icons .fa-tumblr-square{color:#32506d}.social-icons .fa-twitter,.social-icons .fa-twitter-square{color:#55acee}.social-icons .fa-vimeo,.social-icons .fa-vimeo-square{color:#1ab7ea}.social-icons .fa-vine{color:#00bf8f}.social-icons .fa-youtube,.social-icons .fa-youtube-square,.social-icons .fa-youtube-play{color:#b00}.social-icons .fa-xing,.social-icons .fa-xing-square{color:#006567}.navicon{position:relative;width:1.5rem;height:.25rem;background:#fff;margin:auto;-webkit-transition:0.3s;transition:0.3s}.navicon:before,.navicon:after{content:&quot;&quot;;position:absolute;left:0;width:1.5rem;height:.25rem;background:#fff;-webkit-transition:0.3s;transition:0.3s}.navicon:before{top:-.5rem}.navicon:after{bottom:-.5rem}.close .navicon{background:transparent}.close .navicon:before,.close .navicon:after{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;top:0;width:1.5rem}.close .navicon:before{-webkit-transform:rotate3d(0, 0, 1, 45deg);transform:rotate3d(0, 0, 1, 45deg)}.close .navicon:after{-webkit-transform:rotate3d(0, 0, 1, -45deg);transform:rotate3d(0, 0, 1, -45deg)}@media (min-width: 30em){.sticky{clear:both;position:-webkit-sticky;position:sticky;top:5em}.sticky::after{clear:both;content:&quot;&quot;;display:table}.sticky&gt;*{display:block}}.well{min-height:20px;padding:19px;margin-bottom:20px;background-color:#f5f5f5;border:1px solid #e3e3e3;border-radius:4px;box-shadow:inset 0 1px 1px rgba(0,0,0,0.05)}.show-modal{overflow:hidden;position:relative}.show-modal:before{position:absolute;content:&quot;&quot;;top:0;left:0;width:100%;height:100%;z-index:999;background-color:rgba(255,255,255,0.85)}.show-modal .modal{display:block}.modal{display:none;position:fixed;width:300px;top:50%;left:50%;margin-left:-150px;margin-top:-150px;min-height:0;z-index:9999;background:#fff;border:1px solid #f2f3f3;border-radius:4px;box-shadow:0 1px 1px rgba(0,0,0,0.125)}.modal__title{margin:0;padding:0.5em 1em}.modal__supporting-text{padding:0 1em 0.5em 1em}.modal__actions{padding:0.5em 1em;border-top:1px solid #f2f3f3}.footnote{color:#9ba1a6;text-decoration:none}.footnotes{color:#9ba1a6}.footnotes ol,.footnotes li,.footnotes p{margin-bottom:0;font-size:.85em}a.reversefootnote{color:#7a8288;text-decoration:none}a.reversefootnote:hover{text-decoration:underline}.required{color:#ee5f5b;font-weight:bold}.gsc-control-cse{padding:0 !important}.gsc-control-cse table,.gsc-control-cse tr,.gsc-control-cse td{border:0 !important}.cse .gsc-search-button input.gsc-search-button-v2,input.gsc-search-button-v2{width:auto !important;height:auto !important}.gsc-search-box{border:0px solid !important;border-radius:25px !important;margin:0 !important;height:40px !important}.gsc-input{padding:0 !important}.gstl_50{margin:0 !important}.gsib_a{padding:0 !important}.responsive-video-container{position:relative;margin-bottom:1em;padding-bottom:56.25%;height:0;overflow:hidden;max-width:100%}.responsive-video-container iframe,.responsive-video-container object,.responsive-video-container embed{position:absolute;top:0;left:0;width:100%;height:100%}:-webkit-full-screen-ancestor .masthead,:-webkit-full-screen-ancestor .page__footer{position:static}#main{max-width:100%;margin-left:auto;margin-right:auto;clear:both;margin-top:1em;padding-left:1em;padding-right:1em;-webkit-animation:intro 0.3s both;animation:intro 0.3s both;-webkit-animation-delay:0.35s;animation-delay:0.35s}#main:after{content:&quot; &quot;;display:block;clear:both}#main::after{clear:both;content:&quot;&quot;;display:table}@media (min-width: 80em){#main{max-width:1280px}}@media (min-width: 30em){.page{width:83.05085%;float:right;margin-right:0;padding-left:4.23729%;padding-right:16.94915%}}.page .page__inner-wrap{clear:both;width:100%;float:left;margin-left:0;margin-right:0}.page .page__inner-wrap .page__content,.page .page__inner-wrap .page__meta,.page .page__inner-wrap .comment__date,.page .page__inner-wrap .page__share{clear:both;width:100%;float:left;margin-left:0;margin-right:0}.page__title{margin-top:0;line-height:1}.page__title+.page__meta,.page__title+.comment__date{margin-top:-0.5em}.page__lead{font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:1.25em}.page__content h2{padding-bottom:0.5em;border-bottom:1px solid #f2f3f3}.page__content p,.page__content li,.page__content dl{font-size:1em}.page__content p{margin:0 0 1.3em}.page__content a{text-decoration:none}.page__content a:hover{text-decoration:underline}.page__content a:hover img{box-shadow:0 0 10px rgba(0,0,0,0.25)}.page__content dt{margin-top:1em;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-weight:bold}.page__content dd{margin-left:1em;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:.85em}.page__content .small{font-size:.85em}.page__content blockquote+.small{margin-top:-1.5em;padding-left:1.25rem}.page__share{margin-top:2em;padding-top:1em;border-top:1px solid #f2f3f3}@media (max-width: 18.75em){.page__share .btn span,.page__share #goog-wm-sb span{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}}.page__share-title{margin-bottom:10px;font-size:.85em;text-transform:uppercase}.page__meta,.comment__date{margin-top:2em;color:#9ba1a6;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:.85em}.page__meta p,.comment__date p{margin:0}.page__meta a,.comment__date a{color:inherit}.page__meta-title{margin-bottom:10px;font-size:.85em;text-transform:uppercase}.page__taxonomy .sep{display:none}.page__taxonomy strong{margin-right:10px}.page__taxonomy-item{display:inline-block;margin-right:5px;margin-bottom:8px;padding:5px 10px;text-decoration:none;border:1px solid #bdc1c4;border-radius:4px}.page__taxonomy-item:hover{text-decoration:none;color:#3e8296}.page__comments{clear:both;width:100%;float:left;margin-left:0;margin-right:0}.page__comments-title{margin-top:2rem;margin-bottom:10px;padding-top:2rem;font-size:.85em;border-top:1px solid #f2f3f3;text-transform:uppercase}.page__comments-form{padding:1em;background:#f2f3f3;-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out}.page__comments-form.disabled input,.page__comments-form.disabled button,.page__comments-form.disabled textarea,.page__comments-form.disabled label{pointer-events:none;cursor:not-allowed;filter:alpha(opacity=65);box-shadow:none;opacity:0.65}.comment{clear:both;margin:1em 0}.comment::after{clear:both;content:&quot;&quot;;display:table}.comment:not(:last-child){border-bottom:1px solid #f2f3f3}.comment__avatar-wrapper{float:left;width:60px;height:60px}@media (min-width: 30em){.comment__avatar-wrapper{width:100px;height:100px}}.comment__avatar{width:40px;height:40px;border-radius:50%}@media (min-width: 30em){.comment__avatar{width:80px;height:80px;padding:5px;border:1px solid #f2f3f3}}.comment__content-wrapper{float:right;width:calc(100% - 60px)}@media (min-width: 30em){.comment__content-wrapper{width:calc(100% - 100px)}}.comment__author{margin:0}.comment__author a{text-decoration:none}.comment__date{margin:0}.comment__date a{text-decoration:none}.page__related{margin-top:2em;padding-top:1em;border-top:1px solid #f2f3f3;clear:both;float:left}.page__related::after{clear:both;content:&quot;&quot;;display:table}@media (min-width: 30em){.page__related{margin-left:21.18644%}}.page__related a{color:inherit;text-decoration:none}.page__related-title{margin-bottom:10px;font-size:.85em;text-transform:uppercase}.archive{margin-bottom:2em}@media (min-width: 22.5em){.archive{width:100%;float:left;margin-left:0;margin-right:0}}@media (min-width: 30em){.archive{width:74.57627%;float:right;margin-right:0}}.archive__subtitle{margin:1.414em 0 0;padding-bottom:0.5em;font-size:1em;color:#9ba1a6;border-bottom:1px solid #f2f3f3}.archive__subtitle+.list__item .archive__item-title{margin-top:0.5em}.archive__item-title{margin-bottom:0.25em;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif}.archive__item-title a+a{opacity:0.5}.page__content .archive__item-title{margin-top:1em;border-bottom:none}.archive__item-excerpt{margin-top:0;font-size:.85em}.archive__item-excerpt+p{text-indent:0}.archive__item-teaser{border-radius:4px;overflow:hidden}.archive__item-teaser img{width:100%}.archive__item:hover .archive__item-teaser{box-shadow:0 0 10px rgba(0,0,0,0.25)}.archive__item:hover .archive__item-title{text-decoration:underline}.sidebar{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);clear:both;margin-bottom:1em}.sidebar::after{clear:both;content:&quot;&quot;;display:table}@media (min-width: 30em){.sidebar{width:23.72881%;float:left;margin-right:1.69492%;-webkit-transition:opacity 0.2s ease-in-out;transition:opacity 0.2s ease-in-out}}@media (min-width: 80em){.sidebar{padding-right:0;padding-left:0}}.sidebar h2,.sidebar h3,.sidebar h4,.sidebar h5,.sidebar h6{margin-bottom:0;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif}.sidebar p,.sidebar li{font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:0.8rem;line-height:1.5}.sidebar img{width:100%}.sidebar__right{margin-bottom:1em}@media (min-width: 30em){.sidebar__right{position:relative;float:right;width:400px;margin-left:2.54237%;z-index:10}}@media (min-width: 80em){.sidebar__right{width:500px}}.author__avatar{display:table-cell;vertical-align:top;width:36px;height:36px}@media (min-width: 30em){.author__avatar{display:block;width:auto;height:auto}}.author__avatar img{max-width:110px;border-radius:50%}@media (min-width: 30em){.author__avatar img{padding:5px;border:1px solid #f2f3f3}}.author__content{display:table-cell;vertical-align:top;padding-left:15px;padding-right:25px;line-height:1}@media (min-width: 30em){.author__content{display:block;width:100%;padding-left:0;padding-right:0}}.author__name{margin:0}@media (min-width: 30em){.author__name{margin-top:10px;margin-bottom:10px}}.sidebar .author__name{font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;font-size:1em}.author__bio{margin:0}@media (min-width: 30em){.author__bio{margin-top:10px;margin-bottom:20px}}.author__urls-wrapper{position:relative;display:table-cell;vertical-align:middle;font-family:-apple-system,&quot;.SFNSText-Regular&quot;,&quot;San Francisco&quot;,&quot;Roboto&quot;,&quot;Segoe UI&quot;,&quot;Helvetica Neue&quot;,&quot;Lucida Grande&quot;,Arial,sans-serif;z-index:10;position:relative;cursor:pointer}.author__urls-wrapper li:last-child a{margin-bottom:0}@media (min-width: 30em){.author__urls-wrapper{display:block}}.author__urls-wrapper button{margin-bottom:0}@media (min-width: 30em){.author__urls-wrapper button{display:none}}.author__urls{display:none;position:absolute;right:0;margin-top:15px;padding:10px;list-style-type:none;border:1px solid #f2f3f3;border-radius:4px;background:#fff;z-index:-1;box-shadow:0 2px 4px 0 rgba(0,0,0,0.16),0 2px 10px 0 rgba(0,0,0,0.12);cursor:default}@media (min-width: 30em){.author__urls{display:block;position:relative;margin:0;padding:0;border:0;background:transparent;box-shadow:none}}.author__urls:before{display:block;content:&quot;&quot;;position:absolute;top:-11px;left:calc(50% - 10px);width:0;border-style:solid;border-width:0 10px 10px;border-color:#f2f3f3 transparent;z-index:0}@media (min-width: 30em){.author__urls:before{display:none}}.author__urls:after{display:block;content:&quot;&quot;;position:absolute;top:-10px;left:calc(50% - 10px);width:0;border-style:solid;border-width:0 10px 10px;border-color:#fff transparent;z-index:1}@media (min-width: 30em){.author__urls:after{display:none}}.author__urls li{white-space:nowrap}.author__urls a{display:block;margin-bottom:5px;padding-right:5px;padding-top:2px;padding-bottom:2px;color:inherit;font-size:1em;text-decoration:none}.author__urls a:hover{text-decoration:underline}@media print{[hidden]{display:none}*{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}html{font-size:16px;margin:0;padding:0}body{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;background:#fff !important;color:#000 !important;font-size:1rem;line-height:1.5;margin:0 auto;text-rendering:optimizeLegibility}h1,h2,h3,h4,h5,h6{color:#000;line-height:1.2;margin-bottom:0.75rem;margin-top:0}h1{font-size:2.5rem}h2{font-size:2rem}h3{font-size:1.75rem}h4{font-size:1.5rem}h5{font-size:1.25rem}h6{font-size:1rem}a,a:visited{color:#000;text-decoration:underline;word-wrap:break-word}table{border-collapse:collapse}thead{display:table-header-group}table,th,td{border-bottom:1px solid #000}td,th{padding:8px 16px}img{border:0;display:block;max-width:100% !important;vertical-align:middle}hr{border:0;border-bottom:2px solid #bbb;height:0;margin:2.25rem 0;padding:0}dt{font-weight:bold}dd{margin:0;margin-bottom:0.75rem}abbr[title],acronym[title]{border:0;text-decoration:none}table,blockquote,pre,code,figure,li,hr,ul,ol,a,tr{page-break-inside:avoid}h2,h3,h4,p,a{orphans:3;widows:3}h1,h2,h3,h4,h5,h6{page-break-after:avoid;page-break-inside:avoid}h1+p,h2+p,h3+p{page-break-before:avoid}img{page-break-after:auto;page-break-before:auto;page-break-inside:avoid}pre{white-space:pre-wrap !important;word-wrap:break-word}a[href^=&#39;http://&#39;]:after,a[href^=&#39;https://&#39;]:after,a[href^=&#39;ftp://&#39;]:after{content:&quot; (&quot; attr(href) &quot;)&quot;;font-size:80%}abbr[title]:after,acronym[title]:after{content:&quot; (&quot; attr(title) &quot;)&quot;}.page-break,.page-break-before{page-break-before:always}.page-break-after{page-break-after:always}.no-print{display:none}a.no-reformat:after{content:&#39;&#39;}abbr[title].no-reformat:after,acronym[title].no-reformat:after{content:&#39;&#39;}.page__hero-caption{color:#000 !important;background:#fff !important;opacity:1}.page__hero-caption a{color:#000 !important}.masthead,.toc,.page__share,.page__related,.pagination,.ads,.page__footer,.author__avatar,.author__content,.author__urls-wrapper,.nav__list,.adsbygoogle{display:none !important}}",
        "url": " "
      } ,
  
      "docs-en-platform-op-maintenance":  {
        "title": "DARwIn-OP",
      "content"	 : "MaintenanceFuse ReplacementThere may be a time when you turn the rocker switch on DARWIN-OP may not power up at all regardless of power source (DC, battery). If that’s the case then this is most likely caused by a blown or defective fuse.The fuse is rated at 12V (volts) and 10A (amps). Replacing the fuse requires requires disassembly of DARWIN-OP’s main body and expose the sub-controller CM-730. Once the sub-controller is exposed locate the fuse. The diagram below shows the fuse location enclosed by the red rectangle.Carefully remove the fuse with a pair of tweezers. Afterwards carefully insert a new fuse.Warning Improper care during removal or insertion of the fuse may result in damage(s) to the fuse housing or/and other components of the sub-controller Cm-730.Hardware MaintenanceYou can find Assembly, Wiring and Fabrication manuals here courtesy of RoMeLa.MaintenanceRobotis recommends that DARWIN-OP users perform preventive maintenance once every 1200 minutes (20 hours) worth of motion.Robots are moving mechanical parts and preventive maintenance is necessary to keep robots in optimum conditions.Perform maintenance in a well-lit and dry place.Neglect may result in unnecessary and costly damage.ProcedureEvery single screw and nut should be tightened.Overtightening is not necessary and may be counterproductive as it may damage the threading of the bolts and wrenches.Disassembling DARWIN-OPRemove the battery.Remove the plastic skin on DARWIN-OP. This includes the head and body.If your DARWIN-OP includes FSR units on its feet then you should also remove the plastic casing from the feet.Divide DARWIN-OP into the following groups/sections  Upper body and neck (ID 1, 2, and 19) frames (2 elbow/shoulder, neck, sub controller, 4 short inter-actuator)Disconnect any connection between sub controller and main controller.Disconnect any cables between the arms and upper body.Remove arms from upper body.  Head (IS 20) frames (head frame, USB camera)  Each arm (ID 3,5 right, ID 4,6 left) frames (hand, elbow/shoulder, and actuator lateral)  Torso (ID 7, 8, 9, 10) frames (main controller, groin, 2 dxl-main controller bumper, power sitch pcb, power sitch, l lower back, 2 hip, 4 long inter-actuator)Disconnect cables from legs to torso. Remove legs from torso.Main controller does not need to be detached from forso.  Each thigh (ID 11 right thigh, ID 12 left thigh) frames (2 actuator lateral, thigh)  Knee and lower leg (ID 13, 15 right, ID 14, 16 left) frames (leg, actuator lateral  Foot (ID 17 right, ID 18 left) frame (2 long inter actuator, foot, ankleWiringEnsure that all connections are properly secured.Ensure that the long cables are laid flat free of twists.Replace cables whenever the protective coat has a cut leaving the wire(s) exposed to air.CleaningPlease ensure that the actuators, main controller and sub controller are free of dust. Although dust may not harm the internal components of both main controller and sub controller under dry condition, humidity may cause static potentially doing costly permanent damage to the controllers.The recommended tools to remove dust, dirt and debris compressed air blower, or a non-metallic soft brushDynamixel ReplacementThere may be an instance where you will need to replace a Dynamixel actuator due to failure. The following page will guide you on how to replace a Dynamixel actuator.To replace an MX-28 on DARWIN-OP you need to complete the following procedures.  Proper installation of horn, bearing set to the new MX-28.  Proper ID and baud rate setting.Please refer to the Assembly Guide for reference during replacement procedure.Proper Installation of Horn and Bearing SetEvery MX-28 on DARWIN-OP comes comes installed with the horn (front side of actuator). Some of the MX-28’s come with the bearing set (rear side of actuator) installed as well. You will need a wrench for 2.5mm thick bolt (provided).Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.For more information on the bearing set please click here. Note that the bearing set is for the RX-28, which will fit perfectly on the MX-28 as they both share the exact physical dimensions.Proper ID and baud rate settingMethod AYou have USB2Dynamixel and a Robotis dedicated robot controller (CM-5, CM-510, or CM-700)  Provide power to new MX-28. That is connect one TTL port from the MX-28 to the controller; then power on the controller.  Connect the other TTL port of the MX-28 to the USB2Dynamixel dongle (Make sure to set the switch to “TTL” on the dongle).  Connect the dongle to an open USB port in your PC. Run Dynamixel Wizard.  Change the ID number from 1 to the proper number.  Change the baud rate from 34 (576000 bps) to 1 (1 Mbps).  After replacement is done. Run DXL Monitor and reset all Dynamixels.Click Dynamixel Wizard for more information.Method BYou have USB2Dynamixel but do not have a Robotis dedicated robot controller (CM-5, CM-510, or CM-700).Steps 2 through 5 from Method A remains unchanged. Step 1 needs to be modified for proper power supply.You will need 2 separate 3-pin TTL cables (they come supplied with every DARWIN-OP). The following procedure is recommended:      Open the Interface panel of DARWIN-OP (back cover). Carefully remove the plastic back panel to prevent any damages to the interface board cables.        Disconnect both Interface Board cables.    Temporarily disconnect ALL currently connected cables. You can choose any TTL port. Do not disconnect the power cable from sub-controller to main controller. Doing so will not allow Dynamixel Wizard proper Dynamixel search.      Connect a spare TTL cable to any open port and the other end to the new MX-28.        Connect a second TTL cable to the other port of the MX-28. Connect the other end of the cable to the USB2Dynamixel controller. Afterwards connect USB2Dynamixel to the PC.        Turn the switch on on DARWIN-OP and let Ubuntu load (this process may take up to 2 minutes).  Note The head LED will remain green and will not turn amber. The demo program will not run automatically.        Connect to DARWIN-OP and run Dynamixel Monitor.  Once Dynamixel Monitor is running all actuators will show as “fail” even with the new MX-28 connected. Do not exit Dynamixel Monitor. Leave the program running.    On Windows run Dynamixel Wizard.  Change address 4 (baud rate) from the default value of 34 to 1. You must perform this operation with Dynamixel Wizard as Dynamixel Monitor does not support this function currently. If you do not change the baud rate then Dynamixel Monitor will fail to scan the actuator.  Change address 3 (ID) from the default value of 1 to the desired value. You may also use Dynamixel Monitor to change ID as well.Note RoboPlus Manager does not currently support the CM-730 controller because it lacks the Serial Connector input.Once the baud rate value is set to 1 you may return to Dynamixel Monitor and type scan to verify success on baud rate change (the first attempt may show the new actuator as “fail” if so type scan again until “OK” shows on screen).Once all changes are made you still need to exit Dynamixel Monitor and Shut down DARWIN-OP properly.Once shut down and powered off replace the Dynamixel actuator and restore all connections.Once connections are restored return to DXL Monitor and reset all Dynamixels.If you are replacing 2 or more Dynamixel then you must perform this procedure again as Dynamixel Wizard will show errors when multiple Dynamixels with the same ID and same baud rate are connected.Once the actuator has been replaced it is highly recommended that you update the firmware with Firmware Installer so that ALL Dynamixels are matched with the same firmware.Method CYou do not have USB2Dynamixel controller nor a Robotis dedicated robot controller (CM-5, CM-510, or CM-700).Ensure you perform proper horn installation and proper bearing set installation (if applicable).Example 1Replace the the right elbow (ID 5) with a new actuator without disconnecting the remaining actuators.If so let’s assume we need to replace the right elbow (ID 5) and already replaced the actuator before performing the software changes:  Run DXL Monitor You will see the following appear on screen  Despite installing the new actuator replacement for ID 5 the software still displays as “fail.” Now its time to make the proper changes.  Go to ID 1 by typing id 1 and temporarily assign a different ID number. You may assign numbers between 21 and 199 but refrain from numbers between 1 and 20.let’s say change to 39 so type wr 3 39.  Notice that the command prompt changed from ID:1 R_SHOULDER_PITCH to ID:39 UNKNOWN.  Return to the CM-730 command prompt by typing id 200.  Type scan and notice the “extra” ID on ID 39. You’ll also notice that ID 1 and 5 failed.  Type the command wr 4 34 while remaining in ID 200. This means that the communications baud rate between the CM-730 and MX-28 switched from 1Mbps to 576000 bps.  Type scan and the following will appear onscreen  Notice that all actuators fail except ID 1 (remember that the default values on a new Dynamixel is ID 1 and baud rate 34). Notice that ID 39 does not appear anymore. No need to worry this is because ID 39 does not currently have a specific function in DARWIN-OP and the baud rate of said ID is 1 Mbps; whereas the current baud rate between the CM-730 and and MX-28 is 57600 bps.  go to ID 1 by typing id 1  The command prompt will change from ID 200 to ID 1  change the baud rate from 34 to 1 by typing wr 4 1  Once baud rate of the new actuator matches with the rest of the actuators return to to ID 200 by typing id 200  Change the baud rate between CM-730 and MX-28 back to 1 Mbps by typing wr 4 1  Return to ID 1 by typing id 1; change the ID from 1 to desired ID. In this case to ID 5 by typing wr 3 5  Return to ID 200 and type scan. Notice that ID 5 has been set, but ID 1 still failed and there’s ID 39. Go to ID 39 by typing id 39  Remember that ID 39 is a temporary ID change for ID 1. Now its time to revert the change back.  Go to ID 39 by typing id 39. Restore ID 1 again by typing wr 3 1. Return to ID 200 and run scan.  Run reset all and all DARWIN-OP will be back to normal again.Repeat the same procedure again if replacing more than 1 actuator.Example 2Replace the the right elbow (ID 5) with a new actuator with less software manipulation.Just like Method B disconnect all Dynamixels from the CM-730 but do not disconnect the power from CM-730 to Main Controller. However in this case instead of the need for 2 3-pin TTL cables you’ll only need 1.  Connect the new actuator to any TTL port.  Turn DARWIN-OP on and run DXL Monitor. Do not worry about setting DARWIN-OP in the kneeling position during this procedure as the demo program will fail to run automatically due to the disconnected Dynamixels. Please set DARWIN-OP in a stable position (either sitting or laying down on its belly).  Run scan and you will notice that all ID’s will fail  Change the baud rate on ID 200 from 1 Mbps to 57,600 bps by typing wr 4 34  Run scan again and you’ll notice the OK on ID 1 (remember that all new Dynamixels have default values 1 for ID and 34 for baud rate).  Go to ID 1. Change the baud rate of ID 1 from 57,600 bps to 1 Mbps by typing wr 4 1  Return to ID 200 and change the baud rate back to 1 Mbps  Return to ID 1 and make the ID change. In this case change to ID 5 by typing wr 3 5  Return to ID 200.  The ID change is done. Shut down DARWIN-OP properly, power off. Perform replacement, restore all connections and turn DARWIN-OP on again. Remember to set DARWIN-OP in the kneeling position as all actuators are connected and the demo program will run automatically.  Perform the killall procedure to end the demo program. Run DXL Monitor and reset all Dynamixels.For multiple Dynamixels, you may only repeat steps 3 through 9. You can disconnect the actuator after step 9, connect the new Dynamixel and run from step 3 again.Once done replacing Dynamixel(s) and settings set appropriately run Firmware Installer. Select option 2 and you are done. This is an important final step because it sets the angle limits on the joints.DARWIN-OP is back to normal again.Example 1 requires less hardware work but more programming work, as well as keeping careful track of changes made during programming and repeating the entire process for multiple Dynamixels.Example 2 requires more hardware work (unscrewing/screwing disconnecting/connecting), but less on software work.Pick the method that most convenient for you.Note The reset all procedure at the end is necessary because DXL Monitor will set the angle limits on all Dynamixels. Setting angle limits is a robot safety mechanism to prevent joints from overextending, therefore preventing damage to the robot.Pressing the reset button on DARWIN-OP will reset settings of the sub-controller CM-730 to default values. For example:  If the CM-730 has the baud rate changed from 1 Mpbs to 576000 bps, pressing the reset button will change the baud rate back to 1Mpbs (default).  If the eye LED has been changed from blue to orange, pressing the reset button will change the color back to blue (default).Controller ConnectionSometimes you may find DARWIN-OP irresponsive despite the main controller (fitPC) and sub-controller (CM-730) operating normally. In such case it may be a rare connection loss between the main controller and sun-controller.The main controller and sun-controller are connected by a physically modified USB connection. Although USB is quite reliable, just like any other USB device you may lose connection.You can verify the connection by the following:  Hardware component          Verify proper physical connection between main controller and sub-controller        Software component          Running any program from the source code should output a message about CM-730 not detected.      go the the ‘/dev’ directory, type ls and look for ttyUSB0. If its not there then there’s a connection loss. In such case simply restart DARWIN-OP.      If problem persists contact ROBOTIS for an RMA Procedure.Camera ConnectionThere may be an instance when DARWIN-OP’s main controller may lose connection with the camera. Please ensure that the USB camera cable is properly connected to the the camera and main controller.To verify camera connection with Linux OS perform the following.  On a terminal window go to the ‘/dev’ directory.  Type ls and you’ll see a list of devices and look for ‘video0’ This is the camera as an USB device.If you do not see a ‘video0’ device then you may need to replace the camera cable and/or camera. in such case you may replace the USB cable, the camera, or contact ROBOTIS for an arrangement.Note If you lose physical(mechanical) connection between the main controller and sub-controller, then you automatically lose camera connection. This is because the USB cable for the CM-730 and camera share the same molex connection.Self Maintenance ChecklistYou may run your own maintenance check should DARWIN-OP have some anomalies.Power does not turn onCheck and proceed  Does DARWIN-OP eyes turn blue when turning power on?          yes                  Check for fan noise                    no, but Cm-730 powers on                  Check the LED cable from CM-730 to eye. If the cable is defective then post your problem here.                      Can you hear fan noise from the back of DARWIN-OP?          yes                  Check for LED’s                    no, but CM-730 powers on                  Check the cable from CM-730 to Interface board (back). if the cable is defective contact us for an arrangement.                    no, and CM-730 is not getting power                  If that’s the problem then post the problem here.                    Note If the CM-730 does not get any power then the FitPC will not get any power.  Does the head LED turn on?          yes                  Check for “Ubuntu does not start” symptom.                    no, but CM-730 and FitPC turn on fine                  If the cable is defective then post your problem here.                    no, but CM-730 turns on fine                  Check the physical connection between CM-730 and FitPC; followed by connecting a HDMI?DVI display, mouse, and keyboard and operate DARWIN-OP’s PC. Check for “Ubuntu does not start” symptom.                    Ubuntu does not start  Connect a HDMI/DVI display, mouse, and keyboard and operate PC.          Operate PC from DARWIN-OP        Does the FitPC’s main screen with the Intel Atom logo appear?          yes, the PC is still good.                  You may use Linux’s advanced settings to restore the OSor, use the provided USB thumbdrive and restore OS.                    no                  post your problem here.                    Demo program does not work when turning DARWIN-OP on  Properly shut down DARWIN-OP and restart again. If this happens again more then twice then check the following          There are a few ways to Shut down DARWIN-OP.        Do you have the most updated firmware version of the CM-730 and MX-28 installed?  Run Dynamixel Monitor….. are all Dynamixel OK?          no                  Install the latest firmware                    yes                  There’s a chance that the baud rate of any of the MX-28’s is/are not properly set to 1 Mbps.   Use Dynamixel Monitor to check if address 4 (baud rate) is set at value 1. If any MX-28 is not set at 1 Mbps then set it to 1 Mbps.                    yes, the MX-28 had the latest version of firmware, baud rate was 1 Mbps and ID was properly set. But, after some time Dynamixel Monitor shows as fail.                  In this case post your issue here.                      Check Connections  Make sure that the main controller and the sub-controller are physically connected  Make sure to check          the camera      camera cable      cable connection to camera      cable connection to main crontroller      make sure they are physically connected      run this procedure.      Specific joint(s) doesn’t/don’t work  Are cables around the joint worn out?          yes                  Replace cable(s). Keep in mind due to the nature of the daisy chain (serial) network of Dynamixel some MX-28 may appear as malfunctioning (not working at all).   The MX-28 connected directly to the CM-730 are “most significant” If any “most significant” MX-28 or connecting TTL cable to said MX-28 go defective then all connected “lesser significant” MX-28(s) will appear malfunctioning as well.   The following is the connection order from “most significant” to “least significant” ID1 -&amp;gt; ID3 -&amp;gt; ID5 ID2 -&amp;gt; ID4 -&amp;gt; ID6 ID19 -&amp;gt; ID20 ID7 -&amp;gt; ID9 -&amp;gt; ID11 -&amp;gt; ID13 -&amp;gt; ID15 -&amp;gt; ID17 ID8 -&amp;gt; ID10 -&amp;gt; ID12 -&amp;gt; ID14 -&amp;gt; ID16 -&amp;gt; ID18   For example. if ID 13 does bad then ID15 and ID17 will appear to go bad. However, ID11, ID9, and ID7 remain unaffected.                    no                  Use DXL Monitor to check status of the MX-28(s). As a precautionary measure it is strongly advised th check the “lesser significant” MX-28 first and work your way up to the defective MX-28. If you ran all checks and the MX-28 still malfunctions then post your problem here.                    Unusual motions/DARWIN-OP “behaves” strangely.  Check the robot limbs. Are there any defective frames?          Look for any bad frames around the defective area. There’s a chance that bolt(s) and nut(s) may have come loose. Tighten them and check the status of the MX-28 and check for proper position sensor (horn) alignment. For any defective frames post your problem here.      Slow or choppy motions  Battery conditions (if DARWIN-OP is running only under battery)          DARWIN-OP has been programmed to beep if battery power is low. However, in noisy environments you may not be able to hear such beeps. Keep an eye for any slow, strange, or choppy motions.        Linux OS conditions  The OS from the fitPC has been optimized so that DARWIN-OP can perform smoothly.  There’s a chance that there are too many programs running in the background.  Likely causes:          turning on automatic updates while DARWIN-OP is operating      actively running remote desktop during operations      setting a very-high display resolution (i.e. 1080p)      any program/process that takes too many fitPC resources      any combination from a to d.  Please bear in mind that this is a limitation of Intel Atom’s system design and not from Linux OS, nor the fitPC, nor ROBOTIS.        Interfacing conditions          We strongly recommend interfacing with DARWIN-OP via SSH terminal rather than remote desktop. However, if remote desktop is a must then close any background programs from Ubuntu and use conventional screen resolutions (i.e. 1024x768).      DARWIN-OP cannot “see/find” the ball1 Check Color and White Balance Settings  Color and white balance settings are always an issue with image processing; this includes DARWIN-OP. You must always check lighting conditions in your working environment. With this issue in mind we have provided a color and white balance calibration testing program.Head and eye LED do not turn on nor the LED’s from the back of DARWIN-OP  Please refer to the Layout of the LED’s. Please see “Power does not turn on” symptom.Can’t get any sound from DARWIN-OP  Check in the following order; if any of these solutions solves the audio issue you may not need to run the remaining tests.          There may be an instance when audio may have been disabled.If that’s the case you can re-enable audio by a simple Ubuntu restart or you may need to enable audio again via control center. If this does not solve the issue move on to the next resolution.      if audio capabilities have “disappeared” from Ubuntu then you may need to re-enable it by installing Ubuntu’s audio drivers. If this does not solve the issue move on to the next resolution.      If Ubuntu’s audio capabilities are fine then you need to check the volume level on Ubuntu. make sure that the volume level is at least 75%. If audio capabilities on Ubuntu and volume levels are fine then move on to the next resolution.      Check the audio speaker (located in chest) and CM-730, check the audio cable between FitPC and CM-730. In this case you may need to replace the speaker. If a replacement is necessary please post your issue here.      RecoveryRecovery(Ubuntu 9.10)Install Ubuntu 9.10Note Reference: http://www.fit-pc2.com/wiki/index.php?title=Installing_Ubuntu_9.10  Prepare Installation Media          You can use USB CD-ROM Drive or USB Flash drive (disk-on-key) as installation media      Download Ubuntu 9.10 Desktop installation      If you are using USB CD-ROM - burn downloaded image directly on CD.      If you are using USB Flash drive, 1GB would be enough. Download usb-creator to create bootable installation flash drive.        Installation of generic Ubuntu 9.10 Desktop          Standard Ubuntu installation - choose timezone, partitions, username, password etc.      Unplug USB CD-ROM / USB Flash drive and reboot      Login using previously selected username and password      Reference : https://help.ubuntu.com/9.10/installation-guide/i386/index.html      Note Please note that the command used in Linux operating system is case sensitive.  Required system changes          Remember to enter sodu su at the command line to gain writing privelges otherwise file editing will not happen.      Add the following lines to /etc/apt/sources.list      In this case enter gedit /etc/apt/sources.list (if using gedit).         ## Repository for fit-PC2 users provided by Compulab deb http://fit-pc2.com/download/ubuntu/dists/karmic binary/ deb-src http://fit-pc2.com/download/ubuntu/dists/karmic source/        Connect DARWIN-OP to the internet via ethernet.      Refresh update manager    $ sudo apt-get update            Install kernel image, kernel headers, graphic drivers and media player for HD playback:    $ wget http://www.robotis.com/download/linux/darwin/linux-headers-2.6.31-34-fitpc2i-r1.deb$ wget http://www.robotis.com/download/linux/darwin/linux-image-2.6.31-34-fitpc2i-r1.deb$ sudo dpkg -i *.deb$ sudo apt-get install xserver-xorg-video-poulsbo mplayer-vaapi mplayer-skins        Don’t restart here. Select “Restart Later”.      (Optional) If you want to get the kernel source:    $ wget http://www.robotis.com/download/linux/darwin/linux-source-2.6.31-34-fitpc2i-r1.deb        (Optional) You may install w32codecs, libdvdcss2 and other usefull packages from Medibuntu repository.      Comment out snd-hda-intel options in /etc/modprobe.d/alsa-base.conf    # Power down HDA controllers after 10 idle seconds# options snd-hda-intel power_save=10 power_save_controller=N            Remove generic image and sources that are not fully compatible with fit-PC2i.    $ sudo apt-get purge linux-generic linux-image-generic linux-headers-generic linux-image-$(uname -r) linux-headers-$(uname -r) &amp;amp;&amp;amp; sudo apt-get autoremove        Restart fit-PC2i  Ubuntu 9.10 is now installed.Additional Software InstallationAfter installing ubuntu 9.10 you must install the following softwares  For Development                  Install g++ compiler        $ sudo apt-get install g++                            Install Functions manuals        $ sudo apt-get install manpages-dev                            Install Libraries        $ sudo apt-get install libjpeg62-dev libncurses5-dev                      For Connections                  Install SSH server        $ sudo apt-get install openssh-server                    Install Samba server                  On Ununtu’s desktop go to Applications &amp;gt; Ubuntu Software Center and search for “samba”Download Samba and install it. Configure samba server.                    Configure VNC server, Install FreeNX(https://help.ubuntu.com/community/FreeNX), etc..      Miscellaneous Utilities      Subversion : Source code version control system client program    $ sudo apt-get install subversion            madplay : Decode and play MPEG audio FILE(s). (This program must be installed for demo program)    $ sudo apt-get install madplay            guvcview : a simple GTK+ interface for capturing and viewing video from devices supported by the Linux UVC driver.    $ sudo apt-get install guvcview      CM-730 Firmware InstallationRefer to Firmware Installer section.MX-28 settingsRefer to Dynamixel Monitor section.Use reset all command.Recovery(Linux Mint 9)Install Linux Mint 9Note Reference: http://www.fit-pc.com/wiki/index.php/Installing_Linux_Mint_9  Prepare Installation Media          You can use USB CD-ROM Drive or USB Flash drive (disk-on-key) as installation media      Download Linux Mint 9 “Isadora” - Gnome CD (32-bit)      If you are using USB CD-ROM - burn downloaded image directly on CD.      If you are using USB Flash drive, 1GB would be enough, use “Startup Disk Creator” utility to create LiveUSB.        Installation of generic Linux Mint 9          Standard Linux Mint installation: choose timezone, partitions, username, password etc.      Unplug USB CD-ROM / USB Flash drive and reboot      Login using previously selected username and password      Note Please note that the command used in Linux operating system is case sensitive.  Required system changes          Remember to enter sodu su at the command line to gain writing privelges otherwise file editing will not happen.      Add the following lines to /etc/apt/sources.list      In this case enter gedit /etc/apt/sources.list (if using gedit).         ## Repository for fit-PC2 users provided by Compulab deb http://fit-pc2.com/download/ubuntu/dists/lucid binary/ deb-src http://fit-pc2.com/download/ubuntu/dists/lucid source/        Connect DARWIN-OP to the internet via ethernet.      Refresh update manager    $ sudo apt-get update            Install kernel image, kernel headers, graphic drivers and media player for HD playback:    $ wgethttp://www.robotis.com/download/linux/darwin/linux-headers-2.6.35.4-robotis_r1_i386.deb$ wget http://www.robotis.com/download/linux/darwin/linux-image-2.6.35.4-robotis_r1_i386.deb$ wget http://www.robotis.com/download/linux/darwin/xserver-xorg-video-poulsbo_1.5-1742_i386.deb$ sudo dpkg -i *.deb$ sudo update-initramfs -c -k 2.6.35.4-robotis$ sudo update-grub2$ sudo apt-get install mplayer-vaapi mplayer-skins        Don’t restart here. Select “Restart Later”.      (Optional) If you want to get the kernel source:    $ wget http://www.robotis.com/download/linux/darwin/linux-source-2.6.35.4-robotis_r1_all.deb            Remove generic image and sources that are not fully compatible with fit-PC2i.    $ sudo apt-get purge linux-generic linux-image-generic linux-headers-generic linux-image-$(uname -r) linux-headers-$(uname -r) &amp;amp;&amp;amp; sudo apt-get autoremove        Restart fit-PC2i  Linux Mint 9 is now installed.Additional Software InstallationAfter installing Linux Mint 9 you must install the following software  For Development                  Install g++ compiler        $ sudo apt-get install g++                            Install Functions manuals        $ sudo apt-get install manpages-dev                            Install Libraries        $ sudo apt-get install libjpeg62-dev libncurses5-dev                      For Connections                  Install SSH server        $ sudo apt-get install openssh-server                    Install Samba server                  On Ununtu’s desktop go to Applications &amp;gt; Ubuntu Software Center and search for “samba”Download Samba and install it. Configure samba server.                    Configure VNC server, Install FreeNX(https://help.ubuntu.com/community/FreeNX), etc..      Miscellaneous Utilities      Subversion : Source code version control system client program    $ sudo apt-get install subversion            madplay : Decode and play MPEG audio FILE(s). (This program must be installed for demo program)    $ sudo apt-get install madplay            guvcview : a simple GTK+ interface for capturing and viewing video from devices supported by the Linux UVC driver.    $ sudo apt-get install guvcview      CM-730 Firmware InstallationRefer to Firmware Installer section.MX-28 settingsRefer to Dynamixel Monitor section.Use reset all command.Clonezilla RecoveryYou can recover the operating system in DARWIN-OP via Clonezilla. The recovery software is the same as the factory-default preinstalled with DARWIN-OP.Note Download the recovery image from here  Choose recovery image          Check DARWIN-OP SSD capacity before downloading the corresponding image        How to check DARWIN-OP’s SSD capacity          Turn on DARWIN-OP and press the ‘F2’ key to enter the BIOS menu.              From the menu enter Primary Master(4GB NANDrive(PM))                    Check the capacity as shown below. Then download a matching image.                  SSD Capacity 3.6GB      SSD Capacity 4GB                              NEW: Create Recovery USB  Create a Clonezilla Live USB via Tuxboot (http://tuxboot.org/download/files-on-sf.php)  Oldfiles folder -&amp;gt; 2.0.1-5 folder select and download clonezilla-live-2.0.1-5-i486.iso  Select pre-downloaded and look for the file clonezilla-live-2.0.1-5-i486.iso;then click OKOnce complete click on Exit  Place the image under /home/partimag of your thumbdrive. That is copy into the directory DARwIn_Recovery_2012-03-19OLD: USB Flash Memory PreparationGo to http://clonezilla.org/liveusb.php for instructions on Clonezilla live USB flash.The provided image file is located in the directory/DARwIn_Recovery_date of recovery creation (yyy-mm-dd) from the USB thumbdriveBoot SequenceConnect the USB thumbdrive into a USB port power on DARWIN-OP and press the F2 key to access Phoenix(tm) Setup Utility (DARWIN-OP’s PC system BIOS).Select the “Boot” tab and in “Boot order” select USB CDROM as top priority.After boot selection go to the “Exit” tab and select Exit Saving Changes, pick yes.Operating System Recovery with Clonezilla  The first option from Clonezilla: Select default menu  Clonezilla live (Default settings, VGA 800x600)  Choose language: English (default)  en_US.UTF-8 English  Configuring console-data: keymap. Select the default option from the menu  Don’t touch keymap  Start Clonezilla: Select the default option from the menu  Start_Clonezilla Start Clonezilla  Clonezilla: Select the following  device-image work with disks or partitions using images  Mount Clonezilla image directory: this is the partition where Clonezilla will perform recovery  local_dev Use local device (Ex: hard drive, USB drive)  Press the “ENTER” key after selection.  Clonezilla - Opensource Clone System (OCS) | Mode: Select the following  sdb1 3925MB_vfat(In_USB_DISK_)_usb-SMI_USB_DISK_AA00000000001154-0:1  Ensure you see the term “sdb1” and “vfat” along with the size if your USB thumbdrive.  Clonezilla - Opensource Clone System (OCS) : “/” Select default menu  / Top_directory_in_the_local_device   Press “Enter” to continue……  Clonezilla - Opensource Clone System (OCS) : Select default menu  Beginner Beginner mode: Accept the default options  Clonezilla: Select mode: Select the following  restoredisk Restore_an_image_to_local_disk                              Clonezilla - Opensource Clone System (OCS)          Mode: restoredisk                      Clonezilla - Opensource Clone System (OCS) | Mode: restoredisk : Select the destination partition  sda 4096MB_4GB_NANDrive__ata-4GB_NANDrive_0000000000R1Y19998XU  &amp;lt; Press “Enter” to continue…… &amp;gt; Press the “ENTER” key  &amp;lt; Are you sure you want to continue? ? &amp;gt; press the Y key  &amp;lt; Let me ask you again, Are you sure you want to continue? ? &amp;gt; confirm by pressing the Y key.  Partclone: after completeing restoration  &amp;lt; Press “Enter” to continue…… &amp;gt; press the “ENTER” key.  You can either power off or reboot&amp;gt; Make sure you remove the USB thumbdrive. after making your selection.VideoNEW: USB Flash Memory Preparation  Select either of the following          From Mount Clonezilla image directory select                  skip and pick Use existing /home/partimag (writable device. E.g. hard disk/USB drive)                    From Clonezilla: Select mode                  select restoredisk pick Restore_an_image_to_local_disk                      Then press EnterUSB Flash Memory PreparationGo to http://clonezilla.org/liveusb.php for instructions on Clonezilla live USB flash.The provided recovery image file is located in the directory:/home/partimag/DARwIn_Recovery_[date of recovery creation(yyyy-mm-dd)]From the USB thumbdrive.Boot SequenceConnect the USB thumbdrive into a USB port.Power on DARWIN-OP and press the F2 key to access Phoenix(tm) Setup Utility (DARWIN-OP’s PC system BIOS). Select the “Boot” tab and in “Boot order”. Select USB HDD as top priority.After boot selection go to the “Exit” tab and select “Exit Saving Changes”, pick Yes.Operating System Recovery with Clonezilla  The first option from Clonezilla: Select the default option from the menu          Clonezilla live (Default settings, VGA 800x600)        Choose language: English (default)          en_US.UTF-8 English        Configuring console-data: Select the default option from the menu          Don’t touch keymap        Start Clonezilla: Select the default option from the menu          Start_Clonezilla  Start Clonezilla        Clonezilla: Select the default option from the menu          device-image  work with disks or partitions using images        Mount Clonezilla image directory: Select the following          skip Use existing /home/partimag (Writable device. E.g. hard disk/USB drive)      &amp;lt; Press “Enter” to continue……&amp;gt; : Press “Enter” key        Clonezilla – Opensource Clone System (OCS) : Select the default option from the menu          Beginner Beginner mode: Accept the default options        Clonezilla: Select mode: Select the following          restoredisk  Restore_an_image_to_local_disk        Clonezilla – Opensource Clone System (OCS) | Mode: restoredisk : Choose the image file to restore          Ex) DARwIn_Recovery_2012-03-19  2012-0316-1405_sda        Clonezilla – Opensource Clone System (OCS) | Mode: restoredisk : Choose the target disk          Sda 4096MB_4GB_NANDrive__ata-4GB_NANDrive_0000000000R1Q199982a      &amp;lt; Press “Enter” to continue …… &amp;gt; : Press “Enter” key      &amp;lt; Are you sure you want to continue? ? (y/n) &amp;gt; : Press ‘Y’ key and Press “Enter” key      &amp;lt; Let me ask you again. Are you sure you want to continue? ? (y/n) &amp;gt; : Press ‘Y’ key and Press “Enter” key        Starting to restore image to device. Wait until done.  After completing restoration          &amp;lt; Press “Enter” to continue…&amp;gt; : Press “Enter” key.        Now you can choose to: Choose 0 or 1          (0) Poweroff      (1) Reboot        Make sure you remove the USB thumbdrive, and reboot the DARWIN-OP.",
        "url": " http://localhost:4000/docs/en/platform/op/maintenance/"
      } ,
  
      "docs-en-software-rplus1-manager":  {
        "title": "R+ Manager 1.0",
      "content"	 : "IntroductionRoboPlus Manager is used to handle devices used by a robot.Major functions of this program are as follows.Manage controller firmware. (Update and Restore)Inspect the status of the controller and peripheral devices. (Test)Set the required modes. (Settings)InstallDownload RoboPlusRoboPlus is a software to create a customized programme for every ROBOTIS product.RoboPlus System Requirements  OS : Windows XP Service Pack 2 or above / Vista/ 7 (32/64bit)/8 (32/64bit)  32bit(x86) or 64bit (x64) processor with over 800MHz  Graphic card with 3D acceleration  System memory over 512MB  Hard disk with the extra space of 500MBNote To execute RoboPlus, .NET FrameWork 3.5 or higher version is required. When installing RoboPlus, if the automatic installation of .NET FrameWork fails, .NET FrameWork must be installed separately.RoboPlus Install FailureMost reason for installation failure is caused by .NET Framework install error. Please manually intsall Windows Installer 3.1 and .NET Framework 3.5Windows installer and .NET Framework can be downloaded from Microsoft Download Center.Download Windows installer 3.1, .NET Framework 3.5Getting StartedConnect Controller  Connect controller to the PC. (Please refer to each controller information for connecting the controller to the PC.)      Select the communication port to use. Use the “Automatic Search” function to easily select the appropriate port.        If the chosen communication port is being used by another program, you must first find and stop the program.        If RoboPlus Manager is unable to find a controller, the following error message will be shown.              Check if the controller is connected to the PC. (See controller information for information on how to connect the controller.)      Check if the controller is turned on.      Check if the correct communication port was chosen.        Start management. (Please refer to the managing information of each controller.)Firmware ManagementFirmware UpdateFirmware is the program installed in the controller, and is used to execute .tsk programs or to manage the controller.RoboPlus Manager automatically connects to the internet and searches for firmware updates.Updating Controller Firmware      When the controller is connected, the controller’s firmware version will be retrieved. If a newer firmware is available, it will ask whether to download the latest firmware.            When the ‘OK’ button is pressed, it will begin updating the firmware.            You can check your controller’s model number and firmware version.            Press the “Next” button to begin updating your firmware. Be careful not to turn the power off or disconnect the cable while the firmware is being updated.            Once the firmware has been updated, Press the “Finish” button to return to the controller maintenance page.      Firmware RecoveryWhen there is a problem with the controller’s firmware, RoboPlus Manager can be used to recover the firmware.For CM-150 and CM-200, you will need the latest RoboPlus Manager (ver. 1.0.31.0 or higher) to execute the recovery.Recover Controller Firmware      Connect the controller to the PC using LN-101.            Run RoboPlus Manager and open the controller firmware management wizard. On the menu bar, click the firmware management button to run the firmware wizard. (CM-150 and CM-200 require some pre-steps prior to proceeding. Please refer to the message below.)                Select the port number for connecting the controller. Because the firmware is broken, the controller cannot be automatically found. So, you must manually select the port number the controller is connected to. The controller cannot be found if the port is being used, so please close other programs before proceeding. Select the port number then click search.            Turn OFF then turn ON the controller (this process can be skipped for CM-150 and CM-200). Turn OFF and turn ON the controller to proceed with the recovery        Check the controller information. When the controller is found, the information for the firmware to be downloaded will be displayed. Please check whether the model name is the same as the name of the connected controller (the version on the controller information is the version of the boot loader, not the firmware)            Firmware Recovery            Check the results of the firmware recovery      VideoHow to UseControllersCM-5When the CM-5 controller is connected to RoboPlus Manager, the following screen is displayed.The controller and its peripheral devices are listed in the left window.  In the right window is the “controller management” window.If the controller’s firmware version is older than that of RoboPlus Manager, it can be updated. (Please refer to the Firmware Update section)CM-510When the CM-510 controller is connected to RoboPlus Manager, the following screen is displayed.The controller and its peripheral devices are listed in the left window.  In the right window is the “controller management” window.If the controller’s firmware version is older than that of RoboPlus Manager, it can be updated. (Please refer to the Firmware Update section)CM-530When the CM-530 controller is connected to RoboPlus Manager, the following screen is displayed.The controller and its peripheral devices are listed in the left window.  In the right window is the “controller management” window.If the controller’s firmware version is older than that of RoboPlus Manager, it can be updated. (Please refer to the Firmware Update section)CM-700When the CM-700 controller is connected to RoboPlus Manager, the following screen is displayed.The controller and its peripheral devices are listed in the left window.  In the right window is the “controller management” window.  (Please refer to the “Test” page).If the controller’s firmware version is older than that of RoboPlus Manager, it can be updated.  (Please refer to the Firmware Update section)General/Detail SearchRoboPlus Manager has two search modes.General Search  Search for Dynamixels connected at 1Mbps.  Search speed is fast because it searches for only Dynamixels connected at 1Mbps.  Dynamixels connected at other speeds are not found.Detail Search  Search for Dynamixels connected at every possible communication speed.  Search speed is slower because it searches for Dynamixels connected at different communication speeds.  The Dynamixel that are not connected at 1Mbps are automatically adjusted to 1Mbps.Note If a Dynamixel is no longer detected after a detailed search, there might be an ID duplication.  In this case, connect only the undetected device, and change its ID to an unused one. (Refer to the ID Setup section.)Aux LEDThis parameter is used to turn the controller’s Aux LED on or off.CharacteristicThe controller’s Aux LED can be manipulated using the On/Off button.Corresponding RoboPlus Task Command  Parameter : Aux LED  Constants : True/FalseButtonThis parameter is used to read the controller’s button status (whether it is pressed).CharacteristicWhen a button on the controller is pressed, you can see which button has been pressed.Corresponding RoboPlus Task Command  Parameter : Button  Constant: ButtonTimerThis parameter is used to set or read the controller’s timer.Characteristics  The timer can be set and the actual time can be checked.  Timer value is between 0 and 255.  When the timer is set, it will start to count every 0.128 seconds, and you will be able to see how much time is left.Corresponding RoboPlus Task Command  Parameter : Timer  Constants : Timer ValuesHigh Resolution TimerInternally the controller sets a counter; this is the parameter for the high resolution timer.This timer is set for every 1ms, useful for more accurate timing.Characteristics  The timer can be set and the actual time can be checked.  Timer value is between 0 and 65535. Timers shows 1 unit for every 1ms  When the timer is set, it will start to count every 0.001 seconds, and you will be able to see how much time is left.Corresponding RoboPlus Task Command  Parameter : HR Timer  Constants : Timer ValuesRemocon IDThe parameter is used to set or read the ID of the ZigBee communication module that communicates with the robot’s Zigbee module.Characteristics  This parameter is meaningful only when ZigBee module is connected.  The ID is a number between 0 and 65535.  When the opponent’s ID is set to 65535, data is sent to all ZigBee modules, regardless of ID.  For 1:1 communication, the ID’s of both ZigBee modules must be correct.Corresponding RoboPlus Task Command  Parameter : Remocon ID  Constant : NumberMy IDThis parameter is used to read the ID of the ZigBee module installed in my robot.Characteristics  If a ZigBee module is not installed, 0 will be returned.  If a ZigBee module is installed, its ID is read (a number between 0 and 65534).Corresponding RoboPlus Task Command  Parameter : My IDSound CountSounds can be detected using the microphone in the controller.Characteristics  When a sound louder than a certain threshold, such as a clap, is made near the controller, it will be detected by the controller’s microphone.  The maximum number of sounds counted is 255.  When sounds are no longer detected, the number of detected sounds will be input into the “Sound Count” parameter.  Because “Sound Count” is not initialized automatically, the user must reset it to 0 before use.Corresponding RoboPlus Task Command  Parameter : Sound CountCurrent Sound CountIt is also possible to know how many sounds have been counted by the controller’s microphone so far.Characteristics  The maximum number of sounds counted is 255.  The parameter value is increased in real-time whenever a sound is detected.  If a new sound is not detected for a certain period, the value of the “Current Sound Count” parameter is passed to the “Sound Count” parameter, and the “Current Sound Count” parameter is reset to 0.Corresponding RoboPlus Task Command  Parameter : Current SoundBuzzer IndexThis parameter is used to set the musical note played by the controller’s buzzer.Characteristics  Depending on what the “Buzzer Time” is set to, “Buzzer Index” can be set to play a musical note or a melody.  Please refer to the “Buzzer Time” parameter for information on sound modes.  If the “Buzzer Time” parameter is not set to melody mode, a melody will not be played even if it is selected.  In musical note mode, the note will be played for the length set as “Buzzer Time.”  In melody mode, when a melody is set, it is played to the end.  There are 16 melodies (0-15) and 27 musical notes (0-26).  If the “Buzzer Time” is 0, the parameter is automatically set to 3 and the note is played.Corresponding RoboPlus Task Command  Parameter : Buzzer Type  Constants : Melody, Scale Values.Buzzer TimeThis parameter is used to set the sound mode and how long the note or melody will be played.Characteristics  If the “Buzzer Time” parameter is set to a  value between 0 and 50, the sound mode is set to musical note mode.  The note will be played for the length set as “Buzzer Time.”  If the “Buzzer Time” parameter is set to 255, the sound mode is set to melody mode.  When the note or melody finishes playing, “Buzzer Time” is automatically reset to 0.Corresponding RoboPlus Task Command  Parameter : Buzzer Time  Constant Numbers : Melody, Scale ValuesExterior I/O DevicesThe controller supports exterior I/O devices, such as IR sensors, touch sensors, and DMS sensors.Characteristics  Most devices support only reads, but a few also allow writes.  After connecting and setting up an exterior I/O device, you can check its values.  For user’s devices, you can set which values are returned.  Exterior I/O devices are not recognized automatically, so the user must manually set the device.  IR sensors, touch sensors, DMS Sensors, and user’s devices are supported.  If you read without connecting a device, a random value will be returned. This value is meaningless.  When the port and device are set, the address will be set automatically. This address can be used during programing.Corresponding RoboPlus Task Command  Parameter : User’s DevicesDynamixelIn the program as shown below, users can set up and test Dynamixels.  Dynamixels found using the “Scan” or “Search” function are listed.  All devices connected to the controller, including sensors such as AX-S1, are detected.  .  Choose an actuator to manage from the list on the left.  Parameters that can be set and tested for each device are shown in the table.  Clicking on a Dynamixel Name/ID  will call a subwindow to set or test the parameter. The subwindow simplifies the process of setting the parameter for the user.  The image above is a screen shot of RoboPlus manager when the “Goal Position” parameter is clicked.  A subwindow is shown on the lower right hand corner when any row is clicked.  However, no subwindow will be displayed if only values need to be shown.Note When an actuator with an ID in ① is double clicked, the actuator is selected and its LED will blink for a moment. This is used to check where the actuator is located.Note Actuators can be managed in a group.ID SetupEach Dynamixel has its own ID, and the controller manages each Dynamixel using its ID.  This parameter is used to manage the Dynamixel’s ID.(Please refer to Dynamixel Management for more information about changing ID)Characteristics  Once this value is set, it will be saved, even when the power is turned off.  Click on the ID list to see a list of ID’s that can be changed.  Values not shown in the ID list are being used by other Dynamixels.  An ID may be any number between 0 and 253, except 200, which is reserved for the controller.Position Limit and ModeThis parameter is used to limit the position of the actuator or to set the movement mode.(Please refer to Changing the Movement Mode for more information about changing Movement Mode)Characteristics  Once this value is set, it will be saved even when the power is turned off.  The position limitation value for both clockwise and counterclockwise rotation can be set, and its value affects the value of the “Goal Position” parameter.  The actual angle for the set value is displayed.Movement Mode  Wheel Mode          When both the CW Postition Limitation Value and  CCW Position Limitation Value are set to 0, the movement mode is set to Wheel Mode (Endless Rotation Mode).      When the “Wheel Mode” button is pressed, the position limitation values are automatically set to 0.        Joint Mode          The actuator will operate in Joint Mode in all other cases.      Drive ModeTis parameter is used to set the drive mode of EX actuators.  Depending on the drive mode, the Ex actuator’s special modes, such as dual mode and reverse mode can be used.  Please refer to EX-series Dual Mode Setting for detailed information about drive mode.Characteristics  Master/Slave and Normal/Reverse modes can be set.  The setting values of an actuator in slave mode will be synchronized with the setting values of the master actuator.  When the Master/Slave mode is set, the control table will be updated to reflect the mode.(For example, in slave mode, the position value cannot be set.  Therefore, RoboPlus Manager does not display tables for unnecessary values. )  In reverse mode, the position values are reversed.(Position values 0 and 4095 have opposite meanings as goal position values.)Temperature SettingThis parameter is used to set the temperature limit for Dynamixel movement.Characteristics  Once this value is set, it will be saved even when the power is turned off.  The actual temperature for the set value is displayed.  If the actuator’s temperature goes over the limit, the LED will blink or the actuator will stop moving depending on the setting.  Unless otherwise specified, it is recommended to use the default value.TemperatureThis parameter is used to read the Dynamixel’s current temperature.Characteristic  The Dynamixel’s temperature is returned in real-time.Corresponding RoboPlus Task Command  Parameter : TemperatureVoltage SettingThis parameter is used to set the voltage limit for Dynamixel movement.Characteristics  Once this value is set, it will be saved even when the power is turned off.  The actual voltage for the set value is displayed.  The maximum voltage value and minimum voltage value can be set.  If the actuator’s voltage exceeds the limit, the LED will blink or the actuator will stop moving depending on the setting.  Unless otherwise specified, it is recommended to use the default value.VoltageThis parameter is used to read the Dynamixel’s current voltage.Characteristic  The Dynamixel’s voltage is returned in real-time.Corresponding RoboPlus Task Command  Parameter : VoltageAlarm &amp;amp; ShutdownThe LED alarm or shutdown operation can be set for specific cases.Parameter Characteristics  Once this value is set, it will be saved even when the power is turned off.  The actuator can be set to automatically stop its movements using the shutdown operation.  By using the shutdown operation, Dynamixels can be protected from problematic situations, such as current overloads, overheating, and abnormal movements.  The LED alarm or shutdown operation can be triggered by the following errors.          Instruction Error : A wrong command is received.      Overload Error : The current load is larger than the limit.      Checksum Error : The checksum of the received command is incorrect.      Range Error : The received command requires movements that are outside the actuator’s boundaries.      Overheating Error : The actuator’s current temperature is higher than the maximum operating temperature      Angle Limit Error : The actuator has moved farther than its limit.      Input Voltage Error : The input voltage is lower than the minimum possible voltage or has exceeded the maximum possible voltage      Torque EnableThis parameter is used to turn the actuator on or off.Characteristics  If the value is 0, the actuator’s torque  is turned off. i.e. the horn is free to rotate.   If the value is 1, the actuator’s torque is turned on.  The torque can easily be turned on or off using the On/Off command.  If the goal position is set when the actuator is turned off, the actuator will automatically turn on and this parameter will be set to 1.Corresponding RoboPlus Task Command  Parameter : Torque Enable  Constants : True /FalseLEDThis parameter is used to turn the Dynamixel’s LED on or off.Characteristics  If the value is 0, the LED is turned off.  If the value is 1, it is turned on.  The LED can easily be turned on or off using the On/Off command.  The LED cannot be manipulated when the LED alarm is triggered.Corresponding RoboPlus Task Command  Parameter : LED  Constants : True/FalseCW/CCW MarginThis parameter is used to set the actuator’s compliance margin.Parameter Characteristics  The margin designates the area around the goal position that receives no torque.  Set appropriate values for CW/CCW slope, “torque limit, “ and “CW/CCW margin,” for smoother movements.Corresponding RoboPlus Task Command  Parameter : CW/CCW MarginCW/CCW SlopeThis parameter is used to set the actuator’s compliance slope.Parameter Characteristics  The slope value will be created at both CW/CCW  directions, and the output level will be set near the target position.  If you set the lower slope value, it will reach to the target position by reducing the initial power NOT that much. On the contrary, if you set the higher value, it will reach the target position by reducing considerable powers as it reaches to the goal.  If you set the lower slope value, it will resist with maximum power not to stray from target position.  Even if you set the higher value, it will resist with more and more power if it is strayed too much from target position.  Compliance Slope will be changed into 7 Data representative values according to the input Data. In other words, if you input 25, in real operation, 16 -the representative value of 25-, will be used.            Level      Real Data Value      Representative Data Value                  1      0 (0x00) ~ 3(0x03)      2 (0x02)              2      4(0x04) ~ 7(0x07)      4 (0x04)              3      8(0x08)~15(0x0F)      8 (0x08)              4      16(0x10)~31(0x1F)      16 (0x10)              5      32(0x20)~63(0x3F)      32 (0x20)              6      64(0x40)~127(0x7F)      64 (0x40)              7      128(0x80)~254(0xFE)      128 (0x80)        Appropriate Compliance Slope, Power control, and the Compliance Margin values will make it possible to create smoother movement.Corresponding RoboPlus Task CommandParameter : CW/CCW SlopeGoal PositionThis parameter is used to set the actuator’s goal position.Characteristics  The value can be set using a jog dial.  When this value is set, the actuator will immediately move to the goal position.  The value is affected by “moving speed,”position limitation,” “CW/CCW slope,” and “CW/CCW margin” parameters.  Even when the torque is turned off, as soon as the value is set, it will be turned on.  When the “center position” button is pressed, the value is set to the center position.Corresponding RoboPlus Task Command  Parameter  : Goal Position  Constants : Position ValuesMoving SpeedThis parameter is used to set the speed of the actuator.Characteristics  In joint mode, the speed is affected by “compliance slope” and “compliance margin” values.  In joint mode, set the value as 0 to output at maximum power.  In wheel mode (endless rotation mode), the speed and rotating direction depend on the “moving speed” value.  The movement mode can be set using the “position limitation” parameter.  The control used to set the speed is different for each mode.Corresponding RoboPlus Task Command  Parameter :Moving Speed  Constants : Motor Control ValuesTorque LimitThis parameter is used to set the maximum load on the actuator.Characteristic  The LED alarm may be triggered or the movement may be stopped depending on the torque limit, LED alarm, and shutdown settings.Corresponding RoboPlus Task Command  Parameter : Torque LimitPresent PositionThis parameter is used to read the actuator’s current position.Characteristic  The value changes in real-time to reflect the actuator’s movement.Corresponding RoboPlus Task Command  Parameter  : Present PositionPresent SpeedThis parameter is used to read the actuator’s current speed.Characteristic  The value changes in real-time to reflect the actuator’s movement.Corresponding RoboPlus Task Command  Parameter : Present SpeedPresent LoadThis parameter is used to read the actuator’s current load.Characteristics  The value changes in real-time to reflect the actuator’s movement.  When the motor is turned off, this value is meaningless.RoboPlus Task Referring Command  Parameter : [Present Load]MovingThis parameter is used to determine whether the actuator is currently moving or not.Characteristic  If the value is 0, it is not moving. If the value is 1, it is moving.Corresponding RoboPlus Task Command  Parameter: MovingSensed CurrentThis parameter is used to check the current being consumed.CharacteristicsEX-Series  If the value is 512, the current is 0 ampere.  That is, there is no current flowing.  If the value is larger than 512, the current is rotating the motor clockwise, and the size of the current is proportional to the size of the data. (1 = aprroximately 10 mA)  For example, if the data is 612, 1A (612-512=100 =&amp;gt; 100x10mA = 1,000mA) is being used to rotate the motor in the clockwise direction.  If the value is smaller than 512, the current is rotating the counterclockwise, and the size of the current is proportional to the size of the data. (1 = aprroximately 10 mA)  For example, if the data is 312, 2A (512-312= -200 =&amp;gt; 200x10mA = 2,000mA) is being used to rotate the motor in the counterclockwise direction.MX-Series  If the value is 2,048, the currnet is 0 ampere.  That is, there is no current flowing.  If current flows in normal direction then output values are larger than 2,048.  If current flows in the opposite direction then output values are smaller than 2,048  Current flow values are proportional to data values (value unit of 1 = 4.5mA units)  For example if data reads 2,148 then 2,148 - 2,048 = 100 -&amp;gt; 100 x 4.5mA = 450mA. The output current is 450mA in the normal direction.Corresponding RoboPlus Task Command  Parameter  : Sensed CurrentPID GainFor MX-Series actuator PID values read/write availabilityCharacteristics  P gain refers to the value of proportional band.  I gain refers to the value of integral action.  D Gain refers to the value of derivative action.  Gains values are in between 0~254.Corresponding RoboPlus Task Command  Parameter : PID GainIR Left/Center/RightFor AX-S1 these parameters are used to read the DMS sensor value.Characteristics  The current DMS sensor value of AX-S1 can be read.  The reflection angle of IR rays are measured, so objects the same distance away may return different values due to their color or surrounding light.  The sensor value is between 0 and 255.Corresponding RoboPlus Task Command  Parameter : IR Left/Center/RightLight Left/Center/RightFor AX-S1 this parameter is used to read the light brightness.Characteristics  The current light brightness value of AX-S1 can be read.  The infrared rays emitted by nearby light sources such as candles and light bulbs can be measured.  The sensor value is between 0 and 255.Corresponding RoboPlus Task Command  Parameter : Light Left/Center/RightObject DetectedFor AX-S1 this parameter is used to determine whether an object is detected.Characteristics  If an object is detected within a certain distance, specific bits are set as 1.  From the left, the first bit represents the left sensor, the second bit represents the center sensor, and the third bit represents the right sensor.  Values are returned as a combination of the bits.RoboPlus Task Referring Command  Parameter : Object Detected  Constants : Binary numbersObject Detection ThresholdFor AX-S1 this parameter is used to set the object detection threshold.Characteristics  Set the object detection threshold to be used when determining whether an object is detected or not.  The value is between 0 and 255.  There is a short-range detection mode and a long-distance detection mode.  The short-range detection mode is activated when the threshold value is set as.Corresponding RoboPlus Task Command  Parameter : Object Detection ThresholdLight DetectedFor AX-S1 this parameter is used to determine whether a light is detected.Characteristics  If the AX-S1’s IR sensor value is greater than the light detection threshold value, set the bits as 1.  From the left, the first bit represents the left sensor, the second bit represents the center sensor, and the third bit represents the right sensor.  Values are returned as a combination of the bits.Corresponding RoboPlus Task Command  Parameter : Light Detected  Constants : Binary numbersLight Detection ThresholdFor AX-S1 this parameter is used to set the light detection threshold.Characteristics  Set the threshold to be used when determining whether a light is detected or not.  The value is between 0 and 255.Corresponding RoboPlus Task Command  Parameter : Light Detection ThresholdSound DataFor AX-S1 this parameter is used to read the volume of the sound detected.Characteristics  Reads the volume of the sound being detected by AX-S1.  If no sounds are detected, the returned  value will be near 127.  When sounds are detected, the value will change according to the volume. (The louder the sound, the more the value will fluctuate from 127 to 0 and 255 is not clear. Whether the value will go up or down to sound value.)  The value is between 0 and 255.Corresponding RoboPlus Task Command  Parameter : Sound DataSound Max DataFor AX-S1 this parameter is used to read the volume of the loudest sound detected.Characteristics  Reads the maximum sound data detected by AX-S1.  If the detected volume is louder than the volume of the loudest sound up to that point,  the max sound data is replaced with the detected value.  The value is between 0 and 255.  Because “Sound Max Data” is not initialized automatically, the user must reset it to 0 before use.Corresponding RoboPlus Task Command  Parameter : Sound Max DataSound CountTheAX-S1 is equipped with a function to count sounds louder than a certain threshold.  For example, it is possible to count claps.  This parameter is used to read or initialize the number of detected sounds.Characteristics  “Sound Count” uses numbers between 0 and 255.  When sounds are no longer detected, the number of detected sounds will be input into the “Sound Count” parameter.  Because “Sound Count” is not initialized automatically, the user must reset it to 0 before use.Corresponding RoboPlus Task Command  Parameter : Sound CountBuzzer IndexAX-S1 is equipped with a buzzer.  This parameter is used to set the musical note played by the buzzer.Characteristics  After setting “Buzzer Time,” set “Buzzer Index” to play a sound using the buzzer.  There are 52 musical notes that can be played (0-51).  There are 27 melodies that can be played (0-26).  Depending on what the “Buzzer Time” is set to, “Buzzer Index” can be set to play a musical note or a melody.Corresponding RoboPlus Task Command  Parameter : Buzzer IndexBuzzer TimeAX-S1 is equipped with a buzzer.  This parameter is used to set how long the sound is played by the buzzer.Characteristics  After setting “Buzzer Time,” set “Buzzer Index” to play a sound using the buzzer.  “Buzzer Time” can be set to a value between 0 and 50.  Each value represents 0.1 second.  When it is set to 254, the sound will play without end.  When it is set to 255, melodies will be played.  When the melody finishes playing, “Buzzer Time” is reset to 0.Corresponding RoboPlus Task Command  Parameter : Buzzer TimeIR Sensor ValueFor IR Sensor Array these parameters are used to read the current IR sensor value.Characteristics  Can read IR array’s current sensor values.  The IR array’s receivers can detect walls and obstacles by measuring the amount of infrared reflection bouncing back. The closer the object the higher the value.  The sensor value is between 0 and 1023.Corresponding RoboPlus Task Command  Parameter : IR Sensor ValueAuto Threshold ModeFor IR Sensor Array Setting for start/set for automatic detection for set black.Characteristics  Once LED’s blink when turned on and set values are on.  When crossing between white and black the IR sensors automatically set values.  Powers off when turned off.Corresponding RoboPlus Task Command  Parameter : Auto Threshold ModeIR Obstacle DetectedFor IR Sensor Array Paramenters to determine IR array obstacle valuesCharacteristics  In the IR array if each IR sensor detected black value is lower than the set black valuethe values will be assigned as shown below; the LED turns on.  Output values are in decimal number.            Binary value      Decimal value      Black detection                  0000001      1      Black detection for IR sensor #1              0000010      2      Black detection for IR sensor #2              0000100      4      Black detection for IR sensor #3              0001000      8      Black detection for IR sensor #4              0010000      16      Black detection for IR sensor #5              0100000      32      Black detection for IR sensor #6              1000000      64      Black detection for IR sensor #7      Corresponding RoboPlus Task Command  Parameter : IR Obstacle DetectedSet IR ThresholdFor IR Sensor Array Determine set values for black and white for the IR array.Characteristics  Setting infrared values for presence of obstacles.  Overall set values can be set by automatic parameter setting.  Values range from 0 to 1,023.Corresponding RoboPlus Task Command  Parameter : Set IR ThresholdZIG2SerialFollow these steps to manage the Zig-100 module through RoboPlus Manager using Zig2Serial.      Attach Zig-100 to Zig2Serial and connect Zig2Serial to the PC’s serial port.(Please refer to ZIG2Serial for connection) If your PC does not have a serial port, you may use USB2Dynamixel, as in the picture below.            Select the port to which Zig2Serial is connected and click the “Zig2Serial Management” icon. (Unlike with a controller, this port cannot be detected automatically.)            The following screen is displayed when the “Zig2Serial Management” icon is pressed.  Click the “Zigbee Setting” button.            Press the reset button within 3 seconds of clicking “OK”.        When the Zigbee module is connected, a window to set functions is displayed.          Can check my ID and remote ID.      Can change the remote ID.      Can set to “Broadcast” mode.      Can set to “Wait” mode.                If no ZIg100 module is detected, check whether the module has been connected properly.        You can send/receive data to/from other wireless communication modules or create and send RC-100 remote control signals.",
        "url": " http://localhost:4000/docs/en/software/rplus1/manager/"
      } ,
  
      "docs-en-software-rplus2-manager":  {
        "title": "R+ Manager 2.0",
      "content"	 : "IntroductionRoboPlus Manager 2.0The RoboPlus Manager 2.0 manages the Controller and Dynamixel devices that comprise the robot.By connecting the product, the user can update the product to the latest version and test the Control Table.The functions that were previously provided in RoboPlus Manager 1.0 and Wizard 1.0 have been combined in RoboPlus Manager 2.0.PrecautionsSupported products are limited starting from V2.0.0. For products that are not included in the list of supported products, please use RoboPlus Manager 1.0 and Wizard 1.0.List of Supported Products  Robotis Dream  Robotis MINI  Dynamixel 2.0 Series (MX-28, MX-64, MX-106, XL-320, XM Series, XH Series, Pro Series)Definition of FirmwareFirmware is basic software that is installed on a device to operate the hardware. Firmware contains communication protocols with PC, smartphone, and other devices so it is recommended to keep the firmware to the latest version.All devices (Controller, Dynamixel etc) have firmware installed when first purchased, but new versions can be released if there are additional functions / bug fixes.Role of Controller Firmware  Operates the control program written using RoboPlus Task  Interprets the motion data written using RoboPlus Motion  Performs packet communication function with PC, smartphone, and DynamixelRole of Dynamixel Firmware  Performs packet communication function with Controller when operating control program or motion on the Controller  Performs packet communication function with PC, smartphone, and DynamixelImportance of Firmware Update  A new firmware can be released if there are additional functions or modifications to previous functions.  A new firmware can be released to improve compatibility if supporting a new S/W is necessary.  A new firmware can be released if there is a bug fix.  If the product does not function properly or communication is unstable, updating to the latest firmware may fix the problem.Menu DescriptionEditing Tab for Each StageThe workspace is divided into Home Tab, Managing Tab, and Terminal Tab. (The Self-Checklist / Calibration functions in the Managing Tab and the Terminal Tab are not available as of yet in V2.0.0.)Home TabThis is the first screen right after starting the program, which provides functions such as Product Selection menu and Firmware Update history function, etcManagement TabThis tab provides Firmware Update / Test / Recovery functions for the previously selected product. Depending on the selected product, the functions that can be used are filtered and showed.The figure below is a screen of testing the Control Table. It shows all searched products according to their communication speed and device model, and you can test by modifying the values in the Control Table.Terminal TabThis feature is currently being prepared and will be supported in upcoming updates.Basic FeaturesFirmware Update      In the Home Tab,select the product that you wish to update or test. (ROBOTIS MINI was selected in the example below)            Select the “Update &amp;amp; Test” menu.             Connect the product with the PC as guided on screen and then turn on the product.            Select the connection port and click the “Next” button. (Bluetooth serial port was used in the example below)             Select the communication speed to search and click the “Next” button. (When using Bluetooth serial port, only 57,600bps can be used)            Check if the device to be managed has been properly searched and click the “Next” button. (If the product is not searched properly, then click the “Try Again” button.)            If the content to be updated is detected, then the “Update Now” button below will be activated. Check the update content and click the “Update Now” button.             Wait until the update has been properly completed and click the “Next” button.            If the update has been completed, then the “Control Table test” function will be executed. (Some controllers will turn off after the update is complete, and the window will be closed.)      Firmware Recovery      In the Home Tab, select the product that you wish to recover. (ROBOTIS MINI was selected in the example below)            Select the “Firmware Recovery” menu.             Check the notification message and click the “Next” button.            Select the product you wish to recover and click the “Next” button. (OpenCM9.04 was selected in the example below)            Follow the instructions that appear in order. Be sure to the check the yellow warning message below.        After all preparations are finished click the “Next” button.            Select the connection port and click the “Next” button. (Bluetooth serial port was used in the example below)        Once the device is connected, bootloader is detected for firmware installation. Click the “Next” button when it is activated.            Check the information of the firmware to the installed and click the “Next” button.             When the recovery is complete, click the “Finish” button.      Dynamixel Control Table      To begin we will assume the Control Table window is open. (Please refer to the Firmware Update section for the connection process.)        The Control Table window categorizes the control tables according to their communication speed and device model. Select the communication speed and device model that you wish to test. (XL-320 was selected in the example below.)            From the menu on the right, clicking the “Factory Reset” button will restore all settings of the product to their factory default configuration. (The ID and Baud Rate value will not be changed.) From the menu on the right, clicking the “Rebooting” button will restart the corresponding Dynamixel. From the menu on the right, click the “Turn On/Off Torque” button will turn the corresponding Dynamixel’s torque on or off.             From the menu on the right, click the “Turn On Torque” button to turn the Dynamixel’s torque on.        In the Control Table list, search and select the “Goal Position” item.        Use the Goal Position control on the lower right corner to move the motor.    Warning Take caution since the motor can suddenly move in the process of changing the value.        You can check if the current communication between the PC and the product is normal through the “Communication Status” LED on the lower left corner. (Green : Normal, Yellow : Time-Out, Red : Data Loss)  You can check the Dynamixel’s response status through the “Response Error” message on the lower left corner.      You can check the hardware’s error status through the “Hardware Alarm” message on the lower left corner.             Some Dynamixels provide the function to view the Profile Type status.In a given Operating Mode, the Profile Type is decided by the Profile Acceleration value and the Profile Velocity value. Please refer to the corresponding Dynamixel’s E-Manual for details. (Supported products : XM Series and XH Series)      Note For further information about the Control Table, please refer to each Dynamixel.Controller Control Table      Select the controller to connect in the Home tab. (OpenCM7.0 is selected in the example)            Click Update &amp;amp; Test icon.            Connect the controller to PC according to the described image.            Select COM port to establish connection between PC and controller.(USB port is selected in the example) Click Next button.            Select Baud Rate to establish connection between PC and controller. Click Next button.            Confirm detected device with selected port and baudrate then click Next button. If the device is not detected, click Retry button and try again.            If there is any available firmware updates for the device, update menu will be available. Click Update Now button to update the device. If connected device already has the latest firmware, you will see below screen. Click Next button to proceed.            When the connection is established between PC and controller, below screen will be appeared. Control Table window arranges device with Baudrate and Device. If you have connected multiple devices, select baudrate and device of the controller to test.            On the right column of the window, Factory Reset button will reset all configuration except ID and Baudrate.            On the left bottom corner of the window, TX and RX communication status is visualized with colred bar (Green : normal, Yellow : timeout, Red : data loss)Return Error will notify response status of the device and H/W Alert will notify error status of the hardware.            Select an item with RW access property and change its value to test controller. For below example, select Green LED and change its value from the right table will control green LED on the controller.            Various peripheral devices can be attached and tested. Click the extention triangle button to display sensor selection pop up window.            Changing peripheral device will also change the address for the device. In the below example, selecting Ultrasonic sensor for port 3 will update its address to 244.      Note For more details on peripheral devices, please refer to R+ Task 2.0.Advanced FeaturesPreparation for XM/XH SeriesThere are two preparations that need to be done for using the XM Series in R+Task2.0 or R+Motion2.0.(Preparing the H/W / Configuring the Dynamixel Channel)Preparing the H/W  Apart from the OpenCM9.04 and XM Series, the “OpenCM 485 EXP board” is needed as in the figure below.  Connect the three components below with cables.Configuring Dynamixel Channel      Open R+ Manager 2.0 and select the Dynamixel2.0 product, then click on the Update &amp;amp; Test menu.        Connect the OpenCM9.04 to the PC by usingLN-101 or BT-210(or BT-110), then turn on the OpenCM 485EXP.      Follow the instructions below to search the product forOpenCM9.04 (Initially the Dynamixel Channel value of the OpenCM9.04 is set to Default so the XM/XH Series does not appear in the search result).        After the process of updating the product, the Control Table will open.      From the Control Table list, set the Dynamixel Channel value to EXP Board (Expansion Board)and click Save.        When the configuration is finished, close the Control Table window and restart the OpenCM 485 EXP. (As it is restarted the, the mini TTL bus of the OpenCM9.04 is deactivated, and then Dynamixel bus of the OpenCM 485 EXP is activated.)      Open the Update &amp;amp; Test menu again and check that the XM/XH Series is properly detected in the search result.        When the configuration is finished, you can now use the XM/XH Series in R+ Task 2.0 and R+ Motion 2.0. (Supported from versions R+ Task 2.0 v2.1.0, R+ Motion 2.0 v2.4.0 or later)Chanaging Control ValueUse the left mouse-button to drag and change the value(used when changing the value in large amounts.)Use the mouse wheel to change the value (used when changing the value in small amounts.)Use the arrow keys in the keyboard to change the value (used when changing the value minutely.)Inputting the value directly. You can also use basic arithmetic operations (addition, subtraction) to set the value.Firmware InformationThis is the function to check the Firmware version, release date, and update note.  In the Home Tab, select the product for which you wish to check the Firmware version.      Click on the “Firmware Information” button on the upper right corner.            You can check the Firmware version, release date, and update note of the selected product.      Firmware Management(Bluetooth)By using the BT-210 or BT-110 you can manage the Firmware wirelessly (The BT-410 does not provide a wireless Firmware management function)Add a Bluetooth serial port by following the instructions below (Example below shown for Windows10).  Connect the BT-210(or BT-110) to the Controller and turn on the Controller.      Click on the Windows start button, and select the Settings menu.            Click on the Devices menu.         Select the Bluetooth category on the left, and turn on the Bluetooth option on the right.      Select the searched Bluetooth module, and chick the Pair button.            In the device password field, enter 0000 and click on the Next button.             When the pairing is complete, select the paired device and click on “More Bluetooth options” found below.            Click on the COM Port tab and check the port number of the transmission port. (In the example below it was COM7)             In R+ Manager 2.0, select the installed Bluetooth port number and you can now manage the Firmware wirelessly.      ",
        "url": " http://localhost:4000/docs/en/software/rplus2/manager/"
      } ,
  
      "docs-en-software-rplus-mobile-mdesign":  {
        "title": "R+ m.Design",
      "content"	 : "R+ m.Design  Downlaod Android App          Minimum System Requirements                  Android 2.3 or higher          Hardware : 1.2GHz dual-core CPU, 1GB RAM, Bluetooth                    Supports : BT-410 (Android 4.4 or higher), BT-210, BT-110        Download iOS APP          Minimum System Requirements                  iOS 8.0 or higher          Hardware : iPhone 4S, iPod 5G, iPad mini, iPad 2 or higher                    Supports : BT-410      ",
        "url": " http://localhost:4000/docs/en/software/rplus_mobile/mdesign/"
      } ,
  
      "docs-en-parts-sensor-mgss-10":  {
        "title": "Magnetic Sensor(MGSS-10)",
      "content"	 : "Magnetic Sensor(MGSS-10)Introduction  This sensor detects magnetism.  The sensor behaves as a touch sensor and detects a magnet close or far.  Place the magnet approximately 5 mm in front of the sensor for touch-sensor-like behavior.Compatibility Guide Controller CompatibilitySpecifications  Weight : 3g  Dimensions : 24mm x 18mm x 12mmSensing Range  The maximum detectable distance of the magnet’s N/S pole and the front of the sensor : 1.5CmCaution Won’t be detected if the sensing distance is shorter than 5mmPinout  Not used  GND  ADC : magnetismdetection status  VCC (3.3V)  Not usedCaution Cables can may be damaged when not properly connected (i.e. wrong orientation), or use of excessive force during connection.Caution Make connections to the controlled while unpowered. Making connections while the controller is powered may cause it to malfunction or/and damage.Tutorials  Reading Data is similar to that of IR sensor.  RoboPlus Task : Please refer to IR Sensor section in the Roboplus Task.Videos",
        "url": " http://localhost:4000/docs/en/parts/sensor/mgss-10/"
      } ,
  
      "docs-en-edu-mini":  {
        "title": "ROBOTIS MINI",
      "content"	 : "ROBOTIS MINIIntroduction  Awarded the “Good Design” mark  Maintains compatibility with the 6mm grid OLLO ROBOTIS DREAM frame  Applies the small Dynamixel XL-320 for various motion functions  Offers the ROBOTIS-MINI exclusive App (Touch, Gesture, Voice Recognition, Messenger)  Supports various functions for the user’s convenience (battery percentage, offset setting, etc)  Supports R+ Task and R+ Motion  Expandability capability with devices such as color Sensor, LED Module, etcPrecautionPlease be aware of your own safety as you assemble. ROBOTIS CO., LTD is not responsible for the result of any accidents caused by the user’s negligence.  Safety Precautions          Read through manual carefully before assembly.      Do not use any other tools other than those provided in this kit. (no knives, cutters, drills, etc)      Keep a safe distance from the robot during its activation.      Be careful not to get fingers stuck between the robot joints.      Do not store or operate the robot under direct sunlight.      This project is not water proof. Do not use near water.      Do not use near heat or fire.      Do not disassemble or modify the parts.      Keep all parts out of reach of small children.      Do not drop or use sharp objects with the parts.      Do not connect or let the li-ion battery come in contact  with hair pins, clips, or any metal objects.      Do not bend, twist, or modify the metal part of the li-ion battery.      Do not place the li-ion battery in the microwave or solder any parts.      Do not soak or place the li-ion battery in or near water.        Assembly Precautions          Use only the designated screw driver in the kit(Size : M2)      Do not use excessive force on nuts, bolts, or robotics parts.      Avoid activating the robot on desks/tables to avoid from falling.      Damages caused from falling are not covered under warranty.      The gears in the Dynamixel XL-320 are subject to wear. Prolonged use, improper modification, excessive force, and accidents will increase the gear to backlash.        Precautions During Use          Charging the Li-ion battery      Insert the li-ion battery in the charger case with the USB connector.      The battery is not charged. Please charge before use.            Frame Assembly for Dynamixel XL-320    There are two different marks on the horn. Top marked and the bottom marked Before assembly, make sure the marks are in their proper position.            Checking the percentage of the li-ion battery    The controller checks the battery percentage when the power is turned on.              Status      Movement                  Good Battery Percentage      All LEDs blink in RED 1 time              Insufficient Battery Percentage      All LEDs blink in RED 5 times      WARNING Please immediately turn off the power and contact ROBOTIS when you encounter any of the following symptoms.  When you see smoke from the product  When the LED on the Dynamixel XL-320 does not blink during the ‘Actuator Test.’  When the robot has been exposed to water or any debris has gone into the parts.  When you smell anything odd  When the robot is damagedGetting StartedPart ListPreparationConnect to MINIBluetooth must be installed in your computer to connect it to ROBOTIS MINI. If you do not have it installed, you must purchase a Bluetooth dongle.  If you already have Bluetooth, use the method below to register ROBOTIS MINI’s Bluetooth (BT-210) to your computer(The instruction below is based on  Windows 7/8/8.1).For Windows 8/8.1, to open the Control Panel click on the right side of the charm bar then click Setting.  Connect the Bluetooth (BT-210) to your robot and turn the power on.      Select ‘Control Panel’  &amp;gt; ‘Hardware and Sound’  &amp;gt; ‘Add a device’ on your computer            Select ‘ROBOTIS BT-210’ from your list and click ‘Next.’            When there is more than one device, check the ‘Properties’ of the device by clicking on the right side of your mouse. Make sure the Unique Identifier number of your Bluetooth under the ‘Bluetooth’ tab is the same number you wish to use.            Select ‘Enter the device’s pairing code’ from the Connection Option.            Input ‘0000’ then click ‘Next.’            Device has been successfully added.      Check Connection      Select ‘Control Panel’ &amp;gt; ‘Hardware and Sound’ &amp;gt; ‘View devices and printers’ on your computer.            Select ‘Properties’ by right clicking on the BT-210 that you just added.            Check the COM port under the ‘Hardware’ tab.      Operating MINIApp InstallIntroduction &amp;amp; InstallationROBOTIS-MINI uses a smart device to operate various motions The app requires the system specifications below :System Requirements  OS : Android2.3.3 (Gingerbread) or greater  Hardware : 1.2GHz Dual Core or greater, RAM 1GB or greaterOpen the Play Store or App Store on your smart device. (Play Store is for Android Market App)Search for ‘ROBOTIS-MINI’ or ‘ROBOTIS’ then click to install. A window requesting for access to other files will appear, but touch Accept.Bluetooth ConnectionWhen the controller is turned on and the LED of the Bluetooth (BT-210) blinks, the robot and Bluetooth has successfully connected.Connecting the robot with the app using BluetoothExecute the ROBOTIS-MINI app.  Turn the robot on, then execute the ROBOTIS-MINI app on your smart device.  If the Bluetooth on your smart device is turned off, a message will appear like the image below.  Touch ‘Allow’ to activate your Bluetooth.Caution If the setting of the ‘Server/Client’ under setting is set to client, instead of the ‘Registered Robot’ appearing, the “Run” tab will appear. Please refer to the QuickStart for more information on ‘Server/Client.’Check the Bluetooth (BT-210) connection  From the list of ‘Registered Robot’ look for the Bluetooth number connected to your robot. This number can be found on the top portion of the Bluetooth as shown in the image below.  If the same number does not exists, use the ‘Search New Robot’ function to find and register.Input Bluetooth PIN number  You will need the PIN information to pair your device with the Bluetooth. The default PIN number is ‘0000’  Enter ‘0000’ touch ‘Okay’ to connect the robot and device. The image on the left will appear.Assembly Check using the AppTouch, ‘Setting” then “Actuator Test’ to check your assembly. Once your smart device and ROBOTIS-MINI are connected, the image of ROBOTIS-MINI on the far right will appear.Tap on each of the ID, and if the Bluetooth is connected and there is no problems in the actuators, the joint’s LED will blink in red, green, then blue.If you tap an ID but the wrong joint lights up on the actual robot, there is an assembly problem. In this case, change the ID, or reassemble the joint into the correct position.OperationThe ROBOTIS-MINI app uses the smart device’s functions such as the button, gesture (sensor), voice recognition, and messenger to execute the motions.  Button : Use the buttons on your screen to operate the ROBOTIS-MINI  Gesture : Use the smart device to make particular gestures on the ROBOTIS-MINI  Voice Recognition : Use the voice recognition function for the ROBOTIS-MINI to respond to your voice.  Messenger : Use another smart device to control the ROBOTIS-MINI. It can be connected to a different smart device using Messenger by sending commands.  Remocon : Remote Controller : Displays a virtual remote controller on the screen for easier controlling of fighting games and soccer games.Stop Motion, Initial Position, and Stand Up are 3 basic buttons on the “Run” tab.Below are the functions of each button.  Stop Motion : This button calls on the Motion #0 to execute endless loop motion. To stop motions, simply press this button to stop after the current motion is done executing.  Initial Position : This buttons call on the Motion #1, which is the initial position command.  If Motion #1 has been modified, it will run on the modified command.  Stand Up : This buttons call on the Motion #2, which is the stand up command.  If Motion #2 has been modified, it will run on the modified command.When the robot is executing a motion, all other motions except the ‘Stop Motion’ will be ignored.Control with ButtonsTouch a registered button in the ‘Button’ tab to activate a motion. Touch the ‘’Edit’ tab to Add/Edit/Delete/ and change the location of the button.      Edit Button Line    Add button line : Press the ‘Add Button’ button in the “Edit’ tab to add a new line to the top line.        Change button line order : Touch the right side of the line then drag up or down to move the line.        Delete button line : Touch the right side of the line then drag left to delete a line.            Edit Button    Edit Button Data : Touch  ‘+’ to add a new button. Touch other existing command buttons to edit.              The motion numbers are the numbers of the designated motions downloaded on the robot.      If a motion number is not designated, the button name will be shown in light gray.      If the button name and motion number are both deleted, it will not appear on the “Run” tab.        Use the motion file setting to input motion call numbers : If you designate the motion file to use under ‘Motion File Setting’ in the app setting, you will see the ‘List’  in the top right corner in the button editing screen. Touch this ‘List’ to see the entire list.    Select the desired motion from the list to automatically input a button name and number.      Control with GesturesThe ‘Gesture’ tab uses the acceleration sensor of the smart device to enable the robot to do certain motions. For example if the user draws an O or X holding the smart device, the robot will either walk or sit down based on the motion designated.  This works with the smart device held straight up 90 degrees from the ground.      Move the robot by holding onto your smart device and making a gesture.        Press down on the center of the screen and tilt the smart device to operate the robot.      When touching the basic buttons in the screen below, it will operate the robot instead of moving to the ‘Button’ tab.    Touch ‘Tilt’ at the bottom of the screen to check the movements designated by the tilts.        Touch the top ‘Edit’ to add, edit, or delete gestures or use the ‘Train Gesture’ function to increase recognition rate. Also, the basic gestures for ‘Tilt’ can be edited.    Register Gestures          Touch ‘Add Gesture’ button to add gestures.      Input the gesture name, motion number and explanation.      Touch ‘Ready’ and move the smart device in your hand at a steady speed to make a gesture.                  When the movement is done there will be a ‘beep’ sound along with a short vibration and a message saying ‘Gesture learned ‘ will appear. Touch ‘Okay’                          Touch ‘Okay’ to add the gesture.                  If you do not hear the “Beep” sound, please check the media volume.                          When adding gestures, if you have already set the motion project file under ‘Setting’ the ‘List’ button will appear for easy access to add motions.                      Edit Gesture          To edit a gesture touch the ‘Edit’ button.      Use the same method when adding gestures to edit and finalize by touching ‘Okay’        Delete Gesture          Touch the right side of the line then drag left to delete.        Edit Button          Touch the command you wish to change to edit the command.      The buttons on the bottom of the screen can add up to max 3 buttons. (1 line)        Edit Tilt          Touch ‘Tilt’ at the bottom to edit the motion.      Only the pre-designated 4 directions can be used under the ‘Tilt’  function.      Touch the direction to edit the name and number of the motion.            The pre-designated directions below should be held in your right hand 90 degrees straight from the ground to move forward, backward, left, and right.(: .notice)            Gesture Training Function?    Use the gesture training function to increase the chances of recognizing registered gestures.          Touch ‘Train’ for the gesture you would like to train.      Touch ‘Ready’ and make a bigger gesture or tilt the smart device and/or make different gestures.      When the movement is done there will be a ‘beep’ sound along with a short vibration and a message saying ‘Gesture XXXXX learned ‘ will appear. Touch ‘Okay’      Use the same method to change similar movements for repeated studying.      Operate with Voice RecognitionUses the Google voice recognition function to operate ROBOTIS-MINI.Touch the MIC icon on the center of your screen then say (input)  the command. To use this function, you must have internet connection access to your smart device for voice recognition.Touch the ‘Edit’ button to add, edit, or delete any voice command.  Add Voice Command          Touch the ‘Add Voice Command’ to add a command.      After deciding the command and motion number, touch the ‘Okay’ button.            Edit Voice Command          Select the voice command of the gesture to edit and touch “Edit        Delete Voice Command          Touch the right side of the line then drag left to delete.            Voice Recognition Training Function?    Use the registered voice command to increase the chances of getting the right command by training it using the icon marked below.          Select the voice command to ‘Train.’      Say the word after touching the MIC icon on your screen.      When the voice is recognized, the word most similar will appear.            Touch the ‘Okay’ button to register the most similar word to the relevant voice command.Caution To delete a command added during the training, delete the voice command first and then re-register.Voice Recognition Test To check whether the registered voice command is recognized properly, use the MIC icon under the ‘Edit’ tab to test the word. This does not operate the robot.Operate with MessengerYour robot can be controlled using the various Messengers in your smart device. [Does not work on all Messengers.] To receive commands via Messenger, you must have internet access to your smart device.Messenger, uses the notification bar of your smart device to check whether the command corresponds to the message then runs the command if it is the same.Messenger uses the registered voice commands.Caution Your Accessibility Setting for the ROBOTIS-MINI  App must be enabled(Please refer to the ROBOTIS-MINI App Accessibility Setting). If your exact message is not displayed in the notification bar, you may not have access to your robot via Messenger.Operate with Remocon  Use the buttons displayed  in the figure below to control ROBOTIS-MINI.  The buttons on the left are used for movement and will activate the same pre-set motions in both modes.  The numbered buttons on the right [1~6] activate different motions in Soccer Mode (offense/defense) and different motions in Fight Mode. Over both modes, a total of 18 motions can be assigned to the buttons. When a motion is not assigned to a button, the button will be blue.  Switch between Soccer Mode or Fight Mode by tapping the button in the red rectangle in the figure below.  Soccer Mode          2 available modes : Defense and Offense                  Default buttons motions for Offense are Left Block (1), Right Block (2), Block 1 (3), Block 2(4); for Defense, the default motion buttons are Left Kick, Right Kick, Left Side Kick, and Right Side Kick.        Fight Mode          The default button settings for Fight Mode are Left Attack(1), Right Attack(2), Front Attack(3).            Exit          Click on the “X” icon in the upper right hand corner to close the remocon screen.            Run &amp;amp; Edit          To control your ROBOTIS-MINI, click on the Run tab then, click on the numbered buttons                To edit robot motions, click the Edit tab. Then click on a specific motion to edit it.      App SettingThe ‘Setting’ is located on the top right corner of your device and below are the explanations for the menus.Server/Client SettingThis setting is for controlling one ROBOTIS-MINI with many smart devices. One smart device will be set as Server to connect directly with the ROBOTIS-MINI, and the other smart devices will be set as Client to send commands to the Server. The Server will receive the commands sent from the Clients, then send the commands to ROBOTIS-MINI to make it perform a motion.By using the server/client setting, the user can hold one smart device in each hand to control the ROBOTIS-MINI. The left hand device may perform gestures for left motions, and the right hand device may perform gestures for right motions.This function cannot be used under mobile network connection (3G/4G/LTE). The smart devices that are set under server and client setting must be connected in the same network.1) They can be connected to the same router, or 2) One device may have its Wi-Fi hotspot function turned on, with the other devices connected to this hotspot      Server/Client Setting    Only the smart device set as Server will be connected to the ROBOTIS-MINI via Bluetooth, so the smart devices set as Client will not show the registered robot list when the App is run.          The IP Address of the smart device will be shown when Server is selected.      Input this address into the Client smart devices and select the Test button.              If set correctly, the Server smart device will show the message ‘Test’ when the Client performs the test.                How to set your portable  Wi-Fi hotspot : The setting method and images can be different from those illustrated below.                    Go into the following setting menu in your smart device; System – Wireless &amp;amp; networks – Tethering &amp;amp; portable hotspot – and check ‘Portable Wi-Fi hotspot’.                            You can change the name of the smart device to be displayed on the other devices under the ‘Set up Wi-Fi hotspot’ setting.                When using this function, all Server and Client devices will connect to the internet (data communication) using the Server  device (set as the hotspot), so please take caution of your data package usage.            Motion Sound SettingUsers can add a sound file to be played when a certain motion number is performed. With this function, users can play a music on the smart device while performing dance motions.Select ‘Add sound’ to input the specific motion number and register the sound file to be played. Registered sound files can be played, edited, or deleted from the sound list.Motion File Setting‘Motion page number’ is the numbers that are given to the motions in the motion group.Users can save time on checking each motion page number by registering the motion files in the ‘Motion file setting’.Once a motion file is registered, the ‘list’ button will be shown on the ‘add command’ window. Select the ‘list’ button to show the list of motion pages in the motion file. Select one of the motion pages shown, then its motion name and motion page number will be automatically inputted on the screen.The default value is set to the basic motion file provided with the ROBOTIS-MINI.Once a motion file is registered, the ‘list’ button will be shown on the ‘add command’ window. Select the ‘list’ button to show the list of motion pages in the motion file. Select one of the motion pages shown, then its motion name and motion page number will be automatically inputted on the screen.Accessibility SettingAccessibility Setting is required to use the ‘Messenger’ function of the ROBOTIS-MINI App. The App must be able to access the message received through the messenger to verify that it is a correct command registered in the command list.Once this function is activated, the ROBOTIS-MINI App can access the received messages that show up on the smart device’s notification bar.So, if this function is deactivated, the ROBOTIS-MINI App won’t be able to access and read the commands sent via messenger, so the robot will not be able to carry out the command.Unlike the Server/Client setting, this function uses the messenger as a media of sending the command, so the smart device (not connected to the ROBOTIS-MINI) sending the message to the main smart device (connected to the ROBOTIS-MINI) doesn’t have to be connected in the same network.The user must activate the ‘ROBOTIS-MINI’ on the accessibility setting list to activate this function.Gesture Margin of Error SettingThis setting is used to adjust the gesture recognition rate when using the Gesture function. Setting the margin of error tolerance range low will require more precise gesture movement. Setting the range high will improve gesture recognition but will be more sensitive to other similar movements.Please refer to ‘Operating ROBOTIS-MINI’ for more information on the Gesture function.Actuator TestTouch ‘Setting” then “Actuator Test’ to check your assembly. Once your smart device and ROBOTIS-MINI are connected, the image of ROBOTIS-MINI on the far right will appear. Tap on each of the ID, and if the Bluetooth is connected and there is no problems in the actuators, the joint’s LED will blink in red, green, then blue.If you tap an ID but the wrong joint lights up on the actual robot, there is an assembly problem. In this case, change the ID, or reassemble the joint into the correct position.Motion OffsetOffset refers to the difference of standard value. Even when assembling the same type of robots, minor deviations exist between each of their respective motors, resulting in the final posture to be slightly different between them. Adjusting the motion offset value will compensate the deviated amount to perform motions more accurately.      ROBOTIS-MINI Initial PositionGoing into the ‘Motion Offset’ menu will read the saved offset value in the ROBOTIS-MINI, and ROBOTIS-MINI will move into its initial pose (with the offset applied). The initial pose of ROBOTIS-MINI looks like the image below.      If a joint’s position is not as shown on the image and is crooked, use the torque ON/OFF function of the joint to adjust the joint into its correct initial position.Caution Please hold up the ROBOTIS-MINI to accurately check the position of the joints.Checking the position with the ROBOTIS-MINI on the ground may cause its legs or waist joints to alter.Touch an ID to turn the respective joint’s torque OFF, and you will be able to physically move the joint. The image shown on the screen shows how the correct standard position of the joint should be.Refer to the image to move the joint to its correct position, and select ‘Okay’ to turn the torque back ON. The app will read the adjusted value of the position to calculate and show the offset value on the screen.If it is difficult to position the joint into an accurate position, touch (hold) the ID number long to go into a precise setting mode from the smart device. This way, users will be able to precisely adjust the joint position using the slide bar displayed on the screen.  Touching the ‘offset reset’ button on the top will return all offset value to ‘0’.  Touching the ‘initial position’ will delete all offset value in adjustment, and return the initial position to the offset value that was saved in the ROBOTIS-MINI.Applying the changed offset to the ROBOTIS-MINI requires downloading. Touch the download button on the top right to download the value to the ROBOTIS-MINI controller.InitializeThis functions returns the settings for the Button/Gesture/Voice to it’s default setting.ProgrammingRoboPlus TaskA Task is a set of motions to perform a certain actions. RoboPlus refers to the source code that specifies tasks to be executed by the robot as  Task Code’. The robot moves according to your task codes. RoboPlus Task is a software to make writing these task codes easier.RoboPlus Task Download and UsageRoboPlus(R+) Task can be downloaded from the ROBOTIS website under Support à Download. Please refer to the RoboPlus Task for detailed on how to use the program.  Click here to learn more about RoboPlus Task.  Click here to download RoboPlus.Task programming exampleBelow is a program example for ROBOTIS MINI. This program is a master and slave program where the left arm makes the same motions as the right arm.The example file can be downloaded at Download SectionDownload Task CodeThe composed task code must be downloaded to the DARWIN-MINI. Downloading will save the task code to the controller.  The PC must be connected to the controller. Please refer to the section above on connecting the ROBOTIS MINI with the PC via Bluetooth.      Check the port ROBOTIS MINI is connected on.        If you don’t know the port, select ‘Auto Search’.If RoboPlus can’t find the controller, the following message will show up on the screen. In this case, follow the instructions on the screen.            Select the Download icon (shortcut key F6).        If there is an error in the program, make sure to find and to fix the error.(Please refer to the rule check error message at the end of your program.)        Download in progress.    If downloading fails, please try again from the beginning.        Turning the ROBOTIS MINI controller OFF then ON will automatically run the task code downloaded on the controller. Check whether the robot operates in the way it was downloaded in.RoboPlus MotionMotion data is a set of motor position and speed data, which is required to make the robot move in a certain way. The robot requires the motion file to move, so the correct file must be downloaded to the robot to perform the correct action. RoboPlus MOTION is used to program various motions.The Task Code composed in RoboPlus Task is a program. Motion file, on the other hand, is a data. Task codes decide how the robot moves, and making the moves to be carried out requires motion data.Roboplus Motion is the program that helps to easily make the robot motion data.How to download and use RoboPlus MotionThe RoboPlus Motion program can be downloaded from the ROBOTIS homepage.Further instructions on how to use it can be found on the e-Manual.  Click here to learn more about RoboPlus Motion.  Click here to download RoboPlus.DARWIN-MINI basic motion fileThe basic ROBOTIS MINI motion file can be also downloaded on the e-Manual page.The example file can be downloaded at Download SectionTry editing the sample file referring to the RoboPlus Motion instructions on e-Manual.Download Motion FileDownload the edited motion file to the robot to use it in the ROBOTIS MINI App or task code.Like the task code, the motion data needs to be downloaded to the controller once.  The PC must be connected the controller. Please refer to the section above on connecting the DARWIN-MINI with the PC via Bluetooth.      Click ‘connect’ on the bottom left.            Select the port to connect on, and click connect.        If you don’t know the port, select ‘Auto Search’.        If connection is successful, the port number and connection speed will be displayed on the bottom left.            Move to the motion download tab on the top to download the motion data, select the motion group to download, and click the download button.            Download progress will be shown, and the ‘Download Success’ message will be shown on the bottom log window.        Now, check with the ROBOTIS MINI App or task code to see if the edited motion performs the way it should.Customize  Adding Peripheral Devices The controller OpenCM9.04-C Type used in ROBOTIS MINI has four ports to connect 5P devices.      Accessories        ※ Please refer to our online shop to purchase the sensors above. GO TO ROBOTIS SHOP        Port number for each port is written in white.      `Caution`- LED Module : Use ports `2` and `3`(LED will not light up when using ports `3` and `4`)- IR Sensor :  Use ports `1` and `4`- Color Sensor : Use ports `2` and `3`&amp;lt;/div&amp;gt;Images of ROBOTIS-MINI with different devices assembled.![](/assets/images/edu/mini/mini_025.jpg)      Customize Appearance The stickers come with your package but if you want to re-reprint them, please refer to the link below. You can also draw your own design. Sticker file can be downloaded at Download Section      &amp;lt;a name”download”&amp;gt;&amp;lt;/a&amp;gt;Download  Download Example Task Code and Motion File  Download Sticker Design  Download STL File for 3D Printer  Download STP Design FileReferencesFirmware UpdatePlease follow the procedure below to recover or update the ROBOTIS MINI’s controller (OpenCM9.04C) firmware.      Separate the ROBOTIS MINI’s chest with the body to disassemble the controller.            With the power off, push the user button (marked red below).            Keep holding the user button, then connect the OpenCM9.04C with the PC with the mini USB cable (marked red below).            When a green light shows up on the LED marked below, let go of the user button.            Run RoboPlus. If the version is low, an automatic update will be run through the internet. If the automatic update doesn’t run, please download the latest version from the ROBOTIS website’s Download site.            Run R+ Manager (ver. 1.0.32.0 or higher).            Click the button on the top right to update RoboPlus to the latest version.        If any updates were made, close R+ Manager and open the program again.        Click the controller firmware management button on the top.            Click [Next].            Select the port the OpenCM9.04C is connected on and click search.            When the controller is found, click [Next].            Click [Next].            Click [Next].            Click [Finish].      ID Map",
        "url": " http://localhost:4000/docs/en/edu/mini/"
      } ,
  
      "docs-en-software-mobile-app-mini-app":  {
        "title": "ROBOTIS MINI APP",
      "content"	 : "ROBOTIS MINI APPPlease refer to Operating MINI section.",
        "url": " http://localhost:4000/docs/en/software/mobile_app/mini_app/"
      } ,
  
      "docs-en-software-rplus-mobile-mmotion":  {
        "title": "R+ m.Motion",
      "content"	 : "Getting Started  Downlaod Android App          Minimum System Requirements                  Android 2.3 or higher          Hardware : 1.2GHz dual-core CPU, 1GB RAM, Bluetooth                    Supports : BT-410 (Android 4.4 or higher), BT-210, BT-110        Download iOS APP          Minimum System Requirements                  iOS 8.0 or higher          Hardware : iPhone 4S, iPod 5G, iPad mini, iPad 2 or higher                    Supports : BT-410      Menu Description  Editing tab per step  Connection status of robot  Menu bar  Workspace  3D robot viewer  Timeline (motion unit)  Timeline menu bar  Pose table  Pose menu bar  3D robot viewer  Flow chart (motion)  Flow chart menu barPracticeConnect to Robot  Click the connect button to open the connection window.  Enter the last 2 digits (number/letter) of the Bluetooth to search for.  Click the OK button.  Click on the “Refresh” button.  Click on the robot’s Bluetooth address.  Click the “Connect” button  Enter 0000 for the PIN code.  Proceed with the connection (This process is skipped if the Bluetooth device is already connected).  Wait while the smart device connects with the robot.  The connection status lights up when connection is successful.Open Project  Go to the Home tab.  Click the open button on the tool bar to open a project.  Select a motion file saved in the smart device.  Click the OK button to proceed.  Wait while the project opens.Motion Playback  Go to the Motion Unit tab  Click on the Motion Unit menu  Select a Motion Unit to playback.  Click OK  Click on the play button on the top  Check the 3D robot to see whether the selected motion unit performs well.  Click on the “Sync Mode” button.  Play the Motion Unit to see if the 3D robot and the real robot perform well.Motion Editing  Click on the Motion Unit list.  Click on the “New Motion“ button.  Enter the name of the new Motion Unit  Click the OK button to create a new and empty motion unit.  Select the newly created Motion file.  Clicking the OK button will close the list.  Click on the 3D robot’s joint to select the target for adjustment.  You may click on additional joints for multi-selecting the joints.  Click on the Torque OFF button to disable the torque on the motors.  Use your hand to move the joints with the disabled torque.  Push the torque ON button  The 3D model will now mimic the pose of the actual robot.  Drag the timeline cursor to the 25th frame.  Click the button to insert a key frame. (This process will save the robot’s pose on the 25th frame.)  Move to the 51st frame on the timeline.  Turn off the torque.  Make a pose by moving the motors with the torque off.  Click the button to turn the torque on.  The 3D model will now mimic the pose of the real robot.  Click the insert button to save the pose as the 51st key frame.  Repeating the same process, save new poses (key frames) on the 0.6 sec., 0.8 sec., and 1 sec. position.  Click the sync mode button.  Play the motion unit to see if the robot performs the motion well.Motion Download  Move to the motion download tab.  Click the “New Motion Group” button to create a new motion group.  Enter the name of the new motion group to be created.  Click the OK button.  Select the motions to be added on the motion group list.  Click the “Add Motion” button.  The memory is calculated based on the motions that are added from steps 1~2.  Click the OK button once completed.  Select the motion group that was just created.  Click the “Download Motion Group” button.  Stand by while the motion group is being downloaded.Save Motion Project  Move to the Home tab.  Click the “Save As” button.  Enter the name of the project file to save.  Click the OK button.  Check the log message.  The saved motion file’s name is displayed on the top left corner.FAQ  Which products are supported?          PREMIUM, STEM, SMART, ROBOTIS MINI, and other products with CM-200, CM-530, OpenCM9.04C, AX series, MX series, and XL-320.        Which 3D models are supported?          Out of the supported products, all robot examples that use Motion.        Can more 3D models or motors be added apart from the ones provided?          Users can add in more motors (the motor will be added just on the screen, not specifically onto the robot).Planned to support 3D created models from R+ Design to be imported into R+ Motion.        Can the MTN file be converted to an MTNX file?          Yes, the motion data can be converted, but the 3D model is not supported (will be supported later).        Can the MTNX file be converted to an MTN file?          No, and there is no plan to support it.        The Motion file won’t play properly after editing it.          After editing, you must download the motion group again.        The controller won’t connect properly.          Please try turning OFF the controller then ON again. If you’re using CM-200, try turning it OFF, hold the power button for 2~3 sec. to stop the task, then try again.      ",
        "url": " http://localhost:4000/docs/en/software/rplus_mobile/mmotion/"
      } ,
  
      "docs-en-software-rplus1-motion":  {
        "title": "R+ Motion 1.0",
      "content"	 : "IntroductionWhat is a Motion?A motion is a set of actuator position and speed data necessary for robot movements.In order for the robot to move, a motion file is required.  A suitable motion file must be downloaded for the assembled robot.A motion file is identified by the icon below, and its file extension is .mtn.What is the relationship between a motion and task code?A task code file is a program while a motion file is data.  For better understanding, let us think about MP3 players and MP3 files. If there were no MP3 players, you will not be able to listen to music because MP3 file could not be played.  The result is the same when there is an MP3 player but no MP3 file.  If you want to make your robot move, you need a task code file.  If the task code downloaded into your robot uses motions, you must download the motion file as well.  If no motions are used in the task code, you do not need the motion file.Note To use motions in a task code, the motion file must be downloaded.InstallDownload [RoboPlus]RoboPlus is a software to create a customized programme for every ROBOTIS product.RoboPlus System Requirements  OS : Windows XP Service Pack 2 or above / Vista/ 7 (32/64bit)/8 (32/64bit)  32bit(x86) or 64bit (x64) processor with over 800MHz  Graphic card with 3D acceleration  System memory over 512MB  Hard disk with the extra space of 500MBNote To execute RoboPlus, .NET FrameWork 3.5 or higher version is required. When installing RoboPlus, if the automatic installation of .NET FrameWork fails, .NET FrameWork must be installed separately.RoboPlus Install FailureMost reason for installation failure is caused by .NET Framework install error. Please manually intsall Windows Installer 3.1 and .NET Framework 3.5Windows installer and .NET Framework can be downloaded from [Microsoft Download Center].Download [Windows installer 3.1], [.NET Framework 3.5]Getting StartedRobot Motion“Robot Motion” refers to the motion data in the controller.These data can be seen and edited on the “Robot Motion” window.This window is displayed only when the robot is connected.(See how to Connect to Robot)File Motion“File Motion” refers to the motion data in the form of files in the PC.These data can be seen and edited on the “File Motion” window.Multiple “File Motion” windows can be displayed at once.Connect to Robot  Connect the robot to the PC (Please refer to [Controller Information] for details)      Select the communication port to use. Choose the communication port to which the robot is connected.  If you don’t know the port number, use the “Auto Searching” function.            Connect with the robot. Choose the “Connect Robot” menu.        If you are unable to connect to the robot, please check following:          Is the controller connected to the PC?      Is the controller turned on?      Was the correct port selected?      Is the controller compatible with RoboPlus Motion?                  CM-100 is not compatible.          CM-5 is compatible only after a firmware upgrade.                          Disconnect the Robot. To disconnect from the robot, choose the “Exit” menu or simply close the window.      Download MotionFile motions can be converted into robot motions.  Open the file motion to download.  Connect to the robot.      Click on the “Download Motion” menu and wait for the download to complete.            Verify that the contents of the file motion have been copied to the robot motion as seen below.        Download RoboPlus Program (for CM-510/530)Play MotionYou can play the created motions. Search the page to play and click “Play Motion”.  Errors may occur when trying to play motions.          This error can be seen while working on a “Robot Motion” window. In this case, the page linked as Next or Exit has been modified, but the controller does not have enough memory to temporarily save it.                  This can be solved by saving the page before execution.  If you proceed without saving, only the current page will be played.              This error can be seen while working on a “File Motion” window. In this case, the data in the PC is not the controller, and the controller does not have enough memory  to temporarily save the Next or Exit page.                  You can execute only the chosen page.  To play linked pages, you must download the motion to the robot.      Stop MotionStops the motion that is being carried out.“Stop Motion” does not stop execution right away.  Instead, the “Exit” page is executed before stopping.Emergency StopStops the motion that is being carried out.Unlike “Stop Motion,” “Emergency Stop” halts execution immediately.Motion EditingThings to be aware of before editing motions are introduced here.Setting the Dynamixel IDThe motion player in the controller can control a total of 26 Dynamixels (from ID 0 to 25). Therefore, to create a motion with RoboPlus Motion, the ID of each Dynamixel must be between 0 and 25.Control PriorityDynamixels may be controlled by both RoboPlus Motion and RoboPlus Task. Generally, the control priority is as follows:  RoboPlus Motion (ID of Dynamixel is between 0 and 25.)  RoboPlus TaskIn other words, once a motion is executed, the Dynamixel will be controlled by only RoboPlus Motion, and RoboPlus Task will have no control over the  Dynamixel. However, this control priority may be changed by users, if so desired.There are 2 ways to change the control priority:  In the motion data. -&amp;gt; Use ID Used/Not-Used function.  In the task code. -&amp;gt; Use the Joint Offset Parameter. The advantage of this method is that the control priority may be changed according to the situation.Dynamixel Auto Shutdown FunctionDynamixels have an Auto Shutdown function. This function prevents Dynamixels from being damaged. The Auto Shutdown function will be triggered in the following situations.  The motor has overheated due to an increase in internal temperature.  The motor has been under too much load for an extensive period of time.When the Auto Shutdown function is triggered, the following will be seen.  The Dynamixel’s LED will blink.  The motor will stop moving, resulting in no torque.To solve this problem, the following steps must be taken.  Resolve what triggered the Auto Shutdown function.If the motor has overheated, let it cool with some rest.If the motor is under too much load, remove some of the load.  Turn off the Dynamixel and turn it back on.When creating a motion, the joint may not move. This is because the Auto Shutdown function has been triggered by the causes listed above.Pose EditingA pose is the robot’s position at a point in time.  It is a collection of motor position values required for the posture.      Pose of Step refers to the data values of the pose.        Pose of Robot refers to the position values of the connected robot’s joints. When the Pose of Robot is modified, the robot will move accordingly.  Basic Pose EditingThe Basic Pose Editor is a simple editor that may be used for any type of robot. To change the number of ID’s used at “Pose of Step,” use the ID Editing Function.Select Actuator IDClick on a row to select an actuator.The following methods may be used to select multiple actuators.      To select actuators in consecutive order.              Drag with mouse.      Select actuators while holding down the “Shift” key.            To select actuators separately.              Select actuators while holding down the “Ctrl” key.            To select all actuators.                  Press the button in the upper left corner.                            Click on the “Select All” menu.                    Torque On/OffThe “Torque On/Off” function enables you to make a pose manually by turning the robot’s joints on or off.This function is only available in “Pose of Robot.”If the torque is on, its position value will be shown. Otherwise, the value will be displayed as ‘OFF’.The torque may be turned on or off through the following methods.      Press the “On” button to turn on the selected actuator.            Press the “Off” button to turn off the selected actuator.            Click the “Torque Toggle” menu to turn it off when it is on and to turn it on when it is off.      Change Actuator ValueThe position value of the selected actuator may be changed after choosing the joint in “Pose”.Play PoseTo execute a pose, move “Pose of Step” to “Pose of Robot.”Capture PoseTo “Capture”(Store) a pose, move “Pose of Robot” to “Pose of Step.”Copy/Paste PoseThese functions enable the actuator values to be changed easily.Not only can poses be copied and pasted within the program, but texts from other files, such as Microsoft Excel, may be copied.(When copying text from another program, values are delimited by spaces, new lines and tabs.)  Copy Pose: Click on “Copy” or press Ctrl+C.  Paste Pose: Click on “Paste” or press Ctrl+V.Mask PoseMasking a pose refers to the process of making a new pose by combining 2 poses by setting whether the value is used or not while executing or capturing a pose.For example, Pose C may be created by adding the upper body of Pose A with the lower body of Pose B.[Pose Utility]The pose utility is a tool to easily create a pose based on previously supplied information.  3D robot control : A pose can be created by moving the 3D robot’s joints.  Mirror: A symmetrical pose can be created or the pose can be reversed.  Inverse Kinematics: The accurate positions of each joint can be calculated.Information regarding the robot are required to create a pose using the pose utility. Therefore, a robot not on the list cannot be used. Some robots may not support the functions listed above. Because the pose utility uses 3D graphics, its performance depends on your graphic card.Select RobotBefore using the pose utility, you must first select the robot. Click the robot’s name on the list below to select an applicable robot.Note Pose utility cannot be used on a robot not on the list. In case of a user’s robot, the motions of the robot must be created by Basic Pose Editor.  Select the name of robot to create a pose for.            Robot Name      Description                  Bioloid Battle Droid      Battle Droid Robot from Bioloid Intermediate Example.              Bioloid Dinosaur      Dinosaur Robot from Bioloid Advanced Example.              Bioloid Fawn      Baby Fawn Robot from Bioloid Intermediate Example.              Bioloid Gerwalk      Gerwalk Robot from Bioloid Advanced Example.              Bioloid Humanoid      Humanoid from Bioloid Advanced Exampe.              Bioloid King      SpiderKing Spider Robot from Bioloid Advanced Example              Bioloid Puppy      Puppy Robot from Bioloid Advanced Example              Bioloid Spider      Spider Robot from Bioloid Intermediate Example              Bioloid Turtle      Turtle Robot from Bioloid Intermediate Example              Bioloid Walking      DroidWalking Droid Robot from Bioloid Beginner Example              Premium Humanoid      A-typeBioloid Premium Humanoid              Premium Humanoid      B-typeBioloid Premium Humanoid              Premium Humanoid      C-typeBioloid Premium Humanoid        When the “Initial Pose” button is pressed, the robot will assume its initial position.Control 3D RobotControl View3D robot can be seen from various angle using the view control function.  Zoom Fit : The view angle is reset to the initial status.  Select Objects : The joints can be selected by the mouse cursor.  Rotate the View : The view can be rotated using the mouse. The same thing as above occurs when you press the wheel button of mouse and move.  Move the View : The view can be moved horizontally using the mouse. The same thing as above occurs when you press the wheel button of mouse and move, while pressing “Ctrl” key.  Increase/Decrease the View : The view can be increased or decreased using the mouse. The same thing as above occurs when you spin the mouse wheel.Control JointsThe number appeared on the robot are the ID of Dynamixel. If you place your mouse on the ID, the color of choosable Dynamixel is changed.If you click the relevant joint, the joint value appears. The joint value is appeared as angle, not the motor value.If you move the mouse to left and right  while pressing the left botton of the mouse, the value increases or decreases.In case of 1,024-based control, the unit of the value is approximately 0.29(300 / 1,024), and in case of 4,096-base, it is approximately 0.06(250.92 / 4,096).MirrorThe mirror function provides two functions:  “exchange” and “symmetric.” Press “Apply” after choosing the function to apply it to your robot.      Exchange The robot’s left side and right side are reversed to create a mirror image of the previous pose.                Symmetry A symmetric pose based on the selected side is created.          Inverse KinematicsPosition and Coordinate SystemUnderstanding the kinematics of the robot’s movements starts with figuring out where each robot part is located.  We must first assign a coordinate point as the origin, and then mark the displacement of each part on the coordinate system.Coordinates axis and origin on the View are shown as below, and the unit of the grid is 20mm.Here, Origin means that the coordinates of  X, Y, Z is (0, 0, 0).Kinematics and Inverse KinematicsKinematics is used to determine the location or movement of the end point from the angle or movement of the joint.  In other words, kinematics allows us to determine where the end points once the joint values have been decided. For example, suppose there is a manipulator with two joints in the same plane as shown below.  Using the angles of the joints, the coordinate (x,y) of the end point can be determined through kinematics.  Kinematics results in only one solution.On the other hand, inverse kinematics may be used to determine the angle or movement of the joint from the location or movement of the end point.  For example, suppose again that there is a manipulator with two joints in the same plane coordinates.  If the end point (x,y) has been determined, there are 2 possible values for each joint as seen below.When using inverse kinematics, the coordinate (x,y) of the end point may be located at an unreachable distance from the origin or no solution may be obtained due to limitations on joint angles. If more joints are used, there may be infinitely many solutions.End Point ControlWhen the user selects how much and in which direction to move the end point, the “Inverse Kinematics” function in the pose utility will calculate the values of each joint and move the end point automatically.This function needs a module executes “Inverse Kinematics” calculation.  Currently, the robots support “Inverse Kinematics” calculation are as follows:  Bioloid Humanoid  Bioloid Premium Humanoid Type A  Bioloid Premium Humanoid Type B  Bioloid Premium Humanoid Type CThis subject is explained on the basis of Bioloid Premium Humanoid Type A.Select the end point  Walking Step : Located at the middle of both feet, used to move both feet.  Right Foot : Located at the center of the right foot, used to move only the right foot.      Left Foot : Located at the center of the left foot, used to move only the left foot.      Initialize the end pointThe location of the end point is initialized.Move the end pointThe end point in 3D space can be controlled by 6 parameters.  Depending on the structure of robots, all the 6 paramters may not be appeared.To change the values, select relevant parameters, and then use the following methods.  Press the [or ] to increase or decrease the value by 1.  Press the [ or ] while pressing Shift to increase or decrease the value by 10.      The controller can change the values appears if you double-click or press Enter.            X(mm): it is moved to the  X-axis diretion by the unit of mm.            Y(mm): it is moved to the Y-axis direction by the unit of mm.            Z(mm): it is moved to the Z-axis direction by the unit of mm.            φ(°): it is rotated based on the X-axis by the unit of angle.            θ(°): it is rotated based on the Y-axis by the unit of angle.            ψ(°): it is rotated based on the Z-axis by the unit of angle.      Since each paramater has its minimum and maximum values, it can be changed only in the range.Sometimes, mathematical results cannot be obtained by inverse kinematics calculation, so the situation is called “no solutions” or “Infinite solutions.” Due to the such fact, the parameter values are not changed despite they are located in the range.  In that case, the solution can be obtained if other parameter values are replaced.(For instance, in case that the legs are straightened until the end (z=0), X or Y parameter is not changed.)Apply the ResultWhen Pose of Step is selected, the pose values on the data are changed, and if Pose of Robot is selected, the pose values of robot are changed.Pose Execution/CapturePose of Step and Pose of RobotPose of Step means the steps on the `currently selected motion file.  That is, the pose changed in pose utility is reflected to the motion file immediately, while Pose of Step has been selected.Note Pose of Step is activated only when there are steps on the currently selected page. Pose of Robot is activated only when the robot is connected.Pose Execution/CaptureIt is the same function as Play/Capture Pose of the Basic Pose Editor.  Pose Execution: Pose of Step is reflected to Pose of Robot.  Pose Capture : Pose of Robot is reflected to currently selected Pose of Step.Step EditingA “Motion Step” means by key frames, that are  required to play consecutive motions.The speed of a motion is determined by the time of each step.The step editor enables steps to be edited easily.Each page consists of a maximum of 7 steps.To make a motion with more than 7 steps, you will need to connect pages.Add/Insert/Delete/Move StepAdd StepA new step is added at the bottom of the step list.Insert StepA new step is inserted above the selected step.Delete StepThe selected step is deleted from the list.Move StepThe selected step may be moved up or down.Pause/TimePause  “Pause” is the time between the end of the current step and the start of the next step.  The unit of the value is seconds, and the value can be changed in 0.008 increments.  The value is between 0 and 2.04 seconds.      The value can be changed using the upper scroll bar.      Time  “Time” is the time between the time from the start of the current step to the end of the current step.  The unit of the value is seconds, and the value can be changed in 0.008 increments.  The value is between 0.072 and 2.04 seconds.      The value can be changed using the lower scroll bar.      Copy/Cut/Paste StepCopy StepThe selected step is copied.Cut StepThe selected step is cut.Paste StepThe copied or cut step is pasted.  The value in the selected step is overwritten.Page Editing“Motion page” is the unit used to distinguish between saved motions.Imported motions are read in terms of pages.Motion data consists of 255 pages. (Some controllers are limited to only 127 pages.)Select PageClick on a row to select a page.The following methods may be used to select multiple pages.      To choose pages in consecutive order              Drag with mouse      Choose pages while holding down the “Shift” key.            To choose pages separately              Choose pages while holding down the “Ctrl” key.            To choose all pages                  Press the button in the upper left corner                    Connect PagePages can be connected to each other if necessary.Note When data is exchanged using the Copy/Cut/Paste functions, page connection information is not exchanged.Next PageA single page can have a maximum of 7 steps.  Therefore, some motions may not fit in one page.  To use multiple pages for one motion, designate the page to link to.Enter the number of the next page in the “Next” column.Exit PageWhen commands are made to stop a motion, the robot will usually be in a highly unstable state due to the motion being executed.  To stop a motion in a stable state, designate an exit page.Enter the number of the exit page in the “Exit” column.Copy/Cut/Paste PageCopy PageThe selected page is copied.Cut PageThe selected page is cut.Paste pageThe copied or cut page is pasted.  The contents of selected page is overwritten.Set Page Repeat/TimeRepeat TimeThis is the number of times the current page is repeated during motion execution.Speed Rate  This is the playback speed of the page during motion execution.  Unlike “Step Time,” this applies to the entire page.          If the speed rate is 1.0, the page will be executed at  normal speed.      If the speed rate is lower than 1.0, the execution speed will decrease.      If the speed rate is higher than 1.0, the execution speed will increase.          Inertial Force ControlForce is generated between steps. We call this force “inertial force,” because it is the result of the law of inertia.  In general, inertial forces are created by acceleration, which is the change in speed.  That is, as acceleration increases, inertial force also increases, and as acceleration decreases, inertial force also decreases.  To reduce acceleration, increase or decrease the speed gradually, and to increase acceleration, change the speed drastically .”Ctrl Inertial Force” is used to control this acceleration.  Increase this value to increase or decrease the speed gradually, reducing the acceleration.      The value is between 0 and 127. (Default is 32.)        The closer the value is to 0, the greater the inertial force.  The closer the value is to 127, the lower the inertial force.Joint SoftnessJoint softness is used to set the compliance of the Dynamixel.The pros and cons of different joint softness values are as follows:  When the joint softness is big          Pro: Movement is smooth.  Used for fluid movements, such as dancing.      Con : May not be good for legs that need much support.        When the joint softness is small          Pro: Movement is stable.  Used for movements that require support, such as walking.      Con: Movement may look too rigid when performing fluid motions.      There are 7 joint softness levels.  Level 1: Almost none  (Not recommended)  Level 2: Very Low  Level 3: Low  Level 4: Somewhat Low  Level 5: Average (Default)  Level 6: High      Level 7: Very High      More InformationUpload Robot MotionTransferring motion data from the controller to the PC is called “uploading.”      Connect the robot to the PC to see the Robot Motion window.                After selecting the Robot Motion window, click on “Save As”.      Motion OffsetOffset is the difference from a standard value. Motion offset refers to the difference from the standard motion, and the robot that performs the standard motion is called the “Master Robot”.Even when robots of the same type are performing the same motions, there will be differences in their poses. This is due to discrepancies in motor locations and errors in assembly.  These differences may even cause some robots to fall down.  “Motion Offset” is used to resolve these differences.Note Generally, motion offset is small enough to be ignored. However, for robots that are sensitive to balance, such as humanoids, motion offset can be a source of critical problems.Edit Motion OffsetDiscrepancies in the location of robot joints can be fixed using the “Edit Motion Offset” function.When the menu is selected, the torque of all joints will be turned on to sustain its current position.  Therefore, it would be beneficial to execute this function when the robot is in a pose where the differences can be easily distinguished.Select the joint to edit its value with the editor.  Positive values indicate movement in the CCW direction.      Negative values indicate movement in the CW direction.      InitializeInitiaizes all values to 0.SaveSaves the current offset values.  The values are saved in the controller.Save as FileSaves the robot’s current offset values as a file in the PC. The file extension of motion offset files is .ofs.DownloadMotion Offset files(*.ofs) in the PC can be downloaded to the robot.Edit All Page“Edit All Page” is used to duplicate revisions on all pages. This function is required in the following situations:  To change all motor values simultaneously Changes the value of every motor at once.  To change ID usage status (whether it is being used or not)Set Resolution  The monitor’s resolution can be set.  For the MX and EX series, please set the resolution value as 4096.  For other Dynamixels, 1024 is the recommended value.  EX series have position control of 250 degrees.  MX series have position control of 360 degrees.  When the resolution value is set as 4,096, the default values in the basic pose editor will be automatically changed from 512 to 2,048.Set ID Usage Status  RoboPlus Motion can handle the motions of robots with up to 26 motors. (Dynamixel ID between 0 and 25). Set whether an ID is being used to edit only the necessary ID’s.Exchange IDThe position values of the robot’s joints can be easily exchanged.Select the 2 ID’s to exchange, and then click “Exchange ID.”Change All ValuesUse this function to change the value of the selected ID.Apply Offset Values to AllOffset is the difference from a standard value.  Use this function to add or subtract a value from all joints with the selected ID.Keyboard ShortcutsWhen creating robot motions, it is difficult to use the mouse and keyboard at the same time, while holding the robot with one hand.  Here, we introduce useful tips to make motions using only the keyboard.Use arrow keys to move within the programArrow keys can be used to move the focus between the Page Edit Window, Step Edit Window, and Pose Edit Window.Change the Joint Values  Press the [ or ] keys to increase or decrease the joint value by 1.  Press the { or  } keys (Shift + [ or ]) to increase or decrease the joint value by 10.  Press Enter to move the focus to the setting window.  When you are done changing the value, press Enter again to return the focus.This function is available in the following windows:      Pose of Step            Pose of Robot            Edit Motion Offset            3D drawing of robot      Turn the torque on/offAfter selecting the joint, press the space bar to turn the torque on or off.Moving robot according to each stepPlease choose the step that you want and press the enter key. Your robot will take the pose of selected step. (This is available only at robot motion window )Making RobotsUsers can make and operate their own robots usig RoboPlus MotionWarning For this section, some previous knowledge on the following is required.  XML  3D Graphics  C# ProgrammingFolder StructureIf you look at the folder inside RoboPlus Motion, there are robot information file as shown below.(i.e, C:/Program Files/ROBOTIS/RoboPlus/Motion)  /Robots: There are files on robot’s information.  /Models: There are 3D model data for each part  /PlugIn: There are IK(Inverse Kinematics) calculation modules.In order for users to make their own robot, they need to make their own files and put them into folders accordinglyRobot Information FileRobot Infromation file has all the information required for the use of RoboPlus Motion.This file has extension of .rbt. Robot list in “Pose Utility” tab shows the .rbt file list of various robots showed in the e-manual.Robot Information file is written in the format of XML. Users can read the files using Windows TextPad.&amp;lt;General&amp;gt;In this part, general information on the robot users making must be recorded.&amp;lt;Name&amp;gt;Put in the name that will be shown on the robot list.You can give different “culture” values to show different languages (only for languages supported by RoboPlus Motion)            Value      Language                  kor      Korean              jpn      Japanese              N/A      English or any other languages      &amp;lt;Name&amp;gt;Premium Humanoid A-type&amp;lt;/Name&amp;gt; &amp;lt;Name culture=”kor”&amp;gt; Bioloid Premium Type A&amp;lt;/Name&amp;gt;   Example of Bioloid Premium Type A&amp;lt;Motor&amp;gt;Input information for the Dynamixels used in robots.  id: Dynamixel’s ID  model: model type  init: position value for when “Initial Pose” button is pressed&amp;lt;Motor id=&quot;1&quot; model=&quot;AX-12+&quot; init=&quot;205&quot;&amp;gt;&amp;lt;/Motor&amp;gt;&amp;lt;Motor id=&quot;2&quot; model=&quot;AX-12+&quot; init=&quot;818&quot;&amp;gt;&amp;lt;/Motor&amp;gt;&amp;lt;Motor id=&quot;3&quot; model=&quot;AX-12+&quot; init=&quot;251&quot;&amp;gt;&amp;lt;/Motor&amp;gt;&amp;lt;Motor id=&quot;4&quot; model=&quot;AX-12+&quot; init=&quot;772&quot;&amp;gt;&amp;lt;/Motor&amp;gt;&amp;lt;Motor id=&quot;5&quot; model=&quot;AX-12+&quot; init=&quot;512&quot;&amp;gt;&amp;lt;/Motor&amp;gt;&amp;lt;Motor id=&quot;6&quot; model=&quot;AX-12+&quot; init=&quot;512&quot;&amp;gt;&amp;lt;/Motor&amp;gt;&amp;lt;Motor id=&quot;7&quot; model=&quot;AX-12+&quot; init=&quot;358&quot;&amp;gt;&amp;lt;/Motor&amp;gt;&amp;lt;Motor id=&quot;8&quot; model=&quot;AX-12+&quot; init=&quot;666&quot;&amp;gt;&amp;lt;/Motor&amp;gt;&amp;lt;Motor id=&quot;9&quot; model=&quot;AX-12+&quot; init=&quot;512&quot;&amp;gt;&amp;lt;/Motor&amp;gt;&amp;lt;Motor id=&quot;10&quot; model=&quot;AX-12+&quot; init=&quot;512&quot;&amp;gt;&amp;lt;/Motor&amp;gt;&amp;lt;Motor id=&quot;11&quot; model=&quot;AX-12+&quot; init=&quot;475&quot;&amp;gt;&amp;lt;/Motor&amp;gt;&amp;lt;Motor id=&quot;12&quot; model=&quot;AX-12+&quot; init=&quot;549&quot;&amp;gt;&amp;lt;/Motor&amp;gt;&amp;lt;Motor id=&quot;13&quot; model=&quot;AX-12+&quot; init=&quot;437&quot;&amp;gt;&amp;lt;/Motor&amp;gt;&amp;lt;Motor id=&quot;14&quot; model=&quot;AX-12+&quot; init=&quot;587&quot;&amp;gt;&amp;lt;/Motor&amp;gt;&amp;lt;Motor id=&quot;15&quot; model=&quot;AX-12+&quot; init=&quot;549&quot;&amp;gt;&amp;lt;/Motor&amp;gt;&amp;lt;Motor id=&quot;16&quot; model=&quot;AX-12+&quot; init=&quot;475&quot;&amp;gt;&amp;lt;/Motor&amp;gt;&amp;lt;Motor id=&quot;17&quot; model=&quot;AX-12+&quot; init=&quot;512&quot;&amp;gt;&amp;lt;/Motor&amp;gt;&amp;lt;Motor id=&quot;18&quot; model=&quot;AX-12+&quot; init=&quot;512&quot;&amp;gt;&amp;lt;/Motor&amp;gt;  Example of Bioloid Premium Type A&amp;lt;Mirror&amp;gt;Infromation needed for Mirror function. Not necessary if the function is not in use.Only use for Dynamixels in symmetric positions. If there is no symmetrically positioned Dynamixles, do not input anything.  Right: Dynamixel IDs for devices on the right side  Left: Dynamixel IDs for devices on the left side&amp;lt;Mirror&amp;gt;   &amp;lt;Right&amp;gt;1,3,5,9,11,13,15,17&amp;lt;/Right&amp;gt;   &amp;lt;Left&amp;gt;2,4,6,10,12,14,16,18&amp;lt;/Left&amp;gt;&amp;lt;/Mirror&amp;gt;  Example of Bioloid Premium Type A&amp;lt;InverseKinematics&amp;gt;This connects the modules for Inverse Kinematics computing. Computing modules are in the form of DDL. To learn how to make modules, please refer to “Plug-In SDK Programming” in the next section. If not using Inverse Kinematis, this section can be ignored.&amp;lt;InverseKinematics&amp;gt;   &amp;lt;Module&amp;gt;      &amp;lt;Name&amp;gt;PremiumHumanoidA.dll&amp;lt;/Name&amp;gt;   &amp;lt;/Module&amp;gt;&amp;lt;/InverseKinematics&amp;gt;  Example of Bioloid Premium Type A&amp;lt;Object3D&amp;gt;In this section, robot assembly information is included for 3D display. The robot assembly information is in the Tree structure.If 3D display not needed, this section can be ignored.&amp;lt;Part&amp;gt;In this section, each part’s information is included. The relationship between parts are expressed through the Tree structure.  name: 3D Model name. There is no need to include extensions.(i.e., for f3.igs, just put f3)      T: 3x4 matrix that contains movement and rotation information for 3D display.Each element is separated by space.        id: Input ID number for Dynamixels.  type: Define what type of motor a part is.                  If the whole body moves, define the motor’s type as “body.” (Horn is fixed in this case)                            If the motor’s body is fixed and only its horn moves, define “body” to the part you want to fix and define “horn” to the part you want it to move.                    &amp;lt;Object3D&amp;gt;    &amp;lt;Part name=&quot;f51&quot; T=&quot;0 0 1 0 1 0 0 0 0 1 0 302.5&quot;&amp;gt;      &amp;lt;Part name =&quot;f3&quot; T=&quot;1 0 0 0 0 0 1 -70.5 0 -1 0 19&quot;&amp;gt;&amp;lt;/Part&amp;gt;      &amp;lt;Part name =&quot;f3&quot; T=&quot;1 0 0 0 0 0 -1 -70.5 0 1 0 -19&quot;&amp;gt;&amp;lt;/Part&amp;gt;      &amp;lt;Part name=&quot;f52&quot; T=&quot;1 0 0 0 0 1 0 0 0 0 1 0&quot;&amp;gt;  Example of Bioloid Premium Type A3D Model DataShown below are the 3D models of parts. These parts can be generated by various Computer Aided Design softwares. Users can add the parts created on their own in addition to the provided parts by ROBOTIS.RoboPlus Motion only supports IGES(*.igs) format. ROBOTIS recommends to make data files small since if the data is too big, it will slow down the 3D display.The following are the basic parts provided with RoboPlus.            Name      Diagram      File                  F1            f1.igs              F2            f2.igs              F3            f3.igs              F4            f4.igs              F5            f5.igs              F6            f6.igs              F7            f7.igs              F8            f8.igs              F9            f9.igs              F10            f10.igs              F11            f11.igs              F12            f12.igs              F15 + F16            f15.igs              F51            f51.igs              F52            f52.igs              F53            f53.igs              F56            f56.igs              F57            f57.igs              F58            f58.igs              F60            f60.igs              WA            wa,igs              BU            bu.igs              CM-5            cm-5.igs              ADAPTOR-CM5            adaptor_cm5.igs              BATTERY            battery.igs              AX-12            ax-12.igs              AX-12 Horn            ax-12_horn.igs              AX-S1            ax-s1.igs      Plug-In SDKUsers can use Plug-In SDK to add inverse kinematics computing module from “Pose Utility.”Instruction is given using an example of developing C# from Visual Studio 2005. (Sample example included)  Download ZIP PlugInSDK_Example.zipCreate ProjectGo to Visual Studio’s menu and select File -&amp;gt; Create New -&amp;gt; Project. Then select Visual C# -&amp;gt; Windows -&amp;gt; Classic Library to create a new project.Add ReferenceGo to Visual Studio’s menu and select Project -&amp;gt; Add Reference. When a window box pops up, click “Find” then select Motion -&amp;gt; PlugInSDK.dll in the folder Roboplus is installed.(i.e, C:Program FilesROBOTISRoboPlusMotionPlugInSDK.dll)Implement InterfaceWrite command lines shown below in the Class file that is to be implemented. (i.e, Class1.cs)using ROBOTIS.MotionEditor.SDK  // add namespacenamespace MyPlugIn{  public class MyPlugIn : IInverseKinematics // Interface succession  {  }}Put the mouse cursor on “IInverseKinematics” and right click it. Then select “Implement Interface -&amp;gt; Implement Interface” and sources will be automatically generated.CurrentPoseIt’s Pose data transferred from and received by RoboPlus Motion. Users must follow the rules shown below.  Users create the arrangement of 26 pose data.  The index of arrangement are the ID numbers of Dynamixels.  In order to deliever values to motors, put some number in between 0 ~ 1,023 or 4,096. If not, put -1.When RoboPlus Motion is in “get” direction, inverse kinematics computing result should be delievered and when it is in “set” direction, endpoints should be calculated and computed using forward kinematics and based on Pose data.EndPointsThis is the name to be printed on endpoint list.Users can either choose one form the endpoint list or run the interface shown below to see the result.  SelectedIndex: Index of endpoint  SelectedEndPoint: Name of endpointX, Y, Z, Roll, Pitch, YawIt’s the data of location of end points from the origin.Users can set minimum and/or maximum using user DLL.Roll signifies rotation in x-axis, Pitch is in y-axis, and Yaw z-axis.  MinX, MinY, MinZ, MinRoll, MinPitch, MinYaw: Minimum values for endpoints.  MaxX, MaxY, MaxZ, MaxRoll, MaxPitch, MaxYaw: Maximum values for endpoints.  If the minimum and maximum values are set at the same value for an endpoint, such endpoint is considered as not in use and thus, does not show up on the list.  X, Y, Z, Roll, Pitch, Yaw: position values of endpoints.ResetBy clicking the “reset” button on RoboPlus Motion,  users can default the position values of endpoints.Add Plug-InIf successful with building the project, copy the DLL file to the “PlugIn” folder inside the RoboPlus Motion folder. (For example, C:Program FilesROBOTISRoboPlusMotionPlugIn)In robot informational file (*.rbt), write DLL information that wil compute inverse kinematics.&amp;lt;InverseKinematics&amp;gt;   &amp;lt;Module&amp;gt;      &amp;lt;Name&amp;gt;PremiumHumanoidA.dll&amp;lt;/Name&amp;gt;   &amp;lt;/Module&amp;gt;&amp;lt;/InverseKinematics&amp;gt;  Example of Bioloid Premium Type ARun RoboPlus Motion and check if the (new) robot is operating properly.",
        "url": " http://localhost:4000/docs/en/software/rplus1/motion/"
      } ,
  
      "docs-en-software-rplus2-motion":  {
        "title": "R+ Motion 2.0",
      "content"	 : "IntroductionMotion is a necessary set of position and speed data for motors, which eventually becomes a valid movement for a robot.In order to make the robot move, the correct Motion project file must be edited and downloaded to the robot.The Motion project file has an .mtnx extension, and is shown on the PC as the icon below.  What is the relationship between a Motion file and Task file?The Task file is a program code which defines the logics on how the robot will think and move. The Motion file is the data which defines the movements based on the decisions made from the Task file.If the robot only performs simple movements, its Task file will not require any Motion file. But if precise movement is required, such as a dance choreography, it will be much more efficient to use the Motion file.(If the Motion file is used in the Task code, the Motion file must be downloaded to the robot as well)Menu      Editing tab per phase Motion editing is divided into the following 4 phases, which is performed in the sequential order. Each tab menu can be accessed through shortcut keys F1~F4 as well.            Quick Menu Open a project or save the current project without having to move to the Home tab.        Robot Connection Menu When the “Connect” button is clicked and the Connect Robot window is activated, you may select the port number to connect to your robot.            Log window The log window shows Info or Error that are notified during the motion editing process. As seen in the image below, the 1) Log Level, 2) Log Time, and 3) Message is shown.      3D Robot and Acutal RobotThe 3D robot acts as an avatar of the actual robot. Even when an actual robot is not present, the 3D robot can be used to edit or playback motions.When the actual robot is connected, and Sync Mode is turned on, the 3D robot can be used as an interface to control the actual robot.When creating a new motion project, users can select a 3D model to open, based on the product lineup provided in the software.The 3D robot initially selected can be edited after creating the motion project.If the user is using a user created robot apart from the provided 3D models, a customized robot can be created by adding descriptions on each motor (image below).Motion DataThe data structure of a motion file is described in the image below.      Key-Frame This is a similar concept as the Motion Step in the previous Motion software. It is a combination of 1) pose and 2) time on timeline, to express WHAT (pose) to show WHEN (time). For example, if a ‘Hurrah’ pose is saved as a Key-Frame on 1.5 sec on the timeline, the robot will start to move into the ‘Hurrah’ pose as the timeline approaches 1.5 sec.            Motion Unit This is a similar concept as the Motion Page in the previous Motion software. It is a group of Key-Frames placed on the timeline, to show a continuous movement. As seen on the image below the ‘Clap’ motion unit has the “hands spread” Key-Frame on 0.5 sec, and “hands closed” Key-Frame on 1 sec. The continuous movement (Motion Unit) will be a clapping motion.            Motion This is a similar concept as the Page Link in the previous Motion software. Motion is a group of Motion Units to express long movements, such a dancing motions. As seen in the image below, the “Taekwon Dance” Motion is a link (group) of the Motion Units “Left Jab”, “Left turn”, “Right Attack 1”, and “Right Uppercut”.            Motion Group File size is unlimited in Motion 2.0. So, when downloading to the robot, users must select the specific Motions they want to download to the robot, while checking the space available on the robot. The list comprised of the selected Motions is called the “Motion Group”. The bar on the right displays the amount of space the Motion Group will take up on the robot’s controller. On the image below, the “Demonstration Set” Motion Group has 4 Motions in the list, and takes up 13.4% of the controller’s space.            3D Robot The 3D robot is the output when motion data is put in. It is also active even when an actual robot is not connected,so users can easily check and playback the motion they are creating. Users are required to select a 3D robot when creating a motion file, and may also use the “Change 3D Robot” menu. The image below is an example showing the same motion data opened on different 3D robots.      Editing TimelineIn the previous version of Motion software, the Motion Page was used to express a robot’s motion. In Motion 2.0, the “Motion Unit” is used.The Motion Unit has one timeline, and poses are placed (saved) on the timeline.In the previous version, users were only able to save 7 Steps in one Page, and were required to create another Page when making 8 or more Steps.But in Motion 2.0, there is no restriction on the number of Steps (poses). Also, by using the Key-Frame function on the timeline, the Steps are now placed on a flow of timefor easier expression and editing of continuous motion.  Editing the Key-Frame – Key-Poses are placed on the timeline to create a continuous motionA Step placed on the timeline is shown by the bar, for an intuitive display of the interpolation pose between each Step.Editing Flow ControlIn the previous version, the link between motion pages, repetition, and playback speed were all dependent on each Page. Due to this it was difficult to reuse data that was created.But in Motion 2.0, the flow control (link, repeat, playback speed) is no more dependent on the Motion Unit. So, the Motion Units are now reusable with variations on repetition or speed. Also, by using 2D blocks, arrows, and flow chart, users can easily check on how the final motion will be.The image below is an example of a motion flow. The final motion will be performed as;  Play the Motion Unit “Greet 2” twice at 1.3x speed  Play the Motion Unit “Sit” once at 1.0 speed  Play the Motion Unit “Stand Up” once at 1.0 speed.Download Motion FileIn the previous version, the motion file size was limited based on the space available on the robot’s controller. So, saving a large file required multiple files to be saved.In Motion 2.0, the motion project itself has no limitations on the file size. Once a large project is completed, users can just select the Motions they want to download to the robot.These Motions can be grouped into Motion Groups for easier grouping, and finally, one Motion Group can be downloaded onto the robot.The bar on the right shows the space taken up (and available) on the robot when selecting the Motions to download.Each Motion in the Motion Group is named with a Index Number, which can be used in R+ Task to call the specific Motion.Caution when Downloading If the actual robot was used to playback a motion while editing motions, the saved motion on the robot’s controller is deleted. So, once motion editing is completed, please download the new motion onto the robot’s controller.PracticeOpen Project  Click “Open Project” on the Home tab.  Select an example file.  Click “Open”.Connect to Robot      Click the “Connect” button on the bottom.            Select the port the robot is connected to, and click the “Connect” button.            When connection is successful, the port number and baud rate will be shown.      Create New Motion UnitMotion Unit is the link of poses placed on the timeline, to create a motion. The links between the poses are interpolated, like a fade in/out function.      Select the Motion Unit tab, and click on the Motion Unit list on the toolbar.        Click the “New Motion Unit” button.      Name the new Motion Unit and click the “Apply” button.            Select the newly created Motion Unit and click the “Apply” button.      Edit Motion Unit(3D Robot)This section explains how to edit Motion Units when an actual robot is not available. Users will edit the 3D robot’s pose and save the pose on the timeline to create Motion Units.  Click anywhere on the timeline to select a time.      Hold the Ctrl button and select joints 4 and 6.            Use the “Positioning” menu on the bottom right to rotate the selected joints. Try creating a pose by moving the robot’s arm joints.            Click the “Insert Key-Frame” button on the top right to insert the created pose on the timeline.            Again, click on another spot on the timeline and click the “Insert Key-Frame” button to insert the same pose again.            Then, change the 3D robot’s pose the click the “Save Key-Frame” (same button as Insert Key-Frame) to overwrite the previous pose.            Click the “Play” button on the toolbar to playback the created Motion Unit. The poses created will be played back in the order they were placed on the timeline.      Edit Motion Unit(Actual Robot)This time, an actual robot will be used to edit a Motion Unit. Users will set the pose using the actual robot, and save the pose onto the timeline.  Click the “Connect” button on the bottom left to connect to the robot (refer to Connecting the Robot)  Create a new Motion Unit (refer to Creating a New Motion Unit)      Select all the joints, and click on the “Torque Off” button to turn the actual robot’s torque off (for selecting all the motors, you may select any motor then push Ctrl+A).            Move the actual robot to create the pose to save, click “Torque On”, then click “read Robot Pose” (the 3D robot will mimic the actual robot’s pose).                Click anywhere on the timeline and click the “Insert Key-Frame” button to add the pose onto the timeline.            Again, click on another spot on the timeline and click the “Insert Key-Frame” button to insert the same pose again.        Click “Torque Off” to turn the actual robot’s torque off.      Move the actual robot to create the pose to save, click “Torque On”, then click “read Robot Pose”.        Click the “Save Key-Frame” button to overwrite the second pose with the new pose.      Click the “Sync Mode” button on the bottom to activate it.(When activated, the 3D robot’s pose is automatically inputted to the actual robot)            Click on another spot on the timeline and try setting a third pose. Please always check that the pose doesn’t cause the actual robot to lose balance.        Click the “Play” button on the toolbar to playback the created Motion Unit. The poses created will be played back in the order they were placed on the timeline.Create New MotionMotion is a set of Motion Units linked together. Users can also change the number of repetitions for each Motion Unit or set the playback speed to efficiently create long dance motions.In order to use a motion in a Task code, a Motion (set of Motion Units) must be created.      Move to the Motion tab, and click on the list on the toolbar.        Click the “New Motion” button on the list.      Enter a name for the new Motion and click the “Apply” button.            Select the newly created Motion and click on the “Apply” button.      Edit MotionThis section will describe how to insert the Motion Units in an empty Motion, and how to edit the playback parameters.      Click on the “Insert Motion Unit” button on the top right.            Select the Motion Unit to insert and click on the “Play Parameters” tab.            In the Play Parameters tab, users can edit the Motion Unit’s playback speed, repetition number, and Index Number. For now, don’t change any setting and just click “Apply”.            Check the Motion Unit that is inserted and click the “Play” button to check the Motion.        Double-click on the inserted Motion Unit to change it into a different Motion Unit, or change the Play Parameters.  Double-click on the “Green Arrow” to insert another Motion Unit to be played back after the current Motion Unit.      Double-click on the “Pink Arrow” to insert a Motion Unit to be played where there is an interruption.            Double-Click on the “Green Arrow” and insert the “Initial Position” Motion Unit.            Let’s playback the completed Motion.      Create New Motion GroupThe Motion Group must be created to download motions onto the robot. The Motion Group is a group of selected Motions to be downloaded on the robot.      Move to the Motion Download tab and click on the “New Motion Group” button.            Enter the name for the new Motion Group and click “Apply”.            Out of the Motion Candidate List, select the Motions to be inserted into the new Motion Group, and click on the “Add Motion” button. The bar on the right will update in real-time to display the storage space status. Click “Apply” to create the Motion Group.      Download Motion      Out of the list of Motion Groups, select the Motion Group to download onto the robot. Please make sure to check that the Motion Group size doesn’t exceed the space available on the robot.            Click on the “Motion Group Download” button the download onto the robot. The download progress will be shown on the center of the screen.      Useful TipsCreate Custom Robot  Move to the Home tab and click on the “New Project” button.      Move to the “Custom Robots” tab, select the controller to use, and click on the “Add Joint” button.            Select the type of joint (motor) to use and set its ID. Click “Apply” to add the joint to the joint list.        Once the joint list is completed and the new project is created, the custom robot will be shown on the screen. Since it is difficult to analogize and display the actual custom robot on the 3D model, it will be helpful if the users frequently playback the motion on the actual robot (Sync Mode) to check on their status.Change 3D RobotThe Motion file is created and edited based on the initial 3D robot that was selected. Users can change the 3D robot while in the midst of a project, while maintaining the motion file data.The guide below is an example of changing the 3D robot from “Humanoid A-type” to “Humanoid C-type”.      Move to the Home tab, and click on the “3D Robot” button on the left.            Click on the “Change 3D Robot” button on the bottom, and select the robot to be change into.        Once the 3D robot is changed, the window will automatically change.      If there are unnecessary joints, such as the two motors depicted below, it is recommended to delete them. Move to the Home tab again and click on the “3D Robot” button. (If there are no joints to delete, please skip step 5)            Select the motors to delete, and click on the “Remove Joint” button to delete. Once you are done with deleting, click the “Apply” button.            The unnecessary joints are now deleted.      Pose MirroringThe 3D Robot’s joints have a horizontally symmetrical matching joint on the opposite side, based on the vertical center line drawn below.The Mirroring function uses this symmetry for mirroring or exchanging the pose on the opposite side.Pose Symmetry  For Pose Symmetry, users must first select the joints that will be the basis for the opposite side.      Click on the “Mirroring” button.            The selected joints’ values will now be entered (mirrored) onto the horizontally symmetrical joint on the opposite side.         Pose Exchange        For Pose Exchange, users must select the joints that will be the basis for exchanging, and also select the corresponding joints that will receive the values from the basis joints.            Click on the “Mirroring” button.            The selected joints will now have their values exchanged with each other.      Edit Motion Index NumberThe Motion Index Number is used when a motion data has to be called in RoboPlus Task.The Index Number of the Motion data downloaded on the controller must match the Index Number used for calling in Task.      Move to the “Motion Download” tab, select a Motion Group for editing its Index Number, and click on the “Edit Motion Group” button.            Select the Motion Number you would like to edit the Index (or Exit Index) number for, change the number, and click the “Enter” key.            If a duplicate number is already present, a message will be shown as below, and the user must select how to proceed. If the Exit Index is not inputted, a random number will be assigned.      Copy Motion Data  Open the Motion file with the data to copy.      Move to the “Home” tab, click the “3D Robot” button, and click on the “Change 3D Robot” button.            Check the 3D Robot of the Motion file, and close the “Change 3D Robot” window.            Run another Motion 2.0 program file, and create a new project with the 3D robot you checked in step 3.            Open the list of Motion Units, and select the Motion to copy with Ctrl+C.            In the other Motion 2.0 window, with the new project, open the Motion Unit list and push Ctrl+V to paste the copied Motion Unit.      Caution When copying data between Motion files  Data that can be copied : joint value, Key-Frame, Motion Unit, and Motion.  If a data with the same name already exists in the new (blank) project, the data will not copy.  Copying must be proceeded in the order of Motion Unit -&amp;gt; Motion. If a Motion is copied without copying any Motion Units, an empty Motion will be pasted.Edit Offset      Move to the “Home” tab and click on the “Offset” button.        Connect the robot (refer to Connecting the Robot)  Turn on the Sync Mode.      Set the initial pose, check the robot, and edit the offset pose.        The ideal offset is when the actual robot’s pose is identical to the initial pose.  Adjust the offset so the actual robot’s pose matches the 3D robot’s initial pose.      Click on the “Download Offsets” button to save the offset onto the robot’s controller.        The difference between the initial pose and the offset pose will be applied as the offset. (Offset pose – Initial pose = Offset)Convert mtn FileRoboPlus Motion 2.0 (R+ Motion 2.0) can also open the old RoboPlus Motion 1.0 file (*.mtn) as well. But, users will have to convert the file in *.mtnx first.Caution After the mtn file is converted in an mtnx file, the storage capacity or Motion Index Number may be altered. Once you have converted the file, please check the Index Numbers again.      Run RoboPlus Motion (1.0)            Connect the robot, and open the Save As window to save the mtn file.            Enter the file name and click “Save”.            Run R+ Motion 2.0. Click “Open Project”, and change the file type extension on the list to “mtn Files”.            Select the mtn file to change into an mtnx file, and click “Open”.            A window will pop-up asking the user if you want to convert the file. Click “Apply”.            Select the 3D robot that will be using the Motion data and click “Apply”.            Once converting is completed, click on the “Motion Unit List” on the top left to check if converting was correctly processed.            Save the converted mtnx file.      Control 3D Camera      Hold the right mouse button and drag to rotate the point of view.            Push the Home key or scroll up on the mouse to zoom in.            Push the Endkey or scroll down on the mouse to zoom out.            Push the Page Down key to move the POV vertically down. (the robot will now be displayed as if you’re looking up at it)            Push the Page Up key to move the point of view vertically up. (the robot will now be displayed as if you’re looking down at it)      Shortcut KeysFAQ  Which products are supported?          PREMIUM, STEM, SMART, DARWIN-MINICM-200, CM-510, CM-530, CM-700, OpenCM9.04C, AX series, MX series, robots made with XL-320All products supporting TTL / RS485 communication        Which 3D models are supported?          All example robots of the products supported (listed above)        How many joints are supported?          If using DYNAMIXELs, 26 joints can be used, from ID 0~25.If using CM-200, 8 joints can be used, from ID 3~10.        Can other 3D models be added?          Currently, customs robots can only be displayed by an array of motors shown on the screen. In the future, users will be able to import robots created from R+ Design (PC version only).        Can the MTN file be converted into MTNX file?          Please refer to the e-Manual page “Converting the old file (*.mtn)”        Can the MTNX be converted into MTN?          Not supported, and currently there is no plan to support it in the future.        The motion is not performing correctly after the editing the Motion file. How can I solve this?          You must download the Motion Group to the robot after editing the Motion file.        The controller is not connecting properly. How I can I solve this?          Please try turning the controller ON/OFF.(If you’re using CM-200, turn the controller off, hold the power button for 2~3 sec to stop the task, and try again.        What is the “Multiplier” in a Joint Group?          Multiplier is used when adjusting multiple joints simultaneously, but the users want to adjust each joint value with different weight.Increasing/decreasing the Multiplier value will change the weight of the adjustment.        Calculation : current angle = previous angle + (rotating direction x multiplier x number of clicks)",
        "url": " http://localhost:4000/docs/en/software/rplus2/motion/"
      } ,
  
      "docs-en-dxl-mx-mx-106-2":  {
        "title": "MX-106(2.0)",
      "content"	 : "MX-106(Protocol 2.0)Specifications            Item      Specifications                  MCU      ST CORTEX-M3 ( STM32F103C8 @ 72MHZ,32BIT)              Position Sensor      Contactless absolute encoder (12BIT,360 DEGREE)Maker : ams (www.ams.com), Part No : AS5045              Motor      Maxon              Baud Rate      8000 bps ~ 4.5 Mbps              Control Algorithm      PID Control              Resolution      0.088°              Operation Modes      Current Control ModeVelocity Control ModePosition Control Mode(0° ~ 360°)Extended Position Ctrl Mode(Multi-turn)Current-based Position Ctrl ModePWM Control Mode              Weight      153g              Dimensions (W x H x D)      40.2mm x 65.1mm x 46mm              Gear Ratio      225 : 1              Stall Torque      8.0Nm @ 11.1V, 4.8A8.4Nm @ 12V, 5.2A10.0Nm @ 14.8V, 6.3A              No Load Speed      41rpm @ 11.1V45rpm @ 12V55rpm @ 14.8V              Operating Temperature      -5°C ~ +80°C              Input Voltage      10 ~ 14.8V (Recommended : 12V)              Standby Current      100mA              Command Signal      Digital Packet              Protocol Type      MX-106T: Half Duplex Asynchronous Serial CommunicationMX-106R: RS485 Asynchronous Serial Communication(8bit,1stop, No Parity)              Physical Connection      MX-106T: TTL Level Multidrop BUSMX-106R: RS485 Multidrop BUS              ID      0 ~ 252              Feedback      Position, Temperature, Load, Input Voltage, etc              Material      Full Metal GearMetal(Front), Engineering Plastic(Middle, Back)      Performance GraphStall torque Peak stall torque read from transient statePerformance Graph(N-T Curve) A graph shows torque measured in stable condition while increasing load. Normally, stall torque is bigger than maximum torque on performance graph.Caution When connecting to power supply:  For the stable power supply, we recommend using ROBOTIS controller or SMPS2Dynamixel.  Connect your DYNAMIXEL to power supply while it’s off and turn on/off with the power switch.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 2.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(64) is cleared to ‘0’.SizeThe Size of data varies from 1 to 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. For data larger than 2 bytes will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      321              2      4      Model Information      Model Information      R      -              6      1      Firmware Version      Firmware Version      R      -              7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Baud Rate      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              10      1      Drive Mode      Drive Mode      RW      0              11      1      Operating Mode      Operating Mode      RW      3              12      1      Secondary(Shadow) ID      Secondary ID      RW      255              13      1      Protocol Version      Protocol Version      RW      2              20      4      Homing Offset      Home Position Offset      RW      0              24      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      10              31      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              32      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      160              34      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      95              36      2      PWM Limit      Maximum PWM Limit      RW      885              38      2      Current Limit      Maximum Current Limit      RW      2047              40      4      Acceleration Limit      Maximum Acceleration Limit      RW      32767              44      4      Velocity Limit      Maximum Velocity Limit      RW      360              48      4      Max Position Limit      Maximum Position Limit      RW      4095              52      4      Min Position Limit      Minimum Position Limit      RW      0              63      1      Shutdown      Shutdown Error Information      RW      52      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  64      1      Torque Enable      Motor Torque On/Off      RW      0              65      1      LED      Status LED On/Off      RW      0              68      1      Status Return Level      Select Types of Status Return      RW      2              69      1      Registered Instruction      REG_WRITE Instruction Flag      R      0              70      1      Hardware Error Status      Hardware Error Status      R      0              76      2      Velocity I Gain      I Gain of Velocity      RW      1920              78      2      Velocity P Gain      P Gain of Velocity      RW      100              80      2      Position D Gain      D Gain of Position      RW      0              82      2      Position I Gain      I Gain of Position      RW      0              84      2      Position P Gain      P Gain of Position      RW      850              88      2      Feedforward 2nd Gain      2nd Gain of Feed-Forward      RW      0              90      2      Feedforward 1st Gain      1st Gain of Feed-Forward      RW      0              98      1      BUS Watchdog      Dynamixel BUS Watchdog      RW      0              100      2      Goal PWM      Target PWM Value      RW      -              102      2      Goal Current      Target Current Value      RW      -              104      4      Goal Velocity      Target Velocity Value      RW      -              108      4      Profile Acceleration      Acceleration Value of Profile      RW      0              112      4      Profile Velocity      Velocity Value of Profile      RW      0              116      4      Goal Position      Target Position      RW      -              120      2      Realtime Tick      Count Time in Millisecond      R      -              122      1      Moving      Movement Flag      R      0              123      1      Moving Status      Detailed Information of Movement Status      R      0              124      2      Present PWM      Present PWM Value      R      -              126      2      Present Current      Present Current Value      R      -              128      4      Present Velocity      Present Velocity Value      R      -              132      4      Present Position      Present Position Value      R      -              136      4      Velocity Trajectory      Target Velocity Trajectory from Profile      R      -              140      4      Position Trajectory      Target Position Trajectory from Profile      R      -              144      2      Present Input Voltage      Present Input Voltage      R      -              146      1      [Present Temperature]      Present Internal Temperature      R      -              168      2      Indirect Address 1      Indirect Address 1      RW      224              170      2      Indirect Address 2      Indirect Address 2      RW      225              172      2      Indirect Address 3      Indirect Address 3      RW      226              …      …      …      …      …      …              218      2      Indirect Address 26      Indirect Address 26      RW      249              220      2      Indirect Address 27      Indirect Address 27      RW      250              222      2      Indirect Address 28      Indirect Address 28      RW      251              224      1      Indirect Data 1      Indirect Data 1      RW      0              225      1      Indirect Data 2      Indirect Data 2      RW      0              226      1      Indirect Data 3      Indirect Data 3      RW      0              …      …      …      …      …      …              249      1      Indirect Data 26      Indirect Data 26      RW      0              250      1      Indirect Data 27      Indirect Data 27      RW      0              251      1      Indirect Data 28      Indirect Data 28      RW      0              578      2      Indirect Address 29      Indirect Address 29      RW      634              580      2      Indirect Address 30      Indirect Address 30      RW      635              582      2      Indirect Address 31      Indirect Address 31      RW      636              …      …      …      …      …      …              628      2      Indirect Address 54      Indirect Address 54      RW      659              630      2      Indirect Address 55      Indirect Address 55      RW      660              632      2      Indirect Address 56      Indirect Address 56      RW      661              634      1      Indirect Data 29      Indirect Data 29      RW      0              635      1      Indirect Data 30      Indirect Data 30      RW      0              636      1      Indirect Data 31      Indirect Data 31      RW      0              …      …      …      …      …      …              659      1      Indirect Data 54      Indirect Data 54      RW      0              660      1      Indirect Data 55      Indirect Data 55      RW      0              661      1      Indirect Data 56      Indirect Data 56      RW      0      Caution Protocol 1.0 does not support addresses greater than 256. Therefore, Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable(64) is cleared to ‘0’.Model Number(0)This address stores model number of the DYNAMIXEL.Firmware Version(6)This address stores firmware version of the DYNAMIXEL.ID(7)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate(4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate      Margin of Error                  7      4.5M      0.000%              6      4M      0.000%              5      3M      0.000%              4      2M      0.000%              3      1M      0.000%              2      115,200      0.000%              1(Default)      57,600      0.000%              0      9,600      0.000%      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time(5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      Drive Mode(10)Drive Mode is availabe from the firmware version 38.            Bit      Item      Description                  Bit 2 ~ 7      N/A      Unused, always ‘0’              Bit 1      Master/Slave Setting(Dual Joint)      Master Mode(0): Operate as a Master DynamixelSlave Mode(1): Operate as a Slave Dynamixel              Bit 0      Direction of Rotation      Normal Mode(0): CCW(Positive), CW(Negative)Reverse Mode(1): CCW(Negative), CW(Positive)      Note If Reverse mode(‘1’) of Direction of rotation is set, the Dynamixel’s rotation direction changes. Therefore, the direction of Position, Velocity, Current and PWM are changed. It can be used conveniently when constructing a symmetrical joint structure or wheel drive system.Master/Slave configuration (Dual joint) is a method to simultaneously control two Dynamixels like one Dynamixel. Master Dynamixel and Slave Dynamixel must be connected with a sync cable. Slave Dynamixel is directly controlled by the Master Dynamixel’s PWM signal transmitted through the sync cable. Therefore, the Slave Dynamixel’s Goal Position, Goal Velocity, Goal Current and Goal PWM are ignored.            Sync Cable      Description                  Normal Mode Sync Cable      Slave Dynamixel is controlled by the Master Dynamixel’s PWM signal. Slave Dynamixel rotates to the same direction of the Master Dynamixel.              Reverse Mode Sync Cable      Slave Dynamixel is controlled by the inverted PWM signal of the Master Dynamixel. Slave Dynamixel rotates to the opposite direction of the Master Dynamixel.      Note In a dual master-slave configuration position information from the slave is ignored and the position of the dual configuration is based on the master in PWM control. When master and slave are not physically connected there could be a slight difference on the driven load. Use the frame shown in the below image to achieve dual configuration.Operating Mode(11)            Value      Operating Mode      Description                  0      Current Control Mode      DYNAMIXEL only controls current(torque) regardless of speed and position. This mode is ideal for a gripper or a system that only uses current(torque) control or a system that has additional velocity/position controllers.              1      Velocity Control Mode      This mode controls velocity. This mode is identical to the Wheel Mode(endless) from existing DYNAMIXELs. This mode is ideal for wheel-type robots.              3(Default)      Position Control Mode      This mode controls position. This mode is identical to the Joint Mode from existing DYNAMIXELs. Operating position range is limited by Max Position Limit(48) and Min Position Limit(52). This mode is ideal for articulated robots that each joint rotates less than 360 degrees.              4      Extended Position Control Mode(Multi-turn)      This mode controls position. This mode is identical to the Multi-Turn Mode from existing DYNAMIXELs. 512 turns are supported(-256[rev] ~ 256[rev]). This mode is ideal for multi-turn wrists or conveyer systems or a system that requires an additional reduction gear.              5      Current-based Position Control Mode      This mode controls both position and current(torque). Up to 512 turns are supported(-256[rev] ~ 256[rev]). This mode is ideal for a system that requires both position and current control such as articulated robots or grippers.              16      PWM Control Mode  (Voltage Control Mode)      This mode directly controls PWM output. (Voltage Control Mode)        Note Switching Operating Mode will reset gains(PID, Feedfoward) properly to the selected Operating Mode. The profile generator and limits will also be reset.  Profile Velocity(112), Profile Acceleration(108) : Reset to ‘0’  Goal PWM(100), Goal Current(102) : Reset to PWM Limit(36), Current Limit(38) respectively  Current-based Position Control Mode : Reset to Position Gain(PID) and PWM Limit(36) values.Changed Position Gain(PID) and PWM Limit(36) values can be read from the Control Table.Note PWM is the abbreviation for Pulse Width Modulation that modulates PWM Duty to control motors. The PWM Control Mode changes pulse width to control average supply voltage to the motor and this technique is widely used in the motor control field. Therefore, PWM Control Mode uses Goal PWM(100) value to control supply voltage for DYNAMIXEL. PWM Control Mode is similar to the Wheel Mode of DYNAMIXEL AX and RX series.Secondary(Shadow) ID(12)Set the Dynamixel’s Secondary ID. Secondary ID(12) is a value to identify each Dynamixel, just like the ID(7).However, unlike ID(7), Secondary ID(12) is not a unique value.Therefore, Dynamixels with the same Secondary ID value form a group.The differences between Secondary ID(12) and ID(7) are as follows :  Secondary ID(12) is not a unique value. i.e., a lot of Dynamixels may have the same Secondary ID value.  ID(7) has a higher priority than Secondary ID(12). i.e., if Secondary ID(12) and ID(7) are the same, ID(7) will be applied first.  The EEPROM area of the Control Table cannot be modified with Secondary ID(12). Only the RAM area can be modified.  If Instruction Packet ID is the same as Secondary ID(12), the Status Packet will not be returned.  If the value of Secondary ID(12) is 253 or higher, the Secondary ID function is deactivated.            Values      Description                  0 ~ 252      Activate Secondary ID function              253 ~ 255      Deactivate Secondary ID function, Default value ‘255’      The following are examples of operation when there are five Dynamixels with ID (7) set from 1 to 5.  Set all five Dynamixels’ Secondary ID(12) to ‘5’.  Send Write Instruction Packet(ID = 1, LED(65) = 1).  Turn on LED of Dynamixel with ID ‘1’ and return the Status Packet.  Send Write Instruction Packet(ID = 5, LED(65) = 1).  Turn on LED on five Dynamixels. However, Status Packet of Dynamixel with ID ‘5’ will be returned.  Set the Secondary ID(12) of all five Dynamixels to ‘100’.  Send Write Instruction Packet(ID = 100, LED(65) = 0).  Turn off LED on five Dynamixels. However, as there is no Dynamixel with ID ‘100’, Status Packet is not returned.Protocol Version(13)Users can select Dynamixel protocol version (1.0 and 2.0).It is recommended to use an identical protocol version for multiple Dynamixels.            Value      Protocol Version      Compatible Dynamixels                  1      1.0      AX Series, DX Series, RX Series, EX Series, MX Series with Firmware below v39              2(default)      2.0      MX-28/64/106 with Firmware v39 or above, X Series, Pro Series      Note The protocol 2.0 is greatly enhanced from the protocol 1.0. Accessing some of the Control Table area might be denied if protocol 1.0 is selected. This manual complies with protocol 2.0. Please refer to the Protocol section of e-Manual for more details about the protocol.Homing Offset(20)Users can adjust the Home position by setting Home Offset(20). The Homing Offset value is added to the Present Position(132).Present Position(132) = Actual Position + Homing Offset(20).            Unit      Value Range      Description                  about 0.088°      -1,044,479 ~ 1,044,479(-255 ~ 255[rev])      4,096 resolution      Note In case of the Position Control Mode(Joint Mode) that rotates less than 360 degrees, any invalid Homing Offset(20) values will be ignored(valid range : -1,024 ~ 1,024).Moving Threshold(24)This value helps to determine whether the Dynamixel is in motion or not.When the absolute value of Present Velocity(128) is greater than the Moving Threshold(24), Moving(122) is set to ‘1’, otherwise it is cleared to ‘0’.                   Values      Description                  Unit      about 0.229 rpm      All velocity related Data uses the same unit              Range      0 ~ 1,023      -      Maximum Temperature Limit(31)This value limits operating temperature. When the Present Temperature(146) that indicates internal temperature of Dynamixel is greater than the Temperature Limit(31), the Over Heating Error Bit(0x04) and Hardware Error Bit(0x80) in the Hardware Error Status(70) will be set. If Overheating Error Bit(0x04) is configured in the Shutdown(63), Torque Enable(64) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(63) section.            Unit      Value Range      Description                  About 1°      0 ~ 100      0 ~ 100°      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage Limit(34, 32)It is the operation range of voltage.            Unit      Value Range      Description                  About 0.1V      50 ~ 250      5.0 ~ 25.0V      For example, if the value is 80, the voltage is 8V.If Present Voltage(42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.PWM Limit(36)This value indicates maximum PWM output. Goal PWM(100) can’t be configured with any values exceeding PWM Limit(36). PWM Limit(36) is commonly used in all operating mode as an output limit, therefore decreasing PWM output will result in decreasing torque and velocity. For more details, please refer to the Gain section of each operating modes.            Values      Description                  0(0%) ~ 885(100%)      885 = 100[%] output      Current Limit (38)This value indicates maximum current(torque) output limit. Goal Current(102) can’t be configured with any values exceeding Current Limit(38). The Current Limit(38) is used in Torque Control Mode and Current-based Position Control Mode, therefore decreasing Current Limit(38) will result in decreasing torque of DYNAMIXEL. For more details, please refer to the Position PID Gain(80 ~ 84).            Unit      Value Range                  about  3.36[mA]      0 ~ 2,047      Note Current Limit(38) could be differ by each DYNAMIXEL so please check the Control Table.Acceleration Limit(40)This value indicates maximum Profile Acceleration(108). Profile Acceleration(108) can’t be configured with any values exceeding Acceleration Limit(40). Profile Acceleration(108) is used in all operating mode except PWM Control Mode in order to generate a target trajectory. For more details, please refer to the Profile Velocity(112).            Unit      Value Range                  214.577 Rev/min2      0 ~ 32,767      Note Bit information of the Error field in the Status Packet is different from protocol 1.0 and protocol 2.0. This manual complies with protocol 2.0. Please refer to the Protocol section of e-Manual for more details about the protocol.Velocity Limit(44)This value indicates maximum velocity of Goal Velocity(104) and Profile Velocity(112). For more details, please refer to the Profile Velocity(112).            Unit      Value Range                  0.229rpm      0 ~ 1,023      Min/Max Position Limits(52, 48)These values limit maximum and minimum target positions for Position Control Mode(Joint Mode) within the range of 1 rotation(0 ~ 4,095). Therefore, Goal Position(116) should be configured within the position limit range. These values are not used in Extended Position Control Mode and Current-based Position Control Mode.            Unit      Value Range                  0.088°      0 ~ 4,095(1 rotation)      Note Max Position Limit(48) and Min Position Limit(52) are only used in Position Control Mode with a single turn.Shutdown(63)The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation. Each Bit is inclusively processed with the ‘OR’ logic, therefore, multiple options can be generated. For instance, when ‘0x05’ (binary : 00000101) is defined as Shutdown(63), Dynamixel can detect both Input Voltage Error(binary : 00000001) and Overheating Error(binary : 00000100). If those errors are detected, Torque Enable(64) is cleared to ‘0’ and the motor output becomes 0[%]. REBOOT is the only method to reset Torque Enable(64) to ‘1’(Torque ON) after the shutdown. The followings are detectable situations.            Bit      Item      Description                  Bit 7      -      Unused, Always ‘0’              Bit 6      -      Unused, Always ‘0’              Bit 5      Overload Error(default)      Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error(default)      Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error(default)      Detect internal temperature exceeds the configured operating temperature              Bit 1      -      Unused, Always ‘0’              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs, use below method to reboot Dynamixels.  H/W REBOOT : Turn off the power and turn on again  S/W REBOOT : Transmit REBOOT Instruction (For more details, please refer to the Reboot section of Protocol e-Manual.)Torque Enable(64)Controls Torque ON/OFF. Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected.            Value      Description                  0(Default)      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      Note Present Position(132) can be reset when Operating Mode(11) and Torque Enable(64) are updated. For more details, please refer to the Homing Offset(20) and Present Position(132).LED(65)Turn on or turn off the LED on Dynamixel.            Bit      Description                  0(Default)      Turn OFF the LED              1      Turn ON the LED      Status Return Level(68)This value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Registered Instruction(69)            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Hardware Error Status(70)This value indicates hardware error status.The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation. Each Bit is inclusively processed with the ‘OR’ logic, therefore, multiple options can be generated. For instance, when ‘0x05’ (binary : 00000101) is defined as Shutdown(63), Dynamixel can detect both Input Voltage Error(binary : 00000001) and Overheating Error(binary : 00000100). If those errors are detected, Torque Enable(64) is cleared to ‘0’ and the motor output becomes 0[%]. REBOOT is the only method to reset Torque Enable(64) to ‘1’(Torque ON) after the shutdown. The followings are detectable situations.            Bit      Item      Description                  Bit 7      -      Unused, Always ‘0’              Bit 6      -      Unused, Always ‘0’              Bit 5      Overload Error(default)      Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error(default)      Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error(default)      Detect internal temperature exceeds the configured operating temperature              Bit 1      -      Unused, Always ‘0’              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs, use below method to reboot Dynamixels.  H/W REBOOT : Turn off the power and turn on again  S/W REBOOT : Transmit REBOOT Instruction (For more details, please refer to the Reboot section of Protocol e-Manual.)Velocity PI Gain(78, 76)These values indicate Gains of Velocity Control Mode. Gains of DYNAMIXEL’s internal controller can be calculated from Gains of the Control Table as shown below. The constant in each equations include sampling time. Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and that of the Control Table is abbreviated to KVP(TBL).                   Controller Gain      Conversion Equations      Range      Description                  Velocity I Gain(76)      KVI      KVI = KVI(TBL) / 65536      0 ~ 16383      I Gain              Velocity P Gain(78)      KVP      KVP = KVP(TBL) / 128      0 ~ 16383      P Gain      Below figure is a block diagram describing the velocity controller in Velocity Control Mode. When the instruction transmitted from the user is received by DYNAMIXEL, it takes following steps until driving the horn.  An Instruction from the user is transmitted via DYNAMIXEL bus, then registered to Goal Velocity(104).  Goal Velocity(104) is converted to target velocity trajectory by Profile Acceleration(108).  The target velocity trajectory is stored at Velocity Trajectory(136).  PI controller calculates PWM output for the motor based on the target velocity trajectory.  Goal PWM(100) sets a limit on the calculated PWM output and decides the final PWM value.  The final PWM value is applied to the motor through an Inverter, and the horn of DYNAMIXEL is driven.  Results are stored at Present Position(132), Present Velocity(128), Present PWM(124) and Present Current(126).Note Ka stands for Anti-windup Gain and ‘β’ is a conversion coefficient of position and velocity that cannot be modified by users. For more details about the PID controller, please refer to the PID Controller at wikipedia.Position PID Gain(84, 82, 80), Feedforward 1st/2nd Gains(90, 88)These Gains are used in Position Control Mode and Extended Position Control Mode. Gains of Dynamixel’s internal controller can be calculated from Gains of the Control Table as shown below. The constant in each equations include sampling time. Position P Gain of Dynamixel’s internal controller is abbreviated to KPP and that of the Control Table is abbreviated to KPP(TBL).                   Controller Gain      Conversion Equations      Range      Description                  Position D Gain(80)      KPD      KPD = KPD(TBL) / 16      0 ~ 16,383      D Gain              Position I Gain(82)      KPI      KPI = KPI(TBL) / 65,536      0 ~ 16,383      I Gain              Position P Gain(84)      KPP      KPP = KPP(TBL) / 128      0 ~ 16,383      P Gain              Feedforward 2nd Gain(88)      KFF2nd      KFF2nd(TBL) / 4      0 ~ 16,383      Feedforward Acceleration Gain              Feedforward 1st Gain(90)      KFF1st      KFF1st(TBL) / 4      0 ~ 16,383      Feedforward Velocity Gain      Below figure is a block diagram describing the position controller in Position Control Mode and Extended Position Control Mode. When the instruction from the user is received by Dynamixel, it takes following steps until driving the horn.  An Instruction from the user is transmitted via Dynamixel bus, then registered to Goal Position(116).  Goal Position(116) is converted to target position trajectory and target velocity trajectory by Profile Velocity(112) and Profile Acceleration(108).  The target position trajectory and target velocity trajectory is stored at Position Trajectory(140) and Velocity Trajectory(136) respectively.  Feedforward and PID controller calculate PWM output for the motor based on target trajectories.  Goal PWM(100) sets a limit on the calculated PWM output and decides the final PWM value.  The final PWM value is applied to the motor through an Inverter, and the horn of Dynamixel is driven.  Results are stored at Present Position(132), Present Velocity(128), Present PWM(124) and Present Current(126).Note In case of PWM Control Mode, both PID controller and Feedforward controller are deactivated while Goal PWM(100) value is directly controlling the motor through an Inverter. In this manner, users can directly control the supplying voltage to the motor.Note Ka is an Anti-windup Gain that cannot be modified by users. For more details about the PID controller and Feedforward controller, please refer to the PID Controller and Feed Forward.Below figure is a block diagram describing the current-based position controller in Current-based Position Control Mode. As Current-based Position Control Mode is quite similar to Position Control Mode, differences will be focused in the following steps. The differences are highlighted with a green marker in the block diagram as well.  Feedforward and PID controller calculates target current based on target trajectory.  Goal Current(102) decides the final target current by setting a limit on the calculated target current.  Current controller calculates PWM output for the motor based on the final target current.  Goal PWM(100) sets a limit on the calculated PWM output and decides the final PWM value.  The final PWM value is applied to the motor through an Inverter, and the horn of DYNAMIXEL is driven.  Results are stored at Present Position(132), Present Velocity(128), Present PWM(124) and Present Current(126).BUS Watchdog(98)Bus Watchdog (98) is a safety device (Fail-safe) that stops the DYNAMIXEL if the communication between the controller and DYNAMIXEL communication (RS485, TTL) is disconnected due to an unspecified error.Communication is defined as all the Instruction Packet in the DYNAMIXEL Protocol.                   Values      Description                  Unit      20[ms]      -              Range      0      Deactivate Bus Watchdog Function, Clear Bus Watchdog Error              Range      1 ~ 127      Activate Bus Watchdog              Range      -1      Bus Watchdog Error Status      The Bus Watchdog function monitors the communication interval (time) between the controller and DYNAMIXEL when Torque Enable (64) is ‘1’.If the measured communication interval (time) is larger than Bus Watchdog (98), the DYNAMIXEL will stop. Bus Watchdog (98) will be changed to ‘-1’ (Bus Watchdog Error).If the Bus Watchdog Error screen appears, the Goal Value (Goal PWM(100), Goal Current(102), Goal Velocity(104), Goal Position(116)) will be changed to read-only-access.Therefore, when a new value is written to the Goal Value, a Range Error will be returned via the Status packet.If the value of Bus Watchdog (98) is changed to ‘0’, Bus Watchdog Error will be cleared.Note For details of Range Error, please refer to the protocol of the e-Manual.The following are examples of the operation of the Bus Watchdog function.  After setting the operating mode (11) to speed control mode, change the Torque Enable (64) to ‘1’.  If ‘50’ is written in the Goal Velocity (104), the DYNAMIXEL will rotate in CCW direction.  Change the value of Bus Watchdog (98) to ‘100’ (2,000 [ms]). (Activate Bus Watchdog Function)  If no instruction packet is received for 2,000 [ms], the DYNAMIXEL will stop. When it stops, the Profile Acceleration (108) and Profile Velocity (112) are applied as ‘0’.  The value of Bus Watchdog (98) changes to ‘-1’ (Bus Watchdog Error). At this time, the access to the Goal Value will be changed to read-only.  If ‘150’ is written to the Goal Velocity (104), Range Error will be returned via Status Packet.  If the value of Bus Watchdog (98) is changed to ‘0’, Bus Watchdog Error will be cleared.  If “150” is written in the Goal Velocity (104), the DYNAMIXEL will rotate in CCW direction.Goal PWM(100)In case of PWM Control Mode, both PID controller and Feedforward controller are deactivated while Goal PWM(100) value is directly controlling the motor through an Inverter. In other control modes, this value is used to limit PWM value. This value cannot exceed PWM Limit(36). Please refer to the Gain section in order to see how Goal PWM(100) affects to different control modes.            Range      Description                  -PWM Limit(36) ~ PWM Limit(36)      Initial Value of PWM Limit(36) : ‘885’      Goal Current (102)In case of Torque Control Mode, Goal Current(102) can be used to set a target current. This value sets a limit to current in Current-based Position Control mode. This value cannot exceed Current Limit(38).            Unit      Value Range                  about  3.36[mA]      -Current Limit(38) ~ Current Limit(38)      Note Applying high current to the motor for long period of time might damage the motor.Goal Velocity(104)In case of Velocity Control Mode, Goal Velocity(104) can be used to set a target velocity. This value cannot exceed Velocity Limit(44). For now, Goal Velocity(104) is used for target velocity, but this value is not used to limit the velocity.            Unit      Value Range                  0.229 rpm      -Velocity Limit(44) ~ Velocity Limit(44)      Note The maximum velocity and maximum torque of DYNAMIXEL is affected by supplying voltage. Therefore, if supplying voltage changes, so does the maximum velocity. This manual complies with recommended supply voltage(12[V]).Note If Profile Acceleration(108) and Goal Velocity(104) are modified simultaneously, modified Profile Acceleration(108) will be used to process Goal Velocity(104).Profile Acceleration(108)The acceleration of Profile can be set with this value. Profile Acceleration(108) can be used in all control modes except Torque Control Mode. Profile Acceleration(108) cannot exceed Acceleration Limit(40). For more details, please refer to the Profile Velocity(112).            Unit      Value Range      Description                  214.577 Rev/min2      0 ~ Acceleration Limit(40)      ‘0’ stands for an infinite acceleration      Profile Velocity(112)The Maximum velocity of Profile can be set with this value. Profile Velocity(112) can be used in all control modes except Torque Control Mode and Velocity Control Mode. Profile Velocity(112) cannot exceed Velocity Limit(44). Velocity Control Mode only uses Profile Acceleration(108) instead of Profile Velocity(112).            Unit      Value Range      Description                  0.229 rpm      0 ~ Velocity Limit(44)      ‘0’ stands for an infinite velocity      The Profile is an acceleration/deceleration control method to reduce vibration, noise and load of the motor by controlling dramatically changing velocity and acceleration. It is also called Velocity Profile as it controls acceleration and deceleration based on velocity. DYNAMIXEL provides 4 different types of Profile. The following explains 4 Profiles and how to select them. Profiles are usually selected by a combination of Profile Velocity(112) and Profile Acceleration(108). Triangular and Trapezoidal Profiles exceptionally consider total travel distance(ΔPos, the distance difference between target position and current position) as an additional factor. For convenience, Profile Velocity(112) is abbreviated to VPRFL and Profile Acceleration(108) is abbreviated to VPRFL. ‘X’ stands for “Don’t Care” case.When given Goal Position(116), Dynamixel’s profile creates target velocity trajectory based on current velocity(initial velocity of the Profile). When Dynamixel receives updated target position from a new Goal Position(116) while it is moving toward the previous Goal Position(116), velocity smoothly varies for the new target velocity trajectory. Maintaining velocity continuity while updating target velocity trajectory is called Velocity Override. For a simple calculation, let’s assume that the initial velocity of the Profile is ‘0’. The following explains how Profile processes Goal Position(116) instruction in Position Control mode, Extended Position Control Mode, Current-based Position Control Mode.  An Instruction from the user is transmitted via Dynamixel bus, then registered to Goal Position(116).  Acceleration time(t1) is calculated from Profile Velocity(112) and Profile Acceleration(108).  Types of Profile is decided based on Profile Velocity(112), Profile Acceleration(108) and total travel distance(ΔPos, the distance difference between target position and current position).  Selected Profile type is stored at Moving Status(123).(Refer to the Moving Status(123))  Dynamixel is driven by the calculated target trajectory from Profile.  Target velocity trajectory and target position trajectory from Profile are stored at Velocity Trajectory(136) and Position Trajectory(140) respectively.  VPRFL_TRI of ③ and Travel time(t3) to reach Goal Position(116) is calculated as below.            Condition      Types of Profile                  VPRFL(112) = 0      Profile not used(Step Instruction)              (VPRFL(112) ≠ 0) &amp;amp; (APRF(108) = 0)      Rectangular Profile              (VPRFL(112) ≠ 0) &amp;amp; (APRF(108) ≠ 0) &amp;amp; (VPRFL_TRI ≤ VPRFL(112))      Triangular Profile              (VPRFL(112) ≠ 0) &amp;amp; (APRF(108) ≠ 0) &amp;amp; (VPRFL_TRI ＞ VPRFL(112))      Trapezoidal Profile      Note Dynamixel supports Jerk control in order to minimize dramatic change of acceleration. Therefore, actual travel time by the target trajectory of Profile could be longer than t3(t4 of above figure).  Note Velocity Control Mode only uses Profile Acceleration(108). Step and Trapezoidal Profiles are supported. Velocity Override and Jerk control are supported as well. Acceleration time(t1) can be calculated as below equation.Goal Velocity(104) / Profile Acceleration(108) * t1 = 64Goal Position(116)Target position can be set with Goal Position(116). From the front view of Dynamixels, CCW is an increasing direction whereas CW is a decreasing direction. The way to reaching Goal Position(116) is differ by 4 Profiles provided by Dynamixels. Please refer to the Profile Velocity(112) for more details.            Mode      Values      Description                  Position Control Mode      Min Position Limit(52) ~ Max Position Limit(48)      Initial Value : 0 ~ 4,095              Extended Position Control Mode      -1,048,575 ~ 1,048,575      -256[rev] ~ 256[rev]              Current-based Position Control Mode      -1,048,575 ~ 1,048,575      -256[rev] ~ 256[rev]                  Degree Conversion Constant      Description                  0.088°/Value      1[rev] : 0 ~ 4,095      Note If Profile Acceleration(108), Profile Velocity(112) and Goal Position(116) are modified simultaneously, Goal Position(116) is processed based on updated Profile Acceleration(108) and Profile Velocity(112).Realtime Tick(120)This value indicates Dynamixel’s time.            Unit      Value Range      Description                  1 ms      0 ~ 32,767      The value resets to ‘0’ when it exceeds 32,767      Moving(122)This value indicates whether Dynamixel is in motion or not. If absolute value of Present Velocity(128) is greater than Moving Threshold(24), Moving(122) is set to ‘1’. Otherwise, it will be cleared to ‘0’. However, this value will always be set to ‘1’ regardless of Present Velocity(128) while Profile is in progress with Goal Position(116) instruction.            Value      Description                  0      Movement is not detected              1      Movement is detected, or Profile is in progress(Goal Position(116) instruction is being processed)      Moving Status(123)This value provides additional information about the movement. Following Error Bit(0x08) and In-Position Bit(0x01) only work with Position Control Mode, Extended Position Control Mode, Current-based Position Control Mode.                          Details      Description                  Bit 7      0x80      -      Unused              Bit 6      0x40      -      Unused              Bit 5~Bit 4      0x30      Profile Type(0x30)Profile Type(0x20)Profile Type(0x10)Profile Type(0x00)      Trapezoidal Velocity ProfileTriangular Velocity ProfileRectangular Velocity ProfileProfile is not used              Bit 3      0x08      Following Error      Dynamixel fails to reach target position trajectory              Bit 2      0x04      -      Unused              Bit 1      0x02      Profile Ongoing      Profile is in progress with Goal Position(116) instruction              Bit 0      0x01      In-Position      Dynamixel is reached to target position      Present PWM(124)This value indicates present PWM. For more details, please refer to the Goal PWM(100).Present Load(126)This value indicates current Current. For more details, please refer to the Goal Current(102).Present Velocity(128)This value indicates present Velocity. For more details, please refer to the Goal Velocity(104).Present Position(132)This value indicates present Position. For more details, please refer to the Goal Position(116).  Note Present Position(132) represents 4 byte continuous range(-2,147,483,648 ~ 2,147,483,647) when Torque is turned off regardless of Operating Mode(11). However, Present Position(132) will be reset in those cases:  Present Position(132) is reset with the value within 1 rev (0 ~ 4,095) when Operating Mode(11) is changed to Position Control Mode.  Present Position(132) is reset with the value within 1 rev (0 ~ 4,095) when Torque is turned on in Position Control Mode.Reset Present Position(132) value can be affected by Homing Offset(20).Velocity Trajectory(136)This is a target velocity trajectory created by Profile. Operating method can be changed based on control mode. For more details, please refer to the Profile Velocity(112).  Velocity Control Mode : When Profile reaches to the endpoint, Velocity Trajectory(136) becomes equal to Goal Velocity(104).  Position Control Mode, Extended Position Control Mode, Current-based Position Control Mode : Velocity Trajectory is used to create Position Trajectory(140). When Profile reaches to an endpoint, Velocity Trajectory(136) is cleared to ‘0’.Position Trajectory(140)This is a target position trajectory created by Profile. This value is only used in Position Control Mode, Extended Position Control Mode and Current-based Position Control Mode. For more details, please refer to the Profile Velocity(112).Present Input Voltage(144)This value indicates present voltage that is being supplied. For more details, please refer to the Max/Min Voltage Limit(32, 34).Present Temperature(146)This value indicates internal temperature of Dynamixel. For more details, please refer to the Temperature Limit(31).Indirect Address, Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses. Sequential addresses increase Instruction Packet efficiency. Addresses that can be defined as Indirect Address is limited to RAM area(Address 64 ~ 661).If specific address is allocated to Indirect Address, Indirect Address inherits features and properties of the Data from the specific Address. Property includes Size(Byte length), value range, and Access property(Read Only, Read/Write). For instance, allocating 65(Address of LED) to Indirect Address 1(168), Indirect Data 1(224) can perform exactly same as LED(65).Example 1 Allocating Size 1 byte LED(65) to Indirect Data 1(224).  Indirect Address 1(168) : change the value to ‘65’ which is the address of LED.  Set Indirect Data 1(224) to ‘1’ : LED(65) also becomes ‘1’ and LED is turned on.  Set Indirect Data 1(224) to ‘0’ : LED(65) also becomes ‘0’ and LED is turned off.Example 2 Allocating Size 4 byte Goal Position(116) to Indirect Data 2(225), 4 sequential bytes have to be allocated.  Indirect Address 2(170) : change the value to ‘116’ which is the first address of Goal Position.  Indirect Address 3(172) : change the value to ‘117’ which is the second address of Goal Position.  Indirect Address 4(174) : change the value to ‘118’ which is the third address of Goal Position.  Indirect Address 5(176) : change the value to ‘119’ which is the fourth address of Goal Position.  Set 4 byte value ‘1,024’ to Indirect Data 2 : Goal Position(116) also becomes ‘1024’ and Dynamixel moves.            Indirect Address Range      Description                  64 ~ 661      EEPROM address can’t be assigned to Indirect Address      Note In order to allocate Data in the Control Table longer than 2[byte] to Indirect Address, all address must be allocated to Indirect Address like the above Example 2.Note Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.How to AssembleOptional Frames      FR05-F101 and FR08-X101        FR05-S101        FR08-B101        FR08-H101        FR08-H110 and FR08-D101  Horns      HN05-N102        HN05-I101  Combination StructuresMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideVideosQuick StartDrawingsDownload MX-106T",
        "url": " http://localhost:4000/docs/en/dxl/mx/mx-106-2/"
      } ,
  
      "docs-en-dxl-mx-mx-106":  {
        "title": "MX-106",
      "content"	 : "MX-106Note Compliance has been replaced with PID Gains.Note Although the MX-106T (TTL) and MX-106R (RS-485) differ in communications protocols both have the same features and perform equally. (TTL uses 3-pin connectors while RS-485 uses 4)Note In order to use Protocol 2.0, please update the firmware to V39 or above. (Update firmware using R+ Manager 2.0)Warning For MX-106(2.0) Protocol, please refer to the MX-106(2.0) Control Table as they are different.Specifications            Item      Specifications                  MCU      ST CORTEX-M3 ( STM32F103C8 @ 72MHZ,32BIT)              Position Sensor      Contactless absolute encoder (12BIT,360 DEGREE)Maker : ams (www.ams.com), Part No : AS5045              Motor      Maxon              Baud Rate      8000 bps ~ 4.5 Mbps              Control Algorithm      PID Control              Resolution      0.088°              Running Degree      0° ~ 360°Endless Turn              Weight      153g              Dimensions (W x H x D)      40.2mm x 65.1mm x 46mm              Gear Ratio      225 : 1              Stall Torque      8.0Nm @ 11.1V, 4.8A8.4Nm @ 12V, 5.2A10.0Nm @ 14.8V, 6.3A              No Load Speed      41rpm @ 11.1V45rpm @ 12V55rpm @ 14.8V              Operating Temperature      -5°C ~ +80°C              Input Voltage      10 ~ 14.8V (Recommended : 12V)              Standby Current      100mA              Command Signal      Digital Packet              Protocol Type      MX-106T: Half Duplex Asynchronous Serial CommunicationMX-106R: RS485 Asynchronous Serial Communication(8bit,1stop, No Parity)              Physical Connection      MX-106T: TTL Level Multidrop BUSMX-106R: RS485 Multidrop BUS              ID      0 ~ 253              Feedback      Position, Temperature, Load, Input Voltage, etc              Material      Full Metal GearMetal(Front), Engineering Plastic(Middle, Back)      Performance GraphStall torque Peak stall torque read from transient statePerformance Graph(N-T Curve) A graph shows torque measured in stable condition while increasing load. Normally, stall torque is bigger than maximum torque on performance graph.Caution When connecting to power supply:  For the stable power supply, we recommend using ROBOTIS controller or SMPS2Dynamixel.  Connect your DYNAMIXEL to power supply while it’s off and turn on/off with the power switch.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 1.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(24) is ‘0’ and Dynamixel is in idle state.SizeThe Size of data is 1 or 2 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. 2 bytes data will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      320              2      1      Firmware Version      Firmware Version      R      -              3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      Counter-Clockwise Angle Limit      RW      4095              10      1      Drive Mode      Dual Mode Setting      RW      0              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      160              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36              20      2      Multi Turn Offset      Adjust Position with Offset      RW      0              22      1      Resolution Divider      Divider for Position Resolution      RW      1      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On/Off      RW      0              25      1      LED      Status LED On/Off      RW      0              26      1      D Gain      Derivative Gain      RW      0              27      1      I Gain      Integral Gain      RW      0              28      1      P Gain      Proportional Gain      RW      32              30      2      Goal Position      Target Position      RW      -              32      2      Moving Speed      Moving Speed(Moving Velocity)      RW      -              34      2      Torque Limit      Torque Limit(Goal Torque)      RW      ADD 14&amp;amp;15              36      2      Present Position      Present Position      R      -              38      2      Present Speed      Present Speed      R      -              40      2      Present Load      Present Load      R      -              42      1      Present Voltage      Present Voltage      R      -              43      1      Present Temperature      Present Temperature      R      -              44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      0              68      2      Current      Consuming Current      RW      0              70      1      Torque Ctrl Mode Enable      Torque Control Mode On/Off      RW      0              71      2      Goal Torque      Goal Torque      RW      0              73      1      Goal Acceleration      Goal Acceleration      RW      0      Control Table DescriptionModel Number (0)This address stores model number of the DYNAMIXEL.Firmware Version (2)This address stores firmware version of the DYNAMIXEL.ID (3)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate (4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate(bps)      Margin of Error                  1      1M      0.000%              3      500,000      0.000%              4      400,000      0.000%              7      250,000      0.000%              9      200,000      0.000%              16      115200      -2.124%              34(Default)      57600      0.794%              103      19200      -0.160%              207      9600      -0.160%      Note Less than 3% of the baud rate error margin will not affect to UART communication.For BPS over 250 values :            Value      Baud Rate      Margin of Error                  250      2,250,000      0.000%              251      2,500,000      0.000%              252      3,000,000      0.000%      Return Delay Time (5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      CW/CCW Angle Limit(6, 8)The angle limit allows the motion to be restrained.The range and the unit of the value is the same as Goal Position(Address 30, 31).  CW Angle Limit: the minimum value of Goal Position(Address 30, 31)  CCW Angle Limit: the maximum value of Goal Position(Address 30, 31)The following three modes can be set pursuant to the value of CW and CCW.            Operation Type      CW / CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0              Multi-turn Mode      both are 4095      The wheel mode can be used to wheel-type operation robots since motors of the robots spin infinitely. The joint mode can be used to multi-joints robot since the robots can be controlled with specific angles. Multi-turn mode allows joint mode control over multiple rotations (Position range : -28,672 ~ 28,672)Drive Mode            Bit      Item      Description                  Bit 2 ~ 7      N/A      -              Bit 1      Master/Slave Mode      0: Master Mode1 : Slave Mode              Bit 0      Normal/Reverse Mode      0: Normal Mode1: Reverse mode            Master ModeIn case of being used as dual joints, it is set to designate as master.        Slave ModeIn case of being used as dual joints, it is set to designate as slave.        General ModeSets the direction of rotation to set direction.Reads normal data values from position.        Reverse ModeSets the direction of rotation  opposite to set direction.Reads inverse data values from position.    Note Reverse mode is to reverse the rotational direction. It can be used conveniently when a symmetrical joint is required.  Dual joint-offsetDual joints are used as 1 joint by controlling 2 motors simultaneously.To use the dual joints, 1 unit of motor set in master mode and 1 unit of motor set in slave mode are needed.Next, the motors must be connected to each other using synchronization cable.  Normal mode synch cable: Drives Master and PWM signals synchronized.  Reverse mode synch cable: Drives PWM signals in reverse.Note Slave is synchronized by directly receiving the control command through synchronization cable from Master.  Slave Mode unit responds to communication through command packets, but data related to motor drive are processed only through the synchronization.Note In a dual master-slave configuration position information from the slave is ignored and the position of the dual configuration is based on the master in PWM control. When master and slave are not physically connected there could be a slight difference on the driven load. Use the frame shown in the below image to achieve dual configuration.The Maximum Temperature Limit            Unit      Value Range                  About 1°      0 ~ 100      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage LimitIt is the operation range of voltage.            Unit      Value Range      Description                  About 0.1V      50 ~ 160      5.0 ~ 16.0V      For example, if the value is 80, the voltage is 8V.If Present Voltage(42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.Max TorqueIt is the torque value of maximum output. 0 to 1,023 (0x3FF) can be used, and the unit is about 0.1%.For example, Data 1,023 (0x3FF) means that Dynamixel will use 100% of the maximum torque it can produce while Data 512 (0x200) means that Dynamixel will use 50% of the maximum torque. When the power is turned on, Torque Limit (Address 34 and 35) uses the value as the initial value.Status Return LevelThis value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Alarm LED / Alarm ShutdownDynamixel can protect itself by detecting errors occur during the operation.The errors can be set are as the table below.            Bit      Item      Description                  Bit 7      0      -              Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’. That is, if 0x05 (binary 00000101) is set, both Input Voltage Error and Overheating Error can be detected.If errors occur, in case of Alarm LED, the LED blinks; in case of Alarm Shutdown, the motor output becomes 0 % by resetting the value of Torque Limit(34) to 0.Multi-turn OffsetAdjusts offset position. This offset value is added to the Present Position(36).Initial value is 0 and the range is from -24,576 to 24,576.Dynamixel with a Present position of 2,048 with an offset of 1,024 will return an adjusted Present position of 3,072.Note This offset feature is only available in multi-turn mode.Resolution DividerIt allows the user to change Dynamixel’s resolution.The default Resolution Divider Value is set as 1. (1 ~ 4 available)When resolution is lowered, revolutions (in both directions) can be increased (up to 28 turns in each direction).Present Position = Real Position / Resolution DividerFor example, a Real Position of 2048 with a Resolution Divider set as 2 will yield a Present Position value of 1024 (2048/2 = 1024). A Dynamixel with Resolution Divider set as 2 will have a resolution 2048 for a single revolution.The Present Position can be obtained while Multi-turn Offset and Resolution Divider are taken into account.Present position = (Real Position / Resolution Divider) + Multi-turn OffsetFor example, a Dynamixel with a Real Position of 2048 with a Resolution Divider set as 4 and Multi-turn Offset as 1024 will yield a Present Position of 1535 ((2048/4) + 1024 = 1535).Note: This feature is only applied in multi-turn mode and will be ignored in other modes.Torque Enable            Value      Description                  0      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      LEDTurn on or turn off the LED on Dynamixel.            Bit      Description                  0(Default)      Turn OFF the LED              1      Turn ON the LED      PID GainsMX series will use the PID controller as a main control method.P gain : value of proportional band.I gain : value of integral action.D Gain : value of derivative action.Gains values are in between 0~254.Kp = P Gain / 8Ki = I Gain * 1,000 / 2,048Kd = D Gain * 4 / 1,000The relationship between Compliance Slop and PID            Slope      P Gain                  8      128              16      64              32      32              64      16              128      8      The less the P gain, The larger the back lash, and the weaker the amount of output near goal position.At some extent, it is like a combined concept of margine and slope.It does not exactly match the previous concept of compliance. So it is obvious if you see the difference in terms of motion.Explanation for PID required.For the brief explanation about general PID, please refer to the website(link) below.http://en.wikipedia.org/wiki/PID_controllerFYI, PID control theory is not only limited to the control of motor(actuator) but is a generic theory that can be applied to all kinds of control.Goal PositionIt is a position value of destination.0 to 4,095 (0xFFF) is available.  The unit is 0.088°.If Goal Position is out of the range, Angle Limit Error Bit (Bit1) of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED/Shutdown.The picture above is the front view of DynamixelIn multi-turn mode Dynamixel has a range from -28,672 to 28,672 (can turn up to 7 revolutions in either CW or CCW direction).When resolution divider is set to a different value revolutions can increase.Note If it is set to Wheel Mode, Goal Position value is not used.Moving Speed      Join Mode, Multi-Turn modeIt is a moving speed to Goal Position.0 ~ 1,023 (0x3FF) can be used, and the unit is about 0.114rpm.If it is set to 0, it means the maximum rpm of the motor is used without controlling the speed.If it is 1023, it is about 116.62rpm.For example, if it is set to 300, it is about 34.2 rpm.However, the rpm will not exceed the No Load Speed.        Wheel ModeIt is a moving speed to Goal direction.0 ~ 2,047 (0x7FF) can be used, and the unit is about 0.114rpm.If a value in the range of 0 ~ 1,023 is used, it is stopped by setting to 0 while rotating to CCW direction.If a value in the range of 1,024 ~ 2,047 is used, it is stopped by setting to 1024 while rotating to CW direction.That is, the 10th bit becomes the direction bit to control the direction.    Note Please check the maximum rpm of the Dynamixel. The motor cannot exceed the maximum rpm with the higher Moving Speed value.  Torque LimitIt is the value of the maximum torque limit.0 ~ 1,023(0x3FF) is available, and the unit is about 0.1%.For example, if the value is 512, it is about 50%; that means only 50% of the maximum torque will be used.If the power is turned on, the value of Max Torque (Address 14, 15) is used as the initial value.Note If the function of Alarm Shutdown is triggered, the motor loses its torque because the value becomes 0. Once error conditions are resolved and this value is changed to the value other than 0, the motor can be operated again.Present PositionIt is the current position value of Dynamixel.The range of the value is 0~4095 (0xFFF), and the unit is 0.088 degree.The picture above is the front view of Dynamixel.In multi-turn mode, the range is from -28672 to 28672 with unit values dependent on Resolution Divider (0.088 * Resolution Divider)Note In multi-turn mode, Present position depends on resolution divider and multi-turn offset For more information turn to the section on Multi Turn offset and Resolution Divider.Present SpeedIs the current moving speed.0 ~ 2,047 (0x000 ~ 0x7FF) can be used.If a value is in the rage of 0 ~ 1,023 then the motor rotates to the CCW direction.If a value is in the rage of 1,024 ~ 2,047 then the motor rotates to the CW direction.The 10th bit becomes the direction bit to control the direction; 0 and 1,024 are equal.The value unit is about 0.11rpm.For example, if it is set to 300 then the motor is moving to the CCW direction at a rate of about 34.33rpm.Present LoadIt means currently applied load.The range of the value is 0~2047, and the unit is about 0.1%.If the value is 0~1,023, it means the load works to the CCW direction.If the value is 1,024~2,047, it means the load works to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 1,024 is equal to 0.For example, the value is 512, it means the load is detected in the direction of CCW about 50% of the maximum torque.            Bit      15 ~ 11      10      9 ~ 0                  Value      0      Load Direction      Data (Load Ratio)      Note CCW Load : Load Direction = 0, CW Load : Load Direction = 1Note Present load is an inferred value based on the internal output value; not a measured value using torque sensor, etc. Therefore, it may be inaccurate for measuring weight or torque. It is recommended to use it for predicting the direction and size of the force being applied to the joint.Present VoltageIt is the size of the present voltage supplied.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)If Present Voltage(42) value is out of range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18.Present TemperatureIt is the internal temperature of Dynamixel in Celsius.Data value is identical to the actual temperature in Celsius. For example, if the data value is 85 (0x55), the current internal temperature is 85°C.Registered Instruction            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Moving            Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock            Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.PunchMinimum current to drive motor. This value ranges from 0x20 to 0x3FF.CurrentAt an idle state without current flow, this value is 2,048(0x800).When positive current flows, this value becomes larger than 2,048(0x800) while negative current flow returns a value smaller than 2,048(0x800).The following is current flow calculation formula.I = ( 4.5mA ) * (CURRENT – 2048 ) in amps unit (A).For example, 68 gives a value of 2148, which corresponds to 450mA of current flow.Torque Control Mode Enable            Value      Meaning                  0      Turn off the torque mode. Executes Joint mode or Wheel mode              1      Turn on the torque mode. Cannot control the position or moving speed but only Torque      When Torque Control Mode Enable is 1, DYNAMIXEL behaves like the followings  DYNAMIXEL does not control position or velocity.  DYNAMIXEL is controlled by the Goal Torque value.  DYNAMIXEL does not affected by the Goal position and Goal speed values.  Since position/moving speed is not controlled, DYNAMIXEL behaves as if it is in the wheel mode.Goal TorqueYou can use 0 ~ 2,047 (0x7FF) and the unit is 4.5mA (Torque is directly proportional to the current value).If you use a value between 0 ~ 1,023, torque is applied to the CCW direction, and setting it to 0 will stops.If you use a value between 1,024 ~ 2,047, torque is applied to the CW direction, and setting it to 1,024 will stops.That means, 10th bit becomes the CW/CCW direction bit, which controls rotational direction.Goal Torque cannot be bigger than Torque Limit(34,35).Goal AccelerationThis is Goal Acceleration value.It can be used from 0~254(0XFE) and the unit is approximately 8.583° / sec2.When it is set to 0, there is no control over acceleration and moves with the maximum acceleration of the motor.When the goal speead is set to 0, there is no control over acceleration and moves with the maximum acceleration of the motor.When it is set to 254, it becomes 2,180° / sec2.For example, the current speed of Dynamixel is 0, and Goal acceleration is 10.The speed of Dynamixel after 1 second will be 14.3 RPM.How to AssembleOptional Frames      FR05-F101 and FR08-X101        FR05-S101        FR08-B101        FR08-H101        FR08-H110 and FR08-D101  Horns      HN05-N102        HN05-I101  Combination StructuresMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideVideosQuick StartDrawingsDownload MX-106T",
        "url": " http://localhost:4000/docs/en/dxl/mx/mx-106/"
      } ,
  
      "docs-en-dxl-mx-mx-12w":  {
        "title": "MX-12W",
      "content"	 : "MX-12WSpecifications            Item      Specifications                  Baud Rate      8000 bps ~ 4.5 Mbps              Resolution      0.088°              Running Degree      0° ~ 360°Endless Turn              Weight      54.6g              Dimensions (W x H x D)      32mm x 50mm x 40mm              Gear Ratio      32 : 1              No Load Speed      470rpm (at 12V)              Operating Temperature      -5°C ~ +80°C              Input Voltage      10 ~ 14.8V (Recommended : 12V)              Standby Current      60mA              Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      TTL Level Multidrop Bus(Daisy Chain Type Connector)              ID      0 ~ 253              Feedback      Position, Temperature, Load, Input Voltage, etc              Material      Engineering Plastic      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 1.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(24) is ‘0’ and Dynamixel is in idle state.SizeThe Size of data is 1 or 2 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. 2 bytes data will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      104              2      1      Firmware Version      Firmware Version      R      -              3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      1              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      Counter-Clockwise Angle Limit      RW      4095              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      160              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36              20      2      Multi Turn Offset      Adjust Position with Offset      RW      0              22      1      Resolution Divider      Divider for Position Resolution      RW      1      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On/Off      RW      0              25      1      LED      Status LED On/Off      RW      0              26      1      D Gain      Derivative Gain      RW      8              27      1      I Gain      Integral Gain      RW      0              28      1      P Gain      Proportional Gain      RW      8              30      2      Goal Position      Target Position      RW      -              32      2      Moving Speed      Moving Speed(Moving Velocity)      RW      -              34      2      Torque Limit      Torque Limit(Goal Torque)      RW      ADD 14&amp;amp;15              36      2      Present Position      Present Position      R      -              38      2      Present Speed      Present Speed      R      -              40      2      Present Load      Present Load      R      -              42      1      Present Voltage      Present Voltage      R      -              43      1      Present Temperature      Present Temperature      R      -              44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32              73      1      Goal Acceleration      Goal Acceleration      RW      0      Control Table DescriptionModel Number (0)This address stores model number of the DYNAMIXEL.Firmware Version (2)This address stores firmware version of the DYNAMIXEL.ID (3)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate (4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate(bps)      Margin of Error                  1      1M      0.000%              3      500,000      0.000%              4      400,000      0.000%              7      250,000      0.000%              9      200,000      0.000%              16      115200      -2.124%              34(Default)      57600      0.794%              103      19200      -0.160%              207      9600      -0.160%      Note Less than 3% of the baud rate error margin will not affect to UART communication.For BPS over 250 values :            Value      Baud Rate      Margin of Error                  250      2,250,000      0.000%              251      2,500,000      0.000%              252      3,000,000      0.000%      Return Delay Time (5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      CW/CCW Angle Limit(6, 8)The angle limit allows the motion to be restrained.The range and the unit of the value is the same as Goal Position(Address 30, 31).  CW Angle Limit: the minimum value of Goal Position(Address 30, 31)  CCW Angle Limit: the maximum value of Goal Position(Address 30, 31)The following three modes can be set pursuant to the value of CW and CCW.            Operation Type      CW / CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0              Multi-turn Mode      both are 4095      The wheel mode can be used to wheel-type operation robots since motors of the robots spin infinitely. The joint mode can be used to multi-joints robot since the robots can be controlled with specific angles. Multi-turn mode allows joint mode control over multiple rotations (Position range : -28,672 ~ 28,672)The Maximum Temperature Limit            Unit      Value Range                  About 1°      0 ~ 100      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage LimitIt is the operation range of voltage.            Unit      Value Range      Description                  About 0.1V      50 ~ 160      5.0 ~ 16.0V      For example, if the value is 80, the voltage is 8V.If Present Voltage(42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.Max TorqueIt is the torque value of maximum output. 0 to 1,023 (0x3FF) can be used, and the unit is about 0.1%.For example, Data 1,023 (0x3FF) means that Dynamixel will use 100% of the maximum torque it can produce while Data 512 (0x200) means that Dynamixel will use 50% of the maximum torque. When the power is turned on, Torque Limit (Address 34 and 35) uses the value as the initial value.Status Return LevelThis value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Alarm LED / Alarm ShutdownDynamixel can protect itself by detecting errors occur during the operation.The errors can be set are as the table below.            Bit      Item      Description                  Bit 7      0      -              Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’. That is, if 0x05 (binary 00000101) is set, both Input Voltage Error and Overheating Error can be detected.If errors occur, in case of Alarm LED, the LED blinks; in case of Alarm Shutdown, the motor output becomes 0 % by resetting the value of Torque Limit(34) to 0.Multi-turn OffsetAdjusts offset position. This offset value is added to the Present Position(36).Initial value is 0 and the range is from -24,576 to 24,576.Dynamixel with a Present position of 2,048 with an offset of 1,024 will return an adjusted Present position of 3,072.Note This offset feature is only available in multi-turn mode.Resolution DividerIt allows the user to change Dynamixel’s resolution.The default Resolution Divider Value is set as 1. (1 ~ 4 available)When resolution is lowered, revolutions (in both directions) can be increased (up to 28 turns in each direction).Present Position = Real Position / Resolution DividerFor example, a Real Position of 2048 with a Resolution Divider set as 2 will yield a Present Position value of 1024 (2048/2 = 1024). A Dynamixel with Resolution Divider set as 2 will have a resolution 2048 for a single revolution.The Present Position can be obtained while Multi-turn Offset and Resolution Divider are taken into account.Present position = (Real Position / Resolution Divider) + Multi-turn OffsetFor example, a Dynamixel with a Real Position of 2048 with a Resolution Divider set as 4 and Multi-turn Offset as 1024 will yield a Present Position of 1535 ((2048/4) + 1024 = 1535).Note: This feature is only applied in multi-turn mode and will be ignored in other modes.Torque Enable            Value      Description                  0      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      LEDTurn on or turn off the LED on Dynamixel.            Bit      Description                  0(Default)      Turn OFF the LED              1      Turn ON the LED      PID GainsMX series will use the PID controller as a main control method.P gain : value of proportional band.I gain : value of integral action.D Gain : value of derivative action.Gains values are in between 0~254.Kp = P Gain / 8Ki = I Gain * 1,000 / 2,048Kd = D Gain * 4 / 1,000The relationship between Compliance Slop and PID            Slope      P Gain                  8      128              16      64              32      32              64      16              128      8      The less the P gain, The larger the back lash, and the weaker the amount of output near goal position.At some extent, it is like a combined concept of margine and slope.It does not exactly match the previous concept of compliance. So it is obvious if you see the difference in terms of motion.Explanation for PID required.For the brief explanation about general PID, please refer to the website(link) below.http://en.wikipedia.org/wiki/PID_controllerFYI, PID control theory is not only limited to the control of motor(actuator) but is a generic theory that can be applied to all kinds of control.Goal PositionIt is a position value of destination.0 to 4,095 (0xFFF) is available.  The unit is 0.088°.If Goal Position is out of the range, Angle Limit Error Bit (Bit1) of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED/Shutdown.The picture above is the front view of DynamixelIn multi-turn mode Dynamixel has a range from -28,672 to 28,672 (can turn up to 7 revolutions in either CW or CCW direction).When resolution divider is set to a different value revolutions can increase.Note If it is set to Wheel Mode, Goal Position value is not used.Moving Speed      Join Mode, Multi-Turn modeIt is a moving speed to Goal Position.0~1023 (0X3FF) can be used, and the unit is about 0.916rpm.If it is set to 0, it means the maximum rpm of the motor is used without controlling the speed.If it is 1023, it is about 937.1rpm.For example, if it is set to 300, it is about 274.8 rpm.However, the rpm will not exceed the No Load Speed.        Wheel ModeIt is a moving speed to Goal direction.0~2047 (0X7FF) can be used, and the unit is about 0.916rpm.If a value in the range of 0~1023 is used, it is stopped by setting to 0 while rotating to CCW direction.If a value in the range of 1024~2047 is used, it is stopped by setting to 1024 while rotating to CW direction.That is, the 10th bit becomes the direction bit to control the direction.    Note Wheel mode allows to check max rpm. Any values higher than max rpm will not take effect.  Torque LimitIt is the value of the maximum torque limit.0 ~ 1,023(0x3FF) is available, and the unit is about 0.1%.For example, if the value is 512, it is about 50%; that means only 50% of the maximum torque will be used.If the power is turned on, the value of Max Torque (Address 14, 15) is used as the initial value.Note If the function of Alarm Shutdown is triggered, the motor loses its torque because the value becomes 0. Once error conditions are resolved and this value is changed to the value other than 0, the motor can be operated again.Present PositionIt is the current position value of Dynamixel.The range of the value is 0~4095 (0xFFF), and the unit is 0.088 degree.The picture above is the front view of Dynamixel.In multi-turn mode, the range is from -28672 to 28672 with unit values dependent on Resolution Divider (0.088 * Resolution Divider)Note In multi-turn mode, Present position depends on resolution divider and multi-turn offset For more information turn to the section on Multi Turn offset and Resolution Divider.Present SpeedIs the current moving speed.0~2047 (0x000 ~ 0x7FF) can be used.If a value is in the rage of 0~1023 then the motor rotates to the CCW direction.If a value is in the rage of 1024~2047 then the motor rotates to the CW direction.The 10th bit becomes the direction bit to control the direction; 0 and 1024 are equal.The value unit is about 0.916rpm.For example, if it is set to 300 then the motor is moving to the CCW direction at a rate of about 274.8rpm.Present LoadIt means currently applied load.The range of the value is 0~2047, and the unit is about 0.1%.If the value is 0~1,023, it means the load works to the CCW direction.If the value is 1,024~2,047, it means the load works to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 1,024 is equal to 0.For example, the value is 512, it means the load is detected in the direction of CCW about 50% of the maximum torque.            Bit      15 ~ 11      10      9 ~ 0                  Value      0      Load Direction      Data (Load Ratio)      Note CCW Load : Load Direction = 0, CW Load : Load Direction = 1Note Present load is an inferred value based on the internal output value; not a measured value using torque sensor, etc. Therefore, it may be inaccurate for measuring weight or torque. It is recommended to use it for predicting the direction and size of the force being applied to the joint.Present VoltageIt is the size of the present voltage supplied.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)If Present Voltage(42) value is out of range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18.Present TemperatureIt is the internal temperature of Dynamixel in Celsius.Data value is identical to the actual temperature in Celsius. For example, if the data value is 85 (0x55), the current internal temperature is 85°C.Registered Instruction            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Moving            Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock            Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.PunchMinimum current to drive motor. This value ranges from 0x20 to 0x3FF.Goal AccelerationThis is Goal Acceleration value.It can be used from 0~254(0XFE) and the unit is approximately 8.583° / sec2.When it is set to 0, there is no control over acceleration and moves with the maximum acceleration of the motor.When the goal speead is set to 0, there is no control over acceleration and moves with the maximum acceleration of the motor.When it is set to 254, it becomes 2,180° / sec2.For example, the current speed of Dynamixel is 0, and Goal acceleration is 10.The speed of Dynamixel after 1 second will be 14.3 RPM.How to AssembleMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideVideosQuick StartDrawings",
        "url": " http://localhost:4000/docs/en/dxl/mx/mx-12w/"
      } ,
  
      "docs-en-dxl-mx-mx-28-2":  {
        "title": "MX-28(2.0)",
      "content"	 : "MX-28(Protocol 2.0)Specifications            Item      Specifications                  MCU      ST CORTEX-M3 ( STM32F103C8 @ 72MHZ,32BIT)              Position Sensor      Contactless absolute encoder (12BIT,360 DEGREE)Maker : ams (www.ams.com), Part No : AS5045              Motor      Maxon              Baud Rate      8000 bps ~ 4.5 Mbps              Control Algorithm      PID Control              Resolution      0.088°              Operation Modes      Velocity Control ModePosition Control Mode(0° ~ 360°)Extended Position Ctrl Mode(Multi-turn)PWM Control Mode              Weight      MX-28AR/AT : 77g, MX-28R/T : 72g              Dimensions (W x H x D)      35.6mm x 50.6mm x 35.5mm              Gear Ratio      193 : 1              Stall Torque      2.3Nm @ 11.1V, 1.3A2.5Nm @ 12V, 1.4A3.1Nm @ 14.8V, 1.7A              No Load Speed      50rpm @ 11.1V55rpm @ 12V67rpm @ 14.8V              Operating Temperature      -5°C ~ +80°C              Input Voltage      10 ~ 14.8V (Recommended : 12V)              Standby Current      100mA              Command Signal      Digital Packet              Protocol Type      MX-28T/MX-28AT: Half Duplex Asynchronous Serial CommunicationMX-28R/MX-28AR: RS485 Asynchronous Serial Communication(8bit,1stop, No Parity)              Physical Connection      MX-28T/MX-28AT: TTL Level Multidrop BUSMX-28R/MX-28AR: RS485 Multidrop BUS              ID      0 ~ 252              Feedback      Position, Velocity, Temperature, Load, Input Voltage, Trajectory, Realtime Tick, etc              Material      Full Metal GearMX-28AR/AT: Metal(Front), Engineering Plastic(Middle, Back)MX-28R/T: Engineering Plastic(Front, Middle, Back)      Performance GraphStall torque Peak stall torque read from transient statePerformance Graph(N-T Curve) A graph shows torque measured in stable condition while increasing load. Normally, stall torque is bigger than maximum torque on performance graph.Caution When connecting to power supply:  For the stable power supply, we recommend using ROBOTIS controller or SMPS2Dynamixel.  Connect your DYNAMIXEL to power supply while it’s off and turn on/off with the power switch.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 2.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(64) is cleared to ‘0’.SizeThe Size of data varies from 1 to 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. For data larger than 2 bytes will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      30              2      4      Model Information      Model Information      R      -              6      1      Firmware Version      Firmware Version      R      -              7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Baud Rate      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              10      1      Drive Mode      Drive Mode      RW      0              11      1      Operating Mode      Operating Mode      RW      3              12      1      Secondary(Shadow) ID      Secondary ID      RW      255              13      1      Protocol Version      Protocol Version      RW      2              20      4      Homing Offset      Home Position Offset      RW      0              24      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      10              31      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              32      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      160              34      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      95              36      2      PWM Limit      Maximum PWM Limit      RW      885              40      4      Acceleration Limit      Maximum Acceleration Limit      RW      32767              44      4      Velocity Limit      Maximum Velocity Limit      RW      380              48      4      Max Position Limit      Maximum Position Limit      RW      4095              52      4      Min Position Limit      Minimum Position Limit      RW      0              63      1      Shutdown      Shutdown Error Information      RW      52      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  64      1      Torque Enable      Motor Torque On/Off      RW      0              65      1      LED      Status LED On/Off      RW      0              68      1      Status Return Level      Select Types of Status Return      RW      2              69      1      Registered Instruction      REG_WRITE Instruction Flag      R      0              70      1      Hardware Error Status      Hardware Error Status      R      0              76      2      Velocity I Gain      I Gain of Velocity      RW      1920              78      2      Velocity P Gain      P Gain of Velocity      RW      100              80      2      Position D Gain      D Gain of Position      RW      0              82      2      Position I Gain      I Gain of Position      RW      0              84      2      Position P Gain      P Gain of Position      RW      850              88      2      Feedforward 2nd Gain      2nd Gain of Feed-Forward      RW      0              90      2      Feedforward 1st Gain      1st Gain of Feed-Forward      RW      0              98      1      BUS Watchdog      Dynamixel BUS Watchdog      RW      0              100      2      Goal PWM      Target PWM Value      RW      -              104      4      Goal Velocity      Target Velocity Value      RW      -              108      4      Profile Acceleration      Acceleration Value of Profile      RW      0              112      4      Profile Velocity      Velocity Value of Profile      RW      0              116      4      Goal Position      Target Position      RW      -              120      2      Realtime Tick      Count Time in Millisecond      R      -              122      1      Moving      Movement Flag      R      0              123      1      Moving Status      Detailed Information of Movement Status      R      0              124      2      Present PWM      Present PWM Value      R      -              126      2      Present Load      Present Load Value      R      -              128      4      Present Velocity      Present Velocity Value      R      -              132      4      Present Position      Present Position Value      R      -              136      4      Velocity Trajectory      Target Velocity Trajectory from Profile      R      -              140      4      Position Trajectory      Target Position Trajectory from Profile      R      -              144      2      Present Input Voltage      Present Input Voltage      R      -              146      1      [Present Temperature]      Present Internal Temperature      R      -              168      2      Indirect Address 1      Indirect Address 1      RW      224              170      2      Indirect Address 2      Indirect Address 2      RW      225              172      2      Indirect Address 3      Indirect Address 3      RW      226              …      …      …      …      …      …              218      2      Indirect Address 26      Indirect Address 26      RW      249              220      2      Indirect Address 27      Indirect Address 27      RW      250              222      2      Indirect Address 28      Indirect Address 28      RW      251              224      1      Indirect Data 1      Indirect Data 1      RW      0              225      1      Indirect Data 2      Indirect Data 2      RW      0              226      1      Indirect Data 3      Indirect Data 3      RW      0              …      …      …      …      …      …              249      1      Indirect Data 26      Indirect Data 26      RW      0              250      1      Indirect Data 27      Indirect Data 27      RW      0              251      1      Indirect Data 28      Indirect Data 28      RW      0              578      2      Indirect Address 29      Indirect Address 29      RW      634              580      2      Indirect Address 30      Indirect Address 30      RW      635              582      2      Indirect Address 31      Indirect Address 31      RW      636              …      …      …      …      …      …              628      2      Indirect Address 54      Indirect Address 54      RW      659              630      2      Indirect Address 55      Indirect Address 55      RW      660              632      2      Indirect Address 56      Indirect Address 56      RW      661              634      1      Indirect Data 29      Indirect Data 29      RW      0              635      1      Indirect Data 30      Indirect Data 30      RW      0              636      1      Indirect Data 31      Indirect Data 31      RW      0              …      …      …      …      …      …              659      1      Indirect Data 54      Indirect Data 54      RW      0              660      1      Indirect Data 55      Indirect Data 55      RW      0              661      1      Indirect Data 56      Indirect Data 56      RW      0      Caution Protocol 1.0 does not support addresses greater than 256. Therefore, Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable(64) is cleared to ‘0’.Model Number(0)This address stores model number of the DYNAMIXEL.Firmware Version(6)This address stores firmware version of the DYNAMIXEL.ID(7)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate(4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate      Margin of Error                  7      4.5M      0.000%              6      4M      0.000%              5      3M      0.000%              4      2M      0.000%              3      1M      0.000%              2      115,200      0.000%              1(Default)      57,600      0.000%              0      9,600      0.000%      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time(5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      Drive Mode(10)Drive Mode is availabe from the firmware version 38.            Bit      Item      Description                  Bit 1 ~ 7      N/A      Unused, always ‘0’              Bit 0      Direction of Rotation      Normal Mode(0): CCW(Positive), CW(Negative)Reverse Mode(1): CCW(Negative), CW(Positive)      Operating Mode(11)            Value      Operating Mode      Description                  1      Velocity Control Mode(0° ~ 360°)      This mode controls velocity and ideal for wheel operation.This mode is identical to the Wheel Mode(endless) from existing Dynamixels.              3(Default)      Position Control Mode      This mode controls position and identical to the Joint Mode.Operating position range is limited by Max Position Limit(48) and Min Position Limit(52).This mode is ideal for articulated robots that each joint rotates less than 360°.              4      Extended Position Control Mode(Multi-turn)      This mode controls position and identical to Multi-turn Mode.512 turns are supported(-256[rev] ~ 256[rev]) and ideal for multi-turn wrists or conveyer systems or a system that requires an additional reduction gear.              16      PWM Control Mode(Voltage Control Mode)      This mode directly controls PWM output (Voltage Control Mode)        Note Switching Operating Mode will reset gains(PID, Feedfoward) properly to the selected Operating Mode. The profile generator and limits will also be reset.  Profile Velocity(112), Profile Acceleration(108) : Reset to ‘0’  Goal PWM(100) : Reset to PWM Limit(36)  Note PWM is the abbreviation for Pulse Width Modulation that modulates PWM Duty to control motors. The PWM Control Mode changes pulse width to control average supply voltage to the motor and this technique is widely used in the motor control field.Therefore, PWM Control Mode uses Goal PWM(100) value to control supply voltage for Dynamixel. PWM Control Mode is similar to the Wheel Mode of Dynamixel AX and RX series.Secondary(Shadow) ID(12)Set the Dynamixel’s Secondary ID. Secondary ID(12) is a value to identify each Dynamixel, just like the ID(7).However, unlike ID(7), Secondary ID(12) is not a unique value.Therefore, Dynamixels with the same Secondary ID value form a group.The differences between Secondary ID(12) and ID(7) are as follows :  Secondary ID(12) is not a unique value. i.e., a lot of Dynamixels may have the same Secondary ID value.  ID(7) has a higher priority than Secondary ID(12). i.e., if Secondary ID(12) and ID(7) are the same, ID(7) will be applied first.  The EEPROM area of the Control Table cannot be modified with Secondary ID(12). Only the RAM area can be modified.  If Instruction Packet ID is the same as Secondary ID(12), the Status Packet will not be returned.  If the value of Secondary ID(12) is 253 or higher, the Secondary ID function is deactivated.            Values      Description                  0 ~ 252      Activate Secondary ID function              253 ~ 255      Deactivate Secondary ID function, Default value ‘255’      The following are examples of operation when there are five Dynamixels with ID (7) set from 1 to 5.  Set all five Dynamixels’ Secondary ID(12) to ‘5’.  Send Write Instruction Packet(ID = 1, LED(65) = 1).  Turn on LED of Dynamixel with ID ‘1’ and return the Status Packet.  Send Write Instruction Packet(ID = 5, LED(65) = 1).  Turn on LED on five Dynamixels. However, Status Packet of Dynamixel with ID ‘5’ will be returned.  Set the Secondary ID(12) of all five Dynamixels to ‘100’.  Send Write Instruction Packet(ID = 100, LED(65) = 0).  Turn off LED on five Dynamixels. However, as there is no Dynamixel with ID ‘100’, Status Packet is not returned.Protocol Version(13)Users can select Dynamixel protocol version (1.0 and 2.0).It is recommended to use an identical protocol version for multiple Dynamixels.            Value      Protocol Version      Compatible Dynamixels                  1      1.0      AX Series, DX Series, RX Series, EX Series, MX Series with Firmware below v39              2(default)      2.0      MX-28/64/106 with Firmware v39 or above, X Series, Pro Series      Note The protocol 2.0 is greatly enhanced from the protocol 1.0. Accessing some of the Control Table area might be denied if protocol 1.0 is selected. This manual complies with protocol 2.0. Please refer to the Protocol section of e-Manual for more details about the protocol.Homing Offset(20)Users can adjust the Home position by setting Home Offset(20). The Homing Offset value is added to the Present Position(132).Present Position(132) = Actual Position + Homing Offset(20).            Unit      Value Range      Description                  about 0.088°      -1,044,479 ~ 1,044,479(-255 ~ 255[rev])      4,096 resolution      Note In case of the Position Control Mode(Joint Mode) that rotates less than 360 degrees, any invalid Homing Offset(20) values will be ignored(valid range : -1,024 ~ 1,024).Moving Threshold(24)This value helps to determine whether the Dynamixel is in motion or not.When the absolute value of Present Velocity(128) is greater than the Moving Threshold(24), Moving(122) is set to ‘1’, otherwise it is cleared to ‘0’.                   Values      Description                  Unit      about 0.229 rpm      All velocity related Data uses the same unit              Range      0 ~ 1,023      -      Maximum Temperature Limit(31)This value limits operating temperature. When the Present Temperature(146) that indicates internal temperature of Dynamixel is greater than the Temperature Limit(31), the Over Heating Error Bit(0x04) and Hardware Error Bit(0x80) in the Hardware Error Status(70) will be set. If Overheating Error Bit(0x04) is configured in the Shutdown(63), Torque Enable(64) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(63) section.            Unit      Value Range      Description                  About 1°      0 ~ 100      0 ~ 100°      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage Limit(34, 32)It is the operation range of voltage.            Unit      Value Range      Description                  About 0.1V      50 ~ 160      5.0 ~ 16.0V      For example, if the value is 80, the voltage is 8V.If Present Voltage(42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.PWM Limit(36)This value indicates maximum PWM output. Goal PWM(100) can’t be configured with any values exceeding PWM Limit(36). PWM Limit(36) is commonly used in all operating mode as an output limit, therefore decreasing PWM output will result in decreasing torque and velocity. For more details, please refer to the Gain section of each operating modes.            Values      Description                  0(0%) ~ 885(100%)      885 = 100[%] output      Acceleration Limit(40)This value indicates maximum Profile Acceleration(108). Profile Acceleration(108) can’t be configured with any values exceeding Acceleration Limit(40). Profile Acceleration(108) is used in all operating mode except PWM Control Mode in order to generate a target trajectory. For more details, please refer to the Profile Velocity(112).            Unit      Value Range                  214.577 Rev/min2      0 ~ 32,767      Note Bit information of the Error field in the Status Packet is different from protocol 1.0 and protocol 2.0. This manual complies with protocol 2.0. Please refer to the Protocol section of e-Manual for more details about the protocol.Velocity Limit(44)This value indicates maximum velocity of Goal Velocity(104) and Profile Velocity(112). For more details, please refer to the Profile Velocity(112).            Unit      Value Range                  0.229rpm      0 ~ 1,023      Min/Max Position Limits(52, 48)These values limit maximum and minimum target positions for Position Control Mode(Joint Mode) within the range of 1 rotation(0 ~ 4,095). Therefore, Goal Position(116) should be configured within the position limit range. These values are not used in Extended Position Control Mode and Current-based Position Control Mode.            Unit      Value Range                  0.088°      0 ~ 4,095(1 rotation)      Note Max Position Limit(48) and Min Position Limit(52) are only used in Position Control Mode with a single turn.Shutdown(63)The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation. Each Bit is inclusively processed with the ‘OR’ logic, therefore, multiple options can be generated. For instance, when ‘0x05’ (binary : 00000101) is defined as Shutdown(63), Dynamixel can detect both Input Voltage Error(binary : 00000001) and Overheating Error(binary : 00000100). If those errors are detected, Torque Enable(64) is cleared to ‘0’ and the motor output becomes 0[%]. REBOOT is the only method to reset Torque Enable(64) to ‘1’(Torque ON) after the shutdown. The followings are detectable situations.            Bit      Item      Description                  Bit 7      -      Unused, Always ‘0’              Bit 6      -      Unused, Always ‘0’              Bit 5      Overload Error(default)      Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error(default)      Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error(default)      Detect internal temperature exceeds the configured operating temperature              Bit 1      -      Unused, Always ‘0’              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs, use below method to reboot Dynamixels.  H/W REBOOT : Turn off the power and turn on again  S/W REBOOT : Transmit REBOOT Instruction (For more details, please refer to the Reboot section of Protocol e-Manual.)Torque Enable(64)Controls Torque ON/OFF. Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected.            Value      Description                  0(Default)      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      Note Present Position(132) can be reset when Operating Mode(11) and Torque Enable(64) are updated. For more details, please refer to the Homing Offset(20) and Present Position(132).LED(65)Turn on or turn off the LED on Dynamixel.            Bit      Description                  0(Default)      Turn OFF the LED              1      Turn ON the LED      Status Return Level(68)This value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Registered Instruction(69)            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Hardware Error Status(70)This value indicates hardware error status.The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation. Each Bit is inclusively processed with the ‘OR’ logic, therefore, multiple options can be generated. For instance, when ‘0x05’ (binary : 00000101) is defined as Shutdown(63), Dynamixel can detect both Input Voltage Error(binary : 00000001) and Overheating Error(binary : 00000100). If those errors are detected, Torque Enable(64) is cleared to ‘0’ and the motor output becomes 0[%]. REBOOT is the only method to reset Torque Enable(64) to ‘1’(Torque ON) after the shutdown. The followings are detectable situations.            Bit      Item      Description                  Bit 7      -      Unused, Always ‘0’              Bit 6      -      Unused, Always ‘0’              Bit 5      Overload Error(default)      Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error(default)      Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error(default)      Detect internal temperature exceeds the configured operating temperature              Bit 1      -      Unused, Always ‘0’              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs, use below method to reboot Dynamixels.  H/W REBOOT : Turn off the power and turn on again  S/W REBOOT : Transmit REBOOT Instruction (For more details, please refer to the Reboot section of Protocol e-Manual.)Velocity PI Gain(78, 76)These values indicate Gains of Velocity Control Mode. Gains of DYNAMIXEL’s internal controller can be calculated from Gains of the Control Table as shown below. The constant in each equations include sampling time. Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and that of the Control Table is abbreviated to KVP(TBL).                   Controller Gain      Conversion Equations      Range      Description                  Velocity I Gain(76)      KVI      KVI = KVI(TBL) / 65536      0 ~ 16383      I Gain              Velocity P Gain(78)      KVP      KVP = KVP(TBL) / 128      0 ~ 16383      P Gain      Below figure is a block diagram describing the velocity controller in Velocity Control Mode. When the instruction transmitted from the user is received by DYNAMIXEL, it takes following steps until driving the horn.  An Instruction from the user is transmitted via DYNAMIXEL bus, then registered to Goal Velocity(104).  Goal Velocity(104) is converted to target velocity trajectory by Profile Acceleration(108).  The target velocity trajectory is stored at Velocity Trajectory(136).  PI controller calculates PWM output for the motor based on the target velocity trajectory.  Goal PWM(100) sets a limit on the calculated PWM output and decides the final PWM value.  The final PWM value is applied to the motor through an Inverter, and the horn of DYNAMIXEL is driven.  Results are stored at Present Position(132), Present Velocity(128), Present PWM(124) and Present Current(126).Note Ka stands for Anti-windup Gain and ‘β’ is a conversion coefficient of position and velocity that cannot be modified by users. For more details about the PID controller, please refer to the PID Controller at wikipedia.Position PID Gain(84, 82, 80), Feedforward 1st/2nd Gains(90, 88)These Gains are used in Position Control Mode and Extended Position Control Mode. Gains of Dynamixel’s internal controller can be calculated from Gains of the Control Table as shown below. The constant in each equations include sampling time. Position P Gain of Dynamixel’s internal controller is abbreviated to KPP and that of the Control Table is abbreviated to KPP(TBL).                   Controller Gain      Conversion Equations      Range      Description                  Position D Gain(80)      KPD      KPD = KPD(TBL) / 16      0 ~ 16,383      D Gain              Position I Gain(82)      KPI      KPI = KPI(TBL) / 65,536      0 ~ 16,383      I Gain              Position P Gain(84)      KPP      KPP = KPP(TBL) / 128      0 ~ 16,383      P Gain              Feedforward 2nd Gain(88)      KFF2nd      KFF2nd(TBL) / 4      0 ~ 16,383      Feedforward Acceleration Gain              Feedforward 1st Gain(90)      KFF1st      KFF1st(TBL) / 4      0 ~ 16,383      Feedforward Velocity Gain      Below figure is a block diagram describing the position controller in Position Control Mode and Extended Position Control Mode. When the instruction from the user is received by Dynamixel, it takes following steps until driving the horn.  An Instruction from the user is transmitted via Dynamixel bus, then registered to Goal Position(116).  Goal Position(116) is converted to target position trajectory and target velocity trajectory by Profile Velocity(112) and Profile Acceleration(108).  The target position trajectory and target velocity trajectory is stored at Position Trajectory(140) and Velocity Trajectory(136) respectively.  Feedforward and PID controller calculate PWM output for the motor based on target trajectories.  Goal PWM(100) sets a limit on the calculated PWM output and decides the final PWM value.  The final PWM value is applied to the motor through an Inverter, and the horn of Dynamixel is driven.  Results are stored at Present Position(132), Present Velocity(128), Present PWM(124) and Present Current(126).Note In case of PWM Control Mode, both PID controller and Feedforward controller are deactivated while Goal PWM(100) value is directly controlling the motor through an Inverter. In this manner, users can directly control the supplying voltage to the motor.Note Ka is an Anti-windup Gain that cannot be modified by users. For more details about the PID controller and Feedforward controller, please refer to the PID Controller and Feed Forward.BUS Watchdog(98)Bus Watchdog (98) is a safety device (Fail-safe) that stops the DYNAMIXEL if the communication between the controller and DYNAMIXEL communication (RS485, TTL) is disconnected due to an unspecified error.Communication is defined as all the Instruction Packet in the DYNAMIXEL Protocol.                   Values      Description                  Unit      20[ms]      -              Range      0      Deactivate Bus Watchdog Function, Clear Bus Watchdog Error              Range      1 ~ 127      Activate Bus Watchdog              Range      -1      Bus Watchdog Error Status      The Bus Watchdog function monitors the communication interval (time) between the controller and DYNAMIXEL when Torque Enable (64) is ‘1’.If the measured communication interval (time) is larger than Bus Watchdog (98), the DYNAMIXEL will stop. Bus Watchdog (98) will be changed to ‘-1’ (Bus Watchdog Error).If the Bus Watchdog Error screen appears, the Goal Value (Goal PWM(100), Goal Current(102), Goal Velocity(104), Goal Position(116)) will be changed to read-only-access.Therefore, when a new value is written to the Goal Value, a Range Error will be returned via the Status packet.If the value of Bus Watchdog (98) is changed to ‘0’, Bus Watchdog Error will be cleared.Note For details of Range Error, please refer to the protocol of the e-Manual.The following are examples of the operation of the Bus Watchdog function.  After setting the operating mode (11) to speed control mode, change the Torque Enable (64) to ‘1’.  If ‘50’ is written in the Goal Velocity (104), the DYNAMIXEL will rotate in CCW direction.  Change the value of Bus Watchdog (98) to ‘100’ (2,000 [ms]). (Activate Bus Watchdog Function)  If no instruction packet is received for 2,000 [ms], the DYNAMIXEL will stop. When it stops, the Profile Acceleration (108) and Profile Velocity (112) are applied as ‘0’.  The value of Bus Watchdog (98) changes to ‘-1’ (Bus Watchdog Error). At this time, the access to the Goal Value will be changed to read-only.  If ‘150’ is written to the Goal Velocity (104), Range Error will be returned via Status Packet.  If the value of Bus Watchdog (98) is changed to ‘0’, Bus Watchdog Error will be cleared.  If “150” is written in the Goal Velocity (104), the DYNAMIXEL will rotate in CCW direction.Goal PWM(100)In case of PWM Control Mode, both PID controller and Feedforward controller are deactivated while Goal PWM(100) value is directly controlling the motor through an Inverter. In other control modes, this value is used to limit PWM value. This value cannot exceed PWM Limit(36). Please refer to the Gain section in order to see how Goal PWM(100) affects to different control modes.            Range      Description                  -PWM Limit(36) ~ PWM Limit(36)      Initial Value of PWM Limit(36) : ‘885’      Goal Velocity(104)In case of Velocity Control Mode, Goal Velocity(104) can be used to set a target velocity. This value cannot exceed Velocity Limit(44). For now, Goal Velocity(104) is used for target velocity, but this value is not used to limit the velocity.            Unit      Value Range                  0.229 rpm      -Velocity Limit(44) ~ Velocity Limit(44)      Note The maximum velocity and maximum torque of DYNAMIXEL is affected by supplying voltage. Therefore, if supplying voltage changes, so does the maximum velocity. This manual complies with recommended supply voltage(12[V]).Note If Profile Acceleration(108) and Goal Velocity(104) are modified simultaneously, modified Profile Acceleration(108) will be used to process Goal Velocity(104).Profile Acceleration(108)The acceleration of Profile can be set with this value. Profile Acceleration(108) can be used in all control modes except Torque Control Mode. Profile Acceleration(108) cannot exceed Acceleration Limit(40). For more details, please refer to the Profile Velocity(112).            Unit      Value Range      Description                  214.577 Rev/min2      0 ~ Acceleration Limit(40)      ‘0’ stands for an infinite acceleration      Profile Velocity(112)The Maximum velocity of Profile can be set with this value. Profile Velocity(112) can be used in all control modes except Torque Control Mode and Velocity Control Mode. Profile Velocity(112) cannot exceed Velocity Limit(44). Velocity Control Mode only uses Profile Acceleration(108) instead of Profile Velocity(112).            Unit      Value Range      Description                  0.229 rpm      0 ~ Velocity Limit(44)      ‘0’ stands for an infinite velocity      The Profile is an acceleration/deceleration control method to reduce vibration, noise and load of the motor by controlling dramatically changing velocity and acceleration. It is also called Velocity Profile as it controls acceleration and deceleration based on velocity. DYNAMIXEL provides 4 different types of Profile. The following explains 4 Profiles and how to select them. Profiles are usually selected by a combination of Profile Velocity(112) and Profile Acceleration(108). Triangular and Trapezoidal Profiles exceptionally consider total travel distance(ΔPos, the distance difference between target position and current position) as an additional factor. For convenience, Profile Velocity(112) is abbreviated to VPRFL and Profile Acceleration(108) is abbreviated to VPRFL. ‘X’ stands for “Don’t Care” case.When given Goal Position(116), Dynamixel’s profile creates target velocity trajectory based on current velocity(initial velocity of the Profile). When Dynamixel receives updated target position from a new Goal Position(116) while it is moving toward the previous Goal Position(116), velocity smoothly varies for the new target velocity trajectory. Maintaining velocity continuity while updating target velocity trajectory is called Velocity Override. For a simple calculation, let’s assume that the initial velocity of the Profile is ‘0’. The following explains how Profile processes Goal Position(116) instruction in Position Control mode, Extended Position Control Mode, Current-based Position Control Mode.  An Instruction from the user is transmitted via Dynamixel bus, then registered to Goal Position(116).  Acceleration time(t1) is calculated from Profile Velocity(112) and Profile Acceleration(108).  Types of Profile is decided based on Profile Velocity(112), Profile Acceleration(108) and total travel distance(ΔPos, the distance difference between target position and current position).  Selected Profile type is stored at Moving Status(123).(Refer to the Moving Status(123))  Dynamixel is driven by the calculated target trajectory from Profile.  Target velocity trajectory and target position trajectory from Profile are stored at Velocity Trajectory(136) and Position Trajectory(140) respectively.  VPRFL_TRI of ③ and Travel time(t3) to reach Goal Position(116) is calculated as below.            Condition      Types of Profile                  VPRFL(112) = 0      Profile not used(Step Instruction)              (VPRFL(112) ≠ 0) &amp;amp; (APRF(108) = 0)      Rectangular Profile              (VPRFL(112) ≠ 0) &amp;amp; (APRF(108) ≠ 0) &amp;amp; (VPRFL_TRI ≤ VPRFL(112))      Triangular Profile              (VPRFL(112) ≠ 0) &amp;amp; (APRF(108) ≠ 0) &amp;amp; (VPRFL_TRI ＞ VPRFL(112))      Trapezoidal Profile      Note Dynamixel supports Jerk control in order to minimize dramatic change of acceleration. Therefore, actual travel time by the target trajectory of Profile could be longer than t3(t4 of above figure).  Note Velocity Control Mode only uses Profile Acceleration(108). Step and Trapezoidal Profiles are supported. Velocity Override and Jerk control are supported as well. Acceleration time(t1) can be calculated as below equation.Goal Velocity(104) / Profile Acceleration(108) * t1 = 64Goal Position(116)Target position can be set with Goal Position(116). From the front view of Dynamixels, CCW is an increasing direction whereas CW is a decreasing direction. The way to reaching Goal Position(116) is differ by 4 Profiles provided by Dynamixels. Please refer to the Profile Velocity(112) for more details.            Mode      Values      Description                  Position Control Mode      Min Position Limit(52) ~ Max Position Limit(48)      Initial Value : 0 ~ 4,095              Extended Position Control Mode      -1,048,575 ~ 1,048,575      -256[rev] ~ 256[rev]              Current-based Position Control Mode      -1,048,575 ~ 1,048,575      -256[rev] ~ 256[rev]                  Degree Conversion Constant      Description                  0.088°/Value      1[rev] : 0 ~ 4,095      Note If Profile Acceleration(108), Profile Velocity(112) and Goal Position(116) are modified simultaneously, Goal Position(116) is processed based on updated Profile Acceleration(108) and Profile Velocity(112).Realtime Tick(120)This value indicates Dynamixel’s time.            Unit      Value Range      Description                  1 ms      0 ~ 32,767      The value resets to ‘0’ when it exceeds 32,767      Moving(122)This value indicates whether Dynamixel is in motion or not. If absolute value of Present Velocity(128) is greater than Moving Threshold(24), Moving(122) is set to ‘1’. Otherwise, it will be cleared to ‘0’. However, this value will always be set to ‘1’ regardless of Present Velocity(128) while Profile is in progress with Goal Position(116) instruction.            Value      Description                  0      Movement is not detected              1      Movement is detected, or Profile is in progress(Goal Position(116) instruction is being processed)      Moving Status(123)This value provides additional information about the movement. Following Error Bit(0x08) and In-Position Bit(0x01) only work with Position Control Mode, Extended Position Control Mode, Current-based Position Control Mode.                          Details      Description                  Bit 7      0x80      -      Unused              Bit 6      0x40      -      Unused              Bit 5~Bit 4      0x30      Profile Type(0x30)Profile Type(0x20)Profile Type(0x10)Profile Type(0x00)      Trapezoidal Velocity ProfileTriangular Velocity ProfileRectangular Velocity ProfileProfile is not used              Bit 3      0x08      Following Error      Dynamixel fails to reach target position trajectory              Bit 2      0x04      -      Unused              Bit 1      0x02      Profile Ongoing      Profile is in progress with Goal Position(116) instruction              Bit 0      0x01      In-Position      Dynamixel is reached to target position      Present PWM(124)This value indicates present PWM. For more details, please refer to the Goal PWM(100).Present Load(126)It means currently applied load.For example, the value is 512, it means the load is detected in the direction of CCW about 50% of the maximum torque.            Unit      Value Range      Description                  0.1%      -1,000 ~ 1,000      Positive(CCW Load), Negative(CW Load)      Note Present load is an inferred value based on the internal output value; not a measured value using torque sensor, etc. Therefore, it may be inaccurate for measuring weight or torque. It is recommended to use it for predicting the direction and size of the force being applied to the joint.Present Velocity(128)This value indicates present Velocity. For more details, please refer to the Goal Velocity(104).Present Position(132)This value indicates present Position. For more details, please refer to the Goal Position(116).  Note Present Position(132) represents 4 byte continuous range(-2,147,483,648 ~ 2,147,483,647) when Torque is turned off regardless of Operating Mode(11). However, Present Position(132) will be reset in those cases:  Present Position(132) is reset with the value within 1 rev (0 ~ 4,095) when Operating Mode(11) is changed to Position Control Mode.  Present Position(132) is reset with the value within 1 rev (0 ~ 4,095) when Torque is turned on in Position Control Mode.Reset Present Position(132) value can be affected by Homing Offset(20).Velocity Trajectory(136)This is a target velocity trajectory created by Profile. Operating method can be changed based on control mode. For more details, please refer to the Profile Velocity(112).  Velocity Control Mode : When Profile reaches to the endpoint, Velocity Trajectory(136) becomes equal to Goal Velocity(104).  Position Control Mode, Extended Position Control Mode : Velocity Trajectory is used to create Position Trajectory(140). When Profile reaches to an endpoint, Velocity Trajectory(136) is cleared to ‘0’.Position Trajectory(140)This is a target position trajectory created by Profile. This value is only used in Position Control Mode, Extended Position Control Mode. For more details, please refer to the Profile Velocity(112).Present Input Voltage(144)This value indicates present voltage that is being supplied. For more details, please refer to the Max/Min Voltage Limit(32, 34).Present Temperature(146)This value indicates internal temperature of Dynamixel. For more details, please refer to the Temperature Limit(31).Indirect Address, Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses. Sequential addresses increase Instruction Packet efficiency. Addresses that can be defined as Indirect Address is limited to RAM area(Address 64 ~ 661).If specific address is allocated to Indirect Address, Indirect Address inherits features and properties of the Data from the specific Address. Property includes Size(Byte length), value range, and Access property(Read Only, Read/Write). For instance, allocating 65(Address of LED) to Indirect Address 1(168), Indirect Data 1(224) can perform exactly same as LED(65).Example 1 Allocating Size 1 byte LED(65) to Indirect Data 1(224).  Indirect Address 1(168) : change the value to ‘65’ which is the address of LED.  Set Indirect Data 1(224) to ‘1’ : LED(65) also becomes ‘1’ and LED is turned on.  Set Indirect Data 1(224) to ‘0’ : LED(65) also becomes ‘0’ and LED is turned off.Example 2 Allocating Size 4 byte Goal Position(116) to Indirect Data 2(225), 4 sequential bytes have to be allocated.  Indirect Address 2(170) : change the value to ‘116’ which is the first address of Goal Position.  Indirect Address 3(172) : change the value to ‘117’ which is the second address of Goal Position.  Indirect Address 4(174) : change the value to ‘118’ which is the third address of Goal Position.  Indirect Address 5(176) : change the value to ‘119’ which is the fourth address of Goal Position.  Set 4 byte value ‘1,024’ to Indirect Data 2 : Goal Position(116) also becomes ‘1024’ and Dynamixel moves.            Indirect Address Range      Description                  64 ~ 661      EEPROM address can’t be assigned to Indirect Address      Note In order to allocate Data in the Control Table longer than 2[byte] to Indirect Address, all address must be allocated to Indirect Address like the above Example 2.Note Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.How to AssembleFrames      FR07-B101 Option Frame        FR07-F101_FR07-X101 Option Frame        FR07-H101 Option Frame        FR07-S101 Option Frame  Horns      HN07-I101        HN07-N101  Combination StructuresMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideVideosQuick StartDrawingsDownload MX-28AT_AR.pdf",
        "url": " http://localhost:4000/docs/en/dxl/mx/mx-28-2/"
      } ,
  
      "docs-en-dxl-mx-mx-28":  {
        "title": "MX-28",
      "content"	 : "MX-28Note Compliance has been replaced with PID Gains.Note Although the MX-28AT (TTL) and MX-28AR (RS-485) differ in communications protocols both have the same features and perform equally. (TTL uses 3-pin connectors while RS-485 uses 4)Note In order to use Protocol 2.0, please update the firmware to V39 or above. (Update firmware using R+ Manager 2.0)Warning For MX-28(2.0) Protocol, please refer to the MX-28(2.0) Control Table as they are different.Specifications            Item      Specifications                  MCU      ST CORTEX-M3 ( STM32F103C8 @ 72MHZ,32BIT)              Position Sensor      Contactless absolute encoder (12BIT,360 DEGREE)Maker : ams (www.ams.com), Part No : AS5045              Motor      Maxon              Baud Rate      8000 bps ~ 4.5 Mbps              Control Algorithm      PID Control              Resolution      0.088°              Running Degree      0° ~ 360°Endless Turn              Weight      MX-28AR, MX-28AT : 77gMX-28R, MX-28T : 72g              Dimensions (W x H x D)      35.6mm x 50.6mm x 35.5mm              Gear Ratio      193 : 1              Stall Torque      2.3Nm @ 11.1V, 1.3A2.5Nm @ 12V, 1.4A3.1Nm @ 14.8V, 1.7A              No Load Speed      50rpm @ 11.1V55rpm @ 12V67rpm @ 14.8V              Operating Temperature      -5°C ~ +80°C              Input Voltage      10 ~ 14.8V (Recommended : 12V)              Standby Current      100mA              Command Signal      Digital Packet              Protocol Type      MX-28T/MX-28AT: Half Duplex Asynchronous Serial CommunicationMX-28R/MX-28AR: RS485 Asynchronous Serial Communication(8bit,1stop, No Parity)              Physical Connection      MX-28T/MX-28AT: TTL Level Multidrop BUSMX-28R/MX-28AR: RS485 Multidrop BUS              ID      0 ~ 253              Feedback      Position, Temperature, Load, Input Voltage, etc              Material      Full Metal GearMX-28AR/MX-28AT: Metal(Front), Engineering Plastic(Middle, Back)MX-28R/MX-28T: Engineering Plastic(Front, Middle, Back)      Performance GraphStall torque Peak stall torque read from transient statePerformance Graph(N-T Curve) A graph shows torque measured in stable condition while increasing load. Normally, stall torque is bigger than maximum torque on performance graph.Caution When connecting to power supply:  For the stable power supply, we recommend using ROBOTIS controller or SMPS2Dynamixel.  Connect your DYNAMIXEL to power supply while it’s off and turn on/off with the power switch.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 1.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(24) is ‘0’ and Dynamixel is in idle state.SizeThe Size of data is 1 or 2 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. 2 bytes data will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      29              2      1      Firmware Version      Firmware Version      R      -              3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      Counter-Clockwise Angle Limit      RW      4095              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      160              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36              20      2      Multi Turn Offset      Adjust Position with Offset      RW      0              22      1      Resolution Divider      Divider for Position Resolution      RW      1      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On/Off      RW      0              25      1      LED      Status LED On/Off      RW      0              26      1      D Gain      Derivative Gain      RW      0              27      1      I Gain      Integral Gain      RW      0              28      1      P Gain      Proportional Gain      RW      32              30      2      Goal Position      Target Position      RW      -              32      2      Moving Speed      Moving Speed(Moving Velocity)      RW      -              34      2      Torque Limit      Torque Limit(Goal Torque)      RW      ADD 14&amp;amp;15              36      2      Present Position      Present Position      R      -              38      2      Present Speed      Present Speed      R      -              40      2      Present Load      Present Load      R      -              42      1      Present Voltage      Present Voltage      R      -              43      1      Present Temperature      Present Temperature      R      -              44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      0              73      1      Goal Acceleration      Goal Acceleration      RW      0      Control Table DescriptionModel Number (0)This address stores model number of the DYNAMIXEL.Firmware Version (2)This address stores firmware version of the DYNAMIXEL.ID (3)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate (4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate(bps)      Margin of Error                  1      1M      0.000%              3      500,000      0.000%              4      400,000      0.000%              7      250,000      0.000%              9      200,000      0.000%              16      115200      -2.124%              34(Default)      57600      0.794%              103      19200      -0.160%              207      9600      -0.160%      Note Less than 3% of the baud rate error margin will not affect to UART communication.For BPS over 250 values :            Value      Baud Rate      Margin of Error                  250      2,250,000      0.000%              251      2,500,000      0.000%              252      3,000,000      0.000%      Return Delay Time (5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      CW/CCW Angle Limit(6, 8)The angle limit allows the motion to be restrained.The range and the unit of the value is the same as Goal Position(Address 30, 31).  CW Angle Limit: the minimum value of Goal Position(Address 30, 31)  CCW Angle Limit: the maximum value of Goal Position(Address 30, 31)The following three modes can be set pursuant to the value of CW and CCW.            Operation Type      CW / CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0              Multi-turn Mode      both are 4095      The wheel mode can be used to wheel-type operation robots since motors of the robots spin infinitely. The joint mode can be used to multi-joints robot since the robots can be controlled with specific angles. Multi-turn mode allows joint mode control over multiple rotations (Position range : -28,672 ~ 28,672)The Maximum Temperature Limit            Unit      Value Range                  About 1°      0 ~ 100      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage LimitIt is the operation range of voltage.            Unit      Value Range      Description                  About 0.1V      50 ~ 160      5.0 ~ 16.0V      For example, if the value is 80, the voltage is 8V.If Present Voltage(42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.Max TorqueIt is the torque value of maximum output. 0 to 1,023 (0x3FF) can be used, and the unit is about 0.1%.For example, Data 1,023 (0x3FF) means that Dynamixel will use 100% of the maximum torque it can produce while Data 512 (0x200) means that Dynamixel will use 50% of the maximum torque. When the power is turned on, Torque Limit (Address 34 and 35) uses the value as the initial value.Status Return LevelThis value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Alarm LED / Alarm ShutdownDynamixel can protect itself by detecting errors occur during the operation.The errors can be set are as the table below.            Bit      Item      Description                  Bit 7      0      -              Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’. That is, if 0x05 (binary 00000101) is set, both Input Voltage Error and Overheating Error can be detected.If errors occur, in case of Alarm LED, the LED blinks; in case of Alarm Shutdown, the motor output becomes 0 % by resetting the value of Torque Limit(34) to 0.Multi-turn OffsetAdjusts offset position. This offset value is added to the Present Position(36).Initial value is 0 and the range is from -24,576 to 24,576.Dynamixel with a Present position of 2,048 with an offset of 1,024 will return an adjusted Present position of 3,072.Note This offset feature is only available in multi-turn mode.Resolution DividerIt allows the user to change Dynamixel’s resolution.The default Resolution Divider Value is set as 1. (1 ~ 4 available)When resolution is lowered, revolutions (in both directions) can be increased (up to 28 turns in each direction).Present Position = Real Position / Resolution DividerFor example, a Real Position of 2048 with a Resolution Divider set as 2 will yield a Present Position value of 1024 (2048/2 = 1024). A Dynamixel with Resolution Divider set as 2 will have a resolution 2048 for a single revolution.The Present Position can be obtained while Multi-turn Offset and Resolution Divider are taken into account.Present position = (Real Position / Resolution Divider) + Multi-turn OffsetFor example, a Dynamixel with a Real Position of 2048 with a Resolution Divider set as 4 and Multi-turn Offset as 1024 will yield a Present Position of 1535 ((2048/4) + 1024 = 1535).Note: This feature is only applied in multi-turn mode and will be ignored in other modes.Torque Enable            Value      Description                  0      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      LEDTurn on or turn off the LED on Dynamixel.            Bit      Description                  0(Default)      Turn OFF the LED              1      Turn ON the LED      PID GainsMX series will use the PID controller as a main control method.P gain : value of proportional band.I gain : value of integral action.D Gain : value of derivative action.Gains values are in between 0~254.Kp = P Gain / 8Ki = I Gain * 1,000 / 2,048Kd = D Gain * 4 / 1,000The relationship between Compliance Slop and PID            Slope      P Gain                  8      128              16      64              32      32              64      16              128      8      The less the P gain, The larger the back lash, and the weaker the amount of output near goal position.At some extent, it is like a combined concept of margine and slope.It does not exactly match the previous concept of compliance. So it is obvious if you see the difference in terms of motion.Explanation for PID required.For the brief explanation about general PID, please refer to the website(link) below.http://en.wikipedia.org/wiki/PID_controllerFYI, PID control theory is not only limited to the control of motor(actuator) but is a generic theory that can be applied to all kinds of control.Goal PositionIt is a position value of destination.0 to 4,095 (0xFFF) is available.  The unit is 0.088°.If Goal Position is out of the range, Angle Limit Error Bit (Bit1) of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED/Shutdown.The picture above is the front view of DynamixelIn multi-turn mode Dynamixel has a range from -28,672 to 28,672 (can turn up to 7 revolutions in either CW or CCW direction).When resolution divider is set to a different value revolutions can increase.Note If it is set to Wheel Mode, Goal Position value is not used.Moving Speed      Join Mode, Multi-Turn modeIt is a moving speed to Goal Position.0~1023 (0X3FF) can be used, and the unit is about 0.114rpm.If it is set to 0, it means the maximum rpm of the motor is used without controlling the speed.If it is 1023, it is about 116.62rpm.For example, if it is set to 300, it is about 34.2 rpm.However, the rpm will not exceed the No Load Speed.        Wheel ModeIt is a moving speed to Goal direction.0~2047 (0X7FF) can be used, and the unit is about 0.114rpm.If a value in the range of 0~1023 is used, it is stopped by setting to 0 while rotating to CCW direction.If a value in the range of 1024~2047 is used, it is stopped by setting to 1024 while rotating to CW direction.That is, the 10th bit becomes the direction bit to control the direction.    Note Wheel mode allows to check max rpm. Any values higher than max rpm will not take effect.  Torque LimitIt is the value of the maximum torque limit.0 ~ 1,023(0x3FF) is available, and the unit is about 0.1%.For example, if the value is 512, it is about 50%; that means only 50% of the maximum torque will be used.If the power is turned on, the value of Max Torque (Address 14, 15) is used as the initial value.Note If the function of Alarm Shutdown is triggered, the motor loses its torque because the value becomes 0. Once error conditions are resolved and this value is changed to the value other than 0, the motor can be operated again.Present PositionIt is the current position value of Dynamixel.The range of the value is 0~4095 (0xFFF), and the unit is 0.088 degree.The picture above is the front view of Dynamixel.In multi-turn mode, the range is from -28672 to 28672 with unit values dependent on Resolution Divider (0.088 * Resolution Divider)Note In multi-turn mode, Present position depends on resolution divider and multi-turn offset For more information turn to the section on Multi Turn offset and Resolution Divider.Present SpeedIs the current moving speed.0 ~ 2,047 (0x000 ~ 0x7FF) can be used.If a value is in the rage of 0 ~ 1,023 then the motor rotates to the CCW direction.If a value is in the rage of 1,024 ~ 2,047 then the motor rotates to the CW direction.The 10th bit becomes the direction bit to control the direction; 0 and 1,024 are equal.The value unit is about 0.11rpm.For example, if it is set to 300 then the motor is moving to the CCW direction at a rate of about 34.33rpm.Present LoadIt means currently applied load.The range of the value is 0~2047, and the unit is about 0.1%.If the value is 0~1,023, it means the load works to the CCW direction.If the value is 1,024~2,047, it means the load works to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 1,024 is equal to 0.For example, the value is 512, it means the load is detected in the direction of CCW about 50% of the maximum torque.            Bit      15 ~ 11      10      9 ~ 0                  Value      0      Load Direction      Data (Load Ratio)      Note CCW Load : Load Direction = 0, CW Load : Load Direction = 1Note Present load is an inferred value based on the internal output value; not a measured value using torque sensor, etc. Therefore, it may be inaccurate for measuring weight or torque. It is recommended to use it for predicting the direction and size of the force being applied to the joint.Present VoltageIt is the size of the present voltage supplied.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)If Present Voltage(42) value is out of range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18.Present TemperatureIt is the internal temperature of Dynamixel in Celsius.Data value is identical to the actual temperature in Celsius. For example, if the data value is 85 (0x55), the current internal temperature is 85°C.Registered Instruction            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Moving            Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock            Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.PunchMinimum current to drive motor. This value ranges from 0x20 to 0x3FF.Goal AccelerationThis is Goal Acceleration value.It can be used from 0~254(0XFE) and the unit is approximately 8.583° / sec2.When it is set to 0, there is no control over acceleration and moves with the maximum acceleration of the motor.When the goal speead is set to 0, there is no control over acceleration and moves with the maximum acceleration of the motor.When it is set to 254, it becomes 2,180° / sec2.For example, the current speed of Dynamixel is 0, and Goal acceleration is 10.The speed of Dynamixel after 1 second will be 14.3 RPM.How to AssembleFrames      FR07-B101 Option Frame        FR07-F101_FR07-X101 Option Frame        FR07-H101 Option Frame        FR07-S101 Option Frame  Horns      HN07-I101        HN07-N101  Combination StructuresMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideVideosQuick StartDrawingsDownload MX-28AT_AR.pdf",
        "url": " http://localhost:4000/docs/en/dxl/mx/mx-28/"
      } ,
  
      "docs-en-dxl-mx-mx-64-2":  {
        "title": "MX-64(2.0)",
      "content"	 : "MX-64(Protocol 2.0)Specifications            Item      Specifications                  MCU      ST CORTEX-M3 ( STM32F103C8 @ 72MHZ,32BIT)              Position Sensor      Contactless absolute encoder (12BIT,360 DEGREE)Maker : ams (www.ams.com), Part No : AS5045              Motor      Maxon              Baud Rate      8000 bps ~ 4.5 Mbps              Control Algorithm      PID Control              Resolution      0.088°              Operation Modes      Current Control ModeVelocity Control ModePosition Control Mode(0° ~ 360°)Extended Position Ctrl Mode(Multi-turn)Current-based Position Ctrl ModePWM Control Mode              Weight      MX-64AR/AT : 135g, MX-64R/T : 126g              Dimensions (W x H x D)      40.2mm x 61.1mm x 41mm              Gear Ratio      200 : 1              Stall Torque      5.5Nm @ 11.1V, 3.9A6.0Nm @ 12V, 4.1A7.3Nm @ 14.8V, 5.2A              No Load Speed      58rpm @ 11.1V63rpm @ 12V78rpm @ 14.8V              Operating Temperature      -5°C ~ +80°C              Input Voltage      10 ~ 14.8V (Recommended : 12V)              Standby Current      100mA              Command Signal      Digital Packet              Protocol Type      MX-64T/MX-64AT: Half Duplex Asynchronous Serial CommunicationMX-64R/MX-64AR: RS485 Asynchronous Serial Communication(8bit,1stop, No Parity)              Physical Connection      MX-64T/MX-64AT: TTL Level Multidrop BUSMX-64R/MX-64AR: RS485 Multidrop BUS              ID      0 ~ 252              Feedback      Position, Velocity, Current, Realtime Tick, Trajectory, Input Voltage, etc              Material      Full Metal GearMX-64AR/AT: Metal(Front), Engineering Plastic(Middle, Back)MX-64R/T: Engineering Plastic(Front, Middle, Back)      Performance GraphStall torque Peak stall torque read from transient statePerformance Graph(N-T Curve) A graph shows torque measured in stable condition while increasing load. Normally, stall torque is bigger than maximum torque on performance graph.Caution When connecting to power supply:  For the stable power supply, we recommend using ROBOTIS controller or SMPS2Dynamixel.  Connect your DYNAMIXEL to power supply while it’s off and turn on/off with the power switch.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 2.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(64) is cleared to ‘0’.SizeThe Size of data varies from 1 to 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. For data larger than 2 bytes will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      311              2      4      Model Information      Model Information      R      -              6      1      Firmware Version      Firmware Version      R      -              7      1      ID      DYNAMIXEL ID      RW      1              8      1      Baud Rate      Communication Baud Rate      RW      1              9      1      Return Delay Time      Response Delay Time      RW      250              10      1      Drive Mode      Drive Mode      RW      0              11      1      Operating Mode      Operating Mode      RW      3              12      1      Secondary(Shadow) ID      Secondary ID      RW      255              13      1      Protocol Version      Protocol Version      RW      2              20      4      Homing Offset      Home Position Offset      RW      0              24      4      Moving Threshold      Velocity Threshold for Movement Detection      RW      10              31      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              32      2      Max Voltage Limit      Maximum Input Voltage Limit      RW      160              34      2      Min Voltage Limit      Minimum Input Voltage Limit      RW      95              36      2      PWM Limit      Maximum PWM Limit      RW      885              38      2      Current Limit      Maximum Current Limit      RW      1941              40      4      Acceleration Limit      Maximum Acceleration Limit      RW      32767              44      4      Velocity Limit      Maximum Velocity Limit      RW      435              48      4      Max Position Limit      Maximum Position Limit      RW      4095              52      4      Min Position Limit      Minimum Position Limit      RW      0              63      1      Shutdown      Shutdown Error Information      RW      52      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  64      1      Torque Enable      Motor Torque On/Off      RW      0              65      1      LED      Status LED On/Off      RW      0              68      1      Status Return Level      Select Types of Status Return      RW      2              69      1      Registered Instruction      REG_WRITE Instruction Flag      R      0              70      1      Hardware Error Status      Hardware Error Status      R      0              76      2      Velocity I Gain      I Gain of Velocity      RW      1920              78      2      Velocity P Gain      P Gain of Velocity      RW      100              80      2      Position D Gain      D Gain of Position      RW      0              82      2      Position I Gain      I Gain of Position      RW      0              84      2      Position P Gain      P Gain of Position      RW      850              88      2      Feedforward 2nd Gain      2nd Gain of Feed-Forward      RW      0              90      2      Feedforward 1st Gain      1st Gain of Feed-Forward      RW      0              98      1      BUS Watchdog      Dynamixel BUS Watchdog      RW      0              100      2      Goal PWM      Target PWM Value      RW      -              102      2      Goal Current      Target Current Value      RW      -              104      4      Goal Velocity      Target Velocity Value      RW      -              108      4      Profile Acceleration      Acceleration Value of Profile      RW      0              112      4      Profile Velocity      Velocity Value of Profile      RW      0              116      4      Goal Position      Target Position      RW      -              120      2      Realtime Tick      Count Time in Millisecond      R      -              122      1      Moving      Movement Flag      R      0              123      1      Moving Status      Detailed Information of Movement Status      R      0              124      2      Present PWM      Present PWM Value      R      -              126      2      Present Current      Present Current Value      R      -              128      4      Present Velocity      Present Velocity Value      R      -              132      4      Present Position      Present Position Value      R      -              136      4      Velocity Trajectory      Target Velocity Trajectory from Profile      R      -              140      4      Position Trajectory      Target Position Trajectory from Profile      R      -              144      2      Present Input Voltage      Present Input Voltage      R      -              146      1      [Present Temperature]      Present Internal Temperature      R      -              168      2      Indirect Address 1      Indirect Address 1      RW      224              170      2      Indirect Address 2      Indirect Address 2      RW      225              172      2      Indirect Address 3      Indirect Address 3      RW      226              …      …      …      …      …      …              218      2      Indirect Address 26      Indirect Address 26      RW      249              220      2      Indirect Address 27      Indirect Address 27      RW      250              222      2      Indirect Address 28      Indirect Address 28      RW      251              224      1      Indirect Data 1      Indirect Data 1      RW      0              225      1      Indirect Data 2      Indirect Data 2      RW      0              226      1      Indirect Data 3      Indirect Data 3      RW      0              …      …      …      …      …      …              249      1      Indirect Data 26      Indirect Data 26      RW      0              250      1      Indirect Data 27      Indirect Data 27      RW      0              251      1      Indirect Data 28      Indirect Data 28      RW      0              578      2      Indirect Address 29      Indirect Address 29      RW      634              580      2      Indirect Address 30      Indirect Address 30      RW      635              582      2      Indirect Address 31      Indirect Address 31      RW      636              …      …      …      …      …      …              628      2      Indirect Address 54      Indirect Address 54      RW      659              630      2      Indirect Address 55      Indirect Address 55      RW      660              632      2      Indirect Address 56      Indirect Address 56      RW      661              634      1      Indirect Data 29      Indirect Data 29      RW      0              635      1      Indirect Data 30      Indirect Data 30      RW      0              636      1      Indirect Data 31      Indirect Data 31      RW      0              …      …      …      …      …      …              659      1      Indirect Data 54      Indirect Data 54      RW      0              660      1      Indirect Data 55      Indirect Data 55      RW      0              661      1      Indirect Data 56      Indirect Data 56      RW      0      Caution Protocol 1.0 does not support addresses greater than 256. Therefore, Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.Control Table DescriptionCaution Data in the EEPROM Area can only be written when the value of Torque Enable(64) is cleared to ‘0’.Model Number(0)This address stores model number of the DYNAMIXEL.Firmware Version(6)This address stores firmware version of the DYNAMIXEL.ID(7)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate(4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate      Margin of Error                  7      4.5M      0.000%              6      4M      0.000%              5      3M      0.000%              4      2M      0.000%              3      1M      0.000%              2      115,200      0.000%              1(Default)      57,600      0.000%              0      9,600      0.000%      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time(5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      Drive Mode(10)Drive Mode is availabe from the firmware version 38.            Bit      Item      Description                  Bit 1 ~ 7      N/A      Unused, always ‘0’              Bit 0      Direction of Rotation      Normal Mode(0): CCW(Positive), CW(Negative)Reverse Mode(1): CCW(Negative), CW(Positive)      Operating Mode(11)            Value      Operating Mode      Description                  0      Current Control Mode      DYNAMIXEL only controls current(torque) regardless of speed and position. This mode is ideal for a gripper or a system that only uses current(torque) control or a system that has additional velocity/position controllers.              1      Velocity Control Mode      This mode controls velocity. This mode is identical to the Wheel Mode(endless) from existing DYNAMIXELs. This mode is ideal for wheel-type robots.              3(Default)      Position Control Mode      This mode controls position. This mode is identical to the Joint Mode from existing DYNAMIXELs. Operating position range is limited by Max Position Limit(48) and Min Position Limit(52). This mode is ideal for articulated robots that each joint rotates less than 360 degrees.              4      Extended Position Control Mode(Multi-turn)      This mode controls position. This mode is identical to the Multi-Turn Mode from existing DYNAMIXELs. 512 turns are supported(-256[rev] ~ 256[rev]). This mode is ideal for multi-turn wrists or conveyer systems or a system that requires an additional reduction gear.              5      Current-based Position Control Mode      This mode controls both position and current(torque). Up to 512 turns are supported(-256[rev] ~ 256[rev]). This mode is ideal for a system that requires both position and current control such as articulated robots or grippers.              16      PWM Control Mode  (Voltage Control Mode)      This mode directly controls PWM output. (Voltage Control Mode)        Note Switching Operating Mode will reset gains(PID, Feedfoward) properly to the selected Operating Mode. The profile generator and limits will also be reset.  Profile Velocity(112), Profile Acceleration(108) : Reset to ‘0’  Goal PWM(100), Goal Current(102) : Reset to PWM Limit(36), Current Limit(38) respectively  Current-based Position Control Mode : Reset to Position Gain(PID) and PWM Limit(36) values.Changed Position Gain(PID) and PWM Limit(36) values can be read from the Control Table.Note PWM is the abbreviation for Pulse Width Modulation that modulates PWM Duty to control motors. The PWM Control Mode changes pulse width to control average supply voltage to the motor and this technique is widely used in the motor control field. Therefore, PWM Control Mode uses Goal PWM(100) value to control supply voltage for DYNAMIXEL. PWM Control Mode is similar to the Wheel Mode of DYNAMIXEL AX and RX series.Secondary(Shadow) ID(12)Set the Dynamixel’s Secondary ID. Secondary ID(12) is a value to identify each Dynamixel, just like the ID(7).However, unlike ID(7), Secondary ID(12) is not a unique value.Therefore, Dynamixels with the same Secondary ID value form a group.The differences between Secondary ID(12) and ID(7) are as follows :  Secondary ID(12) is not a unique value. i.e., a lot of Dynamixels may have the same Secondary ID value.  ID(7) has a higher priority than Secondary ID(12). i.e., if Secondary ID(12) and ID(7) are the same, ID(7) will be applied first.  The EEPROM area of the Control Table cannot be modified with Secondary ID(12). Only the RAM area can be modified.  If Instruction Packet ID is the same as Secondary ID(12), the Status Packet will not be returned.  If the value of Secondary ID(12) is 253 or higher, the Secondary ID function is deactivated.            Values      Description                  0 ~ 252      Activate Secondary ID function              253 ~ 255      Deactivate Secondary ID function, Default value ‘255’      The following are examples of operation when there are five Dynamixels with ID (7) set from 1 to 5.  Set all five Dynamixels’ Secondary ID(12) to ‘5’.  Send Write Instruction Packet(ID = 1, LED(65) = 1).  Turn on LED of Dynamixel with ID ‘1’ and return the Status Packet.  Send Write Instruction Packet(ID = 5, LED(65) = 1).  Turn on LED on five Dynamixels. However, Status Packet of Dynamixel with ID ‘5’ will be returned.  Set the Secondary ID(12) of all five Dynamixels to ‘100’.  Send Write Instruction Packet(ID = 100, LED(65) = 0).  Turn off LED on five Dynamixels. However, as there is no Dynamixel with ID ‘100’, Status Packet is not returned.Protocol Version(13)Users can select Dynamixel protocol version (1.0 and 2.0).It is recommended to use an identical protocol version for multiple Dynamixels.            Value      Protocol Version      Compatible Dynamixels                  1      1.0      AX Series, DX Series, RX Series, EX Series, MX Series with Firmware below v39              2(default)      2.0      MX-28/64/106 with Firmware v39 or above, X Series, Pro Series      Note The protocol 2.0 is greatly enhanced from the protocol 1.0. Accessing some of the Control Table area might be denied if protocol 1.0 is selected. This manual complies with protocol 2.0. Please refer to the Protocol section of e-Manual for more details about the protocol.Homing Offset(20)Users can adjust the Home position by setting Home Offset(20). The Homing Offset value is added to the Present Position(132).Present Position(132) = Actual Position + Homing Offset(20).            Unit      Value Range      Description                  about 0.088°      -1,044,479 ~ 1,044,479(-255 ~ 255[rev])      4,096 resolution      Note In case of the Position Control Mode(Joint Mode) that rotates less than 360 degrees, any invalid Homing Offset(20) values will be ignored(valid range : -1,024 ~ 1,024).Moving Threshold(24)This value helps to determine whether the Dynamixel is in motion or not.When the absolute value of Present Velocity(128) is greater than the Moving Threshold(24), Moving(122) is set to ‘1’, otherwise it is cleared to ‘0’.                   Values      Description                  Unit      about 0.229 rpm      All velocity related Data uses the same unit              Range      0 ~ 1,023      -      Maximum Temperature Limit(31)This value limits operating temperature. When the Present Temperature(146) that indicates internal temperature of Dynamixel is greater than the Temperature Limit(31), the Over Heating Error Bit(0x04) and Hardware Error Bit(0x80) in the Hardware Error Status(70) will be set. If Overheating Error Bit(0x04) is configured in the Shutdown(63), Torque Enable(64) is cleared to ‘0’ and Torque will be disabled. For more details, please refer to the Shutdown(63) section.            Unit      Value Range      Description                  About 1°      0 ~ 100      0 ~ 100°      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage Limit(34, 32)It is the operation range of voltage.            Unit      Value Range      Description                  About 0.1V      50 ~ 250      5.0 ~ 25.0V      For example, if the value is 80, the voltage is 8V.If Present Voltage(42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.PWM Limit(36)This value indicates maximum PWM output. Goal PWM(100) can’t be configured with any values exceeding PWM Limit(36). PWM Limit(36) is commonly used in all operating mode as an output limit, therefore decreasing PWM output will result in decreasing torque and velocity. For more details, please refer to the Gain section of each operating modes.            Values      Description                  0(0%) ~ 885(100%)      885 = 100[%] output      Current Limit (38)This value indicates maximum current(torque) output limit. Goal Current(102) can’t be configured with any values exceeding Current Limit(38). The Current Limit(38) is used in Torque Control Mode and Current-based Position Control Mode, therefore decreasing Current Limit(38) will result in decreasing torque of DYNAMIXEL. For more details, please refer to the Position PID Gain(80 ~ 84).            Unit      Value Range                  about  3.36[mA]      0 ~ 1,941      Note Current Limit(38) could be differ by each DYNAMIXEL so please check the Control Table.Acceleration Limit(40)This value indicates maximum Profile Acceleration(108). Profile Acceleration(108) can’t be configured with any values exceeding Acceleration Limit(40). Profile Acceleration(108) is used in all operating mode except PWM Control Mode in order to generate a target trajectory. For more details, please refer to the Profile Velocity(112).            Unit      Value Range                  214.577 Rev/min2      0 ~ 32,767      Note Bit information of the Error field in the Status Packet is different from protocol 1.0 and protocol 2.0. This manual complies with protocol 2.0. Please refer to the Protocol section of e-Manual for more details about the protocol.Velocity Limit(44)This value indicates maximum velocity of Goal Velocity(104) and Profile Velocity(112). For more details, please refer to the Profile Velocity(112).            Unit      Value Range                  0.229rpm      0 ~ 1,023      Min/Max Position Limits(52, 48)These values limit maximum and minimum target positions for Position Control Mode(Joint Mode) within the range of 1 rotation(0 ~ 4,095). Therefore, Goal Position(116) should be configured within the position limit range. These values are not used in Extended Position Control Mode and Current-based Position Control Mode.            Unit      Value Range                  0.088°      0 ~ 4,095(1 rotation)      Note Max Position Limit(48) and Min Position Limit(52) are only used in Position Control Mode with a single turn.Shutdown(63)The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation. Each Bit is inclusively processed with the ‘OR’ logic, therefore, multiple options can be generated. For instance, when ‘0x05’ (binary : 00000101) is defined as Shutdown(63), Dynamixel can detect both Input Voltage Error(binary : 00000001) and Overheating Error(binary : 00000100). If those errors are detected, Torque Enable(64) is cleared to ‘0’ and the motor output becomes 0[%]. REBOOT is the only method to reset Torque Enable(64) to ‘1’(Torque ON) after the shutdown. The followings are detectable situations.            Bit      Item      Description                  Bit 7      -      Unused, Always ‘0’              Bit 6      -      Unused, Always ‘0’              Bit 5      Overload Error(default)      Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error(default)      Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error(default)      Detect internal temperature exceeds the configured operating temperature              Bit 1      -      Unused, Always ‘0’              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs, use below method to reboot Dynamixels.  H/W REBOOT : Turn off the power and turn on again  S/W REBOOT : Transmit REBOOT Instruction (For more details, please refer to the Reboot section of Protocol e-Manual.)Torque Enable(64)Controls Torque ON/OFF. Writing ‘1’ to this address will turn on the Torque and all Data in the EEPROM area will be protected.            Value      Description                  0(Default)      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      Note Present Position(132) can be reset when Operating Mode(11) and Torque Enable(64) are updated. For more details, please refer to the Homing Offset(20) and Present Position(132).LED(65)Turn on or turn off the LED on Dynamixel.            Bit      Description                  0(Default)      Turn OFF the LED              1      Turn ON the LED      Status Return Level(68)This value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Registered Instruction(69)            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Hardware Error Status(70)This value indicates hardware error status.The Dynamixel can protect itself by detecting dangerous situations that could occur during the operation. Each Bit is inclusively processed with the ‘OR’ logic, therefore, multiple options can be generated. For instance, when ‘0x05’ (binary : 00000101) is defined as Shutdown(63), Dynamixel can detect both Input Voltage Error(binary : 00000001) and Overheating Error(binary : 00000100). If those errors are detected, Torque Enable(64) is cleared to ‘0’ and the motor output becomes 0[%]. REBOOT is the only method to reset Torque Enable(64) to ‘1’(Torque ON) after the shutdown. The followings are detectable situations.            Bit      Item      Description                  Bit 7      -      Unused, Always ‘0’              Bit 6      -      Unused, Always ‘0’              Bit 5      Overload Error(default)      Detect persistent load that exceeds maximum output              Bit 4      Electrical Shock Error(default)      Detect electric shock on the circuit or insufficient power to operate the motor              Bit 3      Motor Encoder Error      Detect malfunction of the motor encoder              Bit 2      OverHeating Error(default)      Detect internal temperature exceeds the configured operating temperature              Bit 1      -      Unused, Always ‘0’              Bit 0      Input Voltage Error      Detect input voltage exceeds the configured operating voltage      Note If Shutdown occurs, use below method to reboot Dynamixels.  H/W REBOOT : Turn off the power and turn on again  S/W REBOOT : Transmit REBOOT Instruction (For more details, please refer to the Reboot section of Protocol e-Manual.)Velocity PI Gain(78, 76)These values indicate Gains of Velocity Control Mode. Gains of DYNAMIXEL’s internal controller can be calculated from Gains of the Control Table as shown below. The constant in each equations include sampling time. Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and that of the Control Table is abbreviated to KVP(TBL).                   Controller Gain      Conversion Equations      Range      Description                  Velocity I Gain(76)      KVI      KVI = KVI(TBL) / 65536      0 ~ 16383      I Gain              Velocity P Gain(78)      KVP      KVP = KVP(TBL) / 128      0 ~ 16383      P Gain      Below figure is a block diagram describing the velocity controller in Velocity Control Mode. When the instruction transmitted from the user is received by DYNAMIXEL, it takes following steps until driving the horn.  An Instruction from the user is transmitted via DYNAMIXEL bus, then registered to Goal Velocity(104).  Goal Velocity(104) is converted to target velocity trajectory by Profile Acceleration(108).  The target velocity trajectory is stored at Velocity Trajectory(136).  PI controller calculates PWM output for the motor based on the target velocity trajectory.  Goal PWM(100) sets a limit on the calculated PWM output and decides the final PWM value.  The final PWM value is applied to the motor through an Inverter, and the horn of DYNAMIXEL is driven.  Results are stored at Present Position(132), Present Velocity(128), Present PWM(124) and Present Current(126).Note Ka stands for Anti-windup Gain and ‘β’ is a conversion coefficient of position and velocity that cannot be modified by users. For more details about the PID controller, please refer to the PID Controller at wikipedia.Position PID Gain(84, 82, 80), Feedforward 1st/2nd Gains(90, 88)These Gains are used in Position Control Mode and Extended Position Control Mode. Gains of Dynamixel’s internal controller can be calculated from Gains of the Control Table as shown below. The constant in each equations include sampling time. Position P Gain of Dynamixel’s internal controller is abbreviated to KPP and that of the Control Table is abbreviated to KPP(TBL).                   Controller Gain      Conversion Equations      Range      Description                  Position D Gain(80)      KPD      KPD = KPD(TBL) / 16      0 ~ 16,383      D Gain              Position I Gain(82)      KPI      KPI = KPI(TBL) / 65,536      0 ~ 16,383      I Gain              Position P Gain(84)      KPP      KPP = KPP(TBL) / 128      0 ~ 16,383      P Gain              Feedforward 2nd Gain(88)      KFF2nd      KFF2nd(TBL) / 4      0 ~ 16,383      Feedforward Acceleration Gain              Feedforward 1st Gain(90)      KFF1st      KFF1st(TBL) / 4      0 ~ 16,383      Feedforward Velocity Gain      Below figure is a block diagram describing the position controller in Position Control Mode and Extended Position Control Mode. When the instruction from the user is received by Dynamixel, it takes following steps until driving the horn.  An Instruction from the user is transmitted via Dynamixel bus, then registered to Goal Position(116).  Goal Position(116) is converted to target position trajectory and target velocity trajectory by Profile Velocity(112) and Profile Acceleration(108).  The target position trajectory and target velocity trajectory is stored at Position Trajectory(140) and Velocity Trajectory(136) respectively.  Feedforward and PID controller calculate PWM output for the motor based on target trajectories.  Goal PWM(100) sets a limit on the calculated PWM output and decides the final PWM value.  The final PWM value is applied to the motor through an Inverter, and the horn of Dynamixel is driven.  Results are stored at Present Position(132), Present Velocity(128), Present PWM(124) and Present Current(126).Note In case of PWM Control Mode, both PID controller and Feedforward controller are deactivated while Goal PWM(100) value is directly controlling the motor through an Inverter. In this manner, users can directly control the supplying voltage to the motor.Note Ka is an Anti-windup Gain that cannot be modified by users. For more details about the PID controller and Feedforward controller, please refer to the PID Controller and Feed Forward.Below figure is a block diagram describing the current-based position controller in Current-based Position Control Mode. As Current-based Position Control Mode is quite similar to Position Control Mode, differences will be focused in the following steps. The differences are highlighted with a green marker in the block diagram as well.  Feedforward and PID controller calculates target current based on target trajectory.  Goal Current(102) decides the final target current by setting a limit on the calculated target current.  Current controller calculates PWM output for the motor based on the final target current.  Goal PWM(100) sets a limit on the calculated PWM output and decides the final PWM value.  The final PWM value is applied to the motor through an Inverter, and the horn of DYNAMIXEL is driven.  Results are stored at Present Position(132), Present Velocity(128), Present PWM(124) and Present Current(126).BUS Watchdog(98)Bus Watchdog (98) is a safety device (Fail-safe) that stops the DYNAMIXEL if the communication between the controller and DYNAMIXEL communication (RS485, TTL) is disconnected due to an unspecified error.Communication is defined as all the Instruction Packet in the DYNAMIXEL Protocol.                   Values      Description                  Unit      20[ms]      -              Range      0      Deactivate Bus Watchdog Function, Clear Bus Watchdog Error              Range      1 ~ 127      Activate Bus Watchdog              Range      -1      Bus Watchdog Error Status      The Bus Watchdog function monitors the communication interval (time) between the controller and DYNAMIXEL when Torque Enable (64) is ‘1’.If the measured communication interval (time) is larger than Bus Watchdog (98), the DYNAMIXEL will stop. Bus Watchdog (98) will be changed to ‘-1’ (Bus Watchdog Error).If the Bus Watchdog Error screen appears, the Goal Value (Goal PWM(100), Goal Current(102), Goal Velocity(104), Goal Position(116)) will be changed to read-only-access.Therefore, when a new value is written to the Goal Value, a Range Error will be returned via the Status packet.If the value of Bus Watchdog (98) is changed to ‘0’, Bus Watchdog Error will be cleared.Note For details of Range Error, please refer to the protocol of the e-Manual.The following are examples of the operation of the Bus Watchdog function.  After setting the operating mode (11) to speed control mode, change the Torque Enable (64) to ‘1’.  If ‘50’ is written in the Goal Velocity (104), the DYNAMIXEL will rotate in CCW direction.  Change the value of Bus Watchdog (98) to ‘100’ (2,000 [ms]). (Activate Bus Watchdog Function)  If no instruction packet is received for 2,000 [ms], the DYNAMIXEL will stop. When it stops, the Profile Acceleration (108) and Profile Velocity (112) are applied as ‘0’.  The value of Bus Watchdog (98) changes to ‘-1’ (Bus Watchdog Error). At this time, the access to the Goal Value will be changed to read-only.  If ‘150’ is written to the Goal Velocity (104), Range Error will be returned via Status Packet.  If the value of Bus Watchdog (98) is changed to ‘0’, Bus Watchdog Error will be cleared.  If “150” is written in the Goal Velocity (104), the DYNAMIXEL will rotate in CCW direction.Goal PWM(100)In case of PWM Control Mode, both PID controller and Feedforward controller are deactivated while Goal PWM(100) value is directly controlling the motor through an Inverter. In other control modes, this value is used to limit PWM value. This value cannot exceed PWM Limit(36). Please refer to the Gain section in order to see how Goal PWM(100) affects to different control modes.            Range      Description                  -PWM Limit(36) ~ PWM Limit(36)      Initial Value of PWM Limit(36) : ‘885’      Goal Current (102)In case of Torque Control Mode, Goal Current(102) can be used to set a target current. This value sets a limit to current in Current-based Position Control mode. This value cannot exceed Current Limit(38).            Unit      Value Range                  about  3.36[mA]      -Current Limit(38) ~ Current Limit(38)      Note Applying high current to the motor for long period of time might damage the motor.Goal Velocity(104)In case of Velocity Control Mode, Goal Velocity(104) can be used to set a target velocity. This value cannot exceed Velocity Limit(44). For now, Goal Velocity(104) is used for target velocity, but this value is not used to limit the velocity.            Unit      Value Range                  0.229 rpm      -Velocity Limit(44) ~ Velocity Limit(44)      Note The maximum velocity and maximum torque of DYNAMIXEL is affected by supplying voltage. Therefore, if supplying voltage changes, so does the maximum velocity. This manual complies with recommended supply voltage(12[V]).Note If Profile Acceleration(108) and Goal Velocity(104) are modified simultaneously, modified Profile Acceleration(108) will be used to process Goal Velocity(104).Profile Acceleration(108)The acceleration of Profile can be set with this value. Profile Acceleration(108) can be used in all control modes except Torque Control Mode. Profile Acceleration(108) cannot exceed Acceleration Limit(40). For more details, please refer to the Profile Velocity(112).            Unit      Value Range      Description                  214.577 Rev/min2      0 ~ Acceleration Limit(40)      ‘0’ stands for an infinite acceleration      Profile Velocity(112)The Maximum velocity of Profile can be set with this value. Profile Velocity(112) can be used in all control modes except Torque Control Mode and Velocity Control Mode. Profile Velocity(112) cannot exceed Velocity Limit(44). Velocity Control Mode only uses Profile Acceleration(108) instead of Profile Velocity(112).            Unit      Value Range      Description                  0.229 rpm      0 ~ Velocity Limit(44)      ‘0’ stands for an infinite velocity      The Profile is an acceleration/deceleration control method to reduce vibration, noise and load of the motor by controlling dramatically changing velocity and acceleration. It is also called Velocity Profile as it controls acceleration and deceleration based on velocity. DYNAMIXEL provides 4 different types of Profile. The following explains 4 Profiles and how to select them. Profiles are usually selected by a combination of Profile Velocity(112) and Profile Acceleration(108). Triangular and Trapezoidal Profiles exceptionally consider total travel distance(ΔPos, the distance difference between target position and current position) as an additional factor. For convenience, Profile Velocity(112) is abbreviated to VPRFL and Profile Acceleration(108) is abbreviated to VPRFL. ‘X’ stands for “Don’t Care” case.When given Goal Position(116), Dynamixel’s profile creates target velocity trajectory based on current velocity(initial velocity of the Profile). When Dynamixel receives updated target position from a new Goal Position(116) while it is moving toward the previous Goal Position(116), velocity smoothly varies for the new target velocity trajectory. Maintaining velocity continuity while updating target velocity trajectory is called Velocity Override. For a simple calculation, let’s assume that the initial velocity of the Profile is ‘0’. The following explains how Profile processes Goal Position(116) instruction in Position Control mode, Extended Position Control Mode, Current-based Position Control Mode.  An Instruction from the user is transmitted via Dynamixel bus, then registered to Goal Position(116).  Acceleration time(t1) is calculated from Profile Velocity(112) and Profile Acceleration(108).  Types of Profile is decided based on Profile Velocity(112), Profile Acceleration(108) and total travel distance(ΔPos, the distance difference between target position and current position).  Selected Profile type is stored at Moving Status(123).(Refer to the Moving Status(123))  Dynamixel is driven by the calculated target trajectory from Profile.  Target velocity trajectory and target position trajectory from Profile are stored at Velocity Trajectory(136) and Position Trajectory(140) respectively.  VPRFL_TRI of ③ and Travel time(t3) to reach Goal Position(116) is calculated as below.            Condition      Types of Profile                  VPRFL(112) = 0      Profile not used(Step Instruction)              (VPRFL(112) ≠ 0) &amp;amp; (APRF(108) = 0)      Rectangular Profile              (VPRFL(112) ≠ 0) &amp;amp; (APRF(108) ≠ 0) &amp;amp; (VPRFL_TRI ≤ VPRFL(112))      Triangular Profile              (VPRFL(112) ≠ 0) &amp;amp; (APRF(108) ≠ 0) &amp;amp; (VPRFL_TRI ＞ VPRFL(112))      Trapezoidal Profile      Note Dynamixel supports Jerk control in order to minimize dramatic change of acceleration. Therefore, actual travel time by the target trajectory of Profile could be longer than t3(t4 of above figure).  Note Velocity Control Mode only uses Profile Acceleration(108). Step and Trapezoidal Profiles are supported. Velocity Override and Jerk control are supported as well. Acceleration time(t1) can be calculated as below equation.Goal Velocity(104) / Profile Acceleration(108) * t1 = 64Goal Position(116)Target position can be set with Goal Position(116). From the front view of Dynamixels, CCW is an increasing direction whereas CW is a decreasing direction. The way to reaching Goal Position(116) is differ by 4 Profiles provided by Dynamixels. Please refer to the Profile Velocity(112) for more details.            Mode      Values      Description                  Position Control Mode      Min Position Limit(52) ~ Max Position Limit(48)      Initial Value : 0 ~ 4,095              Extended Position Control Mode      -1,048,575 ~ 1,048,575      -256[rev] ~ 256[rev]              Current-based Position Control Mode      -1,048,575 ~ 1,048,575      -256[rev] ~ 256[rev]                  Degree Conversion Constant      Description                  0.088°/Value      1[rev] : 0 ~ 4,095      Note If Profile Acceleration(108), Profile Velocity(112) and Goal Position(116) are modified simultaneously, Goal Position(116) is processed based on updated Profile Acceleration(108) and Profile Velocity(112).Realtime Tick(120)This value indicates Dynamixel’s time.            Unit      Value Range      Description                  1 ms      0 ~ 32,767      The value resets to ‘0’ when it exceeds 32,767      Moving(122)This value indicates whether Dynamixel is in motion or not. If absolute value of Present Velocity(128) is greater than Moving Threshold(24), Moving(122) is set to ‘1’. Otherwise, it will be cleared to ‘0’. However, this value will always be set to ‘1’ regardless of Present Velocity(128) while Profile is in progress with Goal Position(116) instruction.            Value      Description                  0      Movement is not detected              1      Movement is detected, or Profile is in progress(Goal Position(116) instruction is being processed)      Moving Status(123)This value provides additional information about the movement. Following Error Bit(0x08) and In-Position Bit(0x01) only work with Position Control Mode, Extended Position Control Mode, Current-based Position Control Mode.                          Details      Description                  Bit 7      0x80      -      Unused              Bit 6      0x40      -      Unused              Bit 5~Bit 4      0x30      Profile Type(0x30)Profile Type(0x20)Profile Type(0x10)Profile Type(0x00)      Trapezoidal Velocity ProfileTriangular Velocity ProfileRectangular Velocity ProfileProfile is not used              Bit 3      0x08      Following Error      Dynamixel fails to reach target position trajectory              Bit 2      0x04      -      Unused              Bit 1      0x02      Profile Ongoing      Profile is in progress with Goal Position(116) instruction              Bit 0      0x01      In-Position      Dynamixel is reached to target position      Present PWM(124)This value indicates present PWM. For more details, please refer to the Goal PWM(100).Present Load(126)This value indicates current Current. For more details, please refer to the Goal Current(102).Present Velocity(128)This value indicates present Velocity. For more details, please refer to the Goal Velocity(104).Present Position(132)This value indicates present Position. For more details, please refer to the Goal Position(116).  Note Present Position(132) represents 4 byte continuous range(-2,147,483,648 ~ 2,147,483,647) when Torque is turned off regardless of Operating Mode(11). However, Present Position(132) will be reset in those cases:  Present Position(132) is reset with the value within 1 rev (0 ~ 4,095) when Operating Mode(11) is changed to Position Control Mode.  Present Position(132) is reset with the value within 1 rev (0 ~ 4,095) when Torque is turned on in Position Control Mode.Reset Present Position(132) value can be affected by Homing Offset(20).Velocity Trajectory(136)This is a target velocity trajectory created by Profile. Operating method can be changed based on control mode. For more details, please refer to the Profile Velocity(112).  Velocity Control Mode : When Profile reaches to the endpoint, Velocity Trajectory(136) becomes equal to Goal Velocity(104).  Position Control Mode, Extended Position Control Mode, Current-based Position Control Mode : Velocity Trajectory is used to create Position Trajectory(140). When Profile reaches to an endpoint, Velocity Trajectory(136) is cleared to ‘0’.Position Trajectory(140)This is a target position trajectory created by Profile. This value is only used in Position Control Mode, Extended Position Control Mode and Current-based Position Control Mode. For more details, please refer to the Profile Velocity(112).Present Input Voltage(144)This value indicates present voltage that is being supplied. For more details, please refer to the Max/Min Voltage Limit(32, 34).Present Temperature(146)This value indicates internal temperature of Dynamixel. For more details, please refer to the Temperature Limit(31).Indirect Address, Indirect DataIndirect Address and Indirect Data are useful when accessing two remote addresses in the Control Table as sequential addresses. Sequential addresses increase Instruction Packet efficiency. Addresses that can be defined as Indirect Address is limited to RAM area(Address 64 ~ 661).If specific address is allocated to Indirect Address, Indirect Address inherits features and properties of the Data from the specific Address. Property includes Size(Byte length), value range, and Access property(Read Only, Read/Write). For instance, allocating 65(Address of LED) to Indirect Address 1(168), Indirect Data 1(224) can perform exactly same as LED(65).Example 1 Allocating Size 1 byte LED(65) to Indirect Data 1(224).  Indirect Address 1(168) : change the value to ‘65’ which is the address of LED.  Set Indirect Data 1(224) to ‘1’ : LED(65) also becomes ‘1’ and LED is turned on.  Set Indirect Data 1(224) to ‘0’ : LED(65) also becomes ‘0’ and LED is turned off.Example 2 Allocating Size 4 byte Goal Position(116) to Indirect Data 2(225), 4 sequential bytes have to be allocated.  Indirect Address 2(170) : change the value to ‘116’ which is the first address of Goal Position.  Indirect Address 3(172) : change the value to ‘117’ which is the second address of Goal Position.  Indirect Address 4(174) : change the value to ‘118’ which is the third address of Goal Position.  Indirect Address 5(176) : change the value to ‘119’ which is the fourth address of Goal Position.  Set 4 byte value ‘1,024’ to Indirect Data 2 : Goal Position(116) also becomes ‘1024’ and Dynamixel moves.            Indirect Address Range      Description                  64 ~ 661      EEPROM address can’t be assigned to Indirect Address      Note In order to allocate Data in the Control Table longer than 2[byte] to Indirect Address, all address must be allocated to Indirect Address like the above Example 2.Note Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.How to AssembleOptional Frames      FR05-B101        FR05-F101 and FR05-X101        FR05-H101        FR05-S101  Horns      HN05-I102        HN05-N101  Combination StructuresMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideVideosQuick StartDrawingsDownload MX-64TDownload MX-64R",
        "url": " http://localhost:4000/docs/en/dxl/mx/mx-64-2/"
      } ,
  
      "docs-en-dxl-mx-mx-64":  {
        "title": "MX-64",
      "content"	 : "MX-64Note Compliance has been replaced with PID Gains.Note Although the MX-64AT (TTL) and MX-64AR (RS-485) differ in communications protocols both have the same features and perform equally. (TTL uses 3-pin connectors while RS-485 uses 4)Note In order to use Protocol 2.0, please update the firmware to V39 or above. (Update firmware using R+ Manager 2.0)Warning For MX-64(2.0) Protocol, please refer to the MX-64(2.0) Control Table as they are different.Specifications            Item      Specifications                  MCU      ST CORTEX-M3 ( STM32F103C8 @ 72MHZ,32BIT)              Position Sensor      Contactless absolute encoder (12BIT,360 DEGREE)Maker : ams (www.ams.com), Part No : AS5045              Motor      Maxon              Baud Rate      8000 bps ~ 4.5 Mbps              Control Algorithm      PID Control              Resolution      0.088°              Running Degree      0° ~ 360°Endless Turn              Weight      135g              Dimensions (W x H x D)      40.2mm x 61.1mm x 41mm              Gear Ratio      200 : 1              Stall Torque      5.5Nm @ 11.1V, 3.9A6.0Nm @ 12V, 4.1A7.3Nm @ 14.8V, 5.2A              No Load Speed      58rpm @ 11.1V63rpm @ 12V78rpm @ 14.8V              Operating Temperature      -5°C ~ +80°C              Input Voltage      10 ~ 14.8V (Recommended : 12V)              Standby Current      100mA              Command Signal      Digital Packet              Protocol Type      MX-64T/MX-64AT: Half Duplex Asynchronous Serial CommunicationMX-64R/MX-64AR: RS485 Asynchronous Serial Communication(8bit,1stop, No Parity)              Physical Connection      MX-64T/MX-64AT: TTL Level Multidrop BUSMX-64R/MX-64AR: RS485 Multidrop BUS              ID      0 ~ 253              Feedback      Position, Temperature, Load, Input Voltage, etc              Material      Full Metal GearMX-64AR/MX-64AT: Metal(Front), Engineering Plastic(Middle, Back)MX-64R/MX-64T: Engineering Plastic(Front, Middle, Back)      Performance GraphStall torque Peak stall torque read from transient statePerformance Graph(N-T Curve) A graph shows torque measured in stable condition while increasing load. Normally, stall torque is bigger than maximum torque on performance graph.Caution When connecting to power supply:  For the stable power supply, we recommend using ROBOTIS controller or SMPS2Dynamixel.  Connect your DYNAMIXEL to power supply while it’s off and turn on/off with the power switch.Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 1.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(24) is ‘0’ and Dynamixel is in idle state.SizeThe Size of data is 1 or 2 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. 2 bytes data will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      310              2      1      Firmware Version      Firmware Version      R      -              3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      Counter-Clockwise Angle Limit      RW      4095              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      240              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36              20      2      Multi Turn Offset      Adjust Position with Offset      RW      0              22      1      Resolution Divider      Divider for Position Resolution      RW      1      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On/Off      RW      0              25      1      LED      Status LED On/Off      RW      0              26      1      D Gain      Derivative Gain      RW      0              27      1      I Gain      Integral Gain      RW      0              28      1      P Gain      Proportional Gain      RW      32              30      2      Goal Position      Target Position      RW      -              32      2      Moving Speed      Moving Speed(Moving Velocity)      RW      -              34      2      Torque Limit      Torque Limit(Goal Torque)      RW      ADD 14&amp;amp;15              36      2      Present Position      Present Position      R      -              38      2      Present Speed      Present Speed      R      -              40      2      Present Load      Present Load      R      -              42      1      Present Voltage      Present Voltage      R      -              43      1      Present Temperature      Present Temperature      R      -              44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      0              68      2      Current      Consuming Current      RW      0              70      1      Torque Ctrl Mode Enable      Torque Control Mode On/Off      RW      0              71      2      Goal Torque      Goal Torque      RW      0              73      1      Goal Acceleration      Goal Acceleration      RW      0      Control Table DescriptionModel Number (0)This address stores model number of the DYNAMIXEL.Firmware Version (2)This address stores firmware version of the DYNAMIXEL.ID (3)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate (4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate(bps)      Margin of Error                  1      1M      0.000%              3      500,000      0.000%              4      400,000      0.000%              7      250,000      0.000%              9      200,000      0.000%              16      115200      -2.124%              34(Default)      57600      0.794%              103      19200      -0.160%              207      9600      -0.160%      Note Less than 3% of the baud rate error margin will not affect to UART communication.For BPS over 250 values :            Value      Baud Rate      Margin of Error                  250      2,250,000      0.000%              251      2,500,000      0.000%              252      3,000,000      0.000%      Return Delay Time (5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      CW/CCW Angle Limit(6, 8)The angle limit allows the motion to be restrained.The range and the unit of the value is the same as Goal Position(Address 30, 31).  CW Angle Limit: the minimum value of Goal Position(Address 30, 31)  CCW Angle Limit: the maximum value of Goal Position(Address 30, 31)The following three modes can be set pursuant to the value of CW and CCW.            Operation Type      CW / CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0              Multi-turn Mode      both are 4095      The wheel mode can be used to wheel-type operation robots since motors of the robots spin infinitely. The joint mode can be used to multi-joints robot since the robots can be controlled with specific angles. Multi-turn mode allows joint mode control over multiple rotations (Position range : -28,672 ~ 28,672)The Maximum Temperature Limit            Unit      Value Range                  About 1°      0 ~ 100      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage LimitIt is the operation range of voltage.            Unit      Value Range      Description                  About 0.1V      50 ~ 250      5.0 ~ 25.0V      For example, if the value is 80, the voltage is 8V.If Present Voltage(42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.Max TorqueIt is the torque value of maximum output. 0 to 1,023 (0x3FF) can be used, and the unit is about 0.1%.For example, Data 1,023 (0x3FF) means that Dynamixel will use 100% of the maximum torque it can produce while Data 512 (0x200) means that Dynamixel will use 50% of the maximum torque. When the power is turned on, Torque Limit (Address 34 and 35) uses the value as the initial value.Status Return LevelThis value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Alarm LED / Alarm ShutdownDynamixel can protect itself by detecting errors occur during the operation.The errors can be set are as the table below.            Bit      Item      Description                  Bit 7      0      -              Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’. That is, if 0x05 (binary 00000101) is set, both Input Voltage Error and Overheating Error can be detected.If errors occur, in case of Alarm LED, the LED blinks; in case of Alarm Shutdown, the motor output becomes 0 % by resetting the value of Torque Limit(34) to 0.Multi-turn OffsetAdjusts offset position. This offset value is added to the Present Position(36).Initial value is 0 and the range is from -24,576 to 24,576.Dynamixel with a Present position of 2,048 with an offset of 1,024 will return an adjusted Present position of 3,072.Note This offset feature is only available in multi-turn mode.Resolution DividerIt allows the user to change Dynamixel’s resolution.The default Resolution Divider Value is set as 1. (1 ~ 4 available)When resolution is lowered, revolutions (in both directions) can be increased (up to 28 turns in each direction).Present Position = Real Position / Resolution DividerFor example, a Real Position of 2048 with a Resolution Divider set as 2 will yield a Present Position value of 1024 (2048/2 = 1024). A Dynamixel with Resolution Divider set as 2 will have a resolution 2048 for a single revolution.The Present Position can be obtained while Multi-turn Offset and Resolution Divider are taken into account.Present position = (Real Position / Resolution Divider) + Multi-turn OffsetFor example, a Dynamixel with a Real Position of 2048 with a Resolution Divider set as 4 and Multi-turn Offset as 1024 will yield a Present Position of 1535 ((2048/4) + 1024 = 1535).Note: This feature is only applied in multi-turn mode and will be ignored in other modes.Torque Enable            Value      Description                  0      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      LEDTurn on or turn off the LED on Dynamixel.            Bit      Description                  0(Default)      Turn OFF the LED              1      Turn ON the LED      PID GainsMX series will use the PID controller as a main control method.P gain : value of proportional band.I gain : value of integral action.D Gain : value of derivative action.Gains values are in between 0~254.Kp = P Gain / 8Ki = I Gain * 1,000 / 2,048Kd = D Gain * 4 / 1,000The relationship between Compliance Slop and PID            Slope      P Gain                  8      128              16      64              32      32              64      16              128      8      The less the P gain, The larger the back lash, and the weaker the amount of output near goal position.At some extent, it is like a combined concept of margine and slope.It does not exactly match the previous concept of compliance. So it is obvious if you see the difference in terms of motion.Explanation for PID required.For the brief explanation about general PID, please refer to the website(link) below.http://en.wikipedia.org/wiki/PID_controllerFYI, PID control theory is not only limited to the control of motor(actuator) but is a generic theory that can be applied to all kinds of control.Goal PositionIt is a position value of destination.0 to 4,095 (0xFFF) is available.  The unit is 0.088°.If Goal Position is out of the range, Angle Limit Error Bit (Bit1) of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED/Shutdown.The picture above is the front view of DynamixelIn multi-turn mode Dynamixel has a range from -28,672 to 28,672 (can turn up to 7 revolutions in either CW or CCW direction).When resolution divider is set to a different value revolutions can increase.Note If it is set to Wheel Mode, Goal Position value is not used.Moving Speed      Join Mode, Multi-Turn modeIt is a moving speed to Goal Position.0~1023 (0X3FF) can be used, and the unit is about 0.114rpm.If it is set to 0, it means the maximum rpm of the motor is used without controlling the speed.If it is 1023, it is about 116.62rpm.For example, if it is set to 300, it is about 34.2 rpm.However, the rpm will not exceed the No Load Speed.        Wheel ModeIt is a moving speed to Goal direction.0~2047 (0X7FF) can be used, and the unit is about 0.114rpm.If a value in the range of 0~1023 is used, it is stopped by setting to 0 while rotating to CCW direction.If a value in the range of 1024~2047 is used, it is stopped by setting to 1024 while rotating to CW direction.That is, the 10th bit becomes the direction bit to control the direction.    Note Wheel mode allows to check max rpm. Any values higher than max rpm will not take effect.  Torque LimitIt is the value of the maximum torque limit.0 ~ 1,023(0x3FF) is available, and the unit is about 0.1%.For example, if the value is 512, it is about 50%; that means only 50% of the maximum torque will be used.If the power is turned on, the value of Max Torque (Address 14, 15) is used as the initial value.Note If the function of Alarm Shutdown is triggered, the motor loses its torque because the value becomes 0. Once error conditions are resolved and this value is changed to the value other than 0, the motor can be operated again.Present PositionIt is the current position value of Dynamixel.The range of the value is 0~4095 (0xFFF), and the unit is 0.088 degree.The picture above is the front view of Dynamixel.In multi-turn mode, the range is from -28672 to 28672 with unit values dependent on Resolution Divider (0.088 * Resolution Divider)Note In multi-turn mode, Present position depends on resolution divider and multi-turn offset For more information turn to the section on Multi Turn offset and Resolution Divider.Present SpeedIs the current moving speed.0 ~ 2,047 (0x000 ~ 0x7FF) can be used.If a value is in the rage of 0 ~ 1,023 then the motor rotates to the CCW direction.If a value is in the rage of 1,024 ~ 2,047 then the motor rotates to the CW direction.The 10th bit becomes the direction bit to control the direction; 0 and 1,024 are equal.The value unit is about 0.11rpm.For example, if it is set to 300 then the motor is moving to the CCW direction at a rate of about 34.33rpm.Present LoadIt means currently applied load.The range of the value is 0~2047, and the unit is about 0.1%.If the value is 0~1,023, it means the load works to the CCW direction.If the value is 1,024~2,047, it means the load works to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 1,024 is equal to 0.For example, the value is 512, it means the load is detected in the direction of CCW about 50% of the maximum torque.            Bit      15 ~ 11      10      9 ~ 0                  Value      0      Load Direction      Data (Load Ratio)      Note CCW Load : Load Direction = 0, CW Load : Load Direction = 1Note Present load is an inferred value based on the internal output value; not a measured value using torque sensor, etc. Therefore, it may be inaccurate for measuring weight or torque. It is recommended to use it for predicting the direction and size of the force being applied to the joint.Present VoltageIt is the size of the present voltage supplied.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)If Present Voltage(42) value is out of range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18.Present TemperatureIt is the internal temperature of Dynamixel in Celsius.Data value is identical to the actual temperature in Celsius. For example, if the data value is 85 (0x55), the current internal temperature is 85°C.Registered Instruction            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Moving            Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock            Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.PunchMinimum current to drive motor. This value ranges from 0x20 to 0x3FF.CurrentAt an idle state without current flow, this value is 2,048(0x800).When positive current flows, this value becomes larger than 2,048(0x800) while negative current flow returns a value smaller than 2,048(0x800).The following is current flow calculation formula.I = ( 4.5mA ) * (CURRENT – 2048 ) in amps unit (A).For example, 68 gives a value of 2148, which corresponds to 450mA of current flow.Torque Control Mode Enable            Value      Meaning                  0      Turn off the torque mode. Executes Joint mode or Wheel mode              1      Turn on the torque mode. Cannot control the position or moving speed but only Torque      When Torque Control Mode Enable is 1, DYNAMIXEL behaves like the followings  DYNAMIXEL does not control position or velocity.  DYNAMIXEL is controlled by the Goal Torque value.  DYNAMIXEL does not affected by the Goal position and Goal speed values.  Since position/moving speed is not controlled, DYNAMIXEL behaves as if it is in the wheel mode.Goal TorqueYou can use 0 ~ 2,047 (0x7FF) and the unit is 4.5mA (Torque is directly proportional to the current value).If you use a value between 0 ~ 1,023, torque is applied to the CCW direction, and setting it to 0 will stops.If you use a value between 1,024 ~ 2,047, torque is applied to the CW direction, and setting it to 1,024 will stops.That means, 10th bit becomes the CW/CCW direction bit, which controls rotational direction.Goal Torque cannot be bigger than Torque Limit(34,35).Goal AccelerationThis is Goal Acceleration value.It can be used from 0~254(0XFE) and the unit is approximately 8.583° / sec2.When it is set to 0, there is no control over acceleration and moves with the maximum acceleration of the motor.When the goal speead is set to 0, there is no control over acceleration and moves with the maximum acceleration of the motor.When it is set to 254, it becomes 2,180° / sec2.For example, the current speed of Dynamixel is 0, and Goal acceleration is 10.The speed of Dynamixel after 1 second will be 14.3 RPM.How to AssembleOptional Frames      FR05-B101        FR05-F101 and FR05-X101        FR05-H101        FR05-S101  Horns      HN05-I102        HN05-N101  Combination StructuresMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideVideosQuick StartDrawingsDownload MX-64TDownload MX-64R",
        "url": " http://localhost:4000/docs/en/dxl/mx/mx-64/"
      } ,
  
      "docs-en-parts-controller-opencm485exp":  {
        "title": "OpenCM 485 EXP",
      "content"	 : "OpenCM 485 Expansion BoardIntroductionSpecifications            Item      Description                  Input voltage      5~30V              Power      SMPS, LiPo, DXL PRO 24V              Power Switch      1              Dynamixel Port      4Pin x 5, 3Pin x 5              Button      2              LED      5              Size      68 mm X 66.5 mm              Weight      32g      Layout  SMPS DC Connector : For using SMPS DC Adapter to supply power to OpenCM 485 EXP board.  DXL Pro Power Connector : Power connector for Dynamixel Pro (24V).  Li-Po battery Connector : Connector for 11.1V Li-Po battery(LBS-10).  Dynamixel TTL 3 -Pin Bus : Used to connect 3-Pin Cables(Dynamixel TTL Bus) and for daisy chaining Dynamixels.  User Button : Function of these buttons can be assigned by the user.  User LED : LED that can be controlled by the user.  I/O header : Header pins used to mount OpenCM9.04(2.54mm pitch).  Dynamixel 485 4-Pin Bus : Used to connect 4-Pin Cables(Dynamixel TTL Bus) and for daisy chaining Dynamixels.  Power Switch : Switch that powers the board and Dynamixel. Note: Does not disconnect the power received via USB cable.  JP1 Jumper : Jumper that determines whether the power inputted onto OpenCM 485 EXP will be supplied to OpenCM9.04 board or not.Connecting OpenCM9.04      Prepare OpenCM 485 EXP and OpenCM9.04 boards. Any version of OpenCM9.04 is compatible. Solder the header onto the OpenCM9.04.            OpenCM9.04 is mounted onto OpenCM 485 EXP as shown below.  Caution The orientation of the connection must be correct.![](/assets/images/parts/controller/opencm904/opencm485exp_03.jpg)      Connect the USB cable onto OpenCM9.04 board.            Connect Dynamixel and 12V SMPS adapter onto OpenCM 485 EXP board.      Power Circuit ConnectionA power circuit block diagram of the OpenCM 485 EXP and OpenCM9.04, once mounted, is shown below.OpenCM 485 EXP supplies 5V from OpenCM9.04 as default. JP1 can be used to determine if VDD power from OpeCM 485 EXP board is supplied to OpenCM9.04.  OpenCM 485 EXP Power ConnectionOpenCM 485 EXP’s Dynamixel 485 bus operates as a Dynamixel bus using OpenCM9.04’s USART3(Serial3).Note OpenCM9.04’s Dynamixel TTL BUS is connected to USART1(Serial1).  OpenCM9.04 &amp;amp; OpenCM 485 EXP Bus ConnectionsEXP Board Programming      Support.robotis.com -&amp;gt; Software Help -&amp;gt; ROBORIS_OpenCM (MUST use V 1.0.1 or later).            Extract OpenCM IDE and execute ROBOTIS_OpenCM.exe file.            OpenCM 485 EXP’s 485 Bus sends and receives communication packets from OpenCM9.04’s Serial3(USART3).Dynamixel Class variable MUST be set to 3 once it has been declared.  Dynamixel Dxl(3); //Dynamixel on Serial3 (USART3). Needs to be set as 3 to used USART3 on OpenCM 485 EXP.void setup() {  Dxl.begin(1);  //1Mbps  }void loop() {    Dxl.writeWord(6, 30, 0);  Dxl.writeWord(2, 30, 0);  delay(1000);                Dxl.writeWord(6, 30, 1023);  Dxl.writeWord(2, 30, 4095);  delay(1000);}      Click on “Download” button indicated below to download the program.      Button &amp;amp; LEDOpenCM 485 EXP board has 2 buttons and 3 LED’s that are connected to OpenCM9.04 I/O pins.The OpenCM9.04 I/O pin numbers for the buttons and LED’s are indicated below.                   OpenCM9.04 I/O                  Button1      16              Button2      17              LED1      18              LED2      19              LED3      20      Downloads  Download PDF PCB Schematic",
        "url": " http://localhost:4000/docs/en/parts/controller/opencm485exp/"
      } ,
  
      "docs-en-parts-controller-opencm904":  {
        "title": "OpenCM 9.04",
      "content"	 : "OpenCM 9.04Introduction  OpenCM9.04 Types Package            Item      OpenCM9.04 A Type      OpenCM9.04 B Type      OpenCM9.04 C Type                  Power Switch      X      1      1              User Button      1      1      1              2Pin Battery(LBS-40)      X      2      2              JTAG/SWD      X      1      1              Micro B USB      X      1      1              5-Pin Port      X      4      4              Dynamixel TTL BUS      X      4      4              4 Pin Communication      X      1      1        OpenCM9.04 is a microcontroller board based on 32bit ARM Cortex-M3. The OpenCM9.04’s schematics and source codes are open-source.  3 types are available: Type A &amp;amp; Type B &amp;amp; Type C. The difference between Type A,Type B, Type C is the availability of the connectors. (Refer to the image and table above.)(OpenCM9.04 Accessory Set can be purchased to acquire all the necessary connector to upgrade Type A to Type B Type C.)  OpenCM9.04 Accessory SetNote Refer to the DARWIN-MINI for controller recovery (type C-only) DARWIN-MINI Controller Firmware UpdateSpecifications            Item      Description                  CPU      STM32F103CB (ARM Cortex-M3)              Operation Voltage      5V ~ 16V              I/O      GPIO x 26              Timer      4 (16bit)              Analog Input(ADC)      10 (12bit)              Flash      128Kb              SRAM      20Kb              Clock      72Mhz              USB      1 (2.0 Full Speed) Micro B Type              USART      3              SPI      2              I2C(TWI)      2              Debug      JTAG &amp;amp; SWD              Dynamixel TTL BUS 3pin      4              Dimensions      27mm x 66.5mm      Caution  USB power is cannot be used to operate Dynamixels. Separate power supply needs to be provided.(OpenCM9.04 can operate using power supplied via USB, battery, + - terminal.)  Check the operating voltage for peripheral devices when using additional power supplies. Dynamixel or XL-series is receives the exact voltage supplied.  Dynamixel and XL-series cannot be used together due to different operating voltages.Control TableControl Table consists of data regarding the current status and operation of controller. The user can control controller by changing data of Control Table via Instruction packet.      EEPROM and RAMData in RAM area is reset to initial values whenever the power is turned on while data in EEPROM area is kept once values are set even if the power is turned off.        AddressRepresents the location of data. To read from or write data to the control table the user should assign the correct address in the Instruction packet.        AccessController has two kinds of data: Read-only data, used mainly for sensing, and read-and-write data used for driving.        Initial ValueIn case of data in the EEPROM Area, the initial values on the right side of the below Control Table are the factory default settings.In case of data in the RAM Area, the initial values on the right side of the following control table are the ones when the power is turned on.        SizeThe Size of data varies from 1 ~ 4 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet.  EEPROM Area            Address      Size      Name      Description      Access      Init Value                  0      2      Model Number      Model Number      R      400              6      1      Firmware Version      Firmware Version      R      -              7      1      ID      Controller ID      RW      200              8      1      Baud Rate      Communication Baud Rate      R      1              9      1      Return Delay Time      Response Delay Time      RW      0              10      1      Status Return Level      Select Types of Status Return      RW      2              12      1      DXL Baud Rate      Dynamixel Communication Baud Rate      RW      3      RAM Area            Address      Size      Name      Description      Access      Init Value                  21      1      Mode Number      Operation Mode      RW      -              26      1      Button Status      Start Button Status      R      0              66      2      Motion Play Page      Motion Play Page Number      RW      0              68      1      Motion Play Status      Motion Play Status      R      -              73      1      128ms Timer Value      128ms Timer Counter      RW      0              74      2      1ms Timer Value      1ms Timer Counter      RW      0              77      1      Random Number      Creating Random Number      RW      -              79      1      Green LED      Green LED Status      RW      0              82      1      Motion LED      Motion LED Status      RW      0              360      2      Port 1 IR Sensor Value      IR Sensor Value on Port 1      R      -              366      2      Port 4 IR Sensor Value      IR Sensor Value on Port 4      R      -              368      2      Port 1 DMS Sensor Value      DMS Sensor Value on Port 1      R      -              370      2      Port 2 DMS Sensor Value      DMS Sensor Value on Port 2      R      -              372      2      Port 3 DMS Sensor Value      DMS Sensor Value on Port 3      R      -              374      2      Port 4 DMS Sensor Value      DMS Sensor Value on Port 4      R      -              376      1      Port 1 Touch Sensor Value      Touch Sensor Value on Port 1      R      -              377      1      Port 2 Touch Sensor Value      Touch Sensor Value on Port 2      R      -              378      1      Port 3 Touch Sensor Value      Touch Sensor Value on Port 3      R      -              379      1      Port 4 Touch Sensor Value      Touch Sensor Value on Port 4      R      -              381      1      Port 2 LED Module Value      LED Module Control Value on Port 2      RW      0              382      1      Port 3 LED Module Value      LED Module Control Value on Port 3      RW      0              386      2      Port 2 User Device Value      User Device Value on Port 2      RW      0              388      2      Port 3 User Device Value      User Device Value on Port 3      RW      0              392      1      Port 1 Temperature Sensor Value      Temperature Sensor Value on Port 1      R      -              393      1      Port 2 Temperature Sensor Value      Temperature Sensor Value on Port 2      R      -              394      1      Port 3 Temperature Sensor Value      Temperature Sensor Value on Port 3      R      -              395      1      Port 4 Temperature Sensor Value      Temperature Sensor Value on Port 4      R      -              396      1      Port 1 Ultrasonic Sensor Value      Ultrasonic Sensor Value on Port 1      R      -              397      1      Port 2 Ultrasonic Sensor Value      Ultrasonic Sensor Value on Port 2      R      -              398      1      Port 3 Ultrasonic Sensor Value      Ultrasonic Sensor Value on Port 3      R      -              399      1      Port 4 Ultrasonic Sensor Value      Ultrasonic Sensor Value on Port 4      R      -              400      1      Port 1 Magnetic Sensor Value      Magnetic Sensor Value on Port 1      R      -              401      1      Port 2 Magnetic Sensor Value      Magnetic Sensor Value on Port 2      R      -              402      1      Port 3 Magnetic Sensor Value      Magnetic Sensor Value on Port 3      R      -              403      1      Port 4 Magnetic Sensor Value      Magnetic Sensor Value on Port 4      R      -              404      1      Port 1 Motion Sensor Value      Motion Sensor Value on Port 1      R      -              405      1      Port 2 Motion Sensor Value      Motion Sensor Value on Port 2      R      -              406      1      Port 3 Motion Sensor Value      Motion Sensor Value on Port 3      R      -              407      1      Port 4 Motion Sensor Value      Motion Sensor Value on Port 4      R      -              409      1      Port 2 Color Sensor Value      Color Sensor Value on Port 2      R      -              410      1      Port 3 Color Sensor Value      Color Sensor Value on Port 3      R      -      Note Some Addresses of the Control Table can be tested with R+ Manager 2.0.Block DiagramOpenCM9.04’s block diagram is shown below. OpenCM9.04’s schematic is based on 32bit Cortex-M3 core STM32F103CB microcontroller.The power schematic is designed to cascade through 5V and 3.3V regulators. 5V is supplied to TTL bus and 3.3V is supplied to microcontrollers, 5-pin port and 4-pin communication port.OpenCM9.04 supports USB2.0 FS. Micro-B connector is used to download the program or perform data communication.Pin 11(TX1) &amp;amp; Pin 12(RX1) cannot be used simultaneously because USART Channel 1 is assigned to DYNAMIXEL TTL Bus.USART channel 1 is registered under Dynamixel TTL Bus and cannot be used simultaneously with pin 11(TX1) &amp;amp; 12(RX1).Layout  Power Switch : Switch used to control the power supplied to the board and DYNAMIXEL on/off. (Note: the board is always powered ON when USB cable is connected.)      Series Battery Socket : Connects two LBS-04 Lithium-ion battery.    Caution Do NOT charge the battery while its connected to the board because the user will short the circuit. Be sure to disconnect from the board when charging the battery.    Dynamixel TTL 3 PIN : Port for daisy chaining Dynamixels that use 3-pin cables (Dynamixel TTL Bus).      Communication Port : Used from wired/wireless communication using peripheral devices (i.e. BT-210, BT-110A, ZIG-110A, LN-101, etc). OpenCM9.04’s 4-pin communication port uses Serial2(USART2).              4-pin communication port pinmap&amp;gt;                  Example : Wireless communication between OpenCM9.04 and a smartphone&amp;gt;                  Example : Bluetooth communication using OpenCM9.04 and RC100                  Example : Zigbee communication using OpenCM9.04 and RC100                  Example : Wired communication using OpenCM9.04 and LN-101            User Button :  a button that can be controlled/programmed by the user. Can be used as pin 23 or BOARD_BUTTON_PIN. It can be initialized in setup() as pinMode(23, INPUT_PULLDOWN).  If OpenCM9.04 does not download the program, connect the USB cable while holding down the “User Button”. Status LED will stay lit and the download will be initiated.              OpenCM9.04 can enter a “Emergency Recovery Mode” by using the “User button”            Ext. ADC Ref Jumper : Analog Reference voltage can be modified. Please refer to AREF section on  pg.13 (Link)        Micro-B USB : Used to download programs onto OpenCM9.04 and used to communicate with other devices via USB while simultaneously supplying 5V to the board.  Upon connecting the battery, 5V power from USB is automatically disconnected and power is supplied from the battery.  If excessive current is drawn, internal fuse cuts off the current drawn from the 5V USB connection to protect the user’s PC from damage.            Status LED : LED used to test OpenCM9.04’s program. The LED turns ON when Pin 14 or BOARD_LED_PIN is HIGH and turns OFF when it’s LOW. PWM control is possible.              Status LED Position        Reset Button : imitates the CPU to reset.      JTAG/SWD 4 PIN : Used to connect ST-LINK or other In-Circuit Debugger/Programmer.  JTAG/SWD 4-pin port can be used for various developments by advanced users. ST-LINK connection example is shown below.              Example: ST-LINK and OpenCM9.04 connection            5-pin Port : used to connect ROBOTIS 5-pin devices (modules).              5-pin port number and instructions                  5-pin cable direction                                5-pin Device Type          Port 1          Port 2          Port 3          Port 4                                      IR Sensor          O          X          X          O                          DMS Sensor          O          O          O          O                          Gyro Sensor          O          O          O          O                          Touch Sensor          O          O          O          O                          Color Sensor          X          O          O          X                          Magnetic Sensor          O          O          O          O                          Temperature Sensor          O          O          O          O                          Passive IR Sensor PIR-10          O          O          O          O                          LED Module          X          O          O          X                            ROBOTIS sense and LED module compatibility list            I/O Header : OpenCM9.04’s CPU  can be accessed via GPIO pins.    26 GPIO pins (0~25) are digital input/outputs and operates at 3.3V. Digital input either HIGH(3.3V) or LOW(0V).   Digital input’s maximum toggle speed is 18Mhz. (With exception of pin 22 &amp;amp; 23, which has a maximum toggle speed of 2Mhz).   Digital pins can only tolerate up to 3.3V; any voltage input greater than 3.3V may damage the OpenCM9.04.  5V Tolerant Pin : 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21   The maximum current these pins can tolerate is 25mA. (exception: pin 22 &amp;amp; 23 can only tolerate 3mA.)   All of OpenCM9.04’s GPIO pins can internally “pull-up” or “pull-down” and can be modified via software. “Pull-up” and “pull-up” resistance is 40Kohm(Typical).              OpenCM9.04 GPIO PinMap        Serial(USART) : 11(TX1), 12(RX1), 4(TX2), 5(RX2), 24(TX3), 25(RX3)  PWM : 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14  SPI : 0(SS1), 1(SCK1),6(MISO1) ,7(MOSI1), 18(SS2) ,19(SCK2) ,20(MISO2) ,21(MOSI2)  LED : 14 (BOARD_LED_PIN is defined as 14)  BUTTON : 23 (BOARD_BUTTON_PIN is defined as 23)  TWI(I2C) : 24(SCL2), 25(SDA2)  RST : Pin connect to the CPU Reset signal.  5V : outputs 5V when the battery is connected to the board. (Does not output 5V when USB only the USB cable is connected.)  3.3V : outputs 3.3V when the power is supplied to the board via battery or USB cable.  GND : GROUND(-) terminal.  A0 : Digital I/O and analog input.  A1 : Digital I/O and analog input. Can be used for SPI channel 1’s SCK clock-pin.  A2 : Digital I/O, analog input, &amp;amp; PWM output.  A3 : Digital I/O, analog input, &amp;amp; PWM output.  A4 : Digital I/O, analog input, &amp;amp; PWM output. Used as USART1 (Serial2) channel’s TXD pin and connected to 4-pin communication port’s TX2.  A5 : Digital I/O, analog input, &amp;amp; PWM output. Used as USART2(Serial2) channel’s RXD pin and connected to 4-pin communication RX2.  A6 : Digital I/O, analog input, &amp;amp; PWM output. Can be used as SPI channel 1’s MISO pin.  A7 : Digital I/O, analog input, &amp;amp; PWM output. Can be used as SPI channel 1’s MISO pin.  A8 : Digital I/O, analog input, &amp;amp; PWM output.  A9 Digital I/O, analog input, &amp;amp; PWM output.  D10 : Digital I/O &amp;amp; PWM output.  D11 : Digital I/O &amp;amp; PWM output. USART1’s (Serial1) TX pin. Cannot be simultaneously used with the Dynamixel TTL Bus.  D12 : Digital I/O &amp;amp; PWM output. USART1(Serial1)’s RX pin. Cannot be simultaneously used with the Dynamixel TTL Bus.  D13 : Digital I/O &amp;amp; PWM output.  D14 : Digital I/O &amp;amp; PWM output. Pin connected to the Status LED. It’s pre-defined as BOARD_LED_PIN.  D15 : Digital I/O.  VCC(+) : +voltage of the board. There are 2 VCC(+) pins. Connected to the + terminal of the battery socket.  GND(-) :-voltage of the board. There are 2 GND(-) pins. Connected to the + terminal of the battery socket.  TTL : Dynamixel TTL Bus’s Data line. Used to communicate with 3-pin TTL Dynamixels.  D : Relevant to Dynamixel TTL Bus and used to select TX, RX.  X : Dynamixel TTL Bus’s TX pin.  L : Dynamixel TTL Bus’s RX pin.  D16 : Digital I/O Pin.  D17 : Digital I/O Pin.  D18 : Digital I/O Pin.  D19 : Digital I/O Pin. Can be used for SPI channel 2’s SCK clock pin.  D20 : Digital I/O Pin. Can be used for SPI channel 2’s MOSI pin.  D21 : Digital I/O Pin. Can be used for SPI channel 2’s MOSI pin.  D22 : Digital I/O Pin. Maximum output current is 3mA and maximum toggle speed is 2Mhz.  D23 : Digital I/O Pin. It’s connected to User Button. If the power is supplied while User Button is pressed, the board initiates Emergency Recovery (Download) Mode. Maximum output current is 3mA and maximum toggle speed is 2Mhz.  D24 : Digital I/O Pin. Can be used as I2C channel 2’s SCL pin or USART3(Serial3)’s TX pin.  D25 : Digital I/O Pin. Can be used as I2C channel 2’s SDA pin or USART3(Serial3)’s RX pin.  5V : 5V output pin. JP2 jumper can be modified to connect to AREF pin and change the default voltage to 5V.  AREF : Connect to CPU’s Analog Reference pin. Voltage can be modified from 3.3V by changing the JP2 jumper (Maximum 5V). Refer to STM32F103CB datasheet for specifications.)  JP2 jumper location and instructions  Example: Changing default Analog Reference voltage(AREF) to 5V by modifying JP2Caution Check the pin supporting up to 5V once Analog Reference (AREF) has been modified to 5V.Connecting PowerOpenCM board can be powered using 3 types of voltage input:  LBS-40 battery socket  Power supplied via +- header pins  Micro-B USB cableWe recommend using 2 LBS-40 batteries when operating the XL-320.  Example: OpenCM9.04, XL-320, and LBS-40(Li-Ion Battery) connection  LBS-40 batteryWe recommend using +- pin to power Dynamixels other than XL-320.  Example: OpenCM9.04 and AX12 connectionAs displayed in the image below, connect towards the end of both +,- and it can also be connected using other power supply equipment.(If you see the back side of OpenCM9.04, the +,- in the center is connected as displayed in image A. So, please connect as in the image below)  Picture A  Example : Power Connection  Example Power supply cable (Link)Avoid connecting power to the battery socket and +- pin (shown below). Do not connect anincorrect battery to the battery socket. Only connect LBS-40 onto the battery socket.  CAUTION: Remove either the battery connector or +-header-pin power  CAUTION: Don’t used different types of batteriesIt is possible to simultaneously connect the USB port, LBS-40 battery, and +- pin.(Built-in protection)We recommend supplying the recommended voltage of the Dynamixel when supplying power via +- pin or battery. Higher voltage usage may reduce the Dynamixel’s lifespan or damage the product.The OpenCM9.04’s maximum tolerable voltage is 16V; voltage input greater than 16V may damage the board.Dynamixel cannot operate using the power supplied via USB cable, but communication ports and I/O headers can be operated normally.CAUTION: do NOT charge the LBS-40 battery while it is connected to the board and the board is connected to the PC via USB cable.Switch Assembly(Type A)OpenCM9.04 Type A is sold without a power switch and JP1 shorted. To add the power switch, remove the solder connection of JP1 and solder the 2.54mm pitch power switch.Power switch is included in the OpenCM accessory kit or other switches with the similar pitch can be used.  JP1&amp;amp; Power Switch schematics : Power is supplied to the board if JP1 is connected even without a switch  OpenCM9.04 Type A needs to have JP1 disconnected when soldering the switch for it to operate properlyConnector Assembly(Type A)OpenCM9.04’s Dynamixel 3-Pin TTL pins are all compatible with Dynamixel 3-pin TTL and XL-320 3-pin TTL(mini-type). Thus, both type of pins can be soldered and used.Both types of 3-pin TTL pins are included in OpenCM Accessory Set.  OpenCM9.04 Type A can have 2 types of 3-pin connectors soldered onto the boardDownloads  Download ZIP OpenCM 9.04 Manual  Download PDF PCB Schematic  Download PDF Top Gerber  Download PDF Bottom Gerber  Download PDF Gerber  Download Software Link OpenCM IDEDimension",
        "url": " http://localhost:4000/docs/en/parts/controller/opencm904/"
      } ,
  
      "docs-en-parts-sensor-pir-10":  {
        "title": "Passive IR Sensor(PIR-10)",
      "content"	 : "Passive IR Sensor(PIR-10)Introduction  Motion-sensing sensor.  Object motion sensing occurs within the sensor rangeCompatibility Guide Controller CompatibilitySpecifications  Weight : 10g  Dimensions : 18mm x 30mm x 8mm  Sensing Range : 20cm ~ 2m  Sensing Angle : -45° ~ 45°Pinout  Not used  GND  ADC : Sensor output (for moving object)  VCC ( 3.3V )  Not usedCaution Cables can may be damaged when not properly connected (i.e. wrong orientation), or use of excessive force during connection.Caution Make connections to the controlled while unpowered. Making connections while the controller is powered may cause it to malfunction or/and damage.",
        "url": " http://localhost:4000/docs/en/parts/sensor/pir-10/"
      } ,
  
      "docs-en-edu-bioloid-premium":  {
        "title": "BIOLOID PREMIUM",
      "content"	 : "BIOLOID PREMIUMIntroduction  Excellent walking humanoid (Self-Adjusts posture while walking)  Various sensors including Gyro, Distance, and IR  Remote control capability (IR-default, Bluetooth-optional)  C-style programming &amp;amp; motion teaching with RoboPlus S/W (USB interface included)  Semi-transparent humanoid skin for customization  Digital packet communication with daisy chain topology  Build various robots through versatile expansion mechanismGetting StartedPart List  CM-530  AX-12A  DMS Sensor  IR Sensor  Gyro Sensor  USB2DynamixelOperatingDownloading the Program  Program for type A is installed by default in CM-530.  You can find task codes and motion files for other actions on the Default Program page.Turning the Robot on  Turn the power switch on and the LED will start blinking.  Use the MODE button to move the LED to “PLAY”. (The LED will move each time you press the MODE button)  Press the START button. (Check whether the LED on “PLAY” is blinking)          If the LED does not turn on, check the power cable/connection.      If there are no problems with cable, recharge your battery. (Please refer to Charging for more information)      The power does not turn on.  Is the battery properly connected?  Is the battery fully charged?  Is the battery fuse intact?          Please refer Fuse Replacement for information on how to replace the fuse.      I want to check how much battery I have left.Turn the CM-530 on and press the U button. The LED will turn on to show how much battery you have left as seen in the figure below.The robot makes a continuous warning sound while moving.  The alarm indicates that the robot is low on batteries.  Immediately recharge your battery(Refer to Charge).  If you do not replace the battery right away, the robot may turn off without warning and fall, which can cause severe damage.Checking the robot’s basic posture (To check whether the robot has been assembled correctly)  The robot should stand in the basic stance and play a melody according to its type as in the picture below.  Make sure to hold the robot in its basic posture for 1 minute.          This is to allow the robot to automatically configure its gyro sensors so that it can walk properly.        Check the angles of the arms and legs. If they are different from the picture, go back to “Check Assembly Mode”  Check whether the cables have been assembled on the outer part of the leg.If the robot has been incorrectly assembled to an extent where it may be severely damaged, a warning sound will be activated. Also, the LED of the motor with the problem will turn on and release its torque to prevent damage.The robot’s basic posture and movements are awkward.  Awkward Basic Posture?          Go back to “Check Assembly Mode” and re-check whether all the dynamixels have been properly assembled.        Unable to detect obstacles while in Free Walk Mode?          Check whether the absolute distance measurement sensor’s cables are properly in place.      The robot falls down easily while walking or is otherwise unstable.  The gyro sensor used to detect the robot’s posture is not working          Please refer to the Assembly Manual to check whether the gyro sensor has been properly assembled.      The torque is released and the dynamixel’s LED turns on after a warning sound.  If the motor and frames have not been properly assembled or if the robot’s joints can not move properly, a warning sound will be activated to prevent damage.          Find the motor indicated by the LED and refer to the Assembly Manual to check whether it has been assembled correctly.              Make sure that the joints are free of cables or other debris.  Please refer to “Check Assembly Mode”      The robot type and melody do not match.  Check whether the motors with ID 7 ~ 10 are assembled properly. Check for loose connections            Robot Type      “Do”      “Do Re”      “Do Re Mi”      Repeat “Do Re Mi”                  TYPE A      O(Correctly Assembled)      Check cables for ID 9~10      Check cables for ID 7~8      Some of the cables have not been connected properly. Please refer to the Assembly Manual and check again.              TYPE B      -      O(Correctly Assembled)      ID 9 and10 connected where ID 7 and 8 should be connected      Some of the cables have not been connected properly. Please refer to the Assembly Manual and check again.              TYPE C      -      ID 7 and 8 connected where  ID 9 and 10 should be connected      O(Correctly Assembled)      Some of the cables have not been connected properly. Please refer to the Assembly Manual and check again.      Robot in Action  R : Remote Control Mode  D : Demo Mode  L : Autonomous Walking Mode  U : Check Assembly ModeNote If you press a button on RC-100 before choosing a mode, the robot will enter remote control mode.Remote Control ModeThe RC-100 is used to control the robot.  Press the POWER/MODE button for 2 seconds.  Press the buttons below to control the robot.          Walking : U / L / D / R      Change Posture : 1 + U / L / D / R      Demonstration Moves : 2 + U / L / D / R      Soccer Moves : 3 + U / L / D / R      Battle Moves : 4 + U / L / D / R      Walking Motions            Buttons      Motion                  U      Forward              D      Backward              L      Turn Left              R      Turn Right              U + L      Walk Forward + Left              D + L      Walk Left Sideways              U + R      Walk Forward + Right              D + R      Walk Right Sideways      Change Postures            Buttons      Motion                  1 + U      Getting up Backward (When lying on stomach)              1 + D      Getting up Forward (When lying on back)              1 + L      Push-up              1 + R      Handstand              2 + U      Pound Chest              2 + D      Scratch Head              2 + L      Cheer              2 + R      Bow      Soccer Motions            Buttons      Motion                  3 + U      Block Right (Release button to return to normal position)              3 + D      Block Left (Release button to return to normal position)              3 + L      Shoot with left foot              3 + R      Shoot with right foot      Battle Motions            Buttons      Motion                  4 + U      Attack              4 + D      Defend (Release button to return to normal position)              4 + L      Attack Left              4 + R      Attack Right      Setting the CM-510 IR ChannelsAfter mounting the IR receiver on CM-530 under control mode, you can set the channels to control it remotely by pressing the Aux button. If you change the channel of the controller, you must also change the channel of RC-100. On how to change the channel of RC-100, please refer to Changing RC-100’s Channel.            Buttons      Motion                  Start + U      Set the RC-100 channel as 1              Start + D      Set the RC-100 channel as 3              Start + L      Set the RC-100 channel as 2              Start + R      Set the RC-100 channel as 4        If the robot does not receive commends for a period of time, it will standby in a seated position.                                          When being controlled             Seated in a standby position      My remote controller does not work properly.  Set to control mode.  Check whether the IR receiver has been properly connected.  Check whether the remote controller is on. Replace the battery and try again.Point towards the IR receiver and try again.Check if there are others controlling robots nearby, which may cause wireless interferences.We want to play soccer or battle with several robots.  In order to play a game with several users, you must install the ZIG-110 set.  ZIG-110 set is available at the Robotis shopping mall.  Please refer to Controller and RC-100 for installation information.Demo ModeThe robot will clap depending on how many times you clap.When DMS senor detects an object, the robot greets the user.If the robot does not sense any sound or object for a while, it performs various motions on its own.                                          Claps depending on how many times you clap             Shows various movements      Autonomous Walking ModeThe robot will walk by itself while avoiding obstacles.  When absolute distance sensor detects an obstacle, the robot will stop and turn left until the obstacle is no longer detected.  If it falls down while walking, it will get back up in the direction it was moving.Check Assembly ModeYou may use the Check Assembly Mode to see whether your robot has been properly assembled. Isolate each motor and compare it to the standard posture.  Start the Check Assembly Mode. It will release the torque.  Press the U or D button and check one motor at a time. The selected motor’s LED will turn on and move to its basic position. ( U : Increases the ID by 1,  D : Decreases the ID by 1 )  Check the ID of the motor with the LED and compare it with the ID in the Assembly Manual.          If the ID does not exist in the robot, a warning sound will be activated.        Compare the position of the motors you have assembled to the basic posture.          If the LED is on but the torque is released, check the cables or the motor’s assembly status.      Battery ChargeYou may obtain Lithium polymer batteries from www.robotis-shop-en.com.If the robot alarm sounds off during operations then recharge the battery.During charging the charger’s red LED turns on. When complete the green LED turns on.      Take the battery out            Connect the charger            Charge    Charging(Red LED), Complete(Green LED)            You can connect the robot to an external power source through SMPS.            The battery is equipped with a connector to charge the battery and another to move the robot      Charging Time and Battery Life/OperatingCharging Time  When fully discharged : 1~1.5 hour  Leaving the battery fully discharged for too long may reduce its lifespan drastically.  Time to charge the battery depends on the status of the battery(If the charging time or battery life becomes too short, you may need to replace your battery).  Caution  Do NOT  keep the battery connected with a robot or a charger.  If you will not use the battery for a long time from now on, please keep it HALF-CHARGED.  Do NOT  put the battery with an environment with high temperature or humidity.VideoTutorialScreen OutputObjective for this tutorial is to print 1 and 2 on the output screen as below.Write Task Code      Execute RoboPlus Task Program.    As seen in the picture below, go to Start &amp;gt; All Programs &amp;gt; ROBOTIS &amp;gt; RoboPlus &amp;gt; Software &amp;gt; RoboPlus Task to execute RoboPlus Task.              RoboPlus Task Initial Screen                Select a Controller.    Double click an empty line or press Enter, In the Select Control window, select the controller to use, then press the OK button.            Generating Start Program.    Select Start Program from the Select Instruction Type window, Start Program will be automatically generated in RoboPlus Task.            Input Endless Loop command    To print the numbers on the screen endlessly, use the Endless Loop command(Create a command line). Double click or press Enter on an empty line between { and } of Start Program to invoke the Select Instruction Type window. Select Loop &amp;gt; Endless Loop(while(1)) from the list.            Input Load command    Use Load command to input a Print command, which is needed to print numbers on the screen. Insert Execute &amp;gt; Load (Assignment value) into an empty line between { and } of Endless Loop.            Load 1 into Print    Choose the left parameter ( ? ) among the Load parameters(Explanation on the parameter). The left parameter receives input from the right parameter. Double click the left parameter ( ? ), or press Enter key after clicking it once to invoke the Select Parameter Window. Select Controller &amp;gt; Print then press OK.        Select Constant Numbers &amp;gt; Number &amp;gt; 1 for the right parameter ( ? ) in the same way.        When both parameters of the Load command have been set, it should look like below.            Load 2 into Print with Line    Select } under Print command (at the end of the endless loop section), and add new lines by pressing the Space key. Repeat Steps 5 and 6 to input the Load command and to input  Controller &amp;gt; Print with Line and 2. The final task code is shown below.            Save Task Code    Press Ctrl + S or the Save icon.      Download Task CodeDownload the task code created above.(How to Download Task Code)Execute Task Code      Open the Program Output Monitor    To see the output of the program, you must open the Program Output Monitor BEFORE executing the program. There are three ways to open the Program Output Monitor.                  Click on the View Print of Program in the Download Program window                    Click on the View Print of Program button in TOOLS.      Press F5 or click on View Print of Program (V)  menu under Program (P).            Executing the Program    When you turn on the controller, the LED will blink, showing it is in standby mode. Press the MODE button to move it to PLAY, then press START to execute the downloaded task code. You should see “1” and “2” being printed on the Program Output Monitor.      Button &amp;amp; LEDObjective for this tutorial is to program the U button to turn the AUX LED on and the D button to turn it off. Pressing the START button will end the program.Write Task CodeDownload Task CodeDownload the task code created above.(How to Download Task Code)Execute Task CodeExecute the program and check whether the AUX LED turns on when you press the U button and turns off when you press the D button. Press START button to end.Walking MachineObjective for this tutorial is to learn how to use the Walking Machine.Waking Machine is a combination of a walking motion file made up of specific patterns and a task code that plays theh role of smoothly connecting the walking motions in this motion file.  Download Walking Motion File  Download Walking Task CodeLet’s use the Walking Machine to learn about how walking motions are converted smoothly.Motion File OverviewWalking Motion FileThe walking motion files used in the Walking Machine can be found on pages 31~224. Several motion pages are gathered and repeatedly played to make up one walking pattern (forward, backward, etc). Each page is made to be conveniently converted to the next walking pattern’s motion page.The walking patterns written in the Walking Motion FileThe walking motion files used in the Walking Machine contain 16 different walking patterns shown below.            Forward      Backward      Left Turn      Right Turn                                                      Walk Sideways + Left      Walk Sideways + Right      Turn Left + Forward      Turn Right + Forward                                                      Backward + Left      Backward + Right      Avoid Left      Avoid Right                                                      Forward + Left Diagonally      Forward + Right Diagonally      Backward + Left Diagonally      Backward + Right Diagonally                                          Task Code OverviewThe walking machine task code includes a InitializationWalk Function and a WalkExecute function. There are samples that use these 2 functions to control the robot with a remote controller.InitializationWalk FunctionThe InitializationWalk function initializes the variables and brings the robot to its default position.WalkExecute FunctionThe WalkExecute function executes each walking pattern and smoothly joins the walking pattern.Walk Command No.            No.      Walking Pattern      No.      Walking Pattern      No.      Walking Pattern      No.      Walking Pattern                  1      Forward      2      Backward      3      Left Turn      4      Right Turn              5      Walk Sideways + Left      6      Walk Sideways + Right      7      Turn Left + Forward      8      Turn Right + Forward              9      Backward + Left      10      Backward + Right      11      Avoid Left      12      Avoid Right              13      Forward + Left Diagonally      14      Forward + Right Diagonally      15      Backward + Left Diagonally      16      Backward + Right Diagonally      Start ProgramLet’s try writing a simple “Start Program” sample using the “InitializationWalk” function and “WalkExecute” functions to smoothly connect walking patterns.  First, call the InitializationWalk function to initialize the variable and to bring the robot to its default position.  Select and input a walking pattern between 0 and 16 for the WalkCommand variable, then call the WalkExecute function to run the selected walking pattern.  When you input a different number in the WalkCommand variable and call the WalkExecute function, it will convert to the new walking pattern as naturally as possible.There are 16 different walking pattern sample codes to control via remote control in the walking machine’s task code file. Change the Start Program function in the sample codes to suit your needs.Gyro SensorPrerequisite : Walking MachineCode to control the gyro sensor will be added to the task code used in the Walking Machine section. Review the Walking Machine section before getting started.Objective for this tutorial is to learn how to adjust a humanoid’s posture using a gyro sensor.A Gyro sensor is used to determine angular velocity (angular variation per second). When the robot tilts and angular velocity increases in a specific direction, the servo motor’s value can be adjusted in the opposite direction to straighten the robot.Download TASK Code(BIO_PRM_GyroSensorExam_EN.tsk)Things to Prepare  The gyro sensor’s X-axis value should be connected to port #3, and Y-axis value should be connected to port #4.  Other than that, modify the task code to suit your robot.Concept      Callback Function    A humanoid with a gyro uses the Callback Function to determin the posture adjustment value.The callback function is a function that runs independently of the main program routine and is automatically executed at  fixed intervals. Therefore, by calculating the adjustment value  and using the value in a callback function to adjust the posture at regular intervals, the robot can adjust its posture automatically.        Joint Offset    The joint off set is added to the adjustment value from the gyro sensor before being used to adjust the humanoid’s posture. (More information on Joint Offset) This is a parameter that gives an offset to the specific actuator’s joint position value. Thus, the actuator with joint offset execute their motions using the position value + joint offset value, which are designated in the motion file.  Task Code Overview      InitializationGyro Call Function            Execute BalancePage to Apply Joint Offset    In order to apply the joint offset a motion must be executed. When no motion is being played, the joint offset will not be applied even if a  value is input by the gyro sensor. The BalancePage is used to apply the joint when no motion is being executed.            InitializationGyro Function    The InitializeGyro function reads the gyro sensor value 10 times in a 0.128 second intervals and saves the average value as a gyro sensor standard value. (The standard value is Approximate 250 degrees.) If the gyro sensor value is less than 230 or greater than 270, it assumes there is no gyro sensor and does not use adjustment (when there is no gyro sensor or the robot has moved during initialization).            Calculating the adjustment value in the Callback Function    At regular intervals, the callback function reads the current gyro sensor value and compares it to the standard value to calculate the adjustment value. If the UseGyro variable is false, the robot it will not adjust itself. Thus, set the UseGyro variable to false where you do not wish to use the gyro adjustment.        Apply the calculated adjustment value to the joint offset and adjust the robot’s posture.  To adjust the front/back tilt, you must use the joints in the knees and ankle, which are actuators 13-16.  To adjust the left/right tilt, you must use the joints in the ankle and waist, which are actuators 9-10 and 17-18.      Adjustment Test  Download the task code to your robot(How to Download Task Code).  In order to initialize the gyro, you must leave your robot on flat ground for at least 1.5 seconds after executing the task code.  If the gyro sensor is not connected or if there is movement while initializing the gyro, the gyro will not make any  adjustments.  Check whether the robot attempts to adjust itself when its posture is changed by a strong outside force while standing straight.  Compare the robot’s actions when it uses and does not use a gyro while stanind on a slope.Custom Motions : CreatePrerequisite : Walking MachineMotions will be added to the motion file used in the “Walking Machine” section. Review the “Walking Machine” section before getting started.Objective for this tutorial is to add a new motion using RoboPlus Motion.Let’s learn how to add 4 motions below using the RoboPlus Motion program.            Motion Page No      Movement Description      Motion Page No      Movement Description                  14      Block ball on the right      27      Get up while lying on stomach              16      Block ball on the left      28      Get up while lying on back      Download Motion File(BIO_PRM_UserMotionExam_EN.mtn)Make a motion to block a ball on the right      Execute RoboPlus Motion, then connect it to the controller(Please refer to Connect Robot                To add the “Block Ball” motion in page 14, input a name and step.            Turn off all motors, then set the robot’s pose.  The “Block ball on the right” pose is shown below.            Set the robot’s pose as above. When you press the “torque on” button, the robot’s current actuator values will automatically be saved. When you press the left arrow button, you can read the robot’s current input actuator values into Step’s Pose column.            You can adjust the pause and play durations. (Click here for more information on STEP STOP/PLAY            Designating the NEXT page as itself(14) will cause the robot to enter an infinite loop and maintain its pose.  Also designate an EXIT page for the robot to smoothly transiton into when it exits the infinite loop.            Make a motion to return to the standard position on the page designated as the Exit page (15). Add the following 3 steps and poses to page 15.            Additional settings (Number of Repeats, Play Speed, etc    You can also set the number of repeats, entire speed, etc. for each page.      Make a motion to block a ball on the leftRepeat STEP 1 to make a motion to block a ball on the left on pages 16 and 17.Make motions to get up when the robot lying on its back and chest.Add the following steps in motion page 27 and 28 to make a “Get up while lying on stomach” and “Get up while lying on back” motions.      Get up while lying on the stomach            Get up while lying on the back      SaveUse the Save(S) command to save your work in the robot or use Save As(A) to save as a .mtn file in your PC.Custom Motions : Task CodePrerequisite : Adjustment using the Gyro Sensor, Custom Motions: CreateCode to execute user-defined motions will be added to the task code used in  the Adjustment using the Gyro Sensor section.  The motion file is from the Custom Motions: Create section.  Review the two sections before getting started.Write task code to execute user-defined motions.Let’s learn how to run the motion added on “ User-defined Motions 1 : Create Motion “ with the RC-100.  Download Motion File(BIO_PRM_UserMotionExam_KR.mtn)  Download TASK Code(BIO_PRM_UserMotionExam_KR.tsk)Task Code OverviewCode to execute user-defined motions has been added to the task code written in “Adjusting using the Gyro Sensor.”  Set WalkCommand  as 0 to make the robot stop.  If the motion added by the user does not require the gyro sensor to maintain posture, you must turn off the gyro sensor adjustment to prevent motion variation due to the offset. Set the UseGyro variable as FALSE.  Then call the EXITPageWaitMotion function and wait for the robot to come to a complete stop.  The Getting Up motions added in motion pages 27 and 28 can be played just once. Thus, execute the motion, and wait for the motion to finish before executing another motion.  The Block Ball motions added in motion page 14 and 16 are endlessly repeating motions. Thus, in order to end the motion, an EXIT page is needed.  Using the WAIT WHILE command so that if the button is not pressed and held, the EXITPageWaitMotion function will execute the EXIT to end the motion  (For more information, please refer to the Motion Page).  After the user’s motion ends, set the UseGyro variable back to TRUE to restore gyro adjustment.Gripper ControlPrerequisite : Custom Motions: Create, Custom Motions: Task CodeReview the two sections before getting started.Objective for this tutorial is to learn how to control the grippers regardless of the motions.When you add a gripper to your robot, there is a need to keep the robot’s arm fixed regardless of the motion.In this case, it is not necessary to revise the motions to keep the arm still.  Instead, let’s learn to control the gripper using the task code, while preventing specific actuators from being controlled by the motion data.  Download Motion File(BIO_PRM_HumanoidTypeB_EN.mtn)  Download TASK Code(BIO_PRM_GripperExam_EN.tsk)Background KnowledgeSetting priorities to control the gripper and motions separately.      Normal Control Priorities    Normally, motion data has the highest priority and task code has the next highest priority. Thus, under normal circumstances, if a motion is executed, it is impossible to control specific dyanmixels using task code.        Changing Control Priorities    There are 2 methods to control the motor (entire arm including the gripper) with a task code while a motion is being executed.          Uncheck the “Using Now/Not Using” checkbox for the acutator’s ID in the motion data.      Set the actuator’s “Joint Offset” parameter to 1024.        The first method disables the actuator in the entire page.  Even If there is a motion requiring the corresponding actuator, there is no way to control it with the motion data. Therefore, the second method, which allows you to activate /deactivate the application of the motion data for the specific actuator depending on your needs, may be the better option.  AssemblyPlease refer to the [Gripper Assembly].Writing Task Code      Initializing Gripper Control    Set the joint offsets of the actuatorsfor both arms to 1024, so that they are not controlled by the motion data.  Initialize the other data , such as  the arms’ and grippers’ movement speeds, and gripper’s grasping power and flexibility, then place the arms in their default position.            Revise Callback Function (Gyro Adjustment)    If the joint offset is used in the callback function to apply the gyro adjustment value, the joint offset should not be set for the joints used by the grippers.  This is to prevent the values set as 1024 in STEP 1 from being changed.            Gripper/Arm Control Function    Copy the following fuction to control the gripper and arm.  This function can control the gripper’s and arm’s movements, regardless of the motion status.        Write a function for the left arm and gripper as above.        Controlling the arm and gripper with a remote controller    Add code to control the gripper and arm using the remote controller. Reviewing [Custom Motions: Task Code] will help you understand the code below.      Download and Verify Result  Download the task code written in STEP 2 (How to Download of task code).  While controlling the robot’s motion with the remote controller, check whether the gripper and arm are fixed.  Control the gripper with the remote controller.ReferencesReplacing FuseThe fuse in the CM-510/CM-530 prevents it from overloading,which can damage the circuit.If the CM-510/CM-530 does not turn on with the battery but turns on when connected to the SMPS, replace your fuse.※ The size of the fuse is shown below. Use a 125V/5A~10A fuse.※ How to replace the fuse      Find the fuse on the back of the CM-510/CM-530.            Use a pincette to replace the fuse with a new one.      Dynamixel ManagementDynamixels used as robot actuators possess many functions. This section explains how to change the dynamixel’s settings.Changing the ID  Select the port the controller is connected to.      Click “Connect”.        A list of connected dynamixels is shown on the left. Click on the dynamixel you wish to change the ID of.  Click on the ID row in the Control Table.      Click on the ID List combo box to see a list of possible ID’s. Select the ID, then click Apply.        To use in RoboPlus Motion and RoboPlus Task, the ID must be within the following ranges.          The Dynamixel’s ID must be between 0 and 25.      The ID for AX-S1 should be set between 100 and 109.      Changing the Movement ModeThe dynamixel can operate in 2 different modes.  Wheel Mode : Rotates 360 degrees like a regular motor.  Joint Mode : Moves at a set angle with normal servo motors.The mode can be changed using RoboPlus Manager. Once the mode is set, it will be maintained, even when turned off.  Select the port the controller is connected to.      Click “Connect”.        A list of connected Dynamixels is shown on the left.  Click on the Dynamixel you wish to change the mode of. Then, click on the CW/CCW Angle Limit line in the Control Table.      To set to Wheel Mode, change the CW/CCW Angle Limit value to “0.”  Or, simply click on the “Wheel Mode” button.        To set to Joint Mode again, set the CW/CCW Angle Limit value to any number other than “0”. The initial values for Joint Mode are “0” for CW Angle Limit, and “1023” for CCW Angle Limit.TroubleshootingIf you cannot find the dynamixel you are looking for using RoboPlus Manager, try the following :  Connect just 1 Dynamixel and check if there are any duplicate IDs. If you see a Dynamixel on the left even though only 1 Dynamixel is connected, there is a high probability of a duplicate ID. Change the ID immediately.  If you are unable to find any Dynamixels as in the image below, click on “Dynamixel Search”. If the communication speed is not set to 1Mbps, the “Dynamixel Search” function automatically resets the controller’s communication speed to 1Mbps to enable it to be recognized.If the problem persists, your dynamixel may need repair. Please contact the service department of the company you purchased from.ZIGBee Wireless ControlZIGBeeZIG-100/110 uses ZIGBee for wireless communication. ZIGBee, like Bluetooth, is the communication technology commonly used in Personal Area Network (PAN). The communication quality of ZIGBee is better than that of IR, so it allows many users to control their robots without interferences.Caution Please note that not all products include a zigbee module and may need to be purchased separately.Controller &amp;amp; ZIGBeeOLLO and Bioloid both use the RC-100, which uses IR communication method. To upgrade to the Zigbee communication method, you must purchase the  ZIG-110 set separately. The ZIG-110 set includes one Zig-100 module, which is attached to the RC-100, and one Zig-110 module which is attached to the Controller.Note The modules in a single Zigbee set have been preconfigured to communicate with each other. Therefore, a module from one set may not work with a module from another set. Please be careful not to mix them up.            ZIG-100 installed in RC-100      ZIG-110 installed in CM-100                                          ZIG-110 installed in CM-510      ZIG-100 installed in CM-5                              Customizing RobotUse the semi-transparent skins provided only in the Premium Kit to make your humanoid unique.Customizing your semi-transparent skinsSamples of customized chest skins                                                                    Samples of customized head skinsSamples of robots with customized skins                                                            Adding SensorsWith the Bioloid Premium Kit, you can connect additional IR Sensor and Touch Sensor to the CM-530.For more information on each sensors, please click on the names of the sensors.IR Sensor  IR Sensor Applications          The IR sensor can detects objects in front of the robot.      It can also be used to detect object on the side when walking or moving.      More informationTouch Sensor  Touch Sensor Applications          The touch sensor enables the robot to feel when it has been touched.      For example, the sensor can be used to make the robot react to certain touches.      More informationMake Your Own SensorYou can make your own sensor with simple control functions using the ADC port and OUT port on CM-510/CM-530.Caution Connecting poorly designed circuits may damage the controller. Please be sure to acquire sufficient knowledge about circuits beforehand.PIN Information  Below is a pin diagram of CM-510’s external port.          OUT : 5V Output      VCC (5V)      ADC : Can read analog signals made by users.      GND      NC : Not used        Below is a pin diagram of CM-530’s external port.          OUT1 : 3.3V Output (Maximum Allowed Current 0.3A)      VCC (5V)      ADC : Can read analog signals made by users.      GND      OUT2 : 3.3V Output (Maximum Allowed Current 0.3A)      Note Please use the 5P Cable when using other sensors. The 5P cable can be purchased from ROBOTIS.Controlling User’s DeviceExternal Output ControlBelow is an example of an LED circuit to turn the LED on and off using the OUT port (Pin 1).You need to adjust the amound of resistance depending on the type of controller and/or the type of LED.A high signal can be sent to the OUT port using RoboPlus Task.  Select the user’s device in the writable parameter such as LOAD and CALCULATE, then select the port on which the device is connected.  Then, set the high signal to the readable parameter using a constant.When the code above is executed, high signal will be sent to the OUT port of the device connected to PORT 3, and the LED will turn on.Reading the ADC ValueMost of the sensors used in robots, such as IR sensors and distance sensors, support analog output. The CM-510 can use its external ports to read the sensor’s analog output signals. These sensors may be designed by the user or bought from a store.  Below is an image of a tilt sensor. When the sensor is tilted, it prints the tilted value as the analog singal.  The left pin of the tilt sensor is 5V VCC. The center is an analog signal output pin, and the right pin is GND.  This sensor can be used by connecting its pins to the corresponding pins on CM-510’s external port.  To try for yourself, please refer to the pin information for CM-510’s external ports.  You can incorporate the sensor’s analog output to your robot’s movements as in the example below.Gripper Assembly  Users can add grippers to humanoid robots to fit their needs.  Grippers are useful when holding or throwing things.MaterialsThere are 2 spare AX-12+’s when assembling a humanoid Type B or Type C using the Bioloid Premium Kit.You can use these spare parts to make a gripper to your humanoid.Below are the parts required to make a gripper.Making a gripperThe image above shows how to make a gripper using frames and an AX-12+. Make two of these if you want to attach a gripper on both hands.Attaching GrippersBy making a robot with grippers, you can expand the things you can do with the robot.For more information on controlling the gripper robot, please refer to gripper control.Below is an image of a Type B humanoid with a grippers.AX-12+ #9 was used for the right gripper and AX-12+ #10 was used for the left.DownloadDefault Program  How to Download of task code  How to Download motion file            Robot Type      File Type      Download                  Assembly Manual      PDF File      Download              A Type      Task Code      Download              A Type      Motion File      Download              B Type      Task Code      Download              B Type      Motion File      Download              C Type      Task Code      Download              C Type      Motion File      Download      Humanoid Fight            Robot Type      File Type      Download                  A Type      Humanoid Fight Task Code      Download              A Type      Humanoid Fight Motion File      Download      Walking            Buttons      Motion      Buttons      Motion                  U      Move Forward      D      Move Backward              L      Turn Left      R      Turn Right              U + L      Move Forward and Turn Left      U + R      Move Forward and Turn Right              L + 5      Move Leftward      L + 5 + 6      Move Leftward Quickly              L + U + 5      Move Forward and Leftward      L + D + 5      Move Backward and Leftward              R + 5      Move Rightward      R + 5 + 6      Move Rightward Quickly              R + U + 5      Move Forward and Rightward      R + D + 5      Move Backward and Rightward      Attack            Buttons      Motion      Buttons      Motion                  1 + L      Attack Diagonal Left      6 + 2      Strong Left Attack              1 + R      Attack Diagonal Right      6 + 4      Strong Right Attack              2 + U      Attack Front      6 + 1      Strong Front Attack              2 + L      Attack Left      4 + U(4 + L)      Grab 1              2 + R      Attack Right      4 + D(4 + R)      Grab 2              3      Attack Left and Right      -      -      ETC            Buttons      Motion      Buttons      Motion                  5+6+D+3      Torque Off      5+6+U+1      Torque On              1 + U      Stand Up from face down      1 + D      Stand Up from back down      Humanoid Soccer            Robot Type      File Type      Download                  A Type      Humanoid Soccer Task Code      Download              A Type      Humanoid Soccer Motion File      Download      Walking            Buttons      Motion      Buttons      Motion                  U      Move Forward      D      Move Backward              L      Turn Left      R      Turn Right              U + L      Move Forward and Turn Left      U + R      Move Forward and Turn Right              L + 5      Move Leftward      L + 5 + 6      Move Leftward Quickly              L + U + 5      Move Forward and Leftward      L + D + 5      Move Backward and Leftward              R + 5      Move Rightward      R + 5 + 6      Move Rightward Quickly              R + U + 5      Move Forward and Rightward      R + D + 5      Move Backward and Rightward      Offense            Buttons      Motion      Buttons      Motion                  2 + U      Left Kick Forward      4 + U      Right Kick Forward              2 + 6 + U      Strong Left Kick Forward      4 + 6 + U      Strong Right Kick Forward              2 + D      Kick Backward      4 + D      Kick Backward              2 + L      Kick Left      4 + L      Kick Left              2 + R      Kick Right      4 + R      Kick Right      Defense            Buttons      Motion      Buttons      Motion                  3      Prepare for Blocking      3 + L      Block Left              3 + U      Block Front      3 + R      Block Right      ETC            Buttons      Motion      Buttons      Motion                  5+6+D+3      Torque Off      5+6+U+1      Torque On              1 + U      Stand Up from face down      1 + D      Stand Up from back down              1 + L      Chest Beat      1 + R      Cheer      ExamplesBeginner            Examples      Description                  1. Crossing Gate      Download Assembly ManualDownload Task CodeDownload VideoDevices CM-530(x1), AX-12+(x1)Dynamixel Setting AX-12+ ID[1]: Joint ModeRoboPlus LanguageFunction, Call, Load, Endless Loop, If, Wait WhileAlgorithmControl the Dynamixel’s position using the buttons on the CM-530Operation Guide- Press the U button on the CM-530 to open the bar.- Press the D button on the CM-530 to lower the bar.              2. Universal Gauge      Download Assembly ManualDownload Task CodeDownload VideoDevices CM-530(x1), AX-12+(x1)Dynamixel Setting: AX-12+ ID[1]: Joint ModeRoboPlus LanguageFunction, Call, Return, Load, Calculate, Endless Loop, If, Else ifAlgorithmControl the Dynamixel’s speed using the buttons on the CM-530Operation Guide- Press the U button on the CM-530 to increase the gauge’s speed.- Press the D button on the CM-530 to decrease the gauge’s speed.              3. Crocodile Mouth      Download Assembly ManualDownload Task CodeDownload VideoDevices CM-530(x1), AX-12+(x1), IR Sensor(x1)Dynamixel Setting: AX-12+ ID[1]: Joint ModeRoboPlus LanguageFunction, Call, Load, Endless Loop, If, Else If, Wait WhileAlgorithm Control the Dynamixel position and Buzzer with the value from the IR Sensor and TimerOperation Guide- The mouth opens when the front sensor detects something, and close when nothing is detected.- It will open its mouth when it detects something.- A melody will activate if nothing is detected for 10 seconds.              4. Pan Tilt      Download Assembly ManualDownload Task CodeDownload VideoDevices CM-530(x1), AX-12+(x2)Dynamixel Setting: AX-12+ ID[1, 2]: Joint ModeRoboPlus LanguageFunction, Call, Load, Calculate,Endless Loop,If, Else If, Wait WhileAlgorithmControl the Pan Tilt using the buttons on the CM-530Operation Guide- Press the U button on the CM-530 to move  the tilt actuator (Up, Down) up.- Press the D button on the CM-530 to move  the tilt actuator (Up, Down) down.- Press the R button on the CM-530 to turn  the pan actuator (Sideways)  right.- Press the L button on the CM-530 to turn  the pan actuator (Sideways) left.              5. Parking Gate      Download Assembly ManualDownload Task CodeDownload VideoDevices CM-530(x1), AX-12+(x2), IR Sensor(x1)Dynamixel Setting: AX-12+ ID[1, 2]: Joint ModeRoboPlus Language Function, Call, Load, Endless Loop, If, Else If, Wait While, Break LoopAlgorithmControl the Dynamixel’s position using the IR Sensor and Dynamixel’s load value.Operation Guide- When an object is detected, the parking gate opens perpendicularly.- When an object is detected and the bar is pushed, the parking gate opens horizontally.- When an object is not detected, the parking gate closes.              6. Smart Car      Download Assembly ManualDownload Task CodeDownload VideoDevices CM-530(x1), AX-12+(x4), IR sensor(x2)Dynamixel Setting: AX-12+ ID[1 ~ 4]: Wheel ModeRoboPlus Language Function, Call, Load, Calculate, Jump, Lable, Endless Loop, If, Else If, Wait WhileAlgorithm Use the CM-530’s buttons to set the mode and use the buttons and sensor value to control the rotation direction.Operation Guide- Press the U button together with the START button on the CM-530 to change to CONTROL mode.- Press the D button together with the START button on the CM-530 to change to FREE mode.- When you press the L button in CONTROL mode, it moves forward. The R button moves backward, U button moves rights, and the D button moves left. A melody will play each time it moves.- When front sensor detects an object in FREE mode, it will turn right. When the lower sensor detects something, it will avoid the edge and turn right.              7. Clapping Crab      Download Assembly ManualDownload Task CodeDownload VideoDevices CM-530(x1), AX-12+(x2)Dynamixel Setting: AX-12+ ID[1, 2]: Joint ModeRoboPlus Language Load, Calculate, Endless Loop, If, Wait WhileAlgorithm Control the Dynamixel position using the number of times the MIC detects a sound.Operation Guide- The robot will standby with its arm open.- The robot the number of time it detects a sound.              8. Attacking Duck      Download Assembly ManualDownload Task CodeDownload VideoDevices CM-530(x1), AX-12+(x3), IR Sensor(x2)Dynamixel Setting: AX-12+ ID[1, 2, 3]: Joint ModeRoboPlus Language Function, Call, Load, Endless Loop, If, Loop While, Wait WhileAlgorithmUse the sensor detecting to control the DynamixelsOperation Guide- The robot moves sideways continuously and watches for objects.- The robot follows the direction in which an object is detected then attacks when both sensors detect an object.              9. Distance Level Meter      Download Assembly ManualDownload Task CodeDownload VideoDevices CM-530(x1), AX-12+(x1), DMS Sensor(x1)Dynamixel Setting: AX-12+ ID[1]: Joint ModeRoboPlus Language Function, Call, Load, Calculate, Endless LoopAlgorithmControl the Dynamixel position using the distance detected by the sensor.Operation Guide The bar moves depending on the distance detected by the sensor.              10. Line Tracer      Download Assembly ManualDownload Task CodeDownload VideoDevices CM-530(x1), AX-12+(x2), IR Sensor(x2)Dynamixel Setting: AX-12+ ID[1, 2]: Wheel ModeRoboPlus Language Function, Call, Load, Calculate, Endless Loop, If, Else If, Else, Wait WhileAlgorithm Control the line tracer using the sensor’s detection value.Operation Guide The robot traces the black line.              11. Walking Droid      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM-530(x1), AX-12+(x4), IR Sensor(x1)Dynamixel Setting: AX-12+ ID[1 ~ 4]: Joint ModeRoboPlus Language Function, Call, Load, Endless Loop, If, Loop While, Wait WhileAlgorithmControl various motions using the IR Sensor’s value.Operation Guide- Place an object in the robot’s path and start your robot.- Checks whether the robot avoids obstacles while walking.      Intermediate            Examples      Description                  1. Probing Robot      Download Assembly ManualDownload Task CodeDownload VideoDevices CM-530(1), AX-12+(7),IR Sensor(1), DMS Sensor(1)Dynamixel Setting AX-12+ ID[1~4] : Wheel Mode, AX-12+ ID[5~7] : Joint ModeRoboPlus LanguageFunction, Call, Return, Load, Calculate, Endless Loop, If, Else, Wait While, Break LoopAlgorithm Object sensing and processing depending on IR Sensor’s and DMS Sensor’s valueOperation Guide- Place objects of various sizes in the robot’s path, then turn the robot on.- If the obstacle is too big, it will avoid it.- If the obstacle is not too big, it will move it then proceed going its way.              2. Excavator      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM-530(1), AX-12+(8), IR Sensor(1), DMS Sensor(1)Dynamixel Setting AX-12+ ID[1~4] : Wheel Mode, AX-12+ ID[5~8] : Joint ModeRoboPlus LanguageFunction, Call, Load, Calculate, Endless Loop, If, Else, Wait WhileAlgorithmDynamixel Position control depending on IR Sensor’s and DMS Sensor’s value.Operation Guide- Place an object in the robot’s path, then turn the robot on.- When an object is detected in front of it, it will begin excavating.- If an object is detected while carrying an object, the robot will turn in that direction and put the object it was carrying down.              3. Robot Flower      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM-530(1)(Sound Detection), AX-12+(6)Dynamixel Setting AX-12+ ID[1~6] : Joint ModeRoboPlus LanguageFunction, Call, Load,Endless Loop, If, Else, Wait WhileAlgorithm Motion control depending on the number of time sound is detected.Operation Guide- When the power is turned on, the flower blooms and moves as though it is dancing.- If one clap is detected, the petals will pucker up slowly.- If several claps are detected, the petals will pucker up quickly.              4. Fawn      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM-530(1)(Sound Detection), AX-12+(7), IR Sensor(1)Dynamixel Setting AX-12+ ID[1~7] : Joint ModeRoboPlus LanguageFunction, Call, Load, Endless Loop, If, Else If, Else, Wait WhileAlgorithmObject sensing using IR Sensor’s value.Operation Guide- When no change is detected, the fawn sits down and looks around.- If an object is detected in front of the face, the fawn will follow the object.              5. Turtle      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM-530(1), AX-12+(8), IR Sensor(2), DMS Sensor(1)Dynamixel Setting AX-12+ ID[1~8] : Joint ModeRoboPlus Language Function, Call, Load, Endless Loop, If, Else If, Else, Wait WhileAlgorithmAvoids obstacles depending on the IR Sensor and DMS Sensor value.Operation Guide- Place an obstacle in the robots path and turn the robot on.- The turtle avoids obstacles in front of it.              6. GerWalk      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM-530(1), AX-12+(7), IR Sensor(2), DMS Sensor(1)Dynamixel Setting AX-12+ ID[1~7] : Joint ModeRoboPlus Language Function, Call, Load, Endless Loop, If, Else If, Else, Loop WhileAlgorithm Control the Bird’s walking pattern using the IR Sensor and DMS Sensor value.Operation Guide- Place an obstacle in the robots path and turn the gerwalk robot on.- The robot avoids obstacles in front of it and on the sides.              7. Battle Droid      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM-530(1), AX-12+(8), IR Sensor(1)Dynamixel Setting AX-12+ ID[1~8] : Joint ModeRoboPlus Language Variables, Function, Call, Load, Calculate, Endless Loop, If, Else If, Else, Wait WhileAlgorithm Dynamixel control using the IR Sensor’s valueOperation Guide- Place an obstacle in the robots path and turn the battle droid robot on.- When the robot detects an object while walking, it will attack with both arms.- When battle droid falls down, it will know which side it has fallen up and get up on its own.              8. Quadruped Robot      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM-530(1), AX-12+(8), IR Sensor(1), DMS Sensor(1)Dynamixel Setting AX-12+ ID[1~8] : Joint ModeRoboPlus Language Function, Call, Load, Endless Loop, If, Wait WhileAlgorithmControl the walking using the IR Sensor and DMS Sensor valueOperation Guide- Place an obstacle in the robots path and turn the quadruped robot on.- The robot avoids obstacles in front of it.              9. Biped Walking Robot      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM-530(1), AX-12+(8), IR Sensor(1), DMS Sensor(1)Dynamixel Setting AX-12+ ID[11~18] : Joint ModeRoboPlus Language Function, Call, Load, Endless Loop, If, Else If, Else, Wait While, Loop WhileAlgorithm Control the walking using the IR Sensor and DMS Sensor valueOperation Guide- Place an obstacle in the robots path and turn the robot on.- The robot avoids obstacles in front of it and on the sides.              10. Robot Arm      Download Assembly ManualDownload Task CodeDownload VideoDevices CM-530(1), AX-12+(8)Dynamixel Setting AX-12+ ID[1~8] : Joint ModeRoboPlus Language Function, Call, Load, Calculate, Endless Loop, If, Else, Loop WhileAlgorithm Dynamixel Communication for Position ValueOperation Guide Check whether the responding motor reacts to the control motor’s movement.      Advanced            Examples      Description                  1. Dinosaur      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM-530(1), AX-12+(15), IR Sensor(1)Dynamixel Setting AX-12+ ID[1~15] : Joint ModeRoboPlus Language Function, Call, Load, Lable, Jump, If, Else If, Else, Wait WhileAlgorithm Object detection and motion control using IR Sensor value.Operation Guide- Place an obstacle in the robots path and turn the dinosaur robot on.- The dinosaur robot attacks.- When the obstacle disappears, it continues walking.- When nothing is detected for a while, it will sleep.              2. Puppy      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM-530(1)(Sound Detection, Timer), AX-12+(17), IR Sensor(1)Dynamixel Setting AX-12+ ID[1~17] : Joint ModeRoboPlus LanguageFunction, Call, Load, Lable, Jump, If, Else If, Wait WhileAlgorithmMotion control depending on the sound detection of the IR Sensor and Timer.Operation Guide- Place an obstacle in the robots path and turn the puppy robot on.- When a sound is detected, it will walk avoiding obstacles.- If you touch its mouth, it will do cute things.- It will do different things depending on the number of claps.- When nothing is detected for a while, it will sleep.              3. King Spider      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM-530(1)(Timer), AX-12+(18), IR Sensor(2)Dynamixel Setting AX-12+ ID[1~18] : Joint ModeRoboPlus LanguageFunction, Call, Load, Lable, Jump, If, Wait WhileAlgorithm Application motion control depending on the sound detection of the IR Sensor and Timer.Operation Guide- When it detects an object while walking, it will avoid it.- It will attack when something is detected near the front.- When an object is detected above it, it will crumple up its body.- When nothing is detected for a while, it will sleep.              4. Scorpion      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM-530(1)(Sound detection), AX-12+(18), DMS Sensor(1)Dynamixel Setting AX-12+ ID[1~18] : Joint ModeRoboPlus Language Function, Call, Load, Lable, Jump, If, Else If, Loop For, Wait WhileAlgorithmApplication motion control depending on the number of sounds detected and DMS Sensor value.Operation Guide- The robot sleeps when you first turn it on.- The robot will awake when you clap.- If you clap twice when the robot is awake, it will run away.- The closer your hand gets to the sensor, the tail will rise to threaten you.- If you get too close, it will attack.              5. Lizard      Download Assembly ManualDownload Task CodeDownload Motion FileDownload VideoDevices CM-530(1), AX-12+(14), IR Sensor(1),DMS Sensor(1)Dynamixel Setting AX-12+ ID[1~14] : Joint ModeRoboPlus Language Function, Call, Load, Calculate, Endless Loop, If, Else If, Else, Wait  WhileAlgorithm Obstacle avoidance motion control using the IR Sensor and DMS Sensor value.Operation Guide- It will being crawling once turned on, and will stop when it detects an object then avoid it.- When the tail is caught, it will try to escape.      ",
        "url": " http://localhost:4000/docs/en/edu/bioloid/premium/"
      } ,
  
      "docs-en-software-rplus1-task-programming-01":  {
        "title": "R+ Task 1.0",
      "content"	 : "ProgrammingEditThese are the methods used for editing in RoboPlus Task.Select Multiple LinesRoboPlus Task provides a function to select and edit (cut, copy, delete, comment,etc) multiple lines of program code. There are multiple ways to select multiple lines.      While pressing the Ctrl key, click on the lines with the mouse.        Click on the first line, and while pressing the Shift key, click on the last. The lines between the two lines will be selected.      Click and drag on the lines you want to select.            To select all lines, right-click on the code, then click select “Select All”. You may also press Ctrl + A.      Insert New LineRoboPlus Task provides a function to insert a line between existing lines. There are multiple ways to insert new lines.(New lines will be inserted below the highlighted line.  Press the Space bar.      Right click, then select “Insert Line”’.      Delete LinesRoboPlus Task provides a function to delete lines.  One or more lines may be deleted at once. There are multiple ways to delete lines.      Select the line(s) to delete, right-click, and click “Clear Line”. The lines will be cleared, resulting in blank lines. You may also press the Backspace (←) key.            Select the line(s) to delete, right-click, and click “Delete Line”. The lines will be deleted, and the lines below the deleted lines will move up.  You may also press the Delete key.      Enable/Disable LinesRoboPlus Task provides a function to enable or disable lines. There are multiple ways to enable/disable lines.  Select the line to enable or disable, right-click, and click “Enable/Disable”.      Select the line to enable or disable, and press Ctrl + E        The function will enable disabled lines and disable enabled lines.  This function is commonly used to keep certain commands from being executed in certain situations, such as when testing code.Copy/Cut/PasteRoboPlus Task provides a function to cut, copy and paste lines.Copy  Select one or more lines, right-click, and click ‘Copy’.  The selected line will be copied to a temporary clipboard.  When you perform the ‘Copy’ function, the data in the clipboard will be replaced with the new selection.      The shortcut is Ctrl+C.      Cut  Select one or more lines, right-click, and click “Cut”.  The selected line will be deleted and stored in a temporary clipboard.  When you perform the “Cut” function, the data in the clipboard will be replaced with the new selection.      The shortcut is Ctrl+X.      Paste  You can use this function only when there is data in the clipboard.  Select the line where the data will be pasted, right-click, and click “Paste”.  The data in the clipboard will remain even after it has been pasted, so you can paste the same data many times.  If you perform the “Paste” function on a line with code, the code will be overwritten with data from the clipboard.      The shortcut is Ctrl+V.      Find NameRoboPlus Task provides a function to search for used elements.  From the “‘edit” menu, select the”‘Find Name” function. The shortcut is Ctrl+F.  Enter a keyword and click the “Find Next” button.CommandsStart Program“Start Program” designates the beginning of a program. Regardless of the line number, the program will always start at this point. “Start Program” is like the “main” function in the C language.Usage  “Start Program” is executed regardless of its line number.  A program cannot have more than one “Start Program” command.  The body of the command must be enclosed by brackets.  The program will end when the closing bracket( } ) is reached.ExampleStart a program with the “Start Program” command.End ProgramIf this command is called during program execution, the program exits immediately. There are 2 ways to end a programme.      When the end of “Start Program” is reached(Natural Exit).          When “End Program” is called(Forced Exit).    UsageCall the command at the point in the program where you want it to end.ExampleIn this sample code, the program will end when the touch connected to Port3 is pressed.Start/End of SectionA block or a section (identified by “{“ and “}”) is a group of commands. All commands in a block have the same scope. The concept of  a block is the same as in the C language.UsageEach block has an opening bracket ({) and a closing bracket (}). RoboPlus Task performs automatic indentation to show whether the brackets have been paired properly. If there are missing brackets, they must be added before the program can run indentation. If they were not arranged properly, you have to revise them by yourself.Each block must be “owned” by a command. Blocks cannot be used independently with commands. The followings are the most commonly used commands that are followed by a block.  Start Program  If / Else if / Else  Endless Loop  Loop For  Loop While  Callback Function  FunctionIf a command is made by one line, it is possible to skip the block brackets.ExampleThe “Start Program” and “Endless Loop” commands must be followed by blocks, as shown in the example below.Comments/NotesThis command is used to insert a comment or a note in the program code.  Comments are helpful when interpreting or reviewing the code later. They are mostly used to mark easily forgotten parts or to emphasize important information.  Comments and notes do not affect the program in any way.  Like in C, comments can be made with two slashes(//).  Comments blocks ( ‘/*’, ‘*/’ ) are not supported.Usage  Insert the commend where you would like to write a comment or note.  When “//” is added, double click or press Enter to write in the comment or note.  Pressing ESC while writing will erase what has been written and return the line to its previous state.  When finished, press Enter.ExampleThis code will print “10” on the screen.  The comment explains how  the command line below will be executed.Calculate“Calculate” is a command to perform an arithmetic operation on two numbers.“Calculate” can perform the following operations:  Basic Operations (supports negative numbers)          Addition(+): Add two values.      Subtraction(-): Subtract the second number from the first number.      Multiplication(*): Multiply two numbers.      Division(/): Divide the first number by the second number (Remainders are discarded.)        Bit Operations(Means 2 decimal operation).          AND(&amp;amp;): Perform a logical AND operation.      OR(|): Perform a logical OR operation.      UsageYou can choose an operator by double clicking a mouse or by pressing the Enter key.Choose the appropriate 3 parameters (result, operand1, operand2) necessary for the command.ExampleThis example shows how to add 10 and 20 and to display the result on the screen.LoadLoad is defined as “to place into an appropriate device”. In RoboPlus Task, Load places a value in a device.Load is used for the followings:  To execute a device’s function.  To move a value.UsageChoose the appropriate 2 parameters (destination, source) necessary for the command.ExampleTo execute a device(Set the timer to 1.024 seconds).To set a value (Insert 10 into the variable)Label/JumpLabel and Jump are used to branch a program. Branching is used to change the order commands in a program are executed. Jump branches the program and Label designates where to branch to. It is the same function as Label and Goto in the C language.Usage  Label names must abide by the following rules:          There cannot be duplicate label names.      Label must exist within a program or function body.      A jump to a label in another function is not possible.      Spaces and Special characters(!, @, #, $, etc.) are not allowed in label names.      Labels cannot start with a number.        While inputting the label name, Press Esc to cancel.  Otherwise, press Enter to save  While selecting the label to jump to, Press Esc to cancel.      Otherwise, click the appropriate label or press Enter while the label is highlighted to save.        A jump can only be made to an existing label.      The label must be in the same function block as the jump command.      ExampleIn this sample code, the program jumps to “JumpPoint” as soon as it starts and executes “Routine 2”.If/Else if/ElseThese commands will branch the flow of the program depending on whether the condition is true or false.  If : Execute if the clause is true.  This is the equivalent of the “if” statement in C language.  Else If : Execute if the clause is true and previous clause (“if” or “else if” clause) is false.  This is the equivalent of the “else if” statement in C language.  Else : Execute if none of the conditions are true.  This is the equivalent of the “else” statement in C language.What’s a Conditional Clause?Conditional clause is a feature to perform different actions depending on whether the condition evaluates to true (condition is met) or false (condition is not met).Conditional clause is composed of the following 3 parts: parameter 1, relational operator, and parameter 2 in order.These are 6 types of relational operators.  == : True if the two parameters are equal.  != : True if the two parameters are not equal.  &amp;gt;= : True if parameter 1 is greater than or equal to parameter 2.  &amp;gt; :  True if parameter 1 is greater than parameter 2.  &amp;lt;= : True parameter 1 is less than or equal to parameter 2.  &amp;lt; : True if parameter 1 is less than parameter 2.Conditional clause can be combined into a complex conditional clause using conditional operators.A complex conditional clause is composed of the following 3 parts: conditional clause 1, conditional operator, conditional clause 2.There are 3 types of conditional operators.  then : Does not link any clauses.  AND(&amp;amp;&amp;amp;) : True if both conditional clauses are true.  OR(||) : True if one of the conditional clauses is true.There is no limit to how many conditional clauses can be combined into one complex conditional clause. Each conditional clause is evaluated in order, and the final value will be either “true” or “false.”Usage  An ‘IF’ command must always precede an “Else if” or an “Else” command.      A block, designated by brackets, needs to follow each clause(However, if the block consists of only one line, the block need not be enclosed with brackets).      ExampleThe examples below shows how to program the following conditions.  When the variable is greater than or equal to 90.  When the variable is greater than or equal to 50 and less than 90.      Other cases      Endless LoopThis command is used to repeat the command lines in the block without end.UsageA block is always required(However, if the block consists of only one, the block need not be enclosed with brackets).Use the “Break Loop” command to exit the loop.ExampleContinuously prints “10” on the Program Output Monitor.Loop WhileThis command is used to repeat the command lines in the block while the clause is true.It is the equivalent of the “while”function in C language..What is a conditional clause?UsageA block is always required(However, if the block consists of only one line, the block need not be enclosed with brackets).Use the Break Loop command to exit the loop.ExampleContinuously prints the value of on the Program Output Monitor until the variable reaches 30.Loop ForThis command is used to repeat the command lines in the block for the specified number of times. Given an initial value and a terminal value, the loop will repeat while increasing the variable by 1.The number of executions can be calculated as:  Number to Executions = Terminal Value - Initial Value + 1This is the equivalent of the “for” function in C language.UsageChoose the appropriate 3 parameters (variable, Start value, End value) necessary for the command.The initial value must be less than the terminal value. If the initial value is greater than the terminal value, the loop will not be executed.A block is always required. (However, if the block consists of only one line, the block need not be enclosed with brackets.)Use the Break Loop command to exit the loop.ExampleThis example will repeat the loop as many as the detected sound quantity.Break LoopThis command is used to exit the loop while it is being executed.It is the equivalent of the “break” function in C language.UsageThe command must always be used in the block being repeated.ExampleContinuously prints the number “10” on the screen until the value of the center IR sensor becomes bigger than 400, in which case it exits the loop and prints “30” on the screen.Wait WhileThis command is used to pause execution when a conditional clause is true.It is the equivalent of the “while” function in C language.What is a conditional clause?UsageSet the appropriate conditions without the use of blocks.ExampleThe program will wait for the timer.Exit FunctionWhen this command is executed, it will end the operating  function immediately even if not every command line was executed yet, and will return to the function called position. It is the equivalent of the “return” statement in C language.UsageCan be used only within a general function or a callback function.ExampleIn the following example, UserFunction is called repeatedly. Because of the Return command in UserFunction, the last 3 lines will never be executed.Make/Call FunctionIf the same code need to be repeated multiple times, or if the code needs to be distinguished according to its role, you can make the code as a function, and can all the function whenever necessary. This is similar to the concept of a function in C language. The only difference is that there are no return values and input parameters. When used properly, you can easily figure out the flows of the program, and can avoid to write the same command lines again and again. Functions are executed by calling them. After a called function ends, execution will be returned to the point of the calling and started from the next command line.Usage  The following rules apply when making a function:          There cannot be duplicate function names.      A function must exist outside another function or program body.      Spaces and special characters(!, @, #, $ etc.) are not allowed in function names.      Function names cannot start with numbers.        While inputting function names, press Esc to cancel.  Otherwise, press Enter to save.  While selecting the function to call, press ESC to cancel.  Otherwise, click the appropriate function or press Enter while the function is highlighted to save.  A function cannot call itself.ExampleThe program will continuously call the functions to move forward, backward, right and left.Callback FunctionCallback function is a function that runs independently of the main program routine and is automatically executed at fixed intervals. Therefore, a callback function cannot include code that requires much time. Use of loops, variables, and function calls are limited.Usage  The callback function cannot exist inside another function or program body.  There can be only one callback function.  A callback function does not have a name and cannot be called.Precautions  Can not use commands such as Endless Loop, Loop While, Loop For, Label, Jump, and Call Function.  Communication between the controller external devices is limited to 2 times.  Size of the command must not exceed 512 bytesExampleThis example shows how periodically receive wireless data and to save it in a variable.",
        "url": " http://localhost:4000/docs/en/software/rplus1/task/programming_01/"
      } ,
  
      "docs-kr-software-rplus1-task-programming-01":  {
        "title": "R+ Task 1.0",
      "content"	 : "프로그래밍편집RoboPlus Task에서 편집할 때 사용하는 방법들입니다.여러줄 선택RoboPlus Task는 프로그램 코드에서 잘라내기, 복사, 삭제, 주석처리 등의 편집을 위해 여러줄 선택 기능을 지원합니다.프로그램 코드에서 여러줄을 선택하는 방법은 다음과 같습니다.      컨트롤(Ctrl) 키를 누른 상태에서 마우스 클릭으로 여러줄 선택        쉬프트(Shift) 키를 누른 상태에서 선택하려는 첫 번째 명령줄을 마우스 클릭 후, 마지막 명령줄을 클릭하여 여러줄 선택      마우스로 클릭 후 드래그하여 여러줄 선택하여도 같은 결과를 얻을 수 있습니다.            프로그램 코드 전체를 선택하려면 마우스 오른쪽 버튼을 눌러 ‘모두 선택’ 명령을 실행합니다. 단축키는, 컨트롤(Ctrl) + A 입니다.      줄 삽입프로그램 코드에 빈 줄을 삽입하는 방법은 다음과 같습니다.  삽입하고자 하는 명령줄 위를 선택한 후 스페이스바(SpaceBar)를 입력합니다.      삽입하고자 하는 명령줄 위를 선택한 후 마우스 오른쪽 버튼을 눌러 ‘줄 삽입’ 명령을 실행합니다.      줄 지우기하나의 줄, 혹은 여러 줄을 선택하여 지울 수 있습니다.프로그램 코드에서 줄을 지우는 방법은 다음과 같습니다.      지우고자 하는 명령줄을 선택한 후 마우스 오른쪽 버튼을 눌러 ‘줄 내용 지우기’ 명령을 실행합니다. 선택된 명령줄의 내용만 지워지고 명령줄은 그대로 남아있게 됩니다. 단축키는 백스페이스키(BackSpace, ←)입니다.            지우고자 하는 명령줄을 선택한 후 마우스 오른쪽 버튼을 눌러 ‘줄 지우기’ 명령을 실행합니다. 선택된 명령줄과 내용이 모두 삭제되며, 아래줄 내용이 위로 당겨집니다. 단축키는 삭제키(Delete)입니다.      줄 활성/비활성프로그램 코드에서 명령줄을 활성, 비활성시키는 방법은 다음과 같습니다.  활성, 혹은 비활성하고자 하는 명령줄을 선택한 후  마우스 오른쪽 버튼을 눌러 ‘줄 활성/비활성’ 명령을 실행합니다.      활성, 혹은 비활성하고자 하는 명령줄을 선택한 후  컨트롤(Ctrl) + E 를 입력합니다.        활성화 되어있는 줄에서 이 명령을 실행하면 비활성 상태로 바뀌며, 비활성 상태에 있는 줄에서 이 명령을 실행하면 활성화 상태로 바뀌게 됩니다.  주로 프로그램 작성 중 테스트를 위해 잠시 명령을 실행하지 않도록 하는 등의 목적으로 많이 사용됩니다.복사/잘라내기/붙여넣기잘라내기하나의 줄을 선택하거나, 여러줄을 선택한 후 마우스 오른쪽 버튼을 눌러 잘라내기 명령을 실행합니다. 잘라내기를 실행한 줄은 지워지며, 그 내용은 임시 저장소에 저장됩니다. 잘라내기 명령을 실행하는 순간, 기존에 임시 저장소에 저장되어 있던 내용은 삭제됩니다. 단축키는 컨트롤(Ctrl) + X 입니다.복사하기하나의 줄을 선택하거나, 여러줄을 선택한 후 마우스 오른쪽 버튼을 눌러 복사 명령을 실행합니다. 복사하기를 실행한 줄은 그대로 남아있으며, 그 내용은 임시 저장소에 저장됩니다. 복사하기 명령을 실행하는 순간, 기존에 임시 저장소에 저장되어 있던 내용은 삭제됩니다. 단축키는 컨트롤(Ctrl) + C 입니다.붙여넣기임시 저장소에 데이터가 저장되어 있는 경우 실행할 수 있습니다. 붙여넣기를 실행 할 명령줄을 선택한 후 마우스 오른쪽 버튼을 눌러 붙여넣기 명령을 실행합니다. 붙여넣기를 하여도 임시 저장소의 내용은 그대로 남아있으며, 따라서 같은 내용을 여러번 붙여넣을 수 있습니다. 만약 빈 명령줄이 아닌, 기존에 선택된 내용 위에 붙여넣기를 하면 덮어쓰기가 됩니다. 단축키는 컨트롤(Ctrl) + V 입니다.이름찾기프로그램 코드에서 사용한 요소의 찾기 기능을 지원합니다.  편집 메뉴에서 이름 찾기 명령을 실행합니다. 단축키는 컨트롤(Ctrl) + F 입니다.  찾고자 하는 내용을 입력 후 ‘다음 찾기’ 버튼을 누릅니다.명렁어프로그램 시작프로그램 시작은 말 그대로 제일 먼저 실행되는 프로그램의 시작 지점입니다. 줄 번호와 상관 없이 무조건 프로그램 시작부터 명령이 실행됩니다. C언어의 main()함수와 같은 개념입니다.사용법  프로그램 시작 명령은 줄 번호와 상관 없이 실행됩니다.  한 프로그램에 두 개 이상의 프로그램 시작이 있을 수 없습니다.  명령 묶음 구간이 반드시 필요합니다.  프로그램 시작 명령 구간의 끝을 만나면 프로그램이 종료됩니다.예제다음과 같이 프로그램 시작 명령을 기본으로 프로그래밍을 시작합니다.프로그램 강제종료프로그램 수행 중에 이 문장을 만나면 그대로 프로그램이 종료됩니다. 프로그램이 종료되는 경우는 다음과 같습니다.      프로그램 시작의 구간을 다 수행한 경우 (자연 종료)          프로그램 강제 종료를 만났을 경우 (강제 종료)    사용법프로그램을 끝내고 싶은 지점에 만듭니다.예제포트 3의 터치센서가 눌렸을 때, 프로그램을 종료하는 예제입니다.구간 시작/끝구간이란 여러 개의 명령문을 묶어놓은 것을 의미합니다. 구간 시작부터 끝까지 같은 명령문에 영향 받습니다. C언어의 ‘{‘, ‘}’와 같은 개념입니다.사용법구간의 시작과 끝은 항상 짝이 맞아야 합니다. RoboPlus Task는 자동으로 구간별로 들여쓰기를 하여 짝이 맞는지 여부를 알려줍니다. 구간의 시작/끝 기호의 줄이 맞지 않는경우, 누락된 구간을 찾아서 적절히 수정해야 합니다.구간은 반드시 소유하는 명령이 있어야 합니다. 즉, 단독으로 사용할 수 없습니다.구간 시작/끝을 반드시 가져야 할 명령은 다음과 같습니다.  프로그램 시작  만약  / 아니면 만약 / 아니면  무조건 반복  조건 반복  횟수 반복  콜백 함수  함수만약에 실행문이 한줄일 경우에는 구간기호가 생략 될 수 있다.예제프로그램 시작 명령과 무조건 반복 명령에 구간의 시작과 끝이 설정되어 있는 예제입니다.주석/메모프로그램 코드 내에 주석이나 메모를 삽입할 수 있습니다. 주석이나 메모를 적절히 사용하면, 나중에 코드를 다시 해석할 때 매우 유용합니다. 잊기 쉬운 내용이나, 중요한 내용을 표시할 때 주로 사용합니다. 주석은  프로그램 실행에 아무런 영향을 주지 않습니다. C언어의 한 줄 주석처리 기호인 ‘//’와 같은 개념입니다. (C언어의 여러 줄 주석 처리 기호인 ‘/’, ‘/’는 지원하지 않습니다.)사용법  주석이나 메모를 삽입하고 싶은 줄에서 명령을 실행합니다.  // 기호가 삽입되면 마우스로 더블클릭하거나 키보드의 엔터(Enter)를 입력한 후, 원하는 내용을 입력 할 수 있습니다.  내용 입력 도중 ESC 키를 입력하면 작성 중에 있던 내용이 취소되고, 입력 전 내용으로 복구 됩니다.  내용 입력을 완료하려면, 키보드의 엔터(Enter)를 입력해야 합니다.예제화면에 10을 출력 후 줄을 바꾸는 예제입니다. 아래와 같이 설명이나 메모를 프로그램에 삽입할 수 있습니다.계산계산은 두 값을 연산하여 결과를 내는 명령어입니다. 의미는 다음과 같습니다.계산 명령어에서 사용할 수 있는 연산자는 다음과 같습니다.  사칙 연산 (음수 연산을 지원합니다.)          덧셈(+): 두 값을 더합니다.      뺄셈(-): 앞에서 뒤의 값을 뺍니다.      곱셈(*): 두 값을 곱합니다.      나눗셈(/): 앞에서 뒤의 값을 나눕니다. (나머지는 무시되어 사라지고 몫만 결과로 나옵니다.)        비트(bit) 연산 (2진수 연산을 의미합니다.)          AND(&amp;amp;): 두 비트를 AND연산 합니다.                                                  OR(              ): 두 비트를 OR연산 합니다.                                          사용법연산자를 마우스로 더블 클릭하거나 키보드의 ENTER키를 누르면 연산자 종류를 선택할 수 있습니다.명령 수행에 필요한 3개의 파라미터(결과, 연산1, 연산2)를 적절히 선택합니다.예제10과 20을 더해서 화면출력하는 예제입니다.로드로드(Load)의 사전적 의미는 적재하다라는 뜻입니다. 즉, 로드는 값을 옮기는 명령을 수행합니다.로드는 다음과 같은 의미로 사용됩니다.  장치의 기능을 실행한다.  값을 옮긴다.사용법명령 수행에 필요한 2개의 파라미터(대상, 원본)를 적절히 선택합니다.예제장치의 기능 실행 용도로 사용된 경우 (타이머를 약 1초로 설정합니다.)값을 옮기는 용도로 사용된 경우 (변수에 5를 넣습니다.)레이블/점프레이블과 점프는 프로그램 분기를 위해 사용됩니다. 프로그램 분기란, 프로그램 수행 순서를 바꾸는 것입니다. 점프는 프로그램 분기를 실행하고, 레이블은 분기할 위치를 지정합니다. C언어의 label/goto와 같은 개념입니다.사용법  레이블 이름은 다음의 규칙을 지켜야 합니다.          레이블 이름은 중복될 수 없습니다.      레이블은 프로그램 시작 구문, 혹은 함수 구문 내부에 존재해야 합니다.      다른 함수의 레이블로 점프할 수 없습니다.      레이블 이름은 띄어쓰기와 특수 기호(!, @, #, $등)를 사용할 수 없습니다.      레이블 이름의 시작은 숫자를 사용할 수 없습니다.        레이블 이름 입력시 키보드의 ESC키를 누르면 취소됩니다.  레이블 이름 입력시 키보드의 ENTER키를 누르면 입력이 완료됩니다.  점프의 레이블 이름 선택시 키보드의 ESC키를 누르면 취소됩니다.      점프의 레이블 이름 선택시 목록을 선택하거나 키보드의 ENTER키를 누르면 입력이 완료됩니다.        점프는 반드시 존재하는 레이블을 선택해야 합니다.      점프는 반드시 함수 구간 내의 레이블만 선택해야 합니다.      예제프로그램을 시작하자마자 ‘실행분기’레이블로 점프하여 루틴2를 실행하게 됩니다.조건문조건의 참, 거짓 결과에 따라 프로그램 흐름을 분기하는 명령입니다.  만약: 조건절의 내용이 참이면 실행합니다. C언어에서 if 구문과 같은 개념입니다.  아니면 만약: ‘만약’에 이어서 조건을 계속 검사할 때 사용합니다. 조건절의 내용이 참이면 실행합니다. C언어의 else if 구문과 같은 개념입니다.  아니면: ‘만약’과 ‘아니면 만약’의 조건 어디에도 해당되지 않으면 실행합니다. C언어의 else 구문과 같은 개념입니다.조건절이란?조건절은 결과를 참과 거짓으로 내는 수식입니다. 참은 조건이 만족된 것이고, 거짓은 조건이 만족되지 못한것입니다.조건절은 다음과 같이 3부분으로 구성되고, 차례대로 비교 파라미터1, 비교 연산자, 비교 파라미터2입니다.비교 연산자의 종류는 다음과 같습니다.  == : 두 비교 값이 같다면 참입니다.  != : 두 비교 값이 다르다면 참입니다.            = : 비교 값1이 비교 값2보다 크거나 같다면 참입니다.                  : 비교 값1이 비교 값2보다 크다면 참입니다.        &amp;lt;= : 비교 값1이 비교 값2보다 작거나 같다면 참입니다.  &amp;lt; : 비교 값1이 비교 값2보다 작다면 참입니다.조건절은 연결 연산자에 의해 연결되어 복합 조건절로 사용할 수 있습니다.복합 조건절은 다음과 같이 3부분으로 구성되고, 차례대로 조건절1, 연결 연산자, 조건절2입니다.연결 연산자의 종류는 다음과 같습니다.  then : 아무 조건절도 연결하지 않습니다.  AND(&amp;amp;&amp;amp;): 두 조건절의 결과를 AND연산합니다.                              **OR(                     )**: 두 조건절의 결과를 OR연산합니다.                    복합 조건절은 제한 없이 연결될 수 있으며 앞에서부터 차례대로 연산되어 최종 값은 참과 거짓으로 표현됩니다.사용법  ‘아니면 만약’과 ‘아니면’은 반드시 먼저 ‘만약’이 나와야 합니다.  각 구문은 명령 묶음인 구간이 반드시 필요합니다. (단, 실행 문이 1줄일 경우에는 별도로 구간 표시를 하지않아도 자동으로 구간으로 인식합니다.)예제다음 조건별로 실행시키고자 할 때 사용되는 예제입니다.  변수 값이 90보다 클 경우  변수 값이 80보다 크고 90보다 작을 경우  변수 값이 70보다 크고 80보다 작을 경우  변수 값이 60보다 크고 70보다 작을 경우  그 외의 경우무조건 반복무조건 반복 명령 구간 시작과 끝 사이를 계속 반복 실행합니다.사용법명령 묶음인 구간이 반드시 필요합니다. (단, 실행 문이 1줄일 경우에는 별도로 구간 표시를 하지않아도 자동으로 구간을 인식합니다.)반복 구문을 빠져나오려면 반복 끝내기를 사용합니다.예제프로그램 출력 화면에 10이라는 수를 계속 출력합니다.조건 반복조건절이 참인 동안 구간내의 명령줄을 반복합니다. C언어의 while구문과 같은 개념입니다.사용법명령 묶음인 구간이 반드시 필요합니다. (단, 실행 문이 1줄일 경우에는 별도로 구간 표시를 하지않아도 자동으로 구간을 인식합니다.)반복 구문을 강제로 빠져나오려면 반복 끝내기를 사용합니다.예제프로그램 출력 화면에 변수 값이 30이 될 때까지 화면 출력을 반복합니다.횟수 반복반복 끝내기조건 대기함수 강제종료함수 만들기/호출콜백 함수제어기 파라미터보낼 무선 데이터받은 무선 데이터새 무선 데이터임의의 숫자Aux LED버튼타이머정밀타이머상대 로봇 무선ID내 로봇 무선ID화면출력/줄바꿈적외선 센서부저 종류부저 울림시간최종 소리감지 횟수실시간 소리감지 횟수시작버튼 눌림횟수자동꺼짐 타이머RC-100 채널스마트앱 파라미터모션 파라미터모션 페이지모션 상태관절 오프셋관절 LED 자동켜기주변장치감속모터서보모터접촉센서LED모듈적외선센서컬러센서자석센서절대거리센서사용자 장치다이나믹셀:액츄에이터모터 켜기LEDCW/CCW MarginCW/CCW Slope목표 위치이동 속도힘 조절현재 위치현재 속도현재 하중전압온도움직임 유무다이나믹셀:EX액츄에이터모터 켜기LEDCW/CCW MarginCW/CCW Slope목표 위치이동 속도힘 조절현재 위치현재 속도현재 하중전압온도움직임 유무소모 전류량다이나믹셀:MX액츄에이터모터 켜기LEDPID 제어목표 위치이동 속도힘 조절현재 위치현재 속도현재 하중전압온도움직임 유무소모 전류량통합센서(S1)거리센서 값조명 밝기물체감지조명감지소리 크기최대 소리 크기소리감지 횟수소리발생 시간부저 음계부저 울림시간새 리모컨 데이터받은 리모컨 데이터보낼 리모컨 데이터물체감지 기준값조명감지 기준값적외선 센서 어레이적외선 센서 값부저 음계부저 울림시간감지 기준값 자동설정적외선 물체감지적외선감지 기준값직접 지정",
        "url": " http://localhost:4000/docs/kr/software/rplus1/task/programming_01/"
      } ,
  
      "docs-en-software-rplus1-task-programming-02":  {
        "title": "R+ Task 1.0",
      "content"	 : "Controller ParametersRemocon TXDThis parameter is used to transmit data via a wireless communication module (IR, zigbee module).  The data must be a number/value between  0 &amp;amp; 65535 transmitted or sent, wirelessly (IR or Zigbee).  When the “Remocon TXD” parameter is set, the data is immediately sent wirelessly.Note Compatiable Controllers : CM-100, CM-5, CM-510, CM-530, CM-700ExampleIn the example below, the program waits for data, and when the data arrives, the received data is transmitted wirelessly.It is commonly used to send a response to the control program on a PC connected using ZIG2Serial.Remocon RXDThis parameter is used to read the received data received via the wireless communication module (IR, zigbee module).  The data is a number between 0 and 65535.  The [Remocon Arrived] parameter can be used check for new data.  You can save up to maximum 2 wireless data by using a receiving buffer.  When 2 data are saved in the receiving buffer, firstly received data will be read at first, and the remaining data will be read at second according to the received order. If there is only 1 data value in the buffer, when READ is executed, the latest data will be retrieved.Note Compatiable Controllers : CM-100, CM-5, CM-510, CM-700ExampleThe code below shows how to control movement direction using the RC-100.Remocon ArrivedThis parameter is used to check whether there are any new data received via the wireless communication module(IR, zigbee module).This value is either TRUE or FALSE.  TRUE ( 1 ) : There is new data in the input buffer.  FALSE ( 0 ) : All data in the input buffer have been retrieved.Note Compatiable Controllers : CM-100, CM-5, CM-510, CM-530, CM-700ExampleThe code below shows how to control movement direction using RC-100.Normally used to check whether new data has been received to process.Aux LEDThis parameter is either TRUE or FALSE and used to read and set the controller’s Aux LED status.  TRUE (1) :  When the Aux LED parameter is set to TRUE, the LED will turn on. When the Aux LED parameter is read, a value of TRUE signifies that the LED is on.  FALSE (0) : When the Aux LED parameter is set to FALSE, the LED will turn off.  When the Aux LED parameter is read, a value of FALSE signifies that the LED is off. False means that the input buffer is empty. i.e either no data has been received or all data has been retrievedNote Compatiable Controllers : CM-5, CM-510, CM-530, CM-700ExampleIn this example, the Aux LED is turned on and off for 1 second 3 times.ButtonThis parameter is used to read the controller’s button status.  For CM-5, CM-510, CM-530          Each button is assigned a unique value as follows.      R button : 1, L button : 2, D button : 4, U button : 8, START button : 16      When several buttons are pressed, the value assigned to the pressed buttons are added and read.      Even if you do not know the buttons’ code values, you can easily determine which buttons have been pressed by using the buttons’ constant values.        For OpenCM9.04          Use of true/false constants      When button is pressed(ture), When button is not pressed (false)      Note Compatiable Controllers : CM-5, CM-510, CM-530, CM-700, OpenCM9.04ExampleThis example shows how to perform different motions depending on which button is pressed.TimerThis parameter is used read the timer’s current value or to set the timer, which begins to count down automatically.  The timer is located in the controller.You can use “Timer value” constant to set the timer’s value.When a decimal number is entered,  it will automatically be converted to the corresponding timer value.The actual timer value is between 0 and 255.  Each timer value is 0.128 seconds.If you set a value greater than 0 in the timer parameter, the timer will start to count down every 0.128 seconds.Note Compatiable Controllers : CM-100, CM-5, CM-510, CM-530, CM-700ExampleThe code below will print the value from the Center IR sensor every second.HR TimerInternally the controller sets a counter; this is the parameter for the high resolution timer. This timer is set for every 1ms, useful for more accurate timing.  You can use “Timer value” constant to set the timer’s value.  When a decimal number is entered, it will automatically be converted to the corresponding timer value.  The actual timer value is between 0 and 65535.  Each timer value is 0.001 seconds.  If you set a value greater than 0 in the timer parameter, the timer will start to count down every 0.001 seconds.Note Compatiable Controllers : CM-530ExampleWhile in fast forward motion the timer can help the tires react faster upon detection of a line.Remocon IDThis parameter is used to set or read the currently set remote control ID. Please note that the controller will not receive any data if this parameter does not match the ID of the transmitting remote.  The ID is a number between 0 and 65535.  When the opponent’s ID is set to 65535(0xFFFF, in hexadecimal), it will send data to all Zigbee modules, regardless of ID.(Broadcasting Mode)Note Compatiable Controllers : CM-5, CM-510, CM-530, CM-700ExampleThis example sets the opponent’s wireless ID to “123”, reads the value, and prints it on the screen.  For seamless Zigbee communication, the opponent’s wireless ID must be set to the correct value.  Using the broadcasting mode improperly may cause unforeseen problems.My ID  CM-100          This parameter is used to determine whether or not a module ZIG-110 module has been installed.      If a ZIG-110 wireless communication module is installed, TRUE(1) is returned.  Otherwise, FALSE(2), is returned.        Other Controllers : This parameter is used to read the ID of the Zigbee module installed in the robot.          If a ZigBee module is installed, its ID is read (a number between 0 and 65534). If not, 65535 (0xFFFF in hexadecimal) is returned.      Note Compatiable Controllers : CM-100, CM-5, CM-510, CM-530, CM-700ExampleThis example checks whether a ZIG-110 module is installed in the CM-100 controller. If the module is not installed, it sets the RC-100 channel according to the number of times the start button is pressed.This example prints the ZigBee module’s ID. This code can be used with controllers other than CM-100.IR Left/Center/RightThis parameters are used to read the IR sensors’ values.  The sensor value is between 0 and 1023.  For objects with the same or similar color, the closer it is, the higher the value(closer to 1023), and the farther away it is, the lower the value (closer to 0).  For objects with the same distance, the lighter(white) the object, the higher the value, and the darker(black) the object, the lower the value.Note Compatiable Controllers : CM-100ExampleIn this example, specific motions are performed when only the left IR sensor detects an object or when only the right IR sensor detects an object..  Sensor values may be affected by external lights which emit infrared rays such as sunlight or a fluorescent lamp.  Sensor values depend on the object’s color or surrounding light, so using the IR sensor to measure the exact distance is not recommended.  As above mentioned, IR sensor values are different if objects have different colors, even if they are the same distance away. This characteristic can be utilized to distinguish black from white(Can be used for tracing line).Buzzer IndexThis parameter is used to set the musical note or melody to be played or to retrieve the note or melody currently being played using the buzzers in the controller.  The “Buzzer Time” parameter must always be used with the “Buzzer Index” parameter.  “Buzzer Time” must be set before “Buzzer Index” is set. (The order is important) (Click here for more information on “Buzzer Time”.)  Depending on what the “Buzzer Time” is set to, “Buzzer Index” can be set to play a musical note or a melody.          When “Buzzer  Time” is set to 255 : Melody Mode              Choose from 16 different melodies (0~15).                    When “Buzzer Time” is between 0 and 254 : Musical Note Mode              Choose from 27 notes.  The selected notes will play for the length set as “ Buzzer Time”.                    Note Compatiable Controllers : CM-100, CM-510, CM-530ExamplePlays melody 3.Plays Do, Mi and Sol for 0.3 seconds each.Buzzer TimeThis parameter is used to set how long the note or melody will be played or to retrieve how much longer it will be played.  The “Buzzer Time” parameter is always used with the “Buzzer Index” parameter. “Buzzer Time” must be set before “Buzzer Index” is set. (The order is important) (Click here for more information on “Buzzer Time.”)  “Buzzer Time” can be set to a value between 0 and 255.  Each value represents 0.1 second.  For example, when “Buzzer Time” is set to 1, the note will be played for 0.1 second.  The maximum length a note will be played is 5 seconds. Therefore, when values between 50 and 254 are entered, the note will be played for 5 seconds.          When “Buzzer Time” is set to 255 : Melody Mode      Choose from 16 different melodies (‘0~15) .              When the melody finishes playing, “Buzzer Time” is reset to 0.                    When “Buzzer Time” is between 0 and 254 :Musical Note Mode              Choose from 27 notes.  The selected note will play for the length set as “Buzzer Time.”                    Note Compatiable Controllers : CM-100, CM-510, CM-530ExamplePlays melody 3. (Same as the example in “Buzzer Index”)Plays Do, Mi and Sol for 0.3 seconds each.(Same as the example in “Buzzer Index”)  “Buzzer Time” cannot be set while a note or melody is being played.Sound CountA controller equipped with a microphone has a function to count sounds when the sound is louder than a certain threshold.  For example, it is possible to count claps.  This parameter is used to retrieve the number of detected sounds.  “Sound Count” uses the numbers between 0 and  255.  As a result, the maximum number of sounds counted is 255.  When the sounds are no longer detected, the number of detected sounds will be input into the “Sound Count” parameter.  Because “Sound Count” is not initialized automatically, you have to reset it to 0 before use.Note Compatiable Controllers : CM-100, CM-510, CM-530ExampleDetects sounds and repeats a specific motion for as many times as it is detected.  The geared motor connected to the controller may make loud noises while moving, which will be detected by the microphone. Please use the sound detection function only when the OLLO/Bioloid has stopped moving completely.Current Sound CountA controller equipped with a microphone has a function to count sounds when the sound is louder than a certain threshold.  For example, it is possible to count claps.  This parameter is used to retrieve the number of detected sounds.  “Current Sound Count” uses numbers between 0 and 255.  As a result, the maximum number of sounds counted is 255.  The parameter value is increased in real-time whenever a sound is detected.  If a new sound is not detected for 0.8 seconds, the value of the “Current Sound Count” parameter is passed to the “Sound Count” parameter, and the “Current Sound Count” parameter is reset to 0.Note Compatiable Controllers : CM-100, CM-510ExampleThis code saves the current sound count  in the “DetectionCount” variable.This code pauses the program when no sounds are detected.This code executes a block of code when 3 sounds are detected.  When it is connected with controller, sometimes the sounds of geared motor can be too loud to be input in the controller in normal way. Please use the sound detection function only when the OLLO/Bioloid has stopped moving completely.Button CountThis parameter is used to read how many times the START button was pressed when the controller was first turned on.“Button Counts” uses numbers between 0 and 255.  As a result, only up to 255 button presses can be counted .Note Compatiable Controllers : CM-100, CM-150ExampleThe example executes different motions according to how many times the START button was pressed - once, twice, or more.Powersave TimerThe controller has a hibernate function to conserve battery.  If no commands are received for a set period, the controller can turn itself off.  This parameter is used to set how long the controller will wait or how much time is left.      “Powersave timer” can be set using powersave constants.        “Powersave timer” uses numbers between 0 and 255.  The unit is minutes (i.e., a value of 1 equals 1 minute)  The default value is 5 minutes.  Setting the “Powersave timer” to 0 will turn it off.  The time remaining on the timer is always in minutes. For example, when 50 seconds remain, the timer will say that 1 minute remains.Note Compatiable Controllers : CM-100, CM-150ExampleThe controller will be turned off if no data is received for 2 minutes.  If data is received, the timer is reset to 2 minutes.  To keep the controller from turning itself off even when certain actions are performed, you must manually reset “Powersave timer.”RC-100 ChannelThis parameter is used to set up the infrared communication channel or to check the current channel between the controller’s IR receiver and RC-100.      The RC-100 channel can be set using constant numbers.        “RC-100 Channel” uses numbers between 0 and 8.  The Channel 0 is the special one that can be communicated with every other channels.Note Compatiable Controllers : CM-100, CM-510, CM-530ExampleSets the RC-100 channel according to how many times the START button was pressed.  For smooth infrared wireless communication, please refer to the section on how to set the channel for RC-100, and make sure that both RC-100 and the controller’s IR receiver are set to the same channel.Motion ParametersMotion PageThis parameter executes motions.  When the motion page number is entered, the corresponding motion is executed.  “Motion Page” can be read to see which motion is currently being executed.  Certain page numbers can be used to stop the current motion.          When the stop command is executed, “Number of Page Repeats” will be ignored.      To confirm that a motion has stopped completely, check the motion status.      When “Motion Page” is set to 0, the controller will execute to the Exit page and stop.      When “Motion Page” is set to -1, the controller will execute to the current page and stop.        If a page with no motions is set, an error message will be returned. (See error messages)  “Motion Page” uses numbers between 1 and 255. (Some controllers use numbers between 1 and 127.)Note Compatiable Controllers : CM-5, CM-510, CM-530, CM-700ExampleExecutes motion page #3.Motion StatusThis parameter is used to check the status of the motion.  If a motion is being performed, 1 is returned.  Otherwise, 0 is returned.  True/False can also be used.          True: Motion is being performed.      False: Motion is not being performed.      Note Compatiable Controllers : CM-5, CM-510, CM-530, CM-700ExampleExecutes motion page #3 and waits until it is completed.Joint OffsetTo apply the joint offset to a robot, a motion must be performed after the “Joint Offset” parameter is set.This parameter can be applied to each joint separately.  -255 ~ 255 : The offset will be applied to the selected joint’s location value.          Ex) If the location value of the joint with ID #3 is set as 300 → 400 → 500 in the motion data, and the joint offset is -100, the actual location value of the joint will be adjusted to 200 → 300 → 400.        1024 : If the joint offset is set to 1024, the selected joint will not be affected by the motion data during operation.          Ex) This function can be used to control the location values directly, instead of the motion.  A primary example is the Gripper, which should not move when a motion is being performed.      Note Compatiable Controllers : CM-5, CM-510, CM-530, CM-700Example      Set an offset value to a specific joint.While motion page #3 is being performed, set the offset of the joint with ID 4 as -100, and wait for the motion to finish.            Keep a joint from being affected by motion dataSet up joint ID #4 to be unaffected while a motion is being executed.  Peripheral DevicesPeripheral devices are modules connected directly to the controller. The followings are peripheral devices.Reduction MotorThis parameter is used to control the reduction motor’s direction and power (Speed).(Please refer to the Geared Motor GM-12A for more information)  The reduction motor’s control values can be set using motor control constants.      The direction and power must be set together.        CCW (Counter clock wise) 0 ~ 1023 : Decimal numbers between 0 and 1023  CW (Clockwise) 0 ~ 1023 : Decimal numbers between 1024 and 2047The control values are numbers between 0 and 2047.Note Compatiable Controllers : CM-100ExampleIn this example, the reduction motor connected to Port 1 will rotate in the clockwise direction for 1 second at maximum speed, before rotating in the counterclockwise direction for 1 second.  These motions will repeat without end.Tips  Make sure the motor is connected to the correct port.  Speed and direction can be controlled separately using motor control constants.  In this example, the motor in Port 1 is set as “CCW:700”,and the motor in Port 2 is set as “CW:700.”Servo MotorThis parameter is used to set the movements of servo motors.  This parameter consists of 3 sub-parameters (move mode, speed, location), it helps to set up the movement of servo motor in more detailed way. (Please refer to the Servo Motor SM-10A for more information)  Drive mode is set as either True or False.          TRUE (1) : Operate in joint mode.  In joint mode, the speed parameter is used to configure power output, and the location parameter is used to configure angular movement.      False (0) :Operate in rotation mode. In rotation mode, the servo motor operates like a reduction motor, so only the speed parameter is used. The location parameter is ignored.        Motor control constants can be used to set the speed (power).          CCW (Counter clock wise) 0 ~ 1023 : Decimal numbers between 0 and 1023      CW (Clockwise) 0 ~ 1023 : Decimal numbers between 1024 and 2047            Location value constants can be used to set the location in joint mode.          Uses decimal numbers between 0 and 1023.      The red circle indicates the current values. The value can be set by dragging the jog dial with your mouse to the appropriate value.      The maximum controllable angle is 300°. Thus, the minimum controllable angle, indicated by the location value of 1, is 0.29°.(300° / 1024 = 0.29°)          For detailed information about controllable angles, refer to the Servo Motor SM-10A.Note Compatiable Controllers : CM-100ExampleSet the servo motor at Port 3 in rotation mode and turn it clockwise with 600 outputs.Set the servo motor at Port 3 in joint mode and move it to location 500 with maximum speed.Tips  Make sure the motor is connected to the correct port.  The servo motor is not suitable for detailed control, as it lacks the precision and torque of a Dynamixel motor.Warning If a program that controls LED modules is executed while another module (servo motor, IR module, etc.) is connected to the port, the module may be damaged.Touch SensorThis parameter is used to read the status of touch sensor (whether is was touched or not)(Please refer to the Touch Sensor TS-10 for more information)While the sensor being touched, the returned value will be TRUE(1). However, if you take off your hands from touch sensor, the returned value will be reset as False(0).Note Compatiable Controllers : CM-100, CM-510, CM-700ExampleThis example executes a block of code when the touch sensor at Port 3 is touched.LED ModuleThis parameter is used to turn on the LED or to read its current status.(Please refer to the LED Module LM-10 for more information)      LED module output constants can be used.            The actual values are numbers between 0 and 3. The following list shows what each value represents when setting or reading the LED module values.          0 : Turn off both LEDs.      1 : Turn on right LED only.      2 : Turn on left LED only.      3 : Turn on both LEDs.      Note Compatiable Controllers : CM-100ExampleTurn on both LEDs connected to Port 3.Warning If a program that controls LED modules is executed while another module (servo motor, IR module, etc.) is connected to the port, the module may be damaged.IR SensorThis parameter is used to read the value of the IR sensor module.(Please refer to the IR Sensor IRSS-10 for more information)  IR sensor values are numbers between 0 and 1023.  For objects with the same or similar color, the closer it is, the higher the value (closer to 1023), and the farther away it is, the lower the value (closer to 0).  For objects with the same distance, the lighter (white) the object, the higher the value, and the darker (black) the object, the lower the value.Note Compatiable Controllers : CM-100, CM-510, CM-700ExampleThis example executes a block of code if the value of the IR sensor connected to Port 3 is less than 500.Warning If a program that controls IR modules is executed while another module (servo motor, LED module, etc.) is connected to the port, the module may be damaged.DMS SensorThis parameter is used to read the value of the DMS sensor.(Please refer to the Distance Measurement Sensor DMS-80 for more information)  DMS sensor values are numbers between 0 and 1023.  For objects with the same or similar colors, the close it is, the higher the value (closer to 1023) and the farther away it is, the lower the value (closer to 0).  Unlike IR sensors, DMS sensors are hardly affected by colors.Note Compatiable Controllers : CM-510, CM-700ExampleThis example executes a block of code if the value of the DMS sensor connected to Port 3 is less than 500.User DevicesThis parameter is used to set or read the values of user’s devices.(Please refer to the Custom Device for more information)  Although the same address is used to read &amp;amp; write values, the actual port pins are different(Check user’s port pin information).  The value read from the user’s device is the voltage level of the input port.  The value read is a number between 0 and 1023.  When the user’s device is set  as 1, It will deliver 5V to the output port.  Setting the user’s device as 1 does not guarantee that the value read from the user’s device will be 1.  The output of the user’s device can be set using port value constants.Note Compatiable Controllers : CM-510, CM-700ExampleAfter setting the user’s device at Port 3 as 1 (high), if the value read value from Port 3 is less than 500, the output port is set as 0 (low).Dynamixel ParametersTorque EnableThis parameter is used to turn the motor’s torque on or off. It can also be used to determine whether the motor’s torque is currently on or off.The value is either TRUE or FALSE.  TRUE (1) : When set to TRUE, the motor’s torque  turns on.  When the parameter is read, a value of TRUE signifies that the motor’s torque is on.  FALSE (0) : When set to FALSE, the motor’s torque turns off.  When the parameter is read, a value of FALSE signifies that the motor’s torque is OFF.ExampleWhen the R button of the controller is pressed, the actuator with ID 1 will turn on.  When the L button is pressed, it will turn off.LEDThis parameter is used to set or read the Dynamixel’s LED status.The value is either TRUE or FALSE.  TRUE (1 ) : When set to TRUE,  the LED turns on. When the parameter is read, a value of TRUE signifies that the LED is on.  FALSE ( 0 ) : When set to FALSE, the LED turns off.  When the parameter is read, a value of FALSE signifies that the LED is off.ExampleTurns the LED on for 1 second and turns it off.CW/CCW MarginThese parameters are NOT available for MX Series.These parameters are used to set  or read the actuator’s margin value.  Margin values are numbers between 0 and 254.  The margin designates the area around the goal position that receives no torque.  The recommended value is 1. Unless otherwise specified, use the recommended value.ExampleSet both margins as 1.CW/CCW SlopeThese parameters are NOT available for MX Series.These parameters are used to set or read the actuator’s slope value.  The slope value will be created at both CW/CCW  directions, and the output level will be set near the target position.  If you set the lower slope value, it will reach to the target position by reducing the initial power NOT that much. On the contrary, if you set the higher value, it will reach the target position by reducing considerable powers as it reaches to the goal.  If you set the lower slope value, it will resist with maximum power not to stray from target position.  Even if you set the higher value, it will resist with more and more power if it is strayed too much from target position.  Compliance Slope will be changed into 7 Data representative values according to the input Data. In other words, if you input 25, in real operation, 16 -the representative value of 25-, will be used.            Level      Real Data Value      Representative Data Value                  1      0 (0x00) ~ 3(0x03)      2 (0x02)              2      4(0x04) ~ 7(0x07)      4 (0x04)              3      8(0x08)~15(0x0F)      8 (0x08)              4      16(0x10)~31(0x1F)      16 (0x10)              5      32(0x20)~63(0x3F)      32 (0x20)              6      64(0x40)~127(0x7F)      64 (0x40)              7      128(0x80)~254(0xFE)      128 (0x80)        Appropriate Compliance Slope, Power control, and the Compliance Margin values will make it possible to create smoother movement.Note Compatiable Controllers : CM-5, CM-510, CM-700ExampleSets both slope values as 32. Binary numbers are used to set the parameter.PID GainThese parameters are NOT available for AX, DX, RX and EX Series.Parameters for the actuator’s set PID values.  P gain refers to the value of proportional band. A small gap between vales grow bigger near the target value.  I gain refers to the value of integral action.  D Gain refers to the value of derivative action.  Gains values are in between 0~254.ExampleSet the P and I value 32Goal PositionThis parameters is used to set or read the actuator’s goal position.  Position constants can be used.  The value can be input directly, or set using the jog dial.  The position values of AX, DX, and RX-series are numbers between 0 and 1023  The position values of EX-series are numbers between 0 and 4095ExampleWhen the R button of the controller is pressed, the goal position of the actuator with ID 1 will be set as 1.  When the L button is pressed, the goal position will be set as 1023.Moving SpeedThis parameter is used to set or read the speed of actuator.  Motor control constants can be used.  In joint mode, the direction value is meaningless, and only the power value will be used.  In joint mode, set the value as 0 to output at maximum power.  In endless rotation mode, the direction and power values must be set together.  The joint mode or endless rotation mode can be set using at RoboPlus Manager. (Refer to “actuator mode”)ExampleWhen the R button of the controller is pressed, the speed of the actuator with ID1 will be set as 0.  When the L button is pressed, the speed will be set as 500.(If the actuator is in joint mode, the speed of 0 equates to maximum output. )Torque LimitThis parameter is used to set or read the power status of actuator.  Torque limit values are numbers between 0 and 1023 .ExampleSet the maximum torque of the actuator with ID 1 as 500.Present PositionThis parameter is used to read the actuator’s current position.  The current position of the actuator is read.ExamplePrints the present position of the actuator with ID 1 on the screen.Present SpeedThis parameter is used to read the actuator’s current speed.  The current speed of the actuator is read.ExamplePrints the present speed of the actuator ID 1 on the screen.Present LoadThis parameter is used to read the actuator’s current load.  The current load of the actuator is read.ExamplePrints the present load of the actuator with ID 1 on the screen.VoltageThis parameter is used to read the Dynamixel’s current voltage.  The current voltage of the Dynamixel is read.  The actual voltage is 1/10 of the read value. For example, if the returned value is 115, the actual voltage is 11.5V.ExamplePrints the current voltage of the Dynamixel with ID 1 on the screen.TemperatureThis parameter is used to read the Dynamixel’s current temperature.  The current temperature of the Dynamixel is read.xamplePrints the present temperature of the Dynamixel with ID 1 on the screen.MovingThis parameter is used to determine whether the actuator is currently moving or not.  The status of the actuator’s movement (whether it is moving or not) is returned.  If it is moving, 1 is returned.  If it is not, 0 is returned.ExampleSets the goal position of the actuator with ID 1 as 0, and waits for it to stop moving.Sensed CurrentThis parameter is NOT available for AX, DX and RX Series.This parameter is used to check the current being consumed. You can read EX Series motor’s current with this parameter.  If the value is 512, the currnet is 0 ampere.  That is, there is no current flowing.  If the value is larger than 512, the current is rotating the motor clockwise, and the size of the current is proportional to the size of the data. (1 = aprroximately 10 mA)  For example, if the data is 612, 1A (612-512=100 =&amp;gt; 100x10mA = 1,000mA) is being used to rotate the motor in the clockwise direction.  If the value is smaller than 512, the current is rotating the counterclockwise, and the size of the current is proportional to the size of the data. ( 1 = aprroximately. 10 mA)  For example, if the data is 312, 2A (512-312=200 =&amp;gt; 200x10mA=2,000mA) is being used to rotate the motor in the counterclockwise direction.ExampleIf the current of the EX motor with ID 1 is larger than 1A and flowing in the clockwise direction, the LED will turn on.  Otherwise, If it is larger than 2A, the motor will be turned off.Universal Sensor S1IR Left/Center/RightThese parameters are used to read the current IR sensor value from the universal sensor(AX-S1).  The current DMS sensor value of the universal sensor (S1) can be read.  Sensor values depend on the object’s color and surrounding light, so using the IR sensor to measure the exact distance is not recommended.  As mentioned above, IR sensor values are different if objects have different colors, even if they are the same distance away.  This characteristic can be utilized to distinguish black from white. (Used for tracing lines)  The sensor value is between 0 and 255.ExampleIn this example, specific motions are performed when only the left IR sensor detects an object or when only the right IR sensor detects an object.Tip  Sensor values may be affected by external lights that emit infrared rays, such as sunlight or a fluorescent lamp.  Sensor values depend on the object’s color and surrounding light, so using the IR sensor to measure the exact distance is not recommended.  As mentioned above, IR sensor values are different if objects have different colors, even if they are the same distance away. This characteristic can be utilized to distinguish black from white. (Used for tracing lines)Light Left/Center/RightThis parameter is used to read the current light brightness from the universal sensor(S1).  The current light brightness value of the universal sensor(S1) can be read.  The intensity of radiation of near by light sources such as candles and light bulb can be measured.  The sensor value is between 0 and 255.ExampleA block of code is executed when the left sensor detects brightness over 200.Object DetectedThis parameter is used to determine whether an object is detected within a certain distance from an IR sensor (Left/Center/Right) of the universal sensor(S1).  If an object is detected within a certain distance, the following values are returned.  Binary numbers can be used for the bit values.            Binary value      Decimal value             Meaning in Object Detected Commands                  000      0      Not detected                     001      1      Detected by left sensor                     010      2      Detected by center sensor                     011      3      Detected by left and center sensors                     100      4      Detected by right sensor                     101      5      Detected by right and left sensors                     110      6      Detected by right and center sensors                     111      7      Detected by every sensor             ExampleThe object detection threshold is set as 50, and a block of code will be executed when an object is detected within the threshold.Light DetectedThis parameter is used to determine whether a light is detected within a certain distance from an IR sensor (Left/Center/Right) of the universal sensor(S1).Compatible Controller  If a light is detected within a certain distance, the following values are returned.  Binary numbers can be used for the bit values.            Binary value      Decimal value             Meaning in Object Detected Commands                  000      0      Not detected                     001      1      Detected by left sensor                     010      2      Detected by center sensor                     011      3      Detected by left and center sensors                     100      4      Detected by right sensor                     101      5      Detected by right and left sensors                     110      6      Detected by right and center sensors                     111      7      Detected by every sensor             ExampleThe light detection threshold is set as 50, and a block of code will be executed when a light is detected within the threshold.Sound Max DataThis parameter is used to set or read the maximum sound data of the universal sensor(S1).  Reads the maximum sound data detected by the universal sensor(S1).  If the detected volume is louder than the volume of the max sound data, the max sound data is replaced with the detected value.  The value is between 0 and 255.  Because “Sound max data” is not initialized automatically, the user must reset it 0 before use.Note Compatiable Controllers : CM-5, CM-510, CM-700ExampleInitialize “Sound max data” as 0 and execute a block of code when it exceeds 200.Sound DataThis parameter is used to read the current sound level of the universal sensor (S1).  Reads the sound data of the universal sensor(S1).  If no sounds are detected, the returned value will be near 127.  When sounds are detected, the value will change according to the volume.  The louder the sound, the more the value will fluctuate from 127 to 0 and 255.  The value is between 0 and 255.Note Compatiable Controllers : CM-5, CM-510, CM-700ExamplePrints the current sound volume on the screen.Sound CountThis parameter is used to read or initialize the number of sounds detected by the universal sensor(S1).  “Sound Count” uses numbers between 0 and 255.  When sounds are no longer detected, the number of detected sounds will be input into the “‘Sound Count” parameter.  Because “Sound Count” is not initialized automatically, the user must reset it to 0 before use.ExampleInitializes “Sound count” as 0 and wait for a sound to be detected. Then, call the “Play” function.Sound TimeThis parameter is used to set or read how long the sound will be played.  The value is between 0 and 65535.  When “sound count” is initialized as 0, “sound  time” will be also initialized as 0.ExampleThe following example uses two AX-S1 sensors to determine the direction of the detected sound.Buzzer IndexThis parameter is used to set or read the musical note played by the buzzer of the universal sensor (S1).  The “Buzzer Time” parameter must always be used with the “Buzzer Index” parameter.  “Buzzer Time” must be set before “Buzzer Index” is set for the correct sound to be played.  (This order is very important)  (Click here for more information on “Buzzer Time.”)  Depending on what the “Buzzer Time” is set to, “Buzzer Index” can be set to play a musical note or a melody.          “Buzzer Time” is set to 255 : Melody Mode              Choose from 26 different melodies (0 ~ 25).            When “Buzzer Time” is between 0 and 254 : Musical Note Mode      Choose from 51 notes.  The selected note will play for the length set as “Buzzer Time.”      ExamplePlays melody #3.Plays Do, Mi, and Sol for 0.3 seconds each.Buzzer TimeThis parameter is used to set or read how long the sound is played by the buzzer of the universal sensor (S1).Note Compatiable Controllers : CM-5, CM-510, CM-700  “Buzzer Time” parameter must always be used with the “Buzzer Index” parameter.  “Buzzer Time” must be set before “Buzzer Index” is set for the correct sound to be played. (The order is important.) (Click  here for more information on “Buzzer Time.”.)  “Buzzer Time” can be set using buzzer time constants.  “Buzzer Time” can be set to a value between 0 and 255.  Each value represents 0.1 second.  For example, when “Buzzer Time” is set to 1, the note will be played for 0.1 second.  The maximum length a note will be played is 5 seconds.  Therefore, when values between 50 and 254 are entered, the note will be played for 5 seconds.          When “Buzzer Time” is set to 255 : Melody Mode      Choose from 26 different melodies (0-25).              When the melody finishes playing, “Buzzer Time” is reset to 0.            “Buzzer Time” is between 0 and 254 : Musical Note Mode      Choose from 51 notes.  The selected note will play for the length set as “Buzzer Time.”      When it is set to 254, the sound will play without end.      ExamplePlays melody #3 .Plays Do, Mi and Sol for 0.3 seconds each.  (Same as the example in “Buzzer Index”)IR COM ArrivedThis parameter is used to check whether there are any new data received via the wireless communication module.  1 : Indicates that there is new data in the input buffer.  0 : Indicates that all data in the input have been retrieved using the “IR COM RXD”’ parameter.ExampleWaits for new data to arrive and executes a block of code when the received data is 100.IR COM RXDThis parameter is used to read the data received via the wireless communication module.Note Compatiable Controllers : CM-5, CM-510, CM-700  The data is a number between 0 and 65535.  The IR COM Arrived parameter is can be used to check for new data.  Because there is an input buffer, a maximum of 2 data values can be saved.  If the input buffer is filled with 2 data values when READ is executed, the first data will be read and removed from the buffer. If there is only 1 data value in the input buffer when READ is executed, the latest data will be retrieved.ExampleWaits for new data to arrive and executes a block of code when the received data is 100.IR COM TXDThis parameter is used to transmit data via a wireless communication module.Note Compatiable Controllers : CM-5, CM-510, CM-700  The data to send must be a number between 0 and 65535.  When the “Remocon TXD” parameter is set, the data is immediately sent wirelessly.ExampleWaits for new data to arrive, and when the data arrives, the received data is transmitted wirelessly.Object Detection ThresholdThis parameter is used to set or read the object detection threshold.Note Compatiable Controllers : CM-5, CM-510, CM-700  Set the object detection threshold to be used when determining whether an object is detected or not.  There is a short-range detection mode and a long-distance detection mode.  The short range detection mode is activated when the threshold value is set as 0.ExampleThe object detection threshold is set as 50, and a block of code will be executed when an object is detected within the threshold.Light Detection ThresholdThis parameter is used to set or read the light detection threshold of the universal sensor (S1).Note Compatiable Controllers : CM-5, CM-510, CM-700  Set the threshold to be used when determining whether a light is detected or not.ExampleThe light detection threshold is set as 50, and a block of code will be executed when a light is detected within the threshold.IR Sensor ArrayIR Sensor ValueThese parameters are used to read the current IR sensor value from the IR Sensor Array.  The IR array reads values between 1 and 7. The array can be used at distances from 0cm to 5cm.  Textures and colors from walls and obstacles can influence the output values of the IR array.  The sensor value is between 0 and 1023.ExampleDetected values can emit different sounds as following the array’s values.Tip  Sensor values may be affected by external lights that emit infrared rays, such as sunlight or a fluorescent lamp.  Sensor values depend on the object’s color and surrounding light, so using the IR sensor to measure the exact distance is not recommended.  As mentioned above, IR sensor values are different if objects have different colors, even if they are the same distance away. This characteristic can be utilized to distinguish black from white. (Used for tracing lines)IR Array Buzzer IndexThis parameter is used to set or read the musical note played by the buzzer of the ir sensor array  The “Buzzer Time” parameter must always be used with the “Buzzer Index” parameter.  “Buzzer Time” must be set before “Buzzer Index” is set for the correct sound to be played.  (This order is very important) (Click here for more information on “Buzzer Time.”)  Depending on what the “Buzzer Time” is set to, “Buzzer Index” can be set to play a musical note or a melody.          “Buzzer Time” is set to 255 : Melody Mode              Choose from 26 different melodies (0 ~ 25).                    When “Buzzer Time” is between 0 and 254 : Musical Note Mode      Choose from 51 notes.  The selected note will play for the length set as “Buzzer Time.”      ExamplePlays melody #3.Plays Do, Mi, and Sol for 0.3 seconds each.IR Array Buzzer TimeThis parameter is used to set or read how long the sound is played by the buzzer of the ir sensor array.  “Buzzer Time” parameter must always be used with the “Buzzer Index” parameter.  “Buzzer Time” must be set before “Buzzer Index” is set for the correct sound to be played. (The order is important.) (Click  here for more information on “Buzzer Time.”.)  “Buzzer Time” can be set using buzzer time constants.  “Buzzer Time” can be set to a value between 0 and 255.  Each value represents 0.1 second.  For example, when “Buzzer Time” is set to 1, the note will be played for 0.1 second.  The maximum length a note will be played is 5 seconds.  Therefore, when values between 50 and 254 are entered, the note will be played for 5 seconds.          When “Buzzer Time” is set to 255 : Melody Mode      Choose from 26 different melodies (0-25).              When the melody finishes playing, “Buzzer Time” is reset to 0.                    “Buzzer Time” is between 0 and 254 : Musical Note Mode      Choose from 51 notes.  The selected note will play for the length set as “Buzzer Time.”      When it is set to 254, the sound will play without end.      ExamplePlays melody #3.Plays Do, Mi, and Sol for 0.3 seconds each.Auto Threshold ModeParameters for set black values and automatic detection start/set.  Starts when transitioning from ‘0’ to ‘1’ then sets after transitioning from ‘1’ to ‘0’  Also sets the timer from start to set.ExampleDuring a ‘1’ the LED will turn on, detecting a white or black then the array automatically sets values.IR Obstacle DetectedParamenters to determine IR array obstacle values  In the IR array if each IR sensor detected black value is lower than the set black valuethe values will be assigned as shown below; the LED turns on.            Binary value      Decimal Value      Black Detection                  0000001      1      Black detection for IR sensor #1              0000010      2      Black detection for IR sensor #2              0000100      4      Black detection for IR sensor #3              0001000      8      Black detection for IR sensor #4              0010000      16      Black detection for IR sensor #5              0100000      32      Black detection for IR sensor #6              1000000      64      Black detection for IR sensor #7        From the diagram you may check binary values.![IR Obstacle][img_ir_obstacle]ExampleSet sensor #1 to 100; when sensor #1 detects black do a specified action.IR ThresholdReference black/white for the IR array  Determines white/black set values.  sensor and set black values                   Black Detection      LED                  Sensor value &amp;lt;= set value      BIT 1      ON              Sensor value &amp;gt; set value      BIT 0      OFF      ExampleSet sensor #1 to 100; when sensor #1 detects black do a specified action.Direct AccessThe address of peripheral devices such as Dynamixels can be accessed directly and read from or written to.Note Compatiable Controllers : CM-5, CM-510, CM-700  Data can be read from or written to a specific in the form of bytes or words.ExampleWrite 0 at word address 25 of the Dynamixel with ID 105.Print the value stored in the word address 25 of the Dynamixel with ID 105.VariablesThis is a storage place inside a program capable of saving, editing, and reading data.  If a variable with the same name already exists, it is not created.  Instead, the existing varible is used.  Spaces are not permitted in variable names.  Variable names cannot start with a number.  Special characters (!, @, #, $, etc ) are not allowed in variable names.(Underscores ( _ ) are permitted.)ExampleVariables may be used for many purposes.  Existing Variables are listed in the “Set Device or Number” window.TipVariables are useful when a number to be remembered, when a value must be changed depending on the situation, or when multiple values must be changed at once.",
        "url": " http://localhost:4000/docs/en/software/rplus1/task/programming_02/"
      } ,
  
      "docs-kr-software-rplus1-task-programming-02":  {
        "title": "R+ Task 1.0",
      "content"	 : "프로그래밍편집여러줄 선택줄 삽입줄 지우기줄 활성/비활성복사/잘라내기/붙여넣기이름찾기명렁어프로그램 시작프로그램 강제종료구간 시작/끝주석/메모계산로드레이블/점프조건문무조건 반복조건 반복횟수 반복반복 끝내기조건 대기함수 강제종료함수 만들기/호출콜백 함수제어기 파라미터보낼 무선 데이터받은 무선 데이터새 무선 데이터임의의 숫자Aux LED버튼타이머정밀타이머상대 로봇 무선ID내 로봇 무선ID화면출력/줄바꿈적외선 센서부저 종류부저 울림시간최종 소리감지 횟수실시간 소리감지 횟수시작버튼 눌림횟수자동꺼짐 타이머RC-100 채널스마트앱 파라미터모션 파라미터모션 페이지모션 상태관절 오프셋관절 LED 자동켜기주변장치감속모터서보모터접촉센서LED모듈적외선센서컬러센서자석센서절대거리센서사용자 장치다이나믹셀:액츄에이터모터 켜기LEDCW/CCW MarginCW/CCW Slope목표 위치이동 속도힘 조절현재 위치현재 속도현재 하중전압온도움직임 유무다이나믹셀:EX액츄에이터모터 켜기LEDCW/CCW MarginCW/CCW Slope목표 위치이동 속도힘 조절현재 위치현재 속도현재 하중전압온도움직임 유무소모 전류량다이나믹셀:MX액츄에이터모터 켜기LEDPID 제어목표 위치이동 속도힘 조절현재 위치현재 속도현재 하중전압온도움직임 유무소모 전류량통합센서(S1)거리센서 값조명 밝기물체감지조명감지소리 크기최대 소리 크기소리감지 횟수소리발생 시간부저 음계부저 울림시간새 리모컨 데이터받은 리모컨 데이터보낼 리모컨 데이터물체감지 기준값조명감지 기준값적외선 센서 어레이적외선 센서 값부저 음계부저 울림시간감지 기준값 자동설정적외선 물체감지적외선감지 기준값직접 지정로보플러스 태스크어떤 일을 처리하기 위한 행동들의 집합을 태스크(Task)라고 합니다. 로봇이 해야할 태스크를 프로그래밍 한 소스를 로보플러스(RoboPlus)에서는 태스크 코드(Task Code)라고 합니다. 로봇은 사용자가 작성한 태스크 코드에 따라 동작하게 되며, 이러한 태스크 코드를 쉽게 작성할 수 있도록 도와주는 것이 로보플러스 태스크(RoboPlus Task) 프로그램입니다.태스크 코드 파일은 PC 에서 .tsk 라는 확장자를 가지며 좌측과 같은 아이콘으로 표시됩니다.참고 상위버젼의 Task 파일은 하위버젼에서 호환되지 않습니다.설치하기다운로드 로보티즈 홈페이지 자료실로보플러스는 모든 로보티즈 제품을 프로그래밍할 수 있는 통합 소프트웨어입니다.RoboPlus 시스템 요구 사항  OS : Windows XP Service Pack 2 이상/ Vista/ 7 (32/64bit)/8 (32/64bit)  800MHz이상의 32비트(x86) 또는 64비트 (x64) 프로세서  3D 가속 기능을 지원하는 그래픽 카드  512MB이상 시스템 메모리  여유공간이 500MB 이상인 하드디스크참고 로보플러스를 실행하기 위해선 .NET FrameWork 3.5이상의 버전이 필요 합니다. 로보플러스 설치시 .NET FrameWork 자동설치가 실패할 경우엔 .NET FreameWork를 별도로 설치하세요.RoboPlus 설치 실패시대부분의 RoboPlus 설치 실패의 원인은 사용자 PC환경에 따른 .NET FrameWork 자동 설치 실패 입니다. 따라서 사용자가 직접 .NET FrameWork 3.5를 수동으로 설치 하셔야 합니다..NET FrameWork 3.5를 수동으로 설치 하기 전에 Windows installer 3.1이상이 설치 되어 있어야 합니다.Windows installer와 .NET Framework는 마이크로소프트 다운로드 센터에서 다운로드가 가능합니다.Windows installer 3.1 다운로드.NET Framework 3.5 다운로드시작하기명령줄 만들기명령을 작성하고 싶은 빈 줄을 더블클릭하거나, 마우스를 클릭 후 엔터를 입력하면 선택한 제어기에서 사용할 수 있는 명령을 입력할 수 있습니다.만약, 제어기가 선택되어 있지 않다면, 사용자에게 현재 프로그램에서 사용할 제어기를 묻게 됩니다.파라미터 만들기파라미터(Parameter)는 명령이 수행되기 위해 필요한 대상입니다. 아무것도 설정되지 않았다면 ‘?’표시로 나타나게 됩니다.명령을 선택한 다음에는 명령줄을 완성하기 위해 파라미터를 만들어야 합니다.      Enter키를 누르거나 마우스를 더블클릭하여 편집 모드로 들어갑니다.            좌/우 방향키를 누르거나 마우스로 클릭하면 만들 파라미터를 선택할 수 있습니다.            Enter키를 누르거나 마우스를 더블클릭하면 파라미터 선택창이 나타납니다.            적절한 파라미터를 선택합니다. 각 파라미터의 사용법을 익히는 것이 매우 중요합니다.  프로그램 다운로드태스크 코드를 제어기에 다운로드합니다. 다운로드 과정은 제어기 내부에 태스크 코드를 저장하므로 한번만 수행하면 됩니다.      PC 와 제어기가 연결되어야 합니다. 태스크 코드를 다운로드하기 위해서는 PC 와 제어기가 연결되어야 합니다. (연결 방법은 각 제어기 정보를 참고하세요.)        사용할 통신 포트를 선택해야 합니다. 자동 찾기 기능을 이용하면 쉽게 통신 포트를 설정할 수 있습니다.        RoboPlus Task 가 제어기를 찾지 못하면 아래와 같은 에러 메시지가 나타납니다.        PC 와 제어기가 연결되어 있는지 확인합니다. (연결 방법은 각 제어기 정보를 참고하세요.) 제어기의 전원이 켜져 있는지 확인합니다. 제어기가 연결된 통신 포트가 바르게 선택되어 있는지 확인합니다.        다운로드 메뉴를 선택합니다. 만약, 프로그램에 오류가 있다면 오류를 찾아 수정해야 합니다. (룰 체크 에러 메시지 확인)            다운로드를 진행합니다. 만약 다운로드에 실패했다면 처음부터 다시 시도합니다.            태스크 코드(Task Code)를 실행합니다. -&amp;gt; 로봇의 동작을 실행 합니다. 제어기를 켜고 다운로드 한 태스크 코드를 실행합니다. (태스크 코드 실행 방법은 각 제어기 정보를  참고하세요.)  동영상      로보플러스 프로그램 다운로드(CM-100)            로보플러스 프로그램 다운로드(CM-510/530)      프로그램 결과 출력일반적으로 제어기는 PC와 같이 모니터와 같은 출력 장치가 없기 때문에 내부 상태를 확인하기 어렵습니다. 따라서, 터미널(Terminal)이라는 프로그램을 통해 PC 모니터를 빌려쓰는 방식을 사용합니다. RoboPlus Task에는 터미널 프로그램이 포함되어 있어서 제어기의 상태를 확인할 수 있습니다.프로그램 출력용 모니터 창 띄우기프로그램 실행 시 화면 출력을 보기 위해서는 반드시 프로그램 실행 전에 프로그램 출력용 모니터 창을 띄워야 합니다. 프로그램 출력용 모니터 창을 띄우는 방법은 아래와 같이 여러 가지가 있습니다.      프로그램 다운로드 창에서 프로그램 출력 보기 버튼을 클릭      도구 모음에서 프로그램 출력 보기 버튼을 클릭  프로그램(P) 메뉴의 프로그램 출력 보기(V) 메뉴 선택 혹은 단축키 F5화면 출력/화면 출력 후 줄바꿈태스크 코드에 화면 출력 파라미터를 사용하면 원하는 값을 볼 수 있습니다.화면 출력 : 값을 출력하고 커서를 옆으로 한 칸 이동시킵니다.화면 출력 후 줄바꿈 : 값을 출력하고 커서를 다음 줄로 이동시킵니다.화면 출력 내용  제어기 자체 출력 내용                  프로그램 시작 메시지가 처음에 출력됩니다.                    프로그램 수행 중 에러 메시지 (에러 메시지 종류 보기)              태스크 코드 출력 내용 : -32767 ~ +32767 범위의 10진수로 표시됩니다. (글자는 출력할 수 없습니다.)                  숫자를 출력하는 경우                    센서 값을 출력하는 경우            화면 지우기화면의 내용을 지울 수 있습니다.가상로봇 조종RboPlus Task는 RC-100 등과 같은 조종기가 없어도 조종 기능을 사용할 수 있도록 가상 로봇 조종 기능을 지원하며, 조종기 버튼을 마우스로 클릭하거나 키보드를 이용하여 사용할 수 있습니다.키보드 조종은 아래 표를 참고하세요.            실제 RC-100 키      가상 RC-100의 키보드 키                  U      방향키(↑)              D      방향키(↓)              L      방향키(←)              R      방향키(→)              1      숫자키(1)              2      숫자키(2)              3      숫자키(3)              4      숫자키(4)              5      숫자키(5)              6      숫자키(6)      ",
        "url": " http://localhost:4000/docs/kr/software/rplus1/task/programming_02/"
      } ,
  
      "docs-en-dxl-protocol1":  {
        "title": "Protocol 1.0",
      "content"	 : "Protocol 1.0Instruction PacketInstruction Packet is the command data sent to the Device.            Header1      Header2      ID      Length      Instruction      Param 1      …      Param N      Checksum                  0xFF      0xFF      ID      Length      Instruction      Param 1      …      Param N      CHKSUM      HeaderThe field indicates the start of the Packet.Packet IDThe field that indicates the ID of the Device that should receive the Instruction Packet and process it  Range : 0 ~ 253 (0x00 ~ 0xFD), which is a total of 254 numbers that can be used.  Broadcast ID : 254 (0xFE), which makes all connected devices execute the Instruction Packet.LengthThe length of the Packet(Instruction, Parameter, Checksum fields).Length = number of Parameters + 2InstructionThe field that defines the type of instruction.            Value      Instructions      Description                  0x01      Ping      Instruction that checks whether the Packet has arrived to a device with the same ID as Packet ID              0x02      Read      Instruction to read data from the Device              0x03      Write      Instruction to write data on the Device              0x04      Reg Write      Instruction that registers the Instruction Packet to a standby status; Packet is later executed through the Action instruction              0x05      Action      Instruction that executes the Packet that was registered beforehand using Reg Write              0x06      Factory Reset      Instruction that resets the Control Table to its initial factory default settings              0x83      Sync Write      For multiple devices, Instruction to write data on the same Address with the same length at once      ParametersParameters are used when additional data is required for an instruction.Instruction ChecksumIt is used to check if packet is damaged during communication.Instruction Checksum is calculated according to the following formula.Instruction Checksum = ~( ID + Length + Instruction + Parameter1 + … Parameter N )Where “~” is the Binary Ones Complement operator.When the calculation result of the parenthesis in the above formula is larger than 255 (0xFF), use only lower bytes.For example, when you want to use below Instruction Packet,ID=1(0x01), Length=5(0x05), Instruction=3(0x03),Parameter1=12(0x0C), Parameter2=100(0x64), Parameter3=170(0xAA)Checksum = ~ ( ID + Length + Instruction + Parameter1 + … Parameter 3 )= ~ [ 0x01 + 0x05 + 0x03 + 0x0C + 0x64 + 0xAA ]= ~ [ 0x123 ] // Only the lower byte 0x23 executes the Not operation.= 0xDCThus, Instruction Packet should be 0xFF, 0xFF, 0x01, 0x05, 0x03, 0x0C, 0x64, 0xAA, 0xDC.Status Packet            Header1      Header2      ID      Length      Error      Param 1      …      Param N      Checksum                  0xFF      0xFF      ID      Length      Error      Param 1      …      Param N      CHKSUM      ErrorThis field displays the error status occurred during the operation of Dynamixel.            Bit      Error      Description                  Bit 7      0      -              Bit 6      Instruction Error      In case of sending an undefined instruction or delivering the action instruction without the reg_write instruction, it is set as 1              Bit 5      Overload Error      When the current load cannot be controlled by the set Torque, it is set as 1              Bit 4      Checksum Error      When the Checksum of the transmitted Instruction Packet is incorrect, it is set as 1              Bit 3      Range Error      When an instruction is out of the range for use, it is set as 1              Bit 2      Overheating Error      When internal temperature of Dynamixel is out of the range of operating temperature set in the Control table, it is set as 1              Bit 1      Angle Limit Error      When Goal Position is written out of the range from CW Angle Limit to CCW Angle Limit , it is set as 1              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control table, it is as 1      For example, when Status Packet is returned as below0xFF 0xFF 0x01 0x02 0x24 0xD8It means that the error of 0x24 occurs from Dynamixel whose ID is 01. Since 0x24 is 00100100 as binary, Bit5 and Bit2 become 1. In order words, Overload and Overheating Errors have occurred.Note The error types on the table above are related to actuators, and the contents may vary depending on the type of Dynamixel.Status ChecksumIt is used to check if packet is damaged during communication.Status Checksum is calculated according to the following formula.Status Checksum = ~( ID + Length + Error + Parameter1 + … Parameter N )Instruction DetailsPingThis instruction requests the Status Packet from a specific ID. Even if Status Return Level(16) is 0, Dynamixel returns Status Packet all the time for Ping Instruction.            Instruction      Length      Parameter                  0x01      0x02      -      ExampleConditions  ID 1(RX-64) is connected to the PC with an identical baudrate.Ping Instruction Packet            H1      H2      ID      LEN      INST      CKSM                  0xFF      0xFF      0x01      0x02      0x01      0xFB      ID 1 Status Packet            H1      H2      ID      LEN      ERR      CKSM                  0xFF      0xFF      0x01      0x02      0x00      0xFC      ReadThis instruction is to read data in the Control Table of Dynamixel.            Instruction      Length      Param 1      Param 2                  0x02      0x04      Starting Address of the Data      Length of Data to read      ExampleConditions  ID 1(RX-64) : Read Present Temperature, which is located at the address 43(0x2B)Read Instruction Packet            H1      H2      ID      LEN      INST      P1      P2      CKSM                  0xFF      0xFF      0x01      0x04      0x02      0x2B      0x01      0xCC      ID 1 Status Packet            H1      H2      ID      LEN      ERR      P1      CKSM                  0xFF      0xFF      0x01      0x03      0x00      0x20      0xDB      WriteThis instruction is to write data to the Control Table of DYNAMIXEL            Instruction      Length      Param 1      Param 2      Param 3      Param N+1                  0x03      N + 3      Starting Address of the Data      1st Byte      2nd Byte      Nth Byte      ExampleConditions  ID broadcast(RX-64) : Set the unknwon Dynamixel’s ID as “1” by writing 1 to ID(3)Write Instruction Packet            H1      H2      ID      LEN      INST      P1      P2      CKSM                  0xFF      0xFF      0xFE      0x04      0x03      0x03      0x01      0xF6      Note Status Packet will not be returned if Broadcast ID(0xFE) is used.Reg Write  Instruction that is similar to Write Instruction, but has an improved synchronization characteristic  Write Instruction is executed immediately when an Instruction Packet is received.  Reg Write Instruction registers the Instruction Packet to a standby status, and sets Control table Registered Instruction to ‘1’.  When an Action Instruction is received, the registered Packet is executed, and sets Control Table Registered Instruction to ‘0’.            Instruction      Length      Param 1      Param 2      Param N+1                  0x04      N+3      Starting Address of the Data      1st Byte      Nth Byte      ExampleConditions  ID 1(RX-64) : Reg Write 500(0x1F4) to Goal Position(30) and wait for Action instruction to move.Reg Write Instruction Packet            H1      H2      ID      LEN      INST      P1      P2      P3      CKSM                  0xFF      0xFF      0x01      0x05      0x04      0x1E      0xF4      0x01      0xE2      ID 1 Status Packet            H1      H2      ID      LEN      ERR      CKSM                  0xFF      0xFF      0x01      0x02      0x00      0xFC      ActionThis instruction is to execute the registered Reg Write instruction. The Action instruction is useful when multiple Dynamixels are required to start moving at the same time. When several devices are controlled via communication, there is a minor time difference between enabling the first and last device. Dynamixel has resolved this problem by using Action instruction.            Instruction      Length      Parameter                  0x05      0x02      -      ExampleConditions  All Dynamixels have received Reg Write instructions.Action Instruction Packet            H1      H2      ID      LEN      INST      CKSM                  0xFF      0xFF      0xFE      0x02      0x05      0xFA      Note Status Packet will not be returned if Broadcast ID(0xFE) is used.Factory ResetThis instruction is to reset the Control Table of Dynamixel to the factory default values.Caution Please be careful as Reset instruction will erase saved custom values in the EEPROM.            Instruction      Length      Parameter                  0x06      0x02      -      ExampleConditions  ID 0(RX-64) : Factory Reset the DynamixelFactory Reset Instruction Packet            H1      H2      ID      LEN      INST      CKSM                  0xFF      0xFF      0x00      0x02      0x06      0xF7      ID 0 Status Packet            H1      H2      ID      LEN      ERR      CKSM                  0xFF      0xFF      0x00      0x02      0x00      0xFD      Sync WriteThis instruction is used to control multiple Dynamixels simultaneously with a single Instruction Packet transmission. When this instruction is used, several instructions can be transmitted at once, so that the communication time is reduced when multiple Dynamixels are connected in a single channel. However, the SYNC WRITE instruction can only be used to a single address with an identical length of data over connected Dynamixels. ID should be transmitted as Broadcasting ID.            Item      Description                  Instruction      0x83              Length      ((L + 1) * N) + 4, L:Data Length, N:Number of Dynamixel              Parameter 1      Starting address              Parameter 2      Length of Data to write              Parameter 3      [1st Device] ID              Parameter 4      [1st Device] 1st Byte              Parameter 5      [1st Device] 2nd Byte              …      …              Parameter L+3      [1st Device] L-th Byte              Parameter L+4      [2nd Device] ID              Parameter L+5      [2nd Device] 1st Byte              Parameter L+6      [2nd Device] 2nd Byte              …      …              Parameter 2L+4      [2nd Device] L-th Byte      ExampleConditions  ID 0(RX-64) : Write 0x010 to Goal Position(30, 0x1E) and write 0x150 to Moving Speed(32, 0x20)  ID 1(RX-64) : Write 0x220 to Goal Position(30, 0x1E) and write 0x360 to Moving Speed(32, 0x20)Sync Write Instruction Packet            H1      H2      ID      LEN      INST      P1      P2      P3      P4      P5      P6      P7      P8      P9      P10      P11      P12      CKSM                  0xFF      0xFF      0xFE      0x0E      0x83      0x1E      0x04      0x00      0x10      0x00      0x50      0x01      0x01      0x20      0x02      0x60      0x03      0x67      Note Status Packet will not be returned if Broadcast ID(0xFE) is used.Bulk ReadThis instruction is used for reading values of multiple DYNAMIXELs simultaneously by sending a single Instruction Packet. The packet length is shortened compared to sending multiple READ commands, and the idle time between the status packets being returned is also shortened to save communication time. However, this cannot be used to read a single module. If an identical ID is designated multiple times, only the first designated parameter will be processed.            Item      Description                  Instruction      0x92              Length      3N + 3              Parameter 1      0x00              Parameter 2      [1st Device] Length of Data to read              Parameter 3      [1st Device] ID              Parameter 4      [1st Device] Starting address              …      …              Parameter 3N+2      [Nth Device] Length of Data to read              Parameter 3N+3      [Nth Device] ID              Parameter 3N+4      [Nth Device] Starting address      ExampleConditions  ID 1(RX-64) : Read the 2-byte Goal Position value(30, 0x1E).  ID 2(RX-64) : Read the 2-byte Present Position value(36, 0x24).Bulk Read Instruction Packet            H1      H2      ID      LEN      INST      P1      P2      P3      P4      P5      P6      P7      CKSM                  0xFF      0xFF      0xFE      0x09      0x92      0x00      0x02      0x01      0x1E      0x02      0x02      0x24      0x1D      When Bulk Read instruction is received, Dynamixel with ID 2 monitors the status packet being sent from ID 1 of the data bus (the preceeding device ID), and when device ID 1’s status packet transmission is completed, ID 2 sends its own status packet.ID 1 Status Packet            H1      H2      ID      LEN      ERR      P1      P2      CKSM                  0xFF      0xFF      0x01      0x04      0x00      0x00      0x80      0x7A      ID 2 Status Packet            H1      H2      ID      LEN      ERR      P1      P2      CKSM                  0xFF      0xFF      0x02      0x04      0x00      0x00      0x80      0x79      More Packet ExamplesCommunication OverviewTo control Dynamixel, communication should be established according to the protocol of Dynamixel.  Dynamixel is driven by receiving binary data. Examples of programs for the transmission of this kind of data are described in detail in the User’s Manual of the Dynamixel-only controller or the USB2Dynamixel.Thus, this manual describes only the method and protocol of communication used in Dynamixel on the assumption that Main Controller can transfer binary data.PacketMain Controller and Dynamixel communicate each other by sending and receiving data called Packet. Packet has two kinds: Instruction Packet, which Main Controller sends to control Dynamixel, and Status Packet, which Dynamixel responses to Main Controller.IDID is a specific number for distinction of each Dynamixel when several Dynamixels are linked to one bus.By giving IDs to Instruction and Status Packets, Main Controller can control only the Dynamixel that you want to controlProtocolDynamixel does the Asynchronous Serial Communication with 8 bit, 1 Stop bit, and None Parity.If Dynamixel with the same ID is connected, packet will collide and network problem will occur. Thus, set ID as such that there is no Dynamixel with the same ID.ID of Dynamixel is changeable.For this change, please refer to Changing IDs of Dynamixel. The factory default setting ID is 1.Half DuplexHalf duplex UART is a serial communication protocol where both TxD and RxD cannot be used at the same time. This method is generally used when many devices need to be connected to a single bus. Since more than one device are connected to the same bus, all the other devices need to be in input mode while one device is transmitting. The Main Controller that controllers the Dynamixel actuators sets the communication direction to input mode, and only when it is transmitting an Instruction Packet, it changes the direction to output mode.Tx, Rx DirectionFor Half Duplex UART, the transmission ending timing is important to change the direction to receiving mode. The bit definitions within the register that indicates UART_STATUS are as the following  TXD_BUFFER_READY_BIT: Indicates that the transmission DATA can be loaded into the Buffer. Note that this only means that the SERIAL TX BUFFER is empty, and does not necessarily mean that the all the data transmitted before has left the CPU.      TXD_SHIFT_REGISTER_EMPTY_BIT: Set when all the Transmission Data has completed its transmission and left the CPU.        The TXD_BUFFER_READY_BIT is used when one byte is to be transmitted via the serial communication channel, and an example is shown below.    TxDByte(byte bData){  while(!TXD_BUFFER_READY_BIT); //wait until data can be loaded.  SerialTxDBuffer = bData; //data load to TxD buffer}  When changing the direction, the TXD_SHIFT_REGISTER_EMPTY_BIT must be checked. The following is an example program that sends an Instruction Packet  DIRECTION_PORT = TX_DIRECTION;  TxDByte(0xff);  TxDByte(0xff);  TxDByte(bID);  TxDByte(bLength);  TxDByte(bInstruction);  TxDByte(Parameter0); TxDByte(Parameter1); …  DisableInterrupt(); // interrupt should be disable  TxDByte(Checksum); //last TxD  while(!TXD_SHIFT_REGISTER_EMPTY_BIT); //Wait till last data bit has been sent  DIRECTION_PORT = RX_DIRECTION; //Direction change to RXD  EnableInterrupt(); // enable interrupt againNote Please note the important lines between LINE 8 and LINE 12. Line 8 is necessary since an interrupt here may cause a delay longer than the return delay time and corruption to the front of the status packet may occur.Byte to Byte TimeThe delay time between bytes when sending an instruction packet. If the delay time is over 100ms, then the Dynamixel actuator recognizes this as a communication problem and waits for the next header (0xff 0xff) of a packet again.",
        "url": " http://localhost:4000/docs/en/dxl/protocol1/"
      } ,
  
      "docs-en-dxl-protocol2":  {
        "title": "Protocol 2.0",
      "content"	 : "Protocol 2.0  Protocol 2.0 supported devices: MX-28, MX-64, MX-106(MX Series with Firmware V39 or above), X Series, DYNAMIXEL Pro  Protocol 2.0 supported controllers: CM-150 , CM-200  Other: 2.0 protocol from R+ Smart appInstruction PacketInstruction Packet is the command data sent to the Device.            Header1      Header2      Header3      Reserved      Packet ID      Length1      Length2      Instruction      Param      Param      Param      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      ID      Len_L      Len_H      Instruction      Param 1      …      Param N      CRC_L      CRC_H      HeaderThe field indicates the start of the PacketReserved0x00 (0xFD cannot be used)Packet IDThe field that indicates the ID of the Device that should receive the Instruction Packet and process it  Range : 0 ~ 252 (0x00 ~ 0xFC), which is a total of 253 numbers that can be used  Broadcast ID : 254 (0xFE), which makes all connected devices execute the Instruction Packet  253(0xFD), 255(0xFF) : These are not used in order to avoid duplicate use with HeaderPacket LengthThe length after the Packet Length field (Instruction, Parameter, CRC fields).Packet Length = number of Parameters + 3InstructionThe field that defines the type of command.            Value      Instructions      Description                  0x01      Ping      Instruction that checks whether the Packet has arrived to a device with the same ID as Packet ID              0x02      Read      Instruction to read data from the Device              0x03      Write      Instruction to write data on the Device              0x04      Reg Write      Instruction that registers the Instruction Packet to a standby status; Packet is later executed through the Action command              0x05      Action      Instruction that executes the Packet that was registered beforehand using Reg Write              0x06      Factory Reset      Instruction that resets the Control Table to its initial factory default settings              0x08      Reboot      Instruction to reboot the Device              0x55      Status(Return)      Return Instruction for the Instruction Packet              0x82      Sync Read      For multiple devices, Instruction to read data from the same Address with the same length at once              0x83      Sync Write      For multiple devices, Instruction to write data on the same Address with the same length at once              0x92      Bulk Read      For multiple devices, Instruction to read data from different Addresses with different lengths at once              0x93      Bulk Write      For multiple devices, Instruction to write data on different Addresses with different lengths at once      Parameters  As the auxiliary data field for Instruction, its purpose is different for each Instruction.  Method of expressing negative number data : This is different for each product, so please refer to the e-manual of the corresponding product.CRC16bit CRC field checks if the Packet has been damaged during communication. Please refer to the CRC calculation code.Status Packet            Header1      Header2      Header3      Reserved      Packet ID      Length1      Length2      Instruction      ERR      PARAM      PARAM      PARAM      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      ID      Len_L      Len_H      Instruction      Error      Param 1      …      Param N      CRC_L      CRC_H      InstructionInstruction of the Status Packet is designated to 0x55 (Status)ErrorThe field that indicates the processing result of Instruction Packet            Bit 7      Bit 6 ~ Bit 0                  Alert      Error Number        Alert : When there has been a problem in the Device, this field is set as 1. Checking the Hardware error status value of the Control Table can indicate the cause of the problem.  Error Number : When there has been an Error in the processing of the Instruction Packet.            Value      Error      Description                  0x01      Result Fail      Failed to process the sent Instruction Packet              0x02      Instruction Error      Undefined Instruction has been usedAction has been used without Reg Write              0x03      CRC Error      CRC of the sent Packet does not match              0x04      Data Range Error      Data to be written in the corresponding Address is outside the range of the minimum/maximum value              0x05      Data Length Error      Attempt to write Data that is shorter than the data length of the corresponding Address(ex: when you attempt to only use 2 bytes of a item that has been defined as 4 bytes)              0x06      Data Limit Error      Data to be written in the corresponding Address is outside of the Limit value              0x07      Access Errer      Attempt to write a value in an Address that is Read Only or has not been definedAttempt to read a value in an Address that is Write Only or has not been definedAttempt to write a value in the ROM domain while in a state of Torque Enable(ROM Lock)      Parameter  As the auxiliary data field for Instruction, its purpose is different for each Instruction.  Method of expressing negative number data : This is different for each product, so please refer to the e-manual of the corresponding productPacket ProcessProcessing Order of Transmission  Generate basic form of Packet and afterwards Byte Stuffing(0xFD)          Inspection range : Everything within the Instruction field to the Parameter field (not the CRC)      Processing method : When the pattern “0xFF 0xFF 0xFD” appears, add Byte Stuffing (0xFD) (If “0xFF 0xFF 0xFD” already exists, add a 0xFD to change it to “0xFF 0xFF 0xFD 0xFD”)        Packet Length : Modify to Packet Length with Byte Stuffing applied  CRC : Calculate CRC with Byte Stuffing appliedProcessing Order of Reception  Search for Header(0xFF 0xFF 0xFD) : Ignore the Byte Stuffing(“0xFF 0xFF 0xFD 0xFD”).  Packet ID : If Packet ID is valid, receive additional transmission the size of Packet Length  CRC : Calculate with the received Packet with Byte Stuffing included, and once CRC is matched then remove Byte StuffingInstruction DetailsPingDescription  Instruction to check the existence of a Device and basic information  Regardless of the Status Return Level of the Device, the Status Packet is always sent to Ping Instruction.  When the Packet ID field is 0xFE(Broadcast ID) : All devices send their Status Packet according to their arranged order.Packet ParametersNote Status Packet is received from each Device.            Status Packet      Description                  Parameter 1      Model Number LSB              Parameter 2      Model Number MSB              Parameter 3      Version of Firmware      Example 1Conditions  ID1(XM430-W210) : For Model Number 1030(0x0406), Version of Firmware 38(0x26)  Instruction Packet ID : 1Ping Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x03      0x00      0x01      0x19      0x4E      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      PARAM1      PARAM2      PARAM3      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x07      0x00      0x55      0x00      0x06      0x04      0x26      0x65      0x5D      Example 2Conditions  ID1(XM430-W210) : For Model Number 1030(0x0406), Version of Firmware 38(0x26)  ID2(XM430-W210) : For Model Number 1030(0x0406), Version of Firmware 38(0x26)  Instruction Packet ID : 254(Broadcast ID)Ping Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0xFE      0x03      0x00      0x01      0x31      0x42      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      PARAM1      PARAM2      PARAM3      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x07      0x00      0x55      0x00      0x06      0x04      0x26      0x65      0x5D      ID 2 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      PARAM1      PARAM2      PARAM3      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x02      0x07      0x00      0x55      0x00      0x06      0x04      0x26      0x6F      0x6D      ReadDescription  Instruction to read a value from Control Table  Method of expressing negative number data : This is different for each product, so please refer to the e-manual of the corresponding productPacket Parameters            Instruction Packet      Description                  Parameter 1      Low-order byte from the starting address              Parameter 2      High-order byte from the starting address              Parameter 3      Low-order byte from the data length (X)              Parameter 4      High-order byte from the data length (X)                  Status Packet      Description                  Parameter 1      First Byte              Parameter 2      Second Byte              …      …              Parameter X      X-th Byte      ExampleConditions  ID1(XM430-W210) : Present Position(132, 0x0084, 4[byte]) = 166(0x000000A6)Read Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      PARAM1      PARAM2      PARAM3      PARAM4      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x07      0x00      0x02      0x84      0x00      0x04      0x00      0x1D      0x15      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      PARAM1      PARAM2      PARAM3      PARAM4      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x08      0x00      0x55      0x00      0xA6      0x00      0x00      0x00      0x8C      0xC0      WriteDescription  Instruction to write a value on the Control Table  Method of expressing negative number data : This is different for each product, so please refer to the e-manual of the corresponding productPacket Parameters            Instruction Packet      Description                  Parameter 1      Low-order byte from the starting address              Parameter 2      High-order byte from the starting address              Parameter 2+1      First Byte              Parameter 2+2      Second Byte              …      …              Parameter 2+X      X-th Byte      ExampleConditions  ID1(XM430-W210) : Write 512(0x00000200) to Goal Position(116, 0x0074, 4[byte])Write Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      P1      P2      P3      P4      P5      P6      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x09      0x00      0x03      0x74      0x00      0x00      0x02      0x00      0x00      0xCA      0x89      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x04      0x00      0x55      0x00      0xA1      0x0C      Reg WriteDescription  Instruction that is similar to Write Instruction, but has an improved synchronization characteristic  Write Instruction is executed immediately when an Instruction Packet is received.  Reg Write Instruction registers the Instruction Packet to a standby status, and sets Control table Registered Instruction to ‘1’.  When an Action Instruction is received, the registered Packet is executed, and sets Control Table Registered Instruction to ‘0’.Packet Parameters            Instruction Packet      Description                  Parameter 1      Low-order byte from the starting address              Parameter 2      High-order byte from the starting address              Parameter 2+1      First Byte              Parameter 2+2      Second Byte              …      …              Parameter 2+X      X-th Byte      ExampleCondition  ID1(XM430-W210) : Write 200(0x000000C8) to Goal Velocity(104, 0x0068, 4[byte])Reg Write Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      P1      P2      P3      P4      P5      P6      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x09      0x00      0x04      0x68      0x00      0xC8      0x00      0x00      0x00      0xAE      0x8E      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x04      0x00      0x55      0x00      0xA1      0x0C      ActionDescription  Instruction that executes the Packet that has been registered using Reg Write Instruction  When controlling multiple devices using Write Instruction, there will be a difference in the time of execution between the first device that receives the Packet and the last device that receives the Packet.  By using Reg Write and Action Instruction, one can operate multiple devices simultaneously.ExampleCondition  ID1(XM430-W210) : Instruction has been already registered by the Reg Write Instruction.Action Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x03      0x00      0x05      0x02      0xCE      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x04      0x00      0x55      0x00      0xA1      0x0C      Factory ResetDescription  Instruction that resets the Control Table to its initial factory default settings.Parameters            Instruction Packet      Description                  Parameter 1      0xFF : Reset all0x01 : Reset all except ID0x02 : Reset all except ID and Baudrate      ExampleConditions  ID1(XM430-W210) : Apply reset with option 0x01(Reset all except ID)Factory Reset Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      P1      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x04      0x00      0x06      0x01      0xA1      0xE6      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      P1      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x04      0x00      0x55      0x00      0xA1      0x0C      RebootDescription  Instruction to reboot the deviceExampleConditions  ID1(XM430-W210)Reboot Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x03      0x00      0x08      0x2F      0x4E      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      P1      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x04      0x00      0x55      0x00      0xA1      0x0C      Sync ReadDescription  Instruction to read data from multiple devices simultaneously using one Instruction Packet  The Address and Data Length of the data must all be the same.  If the Address of the data is not continual, an Indirect Address can be used.  Packet ID field : 0xFE (Broadcast ID)Parameters            Instruction Packet      Description                  Parameter 1      Low-order byte from the starting address              Parameter 2      High-order byte from the starting address              Parameter 3      Low-order byte from the data length(X)              Parameter 4      High-order byte from the data length(X)              Parameter 4+1      ID of the 1st Device              Parameter 4+2      ID of the 2nd Device              …      …              Parameter 4+X      ID of the X-th Device      Note Status Packet is received from each Device.            Status Packet      Description                  Parameter 1      Frist Byte              Parameter 2      Second Byte              …      …              Parameter X      X-th Byte      ExampleConditions  ID1(XM430-W210) : Present Position(132, 0x0084, 4[byte]) = 166(0x000000A6)  ID2(XM430-W210) : Present Position(132, 0x0084, 4[byte]) = 2,079(0x0000081F)Sync Read Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      P1      P2      P3      P4      P5      P6      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0xFE      0x09      0x00      0x82      0x84      0x00      0x04      0x00      0x01      0x02      0xCE      0xFA      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      PARAM1      PARAM2      PARAM3      PARAM4      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x08      0x00      0x55      0x00      0xA6      0x00      0x00      0x00      0x8C      0xC0      ID 2 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      PARAM1      PARAM2      PARAM3      PARAM4      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x02      0x08      0x00      0x55      0x00      0x1F      0x08      0x00      0x00      0xBA      0xBE      Sync WriteDescription  Instruction to control multiple devices simultaneously using one Instruction Packet  The Address and Data Length of the data must all be the same.  If the Address of the data is not continual, an Indirect Address can be used.  Packet ID field : 0xFE (Broadcast ID)Parameters            Instruction Packet      Description                  Parameter 1      Low-order byte from the starting address              Parameter 2      High-order byte from the starting address              Parameter 3      Low-order byte from the data length(X)              Parameter 4      High-order byte from the data length(X)              Parameter 5      [1st Device] ID              Parameter 5+1      [1st Device] 1st Byte              Parameter 5+2      [1st Device] 2nd Byte              …      [1st Device]…              Parameter 6+X      [2nd Device] X-th Byte              Parameter 6      [2nd Device] ID              Parameter 6+1      [2nd Device] 1st Byte              Parameter 6+2      [2nd Device] 2nd Byte              …      [2nd Device]…              Parameter 6+X      [2nd Device] X-th Byte              …      …      ExampleConditions  ID1(XM430-W210) : Write 150(0x00000096) to Goal Position(116, 0x0074, 4[byte])  ID2(XM430-W210) : Write 170(0x000000AA) to Goal Position(116, 0x0074, 4[byte])Sync Write Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      P1      P2      P3      P4                  0xFF      0xFF      0xFD      0x00      0xFE      0x11      0x00      0x83      0x74      0x00      0x04      0x00                  P5      P6      P7      P8      P9      P10      P11      P12      P13      P14      CRC1      CRC2                  0x01      0x96      0x00      0x00      0x00      0x02      0xAA      0x00      0x00      0x00      0x82      0x87      Bulk ReadDescription  Similar to Sync Read, this is an Instruction to read data from multiple devices simultaneously using one Instruction Packet  This Instruction can be used even if the Address and Data Length of the data for each device are not all the same.  The same ID cannot be used multiple times in the Parameter. In other words, it can only read once from each individual device.  If the Address of the data is not continual, an Indirect Address can be used.  Packet ID field : 0xFE (Broadcast ID)Parameters            Instruction Packet      Description                  Parameter 1      [1st Device] ID              Parameter 2      [1st Device] Low-order byte from the starting address              Parameter 3      [1st Device] High-order byte from the starting address              Parameter 4      [1st Device] Low-order byte from the data              Parameter 5      [1st Device] High-order byte from the data              Parameter 6      [2nd Device] ID              Parameter 7      [2nd Device] Low-order byte from the starting address              Parameter 8      [2nd Device] High-order byte from the starting address              Parameter 9      [2nd Device] Low-order byte from the data              Parameter 10      [2nd Device] High-order byte from the data              …      …      Note Status Packet is received from each Device.            Status Packet      Description                  Parameter 1      1st Byte              Parameter 2      2nd Byte              …      …              Parameter X      X-th Byte      ExampleCondition  ID1(XM430-W210) : Present Voltage(144, 0x0090, 2[byte]) = 119(0x0077)  ID2(XM430-W210) : Present Temperature(146, 0x0092, 1[byte]) = 36(0x24)Bulk Read Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      P1      P2      P3      P4      P5                  0xFF      0xFF      0xFD      0x00      0xFE      0x0D      0x00      0x92      0x01      0x90      0x00      0x02      0x00                  P6      P7      P8      P9      P10      CRC1      CRC2                  0x02      0x92      0x00      0x01      0x00      0x1A      0x05      ID 1 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      PARAM1      PARAM2      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x01      0x06      0x00      0x55      0x00      0x77      0x00      0xC3      0x69      ID 2 Status Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      ERR      PARAM1      CRC1      CRC2                  0xFF      0xFF      0xFD      0x00      0x02      0x05      0x00      0x55      0x00      0x24      0x8B      0x21      Bulk WriteDescription  Similar to Sync Write, this is an Instruction to control multiple devices simultaneously using one Instruction Packet  This Instruction can be used even if the Address and Data Length of the data for each device are not all the same.  The same ID cannot be used multiple times in the Parameter. In other words, it can only write once for each individual device.  If the Address of the data is not continual, an Indirect Address can be used.  Packet ID field : 0xFE (Broadcast ID)Parameters            Instruction Packet      Description                  Parameter 1      [1st Device] ID              Parameter 2      [1st Device] Low-order byte from the starting address              Parameter 3      [1st Device] High-order byte from the starting address              Parameter 4      [1st Device] Low-order byte from the data length(X)              Parameter 5      [1st Device] High-order byte from the data length(X)              Parameter 5+1      [1st Device] 1st Byte              Parameter 5+2      [1st Device] 2nd Byte              …      …              Parameter 5+X      [1st Device] X-th Byte              Parameter 6+X      [2nd Device] ID              Parameter 7+X      [2nd Device] Low-order byte from the starting address              Parameter 8+X      [2nd Device] High-order byte from the starting address              Parameter 9+X      [2nd Device] Low-order byte from the data length(X)              Parameter 10+X      [2nd Device] High-order byte from the data length(X)              Parameter 10+X+1      [2nd Device] 1st Byte              Parameter 10+X+2      [2nd Device] 2nd Byte              …      …              Parameter 10+X+Y      [2nd Device] Y-th Byte              …      …      ExampleCondition  ID1(XM430-W210) : Set Max Voltage Limit(32, 0x0020, 2[byte]) to 160(0x00A0)  ID2(XM430-W210) : Set Temperature Limit(31, 0x001F, 1[byte]) to 80(0x50)Bulk Write Instruction Packet            H1      H2      H3      RSRV      ID      LEN1      LEN2      INST      P1      P2      P3      P4      P5      P6      P7                  0xFF      0xFF      0xFD      0x00      0xFE      0x10      0x00      0x93      0x01      0x20      0x00      0x02      0x00      0xA0      0x00                  P8      P9      P10      P11      P12      P13      CRC1      CRC2                  0x02      0x1F      0x00      0x01      0x00      0x50      0xB7      0x68      ",
        "url": " http://localhost:4000/docs/en/dxl/protocol2/"
      } ,
  
      "docs-en-parts-communication-rc-100":  {
        "title": "RC-100A/100B",
      "content"	 : "RC-100A/100BIntroductionNote RC-100A is discontinued.This is a devices to communicate with the robot via IR, ZIGbee, or Bluetooth.If nothing is mounted the default communications is via IR.Mount the ZIG-100 to communicate via ZIGbee.Mount the BT-100  to communicate via Bluetooth (RC-100 not supported)Note The RC-100 lights green and RC-100A lights blue when mounted with a ZIGbee or Bluetooth module.Specifications            Item      Description                  Weight      80g              Dimension      138mm x 105mm x 36mm              Operation Voltage      3.0V (DC)              Power Consumption      0.07W              Battery      Alkaline(LR6) AA Battery x 2              Button      11 Buttons (Including POWER/MODE button)              Communication Mode      IR Communication(Basic)Zigbee Communication (When ZIG-100 is installed additionally)Bluetooth Communication (When BT-100 is installed additionally)      How to Use  Turning the power on          POWER/MODE in the middle is the power button.  Red LED flickers 2 times if the button is pressed.        Turning the power off          Pressing POWER/MODE button for more than 1 sec, red LED filckers 3 times (4 times when ZIG-100 is plugged), and then it is turned off.        Automatic Powersave Mode          If RC-100 is not used for more than 2 minutes, (if no buttons are pressed) the power is automatically turned off.        Transmitting button-pressed status          If the button of RC-100B is pressed, the packet related to the pressed button is transmitted to the receiving module which is synchronized by the connected transmitting module.      Even at the moment of releasing all buttons, the packet which shows the buttons are not pressed is transmitted.      Please refer to Remote Control Code Map on the packet.      How to ConnectInstalled IR Module of RC-100BWireless communication packet can be transmitted using IR-Receiver-installed CM-100A, CM-510 and CM-530.RC-100A and Zig-100 ModuleWireless communication packet can be transmitted using ZIG-100 module-installed CM-5, CM2+.Wireless communication packet can be transmitted using ZIG-110 module-installed CM-100A, CM-510, CM-530 and CM-700.RC-100A/100B and Bluetooth ModuleThe BT-100A can be mounted onto CM-100A, CM-510, CM-530, and CM-700, and transmit data wirelessly.Check Communication Mode  LED color comparison(Using Built-in Infrared)            RC-100A/100B      RC-100                  Red      Red              Blue      Green        Compatible Wireless Modules            Modules      RC-100A/100B      RC-100                  ZIG-100 Set      O      O              ZIG-110 Set      O      O              ZIG-110A Set      O      O              BT-110A Set      O      X              BT-100A + BT-210 Set      O      X      How to Set IR ChannelCan set communication channel in between 1 ~ 8 for controlling by IR wireless communication. To connect the wireless communication, the channel setting of receiver should be the same with that of sender. Following is the method for IR wireless communication channel setting. (Please refer to RC-100 Channel Programming for setting controller channel)Install ZIG-100/BT-100      Open the cover of the rc-100 and insert the zig-100 module properly. (You can insert both zig-100 and bt-100 into the RC-100A.)            Insert the module as below so that  the red-circled parts can contact each other.            Press firmly to insert ZIG-100/BT-100 module using fingers or long stick etc.                The following picture shows ZIG-100/BT-100 module is installed completely in RC-100A.          Note During an impact the zig-100/bt-100 may be dismounted from the rc-100. In this case rc-100 defaults to IR communications.How to Set Broadcasting ChannelIt is possible to set  4 channels with buttons, if the ZIG-100 on RC-100Z was set at Broadcasting Mode (Multi: Multi communication mode).Channels can be changed if you press the number buttons (1~4) together while MODE buttons are being pressed.The red LED will blink as many as the channel no. , when the channel is changed.Caution  At initial status, it is of no use to change the channel because  it is automatically set at One: One communication mode, instead of  Multi : Multi communication mode.  The ZIG-100 communication can be discontinued for seconds when changing the channels.  When you take away batteries, the channel will be reset at initial status automatically and you need to reset it.Code MapNote Button 5 and 6 are not available under IR control mode.When you press the buttons on RC-100, corresponding code value of each button will be sent out.When more than 2 buttons are pressed, the sum of pressed code values will be sent.EX1)  Button U + Button 3 =&amp;gt; Code value of Button U (1) + Code value of Button 3 (64) = Sending Value (65)EX2)  Button 1 + Button 5 =&amp;gt; Code value of Button 1 (16) + Code value of Button 5 (256) = Sending Value (272)※ There are 128 combination keys usable in IR Mode.※ There are 512 combinations keys usable in Zigbee Mode.Communication PacketThe RC-100 uses the communication packet in the form below  ~ represents Inverse (1’s Complement)Ex) ~0xAA -&amp;gt; 0x55, ~0xF0 -&amp;gt; 0x0FEx) DATA : 0x1234 -&amp;gt; Packet : 0xFF 0x55 0x34 0xCB 0x12 0xEDHow to Insert Batteries      Open the lid on the backside.            Insert 1 battery. (Please be careful with the terminal)            Insert the other battery.            Press firmly to insert the batteries.      Note If there are problems with the RC-100A’s Bluetooth or ZigBee and LED flashes try replacing the batteries with new ones.Tutorials      RoboPlus TaskControl the robot via programs with RoboPlus Task        Zigbee SDKControl zigbee via Zigbee SDK (C language)  ",
        "url": " http://localhost:4000/docs/en/parts/communication/rc-100/"
      } ,
  
      "docs-en-platform-op-references":  {
        "title": "DARwIn-OP",
      "content"	 : "ReferencesBrochureDownload PDF Outside pages (1, 4)Download PDF Inside pages (2, 3)Specifications  Main controller : powered by Intel Atom Z530 CPU (clocked @ 1.6GHz)  Sub controller : powered by STMicroelectronics Cortex-M3 STM32F103RE (clocked at 73MHz).  Camera          2MP HD webcam with up to 1600x1200 resolution (720p-capable)      30 fps      YUV (capture format)      Carl Zeiss focus.      Link Overall SpecificationsDownload PDF DiagramsHardware SpecificationsCore Component Specifications  Main Controller (fit-PC2i)            Feature      Specifications                  CPU      Intel Atom Processor: Z530 - 1.6Ghz @533MHz FSB L2-512KB(dynamic sizing),L1-32KB IC, 24KB DC. Intel Deep Power Down(C6) technology support              Chipset      Poulsbo US15 Intel System Controller Hub (INTEL SCH)              Memory      1GB DDR2, 533MHz, 64-bit              Solid State Disk      3.6GB NAND flash disk              Display Interface      SDVO based DVI interface(up to 1920x1080). Hotplug support.              Audio      Realtek ALC260, High Definition Audio, Line Out, shared line-in / mic-in              Ethernet      based on Gigabit PCI-Express controller Realtek RTL8111              WiFi      802.11 b/g/n capabilities, using RaLink RT3070 USB module. Up to 150Mbps, 2.4GHz band.              USB      2 external USB ports              BIOS      Phoenix SecureCore BIOS              SDIO slot      mini SD connector supporting SDIO1.1 and MMC4.1              Active consumption      5-7W depending on CPU load              Dimensions      104 x 96 x 23 mm              MTBF      &amp;gt; 100,000 hours              Operation temperature      0°C to 70°C              Storage temperature      -40°C to 85°C              Relative humidity      10% to 90% (operation)5% to 95% (storage)      You may download CompuLab’s reference guide with detailed specifications here.You can also get information on the speaker, microphones, and camera.  Sub Controller (CM-730)          STMicroelectronics 32F103RE ARM Cortex 32-bit CPU (clocked @ 72MHz)      Actuator Interface (TTL or RS-485 (5x) each)      Converters (USB-to-Serial, ADC)        Actuator (Dynamixel MX-28)          Stall torque 24kgf.cm @ 12V      Maxon RE-Max customized DC motor      193:1 reduction ratio      Up to 3Mbps buffered TTL interface      User programmable PID Gain      Up to 4096 resolution absolute encoder      Dynamixel Protocol 1.0        Interface          3 buttons      7 LED’s (2EA : 15-bit RGB, user-programmable)        Sensors          IMUs (3-axis accelerometers, 3-axis gyroscope, both intrgrated into sub controller)      Image (2MP Logitech C905) HD Camera      (OPTION) Force: 4 FSR per foot        Battery (LiPo)          Voltage : 11.1V      Capacity : 1000 mAh      Discharge : 10C      Dimension : 70 x 35 x 15      Weight : 83g      PCM embedded to protect from over charge, over discharge, and excess current.        PCB Schematics          Download PDFHead PCB Schematic      Download PDFInterface(Back Panel) PCB Schematic      Download PDFPower Schematic      Sub Controller  Download ZIP Framework  Download PDF Schematics  Download ZIP Reference GuideYou can also get information about the  gyroscope and accelerometer.How to convert TTL to RS485Simply apply the 2 changes below to change the comm. method.  Yellow Rectangle : Change location of resistance          RS24 Short : 3P      R25 Short : 4P        Red Rectangle : Must change connector.          Not sold separately by ROBOTIS.      For more information on the connector, please refer to the link below.http://support.robotis.com/en/techsupport_eng.htm#product/dynamixel/dxl_connector.htmFeatures            Feature      Specifications                  CPU      STMicroelectronics 32F103RE ARM Cortex 32-bit CPU (clocked @ 72MHz)(512KB Flash, 64KB SRAM )              Interface      5 x LED , 2 x RGB LED, 3 x Button, 1 x Buzzer              External ports      13 x ADC /I/O Ports              Sensor      3-axis gyroscope , 3-axis accelerometer, supply voltage sensor              Communication      USB Port, Serial Port , 5x TTL Ports (for Dynamixel)              Audio &amp;amp; Mic Amp      Audio amp gain : 20, mic amp gain : 2027              ETC      Dynamixel Power Control Unit, Head board port, Interface board port.              External supply voltage      8V ~ 16.8v              Current consumption      Maximum 150mA , Standby 50mA              Dimensions      80.0mm x 75.0mm x 20.0mm              Operation temperature      -65°C to +80°C              Weight      51g      Control TableControl Table consists of data regarding the current status and operation of CM-730. The user can control CM-730 by changing data of Control Table via Instruction packet.EEPROM and RAMData in RAM area is reset to initial values whenever the power is turned on while data in EEPROM area is kept once values are set even if the power is turned off.AddressRepresents the location of data. To read from or write data to the control table the user should assign the correct address in the Instruction packet.AccessCM-730 has two kinds of data: Read-only data, used mainly for sensing, and read-and-write data used for driving.Initial ValueIn case of data in the EEPROM Area, the initial values on the right side of the below Control Table are the factory default settings.In case of data in the RAM Area, the initial values on the right side of the following control table are the ones when the power is turned on.Highest/Lowest ByteIn the Control table, some data share the same name, but they are attached with (L) or (H) at the end of each name to distinguish the address. This data requires 16-bit, but it is divided into 8bit each for the addresses (low) and (high). These two addresses should be written with one Instruction Packet simutaneously.EEPROM Area            Address      Name      Description      Access      Init Value                  0 (0X00)      Model Number(L)      model number low byte      R      0(0X00)              1 (0X01)      Model Number(H)      model number high byte      R      115 (0X73)              2 (0X02)      Version of Firmware      firmware version      R      -              3 (0X03)      ID      Dynamixel ID      RW      200 (0XC8)              4 (0X04)      Baud Rate      Dynamixel baud rate      RW      1 (0X01)              5 (0X05)      Return Delay Time      Return Delay Time      RW      0 (0X0)              16 (0X10)      Status Return Level      Status Return Level      RW      2 (0X02)      RAM Area            Address      Name      Description      Access      Init Value                  24 (0X18)      Dynamixel Power      Dynamixel On/Off      RW      0 (0X00)              25 (0X19)      LED Pannel      LED Pannel On/Off      RW      0 (0X00)              26 (0X1A)      LED 5 (L)      LED 5 low byte      RW      0 (0X00)              27 (0X1B)      LED 5 (H)      LED 5 high byte      RW      0 (0X01)              28 (0X1C)      LED 6 (L)      LED 6 low byte      RW      0 (0X00)              29 (0X1D)      LED 6 (H)      LED 6 high byte      RW      0 (0X01)              30 (0X1E)      Button      Button status      R      -              38 (0X26)      Gyro_Z(L)      Gyroscope Z-axis low byte      R      -              39 (0X27)      Gyro_Z(H)      Gyroscope Z-axis high byte      R      -              40 (0X28)      Gyro_Y(L)      Gyroscope Y-axis low byte      R      -              41 (0X29)      Gyro_Y(H)      Gyroscope Y-axis high byte      R      -              42 (0X2A)      Gyro_X(L)      Gyroscope X-axis low byte      R      -              43 (0X2B)      Gyro_X(H)      Gyroscope X-axis high byte      R      -              44 (0X2C)      ACC_X(L)      Accelerometer X-axis low byte      R      -              45 (0X2D)      ACC_X(H)      Accelerometer X-axis high byte      R      -              46 (0X2E)      ACC_Y(L)      Accelerometer Y-axis low byte      R      -              47 (0X2F)      ACC_Y(H)      Accelerometer Y-axis high byte      R      -              48 (0X30)      ACC_Z(L)      Accelerometer Z-axis low byte      R      -              49 (0x31)      ACC_Z(H)      Accelerometer Z-axis high byte      R      -              50 (0X32)      Present Voltage      Current Voltage      R      -              51 (0X33)      MIC 1 (L)      Mic 1 low byte      R      -              52(0x34)      MIC 1 (H)      Mic 1 high byte      R      -              53(0x35)      ADC 2(L)      ADC channel 2 low byte      R      -              54(0x36)      ADC 2(H)      ADC channel 2 high byte      R      -              55(0x37)      ADC 3(L)      ADC channel 3 low byte      R      -              56(0x38)      ADC 3(H)      ADC channel 3 high vyte      R      -              57(0x39)      ADC 4(L)      ADC channel 4 low byte      R      -              58(0x3A)      ADC 4(H)      ADC channel 4 high byte      R      -              59(0x3B)      ADC 5(L)      ADC channel 5 low byte      R      -              60(0x3C)      ADC 5(H)      ADC channel 5 high byte      R      -              61(0x3D)      ADC 6(L)      ADC channel 6 low byte      R      -              62(0x3E)      ADC 6(H)      ADC channel 6 high byte      R      -              63(0x3F)      ADC 7(L)      ADC channel 7 low byte      R      -              64(0x40)      ADC 7(H)      ADC channel 7 high byte      R      -              65(0x41)      ADC 8(L)      ADC channel 8 low byte      R      -              66(0x42)      ADC 8(H)      ADC channel 8 high byte      R      -              67(0x43)      MIC 2 (L)      Mic 2 low byte      R      -              68(0x44)      MIC 2 (H)      Mic 2 high byte      R      -              69(0x45)      ADC 10(L)      ADC channel 10 low byte      R      -              70(0x46)      ADC 10(H)      ADC channel 10 high byte      R      -              71(0x47)      ADC 11(L)      ADC channel 11 low byte      R      -              72(0x48)      ADC 11(H)      ADC channel 11 high byte      R      -              73(0x49)      ADC 12(L)      ADC channel 12 low byte      R      -              74(0x4A)      ADC 12(H)      ADC channel 12 high byte      R      -              75(0x4B)      ADC 13(L)      ADC channel 13 low byte      R      -              76(0x4C)      ADC 13(H)      ADC channel 13 high byte      R      -              77(0x4D)      ADC 14(L)      ADC channel 14 low byte      R      -              78(0x4E)      ADC 14(H)      ADC channel 14 high byte      R      -              79(0x4F)      ADC 15(L)      ADC channel 15 low byte      R      -              80(0x50)      ADC 15(H)      ADC channel 15 high byte      R      -      Address Function HelpModel NumberRepresents the Model Number.Firmware VersionRepresents the firmware version.IDIs a unique number to identify Dynamixel.Values range from 0 (0x00) to 253 (0xFD), Value 254 (0xFE) is used as the Broadcast ID.If the Broadcast ID is used to transmit Instruction Packet, then it can command to all Dynamixels.Note Please be careful not to duplicate the ID of connected Dynamixels.Baud RateRepresents the communication speed. 0 (0x00) to 254 (0xFE) can be used for it. This speed is calculated by using the below formula.Speed(BPS) = 2000000/(Data+1)            Data      Set BPS      Target BPS      Tolerance                  1      1000000.0      1000000.0      0.000 %              3      500000.0      500000.0      0.000 %              4      400000.0      400000.0      0.000 %              7      250000.0      250000.0      0.000 %              9      200000.0      200000.0      0.000 %              16      117647.1      115200.0      -2.124 %              34      57142.9      57600.0      0.794 %              103      19230.8      19200.0      -0.160 %              207      9615.4      9600.0      -0.160 %      Note Maximum Baud Rate error of 3% is within the tolerance of UART communication.Return Delay TimeIs the delay time per data value that takes from the transmission of Instruction packet until the return of Status packet.0 (0x00) to 254 (0xFE) can be used. The delay time per data value is 2 microseconds (usec).If the data value is delayed by 10, 20 usec the initial value is 250 (0xFA) (i.e., 0.5 msec).Status Return LevelDecides how to return Status packet. There are three possibilities:            Value      Return of Status Packet                  0      No return against all commands (Except PING Command)              1      Return only for the READ command              2      Return for all commands      Note When Instruction packet is Broadcast ID, Status packet is not returned regardless of Status return level.Dynamixel Power            Value      Meaning                  0      Turn off the power of all Dynamixels connected to CM-730.              1      Turn on the power of all Dynamixels connected to CM-730.      LED Pannel            BIT      7 ~ 3      2      1      0                  Value      X      LED4      LED3      LED2      If each bit is SET, applicable LED lights up.If each bit is RESET, applicable LED goes off.EX) When the LED Panel = 3 (00000101), the LED4 and LED2 light up.LED5 / LED6            BIT      15      14 ~ 10      9 ~ 5      4 ~ 0                  Value      X      the value of blue light      the value of green light      the value of red light      LED HEAD/ LED EYE is 3 color LED. It can represent the value of 32 steps by colors.It can be represent by controling the value of light by colors.BUTTON STATUS            BIT      7 ~ 2      1      0                  Value      X      the state value of START button      the state value of MODE button      It is the value which represents the state of buttons.If the bit is SET, it represents that the button is pressed.If the bit is RESET, it represents that the button isn’t pressed.GYRO / ACCThe following picture is the direction of axis at CM-730.The Gyroscope and Accelerometer is 10mm distant respectively from the central axis of Dawin.  The positions of central axis and sensor at Dawin  Gyroscope  Accelerometer                                    The Gyroscope axis in the DARWIN-OP      The Accelerometer axis in DARWIN-OP      GYRO_X, GYRO_Y, GYRO_ZThey represent the angular velocity values of X-axis, Y-axis, Z-axis respectively.The observable maximum velocity is -500DPS ~ 500DPS.The following graph shows the process that angular velocity represents to value in reality.ACC_X, ACC_Y, ACC_ZThey represent the acceleration values of X-axis, Y-axis, Z-axis respectively.The observable maximum velocity is -4g ~ +4g.The following graph shows the process that acceleration represents to value in reality.PRESENT VOLTAGEPresent (input) voltage.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)MIC 1 , MIC 2They are the wave values of MIC on the ears at HEAD PCB.It is the value of ADC, and its range is 0~1023.ADC 2 ~ ADC15They are ADC values of ADC channel connected external port(J8).CM-730 has ADC of 10BIT RESOLUTION.Its range is 0~1023FSR(Force Sensing Resister)            Feature      Specifications                  Voltage      9V~12V              Running Temperature      -5°C ~ +80°C              Command Signal      Digital Packet              Protocol Type      Half duplex Asynchronous Serial Communication (8bit,1stop,No Parity)              Link (Physical)      TTL Level Multi Drop (daisy chain type Connector)              ID      254 ID (0~253)              Communication Speed      7,843bps ~ 3 Mbps              Feedback      Position, Temperature, Load, Input Voltage, etc.              Standby current      50 mA      Control TableControl Table consists of data regarding the current status and operation of Dynamixel. The user can control Dynamixel by changing data of Control Table via Instruction packet.EEPROM and RAMData in RAM area is reset to initial values whenever the power is turned on while data in EEPROM area is kept once values are set even if the power is turned off.AddressRepresents the location of data. To read from or write data to the control table the user should assign the correct address in the Instruction packet.AccessDynamixel has two kinds of data: Read-only data, used mainly for sensing, and read-and-write data used for driving.Initial ValueIn case of data in the EEPROM Area, the initial values on the right side of the below Control Table are the factory default settings.In case of data in the RAM Area, the initial values on the right side of the following control table are the ones when the power is turned on.Highest/Lowest ByteIn the Control table, some data share the same name, but they are attached with (L) or (H) at the end of each name to distinguish the address. This data requires 16-bit, but it is divided into 8bit each for the addresses (low) and (high). These two addresses should be written with one Instruction Packet simutaneously.EEPROM Area            Address      Name      Description      Access      Init Value                  0 (0X00)      Model Number(L)      Lowest byte of model number      R      84 (0X54)              1 (0X01)      Model Number(H)      Highest byte of model number      R      1 (0X01)              2 (0X02)      Version of Firmware      Information on the version of firmware      R      -              3 (0X03)      ID      ID of Dynamixel      RW      100 (0X64)              4 (0X04)      Baud Rate      Baud Rate of Dynamixel      RW      34 (0X22)              5 (0X05)      Return Delay Time      Return Delay Time      RW      250 (0XFA)              16 (0X10)      Status Return Level      Status Return Level      RW      2 (0X02)      RAM Area            Address      Name      Description      Access      Init Value                  25 (0X19)      LED      LED On/Off      RW      0 (0X00)              26 (0X1A)      FSR1_L      Lowest byte of FSR 1 sensor data      R      -              27 (0X1B)      FSR1_H      Highest byte of FSR 1 sensor data      R      -              28 (0X1C)      FSR2_L      Lowest byte of FSR 2 sensor data      R      -              29 (0X1D)      FSR2_H      Highest byte of FSR 2 sensor data      R      -              30 (0X1E)      FSR3_L      Lowest byte of FSR 3 sensor data      R      -              31 (0X1F)      FSR3_H      Highest byte of FSR 3 sensor data      R      -              32 (0X20)      FSR4_L      Lowest byte of FSR 4 sensor data      R      -              33 (0X21)      FSR4_H      Highest byte of FSR 4 sensor data      R      -              34 (0X22)      FSR_Central_X      Center point of the X-axis force      R      -              35 (0X23)      FSR_Central_Y      Center point of the Y-axis force      R      -              42 (0X2A)      Present Voltage      Current Voltage      R      -              44 (0X2C)      Registered      Means if Instruction is registered      R      0 (0X00)              47 (0X2F)      Lock      Locking EEPROM      RW      0 (0X00)      Address Function HelpModel NumberRepresents the Model Number.Firmware VersionRepresents the firmware version.IDIs a unique number to identify Dynamixel.Values range from 0 (0x00) to 253 (0xFD), Value 254 (0xFE) is used as the Broadcast ID.If the Broadcast ID is used to transmit Instruction Packet, then it can command to all Dynamixels.when it’s searched as Unknown Device, change the baudrate to 1(1000000).Connect with DARWIN-OP after setting the ID as 111 for the right foot and 112 for the left.Note Please be careful not to duplicate the ID of connected Dynamixels.Baud RateRepresents the communication speed. 0 (0x00) to 254 (0xFE) can be used for it. This speed is calculated by using the below formula.Speed(BPS) = 2000000/(Data+1)            Data      Set BPS      Target BPS      Tolerance                  1      1000000.0      1000000.0      0.000 %              3      500000.0      500000.0      0.000 %              4      400000.0      400000.0      0.000 %              7      250000.0      250000.0      0.000 %              9      200000.0      200000.0      0.000 %              16      117647.1      115200.0      -2.124 %              34      57142.9      57600.0      0.794 %              103      19230.8      19200.0      -0.160 %              207      9615.4      9600.0      -0.160 %      Note Maximum Baud Rate error of 3% is within the tolerance of UART communication.Return Delay TimeIs the delay time per data value that takes from the transmission of Instruction packet until the return of Status packet.0 (0x00) to 254 (0xFE) can be used. The delay time per data value is 2 microseconds (usec).If the data value is delayed by 10, 20 usec the initial value is 250 (0xFA) (i.e., 0.5 msec).Status Return LevelDecides how to return Status packet. There are three possibilities:            Value      Return of Status Packet                  0      No return against all commands (Except PING Command)              1      Return only for the READ command              2      Return for all commands      Note When Instruction packet is Broadcast ID, Status packet is not returned regardless of Status return level.LED            Value      Meaning                  0      Turns LED off              1      Turns LED on                                    Diagram 1      FSR1,FSR2,FSR3,FSR4FSR sensor data. Diagram 1 shows the location of each sensor.Value range is 0 ~ 65535. Each value has 1/1000 N units.For example, FSR1 has a load of 9.8N(1kgf); the value of FSR1 is 9800.The smallest measurement load is 0.493N.The measurement range is 0.493 N ~ 65.535N.FSR_Central_X, FSR_Central_YDARWIN-OP’s load is at the center of the foot.Value range is 0 ~ 254.When no load is present values will read 255.Diagram 1 shows of the center point of each foot.Present VoltageCurrent input voltage. This value is 10 times larger than the actual voltage. For example, when 10V is supplied the data value is 100 (0x64).Registered Instruction            Value      Meaning                  0      There are no commands transmitted by REG_WRITE              1      There are commands transmitted by REG_WRITE      Note If ACTION command is executed, the value is changed into 0.Lock            Value      Meaning                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.Mechanical SpecificationsActuator ID MapDownload PDF ID MapCamera (Logitech C905)  Carl Zeiss® optics with autofocus  Native 2MP HD sensor  HD video capture (up to 1600x1200@10fps, 1280x720@30fps)  720p widescreen mode with recommended system  Up to 8-megapixel photos (enhanced from native 2MP sensor)  Microphone with Logitech® RightSound™ technology  Hi-Speed USB 2.0 certified  Output : MJPG, YUYVDimensionsDARWIN-OP dimensions illustrated in both SI and Imperial units.Weight: 2.9kg (6.39lb)Total height: 454.5mm (17.90in)  Download PDF Dimensions  Download ZIP 3D CAD Files  Download PDF Assembly Manual  Download PDF Wiring Manual  Download PDF Fabrication ManualDynamicsInformation regarding DARWIN-OP’s dynamics can be found here : DARWIN-OP_Dynamics.zip  Download ZIP 3D CAD FilesKinematicsDownload ZIP DARWIN-OP KinematicsSoftware SpecificationsMain ControllerRecovery SoftwareEvery DARWIN-OP robot comes equipped with a USB thumb drive loaded with factory-default setting recovery software.Please visit the link periodically for updatesDownload Recovery SoftwareSource CodeYou can update the source code for DARWINOP via Subversion.The source code also contains the color cards.Download Source CodeSub Controller(CM-730)Download CM-730 InformationSoftware Update InfoFramework Release NoteFramework source code download : SourceForge DARWIN-OP frameworkVer 1.6.0 - 2013.04.11  New Additions          Webots controller can be compiled into DARwin-OP.      DARWIN-OP can be controller from Webots GUI.      MX28.cpp, Camera.cpp added to ensure compatibility with Webots.        Modifications          CM730, Image, Imgprocess, LinuxCamera, JointData, Action, Kinematics added Webots functionality      MX28.h values now reside in MX28.cpp      Camera.h values now reside in Camera.cpp      Ver 1.5.0 - 2012.03.19  New Additions          FSR firmware has been added.      FSR tutorial has been adde        Modifications          LinuxMotionTimer has been changed to use clock_nanosleep function.      Ver 1.4.0 - 2012.01.16  Modifications          MX-28 firmware updated.      Stand-up motion changed.      Cannot change the camera gain/exposure value from a web page bug fixed.      offset tuner ‘set’ command bug fixed.      Ver 1.3.0 - 2011.09.20  New Additions          offset_tuner added.      web-based walk_tuner added.        Modifications          CM-730 firmware updated.      roboplus support 4096 resolution(MX-28 firmware ver 27 or higher).      dxl_monitor : can change baudrate (control table addr 4)      Get-up motion changed.      read_write tutorial : left arm P gain value changed. (1 -&amp;gt; 8)      Ver 1.2.0 - 2011.06.01  New Additions          BulkRead instruction added.      Support for FSR sensor.        Modifications          Actuator Model name changed (RX-28M -&amp;gt; MX-28)      MX-28 firmware updated.      dxl_monitor : can change ID (control table addr 3)      Get-up motion changed.      Sensor calibration routine changed. (use standard deviation)      demo &amp;amp; walk_tuner share the config.ini file. (/darwin/Data/config.ini)      action_editor : command line bug fixed. (can’t input space or number)linux terminal backspace bug fixed.      walk_tuner : linux terminal backspace bug fixed.      read_write : at the start, torque off the right arm.      firmware installer : seperate firmware of the controller and actuator      Ver 1.1.0 - 2011.04.08  New Additions          firmware_installer : CM-730 &amp;amp; RX-28M firmware installer        Modifications          CM-730 firmware updated. (ver 0x11)      RX-28M firmware updated (ver 0x1B)      Action class : type casting bug fixed.      dxl_monitor : CM-730 control table dump bug fixed.      action_editor : command line first char backspace bug fixed. / save command bug fixed.      walk_tuner : command line first char backspace bug fixed.      some minor bug fixed.      Ver 1.0.1 - 2011.03.28  Modifications          LinuxCM730 class : move semaphore initial code to constructor      action_script : stand-up motion page number changed from 16 to 1      demo : at the start of soccer mode, reset the gyro sensor calibration      Some walking parameters changed.      action_editor : page 255 access problem fixed.      Walking class : Y move amplitude bug fixed.      Ver 1.0.0 - 2011.02.01  First ReleaseCM-730 Firmware Release NoteCM-730 Firmware source code download : SourceForge CM730 FirmwareVer 19 (0x13) - 2011.08.26  New Additions          Reset Instruction added.        Modifications          Baudrate bug fixed.      Increase TX/RX LED turn on time.      Mic. Control table address changed. (67 -&amp;gt; 53)      Battery alarm bug fixed.      Read / Bulk Read Instruction process routine optimized.      Ver 18 (0x12) - 2011.04.26  New Additions          BulkRead instruction added.        Modifications          LED bug fixed.      Ver 17 (0x11) - 2011.04.08  New Additions          Low battery alarm added.        Modifications          USB recognition method changed (interrupt -&amp;gt; polling)      Ver 16 (0x10) - 2011.02.28  First ReleaseMX-28 Firmware Release NoteDynamixel firmware is NOT an open source software.Ver 30 (0x1E) - 2012.01.05  New Additions          The new hardware was applied.      added self-calibration algorithms.      added calibration data protection algorithms.        Modifications          CPU main clock was updated to 72MHz.      fixed EEPROM bug.      Ver 29 (0x1D) - 2011.05.18  Modifications          Wheel mode bug fixed.      Ver 28 (0x1C) - 2011.05.02  Modifications          PID Resolution 4 times increase.      P gain default value changed. (8 -&amp;gt; 32)      Ver 27 (0x1B) - 2011.04.11  New Additions          PID Control        Modifications          Resolution changed from 1024 to 4096.      Ver 26 (0x1A) - 2011.02.28  First ReleaseFSR Firmware Release NoteFSR firmware is NOT an open source software.Ver 17 (0x11) - 2012.03.08  First ReleaseLinksDownload DARWIN-OP Logo ImagesSites  ROBOTIS(http://www.robotis.com)  SourceForge(http://www.sourceforge.net/projects/darwinop)  Collaborating Partners          Robotics and Mechanics Laboratory, RoMeLa(http://www.romela.org/)      University of Pennsylvania: GRASP Laboratories(http://www.grasp.upenn.edu/)      Webots simulator for DARWIN-OP by Cyberbotics(http://www.cyberbotics.com/overview)      Recommended Tools  PC          Remote Desktop: Real VNC(http://www.realvnc.com/)      SSH Slient: PuTTY(http://www.putty.org/), ZOC(http://www.emtec.com/zoc)        MAC          Remote Desktop: Chicken of the VNC(http://www.macupdate.com/app/mac/9517/chicken-of-the-vnc)      SSH client: RBrowser(http://www.rbrowser.com/)        iOS          There are many remote desktop and SSh client apps for iOS devices. The listed ones below are free of charge.      Remote Desktop: Mocha VNC Lite(http://itunes.apple.com/us/app/mocha-vnc-lite/id284984448?mt=8)      SSH client: SSH Mobile Free(http://itunes.apple.com/us/app/ssh-mobile-free/id481718124?mt=8)        Android          There are several free of charge apps for the Android platform      Remote Desktop: http://slodive.com/freebies/android-remote-desktop-apps/      SSH client: http://www.androidzoom.com/android_applications/ssh+client+free        Blackberry          SSH client: BBSSH(http://www.bbssh.org/)      Text Editor Tutorials  VI          A convenient tool for screen-based editing. Extremely useful to write code. VI comes installed with DARWIN-OP, as well as, incorporated onto the restore USB thumbdrive.      Tutorials: http://www.gentoo.org/doc/en/vi-guide.xml        Emacs          VI may seem very complicated to a lot of users. Emacs is an alternative to VI while being extremely useful as well for writing code. Emacs does not come pre-installed with DARWIN-OP but it can easily be installed and its memory footprint is negligible.      Installation      Ensure DARWIN-OP’c PC has internet access. On a command line type      sudo apt-get install emacs      Tutorials : http://www.gnu.org/s/emacs/tour/        gedit          GUI-based (either connected via remote desktop or directly via HDMI/DVI display).      Just like VI; gedit is incorporated with DARWIN-OP. gedit is useful for users that want a GUI-based text editor and is just as useful for writing code.      Tutorials: http://live.gnome.org/Gedit      VideosDARWIN-OP Webots simulatorCyberbotics WebotsIEEE-RAS Humanoids Conference 2010 (Individual Presentations and Workshop)  Presentation by Dr. Dennis Hong.  Presentation by ROBOTIS’ CEO.  Presentation by JK Han.  Presentation by ROBOTIS’ VP.  Presentation by Dr. Daniel Lee.  UPenn workshop.IEEE-RAS Humanoids Conference 2010 (Third Party clips)  Dr. Dennis Hong Interview while DARWIN-OP performs Interactive Mode at the conference.  At IEEE RAS Humanoids DARWIN-OP:InnoRobo 2011 Lyon, France  Recorded by a visitorRoboCup 2011 (Istanbul, Turkey)  Team DARwin defeats the defending world champion (semifinal).  Team DARwin becomes world champion (final).Popular Sciencehttp://www.popsci.com/technology/article/2011-07/video-darwin-op-wants-tecate-not-bud-lightOther Third Party Clips  From Virginia Tech’s RoMeLa  Chasing and Kicking the ball  From a fan  DARWIN-OP in Japan  An independent opinion  Back on it feet  DAREIN-OP’s software  DARWIN-OP with gripper demo",
        "url": " http://localhost:4000/docs/en/platform/op/references/"
      } ,
  
      "docs-en-dxl-rx-rx-10":  {
        "title": "RX-10",
      "content"	 : "RX-10Warning RX-10 has been discontinued.Specifications            Item      Specifications                  Baud Rate      7343 bps ~ 1 Mbps              Resolution      0.29°              Running Degree      0° ~ 300°Endless Turn              Weight      64.5g              Dimensions (W x H x D)      35.6mm x 50.6mm x 35.5mm              Gear Ratio      193 : 1              Stall Torque      1.3 N*m (at 12V, 0.8A)              No Load Speed      54rpm (at 12V)              Operating Temperature      -5°C ~ +80°C              Input Voltage      9 ~ 12V (Recommended : 11.1V)              Standby Current      50mA              Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multi Drop Bus(Daisy Chain Type Connector)              ID      0 ~ 253              Feedback      Position, Temperature, Load, Input Voltage, etc              Material      Full Metal Gear, Engineering Plastic Body      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 1.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(24) is ‘0’ and Dynamixel is in idle state.SizeThe Size of data is 1 or 2 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. 2 bytes data will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      10              2      1      Firmware Version      Firmware Version      R      -              3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      Counter-Clockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      190              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On/Off      RW      0              25      1      LED      Status LED On/Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      1              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      1              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW      -              32      2      Moving Speed      Moving Speed      RW      -              34      2      Torque Limit      Torque Limit(Goal Torque)      RW      ADD 14&amp;amp;15              36      2      Present Position      Present Position      R      -              38      2      Present Speed      Present Speed      R      -              40      2      Present Load      Present Load      R      -              42      1      Present Voltage      Present Voltage      R      -              43      1      Present Temperature      Present Temperature      R      -              44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number (0)This address stores model number of the DYNAMIXEL.Firmware Version (2)This address stores firmware version of the DYNAMIXEL.ID (3)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate (4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate(bps)      Margin of Error                  1      1M      0.000%              3      500,000      0.000%              4      400,000      0.000%              7      250,000      0.000%              9      200,000      0.000%              16      115200      -2.124%              34(Default)      57600      0.794%              103      19200      -0.160%              207      9600      -0.160%      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time (5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      CW/CCW Angle Limit(6, 8)The angle limit allows the motion to be restrained.The range and the unit of the value is the same as Goal Position(Address 30, 31).  CW Angle Limit: the minimum value of Goal Position(Address 30, 31)  CCW Angle Limit: the maximum value of Goal Position(Address 30, 31)The following two modes can be set pursuant to the value of CW and CCW.            Operation Type      CW / CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheel-type operation robots since motors of the robots spin infinitely. The joint mode can be used to multi-joints robot since the robots can be controlled with specific angles.The Highest Limit Temperature            Unit      Value Range                  About 1°      0 ~ 100      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage LimitIt is the operation range of voltage.            Unit      Value Range      Description                  About 0.1V      50 ~ 250      5.0 ~ 25.0V      For example, if the value is 80, the voltage is 8V.If Present Voltage(42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.Max TorqueIt is the torque value of maximum output. 0 to 1,023 (0x3FF) can be used, and the unit is about 0.1%.For example, Data 1,023 (0x3FF) means that Dynamixel will use 100% of the maximum torque it can produce while Data 512 (0x200) means that Dynamixel will use 50% of the maximum torque. When the power is turned on, Torque Limit (Address 34 and 35) uses the value as the initial value.Status Return LevelThis value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Alarm LED / Alarm ShutdownDynamixel can protect itself by detecting errors occur during the operation.The errors can be set are as the table below.            Bit      Item      Description                  Bit 7      0      -              Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’. That is, if 0x05 (binary 00000101) is set, both Input Voltage Error and Overheating Error can be detected.If errors occur, in case of Alarm LED, the LED blinks; in case of Alarm Shutdown, the motor output becomes 0 % by resetting the value of Torque Limit(34) to 0.Torque Enable            Value      Description                  0      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      LEDTurn on or turn off the LED on Dynamixel.            Bit      Description                  0(Default)      Turn OFF the LED              1      Turn ON the LED      Compliance MarginIt exists in each direction of CW/CCW and means the error between goal position and present position.The range of the value is 0~255, and the unit is the same as Goal Position.(Address 30,31)The greater the value, the more difference occurs.Compliance SlopeIt exists in each direction of CW/CCW and sets the level of Torque near the goal position.Compliance Slope is set in 7 steps, the higher the value, the more flexibility is obtained.Data representative value is actually used value.  That is, even if the value is set to 25, 16 is used internally as the representative value.            Step      Data Value      Data Representative Value                  1      0(0x00) ~ 3(0x03)      2(0x02)              2      4(0x04) ~ 7(0x07)      4(0x04)              3      8(0x08)~15(0x0F)      8(0x08)              4      16(0x10)~31(0x1F)      16(0x10)              5      32(0x20)~63(0x3F)      32(0x20)              6      64(0x40)~127(0x7F)      64(0x40)              7      128(0x80)~254(0xFE)      128(0x80)      Compliance is to set the control flexibility of the motor.The following diagram shows the relationship between output torque and position of the motor.Goal PositionIt is a position value of destination.0 ~ 1,023 (0x3FF) is available.  The unit is 0.29°.If Goal Position is out of the range, Angle Limit Error Bit (Bit 1) of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED/Shutdown.The picture above is the front view of DynamixelNote If it is set to Wheel Mode, Goal Position value is not used.Moving SpeedIt is a moving speed to Goal Position.The range and the unit of the value may vary depending on the operation mode.      Join Mode0 ~ 1,023(0x3FF) can be used, and the unit is about 0.111rpm.If it is set to 0, it means the maximum rpm of the motor is used without controlling the speed.If it is 1023, it is about 114rpm.For example, if it is set to 300, it is about 33.3 rpm.    Note Please check the maximum rpm of the Dynamixel. The motor cannot exceed the maximum rpm with the higher Moving Speed value.        Wheel Mode0 ~ 2,047(0x7FF) can be used, the unit is about 0.1%.If a value in the range of 0 ~ 1,023 is used, it is stopped by setting to 0 while rotating to CCW direction.If a value in the range of 1,024 ~ 2,047 is used, it is stopped by setting to 1,024 while rotating to CW direction.That is, the 10th bit becomes the direction bit to control the direction.In Wheel Mode, only the output control is possible, not speed.For example, if it is set to 512, it means the output is controlled by 50% of the maximum output.  Torque LimitIt is the value of the maximum torque limit.0 ~ 1,023(0x3FF) is available, and the unit is about 0.1%.For example, if the value is 512, it is about 50%; that means only 50% of the maximum torque will be used.If the power is turned on, the value of Max Torque (Address 14, 15) is used as the initial value.Note If the function of Alarm Shutdown is triggered, the motor loses its torque because the value becomes 0. Once error conditions are resolved and this value is changed to the value other than 0, the motor can be operated again.Present PositionIt is the current position value of Dynamixel.The range of the value is 0~1023 (0x3FF), and the unit is 0.29 degree.The picture above is the front view of Dynamixel.Caution If it is set to Wheel Mode, the value cannot be used to measure the moving distance and the rotation frequency.Present SpeedIt is the present moving speed.0~2,047 (0x7FF) can be used.If a value is in the rage of 0~1,023, it means that the motor rotates to the CCW direction.If a value is in the rage of 1,024~2,047, it means that the motor rotates to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 0 and 1,024 are equal.The unit of this value varies depending on operation mode.      Joint Mode    The unit is about 0.111rpm.For example, if it is set to 300, it means that the motor is moving to the CCW direction at a rate of about 33.3rpm.        Wheel Mode    The unit is about 0.1%.For example, if it is set to 512, it means that the torque is controlled by 50% of the maximum torque to the CCW direction.  Present LoadIt means currently applied load.The range of the value is 0~2047, and the unit is about 0.1%.If the value is 0~1,023, it means the load works to the CCW direction.If the value is 1,024~2,047, it means the load works to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 1,024 is equal to 0.For example, the value is 512, it means the load is detected in the direction of CCW about 50% of the maximum torque.            Bit      15 ~ 11      10      9 ~ 0                  Value      0      Load Direction      Data (Load Ratio)      Note CCW Load : Load Direction = 0, CW Load : Load Direction = 1Note Present load is an inferred value based on the internal output value; not a measured value using torque sensor, etc. Therefore, it may be inaccurate for measuring weight or torque. It is recommended to use it for predicting the direction and size of the force being applied to the joint.Present VoltageIt is the size of the present voltage supplied.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)If Present Voltage(42) value is out of range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18.Present TemperatureIt is the internal temperature of Dynamixel in Celsius.Data value is identical to the actual temperature in Celsius. For example, if the data value is 85 (0x55), the current internal temperature is 85°C.Registered Instruction            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Moving            Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock            Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.PunchMinimum current to drive motor. This value ranges from 0x20 to 0x3FF.How to Assemble  FR07-B1 Option Frame  FR07-H1 Option Frame  FR07-S1 Option Frame  HN07-N1 Horn  HN07-I1 Horn  HN07-T1 Horn  CombinationsMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators, the main controller needs to convert its UART signals to the half duplex type. The recommended circuit diagram for this is shown below.TTL CommunicationRS-485 CommunicationThe power of Dynamixel is supplied via Pin1(-), Pin2(+).(The above circuit is built into Dynamixel-only controller.)In the above circuit diagram, the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as follows:In case of DIRECTION485 Level = High: The signal of TxD is output to D+ and D-.In case of DIRECTION485 Level = Low: The signal of D+ and D- is output to RxD.Pin AssignmentThe connector pin assignments are as the following. The two connectors on the Dynamixel are connected pin to pin, thus the Dynamixel can be operated with only one connector attached.",
        "url": " http://localhost:4000/docs/en/dxl/rx/rx-10/"
      } ,
  
      "docs-en-dxl-rx-rx-24f":  {
        "title": "RX-24F",
      "content"	 : "RX-24FWarning RX-24F has been discontinued.Specifications            Item      Specifications                  Baud Rate      7343 bps ~ 1 Mbps              Resolution      0.29°              Running Degree      0° ~ 300°Endless Turn              Weight      67g              Dimensions (W x H x D)      35.6mm x 50.6mm x 35.5mm              Gear Ratio      193 : 1              Stall Torque      2.6 N*m (at 12V, 2.4A)              No Load Speed      126rpm (at 12V)              Operating Temperature      -5°C ~ +80°C              Input Voltage      9 ~ 12V (Recommended : 11.1V)              Standby Current      50mA              Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multi Drop Bus(Daisy Chain Type Connector)              ID      0 ~ 253              Feedback      Position, Temperature, Load, Input Voltage, etc              Material      Full Metal Gear, Engineering Plastic Body      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 1.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(24) is ‘0’ and Dynamixel is in idle state.SizeThe Size of data is 1 or 2 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. 2 bytes data will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      24              2      1      Firmware Version      Firmware Version      R      -              3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      Counter-Clockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      190              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On/Off      RW      0              25      1      LED      Status LED On/Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      1              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      1              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW      -              32      2      Moving Speed      Moving Speed      RW      -              34      2      Torque Limit      Torque Limit(Goal Torque)      RW      ADD 14&amp;amp;15              36      2      Present Position      Present Position      R      -              38      2      Present Speed      Present Speed      R      -              40      2      Present Load      Present Load      R      -              42      1      Present Voltage      Present Voltage      R      -              43      1      Present Temperature      Present Temperature      R      -              44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number (0)This address stores model number of the DYNAMIXEL.Firmware Version (2)This address stores firmware version of the DYNAMIXEL.ID (3)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate (4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate(bps)      Margin of Error                  1      1M      0.000%              3      500,000      0.000%              4      400,000      0.000%              7      250,000      0.000%              9      200,000      0.000%              16      115200      -2.124%              34(Default)      57600      0.794%              103      19200      -0.160%              207      9600      -0.160%      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time (5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      CW/CCW Angle Limit(6, 8)The angle limit allows the motion to be restrained.The range and the unit of the value is the same as Goal Position(Address 30, 31).  CW Angle Limit: the minimum value of Goal Position(Address 30, 31)  CCW Angle Limit: the maximum value of Goal Position(Address 30, 31)The following two modes can be set pursuant to the value of CW and CCW.            Operation Type      CW / CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheel-type operation robots since motors of the robots spin infinitely. The joint mode can be used to multi-joints robot since the robots can be controlled with specific angles.The Highest Limit Temperature            Unit      Value Range                  About 1°      0 ~ 100      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage LimitIt is the operation range of voltage.            Unit      Value Range      Description                  About 0.1V      50 ~ 250      5.0 ~ 25.0V      For example, if the value is 80, the voltage is 8V.If Present Voltage(42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.Max TorqueIt is the torque value of maximum output. 0 to 1,023 (0x3FF) can be used, and the unit is about 0.1%.For example, Data 1,023 (0x3FF) means that Dynamixel will use 100% of the maximum torque it can produce while Data 512 (0x200) means that Dynamixel will use 50% of the maximum torque. When the power is turned on, Torque Limit (Address 34 and 35) uses the value as the initial value.Status Return LevelThis value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Alarm LED / Alarm ShutdownDynamixel can protect itself by detecting errors occur during the operation.The errors can be set are as the table below.            Bit      Item      Description                  Bit 7      0      -              Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’. That is, if 0x05 (binary 00000101) is set, both Input Voltage Error and Overheating Error can be detected.If errors occur, in case of Alarm LED, the LED blinks; in case of Alarm Shutdown, the motor output becomes 0 % by resetting the value of Torque Limit(34) to 0.Torque Enable            Value      Description                  0      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      LEDTurn on or turn off the LED on Dynamixel.            Bit      Description                  0(Default)      Turn OFF the LED              1      Turn ON the LED      Compliance MarginIt exists in each direction of CW/CCW and means the error between goal position and present position.The range of the value is 0~255, and the unit is the same as Goal Position.(Address 30,31)The greater the value, the more difference occurs.Compliance SlopeIt exists in each direction of CW/CCW and sets the level of Torque near the goal position.Compliance Slope is set in 7 steps, the higher the value, the more flexibility is obtained.Data representative value is actually used value.  That is, even if the value is set to 25, 16 is used internally as the representative value.            Step      Data Value      Data Representative Value                  1      0(0x00) ~ 3(0x03)      2(0x02)              2      4(0x04) ~ 7(0x07)      4(0x04)              3      8(0x08)~15(0x0F)      8(0x08)              4      16(0x10)~31(0x1F)      16(0x10)              5      32(0x20)~63(0x3F)      32(0x20)              6      64(0x40)~127(0x7F)      64(0x40)              7      128(0x80)~254(0xFE)      128(0x80)      Compliance is to set the control flexibility of the motor.The following diagram shows the relationship between output torque and position of the motor.Goal PositionIt is a position value of destination.0 ~ 1,023 (0x3FF) is available.  The unit is 0.29°.If Goal Position is out of the range, Angle Limit Error Bit (Bit 1) of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED/Shutdown.The picture above is the front view of DynamixelNote If it is set to Wheel Mode, Goal Position value is not used.Moving SpeedIt is a moving speed to Goal Position.The range and the unit of the value may vary depending on the operation mode.      Join Mode0 ~ 1,023(0x3FF) can be used, and the unit is about 0.111rpm.If it is set to 0, it means the maximum rpm of the motor is used without controlling the speed.If it is 1023, it is about 114rpm.For example, if it is set to 300, it is about 33.3 rpm.    Note Please check the maximum rpm of the Dynamixel. The motor cannot exceed the maximum rpm with the higher Moving Speed value.        Wheel Mode0 ~ 2,047(0x7FF) can be used, the unit is about 0.1%.If a value in the range of 0 ~ 1,023 is used, it is stopped by setting to 0 while rotating to CCW direction.If a value in the range of 1,024 ~ 2,047 is used, it is stopped by setting to 1,024 while rotating to CW direction.That is, the 10th bit becomes the direction bit to control the direction.In Wheel Mode, only the output control is possible, not speed.For example, if it is set to 512, it means the output is controlled by 50% of the maximum output.  Torque LimitIt is the value of the maximum torque limit.0 ~ 1,023(0x3FF) is available, and the unit is about 0.1%.For example, if the value is 512, it is about 50%; that means only 50% of the maximum torque will be used.If the power is turned on, the value of Max Torque (Address 14, 15) is used as the initial value.Note If the function of Alarm Shutdown is triggered, the motor loses its torque because the value becomes 0. Once error conditions are resolved and this value is changed to the value other than 0, the motor can be operated again.Present PositionIt is the current position value of Dynamixel.The range of the value is 0~1023 (0x3FF), and the unit is 0.29 degree.The picture above is the front view of Dynamixel.Caution If it is set to Wheel Mode, the value cannot be used to measure the moving distance and the rotation frequency.Present SpeedIt is the present moving speed.0~2,047 (0x7FF) can be used.If a value is in the rage of 0~1,023, it means that the motor rotates to the CCW direction.If a value is in the rage of 1,024~2,047, it means that the motor rotates to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 0 and 1,024 are equal.The unit of this value varies depending on operation mode.      Joint Mode    The unit is about 0.111rpm.For example, if it is set to 300, it means that the motor is moving to the CCW direction at a rate of about 33.3rpm.        Wheel Mode    The unit is about 0.1%.For example, if it is set to 512, it means that the torque is controlled by 50% of the maximum torque to the CCW direction.  Present LoadIt means currently applied load.The range of the value is 0~2047, and the unit is about 0.1%.If the value is 0~1,023, it means the load works to the CCW direction.If the value is 1,024~2,047, it means the load works to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 1,024 is equal to 0.For example, the value is 512, it means the load is detected in the direction of CCW about 50% of the maximum torque.            Bit      15 ~ 11      10      9 ~ 0                  Value      0      Load Direction      Data (Load Ratio)      Note CCW Load : Load Direction = 0, CW Load : Load Direction = 1Note Present load is an inferred value based on the internal output value; not a measured value using torque sensor, etc. Therefore, it may be inaccurate for measuring weight or torque. It is recommended to use it for predicting the direction and size of the force being applied to the joint.Present VoltageIt is the size of the present voltage supplied.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)If Present Voltage(42) value is out of range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18.Present TemperatureIt is the internal temperature of Dynamixel in Celsius.Data value is identical to the actual temperature in Celsius. For example, if the data value is 85 (0x55), the current internal temperature is 85°C.Registered Instruction            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Moving            Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock            Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.PunchMinimum current to drive motor. This value ranges from 0x20 to 0x3FF.How to Assemble  FR07-B1 Option Frame  FR07-H1 Option Frame  FR07-S1 Option Frame  FR07-B101 Option Frame  FR07-F101, FR07-X101 Option Frame  FR07-H101 Option Frame  FR07-S101 Option Frame  HN07-N1 Horn  HN07-I1 Horn  HN07-T1 Horn  HN07-N101 Horn  HN07-I101 Horn  HN07-T101 Horn  CombinationsMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators, the main controller needs to convert its UART signals to the half duplex type. The recommended circuit diagram for this is shown below.TTL CommunicationRS-485 CommunicationThe power of Dynamixel is supplied via Pin1(-), Pin2(+).(The above circuit is built into Dynamixel-only controller.)In the above circuit diagram, the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as follows:In case of DIRECTION485 Level = High: The signal of TxD is output to D+ and D-.In case of DIRECTION485 Level = Low: The signal of D+ and D- is output to RxD.Pin AssignmentThe connector pin assignments are as the following. The two connectors on the Dynamixel are connected pin to pin, thus the Dynamixel can be operated with only one connector attached.",
        "url": " http://localhost:4000/docs/en/dxl/rx/rx-24f/"
      } ,
  
      "docs-en-dxl-rx-rx-28":  {
        "title": "RX-28",
      "content"	 : "RX-28Warning RX-28 has been discontinued.Specifications            Item      Specifications                  Baud Rate      7343 bps ~ 1 Mbps              Resolution      0.29°              Running Degree      0° ~ 300°Endless Turn              Weight      72g              Dimensions (W x H x D)      35.6mm x 50.6mm x 35.5mm              Gear Ratio      193 : 1              Stall Torque      3.7 N*m (at 18.5V, 1.9A)              No Load Speed      85rpm (at 18.5V)              Operating Temperature      -5°C ~ +80°C              Input Voltage      12 ~ 18.5V (Recommended : 14.8V)              Standby Current      50mA              Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multi Drop Bus(Daisy Chain Type Connector)              ID      0 ~ 253              Feedback      Position, Temperature, Load, Input Voltage, etc              Material      Full Metal Gear, Engineering Plastic Body      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 1.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(24) is ‘0’ and Dynamixel is in idle state.SizeThe Size of data is 1 or 2 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. 2 bytes data will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      28              2      1      Firmware Version      Firmware Version      R      -              3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      Counter-Clockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      190              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On/Off      RW      0              25      1      LED      Status LED On/Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      1              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      1              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW      -              32      2      Moving Speed      Moving Speed      RW      -              34      2      Torque Limit      Torque Limit(Goal Torque)      RW      ADD 14&amp;amp;15              36      2      Present Position      Present Position      R      -              38      2      Present Speed      Present Speed      R      -              40      2      Present Load      Present Load      R      -              42      1      Present Voltage      Present Voltage      R      -              43      1      Present Temperature      Present Temperature      R      -              44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number (0)This address stores model number of the DYNAMIXEL.Firmware Version (2)This address stores firmware version of the DYNAMIXEL.ID (3)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate (4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate(bps)      Margin of Error                  1      1M      0.000%              3      500,000      0.000%              4      400,000      0.000%              7      250,000      0.000%              9      200,000      0.000%              16      115200      -2.124%              34(Default)      57600      0.794%              103      19200      -0.160%              207      9600      -0.160%      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time (5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      CW/CCW Angle Limit(6, 8)The angle limit allows the motion to be restrained.The range and the unit of the value is the same as Goal Position(Address 30, 31).  CW Angle Limit: the minimum value of Goal Position(Address 30, 31)  CCW Angle Limit: the maximum value of Goal Position(Address 30, 31)The following two modes can be set pursuant to the value of CW and CCW.            Operation Type      CW / CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheel-type operation robots since motors of the robots spin infinitely. The joint mode can be used to multi-joints robot since the robots can be controlled with specific angles.The Highest Limit Temperature            Unit      Value Range                  About 1°      0 ~ 100      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage LimitIt is the operation range of voltage.            Unit      Value Range      Description                  About 0.1V      50 ~ 250      5.0 ~ 25.0V      For example, if the value is 80, the voltage is 8V.If Present Voltage(42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.Max TorqueIt is the torque value of maximum output. 0 to 1,023 (0x3FF) can be used, and the unit is about 0.1%.For example, Data 1,023 (0x3FF) means that Dynamixel will use 100% of the maximum torque it can produce while Data 512 (0x200) means that Dynamixel will use 50% of the maximum torque. When the power is turned on, Torque Limit (Address 34 and 35) uses the value as the initial value.Status Return LevelThis value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Alarm LED / Alarm ShutdownDynamixel can protect itself by detecting errors occur during the operation.The errors can be set are as the table below.            Bit      Item      Description                  Bit 7      0      -              Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’. That is, if 0x05 (binary 00000101) is set, both Input Voltage Error and Overheating Error can be detected.If errors occur, in case of Alarm LED, the LED blinks; in case of Alarm Shutdown, the motor output becomes 0 % by resetting the value of Torque Limit(34) to 0.Torque Enable            Value      Description                  0      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      LEDTurn on or turn off the LED on Dynamixel.            Bit      Description                  0(Default)      Turn OFF the LED              1      Turn ON the LED      Compliance MarginIt exists in each direction of CW/CCW and means the error between goal position and present position.The range of the value is 0~255, and the unit is the same as Goal Position.(Address 30,31)The greater the value, the more difference occurs.Compliance SlopeIt exists in each direction of CW/CCW and sets the level of Torque near the goal position.Compliance Slope is set in 7 steps, the higher the value, the more flexibility is obtained.Data representative value is actually used value.  That is, even if the value is set to 25, 16 is used internally as the representative value.            Step      Data Value      Data Representative Value                  1      0(0x00) ~ 3(0x03)      2(0x02)              2      4(0x04) ~ 7(0x07)      4(0x04)              3      8(0x08)~15(0x0F)      8(0x08)              4      16(0x10)~31(0x1F)      16(0x10)              5      32(0x20)~63(0x3F)      32(0x20)              6      64(0x40)~127(0x7F)      64(0x40)              7      128(0x80)~254(0xFE)      128(0x80)      Compliance is to set the control flexibility of the motor.The following diagram shows the relationship between output torque and position of the motor.Goal PositionIt is a position value of destination.0 ~ 1,023 (0x3FF) is available.  The unit is 0.29°.If Goal Position is out of the range, Angle Limit Error Bit (Bit 1) of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED/Shutdown.The picture above is the front view of DynamixelNote If it is set to Wheel Mode, Goal Position value is not used.Moving SpeedIt is a moving speed to Goal Position.The range and the unit of the value may vary depending on the operation mode.      Join Mode0 ~ 1,023(0x3FF) can be used, and the unit is about 0.111rpm.If it is set to 0, it means the maximum rpm of the motor is used without controlling the speed.If it is 1023, it is about 114rpm.For example, if it is set to 300, it is about 33.3 rpm.    Note Please check the maximum rpm of the Dynamixel. The motor cannot exceed the maximum rpm with the higher Moving Speed value.        Wheel Mode0 ~ 2,047(0x7FF) can be used, the unit is about 0.1%.If a value in the range of 0 ~ 1,023 is used, it is stopped by setting to 0 while rotating to CCW direction.If a value in the range of 1,024 ~ 2,047 is used, it is stopped by setting to 1,024 while rotating to CW direction.That is, the 10th bit becomes the direction bit to control the direction.In Wheel Mode, only the output control is possible, not speed.For example, if it is set to 512, it means the output is controlled by 50% of the maximum output.  Torque LimitIt is the value of the maximum torque limit.0 ~ 1,023(0x3FF) is available, and the unit is about 0.1%.For example, if the value is 512, it is about 50%; that means only 50% of the maximum torque will be used.If the power is turned on, the value of Max Torque (Address 14, 15) is used as the initial value.Note If the function of Alarm Shutdown is triggered, the motor loses its torque because the value becomes 0. Once error conditions are resolved and this value is changed to the value other than 0, the motor can be operated again.Present PositionIt is the current position value of Dynamixel.The range of the value is 0~1023 (0x3FF), and the unit is 0.29 degree.The picture above is the front view of Dynamixel.Caution If it is set to Wheel Mode, the value cannot be used to measure the moving distance and the rotation frequency.Present SpeedIt is the present moving speed.0~2,047 (0x7FF) can be used.If a value is in the rage of 0~1,023, it means that the motor rotates to the CCW direction.If a value is in the rage of 1,024~2,047, it means that the motor rotates to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 0 and 1,024 are equal.The unit of this value varies depending on operation mode.      Joint Mode    The unit is about 0.111rpm.For example, if it is set to 300, it means that the motor is moving to the CCW direction at a rate of about 33.3rpm.        Wheel Mode    The unit is about 0.1%.For example, if it is set to 512, it means that the torque is controlled by 50% of the maximum torque to the CCW direction.  Present LoadIt means currently applied load.The range of the value is 0~2047, and the unit is about 0.1%.If the value is 0~1,023, it means the load works to the CCW direction.If the value is 1,024~2,047, it means the load works to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 1,024 is equal to 0.For example, the value is 512, it means the load is detected in the direction of CCW about 50% of the maximum torque.            Bit      15 ~ 11      10      9 ~ 0                  Value      0      Load Direction      Data (Load Ratio)      Note CCW Load : Load Direction = 0, CW Load : Load Direction = 1Note Present load is an inferred value based on the internal output value; not a measured value using torque sensor, etc. Therefore, it may be inaccurate for measuring weight or torque. It is recommended to use it for predicting the direction and size of the force being applied to the joint.Present VoltageIt is the size of the present voltage supplied.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)If Present Voltage(42) value is out of range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18.Present TemperatureIt is the internal temperature of Dynamixel in Celsius.Data value is identical to the actual temperature in Celsius. For example, if the data value is 85 (0x55), the current internal temperature is 85°C.Registered Instruction            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Moving            Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock            Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.PunchMinimum current to drive motor. This value ranges from 0x20 to 0x3FF.How to Assemble  FR07-B1 Option Frame  FR07-H1 Option Frame  FR07-S1 Option Frame  FR07-B101 Option Frame  FR07-F101, FR07-X101 Option Frame  FR07-H101 Option Frame  FR07-S101 Option Frame  HN07-N1 Horn  HN07-I1 Horn  HN07-T1 Horn  HN07-N101 Horn  HN07-I101 Horn  HN07-T101 Horn  CombinationsMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators, the main controller needs to convert its UART signals to the half duplex type. The recommended circuit diagram for this is shown below.TTL CommunicationRS-485 CommunicationThe power of Dynamixel is supplied via Pin1(-), Pin2(+).(The above circuit is built into Dynamixel-only controller.)In the above circuit diagram, the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as follows:In case of DIRECTION485 Level = High: The signal of TxD is output to D+ and D-.In case of DIRECTION485 Level = Low: The signal of D+ and D- is output to RxD.Pin AssignmentThe connector pin assignments are as the following. The two connectors on the Dynamixel are connected pin to pin, thus the Dynamixel can be operated with only one connector attached.",
        "url": " http://localhost:4000/docs/en/dxl/rx/rx-28/"
      } ,
  
      "docs-en-dxl-rx-rx-64":  {
        "title": "RX-64",
      "content"	 : "RX-64Warning RX-64 has been discontinued.Specifications            Item      Specifications                  Baud Rate      7343 bps ~ 1 Mbps              Resolution      0.29°              Running Degree      0° ~ 300°Endless Turn              Weight      125g              Dimensions (W x H x D)      40.2mm x 61.1mm x 41mm              Gear Ratio      200 : 1              Stall Torque      5.3 N*m (at 18.5V, 2.6A)              No Load Speed      64rpm (at 18.5V)              Operating Temperature      -5°C ~ +80°C              Input Voltage      12 ~ 18.5V (Recommended : 14.8V)              Standby Current      50mA              Command Signal      Digital Packet              Protocol Type      Half Duplex Asynchronous Serial Communication(8bit, 1stop, No Parity)              Physical Connection      RS485 Multi Drop Bus(Daisy Chain Type Connector)              ID      0 ~ 253              Feedback      Position, Temperature, Load, Input Voltage, etc              Material      Full Metal Gear, Engineering Plastic Body      Control TableThe Control Table is a structure of data implemented in the DYNAMIXEL. Users can read a specific Data to get status of the DYNAMIXEL with Read Instruction Packets, and modify Data as well to control DYNAMIXEL with WRITE Instruction Packets.Control Table, Data, AddressThe Control Table is a structure that consists of multiple Data fields to store status of the DYNAMIXEL or to control the DYNAMIXEL. Users can check current status of the DYNAMIXEL by reading a specific Data from the Control Table with Read Instruction Packets. WRITE Instruction Packets enable users to control the DYNAMIXEL by changing specific Data in the Control Table. The Address is a unique value when accessing a specific Data in the Control Table with Instruction Packets. In order to read or write data, users must designate a specific Address in the Instruction Packet. Please refer to Protocol 1.0 for more details about Instruction Packets.Note Two’s complement is applied for the negative value. For more information, please refer to Two’s complement from Wikipedia.Area (EEPROM, RAM)The Control Table is divided into 2 Areas. Data in the RAM Area is reset to initial values when the DYNAMIXEL is turned on (Volatile). On the other hand, modified data in the EEPROM Area keeps their values even when the DYNAMIXEL is turned off (Non-Volatile). Data in the EEPROM Area can only be changed or modified when the value of Torque Enable(24) is ‘0’ and Dynamixel is in idle state.SizeThe Size of data is 1 or 2 bytes depend on their usage. Please check the size of data when updating the data with an Instruction Packet. 2 bytes data will be saved according to Little Endian.AccessThe Control Table has two different access properties. ‘RW’ property stands for read and write access permission while ‘R’ stands for read only access permission. Data with the read only property cannot be changed by the WRITE Instruction. Read only property(‘R’) is generally used for measuring and monitoring purpose, and read write property(‘RW’) is used for controlling DYNAMIXEL.Initial ValueEach data in the Control Table is restored to initial values when the DYNAMIXEL is turned on. Default values in the EEPROM area are initial values of the DYNAMIXEL (factory default settings). If any values in the EEPROM area are modified by a user, modified values will be restored as initial values when the DYNAMIXEL is turned on. Initial Values in the RAM area are restored when the DYNAMIXEL is turned on.Control Table of EEPROM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  0      2      Model Number      Model Number      R      64              2      1      Firmware Version      Firmware Version      R      -              3      1      ID      DYNAMIXEL ID      RW      1              4      1      Baud Rate      Communication Speed      RW      34              5      1      Return Delay Time      Response Delay Time      RW      250              6      2      CW Angle Limit      Clockwise Angle Limit      RW      0              8      2      CCW Angle Limit      Counter-Clockwise Angle Limit      RW      1023              11      1      Temperature Limit      Maximum Internal Temperature Limit      RW      80              12      1      Min Voltage Limit      Minimum Input Voltage Limit      RW      60              13      1      Max Voltage Limit      Maximum Input Voltage Limit      RW      190              14      2      Max Torque      Maximun Torque      RW      1023              16      1      Status Return Level      Select Types of Status Return      RW      2              17      1      Alarm LED      LED for Alarm      RW      36              18      1      Shutdown      Shutdown Error Information      RW      36      Control Table of RAM Area            Address      Size(Byte)      Data Name      Description      Access      Initial Value                  24      1      Torque Enable      Motor Torque On/Off      RW      0              25      1      LED      Status LED On/Off      RW      0              26      1      CW Compliance Margin      CW Compliance Margin      RW      1              27      1      CCW Compliance Margin      CCW Compliance Margin      RW      1              28      1      CW Compliance Slope      CW Compliance Slope      RW      32              29      1      CCW Compliance Slope      CCW Compliance Slope      RW      32              30      2      Goal Position      Target Position      RW      -              32      2      Moving Speed      Moving Speed      RW      -              34      2      Torque Limit      Torque Limit(Goal Torque)      RW      ADD 14&amp;amp;15              36      2      Present Position      Present Position      R      -              38      2      Present Speed      Present Speed      R      -              40      2      Present Load      Present Load      R      -              42      1      Present Voltage      Present Voltage      R      -              43      1      Present Temperature      Present Temperature      R      -              44      1      Registered      If Instruction is registered      R      0              46      1      Moving      Movement Status      R      0              47      1      Lock      Locking EEPROM      RW      0              48      2      Punch      Minimum Current Threshold      RW      32      Control Table DescriptionModel Number (0)This address stores model number of the DYNAMIXEL.Firmware Version (2)This address stores firmware version of the DYNAMIXEL.ID (3)The ID is a unique value in the network to identify each DYNAMIXEL with an Instruction Packet.0~252 (0xFC) values can be used as an ID, and 254(0xFE) is occupied as a broadcast ID. The Broadcast ID(254, 0xFE) can send an Instruction Packet to all connected DYNAMIXELs simultaneously.Note Please avoid using an identical ID for multiple DYNAMIXELs. You may face communication failure or may not be able to detect Dynamixels with an identical ID.Baud Rate (4)Baud Rate determines serial communication speed between a controller and DYNAMIXELs.            Value      Baud Rate(bps)      Margin of Error                  1      1M      0.000%              3      500,000      0.000%              4      400,000      0.000%              7      250,000      0.000%              9      200,000      0.000%              16      115200      -2.124%              34(Default)      57600      0.794%              103      19200      -0.160%              207      9600      -0.160%      Note Less than 3% of the baud rate error margin will not affect to UART communication.Return Delay Time (5)After the DYNAMIXEL receives an Instruction Packet, it delays transmitting the Status Packet for Return Delay Time (9). For instance, if the Return Delay Time(9) is set to ‘10’, the Status Packet will be returned after 20[μsec] when the Instruction Packet is received.            Unit      Value Range      Description                  2[μsec]      0 ~ 254      Default value ‘250’(500[μsec]), Maximum 508[μsec]      CW/CCW Angle Limit(6, 8)The angle limit allows the motion to be restrained.The range and the unit of the value is the same as Goal Position(Address 30, 31).  CW Angle Limit: the minimum value of Goal Position(Address 30, 31)  CCW Angle Limit: the maximum value of Goal Position(Address 30, 31)The following two modes can be set pursuant to the value of CW and CCW.            Operation Type      CW / CCW                  Wheel Mode      both are 0              Joint Mode      neither are 0      The wheel mode can be used to wheel-type operation robots since motors of the robots spin infinitely. The joint mode can be used to multi-joints robot since the robots can be controlled with specific angles.The Highest Limit Temperature            Unit      Value Range                  About 1°      0 ~ 100      Caution Do not set the temperature lower/higher than the default value. When the temperature alarm shutdown occurs, wait 20 minutes to cool the temperature before re-use. Keep using the product when the temperature is high can cause severe damage.Min/Max Voltage LimitIt is the operation range of voltage.            Unit      Value Range      Description                  About 0.1V      50 ~ 160      5.0 ~ 16.0V      For example, if the value is 80, the voltage is 8V.If Present Voltage(42) is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered as set in the addresses 17 and 18.Max TorqueIt is the torque value of maximum output. 0 to 1,023 (0x3FF) can be used, and the unit is about 0.1%.For example, Data 1,023 (0x3FF) means that Dynamixel will use 100% of the maximum torque it can produce while Data 512 (0x200) means that Dynamixel will use 50% of the maximum torque. When the power is turned on, Torque Limit (Address 34 and 35) uses the value as the initial value.Status Return LevelThis value decides how to return Status Packet when Dynamixel receives an Instruction Packet.            Value      Responding Instructions      Description                  0      PING Instruction      Status Packet will not be returned for all Instructions              1      PING InstructionREAD Instruction      Status Packet will be returned only for READ Instruction              2      All Instructions      Status Packet will be returned for all Instructions      Note If the ID of Instruction Packet is set to Broad Cast ID(0xFE), Status Packet will not be returned for READ and WRITE Instructions regardless of Status Return Level. For more details, please refer to the [Status Packet] section of Protocol.Alarm LED / Alarm ShutdownDynamixel can protect itself by detecting errors occur during the operation.The errors can be set are as the table below.            Bit      Item      Description                  Bit 7      0      -              Bit 6      Instruction Error      When undefined Instruction is transmitted or the Action command is delivered without the reg_write command              Bit 5      Overload Error      When the current load cannot be controlled with the set maximum torque              Bit 4      CheckSum Error      When the Checksum of the transmitted Instruction Packet is invalid              Bit 3      Range Error      When the command is given beyond the range of usage              Bit 2      OverHeating Error      When the internal temperature is out of the range of operating temperature set in the Control Table              Bit 1      Angle Limit Error      When Goal Position is written with the value that is not between CW Angle Limit and CCW Angle Limit              Bit 0      Input Voltage Error      When the applied voltage is out of the range of operating voltage set in the Control Table      It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’. That is, if 0x05 (binary 00000101) is set, both Input Voltage Error and Overheating Error can be detected.If errors occur, in case of Alarm LED, the LED blinks; in case of Alarm Shutdown, the motor output becomes 0 % by resetting the value of Torque Limit(34) to 0.Torque Enable            Value      Description                  0      Turn off the torque(Free run state)              1      Turn on the torque and lock EEPROM area      LEDTurn on or turn off the LED on Dynamixel.            Bit      Description                  0(Default)      Turn OFF the LED              1      Turn ON the LED      Compliance MarginIt exists in each direction of CW/CCW and means the error between goal position and present position.The range of the value is 0~255, and the unit is the same as Goal Position.(Address 30,31)The greater the value, the more difference occurs.Compliance SlopeIt exists in each direction of CW/CCW and sets the level of Torque near the goal position.Compliance Slope is set in 7 steps, the higher the value, the more flexibility is obtained.Data representative value is actually used value.  That is, even if the value is set to 25, 16 is used internally as the representative value.            Step      Data Value      Data Representative Value                  1      0(0x00) ~ 3(0x03)      2(0x02)              2      4(0x04) ~ 7(0x07)      4(0x04)              3      8(0x08)~15(0x0F)      8(0x08)              4      16(0x10)~31(0x1F)      16(0x10)              5      32(0x20)~63(0x3F)      32(0x20)              6      64(0x40)~127(0x7F)      64(0x40)              7      128(0x80)~254(0xFE)      128(0x80)      Compliance is to set the control flexibility of the motor.The following diagram shows the relationship between output torque and position of the motor.Goal PositionIt is a position value of destination.0 ~ 1,023 (0x3FF) is available.  The unit is 0.29°.If Goal Position is out of the range, Angle Limit Error Bit (Bit 1) of Status Packet is returned as ‘1’ and Alarm is triggered as set in Alarm LED/Shutdown.The picture above is the front view of DynamixelNote If it is set to Wheel Mode, Goal Position value is not used.Moving SpeedIt is a moving speed to Goal Position.The range and the unit of the value may vary depending on the operation mode.      Join Mode0 ~ 1,023(0x3FF) can be used, and the unit is about 0.111rpm.If it is set to 0, it means the maximum rpm of the motor is used without controlling the speed.If it is 1023, it is about 114rpm.For example, if it is set to 300, it is about 33.3 rpm.    Note Please check the maximum rpm of the Dynamixel. The motor cannot exceed the maximum rpm with the higher Moving Speed value.        Wheel Mode0 ~ 2,047(0x7FF) can be used, the unit is about 0.1%.If a value in the range of 0 ~ 1,023 is used, it is stopped by setting to 0 while rotating to CCW direction.If a value in the range of 1,024 ~ 2,047 is used, it is stopped by setting to 1,024 while rotating to CW direction.That is, the 10th bit becomes the direction bit to control the direction.In Wheel Mode, only the output control is possible, not speed.For example, if it is set to 512, it means the output is controlled by 50% of the maximum output.  Torque LimitIt is the value of the maximum torque limit.0 ~ 1,023(0x3FF) is available, and the unit is about 0.1%.For example, if the value is 512, it is about 50%; that means only 50% of the maximum torque will be used.If the power is turned on, the value of Max Torque (Address 14, 15) is used as the initial value.Note If the function of Alarm Shutdown is triggered, the motor loses its torque because the value becomes 0. Once error conditions are resolved and this value is changed to the value other than 0, the motor can be operated again.Present PositionIt is the current position value of Dynamixel.The range of the value is 0~1023 (0x3FF), and the unit is 0.29 degree.The picture above is the front view of Dynamixel.Caution If it is set to Wheel Mode, the value cannot be used to measure the moving distance and the rotation frequency.Present SpeedIt is the present moving speed.0~2,047 (0x7FF) can be used.If a value is in the rage of 0~1,023, it means that the motor rotates to the CCW direction.If a value is in the rage of 1,024~2,047, it means that the motor rotates to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 0 and 1,024 are equal.The unit of this value varies depending on operation mode.      Joint Mode    The unit is about 0.111rpm.For example, if it is set to 300, it means that the motor is moving to the CCW direction at a rate of about 33.3rpm.        Wheel Mode    The unit is about 0.1%.For example, if it is set to 512, it means that the torque is controlled by 50% of the maximum torque to the CCW direction.  Present LoadIt means currently applied load.The range of the value is 0~2047, and the unit is about 0.1%.If the value is 0~1,023, it means the load works to the CCW direction.If the value is 1,024~2,047, it means the load works to the CW direction.That is, the 10th bit becomes the direction bit to control the direction, and 1,024 is equal to 0.For example, the value is 512, it means the load is detected in the direction of CCW about 50% of the maximum torque.            Bit      15 ~ 11      10      9 ~ 0                  Value      0      Load Direction      Data (Load Ratio)      Note CCW Load : Load Direction = 0, CW Load : Load Direction = 1Note Present load is an inferred value based on the internal output value; not a measured value using torque sensor, etc. Therefore, it may be inaccurate for measuring weight or torque. It is recommended to use it for predicting the direction and size of the force being applied to the joint.Present VoltageIt is the size of the present voltage supplied.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)If Present Voltage(42) value is out of range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Alarm is triggered and set the address 17 and set 1 to the Bit 0 of the address 18.Present TemperatureIt is the internal temperature of Dynamixel in Celsius.Data value is identical to the actual temperature in Celsius. For example, if the data value is 85 (0x55), the current internal temperature is 85°C.Registered Instruction            Value      Description                  0      REG_WRITE instruction is not received              1      REG_WRITE instruction is received      Note If ACTION instruction is executed, the value will be changed to 0.Moving            Value      Description                  0      Goal position command execution is completed              1      Goal position command execution is in progress      Lock            Value      Description                  0      EEPROM area can be modified              1      EEPROM area cannot be modified      Caution If Lock is set to 1, the power must be turned off and then turned on again to change into 0.PunchMinimum current to drive motor. This value ranges from 0x20 to 0x3FF.How to Assemble  FR05-B1 Option Frame  FR05-H1 Option Frame  FR05-S1 Option Frame  FR05-S2 Option Frame  FR05-B101 Option Frame  FR05-F101, FR05-X101 Option Frame  FR05-H101 Option Frame  FR05-S101 Option Frame  HN05-N1 Horn  HN05-I1 Horn  HN05-T1 Horn  HN05-N101 Horn  HN05-I101 Horn  HN05-T101 Horn  CombinationsMaintenanceHorn and Bearing ReplacementThe horn is installed on the front wheel gear serration of the DYNAMIXEL whereas the bearing set is installed on the back.Installing the HornPlace the thrust horn washer into the actuator before inserting the horn.You must carefully align the horn to the wheel gear serration by aligning dots.Once alignment is properly done, gently push the center of the horn toward the actuator.Make sure that the horn washer is in place as you tighten the bolt.Installing the Bearing SetYou may need to remove the bearing set from the previous actuator and reinstall it into the new actuator.The bearing set can also be purchased separately.As bearing set is rotating freely, therefore alignment is not required when assembling to DYNAMIXEL.ReferenceNote Compatibility GuideQuick StartDrawingsCommunication CircuitTo control the Dynamixel actuators, the main controller needs to convert its UART signals to the half duplex type. The recommended circuit diagram for this is shown below.TTL CommunicationRS-485 CommunicationThe power of Dynamixel is supplied via Pin1(-), Pin2(+).(The above circuit is built into Dynamixel-only controller.)In the above circuit diagram, the direction of data signal of TxD and RxD in the TTL Level is determined according to the level of DIRECTION 485 as follows:In case of DIRECTION485 Level = High: The signal of TxD is output to D+ and D-.In case of DIRECTION485 Level = Low: The signal of D+ and D- is output to RxD.Pin AssignmentThe connector pin assignments are as the following. The two connectors on the Dynamixel are connected pin to pin, thus the Dynamixel can be operated with only one connector attached.",
        "url": " http://localhost:4000/docs/en/dxl/rx/rx-64/"
      } ,
  
      "docs-en-software-rplus2-scratch":  {
        "title": "R+ Scratch",
      "content"	 : "IntroductionR+ Scratch allows ROBOTIS Controllers to connect to Scratch and program robots in the Scratch environment.Program LayoutHome ScreenThis is the main screen that appears when R+ Scratch is first started. It contains configuration menus.SettingsChange the language of the program.InformationCheck the version information and update history of the program.Check for UpdatesCheck for the latest version update of R+ Scratch.CloseClose R+ Scratch.Select ControllerDisplays the list of Controllers that are compatible with R+ Scratch.Port SelectionShows all the available ports that a user can connect. Either press “Auto Search” or check the Device Manager to determine which port your robot is using.Connect / DisconnectClicking the “Connect” button will connect R+ Scratch with the Controller and allow you to use the “Extension Block” in Scratch2Offline.If Scratch2Offline and R+ Scratch are properly communicating, the O icon above the “Extension Block” will change from red to green in Scratch2Offline.New ScratchIf Scratch2Offline is installed, clicking on the “New Scratch” button will load a new Scratch project that includes the blocks relevant for programming the selected Controller in Scratch2Offline.You will first need to save the Scratch project before it loads in Scratch2Offline.If Scratch2Offline is not installed, clicking on the “New Scratch” button will link to the Scratch2Offline download page. See Installing Scratch2Offline in the Miscellaneous (link) section.Open ScratchIf Scratch2Offline is installed, clicking on the “Open Scratch” button will load the list of provided example projects for the selected Controller. Double click on example project from the list to load that project.You will first need to save the Scratch project before it loads in Scratch2Offline.If Scratch2Offline is not installed, clicking on the “New Scratch” button will link to the Scratch2Offline download page. See Installing Scratch2Offline in the Miscellaneous (link) section.Help MenuClicking the “Help” button will load a folder containing help files.Files named after the relevant Controller contain descriptions of the blocks used to program that Controller. Files with a *.json extension can be used when directly adding “Extension Blocks” in Scratch2Offline. See Directly Adding an Extension Block in the Miscellaneous (link) section.Connect Controller to PCConnect Controller Using Wired ModuleThis method utilizes a micro B USB cable or an LN-101 (USB Downloader).Micro B USB Cable  Connect the Controller to your PC using a micro B USB cable.  Power on the Controller.  Click on the “Port Selection” button to see the list of connected devices.  Click on “Auto Search” to automatically detect the Controller or manually select the COM Port by double clicking on “ROBOTIS Virtual COM Port.”  Click “Connect” to begin communicating between robot and PC.LN-101 (USB Downloader)  Connect the Controller to your PC using an LN-101 (USB Downloader).  Power on the Controller.  Click on the “Port Selection” button to see the list of connected devices.  Click on “Auto Search” to automatically detect the Controller or manually select the COM Port by double clicking on “USB Serial Port.”  Click “Connect” to begin communicating between robot and PC.Connect Controller Using Wireless ModuleThis method utilizes BT-210 Bluetooth module or ZigBee (ZIG-110A Set + ZIG2Serial + USB2DXL)BT-210 Bluetooth Module  Connect the BT-210 module to the Controller.  Power on the Controller.  Pair the BT-210 module to your PC using the following procedures: http://support.robotis.com/en/product/robotis_mini/darwin-mini_usage.htm  Click on the “Port Selection” button to see the list of connected devices.  Click on “Auto Search” to automatically detect the Controller or manually select the COM Port by double clicking on “Bluetooth Serial Port.”  Click “Connect” to begin communicating between robot and PC.ZigBee (ZIG-110A Set, ZIG2Serial, and USB2Dynamixel Required)  Connect the ZIG-110A to the Controller.  Connect the ZIG-100 + ZIG2Serial + USB2Dynamixel setup to your PC.  Click on the “Port Selection” button to see the list of connected devices.  Click on “Auto Search” to automatically detect the Controller or manually select the COM Port by double clicking on “USB Serial Port.”  Click “Connect” to begin communicating between robot and PC.  MiscellaneousInstalling Scratch2Offline  Go to the Scratch2Offline download page (https://scratch.mit.edu/scratch2download/)  Download Adobe AIR and the Scratch Offline Editor for your OS.Note If Scratch2Offline is not installed, clicking on the “New Scratch” or “Open Scratch” buttons from R+ Scratch’s Home Screen will link to the Scratch2Offline download page.Installing the ROBOTIS Virtual COM Port Driver  If the driver is properly installed and your Controller is connected to your PC and powered on, you will see “ROBOTIS Virtual COM Port(COM X)” in Device Manager.  If the device shows up as “USB Serial Port,” then you must update the driver.  Right-click on “USB Serial Port” and select “Update Driver Software…”  Select “Browse my computer for driver software”.  Select “Let me pick from a list of device drivers on my computer”.  Select “ROBOTIS Virtual COM Port” and click “Next” to finish the installation.To install the USB driver manually, please visit the following link:http://support.robotis.com/ko/software/sw_reference/cm150_usb_install.htmDirectly Adding an Extension Block  Selecting the Controller and clicking the “New Scratch” or “Open Scratch” buttons will open a Scratch project with the blocks related to the Controller automatically included.  When executing Scratch directly or clicking Create New in the Scratch Menu, you will have to add a block directly as instructed below.  When you are trying to connect an example downloaded from the Scratch website ( https://scratch.mit.edu/starter_projects/ ) or a previously created Scratch with the Controller, you can add an Extension Block directly.  Copy the path of the folder that is opened after clicking the Help Menu.  While holding down the “Shift” key, click the “File” menu. Click on “Import experimental HTTP extension.”  In the resulting window, paste in the path name and select the *.json file extension of the Controller “Extension Blocks” you wish to add.  The selected blocks are now shown in the “Extension Block” list.",
        "url": " http://localhost:4000/docs/en/software/rplus2/scratch/"
      } ,
  
      "search":  {
        "title": "",
      "content"	 : "",
        "url": " "
      } ,
  
      "search-index-json":  {
        "title": "",
      "content"	 : "{  {% for page in site.pages %}      &quot;{{ page.url | slugify }}&quot;:  {        &quot;title&quot;: &quot;{{ page.sidebar.title | xml_escape }}&quot;,      &quot;content&quot; : &quot;{{page.content | strip_html | strip_newlines | remove:  &quot;&quot; | escape | remove: &quot;&quot;}}&quot;,        &quot;url&quot;: &quot; {{ page.permalink | absolute_url }}&quot;      } {% unless forloop.last %},{% endunless %}  {% endfor %}}",
        "url": " "
      } ,
  
      "docs-en-parts-motor-servo-motor":  {
        "title": "Servo Motor",
      "content"	 : "# Servo Motor![](/assets/images/parts/motor/servo_motor_product.jpg)# [Introduction](#introduction)- It is the motor used in OLLO; it is connected to CM-100, and the direction of spin and the speed of spin can be adjusted through port control.- If it is set to &quot;Spin Mode,&quot; it can be operated as the geared motor; if it is set to &quot;Joint Mode,&quot; the motor can be moved to the designated location by setting the speed of spin(Power)and the value of location.- It is mainly used to maintain certain angles pursuant to some conditions such as moving joints, moving steering devices, etc.`Compatibility Guide` [Controller Compatibility]# [Specifications](#specifications)- Weight : 16g- Dimensions : 18mm x 36mm x 27mm(with Horn)- Gear Ratio : 194:1- Speed : 85RPM @ 3.0V- Position Sensor(Potentiometer)- Safety Clutch installed## [Control Angle](#control-angle)- The servo motor of OLLO can control the location from 0 degree to 300 degrees, and the minimum control angle is about 0.29 degrees (300/1024).- However, since the servo motor of OLLO is not as accurate as Dynamixel, and the torque is weaker than Dynamixel, it is appropriate servo motors are used for basic learning of the principles and usages; not appropriate to use for the places where accurate controls are needed.![](/assets/images/parts/motor/servo_motor_01.png)# [Pinout](#pinout)![](/assets/images/parts/motor/servo_motor_pinout.png)1. MOT-2. GND3. ADC : The current location of the motor is printed out as analog signals4. VCC5. MOT+`Caution` Cables can may be damaged when not properly connected (i.e. wrong orientation), or use of excessive force during connection.{: .notice--warning}# [Tutorials](#tutorials)- RoboPlus Task : Please refer to [Servo Motor] section in the Roboplus Task.- Available Addresses  - Operation Mode  - Speed  - Position# [Videos](#videos)[Controller Compatibility]: /docs/en/parts/controller/controller_compatibility/[Servo Motor]: /docs/en/software/rplus1/task/programming_02/#servo-motor",
        "url": " http://localhost:4000/docs/en/parts/motor/servo_motor/"
      } ,
  
      "docs-en-platform-op-simulation":  {
        "title": "DARwIn-OP",
      "content"	 : "# [Simulation](#simulation)DARWIN-OP 3D Simulator![](/assets/images/platform/op/op_165.jpg)## [Webots Installation](#webots-installation)Determine whether you have 32-bit or 64-bit OS### [Windows Version Check](#windows-version-check)#### Windows 32-bit1. Click on the `Start` button2. Point to `Computer` and `right click` on it3. Click on `Properties`  ![](/assets/images/platform/op/op_166.gif) 4. Look for `System type`5. It displays `32-bit Operation System`This means you have 32-bit Windows![](/assets/images/platform/op/op_167.gif) #### Windows 64-bit1. Click on the `Start` button2. Point to `Computer` and `right click` on it3. Click on `Properties`  ![](/assets/images/platform/op/op_168.gif) 4. Look for `System type`5. it displays 64-bit Operating SystemThis means you have 64-bit Windows![](/assets/images/platform/op/op_169.gif) #### Windows 32-bit vs 64-bitLet’s find out another another way to indicate whether you have Windows 32-bit or Windows 64-bit1. Click on the `Start` button2. And click on `Computer` (left click this time)  ![](/assets/images/platform/op/op_170.gif)3. Click on (C:)  - A : 64-bit Windows has 2 folders named Program Files (x86) and Program Files    On 64-bit Windows Webots is stored in Program Files (x86)  ![](/assets/images/platform/op/op_171.gif)  - B : 32-bit Windows only has Program Files    On 32-bit Windows Webots is stored in Program Files  ![](/assets/images/platform/op/op_172.gif)### [Install Webots](#install-webots)#### Download Webots1. Visit www.cyberbotics.com2. Click on Download  ![](/assets/images/platform/op/op_173.gif)   - Option A : Click on the Windows logo  - Option B : Click on Windows  ![](/assets/images/platform/op/op_174.gif) 3. Click on the link for file  ![](/assets/images/platform/op/op_175.gif)This message will appear at the bottom of your web browser Click on Save to download file![](/assets/images/platform/op/op_176.gif) #### Install Webots (For 32-bit Windows)For 64-bit Windows, use `C:Program Files (x86)Webots`For 32-bit Windows, use `C:Program FilesWebots` Once downloading is complete its time to install Webots  Let’s find the installation file located in the downloads destination (normally the Downloads directory) 1. Click on the `Start` button2. And click on `Computer` (left click this time)  ![](/assets/images/platform/op/op_177.gif) 3. Under the Favorites option (upper left part of window)4. Click on ‘Downloads’ and you will be moved to the Downloads directory  ![](/assets/images/platform/op/op_178.gif)   Move to the `Downloads` directory 5. find file6. Double-click on file to begin installation  ![](/assets/images/platform/op/op_179.gif)   A security warning will appear. 7. Simply click on `Run` to begin installation  ![](/assets/images/platform/op/op_180.gif) 8. Click on `Next`  ![](/assets/images/platform/op/op_181.gif)   From the Select Destination Location window.    Make sure the installation path reads `C:Program FilesWebots`.    If not, then manually specify it to `C:Program FilesWebots`. 9. Then click on Next  ![](/assets/images/platform/op/op_182.gif)   From Select Start Menu Folder window.    Make sure the destination folder reads `Cyberbotics`.    If not, then manually specify it to `Cyberbotics`. 10. Then click on Next  ![](/assets/images/platform/op/op_183.gif)   From the Ready to Install window.    The Destination location and Start Menu Folder are set. 11. click on Install  ![](/assets/images/platform/op/op_184.gif)    ![](/assets/images/platform/op/op_185.gif)   Once the green bar is full, Completing the Webots Setup Wizard will appear 12. Click on Finish to finish installing Webots. You have now finished installing Webots  ![](/assets/images/platform/op/op_186.gif)### [Run Webots](#run-webots)#### Running WebotsOnce installation is complete the newly extracted folder will automatically pop up Once installation is complete go to:1. Click on the Start button2. Go to My Computer  ![](/assets/images/platform/op/op_187.gif)   - WEBOTS_HOME is    - 64-bit Windows  C:Program Files (x86)Webots    - 32-bit Windows  C:Program FilesWebots 3. Go to $WEBOTS_HOME/projects/robots/darwin-op/worlds4. Pick any of the 4 ‘walk’ ‘symetry’ ‘visual_tracking’ or ‘soccer’ by double-clicking  ![](/assets/images/platform/op/op_188.gif) 5. After double-clicking on the world file Webots will automatically start  ![](/assets/images/platform/op/op_189.gif)##### Webots GUI![](/assets/images/platform/op/op_190.gif)- Scene tree : Contains the elements of the simulation world- 3D window : Contains the visual rendering of the scene tree- Console : Command line window displaying output values- Text editor : Displays text files such as robot programs #### Creating a new projectNow that Webots is running you can create your own DARWIN-OP based simulation project.  You may have noticed that the simulation automatically begins when Webots starts (the timer runs).  The simulation must be stopped before creating a new project. 1. Click on the Stop button2. Click on the Revert Simulation button3. The simulation resets and you will see the model in an inactive state4. Click on an empty line from the automatically opened controller file from the Text editor.5. Make a small change (i.e. press the space bar on an empty line)6. Click on the Save or Save As icon. A small window will pop up asking you save changes elwhere. Click on OK7. Pick a place other than $WEBOTS_HOME (i.e. My Documents/my-webots-project)8. Click on Copy and the set of files will copy to the assigned directory.9. Finally click on Close.![](/assets/images/platform/op/op_191.gif)![](/assets/images/platform/op/op_192.gif)![](/assets/images/platform/op/op_193.gif)![](/assets/images/platform/op/op_194.gif)#### Working with your projectNotice that the working directory contains a few separate subdirectories.  “controllers” contains subdirectories, where each subdirectory contains the robot model’s program. There is no limit on the number of program subdirectories.  “worlds” contains world file(s). There is no limit on the number of world files allowed inside this subdirectory.  “doc” (new in Webots v7.1.x) contains documentation on cross-compilation feature that allows user to run Webots code on a real DARWIN-OP (please go to the cross-compilation for more details).  ![](/assets/images/platform/op/op_195.gif)Go into the “controllers” subdirectory and there are a few that were automatically created when you created your working project.  Each program subdirectory contains at least one cpp (C++) file that contains the main loop of the controller.  You create separate subdirectories and write programs in languages other languages.![](/assets/images/platform/op/op_196.gif)You may write programs with any text editor or any IDE asides from the integrated text editor from Webots GUI if you wish.  However, compiling and building the code will only work with the Webots GUI.## [Cross Compile](#cross-compile)### [Getting the Sources](#getting-the-sources)#### Using this guideThis guide assumes you are familiar with Webots and requires some knowledge of Webots’ software APIs.This guide assumes user familiarity with the terms controller and worldPlease use this guide in conjunction with Webots user guide and reference guide.You can download both guides from www.cyberbotics.com![](/assets/images/platform/op/op_197.gif) #### Getting the sources1. Visit www.github.com2. Click on Search tab3. Input cross-compilation on the search bar4. Click on the search button  ![](/assets/images/platform/op/op_198.gif)5. scroll and look for `darwinop/webots-cross-compilation`.  ![](/assets/images/platform/op/op_199.gif)Once in the source page you may download the source directly as a .zip file 6. Click on the zip button to download the source to your PC. Once downloaded decompress the file.  ![](/assets/images/platform/op/op_200.gif) The unzipped file will look something like this. Its now time to transfer these files to the real robot.![](/assets/images/platform/op/op_201.gif)### [Transferring the Sources](#transferring-the-sources)Connect to DARWIN-OP via wired or wireless LAN 1. Click on the Start button2. Go to My Computer  ![](/assets/images/platform/op/op_202.gif)The PC from DARWIN-OP can act as a Samba drive. 3. If connected via wired LAN access the PC by inputting `192.168.123.1`.    If connected via wifi then use the IP address assigned to DARWIN-OP from your router.    For more information on connecting to DARWIN-OP click [here](/en/platform/op/getting_started/#connect-to-op)  ![](/assets/images/platform/op/op_203.gif) 4. Double click on “root directory”5. You will be prompted to enter the username and password    User name: **darwin**    Password: **111111**  ![](/assets/images/platform/op/op_204.gif)   Once inside DARwin-OP’s SSD drive look for a directory named **darwin**.    This is the location of DARWIN-OP’s software (Framework library and C++ sources) 6. Double click on **darwin** directory  ![](/assets/images/platform/op/op_205.gif)   Once inside darwin directory you will see the usual subdirectories. 7. Create a subdirectory to transfer the cross-compilation sources. Let’s say **webots-sources**.8. Transfer the unzipped contents cross-compilation sources to **webots-sources**.  ![](/assets/images/platform/op/op_206.gif) 9. Transfer (copy) the unzipped contents cross-compilation sources to **webots-sources**.  ![](/assets/images/platform/op/op_207.gif)### [Setting Up the Sources](#setting-up-the-sources)Open up a terminal window (either via remote desktop or SSH). For more information click [here](/en/platform/op/getting_started/#connect-to-op)  Make sure you have root user privileges.  Make sure to update DARWIN-OP’s Framework library to the latest version. 1. From the terminal window go to **webots-sources**2. Merge the Modified DARWIN-OP Framework library with the default Framework by inputting    `cp –R ./resources/projects/robots/darwin-op/libraries/darwin/darwin/* /darwin`  ![](/assets/images/platform/op/op_208.gif)  After merging its time to recompile the Framework and default sources 3. Go to `/darwin/Linux/build` directory4. Type **make clean;make**  ![](/assets/images/platform/op/op_209.gif) 5. Go to `/darwin/Linux/project/demo` directory6. Type **make distclean;make**  ![](/assets/images/platform/op/op_210.gif) 7. Allow users without root user privileges to manipulate the contents of /darwin directory by entering    `chown darwin.darwin /darwin`  ![](/assets/images/platform/op/op_211.gif) 8. Create a new directory in `/darwin/Linux/project/`    Lets say webots (mkdir webots)9. go into the webots subdirectory (`cd webots`)  ![](/assets/images/platform/op/op_212.gif) 10. In the newly-created webots sub-directory its time to copy **include**, **src**, **lib**, **transfer**, and **controllers** from webots-sources  - For src: `cp –r /darwin/webots-sources/resources/projects/robots/darwin-op/libraries/manegers/src/ ./`  - For include: `cp –r /darwin/webots-sources/resources/projects/robots/darwin-op/libraries/manegers/include/ ./`  - For lib: `cp –r /darwin/webots-sources/resources/projects/robots/darwin-op/libraries/manegers/lib/ ./`  - For transfer: `cp –r /darwin/webots-sources/resources/projects/robots/darwin-op/transfer/ ./`  - For controllers: `cp –r /darwin/webots-sources/projects/robots/darwin-op/controllers/ ./`  ![](/assets/images/platform/op/op_213.gif) 11. Type **ls** and there should be 5 directories  ![](/assets/images/platform/op/op_214.gif) 12. Its time to compile the wrapper library. Go to transfer/lib subdirectory (`cd transfer/lib`)13. Type **make** to compile and build the wrapper library  ![](/assets/images/platform/op/op_215.gif)14. Its time to compile the managers library. From the transfer/lib sub-directory go to webots/lib subdirectory (`cd ../../lib`)15. Type **make –f Makefile.darwin-op** to compile and build the managers library.16. Type **ls** and look for a file named managers.a  ![](/assets/images/platform/op/op_216.gif) Cross-compilation sources are now set. Its time to compile Webots controller files for the virtual model and run them in the real robot.### [Compiling Webot Controller](#compiling-webot-controller)You can run the very same controller file used on the virtual model in the real robot 1. From the webots/lib subdirectory go to webots/controllers (`cd ../controllers`)2. Type ls and there will be a list of sub-directories. Each directory contains the exact same controller (.cpp) file from the Webots simulator. Let’s have a look at “Soccer”  ![](/assets/images/platform/op/op_217.gif)   From the Soccer controller directory you may notice the pre-compiled contents are the same.    There is a: Soccer.cpp, Soccer.hpp, main.cpp, config.ini, Makefile, Makefile.darwin-op    Take a look at the controller sub-director from your DARWIN-OP Webots project for the simulator. Both contain exactly the same files.  ![](/assets/images/platform/op/op_218.gif)    ![](/assets/images/platform/op/op_219.gif)    &gt; Soccer.cpp in the real robot    ![](/assets/images/platform/op/op_220.gif)  &gt; Soccer.cpp in Webots GUI    The exact same code will run in both virtual model and real robot with as little differences as possible.   You may have noticed there are 2 Makefiles. You can safely assume Makefile.darwin-op is the Makefile to compile Webots controller in the real robot. 3. To compile the controller in the real robot input the following command  ```  make –f Makefile.darwin-op  ```  4. You should see an executable after completion.    “chmod 755 soccer” that is the executable file being soccer  ![](/assets/images/platform/op/op_221.gif)    Run the controller in Webots simulator first. Then do the same in the real robot  - To run the Webots controller simply enter: `./soccer`  - To end the program: Hold the `Control` key then press the `C` key  - To run the Webots controller as a background process enter: `./soccer&amp;`  - To kill the soccer program running as a background process enter: `killall soccer`  - To decompile the build then you would need to clean it by: `make clean –f Makefile.darwin-op`### [Create &amp; Run Custom Controller](#create-run-custom-controller)Let’s say you want to modify the ‘walk’ controller, but you want to do so as a different controller from walk. You also want to expand robot control by adding side step functionality.You want to do all the testing in Webots GUI (none in the real robot) before porting your code to the real robot. 1. Go to your DARWIN-OP Webots project directory2. From the controllers sub-directory make a duplicate of the walk directory (and its contents) and let’s say my-walk.  ![](/assets/images/platform/op/op_222.gif) 3. Go into your newly-created my-walk directory and do the following:  - on every file change anything with &#39;walk&#39; to &#39;my_walk&#39;  - rename `walk.cpp` and `walk.hpp` to `my_walk.cpp` and `my_walk.hpp`  There may be some post-build files (.c, .d, exe) from the previous build of walk. Feel free to manually delete them4. From the `worlds` subdirectory create duplicate of `walk.wbt` and rename it `my_walk.wbt`  ![](/assets/images/platform/op/op_223.gif)   Once you made all the changes for all files.    Start Webots by double-clicking on my_walk.wbt the simulation will begin with the previous walk controller loaded to the model. Stop the controller and revert the simulation.5. From the text editor open the controller file (my-walk.cpp), and in the main loop (my-walk::run()) add 2 more cases as you see in the image below.   - Pressing the `A` key the model will sidestep to the left  - Pressing the `S` key the model will sidestep to the right   `Hint` setYAmplitude(double) deals with sidesteps  ![](/assets/images/platform/op/op_224.gif)   Save your changes.6. From the scene tree expand the DARWIN-OP node. On controller change `walk` to `my walk`.    Save changes to the world  ![](/assets/images/platform/op/op_225.gif) After saving your world return to the text editor.  Compile your new controller and run it in the simulator.  You should be able to sidestep left and right in addition of being able to turn the model normally.![](/assets/images/platform/op/op_226.gif) Now its time to transfer `my_walk` to the real robot.  The easiest way to do so is by accessing DARWIN-OP via Samba drive as done previously.  Once inside go to: root directory  darwin  Linux  project  webots  controllers.  Copy your `my_walk` directory from your Webots project to `controllers` directory in DARWIN-OP.![](/assets/images/platform/op/op_227.gif)There will be some post-build files (.o, .d, exe, etc) created during the simulation. Feel free to delete these as they are irrelevant in the real robot.  You may choose to delete the **Makefile** as well because its not necessary in the real robot but must keep `Makefile.darwin-op`.![](/assets/images/platform/op/op_228.gif)Feel free to delete the highlighted files. They are not useful in the real robot You can verify that the transfer process was OK by:- Going to the `controllers` directory- Type ls to see the contents Then go to `my_walk` directory compile the controller (make –f Makefile.darwin-op)![](/assets/images/platform/op/op_229.gif)When executing this `controller` in particular do not use SSH client (PuTTY) instead use remote desktop (VNC). Otherwise the program will halt with a segmentation fault error.![](/assets/images/platform/op/op_230.gif)",
        "url": " http://localhost:4000/docs/en/platform/op/simulation/"
      } ,
  
      "docs-kr-edu-smart-smart3-2":  {
        "title": "SMART III Lv.2",
      "content"	 : "# [부품 목록](#부품-목록)![](/assets/images/edu/smart/smart3-2_part-list.jpg)# [작동하기](#작동하기)## [R+ SmartIII 설치하기](#r-smartiii-설치하기)여기에서는 스마트 기기에 R+ SmartIII를 설치합니다.1. 구글 play 스토어에서 &quot;로보티즈&quot;를 검색합니다.2. R+ SmartIII (ROBOTIS)를 선택합니다.3. 설치`Note` 프로그램 매뉴얼 다운로드 : [R+ SmartIII]{: .notice }## [R+ m.Task 2.0 설치하기](#r-mtask-20-설치하기)여기에서는 스마트 기기에 R+ m.Task 2.0을 설치합니다.1. 구글 play 스토어에서 &quot;로보티즈&quot;를 검색합니다.2. R+ m.Task2 (ROBOTIS)를 선택합니다.3. 설치`Note` 프로그램 매뉴얼 다운로드 : [R+ m.Task 2.0]{: .notice }## [모션파일 다운로드](#모션파일-다운로드){% include software/motion_file_download.md %}## [블루투스 연결하기](#블루투스-연결하기)# [교안예제](#교안예제)`Note` 각 예제의 조립 방법이나 실행 시 동작에 관한 내용은 교육키트 2단계 교안을 참고하세요. 또한, 예제 태스크 코드의 다운로드 방법은 여기를 참고하세요. 다운로드시 필요한 BT-410은 1단계 구성품에 포함되어 있습니다. 분실시 쇼핑몰에서 별도구매 해주세요.{: .notice}{% include gallery id=&quot;gallery&quot; caption=&quot;스마트III 2단계 교안 예제&quot; %}[R+ SmartIII]: #[R+ m.Task 2.0]: #",
        "url": " http://localhost:4000/docs/kr/edu/smart/smart3-2/"
      } ,
  
      "docs-en-edu-bioloid-stem":  {
        "title": "BIOLOID STEM",
      "content"	 : "# BIOLOID STEM# [Introduction](#introduction)![](/assets/images/edu/bioloid/stem_product.jpg)- Educational kit for science, technology, engineering, and mathematics- Curricula of 16 sample robots with a total of 48 different types of lessons.- Robots optimized for competition with high-speed Dynamixel and IR array.- Robot kits aimed at solving problems creatively.# [Getting Started](#getting-started)## [Standard Part List](#standard-part-list)![](/assets/images/edu/bioloid/stem_standard_partlist_01_en.png)![](/assets/images/edu/bioloid/stem_standard_partlist_02_en.png)## [Expansion Part List](#expansion-part-list)![](/assets/images/edu/bioloid/stem_expansion_partlist_01_en.png)![](/assets/images/edu/bioloid/stem_expansion_partlist_02_en.png)- [CM-530]- [AX-12W]- [AX-12A]- [IR Sensor Array]- [IR Sensor]## [Operating](#operating)### Download the ProgramYou can find task codes and motion files for other actions on the [Standard](#standard-examples), [Expansion](#expansion-examples) page.{% include en/parts/controller/cm510_530_turnon.md %}### Assembly Check- In Assembly Check mode you can verify whether your robot has been properly assembled. Compare the initial position of the motors.  1. To run Assembly Check mode select ‘Manage’,  hold the ‘D’ button followed by ‘START’.    &gt; Keep holding until melody finished playing.  2. Select the motor with either ‘U’ or ‘D’ buttons. The selected motor with turn its LED on and position itself into its initial position.    &gt; ‘U’ ups ID order while ‘D’ downs ID order.  3. Compare the ID against the assembly check guide.    &gt; If the motor is not detected by the controller then it will beep.  4. Compare whether the motor “froze” or it goes to its initial position.    &gt; Although the LED may be on the motor may be loose; check its wiring.  5. Check the port for the IR array.    &gt; The IR array connected to its pre-assigned will blink when detecting an object.## [Battery Charge](#battery-charge){% include en/edu/bioloid/stem_charge.md %}# [Download](#download)## [Standard Examples](#standard-examples)|Robot|Description||:---:|:---||1. Sequence Racer![Ex_01][img_adv_ex_01]|[Download][adv_ex_1-1] Basic Phase[Download][adv_ex_1-2] Application Phase[Download][adv_ex_1-3] Practical Phase[Download][adv_ex_1-4] Video`Dynamixel Setting`AX-12W ID[1, 2]: Wheel Mode`Algorithm`Control the robot’s moving direction with the controller’s directional buttons.`Operation Guide`if you press the forward ‘U’, turn left ‘L’, turn right ‘R’, and reverse ‘D’ sequentially pressing ‘START’ the robot will move in the order the directional buttons were pressed.||2. Bug Fighter![Ex_02][img_adv_ex_02]|[Download][adv_ex_2-1] Basic Phase[Download][adv_ex_2-2] Application Phase[Download][adv_ex_2-3] Practical Phase[Download][adv_ex_2-4] Video `Dynamixel Setting`AX-12W ID[1, 2]: Wheel Mode`Algorithm`Robot follows the black line by following said line.`Operation Guide`The robot remains inbounds and push others out if found in the same area.||3. Tumbler![Ex_03][img_adv_ex_03]|[Download][adv_ex_3-1] Basic Phase[Download][adv_ex_3-2] Application Phase[Download][adv_ex_3-3] Practical Phase[Download][adv_ex_3-4] Video `Dynamixel Setting`AX-12W ID[1, 2]: Wheel Mode`Algorithm`The IR sensors detect obstacles and control the robot’s direction.`Operation Guide`The robot can go over large or small obstacles; with large obstacles it can change directions or react accordingly if flipped over.||4. Line Follower![Ex_04][img_adv_ex_04]|[Download][adv_ex_4-1] Basic Phase[Download][adv_ex_4-2] Application Phase[Download][adv_ex_4-3] Practical Phase[Download][adv_ex_4-4] Video `Dynamixel Setting`AX-12W ID[1, 2]: Wheel Mode`Algorithm`The robot can move on a determined in a criss-cross grid.`Operation Guide`The robot can move forward, reverse, turn left or right along its determined path via its IR array.||5. Digital Piano![Ex_05][img_adv_ex_05]|[Download][adv_ex_5-1] Basic Phase[Download][adv_ex_5-2] Application Phase[Download][adv_ex_5-3] Practical Phase[Download][adv_ex_5-4] Video`Algorithm`Plays a different tune based IR sensor reading.`Operation Guide`The robot can output a musical note from the active sensors from the IR array.||6. Motorcycle![Ex_06][img_adv_ex_06]|[Download][adv_ex_13-1] Basic Phase[Download][adv_ex_13-2] Application Phase[Download][adv_ex_13-3] Practical Phase[Download][adv_ex_13-4] Video `Dynamixel Setting`AX-12W ID[1]: Wheel Mode, AX-12W ID[2]: Joint Mode`Algorithm`Control action by following the black line and avoiding obstacles`Operation Guide`Follows the line while avoiding obstacles by steering itself away from such obstacle.||7. Avoider![Ex_07][img_adv_ex_07]|[Download][adv_ex_7-1] Basic Phase[Download][adv_ex_7-2] Application Phase[Download][adv_ex_7-3] Practical Phase[Download][adv_ex_7-4] Video `Dynamixel Setting`AX-12W ID[1, 2]: Wheel Mode`Algorithm`maintains distance by its right sensor.`Operation Guide`The robot can escape a maze by using its left, right and center IR sensors.|## [Expansion Examples](#expansion-examples)|Robot|Description||:---:|:---||8. Scribbler![Ex_08][img_adv_ex_08]|[Download][adv_ex_8-1] Basic Phase[Download][adv_ex_8-2] Application Phase[Download][adv_ex_8-3] Practical Phase[Download][adv_ex_8-4] Video`Dynamixel Setting`AX-12W ID[1]: Wheel Mode, AX-12A ID[3, 4]: Wheel Mode`Algorithm`Robot follows the order of sequentially inputted commands.`Operation Guide`Write &#39;가&#39; and &#39;어&#39; when augmented with a pen.||9. Transporter![Ex_09][img_adv_ex_09]|[Download][adv_ex_9-1] Basic Phase[Download][adv_ex_9-2] Application Phase[Download][adv_ex_9-3] Practical Phase[Download][adv_ex_9-4] Video `Dynamixel Setting`AX-12W ID[1, 2]: Wheel Mode, AX-12A ID[3 ~ 5]: Joint Mode`Algorithm`The robot follows a pre-determined path and completes a mission.`Operation Guide`Obstacles at certain locations the robot moves them at 2 specific locations from start the robot follows a determined path until finishing.||10. Probe Car![Ex_10][img_adv_ex_10]|[Download][adv_ex_10-1] Basic Phase[Download][adv_ex_10-2] Application Phase[Download][adv_ex_10-3] Practical Phase[Download][adv_ex_10-4] Video `Dynamixel Setting`AX-12W ID[1, 2]: Wheel Mode, AX-12A ID[3, 4]: Joint Mode`Algorithm`While following a path if the robot encounters an obstacle it will move it.`Operation Guide`If the robot detects obstacles over boxes via its IR sensors it moves them to specified locations.||11. Beetle Gripper![Ex_11][img_adv_ex_11]|[Download][adv_ex_11-1] Basic Phase[Download][adv_ex_11-2] Application Phase[Download][adv_ex_11-3] Practical Phase[Download][adv_ex_11-4] Video `Dynamixel Setting`AX-12W ID[1, 2]: Wheel Mode, AX-12A ID[3 ~ 5]: Joint Mode`Algorithm`Clamp robot follows button input`Operation Guide`The remote control can control forward, reverse, left and right turns, left and right pivots, grab, lift and lower objects.||12. Robot Arm![Ex_12][img_adv_ex_12]|[Download][adv_ex_12-1] Basic Phase[Download][adv_ex_12-2] Application Phase[Download][adv_ex_12-3] Practical Phase[Download][adv_ex_12-4] Video `Dynamixel Setting`AX-12A ID[3 ~ 6]: Joint Mode`Algorithm`Detects a cup with the IR sensors and move it to a specified location.`Operation Guide`An example robot that moves 2 small cups and 2 big cups to the designated position regardless of the order of dection.||13. Walking Droid![Ex_13][img_adv_ex_13]|[Download][adv_ex_13-1] Basic Phase[Download][adv_ex_13-2] Application Phase[Download][adv_ex_13-3] Practical Phase[Download][adv_ex_13-4] Motion File[Download][adv_ex_13-5] Video `Dynamixel Setting`AX-12A ID[3 ~ 6]: Joint Mode`Algorithm`Robot detects obstacles and avoids it with its IR sensors.`Operation Guide`The robot moves forwards and turns left; it shifts to the right if the left sensors detects an obstacle; shifts to the left if the right sensor detects an obstacle; reverses if the center sensor detects an obstacle.||14. Hexapod![Ex_14][img_adv_ex_14]|[Download][adv_ex_14-1] Basic Phase[Download][adv_ex_14-2] Application Phase[Download][adv_ex_14-3] Practical Phase[Download][adv_ex_14-4] Motion File[Download][adv_ex_14-5] Video `Dynamixel Setting`AX-12A ID[3 ~ 5]: Joint Mode`Algorithm`Robot detects obstacles and avoids it with its IR sensors.`Operation Guide`The robot shifts to the right if the left sensors detects an obstacle; shifts to the left if the right sensor detects an obstacle; it speeds up when the upper sensor detects a hand.||15. Greeting Penguin![Ex_15][img_adv_ex_15]|[Download][adv_ex_15-1] Basic Phase[Download][adv_ex_15-2] Application Phase[Download][adv_ex_15-3] Practical Phase[Download][adv_ex_15-4] Motion File[Download][adv_ex_15-5] Video `Dynamixel Setting`AX-12W ID[1, 2]: Joint Mode, AX-12A ID[3 ~ 6]: Joint Mode`Algorithm`Robot remembers the order of input commands and performs in the same input order.`Operation Guide`Robot remembers lifting of left and right arms and clapping and repeats the motions in the same order.||16. Cannon Shooter![Ex_16][img_adv_ex_16]|[Download][adv_ex_16-1] Basic Phase[Download][adv_ex_16-2] Application Phase[Download][adv_ex_16-3] Practical Phase[Download][adv_ex_16-4] Video `Dynamixel Setting`AX-12W ID[1, 2]: Wheel Mode, AX-12A ID[3 ~ 6]: Joint Mode`Algorithm`Slingshot robot follows input commands for clamping and launching.`Operation Guide`The remote control can control forward, reverse, left and right turns, left and right pivots, grab, lift and lower objects.|# [References](#references)## [Replacing Fuse](#replacing-fuse){% include en/parts/controller/fuse_cm510_530.md %}## [Dynamixel Management](#dynamixel-management){% include en/edu/bioloid/dynamixel_management.md %}{% include en/parts/communication/zigbee_control.md %}[CM-530]: /docs/en/parts/controller/cm-530/[AX-12W]: /docs/en/dxl/ax/ax-12w/[AX-12A]: /docs/en/dxl/ax/ax-12a/[IR Sensor Array]: /docs/en/parts/sensor/ir_array/[IR Sensor]: /docs/en/parts/sensor/irss-10/[img_adv_ex_01]: /assets/images/edu/bioloid/stem_sequenceracer.jpg[img_adv_ex_02]: /assets/images/edu/bioloid/stem_bugfighter.jpg[img_adv_ex_03]: /assets/images/edu/bioloid/stem_tumbler.jpg[img_adv_ex_04]: /assets/images/edu/bioloid/stem_linefollower.jpg[img_adv_ex_05]: /assets/images/edu/bioloid/stem_digitalpiano.jpg[img_adv_ex_06]: /assets/images/edu/bioloid/stem_motorcycle.jpg[img_adv_ex_07]: /assets/images/edu/bioloid/stem_avoider.jpg[img_adv_ex_08]: /assets/images/edu/bioloid/stem_scribbler.jpg[img_adv_ex_09]: /assets/images/edu/bioloid/stem_transporter.jpg[img_adv_ex_10]: /assets/images/edu/bioloid/stem_probecar.jpg[img_adv_ex_11]: /assets/images/edu/bioloid/stem_beetlegripper.jpg[img_adv_ex_12]: /assets/images/edu/bioloid/stem_robotarm.jpg[img_adv_ex_13]: /assets/images/edu/bioloid/stem_walkingdroid.jpg[img_adv_ex_14]: /assets/images/edu/bioloid/stem_hexapod.jpg[img_adv_ex_15]: /assets/images/edu/bioloid/stem_greetingpenguin.jpg[img_adv_ex_16]: /assets/images/edu/bioloid/stem_cannonshooter.jpg[adv_ex_1-1]: http://support.robotis.com/en/baggage_files/bioloid/stem/1.bio_stem_sequenceracer1_en.tsk[adv_ex_1-2]: http://support.robotis.com/en/baggage_files/bioloid/stem/1.bio_stem_sequenceracer2_en.tsk[adv_ex_1-3]: http://support.robotis.com/en/baggage_files/bioloid/stem/1.bio_stem_sequenceracer3_en.tsk[adv_ex_1-4]: http://www.robotis.com/video/BIO_STEM_SequenceRacer.wmv[adv_ex_2-1]: http://support.robotis.com/en/baggage_files/bioloid/stem/2.bio_stem_bugfighter1_en.tsk[adv_ex_2-2]: http://support.robotis.com/en/baggage_files/bioloid/stem/2.bio_stem_bugfighter2_en.tsk[adv_ex_2-3]: http://support.robotis.com/en/baggage_files/bioloid/stem/2.bio_stem_bugfighter3_en.tsk[adv_ex_2-4]: http://www.robotis.com/video/BIO_STEM_BugFighter.wmv[adv_ex_3-1]: http://support.robotis.com/en/baggage_files/bioloid/stem/3.bio_stem_tumbler1_en.tsk[adv_ex_3-2]: http://support.robotis.com/en/baggage_files/bioloid/stem/3.bio_stem_tumbler2_en.tsk[adv_ex_3-3]: http://support.robotis.com/en/baggage_files/bioloid/stem/3.bio_stem_tumbler3_en.tsk[adv_ex_3-4]: http://www.robotis.com/video/BIO_STEM_Tumbler.wmv[adv_ex_4-1]: http://support.robotis.com/en/baggage_files/bioloid/stem/4.bio_stem_linefollower1_en.tsk[adv_ex_4-2]: http://support.robotis.com/en/baggage_files/bioloid/stem/4.bio_stem_linefollower2_en.tsk[adv_ex_4-3]: http://support.robotis.com/en/baggage_files/bioloid/stem/4.bio_stem_linefollower3_en.tsk[adv_ex_4-4]: http://www.robotis.com/video/BIO_STEM_LineFollower.wmv[adv_ex_5-1]: http://support.robotis.com/en/baggage_files/bioloid/stem/5.bio_stem_digitalpiano1_en.tsk[adv_ex_5-2]: http://support.robotis.com/en/baggage_files/bioloid/stem/5.bio_stem_digitalpiano2_en.tsk[adv_ex_5-3]: http://support.robotis.com/en/baggage_files/bioloid/stem/5.bio_stem_digitalpiano3_en.tsk[adv_ex_5-4]: http://www.robotis.com/video/BIO_STEM_DigitalPiano.wmv[adv_ex_6-1]: http://support.robotis.com/en/baggage_files/bioloid/stem/6.bio_stem_motorcycle1_en.tsk[adv_ex_6-2]: http://support.robotis.com/en/baggage_files/bioloid/stem/6.bio_stem_motorcycle2_en.tsk[adv_ex_6-3]: http://support.robotis.com/en/baggage_files/bioloid/stem/6.bio_stem_motorcycle3_en.tsk[adv_ex_6-4]: http://www.robotis.com/video/BIO_STEM_MotorCycle.wmv[adv_ex_7-1]: http://support.robotis.com/en/baggage_files/bioloid/stem/7.bio_stem_avoider1_en.tsk[adv_ex_7-2]: http://support.robotis.com/en/baggage_files/bioloid/stem/7.bio_stem_avoider2_en.tsk[adv_ex_7-3]: http://support.robotis.com/en/baggage_files/bioloid/stem/7.bio_stem_avoider3_en.tsk[adv_ex_7-4]: http://www.robotis.com/video/BIO_STEM_Avoider.wmv[adv_ex_8-1]: http://support.robotis.com/en/baggage_files/bioloid/stem/8.bio_stem_scribbler1_en.tsk[adv_ex_8-2]: http://support.robotis.com/en/baggage_files/bioloid/stem/8.bio_stem_scribbler2_en.tsk[adv_ex_8-3]: http://support.robotis.com/en/baggage_files/bioloid/stem/8.bio_stem_scribbler3_en.tsk[adv_ex_8-4]: http://www.robotis.com/video/BIOLOID_STEM_8.Scribbler.wmv[adv_ex_9-1]: http://support.robotis.com/en/baggage_files/bioloid/stem/9.bio_stem_transporter1_en.tsk[adv_ex_9-2]: http://support.robotis.com/en/baggage_files/bioloid/stem/9.bio_stem_transporter2_en.tsk[adv_ex_9-3]: http://support.robotis.com/en/baggage_files/bioloid/stem/9.bio_stem_transporter3_en.tsk[adv_ex_9-4]: http://www.robotis.com/video/BIOLOID_STEM_9.Transporter.wmv[adv_ex_10-1]: http://support.robotis.com/en/baggage_files/bioloid/stem/10.bio_stem_probecar1_en.tsk[adv_ex_10-2]: http://support.robotis.com/en/baggage_files/bioloid/stem/10.bio_stem_probecar2_en.tsk[adv_ex_10-3]: http://support.robotis.com/en/baggage_files/bioloid/stem/10.bio_stem_probecar3_en.tsk[adv_ex_10-4]: http://www.robotis.com/video/BIOLOID_STEM_10.ProbeCar.wmv[adv_ex_11-1]: http://support.robotis.com/en/baggage_files/bioloid/stem/11.bio_stem_beetlegripper1_en.tsk[adv_ex_11-2]: http://support.robotis.com/en/baggage_files/bioloid/stem/11.bio_stem_beetlegripper2_en.tsk[adv_ex_11-3]: http://support.robotis.com/en/baggage_files/bioloid/stem/11.bio_stem_beetlegripper3_en.tsk[adv_ex_11-4]: http://www.robotis.com/video/BIOLOID_STEM_11.BeetleGripper.wmv[adv_ex_12-1]: http://support.robotis.com/en/baggage_files/bioloid/stem/12.bio_stem_robotarm1_en.tsk[adv_ex_12-2]: http://support.robotis.com/en/baggage_files/bioloid/stem/12.bio_stem_robotarm2_en.tsk[adv_ex_12-3]: http://support.robotis.com/en/baggage_files/bioloid/stem/12.bio_stem_robotarm3_en.tsk[adv_ex_12-4]: http://www.robotis.com/video/BIOLOID_STEM_12.RobotArm.wmv[adv_ex_13-1]: http://support.robotis.com/en/baggage_files/bioloid/stem/13.bio_stem_walking_droid1_en.tsk[adv_ex_13-2]: http://support.robotis.com/en/baggage_files/bioloid/stem/13.bio_stem_walking_droid2_en.tsk[adv_ex_13-3]: http://support.robotis.com/en/baggage_files/bioloid/stem/13.bio_stem_walking_droid3_en.tsk[adv_ex_13-4]: http://support.robotis.com/en/baggage_files/bioloid/stem/13.bio_stem_walking_droid_en.mtn[adv_ex_13-5]: http://www.robotis.com/video/BIOLOID_STEM_13.WalkingDroid.wmv[adv_ex_14-1]: http://support.robotis.com/en/baggage_files/bioloid/stem/14.bio_stem_hexapod1_en.tsk[adv_ex_14-2]: http://support.robotis.com/en/baggage_files/bioloid/stem/14.bio_stem_hexapod2_en.tsk[adv_ex_14-3]: http://support.robotis.com/en/baggage_files/bioloid/stem/14.bio_stem_hexapod3_en.tsk[adv_ex_14-4]: http://support.robotis.com/en/baggage_files/bioloid/stem/14.bio_stem_hexapod_en.mtn[adv_ex_14-5]: http://www.robotis.com/video/BIOLOID_STEM_14.Hexapod.wmv[adv_ex_15-1]: http://support.robotis.com/en/baggage_files/bioloid/stem/15.bio_stem_greetingpenguin1_en.tsk[adv_ex_15-2]: http://support.robotis.com/en/baggage_files/bioloid/stem/15.bio_stem_greetingpenguin2_en.tsk[adv_ex_15-3]: http://support.robotis.com/en/baggage_files/bioloid/stem/15.bio_stem_greetingpenguin3_en.tsk[adv_ex_15-4]: http://support.robotis.com/en/baggage_files/bioloid/stem/15.bio_stem_greetingpenguin_en.mtn[adv_ex_15-5]: http://www.robotis.com/video/BIOLOID_STEM_15.GreetingPenguin.wmv[adv_ex_16-1]: http://support.robotis.com/en/baggage_files/bioloid/stem/16.bio_stem_cannonshooter1_en.tsk[adv_ex_16-2]: http://support.robotis.com/en/baggage_files/bioloid/stem/16.bio_stem_cannonshooter2_en.tsk[adv_ex_16-3]: http://support.robotis.com/en/baggage_files/bioloid/stem/16.bio_stem_cannonshooter3_en.tsk[adv_ex_16-4]: http://www.robotis.com/video/BIOLOID_STEM_16.CannonShooter.wmv",
        "url": " http://localhost:4000/docs/en/edu/bioloid/stem/"
      } ,
  
      "docs-en-software-rplus2-task":  {
        "title": "R+ Task 2.0",
      "content"	 : "# [Introduction](#introduction)## [RoboPlus Task 2.0](#roboplus-task-20)![](/assets/images/sw/rplus2/task/roboplus_task2_001.gif)In computer science, a task generally means a set of relevant activities to complete the work at hand. In RoboPlus terms, a task code is a source code programmed for a robot to complete a task.  A robot operates according to the task code created by the user, and the RoboPlus Task is a program that helps the user to write task code easily. Task code files have a .tskx extension in the PC (or smartphone).  (Previous versions use a .tsk extension, which can be converted to .tskx via R+ Task 2.0) - What does the Task file have to do with the Motion file?    The Task file is the program code that defines the logic and thought process of how the robot will think and act, and the Motion file is the data which defines the behavior to be taken according to the decision made on the Task file.    If the robot that I make will only be using simple movements, then you do not need to use a Motion file when writing a Task file.    But if I need the robot to perform accurate movements or a great number of movements such as dancing, then using a Motion file will be more efficient.    (If user wants to use a Motion file in the task code, the user must download the Motion file.)![](/assets/images/sw/rplus2/task/roboplus_task2_002.gif) ## [Manual Instructions](#manual-instructions)1. Editing Tab for Each Stage      The workspace is divided into Home Tab, Programming Tab, and Debugging Tab.    ![](/assets/images/sw/rplus2/task/roboplus_task2_003.jpg) 2. Home Tab      The following figures are the first screen right after starting the program, which includes basic samples, file related menu, update, and settings menu.    ![](/assets/images/sw/rplus2/task/roboplus_task2_004.jpg)     ![](/assets/images/sw/rplus2/task/roboplus_task2_005.jpg) 3. Programming Tab      The following figures display the screen for editing task source code, which provides programming toolbar, source view, outline menu, and download functions.    ![](/assets/images/sw/rplus2/task/roboplus_task2_006.jpg)    ![](/assets/images/sw/rplus2/task/roboplus_task2_007.jpg) 4. Debugging Tab      The following figures indicate the screen to debug the task code, which provides the output monitor and virtual remote control functions.      (An auto-connect feature has been added for the user’s convenience.)    ![](/assets/images/sw/rplus2/task/roboplus_task2_008.jpg)    ![](/assets/images/sw/rplus2/task/roboplus_task2_009.jpg)## [Resources for Task](#resources-for-task)Resources in Task Code vary depending on the device connected with the controller. 1. If controller is connected to an external hardware such as a Dynamic Cell, then the Task Code can use it.2. If controller is connected to a smart app(R+ Smart or R+ IoT), then the Task Code can use it.3. If user has downloaded motion data into the Controller via R+ Motion, then the Task Code can use it. Resources available in Task Code are comprised as below![](/assets/images/sw/rplus2/task/roboplus_task2_010.jpg)## [Task Code Structure](#task-code-structure)Task code is comprised of 3 elements (code lines, instructions, and parameters). 1. Parameter    This is the smallest unit that represents variables or hardware characteristics. User can read or write the value. 2. Instructions    Indicates a single behavior(computation) given to the Controller to execute the program. Each instruction promises a unique behavior, and the number of parameters vary depending on the behavior(computation). 3. Code line (Command line)    The smallest unit that executes the program, which is a combination of instruction and parameter. Generally, the program is executed in order of the code lines.![](/assets/images/sw/rplus2/task/roboplus_task2_011.jpg)# [Basic Features](#basic-features)## [File Open](#file-open)1. Move to Home Tab (When you open the program it starts on Home Tab.)2. Click the `Example` button3. Select the desired product, steps, and sample name4. Click `Confirm` button![](/assets/images/sw/rplus2/task/roboplus_task2_012.jpg)## [Create New File](#create-new-file)1. Move to Home Tab (When you open the program it starts on Home Tab.)2. Click the `New` button    ![](/assets/images/sw/rplus2/task/roboplus_task2_013.jpg)3. Choose the controller model and its firmware version (1.0 - old, 2.0 - new)4. Click `Confirm` button to create new Task file    ![](/assets/images/sw/rplus2/task/roboplus_task2_014.jpg)## [Command Edit](#command-edit)1. Move to Programming Tab (When you create a new file it starts on Programming Tab.)2. Click the `Instructions` button3. Click the `Loop` category    ![](/assets/images/sw/rplus2/task/roboplus_task2_015.jpg) 4. Drag the `Endless Loop` instruction.5. And drop it on the desired line to add the instruction    ![](/assets/images/sw/rplus2/task/roboplus_task2_016.jpg)## [Parameter Edit](#parameter-edit)1. Click the “Instructions” button2. Click the “Execute” category3. Drag the “Load” instruction,4. And drop it on the desired line to add instruction    ![](/assets/images/sw/rplus2/task/roboplus_task2_017.jpg) 5. Double-click on the “left-side block” of the added instruction    ![](/assets/images/sw/rplus2/task/roboplus_task2_018.jpg) 6. Select “Controller Device” in Category17. Select “Accessory Device” on Category28. Select Port number 1 and select “Geared Motor”9. Click the Confirm button to finish editing the instruction    ![](/assets/images/sw/rplus2/task/roboplus_task2_019.jpg)10. Double-click on the “right-side block” of the added instruction    ![](/assets/images/sw/rplus2/task/roboplus_task2_020.jpg) 11. Select “Controller Constant” in Category112. Select “Motor Value” on Category213. Select “CCW” for Direction and put in “500” for Power14. Click the Confirm button to finish editing the instruction    ![](/assets/images/sw/rplus2/task/roboplus_task2_021.jpg) 15. Check the edited instruction block    ![](/assets/images/sw/rplus2/task/roboplus_task2_022.jpg)## [Download Task Code](#download-task-code)1. Click the “Device” button2. Select the device connected to the robot3. Click the Confirm button4. When the window closes, click the “Download” button    ![](/assets/images/sw/rplus2/task/roboplus_task2_023.jpg)5. When download completes, the Controller will execute the task (For some of the Controllers, the Controller will close instead of executing the task)    ![](/assets/images/sw/rplus2/task/roboplus_task2_024.jpg)## [Print Output](#print-output)1. Move to Debugging Tab2. Click the “Device” button3. Select the device connected to the robot4. Click the Confirm button5. When the window closes, click the “Start” button    ![](/assets/images/sw/rplus2/task/roboplus_task2_025.jpg)6. When robot is connected, the “Program Output Monitor” and “Virtual Remote Controller” fields will be enabled    ![](/assets/images/sw/rplus2/task/roboplus_task2_026.jpg) 7. In the source code, if “Print Screen with Line(or Print Screen)” has been used,    ![](/assets/images/sw/rplus2/task/roboplus_task2_027.jpg) 8. The value will be printed in the Output Monitor as below    ![](/assets/images/sw/rplus2/task/roboplus_task2_028.jpg)# [Programming(Edit)](#programming-edit)This section explains the basic editing functions used in R+ Task 2.0  ## [Insert/Change Instruction](#insertchange-instruction)1. Click the “Instructions” tab on the right (or double-click the location you wish to insert the instruction)2. Drag-and-drop an instruction on the location that you want    ![](/assets/images/sw/rplus2/task/roboplus_task2_029.jpg) 3. If you double-click on an instruction block, you can change it to another instruction    ![](/assets/images/sw/rplus2/task/roboplus_task2_030.jpg)## [Select Multiple Lines](#select-multiple-lines)1. You can select multiple lines by dragging the line numbers on the left    ![](/assets/images/sw/rplus2/task/roboplus_task2_031.jpg) 2. If you drag within the line numbers that were already selected, it will partially cancel the selection of those lines    ![](/assets/images/sw/rplus2/task/roboplus_task2_032.jpg) 3. If you click directly on the source code, it will cancel the selection of the lines    ![](/assets/images/sw/rplus2/task/roboplus_task2_033.jpg)## [Insert/Delete Line](#insertdelete-line)1. Select the location where you wish to insert (or delete) a line with the left mouse button2. Clicking the right mouse button will display the additional menu    ![](/assets/images/sw/rplus2/task/roboplus_task2_034.jpg) 3. If you click “Insert Line” it will insert a new line above the currently selected line (keyboard shortcut : Insert)4. If you click “Delete Line” it will delete the currently selected line (keyboard shortcut : Delete)    ![](/assets/images/sw/rplus2/task/roboplus_task2_035.jpg)## [Enable/Disable Line](#enabledisable-line)1. Select the line which you wish to enable/disable with the left mouse button2. Clicking the right mouse button will display the additional menu    ![](/assets/images/sw/rplus2/task/roboplus_task2_036.jpg) 3. If you click “Enable/Disable” it will change the enabled/disabled status of the selected line(keyboard shortcut : Ctrl+E)    ![](/assets/images/sw/rplus2/task/roboplus_task2_037.jpg) 4. Disabled code will be shown in gray and will be excluded during compilation    ![](/assets/images/sw/rplus2/task/roboplus_task2_038.jpg)## [Copy/Cut/Paste](#copycutpaste)1. Select the line which you wish to copy (or cut) with the left mouse button2. Clicking the right mouse button will display the additional menu    ![](/assets/images/sw/rplus2/task/roboplus_task2_039.jpg)    3. If you click “Copy” (or “Cut”) it will copy the line to the clipboard4. You can also use the “Copy” (or “Cut”) buttons from the toolbar on top (keyboard shortcut : Ctrl+C, Ctrl+X)    ![](/assets/images/sw/rplus2/task/roboplus_task2_040.jpg) 5. Select the line which you wish to Paste to with the left mouse button6. Clicking the right mouse button will display the additional menu    ![](/assets/images/sw/rplus2/task/roboplus_task2_041.jpg) 7. If you click “Paste” it will paste the content that was copied to the clipboard8. You can also use the “Paste” button from the toolbar on top (keyboard shortcut : Ctrl+V)    ![](/assets/images/sw/rplus2/task/roboplus_task2_042.jpg) 9. The copied code is inserted as in the figure below    ![](/assets/images/sw/rplus2/task/roboplus_task2_043.jpg)## [Undo/Redo](#undoredo)1. While editing the code, if you click the “Undo” function you can restore the code to the previous state2. You can also use the “Undo” button from the toolbar on top (keyboard shortcut : Ctrl+Z)    ![](/assets/images/sw/rplus2/task/roboplus_task2_044.jpg) 3. If you click the “Redo” button from the toolbar on top, it will rewrite the restored code again (keyboard shortcut : Ctrl+Z)    ![](/assets/images/sw/rplus2/task/roboplus_task2_045.jpg)# [Programming(Instructions)](#programming-instructions)This section explains the instructions used in R+ Task 2.0![](/assets/images/sw/rplus2/task/roboplus_task2_046.jpg)## [Start/End](#startend)This instruction establishes the overall beginning and end of a program, and the valid block for the instruction. ![](/assets/images/sw/rplus2/task/roboplus_task2_047.jpg) ### Start Program- The Start Program instruction is executed regardless of the line number.- There cannot be more than one Start Program instruction in one program.- There must be an instruction enclosing block mandatorily.- When program reaches the end of the Start Program instruction, the program will be end.- It is the same concept as the main() function in C programming language. - The following figure shows a Start Program instruction that is empty inside.  ![](/assets/images/sw/rplus2/task/roboplus_task2_048.jpg)  ### End Program- The user can manually set the location where the program will end.- If End Program is not set manually, then the program will execute every code in the Start Program instruction and then end naturally. - The following displays a &quot;natural end&quot; of a program after executing every code in the Start Program instruction.  ![](/assets/images/sw/rplus2/task/roboplus_task2_049.jpg) - The following displays a forced end of a program when meeting an End Program instruction.  ![](/assets/images/sw/rplus2/task/roboplus_task2_050.jpg) ### Begin Block / End Block- A block is an enclosed set of multiple lines of instructions.- The beginning and end of a block must always go in pairs.- If the instruction code is only one line then you can omit the block symbols.- It is the same concept as brackets ‘{‘, ‘}’ in C programming language - The following figure indicates the block for “Start Program” and “Endless Loop”  ![](/assets/images/sw/rplus2/task/roboplus_task2_051.jpg) - The following figure indicates the block for “Start Program” and “If”  ![](/assets/images/sw/rplus2/task/roboplus_task2_052.jpg) - As the following figure indicates, if the instruction code is only one line then you can omit the block symbols.  ![](/assets/images/sw/rplus2/task/roboplus_task2_053.jpg) ### Comment- If an explain is needed to be added, you can add a comment(memo) in the line.- By inserting the // symbol, you can double-click it to modify the content that follows.- While you are modifying a comment, you can click the ESC key to restore to the previous state of the comment. - The following is an example of inserting a comment to make the source code easier to understand.  ![](/assets/images/sw/rplus2/task/roboplus_task2_054.jpg)## [Execute](#execute)This is an instruction for giving a command to the device or performing a mathematical calculation.Refer to the following figure for details.![](/assets/images/sw/rplus2/task/roboplus_task2_055.jpg)### Compute- This instruction computes two values to give one result. (C = A + B)  ![](/assets/images/sw/rplus2/task/roboplus_task2_056.gif) - You can choose from Add(+), Subtract(-), Multiply(x), And(&amp;), Or(|).  ![](/assets/images/sw/rplus2/task/roboplus_task2_057.gif) - The following is an example of using the Compute instruction.  ![](/assets/images/sw/rplus2/task/roboplus_task2_058.gif) ### Load- This instruction substitutes a value with another one.  ![](/assets/images/sw/rplus2/task/roboplus_task2_059.gif) - This instruction is used when reading/writing a variable’s value.- The following is an example of writing a value to the variable “speed”, and then reading this variable’s value to apply it to the Geared Motor.  ![](/assets/images/sw/rplus2/task/roboplus_task2_060.jpg) - This instruction is used when reading/writing a device’s value.- The following is an example of setting the speed value of a Geared Motor connected to Port number 1.  ![](/assets/images/sw/rplus2/task/roboplus_task2_061.jpg) ### Lable/Jump- These instructions are used for branching of the program.- Label determines the location of the branching.- Using Jump you can execute a predesignated label first.- It is the same concept as ‘label / goto’ commands in C programming language - The figures below show how the program branches by using Jump- The figure on the left shows the program jumping to Mode1 and executing only the code from Mode1.- The figure on the right shows the program jumping to Mode2 and executing only the code from Mode2.  ![](/assets/images/sw/rplus2/task/roboplus_task2_062.jpg) - Label and Jump must exist inside the same function block.  ![](/assets/images/sw/rplus2/task/roboplus_task2_063.jpg)## [Condition](#condition)This instruction controls the flow of program based on the True/False result of Conditional Clause.![](/assets/images/sw/rplus2/task/roboplus_task2_064.jpg)### Conditional Clause?- A conditional clause gives the result of a computation as either true or false. - Below are the comparison operators that can be used inside the parenthesis().  - == : check if left and right values are the same  - != : check if left and right values are not the same  - &amp;gt; : check if left value is greater than the right value  - &amp;gt;= : check if left value is greater or equal to the right value  - &amp;lt; : check if right value is greater than the left value  - &amp;lt;= : check if right value is greater or equal to the left value  ![](/assets/images/sw/rplus2/task/roboplus_task2_065.jpg)- When many conditions must be satisfied, multiple conditional clauses can be used together as below:  ![](/assets/images/sw/rplus2/task/roboplus_task2_066.jpg)  - When using multiple conditional clauses, the following logical operators can be used :  - then : does not connect any conditional clause. Only uses one conditional clause.  - &amp;&amp; : two conditional clauses are computed with AND operation  - || : two conditional clauses are computed with OR operation    ![](/assets/images/sw/rplus2/task/roboplus_task2_067.jpg) ### If- If the result of the conditional clause is true, then it executes the code inside the block.- It is the same concept as the ‘If’ statement in C programming language. - The following in as example of using If to check whether a variable’s value is 100.  ![](/assets/images/sw/rplus2/task/roboplus_task2_068.jpg)- If the code to be executed is only one line, then you can omit the block symbols as below.  ![](/assets/images/sw/rplus2/task/roboplus_task2_069.jpg) ### Else If- This is used to check another conditional clause following an If statement.- An If statement must be used prior to Else If statement- It is the same concept as the ‘Else If’ statement in C programming language. - The following in as example of using If to check whether a variable’s value is 100, and the using Else If to check whether the variable’s value is 50.  ![](/assets/images/sw/rplus2/task/roboplus_task2_070.jpg) - If the code to be executed is only one line, then you can omit the block symbols as below.  ![](/assets/images/sw/rplus2/task/roboplus_task2_071.jpg) ### Else- This statement will execute its code block if none of the If or Else If statements were executed.- An If statement must be used prior to Else statement- It is the same concept as the ‘Else’ statement in C programming language. - The following in as example of using If to check whether a variable’s value is 100, and if the result is false then running the Else statement that follows.  ![](/assets/images/sw/rplus2/task/roboplus_task2_072.jpg) - If the code to be executed is only one line, then you can omit the block symbols as below.  ![](/assets/images/sw/rplus2/task/roboplus_task2_073.jpg)## [Loop](#loop)This is an instruction that is used when the program needs to repeat a specific behavior or computation multiple times.  By setting the repetition block and repetition condition, loop can be applied in a variety of ways. Refer to the following figure for details. ![](/assets/images/sw/rplus2/task/roboplus_task2_074.jpg) ### Endless Loop- This statement will repeatedly execute from the beginning to the end of the code block endlessly- You can come out of the loop by using the “End Loop” command.- It is the same concept as ‘while(1)’  in C programming language. - The following is an example of using Endless Loop to print the number 100 on the screen. The printing command is within the Endless Loop block so it is repeatedly executed with no end.   ![](/assets/images/sw/rplus2/task/roboplus_task2_075.jpg)- If the code to be executed is only one line, then you can omit the block symbols as below.  ![](/assets/images/sw/rplus2/task/roboplus_task2_076.jpg) ### Loop While- This statement will repeatedly execute from the beginning to the end of the code block as long as the conditional clause is satisfied.- Just as in Condition instructions, multiple conditional clauses can be used together.- You can come out of the loop by using the “End Loop” command.- It is the same concept as ‘while(conditional clause)’ in C programming language. - The following is an example of using Loop While to print the number 100 on the screen for only 1.024 seconds.  ![](/assets/images/sw/rplus2/task/roboplus_task2_077.jpg)- The following is an example of using Loop While and a variable to print the number 100 on the screen just 10 times.  ![](/assets/images/sw/rplus2/task/roboplus_task2_078.jpg) ### Loop For- This statement will execute from the beginning to the end of the code block a specified number of times.- Every time the program reaches the end of the block, the value of a specified variable will increase by 1.- You can come out of the loop by using the “End Loop” command.- Repeat count formula : Repeat count = End value – Starting Value + 1- It is the same concept as ‘for’ in C programming language. - The following is an example of using Loop For to print the number 100 on the screen 10 times.  ![](/assets/images/sw/rplus2/task/roboplus_task2_079.jpg) - The following is an example of taking the variable from Loop For and using it within the execution block. As the repeat count increases from 1 to 10, the value printed on the screen changes to 100, 200,300,400,500,600,700,800,900,1000.  ![](/assets/images/sw/rplus2/task/roboplus_task2_080.jpg) ### Wait While- This statement will stop execution of the program as long as the conditional clause is satisfied.- It is the same concept as ‘while(conditional clause)’ with an empty code block in C programming language. - The following is an example of using Wait While and a timer to make the program wait for 1.024 seconds.  ![](/assets/images/sw/rplus2/task/roboplus_task2_081.jpg) - The following is an example of using Wait While to make the program wait until the motion being performed finishes.  ![](/assets/images/sw/rplus2/task/roboplus_task2_082.jpg) - The following is an example of using Wait While to make the program wait until the melody being played finishes.  ![](/assets/images/sw/rplus2/task/roboplus_task2_083.jpg) ### Break Loop- This command is used when you wish to break from a loop.- This command can only be used within Endless Loop, Loop While, and Loop For statement.- It is the same concept as ‘break’ in C programming language. - The following is an example of using Break Loop when a wireless data arrives in order to break from the loop. When the program breaks from the loop, whichever code that follows is executed.  ![](/assets/images/sw/rplus2/task/roboplus_task2_084.jpg)## [Function(Sub-Routine)](#function-sub-routine)If a specific code is used repeatedly, or if you wish to classify an area of code as a unit that performs a specific behavior, you can group the lines of code as a Function.Refer to the following figure for details. ![](/assets/images/sw/rplus2/task/roboplus_task2_085.jpg)### Function/Call- If a specific code is used repeatedly, or if you wish to classify an area of code as a unit that performs a specific behavior, you can group the lines of code as a Function.- An adequate use of functions will make the code concise and easy to read.- A function that has been created can be used with “Call” instruction when needed.- Functions must be written outside of the main program routine.- In task, functions cannot configure input or output arguments- It is the same concept as a ‘function’ in C programming language. - The following is an example of making the action of blinking the LED as a function and using it.   ![](/assets/images/sw/rplus2/task/roboplus_task2_086.jpg)- The following is the process of selecting a function to call.   ![](/assets/images/sw/rplus2/task/roboplus_task2_087.jpg) - Functions cannot call itself within the same function.  ![](/assets/images/sw/rplus2/task/roboplus_task2_088.jpg) ### Return- This is an instruction used for exiting a function while it is being executed.- It can only be used inside a regular function and callback function.- It is the same concept as ‘return’ in C programming language. - The following is an example of a function being executed until the end without using Return.  ![](/assets/images/sw/rplus2/task/roboplus_task2_089.jpg) - The following is an example of a function being executed but encountering Return in the middle of executing the function, which will make the program exit the function.  ![](/assets/images/sw/rplus2/task/roboplus_task2_090.jpg) ### Callback- This is a function that is executed independently from the main program routine, executing itself periodically- Callback functions must be written outside of the main program routine.- Because it is not allowed to write code within a callback that takes too much time to execute, callback has restrictions in the use of Loops / Variables / Parameter Calls / volume of code.- The following restrictions must be met when using a callback function.  - Loops, Labels, Jumps, Calls are not allowed  - Communication with an external device is limited to a maximum of 2 times  - The code size of callback function cannot exceed 512 bytes - The following is an example of using the callback function to receive wireless data and save it to the variable “received data”.  ![](/assets/images/sw/rplus2/task/roboplus_task2_091.jpg)# [Programming(Parameters)](#programming-parameters)This section explains parameters used in R+ Task 2.0. It classifies the parameters that can be used by each device. Refer to the explanation and example codes of each item for details.## [Controllers](#controllers)### Accessory Device [Geared motor]- This is used to control the geared motor connected to the controller.- Each Controller model has a different set of devices that can be connected to it. Please refer to the Controller Functionality Comparison for more detail. Controller Functionality Comparison- **Direction** : CW (Clock Wise), CCW (Counter Clock Wise)- **Power** : The value ranges from 0 to 1023, where 0 means stop and 1023 is 100% power capacity.  ![](/assets/images/sw/rplus2/task/roboplus_task2_093.jpg) - The following example is controlling the geared motor.  ![](/assets/images/sw/rplus2/task/roboplus_task2_094.jpg) - The following example is using the geared motor to move the robot forward.   ![](/assets/images/sw/rplus2/task/roboplus_task2_095.jpg) ### Accessory Device [Servo motor : drive mode, speed, location]- This is used to control the servo motor connected to the controller.- Each Controller model has a different set of devices that can be connected to it. Please refer to the Controller Functionality Comparison for more detail. Controller Functionality Comparison- **Servo motor drive mode** : When the value is True, you can configure the servo motor’s location to situate it at a specific angle. When the value is False, you can configure the servo motor’s speed to rotate it at a specific speed.- **Servo motor speed** : Configures the speed of the servo motor.  ![](/assets/images/sw/rplus2/task/roboplus_task2_093.jpg) - **Servo motor location** : Configures the location of the servo motor.  ![](/assets/images/sw/rplus2/task/roboplus_task2_096.jpg) - The following is an example of controlling the servo motor’s location.  ![](/assets/images/sw/rplus2/task/roboplus_task2_097.jpg) - The following is an example of rotating the servo motor to control it as a wheel.  ![](/assets/images/sw/rplus2/task/roboplus_task2_098.jpg) ### Accessory Device : LED Module- This is used to control the LED module connected to the controller.- Each Controller model has a different set of devices that can be connected to it. Please refer to the Controller Functionality Comparison for more detail. Controller Functionality Comparison- User can turn on/off the Right LED or Left LED.  ![](/assets/images/sw/rplus2/task/roboplus_task2_099.jpg) - The following is an example of controlling the LED module.  ![](/assets/images/sw/rplus2/task/roboplus_task2_100.jpg) ### Accessory Devices : Various sensors- This is used to control the various sensors connected to the controller.- Each Controller model has a different set of sensors that can be connected to it. Please refer to the Controller Functionality Comparison for more detail. Controller Functionality Comparison- **Touch sensor** : used to detect whether there is contact with the touch sensor. (Returns True for contact, False for no contact)- [Touch Sensor Component Information]- The following is an example of using the touch sensor.[Touch Sensor Component Information]: /docs/en/parts/sensor/ts-10/  ![](/assets/images/sw/rplus2/task/roboplus_task2_101.jpg) - **Infrared sensor** : used to measure the distance with an object (The value ranges from 0 to 1023, where the value increases from 0 as the object gets closer.)- [Infrared Sensor Component Information]- The following is an example of using the infrared sensor.[Infrared Sensor Component Information]: /docs/en/parts/sensor/irss-10/  ![](/assets/images/sw/rplus2/task/roboplus_task2_102.jpg) - **Distance measurement sensor (DMS)** : used to measure the distance with an object  (The value ranges from 0 to 1023, where the value increases from 0 as the object gets closer.)- [Distance Measurement Sensor Component Information]- The following is an example of using the distance measurement sensor.[Distance Measurement Sensor Component Information]: /docs/en/parts/sensor/dms-80/  ![](/assets/images/sw/rplus2/task/roboplus_task2_103.jpg) - **Color sensor** : used to detect the color of an object- The list of colors that the color sensor detects is as follows  ![](/assets/images/sw/rplus2/task/roboplus_task2_104.jpg) - [Color Sensor Component Information]- The following is an example of using the color sensor.[Color Sensor Component Information]: /docs/en/parts/sensor/cs-10/  ![](/assets/images/sw/rplus2/task/roboplus_task2_105.jpg)- **Magnetic sensor** : used to detect whether there is a magnetic property for an objest.(Returns True for magnetic property detected, False for no magnetic property detected)- [Magnetic Sensor Component Information]- The following is an example of using the magnetic sensor.[Magnetic Sensor Component Information]: /docs/en/parts/sensor/mgss-10/   ![](/assets/images/sw/rplus2/task/roboplus_task2_106.jpg)- **Temperature sensor** : used to measure the temperature of an object- [Temperature Sensor Component Information]- The following is an example of using the temperature sensor.[Temperature Sensor Component Information]: /docs/en/parts/sensor/tps-10/  ![](/assets/images/sw/rplus2/task/roboplus_task2_107.jpg) - **Motion detection (Passive infrared) sensor** : used to detect the motion of an object- [Motion Detecting Sensor Component Information]- The following is an example of using the motion detection sensor.[Motion Detecting Sensor Component Information]: /docs/en/parts/sensor/pir-10/  ![](/assets/images/sw/rplus2/task/roboplus_task2_108.jpg) - **Temperature &amp; humidity (Thermo-hygro) sensor** : used to measure the temperature and humidity of an object. (temperature range : -20~120°C, humidity range : 0~100%)- The following is an example of using the temperature and humidity sensor.  ![](/assets/images/sw/rplus2/task/roboplus_task2_109.jpg) - **Illuminance sensor (CDS)** : used to measure the brightness of the surroundings.  (The value ranges from 0 to 1023, where the value increases from 0 as the surroundings gets brighter.)- The following is an example of using the illuminance sensor  ![](/assets/images/sw/rplus2/task/roboplus_task2_110.jpg) - **User device** : used to read the result value of the user-created sensor- Building a User Device- The following is an example of using the user device.   ![](/assets/images/sw/rplus2/task/roboplus_task2_111.jpg) ### Motion Control [Motion index number / Motion status / Joint offset / Turn on Joint LED automatically]- This section describes specific parameters for executing motions downloaded on controller via R+ Motion.- Only specific controllers support motion control. (Supported controllers : CM-200, CM-5, CM-510, CM-530, CM-700, OpenCM)- **Motion index number** : You can execute a motion by calling the corresponding Motion index number. If the Motion is being executed, you can read the current Motion index number.- The following is an example of using the Motion index number.  ![](/assets/images/sw/rplus2/task/roboplus_task2_112.jpg)- **Motion status** : returns True if motion is being executed, returns False if motion is not being executed- The following is an example of using the Motion status to wait until the motion finishes.  ![](/assets/images/sw/rplus2/task/roboplus_task2_113.jpg) - **Joint offset** : When a motion is executed, it adds a value between -255~255 to every joint. For instance, if the joint offset is -50 and the location values for the motion data have been set to 300 -&gt; 400 -&gt; 500, the location values will be changed to 250 -&gt; 350 -&gt; 450 and then executed.- The following is an example of applying an offset values to a specific joint.  ![](/assets/images/sw/rplus2/task/roboplus_task2_114.jpg) - The following is an example of configuring a specific joint to not be affected by the Motion data values.  ![](/assets/images/sw/rplus2/task/roboplus_task2_115.jpg) - **Turn on joint LED automatically** : used to turn on/off the dynamic cell’s LED while a Motion is being executed. This feature is only supported in OpenCM 9.04- The following is an example of using the “turn on joint LED automatically” function when executing a Motion.- The following is an example of executing a Motion that is saved in the Controller.  ![](/assets/images/sw/rplus2/task/roboplus_task2_116.jpg) - Pressing different buttons on the Remote Controller will execute their corresponding Motions.  ![](/assets/images/sw/rplus2/task/roboplus_task2_117.jpg) ### Built-in Sensor1 [Result of sound counter / Real-time sound counter]- This is a function that uses the Controller’s embedded mic to detect and count each time a sound that is louder than a certain level occurs. For instance, it can detect and count clapping sounds to make the robot move in a certain way.- Each Controller model supports different types of sensors. Please refer to each Controller’s manual for more detail. (CM-100A, CM-150, CM-200, CM-5, CM-510, CM-530, CM-700, OpenCM)- **Result of sound counter** : This counts the total number of times sound was detected. If you want to reset the counter, you can insert 0 manually.- The following is an example of using the Result of Sound Counter.  ![](/assets/images/sw/rplus2/task/roboplus_task2_118.jpg) - **Real-time sound counter** : This counts the number of times sound was detected in real-time. If no sound is detected for 0.8 seconds, the counter is reset to 0.- The following is an example of using the Real-time Sound Counter.  ![](/assets/images/sw/rplus2/task/roboplus_task2_119.jpg) ### Built-in Sensor 2 [Left infrared sensor / Center infrared sensor / Right infrared sensor]- This is used to read the value of the infrared sensor embedded in the Controller- The value of the infrared sensor ranges from 0 to 1023, where the value increases from 0 as the object gets closer.- Each Controller model supports different types of sensors. Please refer to each Controller’s manual for more detail. (CM-100A, CM-150, CM-200, CM-5, CM-510, CM-530, CM-700, OpenCM)- **Left infrared sensor** : used to read the value of the infrared sensor located at the bottom left side of the Controller- **Center infrared sensor** : used to read the value of the infrared sensor located at the front and center of the Controller- **Right infrared sensor** : used to read the value of the infrared sensor located at the bottom right side of the Controller - The following is an example of using the values of the infrared sensors of the Controller.  ![](/assets/images/sw/rplus2/task/roboplus_task2_120.jpg) ### Built-in Sensor 3 [Start button counter / Controller button]- This is used to read the value of buttons embedded in the Controller.- Each Controller model supports different types of sensors. Please refer to each Controller’s manual for more detail. (CM-100A, CM-150, CM-200, CM-5, CM-510, CM-530, CM-700, OpenCM)- **Start button counter** : This is used to read the number of times the Start button was rapidly pressed when the Controller was first turned on. The value of the Start Button Counter ranges from 0 to 255.- The following is an example of using the Start button counter.  ![](/assets/images/sw/rplus2/task/roboplus_task2_121.jpg)- **Controller button** : This is used to read the status of the Controller’s buttons. Each Controller mode has different buttons you can use.- The following is an example of using buttons for CM-5, CM-510, CM-530.  ![](/assets/images/sw/rplus2/task/roboplus_task2_122.jpg) - The following is an example of using buttons for OpenCM9.04.  ![](/assets/images/sw/rplus2/task/roboplus_task2_123.jpg) ### Buzzer [Buzzer index / Buzzer timer]- This is used to play a musical scale or melody using the Buzzer embedded in the Controller.- The **Buzzer timer** should be configured first and then the type of Buzzer (or **Buzzer index**) configured afterwards for the Buzzer to work properly.- The following figure shows the screens to select the type of buzzer.  ![](/assets/images/sw/rplus2/task/roboplus_task2_124.jpg) - The following is an example of playing a musical scale from the Controller. When playing a musical scale, the Buzzer timer can be set between 0~5 seconds.  ![](/assets/images/sw/rplus2/task/roboplus_task2_125.jpg) - The following is an example of playing a melody from the Controller.When playing a melody, the Buzzer timer should be set as the melody’s run time.    ![](/assets/images/sw/rplus2/task/roboplus_task2_126.jpg) ### Remote controller [Received wireless data, Wireless data to send / Wireless ID / RC-100 channel]- These are the parameters that send and receive data with external devices using the wireless communication module (Bluetooth, infrared, ZigBee) connected to the Controller.- It is generally used when controlling a robot with theRC-100 or smartphone virtual remote controller, but it can also be used to communicate with a user developed software.- The range of the data value that can be sent and received is restricted from 0 to 65535. (2 bytes)- **Received wireless data** : used when the Controller receives data from the outside  ![](/assets/images/sw/rplus2/task/roboplus_task2_127.jpg)- **Wireless data to send** : used when the Controller sends data to the outside  ![](/assets/images/sw/rplus2/task/roboplus_task2_128.jpg) - **New wireless data arrived** : when the Controller receives data from the outside, it returns the value True  ![](/assets/images/sw/rplus2/task/roboplus_task2_129.jpg) - **My robot’s wireless ID (My ID)** : when using ZigBee, it checks my robot’s ZigBee ID  ![](/assets/images/sw/rplus2/task/roboplus_task2_130.jpg) - **Pairing robot’s wireless ID (Remocon ID)** : when using ZigBee, it sets the pairing robot’s ZigBee ID  ![](/assets/images/sw/rplus2/task/roboplus_task2_131.jpg) - **RC-100 channel** : when using an infrared receiver, it sets the channel’s value(if the value is 255, it will operate in Bluetooth/ZigBee mode)  ![](/assets/images/sw/rplus2/task/roboplus_task2_132.jpg) - The following is an example of processing a wireless data received from the Controller  ![](/assets/images/sw/rplus2/task/roboplus_task2_133.jpg) - The following is an example of the Controller sending data to the outside  ![](/assets/images/sw/rplus2/task/roboplus_task2_134.jpg)  ### Timer [Timer / Precision (High-resolution) timer / Powersave timer]- Timer and Precision timer are used to configure the value of a count-down timer on the Controller. - **Timer** : This is used to set the value of a count-down timer on the Controller. The value of the Timer ranges from 0 to 255, and the unit is 0.128 seconds.- The following is an example of using Timer to wait approximately 1 second (1.024 seconds).  ![](/assets/images/sw/rplus2/task/roboplus_task2_135.jpg) - **Precision timer** : This has the same function as Timer but counts the time more precisely. The value of the Timer ranges from 0 to 65535, and the unit is 0.001 second.- The following is an example of using Precision Timer to wait exactly 1 second (1.000 second).  ![](/assets/images/sw/rplus2/task/roboplus_task2_136.jpg) - **Powersave timer** : This is used for the Controller’s sleep mode function. The value of the Powersave Timer ranges from 0 to 255, and the unit is 1 minute.- The following is an example of using Powersave Timer to configure sleep mode for the Controller. If a new wireless data arrives within 5 minutes, it resets the Powersave Timer value.  ![](/assets/images/sw/rplus2/task/roboplus_task2_137.jpg)  ### Miscellaneous [Random number / Built-in LED / Print screen / Print screen with line]- Random number : This is used to generate a random number between 0 and a maximum value. You can set a number as the maximum value. The range of the maximum value is from 0 to 255- The following is an example of using Random Number to execute a random motion. This is done by generating a random number between 0 and 15 to execute a corresponding motion.  ![](/assets/images/sw/rplus2/task/roboplus_task2_138.jpg) - **Built-in LED** : used to control the build-in LED (Aux LED)- The following is an example of using a built-in LED. It is turning the built-in LED on and off every 0.512 second interval.  ![](/assets/images/sw/rplus2/task/roboplus_task2_139.jpg) - **Print screen** : used to check a specific value from the task code on the screen- **Print screen with line** : used to check a specific value from the task code on the screen, and afterwards change lines- The following is an example of using Print Screen and Print Screen with Line to print the sensors’ values.   ![](/assets/images/sw/rplus2/task/roboplus_task2_140.jpg)    ![](/assets/images/sw/rplus2/task/roboplus_task2_141.jpg)## [Dynamixel](#dynamixel)These are the parameters for reading/writing the values of the Dynamixel control table. Please refer to the Dynamixel&#39;s Control Table for more detail. Dynamixel ### Dynamixel actuator- **Turn Torque On/Off** : used to turn the Dynamixel Torque on/off   Torque is turned on when True, Torque is turned off when False. - The following is an example of turning on the Torque of Dynamixel with ID number 1 when the Controller’s button is pressed.  ![](/assets/images/sw/rplus2/task/roboplus_task2_142.jpg)- **LED** : used to turn the Dynamixel LED on/off     LED is turned on when True, LED is turned off when False. - **CW margin / CCW margin** : used to read/configure the Dynamixel Margin value     The range of the value is from 0 to 255, but it is recommended not to change the default value (1).     Please refer to the Dynamixel Control Table for more detail. - **CW slope / CCW slope** : used to read/configure the Dynamixel Slope value     There are a total of seven phases which the value can be set to, and the representative values of each phase are set as in the table below.     Please refer to the Dynamixel Control Table for more detail. |Level|Real Data Value|Representative Data Value||:---:|:---:|:---:||1|0 (0x00) ~ 3(0x03)|2 (0x02)||2|4(0x04) ~ 7(0x07)|4 (0x04)||3|8(0x08)~15(0x0F)|8 (0x08)||4|16(0x10)~31(0x1F)|16 (0x10)||5|32(0x20)~63(0x3F)|32 (0x20)||6|64(0x40)~127(0x7F)|64 (0x40)||7|128(0x80)~254(0xFE)|128 (0x80)|  - **P gain / I gain/ D gain** : used to read/configure the Dynamixel PID values     P gain refers to Proportional Gain, for which the smaller the value is the larger the clearance gets, and the power level decreases near the target location.     I gain refers to Integral Gain, and D gain refers to Derivative Gain. - **Target position** : used to read/configure the Dynamixel target position     The “motor position value” control can be used to designate the angle position as shown below.   ![](/assets/images/sw/rplus2/task/roboplus_task2_143.jpg) - Moving speed : used to read/configure the Dynamixel speed     The “motor control value” control can be used to designate the rotation direction and power value as shown below.   ![](/assets/images/sw/rplus2/task/roboplus_task2_144.jpg) - **Torque limit** : used to read/configure the Dynamixel torque limit- **Current position** : used to read the Dynamixel current position- **Current speed** : used to read the Dynamixel current speed- **Current weight** : used to read the Dynamixel current weight- **Current voltage** : used to read the Dynamixel current voltage- **Current temperature** : used to read the Dynamixel current temperature- **Check movement** : used to read the Dynamixel movement status. Returns True for movement, False for no movement. - **Parameters that can be used for DX/RX/AX series** : Turn torque on/off, LED, CW margin / CCW margin, CW slope / CCW slope, Target position, Moving speed, Torque limit, Current position, Current speed, Current weight, Current voltage, Current temperature, Check movement - **Parameters that can be used for MX series** : Turn torque on/off, LED, P gain / I gain / D gain, Target position, Moving speed, Torque limit, Current position, Current speed, Current weight, Current voltage, Current temperature, Check movement - **Parameters that can be used for XL series** : Turn torque on/off, LED, P gain / I gain / D gain, Target position, Moving speed, Torque limit, Current position, Current speed, Current weight, Current voltage, Current temperature, Check movement   ### Infrared sensor array- **Infrared sensor value (numbers 1~7)** : used to read the infrared sensor value from the infrared sensor array    The measured value can vary depending on the color or texture of the wall or object, and the sensor is optimized for use within 0 to 5 cm.- **Infrared detection standard value (numbers 1~7)** : used as the standard values for the infrared sensor array to determine whether the color is white or black. ||Black detection|LED||:----:|:---:|:---:||Sensor value  set value| BIT 0|OFF| - **Buzzer index** : used to configure the type of Buzzer for the infrared sensor array- **Buzzer timer** : used to configure the duration of the Buzzer sound in the case that the infrared sensor array’s Buzzer is used.   The Buzzer timer should be configured first and then the type of Buzzer (or Buzzer index) configured afterwards for the Buzzer to work properly. - **Auto configuration of detection standard value** : used to define the beginning and end of auto-searching the detection standard values of the color black Refer to the example below for more detail.- **Infrared object detection result** : used to read whether an object has been detection in the infrared sensor array|Binary value|Decimal value|Black detection||:---:|:---:|:---:||0000001|1|Black detection for IR sensor #1||0000010|2|Black detection for IR sensor #2||0000100|4|Black detection for IR sensor #3||0001000|8|Black detection for IR sensor #4||0010000|16|Black detection for IR sensor #5||0100000|32|Black detection for IR sensor #6||1000000|64|Black detection for IR sensor #7|   Use can check the value while looking at the screen as shown below.![](/assets/images/sw/rplus2/task/roboplus_task2_145.jpg) ### Custom- User can access the address of an external device such as a Dynamixel directly to perform read/write tasks. - User can read/write by selecting the specified address in units of Byte, Word, or DWord.Write or read in Byte or DWORD variable to write/read on user accessed address - Please refer to the Dynamixel Control Table for more detail.## [Common](#common)These are basic variables and constants that can be used in every device. ### Variable- This is a storage space within the program where you can write and read many data.- Using a variable can be convenient when a number has to be remembered/recorded or when a common value has to be changed in multiple parts at once.- The following is an example of using variables.    ![](/assets/images/sw/rplus2/task/roboplus_task2_146.jpg) ### Number (Decimal number)- This is used when a number has to be input directly within the program.- It is mainly used in a conditional clause to compare values.- The value ranges from -2147483648 to 4294967295.  ![](/assets/images/sw/rplus2/task/roboplus_task2_147.jpg) ### True/False-  This is used when a True/False value has to be input directly within the program.- It is mainly used in a conditional clause to compare status.- The value ranges from 0~1. False is 0, and True is 1.  ![](/assets/images/sw/rplus2/task/roboplus_task2_148.jpg) ### Binary number- This is used when a number has to be input directly within the program.- It is mainly used when a bit computation is required, and it is express in binary format.- The value ranges from 0 to 4294967295. (Hex : 00 00 00 00 ~ FF FF FF FF)  ![](/assets/images/sw/rplus2/task/roboplus_task2_149.jpg)# [Useful Tips](#useful-tips)## [Search Variables/Functions](#search-variablesfunctions)This is a feature to find the location where a variable or function has been used. It provides the option to change the name of each variable or function. 1. Click the &quot;Variable (or Function)&quot; button on the right. (There must be at least one variable or function.)2. Select the target that you wish to find reference in the &quot;Variables list (or Functions list)&quot;3. You can check the locations at which the selected variable (or function) has been used in the “Reference Results” field    ![](/assets/images/sw/rplus2/task/roboplus_task2_150.jpg) 4. If you select one of the results in the “Reference Results” field, it will take you to the specific location within the source code.5. If you click the &quot;Rename&quot; button at the top, you can change the name of the variable (or function) for the whole source code.    ![](/assets/images/sw/rplus2/task/roboplus_task2_151.jpg)## [Search Keyword](#search-keyword)This is a function to search for components used in the program code. 1. Click the Search button at the bottom right.2. Type the search word in the search bar that appears on top.    ![](/assets/images/sw/rplus2/task/roboplus_task2_152.jpg) 3. In the task code, the &quot;search result&quot; will be shown as a list below.4. If you click on an item in the list, it will move to that line.    ![](/assets/images/sw/rplus2/task/roboplus_task2_153.jpg)## [Grammar/Compile Check](#grammarcompile-check)In order to download the task code to the controller, it must go through a grammar check and compile process. If you try to download to the controller or click the &quot;Error&quot; button, it will run the grammar check and compile process automatically. - **Grammar Check** : This is the process of examining whether the instructions used in the task code are compatible instructions with the controller, and whether there are any errors in the grammar.    All errors must be corrected before it can move on to the next step.- **Compilation** : This is the process of converting the code that has finished grammar check into a machine language that the controller can interpret.    The number of variables, callback usage, and memory usage are examined during the compilation process.![](/assets/images/sw/rplus2/task/roboplus_task2_154.jpg)## [FAQ](#faq)1. Supported Products?  &gt; ROBOTIS DREAM    &gt; ROBOTIS STEM    &gt; ROBOTIS PREMIUM    &gt; ROBOTIS GP    &gt; ROBOTIS MINI    &gt; Robots created by the user using CM-150, CM-200, CM-510, CM-530, CM-700, OpenCM9.04C 2. Can TSK files that were used in the previous Task 1.0 also be used on Task 2.0?  &gt; Yes. However, if you load a previous TSK file into Task 2.0 and save it again, it will be converted to a TSKX format so it will no longer be compatible with Task 1.0. 3. The controller will not shut down after downloading a task. What should I do?  &gt; In R + Task 2.0, when you download a task the task is executed. (For controllers : CM-150, OpenCM9.04, OpenCM7.0…) 4. Can I use Bluetooth module in R+ Task 2.0?  &gt; Support of Bluetooth module is different for each controller, so please refer to the specifications of each Bluetooth module: BT-110, BT-210, BT-410 5. The controller does not connect well. What should I do?  &gt; Restart the controller by turning it off and then on, and try again. If the problem continues, please update the controller&#39;s firmware to the latest version. Controller Firmware Update 6. I do not want to see the help animation any more. What should I do?  &gt; Go to Home Tab -&gt; Settings Menu and uncheck the option &quot;Tutorials&quot; and the help animation will not appear anymore.",
        "url": " http://localhost:4000/docs/en/software/rplus2/task/"
      } ,
  
      "docs-en-software-rplus1-task-task-misc":  {
        "title": "R+ Task 1.0",
      "content"	 : "# [Miscellenous](#miscellenous)## [Select Controller](#select-controller)The commands and parameters that can be used in RoboPlus Task depend on the controller.  Therefore, a controller must be selected before creating a program.![select controller][select_controller]- If you change the controller while you are writing a program for another controller, errors may be raised during the &quot;rule check&quot; process.- To use a program designed for another controller, the incompatible commands and parameters must be changed accordingly.## [Rule Check](#rule-check)Rule check is the process to verify that the task code has been written appropriately according to the rules.  RoboPlus Task has a function that checks for grammatical errors and prints the causes and locations of errors.  An example of a grammatical error and its location is shown below.```=== Sentence Check(ollo_bug_product_en) ===Line:13 Please select a device or number.=== Tottal Error: 1 ===```Double-click on the error message to move to the location of the error.### [Errors](#errors)The following is a list of grammatical errors1. [Select the number or device](#error_01)2. [Block beginning doesn&#39;t exist](#error_02)3. [A block must be designated](#error_03)4. [Only 1 &quot;Start Program&quot; is permitted](#error_04)5. [&quot;Start Program&quot; cannot be defined in a block](#error_05)6. [A function cannot be defined in a block](#error_06)7. [A command to execute the designated block does not exist](#error_07)8. [This line should be included in a block](#error_08)9. [The start and end of the block are not paired](#error_09)10. [&quot;Start Program&quot; does not exist](#error_10)11. [A function with the same name already exists](#error_11)12. [&quot;Restoration&quot; can only be used in a function](#error_12)13. [A label with same name already exists](#error_13)14. [A function cannot call itself](#error_14)15. [&quot;If/If else&quot; has been used improperly](#error_15)16. [There is no loop to end](#error_16)17. [A block must consist of at least one command](#error_17)18. [A jump to another block is not permitted](#error_18)19. [The called function does not exist](#error_19)20. [Only 1 callback function may exist](#error_20)21. [A callback function cannot be defined in a block](#error_21)22. [This command cannot be used in a callback function](#error_22)23. [This device cannot be used in a callback function](#error_23)24. [This command cannot be used with the selected controller](#error_24)25. [There is a device which cannot be used with the selected controller](#error_25)### [Solutions](#solutions)1. Select the number or device    | Cause of Error | Solution |    | :---: | :---: |    |The parameter has not been set|Properly set to a unset parameter|    |![img_01][img_01]|![img_02][img_02]|2. Block beginning doesn&#39;t exist    | Cause of Error | Solution |    | :---: | :---: |    |A block does not exist in a command line|Properly set the block|    |![img_03][img_03]|![img_04][img_04]|3. A block must be designated    | Cause of Error | Solution |    | :---: | :---: |    |A duplicate block without a command line|Properly set the block|    |![img_05][img_05]|![img_06][img_06]|4. Only 1 &quot;Start Program&quot; is permitted    | Cause of Error | Solution |    | :---: | :---: |    |Two or more “Start Program” exists|Create only one “Start Program”|    |![img_07][img_07]|![img_08][img_08]|5. &quot;Start Program&quot; cannot be defined in a block    | Cause of Error | Solution |    | :---: | :---: |    |“Start Program” exists in the block|Remove the block from the “Start Program”|    |![img_09][img_09]|![img_10][img_10]|6. A function cannot be defined in a block    | Cause of Error | Solution |    | :---: | :---: |    |Function is located within a block|Remove the function from the block|    |![img_11][img_11]|![img_12][img_12]|7. A command to execute the designated block does not exist    | Cause of Error | Solution |    | :---: | :---: |    |Block exists without a command or condition line|Added the omitted command or delete|    |![img_13][img_13]|![img_14][img_14]|8. This line should be included in a block    | Cause of Error | Solution |    | :---: | :---: |    |A command without a block is located outermost|Move the command to a proper location or delete|    |![img_15][img_15]|![img_16][img_16]|9. The start and end of the block are not paired    | Cause of Error | Solution |    | :---: | :---: |    |The start and end of the block are not paired|Please set the area properly|    |![img_17][img_17]|![img_18][img_18]|10. &quot;Start Program&quot; does not exist    | Cause of Error | Solution |    | :---: | :---: |    |“Start Program” does not exist|Create a “Start Program”|    |![img_19][img_19]|![img_20][img_20]|11. A function with the same name already exists    | Cause of Error | Solution |    | :---: | :---: |    |A label with the same name already exists|Change duplicate function name or delete|    |![img_21][img_21]|![img_22][img_22]|12. &quot;Restoration&quot; can only be used in a function    | Cause of Error | Solution |    | :---: | :---: |    |The restoration command is used in a location other than a function|Create a restoration command within a function or delete|    |![img_23][img_23]|![img_24][img_24]|13. A label with same name already exists    | Cause of Error | Solution |    | :---: | :---: |    |Duplicate label name exists|Set to a different name or delete|    |![img_25][img_25]|![img_26][img_26]|14. A function cannot call itself    | Cause of Error | Solution |    | :---: | :---: |    |The function is called within the function|Replace with a proper command or delete|    |![img_27][img_27]|![img_28][img_28]|15. &quot;If/If else&quot; has been used improperly    | Cause of Error | Solution |    | :---: | :---: |    |If else/ If has been used without Else|Revised according to usage If, Else If, Either|    |![img_29][img_29]|![img_30][img_30]|16. There is no loop to end    | Cause of Error | Solution |    | :---: | :---: |    |The &quot;End Repeat&quot; command is used at a location other than a loop|End Repeat command can only be used within the loop, delete if unnecessary|    |![img_31][img_31]|![img_32][img_32]|17. A block must consist of at least one command    | Cause of Error | Solution |    | :---: | :---: |    |A line does not exist behind a command that is required by a block|Add a line required behind the command or delete|    |![img_33][img_33]|![img_34][img_34]|18. A jump to another block is not permitted    | Cause of Error | Solution |    | :---: | :---: |    |The label you wish to jump to is unavailable in the function|Jump to a label within a function or delete|    |![img_35][img_35]|![img_36][img_36]|19. The called function does not exist    | Cause of Error | Solution |    | :---: | :---: |    |The called function does not exist|Create a function or delete|    |![img_37][img_37]|![img_38][img_38]|20. Only 1 callback function may exist    | Cause of Error | Solution |    | :---: | :---: |    |Two or more callback functions exist|Create only one callback function|    |![img_39][img_39]|![img_40][img_40]|21. A callback function cannot be defined in a block    | Cause of Error | Solution |    | :---: | :---: |    |Callback located in the block|Remove callback from block|    |![img_41][img_41]|![img_42][img_42]|22. This command cannot be used in a callback function    | Cause of Error | Solution |    | :---: | :---: |    |Improper command located in callback|The corresponding command has been deleted|    |![img_43][img_43]|![img_44][img_44]|23. This device cannot be used in a callback function    | Cause of Error | Solution |    | :---: | :---: |    |An unusable parameter located in callback|Delete corresponding parameter|    |![img_45][img_45]|![img_46][img_46]|24. This command cannot be used with the selected controller    | Cause of Error | Solution |    | :---: | :---: |    |Unsupported command being used in the current controller|Delete corresponding command or set to supported controller|    |![img_47][img_47]|![img_48][img_48]|25. There is a device which cannot be used with the selected controller    | Cause of Error | Solution |    | :---: | :---: |    |Unusable parameter being used in the controller|Either deleted the corresponding parameter or set to a controller which is supported|    |![img_49][img_49]|![img_50][img_50]|## [Error Messages](#error-messages)The following table provides a list of errors you may see while writing codes and printing the output on the screen with RoboPlus Task.|Error Code|Description|Output Example|| :---: | :--- | :--- ||8100|Trying to communicate with an unconnected Dynamixel ID.If it is connected, please check the cable again.|**{[ERROR:8100:0005:03]}**8100 : Error Code0005 : The Dynamixel ID03 : Confidential Information||0009|Too many consecutive function calls. (More than 6 times)|**{[ERROR:0009:0033:06]}**0009 : Error Code0033 :Confidential Information06 : Confidential Information||8001|Attempting to read an address of the controller designated as &quot;write only&quot;.|**{[ERROR:8001:000C:02]}**8001 : Error Code000C : Confidential Information02 : Confidential Information||8002|Attempting to write at an address of the controller designated as &quot;read only&quot;.|**{[ERROR:8002:0009:02]}**8002 : Error Code0009 : Confidential Information02 :  Confidential Information||None|Motion page to execute does not exist.|**[Invalid Page Read:00FE]**00FE : Motion page number (hexadecimal)|[select_controller]: /assets/images/sw/rplus1/task/task_select_controller.png[img_01]: /assets/images/sw/rplus1/task/task_rule_error_001.png[img_02]: /assets/images/sw/rplus1/task/task_rule_error_002.png[img_03]: /assets/images/sw/rplus1/task/task_rule_error_003.png[img_04]: /assets/images/sw/rplus1/task/task_rule_error_004.png[img_05]: /assets/images/sw/rplus1/task/task_rule_error_005.png[img_06]: /assets/images/sw/rplus1/task/task_rule_error_006.png[img_07]: /assets/images/sw/rplus1/task/task_rule_error_007.png[img_08]: /assets/images/sw/rplus1/task/task_rule_error_008.png[img_09]: /assets/images/sw/rplus1/task/task_rule_error_009.png[img_10]: /assets/images/sw/rplus1/task/task_rule_error_010.png[img_11]: /assets/images/sw/rplus1/task/task_rule_error_011.png[img_12]: /assets/images/sw/rplus1/task/task_rule_error_012.png[img_13]: /assets/images/sw/rplus1/task/task_rule_error_013.png[img_14]: /assets/images/sw/rplus1/task/task_rule_error_014.png[img_15]: /assets/images/sw/rplus1/task/task_rule_error_015.png[img_16]: /assets/images/sw/rplus1/task/task_rule_error_016.png[img_17]: /assets/images/sw/rplus1/task/task_rule_error_017.png[img_18]: /assets/images/sw/rplus1/task/task_rule_error_018.png[img_19]: /assets/images/sw/rplus1/task/task_rule_error_019.png[img_20]: /assets/images/sw/rplus1/task/task_rule_error_020.png[img_21]: /assets/images/sw/rplus1/task/task_rule_error_021.png[img_22]: /assets/images/sw/rplus1/task/task_rule_error_022.png[img_23]: /assets/images/sw/rplus1/task/task_rule_error_023.png[img_24]: /assets/images/sw/rplus1/task/task_rule_error_024.png[img_25]: /assets/images/sw/rplus1/task/task_rule_error_025.png[img_26]: /assets/images/sw/rplus1/task/task_rule_error_026.png[img_27]: /assets/images/sw/rplus1/task/task_rule_error_027.png[img_28]: /assets/images/sw/rplus1/task/task_rule_error_028.png[img_29]: /assets/images/sw/rplus1/task/task_rule_error_029.png[img_30]: /assets/images/sw/rplus1/task/task_rule_error_030.png[img_31]: /assets/images/sw/rplus1/task/task_rule_error_031.png[img_32]: /assets/images/sw/rplus1/task/task_rule_error_032.png[img_33]: /assets/images/sw/rplus1/task/task_rule_error_033.png[img_34]: /assets/images/sw/rplus1/task/task_rule_error_034.png[img_35]: /assets/images/sw/rplus1/task/task_rule_error_035.png[img_36]: /assets/images/sw/rplus1/task/task_rule_error_036.png[img_37]: /assets/images/sw/rplus1/task/task_rule_error_037.png[img_38]: /assets/images/sw/rplus1/task/task_rule_error_038.png[img_39]: /assets/images/sw/rplus1/task/task_rule_error_039.png[img_40]: /assets/images/sw/rplus1/task/task_rule_error_040.png[img_41]: /assets/images/sw/rplus1/task/task_rule_error_041.png[img_42]: /assets/images/sw/rplus1/task/task_rule_error_042.png[img_43]: /assets/images/sw/rplus1/task/task_rule_error_043.png[img_44]: /assets/images/sw/rplus1/task/task_rule_error_044.png[img_45]: /assets/images/sw/rplus1/task/task_rule_error_045.png[img_46]: /assets/images/sw/rplus1/task/task_rule_error_046.png[img_47]: /assets/images/sw/rplus1/task/task_rule_error_047.png[img_48]: /assets/images/sw/rplus1/task/task_rule_error_048.png[img_49]: /assets/images/sw/rplus1/task/task_rule_error_049.png[img_50]: /assets/images/sw/rplus1/task/task_rule_error_050.png",
        "url": " http://localhost:4000/docs/en/software/rplus1/task/task_misc/"
      } ,
  
      "docs-en-software-rplus1-terminal":  {
        "title": "R+ Terminal",
      "content"	 : "# [Introduction](#introduction)RoboPlus Terminal is a tool to help users to manipulate the controller by themselves through text-baed User-Interface. The terminal program communicates with the controller in the basis of ASCII code, and it prints various information transmitted by the controller for users.![](/assets/images/sw/rplus1/terminal/roboplus_terminal_001.png)# [Serial Port Setting](#serial-port-setting)The communication port must be set to connect to the controller using RoboPlus Terminal. If RoboPlus Terminal is started for the first time, the connection information is exactly restored.  If the name of serial port is changed or the serial port is used in other program, it may not be connected to the controller. If Setup – Connect are executed while the communication port is not connected, the port selection window  can be seen as below.  Select serial port and communication speed connected to the controller and click &quot;OK&quot;. `Note` The basic connection speed of the controller is 57,600bps.{: .notice} ![](/assets/images/sw/rplus1/terminal/roboplus_terminal_002.png) The serial communication setting of RoboPlus is as below.- Parity bit : no parity- Stop bit : 1bit- Data bit : 8bit- Hardware Control: none# [Processing Input](#processing-input)RoboPlus Terminal receives keyboard inputs and transmits the signals to PC and the connected controller through serial communication. The data pursuant to each key is as follows.- Special Keys|ASCII|Key||:---:|:---:||0x08|Backspace||0x0d, 0x0a|Enter||0x1b|ESC||0x1b, 0x5b, 0x41|Cursor up||0x1b, 0x5b, 0x42|Cursor down||0x1b, 0x5b, 0x43|Cursor right||0x1b, 0x5b, 0x44|Cursor left||0x1b, 0x5b, 0x48|Home||0x1b, 0x5b, 0x4b|End|- Other alphabet keys besides above transmit relevant ASCII code. (Korean and Uni-Code are not supported.) ## Clearing ScreenScreen clearing function is supported in RoboPlus Terminal.  Execute &quot;Clear Screen&quot; command in the menu to erase the complete screen.![](/assets/images/sw/rplus1/terminal/roboplus_terminal_003.png)# [Processing Controller Output](#processing-controller-output)RoboPlus Terminal receives signals from connected controller and prints the contents on the screen. ![](/assets/images/sw/rplus1/terminal/roboplus_terminal_004.png) ## Controlling Cursor- The size of terminal screen is 80x36.(Width x Length)- The cursor control string is as below, and it is the same as ANSI cursor control method.  If letters are transmitted as the following type, RoboPlus Terminal moves the cursor to the designated location. (The code of &quot;ESC&quot; key is 27.)  ESC[Y;XH or ESC[Y;Xf    e.g.) 27[10:20f =&gt; moves to X=20, Y=10 (The screen coordinates index is started from 1.)- Generally -used control strings are as below.|ASCII|Key||:---:|:---:||0x08|Backspace: Moves the cursor 1 space back||0x0a|/LF: Moves the cursor to the first position of the next line||0x0d|/CR: Moves the cursor to the first position of the same line||0x20|Space: Moves the cursor to the next letter||0x21 ~ 0x7e|Prints ASCII letters ( from ! to  ~)|# [Transmitting/Receiving Data](#transmittingreceiving-data)RoboPlus Terminal can transmit/receive large data to/from the connected controller.  There is no data transmission protocol.![](/assets/images/sw/rplus1/terminal/roboplus_terminal_005.png)## Transmitting DataRoboPlus Terminal can transmit the contents of files to the connected controller as binary format.  If the extension is hex, it is changed into binary and transmitted based on Intel HEX format.  Other extensions are just transmitted without changing.  The file transmission procedure is as below.- Prepare the connected controller to receive the data.- Select &quot;Transmit file&quot; in the menu.- Select files for transmission.- If the recently transmitted file is just used, &quot;Page Down&quot; key can be used as the shortcut.- The transmission status can be checked on the bottom part of RoboPlus Terminal.![](/assets/images/sw/rplus1/terminal/roboplus_terminal_006.png) ### ByteSumThe loss possibility of transmitted data can be checked using ByteSum.  ByteSum means the last 1 byte of the sum when all transmitted byte-unit data are added.  For example, if FD 23 4D 2D is transmitted, the sum of each data is 01 9A.  From the sum, 9A (the lowest byte) is ByteSum. ![](/assets/images/sw/rplus1/terminal/roboplus_terminal_007.png) In the menu, if Bytesum is marked, Bytesum packet is added to the last part of the file packet and when it is transmitted.  The loss possibility of data can be checked by comparing the bytesum received from RoboPlus Terminal and calculated bytesum in the data-received controller. ## Receiving DataRoboPlus Terminal can receive data from the connected controller and save them as files. The file reception procedure is as below.- Select &quot;Receive File&quot; in the menu.- Select the file name to save.- If the recently saved file is just used, &quot;Page Up&quot; key can be used as the shortcut.- Data transmission is started in the controller.- The reception status can be checked on the bottom part of RoboPlus Terminal.  ![](/assets/images/sw/rplus1/terminal/roboplus_terminal_008.png)- When the data reception is completed, press &quot;End&quot; key to quit the data reception.# [Setting Option](#setting-option)The options of RoboPlus Terminal can be set. ## Setting ColorsThe background and text colors of RoboPlus Terminal can be set.![](/assets/images/sw/rplus1/terminal/roboplus_terminal_009.png)",
        "url": " http://localhost:4000/docs/en/software/rplus1/terminal/"
      } ,
  
      "docs-en-platform-thormang3-thormang3-operation":  {
        "title": "THORMANG3",
      "content"	 : "# [THORMANG3 Operation](#thormang3-operation)## [Preparation](#preparation)### Time Synchronization (MPC)&gt; Reference : [ROS network Setup, 5. Timing issues](http://wiki.ros.org/ROS/NetworkSetup#Timing_issues.2C_TF_complaining_about_extrapolation_into_the_future.3F)1. Connect to the **MPC(Motion PC)**  - via ssh      1. Run below command on the terminal.        ```      ssh robotis@10.17.3.35      ```    2. Input password        `111111`     - via VNC     2. Synchronize time with the **PPC(Perception PC)**    - If this is the first synchronization, create the script file.       1. Create the script file with an editor.        ```      $ gedit ~/timesync      ```            2. Copy below contents in the script file.        ```bash      #! /bin/sh      sudo date --set=&#39;-2 secs&#39;      sudo ntpdate 10.17.3.35      sudo hwclock -w      ```          3. Modify the script file permission(Add execute permission)        ```      $ sudo chmod +x timesync      ```           4. Execute the script file to synchronize time.        ```      $ ~/timesync      ```            - If this is not the first synchronization, execute the script file.      ```    $ ~/timesync    ```### roscore (PPC)1. Connect to the **PPC**  - via ssh      1. Run below command on the terminal.        ```      ssh robotis@10.17.3.35      ```    2. Input password.        `111111`        - via VNC     2. Launch [roscore](http://wiki.ros.org/roscore)    Execute below command on the Terminal        ```  $ roscore  ```      - If `roscore` is terminated while it is running, relaunch `roscore`, `thormang3 sensors` and `thormang3 manager`.### thormang3 sensors (PPC)1. Connect to the **PPC**  2. Execute [thormang3_sensors.launch](https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-PPC/blob/master/thormang3_sensors/launch/thormang3_sensors.launch) file    ```  $ roslaunch thormang3_sensors thormang3_sensors.launch  ```  &gt; Reference : [thormang3_sensors]### THORMANG3 Manager (MPC)Turn on the actuator power before executing THORMANG3 Manager.  1. Connect to the **MPC**  2. Get superuser permission    ```  $ sudo bash  ```   3. Execute [thormang3_manager.launch](https://github.com/ROBOTIS-GIT/ROBOTIS-THORMANG-MPC/blob/master/thormang3_manager/launch/thormang3_manager.launch) file    ```  # roslaunch thormang3_manager thormang3_manager.launch  ```  &gt; Reference :: [thormang3_manager]  4. If program is loaded, torque of the actuator will be turned on.    - How to check thormang3 working    &gt; Reference 1 : [How to execute Simple Demonstration]      &gt; Reference 2 : [How to execute OPC&#39;s GUI program] ## [Simple Demo](#simple-demo)### [Manipulation Simple Demo](#manipulation-simple-demo)Simple demo of the [thormang3_manipulation_module]  #### Install &amp; Build  `Note` Reference : [PPC Installation]  {: .notice}#### Usage1. Connect to the PPC with SSH client program (IP: 10.17.3.35).     ```  $ ssh 10.17.3.35 -l robotis     ```2. You can execute simple demo with the following command.     ```  $ rosrun thormang3_manipulation_demo thormang3_manipulation_demo     ```3. There are 5 commands for simple demonstration.     - demo 1 : go to initial posture (from base module)       ```    $ rostopic pub -1 /robotis/manipulation_demo/command std_msgs/String &quot;ini_pose&quot;    ```    - demo 2 : set manipulation module      ```    $ rostopic pub -1 /robotis/manipulation_demo/command std_msgs/String &quot;set_mode&quot;    ```    - demo 3 : go to manipulation initial posture - Joint Space Control      ```    $ rostopic pub -1 /robotis/manipulation_demo/command std_msgs/String &quot;base_pose&quot;    ```    - demo 4 : move right arm (without torso) - Task Space Control      ```    $ rostopic pub -1 /robotis/manipulation_demo/command std_msgs/String &quot;right_arm&quot;    ```    - demo 5 : move left arm (with torso) - Task Space Control      ```    $ rostopic pub -1 /robotis/manipulation_demo/command std_msgs/String &quot;left_arm&quot;    ```### [Walking Simple Demo](#walking-simple-demo)Simple demo of the [thormang3_walking_module]#### Install &amp; Build  `Note` Reference : [PPC Installation]  {: .notice}#### Usage1. Connect to the PPC with SSH client program (IP: 10.17.3.35).     ```  $ ssh 10.17.3.35 -l robotis     ```2. You can execute simple demo with the following command.     ```  $ rosrun thormang3_walking_demo thormang3_walking_demo_node     ```3. There are 5 commands for simple demonstration.     - demo 1 : go to initial posture (from base module)       ```    $ rostopic pub -1 /robotis/walking_demo/command std_msgs/String &quot;ini_pose&quot;    ```  - demo 2 : set manipulation module    ```     $ rostopic pub -1 /robotis/walking_demo/command std_msgs/String &quot;set_mode&quot;    ```  - demo 3 : make balance algorithm enable/disable – Balance ON / OFF    ```     $ rostopic pub -1 /robotis/walking_demo/command std_msgs/String &quot;balance_on&quot;      $ rostopic pub -1 /robotis/walking_demo/command std_msgs/String &quot;balance_off&quot;       ```  - demo 4 : walk forward – One step forward walking (balance should be turned on)    ```     $ rostopic pub -1 /robotis/walking_demo/command std_msgs/String &quot;forward&quot;        ```  - demo 5 : walk backward – One step backward walking (balance should be turned on)    ```     $ rostopic pub -1 /robotis/walking_demo/command std_msgs/String &quot;backward&quot;        ```## [GUI Program](#gui-program)How to monitor and control THORMANG3 from the remote.### [What is OPC](#what-is-opc)![](/assets/images/platform/thormang3/thormang3_046.png)Operating PC is used to control the robot from the outside.#### Recommended PC Info  1. OS    - Ubuntu 16.04 LTS  2. ROS(Robot Operating System)    - version : kinetic    - installation(Desktop-Full) : [http://wiki.ros.org/kinetic/Installation/Ubuntu](http://wiki.ros.org/indigo/Installation/Ubuntu)    - environment setting : [http://wiki.ros.org/ROS/Tutorials/InstallingandConfiguringROSEnvironment](http://wiki.ros.org/ROS/Tutorials/InstallingandConfiguringROSEnvironment)  3. ROBOTIS ROS Package    &gt; Reference : [OPC Installation]    - [ROBOTIS-THORMANG-OPC]  - [ROSOTIS-THORMANG-Common]#### OPC Network setting    &gt; Reference : [Example Setting for OPC]  - IP Address : Static IP address is recommended    &gt; ex )  &gt; IP address: 10.17.3.100  &gt; Netmask : 255.255.255.0  &gt; Gateway : 10.17.3.1- ROS network environment setting  &gt; Reference : [ROS Network Setup](http://wiki.ros.org/ROS/NetworkSetup)  1. Open the bash file to configure environment      ```    $ gedit ~/.bashrc    ```2. Append below contents at the end of the `.bashrc` file      ```    # Set ROS Kinetic    source /opt/ros/kinetic/setup.bash    source ~/catkin_ws/devel/setup.bash    ##### Set ROS Network ####    # PPC CORE(10.17.3.35)    export ROS_MASTER_URI=http://10.17.3.35:11311     # local ROS IP    export ROS_IP=10.17.3.100    ```    &gt; ROS_MASTER_URI : PPC(10.17.3.35)      &gt; ROS_IP : OPC(10.17.3.100)  3. Use below command to apply modified configuration or open a new terminal window.      ```    $ source ~/.bashrc    ```### [Visualized Monitoring](#visualized-monitoring)#### Related ROS Packages  1. RViz    RViz is a 3D visualization tool for robots. Rviz visualizes robot&#39;s posture, camera image, pointcloud and sensor data.    &gt; Reference : http://wiki.ros.org/rviz2. Robot Model    ROS uses URDF(Unified Robot Description Format) robot model information.    &gt; Reference : http://wiki.ros.org/urdf  3. TF    TF is generated from Robot model information and each joint data. User can identify Robot&#39;s posture and relative position of each frame with TF.    &gt; Reference : http://wiki.ros.org/tf4. Other sensor related Packages    uvc_camera, urg_node, etc.  #### Run monitoring THORMANG3  1. Launch ROS program for THORMANG3    &gt; Reference : [How to run THORMANG3&#39;s program]2. Synchronize time with the PPC(Perception PC)    - If this is the first synchronization, create the script file.      - Create a script file with an editor.        ```      $ gedit ~/timesync      ```        - Copy below contents in the script file.        ```      #! /bin/sh      sudo date --set=&#39;-2 secs&#39;      sudo ntpdate 10.17.3.35      sudo hwclock -w      ```          &gt; PPC(10.17.3.35)      - Modify the script file permission(Add execute permission)        ```      $ sudo chmod +x timesync      ```    - Execute the script file to synchronize time.        ```      $ ~/timesync      ```  - If this is not the first synchronization, execute the script file.      ```    $ ~/timesync    ```3. Run Visualization Tool    User can monitor the robot with below command.    ```  $ roslaunch thormang3_description thormang3_opc.launch  ```![](/assets/images/platform/thormang3/thormang3_047.png)### [Remote Control(GUI Demo)](#remote-control-gui-demo)Demo program for remote control is provided.  Walking, manipulation, head control are provided.  1. Run thormang3 demo    The following command will launch the demo program.      ```    $ roslaunch thormand3_demo thormang3_demo.launch    ```2. Basic Operations  3. Switching Modes    The framework of THORMANG3 is consisted of multiple modules.    Switching mode will decide which module to use.  4. Move to `Mode` tab  5. Click the mode at the top to activate  6. Check all joints are switched to selected mode.      ![](/assets/images/platform/thormang3/thormang3_048.png)7. Initial Posture    In order to operate the robot safely, the robot should be operated from the initial posture.    Click `Robot Init Pose` button at the top of demo program(Effective regardless of current mode)      ![](/assets/images/platform/thormang3/thormang3_049.png)    ![](/assets/images/platform/thormang3/thormang3_050.png)### [Calibrate FT Sensors](#calibrate-ft-sensors)Instructions about how to calibrate FT Sensors on THORMANG3&#39;s feet. Balance Algorithm for walking works well when FT Sensors are calibrated.   #### Install &amp; Build  `Note` Reference : [OPC Installation]  {: .notice}#### Run &gt; Reference : [How to execute OPC&#39;s GUI program]#### Usage  1. Move to Robot Init Pose  - Click `Robot Init Pose` button on the top.      ![](/assets/images/platform/thormang3/thormang3_051.jpg)2. Measure FT Air    - After reaching to Robot Init Pose, click `FT Air` button to measure the Force Torque value in the air.  - **THORMANG3 must be hanging on the lift for this procedure.**    ![](/assets/images/platform/thormang3/thormang3_052.jpg)3. Measure FT Ground      - After completing previous procedure, click `FT Ground` button to measure the Force Torque on the ground.    - **THORMANG3 must be standing on the ground for this procedure.**    ![](/assets/images/platform/thormang3/thormang3_053.jpg)    - **Measured values are displayed on the left of GUID.**    - **If measured Fz value on the ground is greater than the measured value in the air by more than around 210N, it is normal.**    - **If the value is smaller than around 210N, repeat 1~3 procedure from above.**4. Apply Init FT  - After completing above procedures, click `Apply Init FT` button.  - Measured Force Torque values in the air and on the ground are transmitted to [thormang3_feet_ft_module] and FT Sensor calibration is completed.    ![](/assets/images/platform/thormang3/thormang3_054.jpg)5. Save FT Calibration  - If you want to save current calibration, click `Save FT calibration` button.    ![](/assets/images/platform/thormang3/thormang3_055.jpg)### [Operate Head Module](#operate-head-module)Instructions about controlling head of THORMANG3.  Lidar data(2D) can be assembled to PointCloud(3D) by moving the head with Head Control Mode.   User can manipulate head joints to move the sensor attached head.  #### How to operate Head Control module  - Assemble LaserScan    1. Change the Mode    2. Assemble    Click `Make PointCloud` button in the `Basic Control` of the demo program.          ![](/assets/images/platform/thormang3/thormang3_056.png)  3. Check the pointcloud      Assembled pointcloud can be seen on the RViz screen.      - Execute Visualization Tool      - Add topic        - Click `Add` button on the Display window on the left.        - Select `By topic` tab on the new window        - Select `/robotis/sensor/assembled_scan/PointCloud2`      - Check PointCloud on the 3D screen            ![](/assets/images/platform/thormang3/thormang3_057.png)- Head Joint Control    1. Change the Mode    2. Select `Head Control` tab of the demo program.    3. Change the value for specific joint.      ![](/assets/images/platform/thormang3/thormang3_058.png)### [Operate Manipulation Module](#operate-manipulation-module)Instructions about how to operate the manipulation module on the OPC GUI program.#### How to operate the Manipulation moduleManipulation Control Mode can control and receive feedback of the upper body.![](/assets/images/platform/thormang3/thormang3_059.png)##### Joint Space Control 1. Change the Mode    - Click `Manipulation` tab of the demo program.  2. Manipulation Initial Pose      - Click `Manipulation Init Pose` in the `Joint Control`.3. Update the value of specific joint.      - Select desired joint from `Joint Name`.      - Write target value in `Joint Value [deg]`.      - Click `Set Destination Joint Angle` button.     4. Obtain current joint value.      - Select desired joint from `Joint Name`.      - Click `Get Current Joint Angle` button.   ##### Task Space Control    1. Change the Mode    - Click `Manipulation` tab of the demo program.  2. Manipulation Initial Pose      - Click `Manipulation Init Pose` in the `Joint Control`.3. Write the target value of End effector.    - Select a specific group in the `Forward Kinematics` tab.      - write target value in the `Inverse Kinematics` tab.      - Click `Set Destination Position` button.     4. Obtain current value of End effector.  - Select a specific group in the `Forward Kinematics` tab.      - Click `Get Current Position` button.   ##### Gripper Control    1. Change the Mode    - Click `Manipulation` tab of the demo program.  2. Manipulation Initial Pose      - Click `Manipulation Init Pose` in the `Joint Control`.3. Gripper Operation   - Select a specific group in the `Gripper` tab.      - Click `ON` / `OFF` buttons.### [Operate Walking Module](#operate-walking-module)#### Walking with [thormang3_demo] and [thormang3_foot_step_generator]Examples to control walking by using [thormang3_demo] and [thormang3_foot_step_generator].   Structure looks like the below figure.  ![](/assets/images/platform/thormang3/thormang3_060.jpg)##### Install &amp; Build  `Note` Reference : [OPC Installation]  {: .notice}##### Run &gt; Reference : [How to execute OPC&#39;s GUI program] ##### Usage1. Move to Robot Init Pose  - Click the `Robot Init Pose` button.      ![](/assets/images/platform/thormang3/thormang3_061.png)2. FT Sensor Calibration  - FT sensor calibration is important for the walking operation.  - FT Sensor calibration is recommended when there are significant environmental changes such as motor replacement and temperature change.  - FT Sensor calibration can be done as below.    &gt; Reference : [How to calibrate feet ft sensors]3. Set Mode  - Click the `Walking Module` button to switch to Walking Mode.    ![](/assets/images/platform/thormang3/thormang3_062.jpg)4. Balance On   - Select the `Walking` tab from the demo program.  - Click `On` button in the `Balance Control`.      ![](/assets/images/platform/thormang3/thormang3_063.png)      - Balance is turned on by configuring [Balance Parameter] with the `/robotis/walking/set_balance_param` service.    - Balance Parameter is updated with the saved value in the [thormang3_foot_step_generator/data/balance_param.yaml].    ![](/assets/images/platform/thormang3/thormang3_064.jpg)5. Walking Control  - Configure Walking Parameters on the right of the `Direction Walking` panel.  - After configuring parameters, clicking one of Walking Directions will initiate walking of THORMANG3.    ![](/assets/images/platform/thormang3/thormang3_065.jpg)      - The procedure flows as below.    ![](/assets/images/platform/thormang3/thormang3_066.jpg)#### Walking with [thormang3_demo] and [footstep_planner]A walking example that follows StepData using [footstep_planner].![](/assets/images/platform/thormang3/thormang3_067.jpg)##### Install &amp; Build  `Note` Reference : [OPC Installation]  {: .notice}##### Run - Execute [thormang3_demo] as below.&gt; Reference : [How to execute OPC&#39;s GUI program]- Execute [footstep_planner].##### Usage1. Basic Operation  - Sequentially proceed 1~4 of [Usage] from above &quot;Walking with [thormang3_demo] and [thormang3_foot_step_generator]&quot;.   2. Add Visualization  - Click the `Add` button on the Rviz window.  - Select the `By Topic` tab and select the `/demo/foot_step_marker/MarkerArray`, then click `OK`.    ![](/assets/images/platform/thormang3/thormang3_068.jpg)3. Interactive Marker  - Click the `Publish Point` button on the Rviz window.  - Click one of the THORMANG&#39;s feet on the Rviz window.    ![](/assets/images/platform/thormang3/thormang3_069.jpg)    - Click `Set Marker` button.    - The Interactive Marker is activated on the Rviz window as below figure.    ![](/assets/images/platform/thormang3/thormang3_070.jpg)4. StepData Planning  - Move the Interative Marker and click `Publish Pose` button.    - `Walking` tab of the [thormang3_demo] GUI should be selected ahead.      ![](/assets/images/platform/thormang3/thormang3_071.jpg)      - After checking &quot;Get Pose for Step&quot; message from the GUI and activated `Plan` button, click `Plan` button.      ![](/assets/images/platform/thormang3/thormang3_072.jpg)      - When planning is completed, planned StepData can be seen on the Rviz GUI window.      ![](/assets/images/platform/thormang3/thormang3_073.jpg)5. Start Walking  - Confirm planned StepData from the [thormang3_demo] GUI and click `GO!` button.    ![](/assets/images/platform/thormang3/thormang3_074.jpg)[Usage]: /docs/en/platform/thormang3/thormang3_ros_packages/#thormang3_walking_module## [Offset Tuner](#offset-tuner)Instruction about how to run the Thormang3 offset tuner program.   ### [Execute in MPC](#execute-in-mpc)Execute the offset tuner server first (thormang3_manager should be terminated to run the offset tuner program).```# roslaunch thormang3_offset_tuner_server thormang3_offset_tuner_server.launch```### [Execute in OPC](#execute-in-opc)Execute the offset tuner GUI program.```$ rosrun thormang3_offset_tuner_client thormang3_offset_tuner_client```### [How to use GUI program](#how-to-use-gui-program)![](/assets/images/platform/thormang3/thormang3_075.png)# [Gazebo Simulation](#gazebo-simulation)## [Install Gazebo](#install-gazebo)ROS-Gazebo Package Installation### Gazebo with ROS[Gazebo Tutorials](http://gazebosim.org/tutorials?cat=connect_ros)### Additional InstallationIf ros-indigo-desktop-full was used to install, the following packages need to be installed.```# apt-get install ros-indigo-ros-control# apt-get install ros-indigo-ros-controllers# apt-get install ros-indigo-gazebo-ros-control```## [Run Simulation](#run-simulation)How to set up &amp; execute gazebo simulation### Recommendation  If Gazebo is running on the OPC, realtime factor can be decreased, therefore, it is recommended to use a separate PC for Gazebo.### How to execute  The command to call THORMANG3 in Gazebo```$ roslaunch thormang3_gazebo robotis_world.launch```![](/assets/images/platform/thormang3/thormang3_076.png)### [thormang3_manager] for Gazebo  - Configure simulation setting in the launch file of the thormang3_manager     ``     ``   - Launch thormang3_manager     ```  $ roslaunch thormang3_manager thormang3_manager.launch  ```- Please refer to below tutorials for the rest procedures.   [How to run THORMANG3&#39;s program]# [References](#references)## [Router Setting](#router-setting)1. Router Reset    To reset the router, press the front button for 10 seconds.    Front button is “MODE CHANGE” button.  - Orange LED : Router Mode  - Green LED : Repeater Mode  - Red LED : AP Mode  ![](/assets/images/platform/thormang3/thormang3_077.jpg)2. Connect to Router    - Default Wi-Fi Name:    - 2.4G : dlink-806a-z    - 5G  : dlink-806a 5G-z  - Administrator Account Setting:    - Name : admin    - Password : admin 3. Change Language  - Connect to Router via Wi-Fi or Wired.  - Open the browser and connect to ‘192.168.1.1’. Insert Administrator Account Info.  - Click “상세 설정”(Details).  - Click Menu “도구”(Tools) &gt; “관리자 설정”(Administrator).  - Select Language “영어(English)” and click “APPLY” button.  - Select “예” and click “APPLY” button.  The language has been changed.  ![](/assets/images/platform/thormang3/thormang3_078.jpg)       4. Disable the IPTV Availability.    In order to use Port 4, IPTV Availability should be disabled.To use Port 4 must disable IPTV Availability.     - “Advanced” &gt; “IPTV/IGMP”  - “IPTV Availability” &gt; Select “Disable” &gt; Click “APPLY” button  - Reboot the router.  ![](/assets/images/platform/thormang3/thormang3_079.jpg)## [LiDAR IP Setting](#lidar-ip-setting)- Model : UTM-30LX-EW - Download IP address changing tool    https://www.hokuyo-aut.jp/02sensor/07scanner/download/products/utm-30lx-ew/ - Reset the IP Setting    Pressing the button in the sensor’s body will reset the IP setting.    1. Remove the rubber cap that covers the IP reset button.    ![](/assets/images/platform/thormang3/thormang3_080.jpg)   2. Press the switch inside the hole for more than 3 seconds, using a thin stick.    ![](/assets/images/platform/thormang3/thormang3_081.jpg) Restart the sensor when the LED blinks, the IP setting will be completed.  The following table shows the network settings after the reset.|Item|Description||:---:|:---:||IP|192.168.0.10||Subnet|255.255.255.0||Gateway address|192.168.0.1||TCP/IP Port|10940| - Change the IP Setting  1. Below is the screen shot of IP changer’s screen shot.    ![](/assets/images/platform/thormang3/thormang3_082.jpg)  2. Change the IP address and push “Update” button. (The “Update” button can be pushed only when the sensor is connected.)    ![](/assets/images/platform/thormang3/thormang3_083.jpg)## [System Block Diagram](#system-block-diagram)![](/assets/images/platform/thormang3/thormang3_046.png)## [Technical Specifications](#technical-specifications)1. PC  - nuc5i5RYK(http://www.intel.com/content/www/us/en/nuc/products-overview.html)  - Technical Product Specification(http://www.intel.com/content/www/us/en/support/boards-and-kits/000005545.html)    ![](/assets/images/platform/thormang3/thormang3_084.png) 2. Actuators  - [H54-200-S500-R] x10  - [H54-100-S500-R] x11  - [H42-20-S300-R] x8  ![](/assets/images/platform/thormang3/thormang3_085.jpg)3. Sensors  - 6-axis force-torque sensor([ATi Mini58-SI-2800-120](http://www.ati-ia.com/products/ft/ft_models.aspx?id=Mini58))     ![](/assets/images/platform/thormang3/thormang3_086.jpg)     - IMU sensor([MicroSrain 3DM-GX4-25](http://www.microstrain.com/inertial/3dm-gx4-25))        ![](/assets/images/platform/thormang3/thormang3_087.jpg)     - LIDAR([Hokuyo UTM-30LX-EW](https://www.hokuyo-aut.jp/02sensor/07scanner/download/products/utm-30lx-ew/))      ![](/assets/images/platform/thormang3/thormang3_088.jpg)       - HD Camera([Logitech C920 HD](http://www.logitech.com/en-us/product/hd-pro-webcam-c920))          ![](/assets/images/platform/thormang3/thormang3_089.jpg)       - Depth camera([Intel RealSense R200](https://software.intel.com/en-us/realsense/r200camera))          ![](/assets/images/platform/thormang3/thormang3_090.jpg) 4. Batteries  - LiPo 22.2V, 22000mAh x 1EA(http://www.maxamps.com/proddetail.php?prod=Lipo-22000-222-Pack)      xt60 plug    ![](/assets/images/platform/thormang3/thormang3_091.jpg)     - LiPo 18.5V, 11000mAh x 1EA(http://www.maxamps.com/proddetail.php?prod=Lipo-11000-185-Pack)        no plug-12awg      ![](/assets/images/platform/thormang3/thormang3_092.jpg) - Chargers(hitec smart charger h4, hitec e power box 30a)    http://hitecrcd.com/products/chargers/dcdc-chargers/h4-dcdc-four-port-multi-charger/product    http://hitecrcd.com/products/chargers/epowerbox-30-amp-power-supply/product   ![](/assets/images/platform/thormang3/thormang3_093.jpg)## [ID Map](#id-map)![](/assets/images/platform/thormang3/thormang3_094.jpg)## [Physical Properties](#physical-properties)### [Link Measurements](#link-measurements)![](/assets/images/platform/thormang3/thormang3_095.jpg)![](/assets/images/platform/thormang3/thormang3_096.jpg)|body|x|y|z||:---:|:---:|:---:|:---:||Ground-origin|-|-|807.5||origin-27|0|0|170.5| |head|x|y|z||:---:|:---:|:---:|:---:||27-28|0|0|229||28-29|0|-45|39||29-cam|68.2|45|56||29-lidar|0|45|106.75||29-decam|68.9|45|17| |L_Arm|x|y|z|R_Arm|x|y|z||:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:||27-2|0|152|160|27-1|0|-152|160||2-4|57|60|-39|1-3|57|-60|-39||4-6|-57|33|-0|3-5|-57|-33|0||6-8|30|187|57|5-7|30|-187|57||8-10|171|30|-57|7-9|171|-30|-57||10-12|39|0|45|9-11|39|0|45||12-14|45|-45|-45|11-13|45|45|-45||14-30|87.7|-58.3|0|13-31|87.7|-31.7|0||30-30_2|0|-26.6|0|31-31_2|0|-26.6|0| |L_Leg|x|y|z|R_Leg|x|y|z||:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:||base-16|0|93|-18|base-15|0|-93|-18||16-18|57|0|-75|15-17|57|0|-75||18-20|-57|33|0|17-19|-57|33|0||20-22|0|60|-300|19-21|0|-60|-300||22-24|0|-60|-300|21-23|0|60|-300||24-26|57|-33|0|23-25|57|33|0||26-26_2|-57|0|-87|25-25_2|-57|0|-87|### [Mass &amp; Inertia](#mass-inertia)#### Whole robot- Mass = 41.6 kg![](/assets/images/platform/thormang3/thormang3_096.jpg)          #### Body![](/assets/images/platform/thormang3/thormang3_097.jpg) #### Head![](/assets/images/platform/thormang3/thormang3_098.jpg) #### Right Arm![](/assets/images/platform/thormang3/thormang3_099.jpg)![](/assets/images/platform/thormang3/thormang3_100.jpg)![](/assets/images/platform/thormang3/thormang3_101.jpg)  #### Left Arm![](/assets/images/platform/thormang3/thormang3_102.jpg)![](/assets/images/platform/thormang3/thormang3_103.jpg)![](/assets/images/platform/thormang3/thormang3_104.jpg)  #### Right Leg![](/assets/images/platform/thormang3/thormang3_105.jpg)![](/assets/images/platform/thormang3/thormang3_106.jpg) ![](/assets/images/platform/thormang3/thormang3_107.jpg)  #### Left Leg![](/assets/images/platform/thormang3/thormang3_108.jpg)![](/assets/images/platform/thormang3/thormang3_109.jpg) ![](/assets/images/platform/thormang3/thormang3_110.jpg) ### [Joint &amp; Angle Limit](#joint-angle-limit)![](/assets/images/platform/thormang3/thormang3_111.jpg)#### Head Joint![](/assets/images/platform/thormang3/thormang3_112.jpg)|Id|Name|Range(degrees)||:---:|:---:|:---:||28|head_y(Z)|-90 to 90||29|head_p(Y)|-60 to 87| #### Body Joint![](/assets/images/platform/thormang3/thormang3_113.jpg)|Id|Name|Range(degrees)||:---:|:---:|:---:||27|torso_y(Z)|-90 to 90||15|r_leg_hip_y(Z)|-90 to 40||16|l_leg_hip_y(Z)|-40 to 90| #### Right_Arm Joint![](/assets/images/platform/thormang3/thormang3_114.jpg)![](/assets/images/platform/thormang3/thormang3_115.jpg)![](/assets/images/platform/thormang3/thormang3_116.jpg)|Id|Name|Range(degrees)||:---:|:---:|:---:||1|r_arm_sh_p1(Y)|-150 to 150||3|r_arm_sh_r(X)|-90 to 90||5|r_arm_sh_p2(Y)|-120 to 30||7|r_arm_el_y(Z)|-90 to 45||9|r_arm_sh_wr_r(X)|-150 to 150||11|r_arm_sh_wr_y(Z)|-90 to 90||13|r_arm_sh_wr_p(Y)|-90 to 90| #### Left_Arm Joint![](/assets/images/platform/thormang3/thormang3_117.jpg)![](/assets/images/platform/thormang3/thormang3_118.jpg)|Id|Name|Range(degrees)||:---:|:---:|:---:||2|l_arm_sh_p1(Y)|-150 to 150||4|l_arm_sh_r(X)|-90 to 90||6|l_arm_sh_p2(Y)|-30 to 120||8|l_arm_el_y(Z)|-45 to 90||10|l_arm_sh_wr_r(X)|-150 to 150||12|l_arm_sh_wr_y(Z)|-90 to 90||14|l_arm_sh_wr_p(Y)|-90 to 90| #### Right_Leg Joint![](/assets/images/platform/thormang3/thormang3_119.jpg)|Id|Name|Range(degrees)||:---:|:---:|:---:||17|r_leg_hip_r(X)|-30 to 45||19|r_leg_hip_p(Y)|-40 to 85||21|r_leg_kn_p(Y)|-166 to 30||23|r_leg_an_p(Y)|-85 to 40||25|r_leg_an_r(X)|-35 to 90| #### Left_Leg Joint![](/assets/images/platform/thormang3/thormang3_120.jpg)|Id|Name|Range(degrees)||:---:|:---:|:---:||18|l_leg_hip_r(X)|-45 to 30||20|l_leg_hip_p(Y)|-85 to 40||22|l_leg_kn_p(Y)|-30 to 166||24|l_leg_an_p(Y)|-40 to 85||26|l_leg_an_r(X)|-90 to 35|[H54-200-S500-R]: /docs/en/dxl/pro/h54-200-s500-r/[H54-100-S500-R]: /docs/en/dxl/pro/h54-100-s500-r/[H42-20-S300-R]: /docs/en/dxl/pro/h42-20-s300-r/[MPC Installation]: /docs/en/platform/thormang3/getting_started/#mpc-installation[PPC Installation]: /docs/en/platform/thormang3/getting_started/#ppc-installation[OPC Installation]: /docs/en/platform/thormang3/getting_started/#opc-installation[ROBOTIS-THORMANG-OPC]: /docs/en/platform/thormang3/thormang3_ros_packages/#opc-packages[ROSOTIS-THORMANG-Common]: /docs/en/platform/thormang3/thormang3_ros_packages/#common-packages[Example Setting for OPC]: /docs/en/platform/thormang3/getting_started/#ros-environment-setting[How to execute Simple Demonstration]: /docs/en/platform/thormang3/thormang3_operation/#simple-demo[How to execute OPC&#39;s GUI program]: /docs/en/platform/thormang3/thormang3_operation/#gui-program[How to run THORMANG3&#39;s program]: /docs/en/platform/thormang3/thormang3_operation/#thormang3-operation[How to calibrate feet ft sensors]: /docs/en/platform/thormang3/thormang3_operation/#calibrate-ft-sensors[thormang3_sensor]: /docs/en/platform/thormang3/thormang3_ros_packages/#thormang3-sensors[thormang3_manager]: /docs/en/platform/thormang3/thormang3_ros_packages/#thormang3_manager[thormang3_manipulation_module]: /docs/en/platform/thormang3/thormang3_ros_packages/#thormang3_manipulation_module[thormang3_walking_module]: /docs/en/platform/thormang3/thormang3_ros_packages/#thormang3_walking_module[thormang3_feet_ft_module]: /docs/en/platform/thormang3/thormang3_ros_packages/#thormang3_feet_ft_module[thormang3_demo]: /docs/en/platform/thormang3/thormang3_ros_packages/#thormang3-demo[thormang3_foot_step_generator]: /docs/en/platform/thormang3/thormang3_ros_packages/#thormang3-foot-setp-generator[Balance Parameter]: /docs/en/platform/thormang3/thormang3_ros_packages/#thormang3-walking-module-msgs[thormang3_foot_step_generator/data/balance_param.yaml]: /docs/en/platform/thormang3/thormang3_ros_packages/#thormang3-foot-setp-generator[footstep_planner]: /docs/en/platform/thormang3/thormang3_ros_packages/#humanoid-navigation",
        "url": " http://localhost:4000/docs/en/platform/thormang3/thormang3_operation/"
      } ,
  
      "docs-en-platform-thormang3-thormang3-ros-packages":  {
        "title": "THORMANG3",
      "content"	 : "# [THORMANG3 ROS Packages](#thormang3-ros-packages)## [MPC Packages](#mpc-packages)### [thormang3_manager](#thormang3_manager)`thormang3_manager` is a package to apply ROBOTIS Framework to THORMANG3. Refer to the below link to create a new robot manager.#### Download &amp; Build    `Note` Reference : [MPC Installation]    {: .notice}#### Run    Execute the program with a .launch file in order to load ROS parameters. The command should be executed from the root account to configure the attribute of Thread.    ```    $ sudo bash    [sudo] password for robotis:    # roslaunch thormang3_manager thormang3_manager.launch    ```#### ROS API+ Launch Parameters  - **gazebo (bool, default: false)** : Configure whether to the program run in gazebo mode.  - **gazebo_robot_name (string, default: &quot;&quot;)** : Configure the robot name for joint_state topic name when running in gazebo mode.  ex) If thormang3 is the gazebo_robot_name, /thormang3/joint_states will be subscribed.  - **offset_file_path (string, default: &quot;&quot;)** : This path indicates the location of the file that contains offset data of each joint and initial posture data for offset adjustment.  - **robot_file_path (string, default: &quot;&quot;)** : This path indicates the location of .robot file that contains robot data.  - **init_file_path (string, default: &quot;&quot;)** : This path indicates the location of the file that contains initialization information of each joint.  - **ft_data_path (string, default: &quot;&quot;)** : This path indicates the location of the file that contains calibration matrix and unloaded voltage information of the FT sensor.  - **ft_calibration_data_path (string, default: &quot;&quot;)** : This path indicates the location of the file that contains the reference value for FT sensor calibration.### [thormang3_kinematics_dynamics](#thormang3_kinematics_dynamics)`thormang3_kinematics_dynamics` is a kinematics and dynamics library that provides joint &amp; link information and basic robotics function. To use this library, it is necessary to set the `CMakeList.txt` and `package.xml` of each moduleIn `CMakeList.txt`,```c++find_package( thormang3_kinematics_dynamics )target_link_libraries( thormang3_kinematics_dynamics )```In `package.xml`,```c++thormang3_kinematics_dynamics```#### Functions1. LinkData.cpp  + name : Joint name  + parent : Parent joint ID  + sibling : Sibling joint ID  + child : Child joint ID  + mass : Mass  + relative_position : Joint relative position (relative to parent)  + joint_axis : Joint axis vector (relative to parent)  + center_of_mass : Center of mass (Link Local)  + inertia : Moment of Inertia (Link Local)  + joint_limit_max : Joint upper limit  + joint_limit_min : Joint lower limit  + joint_angle : Joint angle  + joint_velocity : Joint velocity  + joint_acceleration : Joint acceleration  + position: Link position  + orientation : Link orientation  + transformation : Link transformation matrix2. ThorMang3KinematicsDynamics.cpp  + THORMANG3 joint &amp; link information    ```c++    ThorMang3KinematicsDynamics(TREE_SELECT tree)    ```  + Find kinematics tree    - arguments : start joint id    - return value : vector ( n x 1 )    ```c++    std::vector findRoute( int to )    ```  + Find kinematics tree    - arguments : start joint id and end joint id    - return value : vector ( n x 1 )    ```c++    std::vector findRoute( int from , int to )    ```  + Calculate total mass    - arguments : start joint id    - return value : total mass    ```c++    double TotalMass( int joint_ID )    ```  + Calculate center of mass    - arguments : start joint id    - return value : 3 x 1 matrix    ```c++    Eigen::MatrixXd CalcMC( int joint_ID )    Eigen::MatrixXd CalcCOM( Eigen::MatrixXd MC )    ```  + Calculate forward kinematics    - arguments : start joint id    ```c++    void ForwardKinematics( int joint_ID )    ```  + Calculate forward kinematics    - arguments : vector ( n x 1 )    - return value : 6 x n matrix    ```c++    Eigen::MatrixXd CalcJacobian( std::vector idx )    ```  + Calculate inverse kinematics    - arguments : end joint id, target position, target orientation, max iteration, calculation error    - return value : true or false    ```c++    bool InverseKinematics    ( int to,      Eigen::MatrixXd tar_position, Eigen::MatrixXd tar_orientation,      int max_iter,                 double ik_err )    ```  + Calculate inverse kinematics    - arguments : start joint id, end joint id, target position, target orientation, max iteration, calculation error    - return value : true or false    ```c++    bool InverseKinematics    ( int from,                     int to,      Eigen::MatrixXd tar_position, Eigen::MatrixXd tar_orientation,      int max_iter,                 double ik_err )    ```  + Calculate inverse kinematics for leg    - arguments : output, target position (x y z), target orientation (roll pitch yaw)    - return value : true or false    ```c++    bool InverseKinematicsforLeg    ( double *out,      double x,    double y,     double z,      double roll, double pitch, double yaw )    ```  + Calculate inverse kinematics for right leg    - arguments : output, target position (x y z), target orientation (roll pitch yaw)    - return value : true or false    ```c++    bool InverseKinematicsforRightLeg    ( double *out,      double x,    double y,     double z,      double roll, double pitch, double yaw);    ```  + Calculate inverse kinematics for left leg    - arguments : output, target position (x y z), target orientation (roll pitch yaw)    - return value : true or false    ```c++    bool InverseKinematicsforLeftLeg    ( double *out,      double x,    double y,     double z,      double roll, double pitch, double yaw);    ```### [thormang3_action_module](#thormang3_action_module)`thormang3_action_module` is one of the Motion Module. This module can load and play a motion file.The motion file is edited with thormang3_action_editor#### Download &amp; Build  `Note` Reference : [MPC Installation]  {: .notice}#### ROS API##### Subscribed Topics    - `/robotis/action/page_num`([std_msgs/Int32])      The page number will be played.      If user send a page number between 1 ~ 255, the page will be played.      If user send -1, the action will be stopped.      If user send -2, the action will be broken(stop immediately).  - `/robotis/action/start_action`([thormang3_action_module_msgs/StartAction])      The page number and joint names will be played.##### Published Topics    - `/robotis/status`([robotis_controller_msgs/StatusMsg])      The message indicates status of the action_module.##### Services  - `/robotis/action/is_running`([thormang3_action_module_msgs/IsRunning])      The service that checks whether THORMANG3&#39;s action is being played or not.### [thormang3_base_module](#thormang3_base_module)`thormang3_base_module` is a module for initial posture. This module is included in thormang3_manager as a library.#### Download &amp; Build  `Note` Reference : [MPC Installation]  {: .notice}  The Motion Module is used in the manager as a form of library.  `Note` Reference : Creating new robot manager  {: .notice}#### ROS API##### Subscribed Topics  - `/robotis/base/ini_pose`([std_msgs/String])      A command to take the initial posture(This command is effective even when the base module is inactive).##### Published Topics  - `/robotis/enable_ctrl_module`([std_msgs/String])      A base_module activation topic to take the initial posture.  - `/robotis/status`([robotis_controller_msgs/StatusMsg])      A message that contains the status of base_module.### [thormang3_manipulation_module](#thormang3_manipulation_module)THORMANG3 manipulation module for the upper body.#### Download &amp; Build  `Note` Reference : [MPC Installation]  {: .notice}#### ROS API##### Subscribed Topics  - `/robotis/manipulation/ini_pose_msg` (std_msgs/String)      A message to take the initial posture.  - `/robotis/manipulation/joint_pose_msg` (thormang3_manipulation_module_msgs/JointPose)      A message to move to the target point in the Joint Space.  - `/robotis/manipulation/kinematics_pose_msg` (thormang3_manipulation_module_msgs/KinematicsPose)      A message to move to the target pose in the Task Space.##### Published Topics  - `/robotis/status` (robotis_controller_msgs/StatusMsg)      A status message of THORMANG3##### Services  - `/robotis/manipulation/get_joint_pose` (thormang3_manipulation_module_msgs/GetJointPose)      A service that reads the pose of specific joint.  - `/robotis/manipulation/get_kinematics_pose` (thormang3_manipulation_module_msgs/GetKinematicsPose)      A service that reads the pose of end effector from a specific kinematics group.### [thormang3_walking_module](#thormang3_walking_module)![](/assets/images/platform/thormang3/thormang3_walking_module_diagram.jpg)As seen from the above figure, thormang3_walking_module is one of the MotionModules from ROS Framework.THROMANG3 can be controlled with Topics and Services.Users can designate almost all Step Parameters.(thormang3_walking_module_msgs/StepData)1. Pattern Generation    thormang3_walking_module includes online walking pattern generator.    The pattern is generated from Foot Step Data input.    ![](/assets/images/platform/thormang3/thormang3_walking_module_algorithm_diagram.jpg)2. Balance Algorithm    The balance algorithm is included as shown below.(thormang3_walking_module_msgs/BalanceParam)    ![](/assets/images/platform/thormang3/thormang3_walking_module_balance_diagram.jpg)#### Download &amp; Build  `Note` Reference : [MPC Installation]  {: .notice}#### ROS API##### Subscribed Topics  - `/robotis/sensor/imu/imu` (sensor_msgs/Imu)      Current data of the IMU Sensor##### Published Topics  - `/robotis/status`(robotis_controller_msgs/StatusMsg)      Status message of THORMANG3##### Services  - `/robotis/walking/get_reference_step_data`(thormang3_walking_module_msgs/GetReferenceStrpData)      A service that collects current location of THORMANG3 in the Global from the Walking Module.  - `/robotis/walking/add_step_data`(thormang3_walking_module_msgs/AddStepDataArray)      A service that adds StepData created by the user.  - `/robotis/walking/walking_start`(thormang3_walking_module_msgs/WalkingStart)      A service that commands to start walking.  - `/robotis/walking/is_running`(thormang3_walking_module_msgs/IsRunning)      A service that checks whether THORMANG3 is walking or not.  - `/robotis/walking/set_balance_param`(thormang3_walking_module_msgs/SetBalanceParam)      A service that can set Balance Algorithm parameters.  - `/robotis/walking/remove_existing_step_data`(thormang3_walking_module_msgs/RemoveExistingStepData)      A service that deletes existing StepData.### [thormang3_head_control_module](#thormang3_head_control_module)This module is to control the head. This module is included in the Thormang3 Manager as a library.#### Download &amp; Build  `Note` Reference : [MPC Installation]  {: .notice}`Note` Reference : Creating new robot manager{: .notice}#### ROS API##### Subscribed Topics  - `/robotis/head_control/move_lidar`(std_msgs/String)      The command moves the head in order to obtain Lidar data.  - `/robotis/head_control/move_lidar_with_range`(std_msgs/Float64)      This command scans up and down a given range at the current head position to generate 3D lidar data.  - `/robotis/head_control/set_joint_states`(sensor_msgs/JointState)      The message controls joints that are connected to the head.  - `/robotis/head_control/set_joint_states_time`(thormang3_head_control_module_msgs/HeadJointPose)      The message moves head joints for given time.##### Published Topics  - `/robotis/sensor/move_lidar`(std_msgs/String)      This message reports the head movement to the Node which assembles LiDAR data.  - `/robotis/status`(robotis_controller_msgs/StatusMsg)      The message indicates status of the head_control_module.### [ati_ft_sensor](#ati_ft_sensor)This is a library to use ForceTorque Sensor(FT Sensor) of ATI Inc in the ROS.  The library can load saved Calibration Matrix and Unloaded Voltage from the YAML File.  The library does not include functions to communicate with hardwares. It can convert voltage output from the FT sensor to N or Nm.#### Functions1. ATIForceTorqueSensorTWE Class```cppbool Initialize(const std::string&amp; ft_data_path,                const std::string&amp; ft_data_key,                const std::string&amp; ft_frame_id,                const std::string&amp; ft_raw_publish_name,                const std::string&amp; ft_scaled_publish_name)```  - arguments :      - ft_data_path : Location of the YAML file to save Calibration Matrix and Unloaded Voltage      - ft_data_key        - The key to read data from YAML        - Key format used to read YAML looks like : ft_data_key + &quot;_calibration_matrix&quot; 와 _ft_data_key + &quot;_unload&quot;        - For example, if &quot;ft_right_foot_calibration_matrix&quot; and &quot;ft_right_foot_unload&quot; are saved in the YAML, ft_data_key should be &quot;ft_right_foot&quot;.      - ft_frame_id : The frame_id to publish sensor outputs      - ft_raw_publish_name : The topic name for raw outputs      - ft_scaled_publish_name : The topic name for scaled outputs  - description : The function that configures variables in the Class according to Arguments  - return value : Indicates Initialization success/failure result ```cppvoid SetScaleFactor(double ft_scale_factor)```  - arguments :    - ft_scale_factor : The gain value for calculating scaled output    - Refer to the &quot;SetScaleParam&quot; function.  - description : Function sets the scale gain of the FT sensor  - return value : void ```cppvoid SetNullForceTorque(Eigen::MatrixXd ft_null)```  - arguments :    - ft_null : Null value for calculating scaled output    - Refer to the &quot;SetScaleParam&quot; function  - description : Function sets null value of the FT sensor  - return value : void ```cppvoid SetScaleParam(double ft_scale_factor, Eigen::MatrixXd ft_null)```  - arguments :    - ft_scale_factor : The gain value for calculating scaled output    - ft_null : Null value when calculating scaled output  - description :    - Function sets Parameter for calculating scaled output    - The scaled output can be calculated as below.    - ft_scaled = ft_scale_factor * (ft_raw - ft_null)  - return value : void ```cppvoid SetCurrentVoltageOutput(double voltage0, double voltage1, double voltage2, double voltage3, double voltage4, double voltage5)```  - arguments :    - voltage0 : The output voltage of the FT sensor #0    - voltage1 : The output voltage of the FT sensor #1    - voltage2 : The output voltage of the FT sensor #2    - voltage3 : The output voltage of the FT sensor #3    - voltage4 : The output voltage of the FT sensor #4    - voltage5 : The output voltage of the FT sensor #5  - description : Function sets internal variables for the output voltage of the FT sensors and converts them to force torque.  - return value : void ```cppvoid SetCurrentVoltageOutput(Eigen::MatrixXd _voltage)```  - arguments :    - voltage : The 6x1 matrix form of output voltage of the FT sensor  - description : Function sets internal variables for the output voltage of the FT sensors and converts them to force torque.  - return value : void ```cppEigen::MatrixXd GetCurrentForceTorqueRaw()```  - arguments : void  - description : Return the most recent Raw Force and Torque of the voltage calculated from the &quot;SetCurrentVoltageOutput&quot; function.  - return value : Raw Force &amp; Raw Torque  - Eigen::MatrixXd ft = GetCurrentForceTorqueRaw()  - force_x = ft.coeff(0,0);  - force_y = ft.coeff(1,0);  - force_z = ft.coeff(2,0);  - torque_x = ft.coeff(3,0);  - torque_y = ft.coeff(4,0);  - torque_z = ft.coeff(5,0); ```cppEigen::MatrixXd GetCurrentForceTorqueScaled()```  - arguments : void  - description : Return the most recent Scaled Force and Torque of the voltage calculated from the &quot;SetCurrentVoltageOutput&quot; function.  - return value : Scaled Force &amp; Scaled Torque  - Eigen::MatrixXd ft = GetCurrentForceTorqueScaled()  - force_x = ft.coeff(0,0);  - force_y = ft.coeff(1,0);  - force_z = ft.coeff(2,0);  - torque_x = ft.coeff(3,0);  - torque_y = ft.coeff(4,0);  - torque_z = ft.coeff(5,0); ```cppvoid GetCurrentForceTorqueRaw(double* _force_x_N,   double* _force_y_N,   double* _force_z_N,                              double* _torque_x_Nm, double* _torque_y_Nm, double* _torque_z_Nm)```  - arguments : The return pointer of Raw Force and Raw Torque  - description : Return the most recent Raw Force and Torque of the voltage calculated from the &quot;SetCurrentVoltageOutput&quot; function.  - return value : void ```cppvoid GetCurrentForceTorqueScaled(double* _force_x_N,   double* _force_y_N,   double* _force_z_N,                                 double* _torque_x_Nm, double* _torque_y_Nm, double* _torque_z_Nm)```  - description : Return the most recent Scaled Force and Torque of the voltage calculated from the &quot;SetCurrentVoltageOutput&quot; function.  - return value : void ```cppvoid SetCurrentVoltageOutputPublishForceTorque(double _voltage0, double _voltage1, double _voltage2,                                               double _voltage3, double _voltage4, double _voltage5)```  - arguments :    - voltage0 : The output voltage of the FT sensor #0    - voltage1 : The output voltage of the FT sensor #1    - voltage2 : The output voltage of the FT sensor #2    - voltage3 : The output voltage of the FT sensor #3    - voltage4 : The output voltage of the FT sensor #4    - voltage5 : The output voltage of the FT sensor #5  - description : Function sets internal variables for the output voltage of the FT sensors and converts them to force torque, then publish the converted force torque.  - return value : void ```cppvoid SetCurrentVoltageOutputPublish(Eigen::MatrixXd _voltage)```  - arguments :    - voltage : The 6x1 matrix form of output voltage of the FT sensor  - description : Function sets internal variables for the output voltage of the FT sensors and converts them to force torque, then publish the converted force torque.  - return value : void### [thormang3_feet_ft_module](#thormang3_feet_ft_module)The sensor module of THORMANG3 that uses ati_ft_sensor library.  Acquired sensor values when the robot is hanging on the lift and standing on the ground can be used for the Calibration feature.#### Download &amp; Build  `Note` Reference : [MPC Installation]  {: .notice}#### ROS API1. Subscribed Topics  - `/robotis/feet_ft/ft_calib_command` (std_msgs/String)      FT Calibration Command2. Published Topics  - `/robotis/status` (robotis_controller_msgs/StatusMsg)      The status message of THORMANG3  -`/robotis/feet_ft/both_ft_value` (thormang3_feet_ft_module_msgs/BothWrench)      Both Wrench  - `/robotis/sensor/ft_right_foot/raw` (geometry_msgs/WrenchStamped)      raw output from the force torque sensor on the right foot  - `/robotis/sensor/ft_right_foot/scaled` (geometry_msgs/WrenchStamped)      scaled output from the force torque sensor on the right foot  - `/robotis/sensor/ft_right_foot/raw`(geometry_msgs/WrenchStamped)      raw output from the force torque sensor on the left foot  - `/robotis/sensor/ft_right_foot/scaled`(geometry_msgs/renchStamped)      scaled output from the force torque sensor on the left foot### [thormang3_balance_control](#thormang3_balance_control)Library for using Balance Algorithm of THORMANG3 in ROS. There is two kinds of algorithm.#### Download &amp; Build  `Note` Reference : [MPC Installation]  {: .notice}#### Functions and Variables##### BalanceLowPassFilter Class```void initialize(double control_cycle_sec_, double cut_off_frequency)```- arguments :    - control_cycle_sec : control cycle in sec of motion module    - cut_off_frequency : cut off frequency for low pass filter- description : the function that configures variables in the class according to arguments- return value : void```void setCutOffFrequency(double cut_off_frequency)```- arguments :    -cut off frequency : desired cut off frequency for filtering. If cut_off_frequency is less than 0, filtering is not performed.- description : the function for setting cut off frequency- return value : void```double getCutOffFrequency(void)```- arguments : void- description : the function for getting set cut off frequency- return value : current set cut off frequency```double getFilteredOutput(double present_raw_value)```- arguments :    - present_raw_value : raw value- description : the function for filtering and getting its result- return value : filtered value#####  Damping Controller Class```double getFeedBack(double present_sensor_output)```  - arguments :      - present_sensor_output : present sensor output  - description : the function for calculating damping control and getting its result  - return value : result calculated by damping controller```double desired_```  - description : desired value for damping controller```double gain_```  - description : gain for damping controller```double time_constant_sec_```  - description : time constant for damping controller```double output_```  - description : result of damping controller```double control_cycle_sec_```  - description : control cycle in sec of motion module#####  BalancePDController Class```double getFeedBack(double present_sensor_output)```  - arguments :      - present_sensor_output : present sensor output  - description : the function for calculating PD control and getting its result  - return value : result calculated by PD controller```double desired_```  - description : desired value for PD controller```double p_gain_```  - description : P gain for PD controller```double d_gain_```  - description : D gain for PD controller#####  BalanceControlUsingDampingConroller Class```void initialize(const int control_cycle_msec)```  - arguments :      - control_cycle_msec : control cycel of motion module in milliseconds  - description : the function that configures variables in the class according to arguments  - return value : void```void setGyroBalanceEnable(bool enable)```  - arguments :      - enable : true or false  - description : The function that turns on or off the balance algorithm with gyro  - return value : void```void setOrientationBalanceEnable(bool enable)```  - arguments :      - enable : true or false  - description : The function that turns on or off the balance algorithm with orientation from IMU sensor  - return value : void```void setForceTorqueBalanceEnable(bool enable)```  - arguments :      - enable : true or false  - description : The function that turns on or off the balance algorithm with force and torque from ft sensor  - return value : void```void process(int *balance_error, Eigen::MatrixXd *robot_to_cob_modified, Eigen::MatrixXd *robot_to_right_foot_modified, Eigen::MatrixXd *robot_to_left_foot_modified)```  - arguments :      - balance_error : the one of below values would be returned          - BalanceControlError::NoError(= 0) : There is no error.          - BalanceControlError::BalanceLimit(= 0) : The modification value by the balance algorithm is greater than the maximum modification.      - robot_to_cob_modified : the center of body modification calculated by balance algorithm      - robot_to_right_foot_modified : the right foot modification calculated by balance algorithm      - robot_to_left_foot_modified : the left_foot of body modification calculated by balance algorithm  - description : calculating balance algorithm using desired values and sensor outputs  - return value : void```void setDesiredPose(const Eigen::MatrixXd &amp;robot_to_cob, const Eigen::MatrixXd &amp;robot_to_right_foot, const Eigen::MatrixXd &amp;robot_to_left_foot)```  - arguments :      - robot_to_cob : desired pose of center of body with respect to robot&#39;s local coordinate      - robot_to_right_foot : desired pose of right foot with respect to robot&#39;s local coordinate      - robot_to_left_foot : desired pose of left foot with respect to robot&#39;s local coordinate  - description : the function for setting desired pose of right foot, left foot and center of body  - return value : void```void setDesiredCOBGyro(double gyro_roll, double gyro_pitch)```  - arguments :      - gyro_roll : desired x directional angular velocity with respect robot&#39;s local coordinate      - gyro_pitch : desired y directional angular velocity with respect robot&#39;s local coordinate  - description : the function for setting desired angular velocity  - return value : void```void setDesiredCOBOrientation(double cob_orientation_roll, double cob_orientation_pitch)```  - arguments :      - cob_orientation_roll : desired roll angle in radian of robot&#39;s local coordinate      - cob_orientation_pitch : desired pitch angle in radian of robot&#39;s local coordinate  - description : the function for setting desired robot&#39;s orientation  - return value : void```void setDesiredFootForceTorque(double r_force_x_N,      double r_force_y_N,       double r_force_z_N,                               double r_torque_roll_Nm, double r_torque_pitch_Nm, double r_torque_yaw_Nm,                               double l_force_x_N,      double l_force_y_N,       double l_force_z_N,                               double l_torque_roll_Nm, double l_torque_pitch_Nm, double l_torque_yaw_Nm)```  - arguments :      - r_force_x_N : desired x directional force on right foot with respect to robot&#39;s local coordinate      - r_force_y_N : desired y directional force on right foot with respect to robot&#39;s local coordinate      - r_force_z_N : desired z directional force on right foot with respect to robot&#39;s local coordinate      - r_torque_roll_Nm : desired x directional torque on right foot with respect to robot&#39;s local coordinate      - r_torque_pitch_Nm : desired y directional torque on right foot with respect to robot&#39;s local coordinate      - r_torque_yaw_Nm : desired z directional torque on right foot with respect to robot&#39;s local coordinate      - l_force_x_N : desired x directional force on left foot with respect to robot&#39;s local coordinate      - l_force_y_N : desired y directional force on left foot with respect to robot&#39;s local coordinate      - l_force_z_N : desired z directional force on left foot with respect to robot&#39;s local coordinate      - l_torque_roll_Nm : desired x directional torque on left foot with respect to robot&#39;s local coordinate      - l_torque_pitch_Nm : desired x directional torque on left foot with respect to robot&#39;s local coordinate      - l_torque_yaw_Nm : desired x directional torque on left foot with respect to robot&#39;s local coordinate  - description : the function for setting desired force in newton and torque in newton-meter on feet  - return value : void```void setCurrentGyroSensorOutput(double gyro_roll, double gyro_pitch)```  - arguments :    - gyro_roll : current x directional angular velocity with respect robot&#39;s local coordinate    - gyro_pitch : current y directional angular velocity with respect robot&#39;s local coordinate  - description : the function for setting current angular velocity from IMU sensor  - return value :```void setCurrentOrientationSensorOutput(double cob_orientation_roll, double cob_orientation_pitch)```  - arguments :      - cob_orientation_roll : current roll angle in radian of robot&#39;s local coordinate      - cob_orientation_pitch : current pitch angle in radian of robot&#39;s local coordinate  - description : the function for setting current orientation from IMU sensor  - return value : void```void setCurrentFootForceTorqueSensorOutput(double r_force_x_N,      double r_force_y_N,       double r_force_z_N,                                             double r_torque_roll_Nm, double r_torque_pitch_Nm, double r_torque_yaw_Nm,                                             double l_force_x_N,      double l_force_y_N,       double l_force_z_N,                                               double l_torque_roll_Nm, double l_torque_pitch_Nm, double l_torque_yaw_Nm)```    - arguments :      - r_force_x_N : current x directional force on right foot with respect to robot&#39;s local coordinate      - r_force_y_N : current y directional force on right foot with respect to robot&#39;s local coordinate      - r_force_z_N : current z directional force on right foot with respect to robot&#39;s local coordinate      - r_torque_roll_Nm : current x directional torque on right foot with respect to robot&#39;s local coordinate      - r_torque_pitch_Nm : current y directional torque on right foot with respect to robot&#39;s local coordinate      - r_torque_yaw_Nm : current z directional torque on right foot with respect to roboti&#39;s local coordinate      - l_force_x_N : current x directional force on left foot with respect to robot&#39;s local coordinate      - l_force_y_N : current y directional force on left foot with respect to robot&#39;s local coordinate      - l_force_z_N : current z directional force on left foot with respect to robot&#39;s local coordinate      - l_torque_roll_Nm : current x directional torque on left foot with respect to robot&#39;s local coordinate      - l_torque_pitch_Nm : current x directional torque on left foot with respect to robot&#39;s local coordinate      - l_torque_yaw_Nm : current x directional torque on left foot with respect to robot&#39;s local coordinate  - description : the function for setting current force and torque from force-torque sensor on both feet  - return value : void```void setMaximumAdjustment(double cob_x_max_adjustment_m,  double cob_y_max_adjustment_m,  double cob_z_max_adjustment_m,                            double cob_roll_max_adjustment_rad, double cob_pitch_max_adjustment_rad, double cob_yaw_max_adjustment_rad,                            double foot_x_max_adjustment_m, double foot_y_max_adjustment_m, double foot_z_max_adjustment_m,                            double foot_roll_max_adjustment_rad, double foot_pitch_max_adjustment_rad, double foot_yaw_max_adjustment_rad)```    - arguments :      - cob_x_max_adjustment_m : the maximum x directinal linear modification of center of body      - cob_y_max_adjustment_m : the maximum y directinal linear modification of center of body      - cob_z_max_adjustment_m : the maximum z directinal linear modification of center of body      - cob_roll_max_adjustment_rad : the maximum x directinal angular modification of center of body      - cob_pitch_max_adjustment_rad : the maximum y directinal angular modification of center of body      - cob_yaw_max_adjustment_rad : the maximum z directinal angular modification of center of body      - foot_x_max_adjustment_m : the maximum x directinal linear modification of foot      - foot_y_max_adjustment_m : the maximum y directinal linear modification of foot      - foot_z_max_adjustment_m : the maximum z directinal linear modification of foot      - foot_roll_max_adjustment_rad : the maximum x directinal angular modification of foot      - foot_pitch_max_adjustment_rad : the maximum y directinal angular modification of foot      - foot_yaw_max_adjustment_rad : the maximum z directinal angular modification of foot  - description : the function for setting maximum modification  - return value : void```void setCOBManualAdjustment(double cob_x_adjustment_m, double cob_y_adjustment_m, double cob_z_adjustment_m)```  - arguments :      - cob_x_adjustment_m : the x offset of center of body      - cob_y_adjustment_m : the y offset of center of body      - cob_z_adjustment_m : the z offset of center of body  - description : the function for setting manual modification of center of body  - return value : void```double getCOBManualAdjustmentX()```  - arguments : void  - description : the function for getting x directional manual modification of center of body  - return value : x directional manual modification of center of body```double getCOBManualAdjustmentY()```  - arguments : void  - description : the function for getting y directional manual modification of center of body  - return value : y directional manual modification of center of body```double getCOBManualAdjustmentZ()```  - arguments : void  - description : the function for getting z directional manual modification of center of body  - return value : z directional manual modification of center of body```void setGyroBalanceGainRatio(double gyro_balance_gain_ratio)```  - arguments :  - gyro_balance_gain_ratio : gyro balance gain  - description : the function for setting gyro balance gain  - return value : void```double getGyroBalanceGainRatio(void)```  - arguments : void  - description : the function for getting set gyro balance gain  - return value : current set gyro balance gain```DampingController foot_roll_angle_ctrl_```  - description : damping controller for foot using roll angle```DampingController foot_pitch_angle_ctrl_```  - description : damping controller for foot using pitch angle```DampingController right_foot_force_x_ctrl_```  - description : damping controller for foot using force x on right foot```DampingController right_foot_force_y_ctrl_```  - description : damping controller for foot using force y on right foot```DampingController right_foot_force_z_ctrl_```  - description : damping controller for foot using force z on right foot```DampingController right_foot_torque_roll_ctrl_```  - description : damping controller for foot using torque x on right foot  ```DampingController right_foot_torque_pitch_ctrl_```  - description : damping controller for foot using torque y on right foot  ```DampingController left_foot_force_x_ctrl_```  - description : damping controller for foot using force x on left foot```DampingController left_foot_force_y_ctrl_```  - description : damping controller for foot using force y on left foot  ```DampingController left_foot_force_z_ctrl_```  - description : damping controller for foot using force z on left foot  ```DampingController left_foot_torque_roll_ctrl_```  - description : damping controller for foot using torque x on left foot  ```DampingController left_foot_torque_pitch_ctrl_```  - description : damping controller for foot using torque y on left foot#####  BalanceControlUsingPDController Class```void initialize(const int control_cycle_msec)```  - arguments :      - control_cycle_msec : control cycel of motion module in milliseconds  - description : the function that configures variables in the class according to arguments  - return value : void```void setGyroBalanceEnable(bool enable)```  - arguments :      - enable : true or false  - description : The function that turns on or off the balance algorithm with gyro  - return value : void```void setOrientationBalanceEnable(bool enable)```  - arguments :      - enable : true or false  - description : The function that turns on or off the balance algorithm with orientation from IMU sensor  - return value : void```void setForceTorqueBalanceEnable(bool enable)```  - arguments :      - enable : true or false  - description : The function that turns on or off the balance algorithm with force and torque from ft sensor  - return value : void```void process(int *balance_error, Eigen::MatrixXd *robot_to_cob_modified, Eigen::MatrixXd *robot_to_right_foot_modified, Eigen::MatrixXd *robot_to_left_foot_modified)```  - arguments :      - balance_error : the one of below values would be returned      - BalanceControlError::NoError(= 0) : There is no error.      - BalanceControlError::BalanceLimit(= 0) : The modification value by the balance algorithm is greater than the maximum modification.      - robot_to_cob_modified : the center of body modification calculated by balance algorithm      - robot_to_right_foot_modified : the right foot modification calculated by balance algorithm      - robot_to_left_foot_modified : the left_foot of body modification calculated by balance algorithm  - description : calculating balance algorithm using desired values and sensor outputs  - return value : void```void setDesiredPose(const Eigen::MatrixXd &amp;robot_to_cob, const Eigen::MatrixXd &amp;robot_to_right_foot, const Eigen::MatrixXd &amp;robot_to_left_foot)```  - arguments :      - robot_to_cob : desired pose of center of body with respect to robot&#39;s local coordinate      - robot_to_right_foot : desired pose of right foot with respect to robot&#39;s local coordinate      - robot_to_left_foot : desired pose of left foot with respect to robot&#39;s local coordinate  - description : the function for setting desired pose of right foot, left foot and center of body  - return value : void```void setDesiredCOBGyro(double gyro_roll, double gyro_pitch)```  - arguments :      - gyro_roll : desired x directional angular velocity with respect robot&#39;s local coordinate      - gyro_pitch : desired y directional angular velocity with respect robot&#39;s local coordinate  - description : the function for setting desired angular velocity  - return value : void```void setDesiredCOBOrientation(double cob_orientation_roll, double cob_orientation_pitch)```  - arguments :      - cob_orientation_roll : desired roll angle in radian of robot&#39;s local coordinate      - cob_orientation_pitch : desired pitch angle in radian of robot&#39;s local coordinate  - description : the function for setting desired robot&#39;s orientation  - return value : void```void setDesiredFootForceTorque(double r_force_x_N,      double r_force_y_N,       double r_force_z_N,                                 double r_torque_roll_Nm, double r_torque_pitch_Nm, double r_torque_yaw_Nm,                                 double l_force_x_N,      double l_force_y_N,       double l_force_z_N,                                 double l_torque_roll_Nm, double l_torque_pitch_Nm, double l_torque_yaw_Nm)```  - arguments :      - r_force_x_N : desired x directional force on right foot with respect to robot&#39;s local coordinate      - r_force_y_N : desired y directional force on right foot with respect to robot&#39;s local coordinate      - r_force_z_N : desired z directional force on right foot with respect to robot&#39;s local coordinate      - r_torque_roll_Nm : desired x directional torque on right foot with respect to robot&#39;s local coordinate      - r_torque_pitch_Nm : desired y directional torque on right foot with respect to robot&#39;s local coordinate      - r_torque_yaw_Nm : desired z directional torque on right foot with respect to robot&#39;s local coordinate      - l_force_x_N : desired x directional force on left foot with respect to robot&#39;s local coordinate      - l_force_y_N : desired y directional force on left foot with respect to robot&#39;s local coordinate      - l_force_z_N : desired z directional force on left foot with respect to robot&#39;s local coordinate      - l_torque_roll_Nm : desired x directional torque on left foot with respect to robot&#39;s local coordinate      - l_torque_pitch_Nm : desired x directional torque on left foot with respect to robot&#39;s local coordinate      - l_torque_yaw_Nm : desired x directional torque on left foot with respect to robot&#39;s local coordinate  - description : the function for setting desired force in newton and torque in newton-meter on feet  - return value : void```void setCurrentGyroSensorOutput(double gyro_roll, double gyro_pitch)```  - arguments :      - gyro_roll : current x directional angular velocity with respect robot&#39;s local coordinate      - gyro_pitch : current y directional angular velocity with respect robot&#39;s local coordinate  - description : the function for setting current angular velocity from IMU sensor  - return value :```void setCurrentOrientationSensorOutput(double cob_orientation_roll, double cob_orientation_pitch)```  - arguments :      - cob_orientation_roll : current roll angle in radian of robot&#39;s local coordinate      - cob_orientation_pitch : current pitch angle in radian of robot&#39;s local coordinate  - description : the function for setting current orientation from IMU sensor  - return value : void```void setCurrentFootForceTorqueSensorOutput(double r_force_x_N,      double r_force_y_N,       double r_force_z_N,                                           double r_torque_roll_Nm, double r_torque_pitch_Nm, double r_torque_yaw_Nm,                                           double l_force_x_N,      double l_force_y_N,       double l_force_z_N,                                           double l_torque_roll_Nm, double l_torque_pitch_Nm, double l_torque_yaw_Nm)```  - arguments :      - r_force_x_N : current x directional force on right foot with respect to robot&#39;s local coordinate      - r_force_y_N : current y directional force on right foot with respect to robot&#39;s local coordinate      - r_force_z_N : current z directional force on right foot with respect to robot&#39;s local coordinate      - r_torque_roll_Nm : current x directional torque on right foot with respect to robot&#39;s local coordinate      - r_torque_pitch_Nm : current y directional torque on right foot with respect to robot&#39;s local coordinate      - r_torque_yaw_Nm : current z directional torque on right foot with respect to robot&#39;s local coordinate      - l_force_x_N : current x directional force on left foot with respect to robot&#39;s local coordinate      - l_force_y_N : current y directional force on left foot with respect to robot&#39;s local coordinate      - l_force_z_N : current z directional force on left foot with respect to robot&#39;s local coordinate      - l_torque_roll_Nm : current x directional torque on left foot with respect to robot&#39;s local coordinate      - l_torque_pitch_Nm : current x directional torque on left foot with respect to robot&#39;s local coordinate      - l_torque_yaw_Nm : current x directional torque on left foot with respect to robot&#39;s local coordinate  - description : the function for setting current force and torque from force-torque sensor on both feet  - return value : void```void setMaximumAdjustment(double cob_x_max_adjustment_m,  double cob_y_max_adjustment_m,  double cob_z_max_adjustment_m,                          double cob_roll_max_adjustment_rad, double cob_pitch_max_adjustment_rad, double cob_yaw_max_adjustment_rad,                          double foot_x_max_adjustment_m, double foot_y_max_adjustment_m, double foot_z_max_adjustment_m,                          double foot_roll_max_adjustment_rad, double foot_pitch_max_adjustment_rad, double foot_yaw_max_adjustment_rad)```  - arguments :      - cob_x_max_adjustment_m : the maximum x directinal linear modification of center of body      - cob_y_max_adjustment_m : the maximum y directinal linear modification of center of body      - cob_z_max_adjustment_m : the maximum z directinal linear modification of center of body      - cob_roll_max_adjustment_rad : the maximum x directinal angular modification of center of body      - cob_pitch_max_adjustment_rad : the maximum y directinal angular modification of center of body      - cob_yaw_max_adjustment_rad : the maximum z directinal angular modification of center of body      - foot_x_max_adjustment_m : the maximum x directinal linear modification of foot      - foot_y_max_adjustment_m : the maximum y directinal linear modification of foot      - foot_z_max_adjustment_m : the maximum z directinal linear modification of foot      - foot_roll_max_adjustment_rad : the maximum x directinal angular modification of foot      - foot_pitch_max_adjustment_rad : the maximum y directinal angular modification of foot      - foot_yaw_max_adjustment_rad : the maximum z directinal angular modification of foot  - description : the function for setting maximum modification  - return value : void```void setCOBManualAdjustment(double cob_x_adjustment_m, double cob_y_adjustment_m, double cob_z_adjustment_m)```  - arguments :      - cob_x_adjustment_m : the x offset of center of body      - cob_y_adjustment_m : the y offset of center of body      - cob_z_adjustment_m : the z offset of center of body  - description : the function for setting manual modification of center of body  - return value : void```double getCOBManualAdjustmentX()```  - arguments : void  - description : the function for getting current set x directional manual modification of center of body  - return value : x directional manual modification of center of body```double getCOBManualAdjustmentY()```  - arguments : void  - description : the function for getting current set y directional manual modification of center of body  - return value : y directional manual modification of center of body```double getCOBManualAdjustmentZ()```  - arguments : void  - description : the function for getting current set z directional manual modification of center of body  - return value : z directional manual modification of center of body```BalancePDController foot_roll_gyro_ctrl_```  - description : PD controller for foot using x directional gyro```BalancePDController foot_pitch_gyro_ctrl_```  - description : PD controller for foot using y directional gyro```BalancePDController foot_roll_angle_ctrl_```  - description : PD controller for foot using roll angle```BalancePDController right_foot_force_x_ctrl_```  - description : PD controller for foot using x directional force on right foot```BalancePDController right_foot_force_y_ctrl_```  - description : PD controller for foot using y directional force on right foot```BalancePDController right_foot_force_z_ctrl_```  - description : PD controller for foot using z directional force on right foot```BalancePDController right_foot_torque_roll_ctrl_```  - description : PD controller for foot using x directional torque on right foot```BalancePDController right_foot_torque_pitch_ctrl_```  - description : PD controller for foot using y directional torque on right foot```BalancePDController left_foot_force_x_ctrl_```  - description : PD controller for foot using x directional force on left foot```BalancePDController left_foot_force_y_ctrl_```  - description : PD controller for foot using y directional force on left foot```BalancePDController left_foot_force_z_ctrl_```  - description : PD controller for foot using z directional force on left foot```BalancePDController left_foot_torque_roll_ctrl_```  - description : PD controller for foot using x directional torque on left foot```BalancePDController left_foot_torque_pitch_ctrl_```  - description : PD controller for foot using y directional torque on left foot```BalanceLowPassFilter roll_gyro_lpf_```  - description : Low Pass Filter for x directional angular velocity from IMU```BalanceLowPassFilter pitch_gyro_lpf_```  - description : Low Pass Filter for y directional angular velocity from IMU```BalanceLowPassFilter roll_angle_lpf_;```  - description : Low Pass Filter for roll angle from IMU```BalanceLowPassFilter pitch_angle_lpf_;```  - description : Low Pass Filter for pitch angle from IMU```BalanceLowPassFilter right_foot_force_x_lpf_;```  - description : Low Pass Filter for x directional force from force-torque sensor on right foot```BalanceLowPassFilter right_foot_force_y_lpf_;```  - description : Low Pass Filter for y directional force from force-torque sensor on right foot```BalanceLowPassFilter right_foot_force_z_lpf_;```  - description : Low Pass Filter for z directional force from force-torque sensor on right foot```BalanceLowPassFilter right_foot_torque_roll_lpf_;```  - description : Low Pass Filter for x directional torque from force-torque sensor on right foot```BalanceLowPassFilter right_foot_torque_pitch_lpf_;```  - description : Low Pass Filter for y directional torque from force-torque sensor on right foot```BalanceLowPassFilter left_foot_force_x_lpf_;```  - description : Low Pass Filter for x directional force from force-torque sensor on left foot```BalanceLowPassFilter left_foot_force_y_lpf_;```  - description : Low Pass Filter for y directional force from force-torque sensor on left foot```BalanceLowPassFilter left_foot_force_z_lpf_;```  - description : Low Pass Filter for z directional force from force-torque sensor on left foot```BalanceLowPassFilter left_foot_torque_roll_lpf_;```  - description : Low Pass Filter for x directional torque from force-torque sensor on left foot```BalanceLowPassFilter left_foot_torque_pitch_lpf_;```  - description : Low Pass Filter for y directional torque from force-torque sensor on left foot### [imu-3dm-gx4](#imu-3dm-gx4)This module is for the IMU Sensor(MicroStrain 3DM-GX4-25).  This module exists in a separated Node, and this module is launched along with the thormang3_manager when executing .launch file of the thormang3_manager.  This is the modified version of KumarRobotics/imu_3dm_gx4.#### Download &amp; Build  `Note` Reference : [MPC Installation]  {: .notice}#### ROS API##### Published Topics`/robotis/sensor/imu/imu` (sensor_msgs/Imu)  Present output of the IMU Sensor## [PPC Packages](#ppc-packages)### [thormang3_sensors](#thormang3-sensors)Thormang3 sensor related package.  This package contains sensor related launch files.  The package also includes a node for assembling Laserscan(LaserScan to PointCloud)#### Download &amp; Build  `Note` Reference : [PPC Installation]  {: .notice}  #### RunExecute Launch file```$ roslaunch thormang3_sensors thormang3_sensors.launch```- thormang3_sensors.launch  - thormang3_pointcloud.launch    - scan_to_scan_filter_chain ([laser_filters](http://wiki.ros.org/laser_filters)) : Filter LaserScan topics    - laser_scan_assembler ([laser_assembler](http://wiki.ros.org/laser_assembler)) : The service assembles LaserScan    - assemble_laser_node (thormang3_sensors) : Create PointCloud from Assemble Service  - thormang3_realsense.launch : Contains Intel RealSense configuration and launch the program.  - thormang3_web_cam.launch : Contains Web Camera configuration and launch the program.#### ROS API : assemble_laser_node##### Subscribed Topics`/robotis/sensor/move_lidar`([std_msgs/String])    Configures start and end time to assemble LaserScan    Set the start time when receiving start message.    Set the end time and assemble Pointcloud when receiving end message.##### Published Topics`/robotis/sensor/assembled_scan`([sensor_msgs/PointCloud2])    Assembled PointCloud##### Services Called`/robotis/sensor/service/assemble_scan2`([laser_assembler/AssembleScan2])    Get assembled PointCloud from the Service with LaserScan start/end parameters.### [thormang3_simple_demo](#thormang3-simple-demo)#### thormang3_manipulation_demoThormang3 manipulation simple demonstration##### Download &amp; Build  `Note` Reference : [PPC Installation]  {: .notice}  ##### RunReference : Manipulation Simple Demo from [How to execute Simple Demonstration]##### ROS API###### Subscribed Topics`/robotis/manipulation_demo/command` ([std_msgs/String])    The topic to run various Manipulation simple demo commands.###### Published Topics`/robotis/base/ini_pose`([std_msgs/String])    The topic to take initial posture of the Base Module`/robotis/enable_ctrl_module`([std_msgs/String])    The topic to set upper body of the robot with the Manipulation Module`/robotis/manipulation/ini_pose_msg`([std_msgs/String])    The topic to take initial posture of the Manipulation Module`/robotis/manipulation/kinematics_pose_msg`([thormang3_manipulation_module_msgs/KinematicsPose])     The topic to take initial posture of the Manipulation Module#### thormang3_walking_demoThormang3 Walking simple demonstration##### Download &amp; Build  `Note` Reference : [PPC Installation]  {: .notice}  ##### Run`Reference` : Walking Simple Demo of [How to execute Simple Demonstration]##### ROS API###### Subscribed Topics`/robotis/status`([robotis_controller_msgs/StatusMsg])    Status message of THORMANG3`robotis/walking_demo/command`([std_msgs/String])    Command for walking simple demo###### Published Topics`robotis/base/ini_pose`([std_msgs/String])    The command delivered to the thormang3_base_module to take the initial posture.`/robotis/enable_ctrl_module`([std_msgs/String])    The topic to set lower body of the robot with the Walking Module.###### Services Called`/robotis/walking/get_reference_step_data`([thormang3_walking_module_msgs/GetReferenceStrpData])    The service obtains current location of THORMANG3 from the Walking Module in the Global space.`/robotis/walking/add_step_data`([thormang3_walking_module_msgs/AddStepDataArray])    The service adds StepData created by the user.`/robotis/walking/set_balance_param`([thormang3_walking_module_msgs/SetBalanceParam])    The service sets parameters related to the Balance Algorithm.## [OPC Packages](#opc-packages)### [humanoid_navigation](#humanoid-navigation)- `Reference` : http://wiki.ros.org/humanoid_navigation- `Source` : https://github.com/AravindaDP/humanoid_navigation- `Prerequisite Packages` : map_server, humanoid_nav_msgs, nav_msgs, sbpl, etc- Packages Installation```$ sudo apt-get install ros-kinetic-map-server$ sudo apt-get install ros-kinetic-humanoid-nav-msgs$ sudo apt-get install ros-kinetic-nav-msgs$ sudo apt-get install ros-kinetic-octomap $ sudo apt-get install ros-kinetic-octomap-msgs$ sudo apt-get install ros-kinetic-octomap-ros$ sudo apt-get install ros-kinetic-octomap-server```- Building and Installing from source  - sbpl(https://github.com/sbpl/sbpl)#### footstep_plannerThe footstep planner for humanoids or bipedal robots.- `Reference` : http://wiki.ros.org/footstep_planner##### RUN```$ roslaunch footstep_planner thormang3_footstep_planner.launch```##### Configurations- config/footsteps_thormang3.yaml : Footstep configuration of THORMANG3- config/planning_params_thormang3.yaml- config/planning_params.yaml : Configuration of planner parameters#### gridmap_2d- `Reference` : http://wiki.ros.org/gridmap_2d#### humanoid_localization- `Reference` : http://wiki.ros.org/humanoid_localization### [thormang3_demo](#thormang3-demo)The package for THORMANG3 demonstration.  Initial posture, walking, manipulation, head control are available with this package.  Feet ft calibration, Pointcloud conversion are available with this package.![](/assets/images/platform/thormang3/thormang3_037.png)#### Download &amp; Build  `Note` Reference : [OPC Installation]  {: .notice}#### 2.2 Run  Execute the launch file  ```$ roslaunch thormang3_demo thormang3_demo.launch```Configuration file used in `thormang3_demo`  &gt; config/demo_config.yaml&gt; * id_joint : id and joint name tables&gt; * module_list : Module name displayed on each joint in the demo program.&gt; * module_button : Modules to configure with the manager (index : module name)  #### 3. ROS API  ##### 3.1 Subscribed Topics  `/robotis/feet_ft/both_ft_value`([thormang3_feet_ft_module_msgs/BothWrench])    FT value for calibration`/robotis/status`([robotis_controller_msgs/StatusMsg])    Status message of THORMANG3`/robotis/present_joint_ctrl_modules`([robotis_controller_msgs/JointCtrlModule])    Joint modules that are currently in use`/robotis/present_joint_states`([sensor_msgs/JointState](http://docs.ros.org/api/sensor_msgs/html/msg/JointState.html))    Degree of each joint(Unit in Degree)`/robotis/demo/pose`([geometry_msgs/Pose](http://docs.ros.org/api/geometry_msgs/html/msg/Pose.html))    Pose that are used for Walking and Manipulation##### 3.2 Published Topics`/robotis/set_joint_ctrl_modules`([robotis_controller_msgs/JointCtrlModule])    Configuring each joint modules (configure for each joint, Not recommended to use)`/robotis/enable_ctrl_module`([std_msgs/String](http://docs.ros.org/api/std_msgs/html/msg/String.html))    Configure modules to control`/robotis/base/ini_pose`([std_msgs/String](http://docs.ros.org/api/std_msgs/html/msg/String.html))    Initial posture of Thormang3`/robotis/feet_ft/ft_calib_command`([std_msgs/String](http://docs.ros.org/api/std_msgs/html/msg/String.html))    FT Calibration related command`/robotis/head_control/move_lidar`([std_msgs/String](http://docs.ros.org/api/std_msgs/html/msg/String.html))    Head movement command for assembling LaserScan.`/robotis/head_control/set_joint_states`([sensor_msgs/JointState](http://docs.ros.org/api/sensor_msgs/html/msg/JointState.html))    Control for separate head joints`/robotis/demo/foot_step_marker`([visualization_msgs/MarkerArray](http://docs.ros.org/api/visualization_msgs/html/msg/MarkerArray.html))    Visualized footstep messages created by [footstep_planner](http://wiki.ros.org/action/fullsearch/footstep_planner)`/robotis/manipulation/ini_pose_msg`([std_msgs/String](http://docs.ros.org/api/std_msgs/html/msg/String.html))    Initial posture command for Manipulation`/robotis/manipulation/joint_pose_msg`([thormang3_manipulation_module_msgs/JointPose])    Control the robot in Joint Space`/robotis/manipulation/kinematics_pose_msg`([thormang3_manipulation_module_msgs/KinematicsPose])    Control the robot in Task Space`/robotis/thormang3_foot_step_generator/walking_command`([thormang3_foot_step_generator/FootStepCommand])    Create footsteps from the foot_step_generator with the walking parameter and direction.`/robotis/thormang3_foot_step_generator/footsteps_2d`([thormang3_foot_step_generator/Step2DArray])    2D step array to create footsteps for THORMANG3`/robotis/thormang3_foot_step_generator/balance_command`([std_msgs/Bool](http://docs.ros.org/api/std_msgs/html/msg/Bool.html))    Balance On/Off of THORMANG3#### Services Called  `/robotis/get_present_joint_ctrl_modules`([robotis_controller_msgs/GetJointModule])    Obtains module that is currently in use for each joint.`/plan_footsteps`([humanoid_nav_msgs/PlanFootsteps](http://docs.ros.org/api/humanoid_nav_msgs/html/srv/PlanFootsteps.html))    Creates footsteps from map and footstep_planner`/robotis/manipulation/get_joint_pose`([thormang3_manipulation_module_msgs/GetJointPose])    Obtains joint pose of selected manipulation group.`/robotis/manipulation/get_kinematics_pose`([thormang3_manipulation_module_msgs/GetKinematicsPose])    Obtains end effector pose of selected manipulation group.#### 3.4 Parameters  `~demo_config`(string, default: /config/demo_config.yaml)    Configuration file path of the demo program.### [thormang3_action_script_player](#thormang3-action-script-player)The Node that can play a action script.  The default action script is in the &quot;thormang3_action_script_player/script/action_script.yaml&quot;.  The user can specify the path of the action script file via rosparameter.  The thormang3_action_script_player is used with [thormang3_action_module](thormang3_action_module) and [ros_mpg321_player](https://github.com/ROBOTIS-GIT/ROBOTIS-Utility).  #### Download &amp; Build  `Note` Reference : [OPC Installation]  {: .notice}#### Run  thormang3_action_script_player runs with thormang3_demo.  &gt; Reference : [Remote Control(GUI Demo)]  If user wants to run thormang3_action_script_player separately, user can run it from OPC with the following command.```$ rosrun thormang3_action_script_player thormang3_action_script_player```#### How to write action scriptThe default action script file is in the &quot;thormang3_action_script_player/script/action_script.yaml&quot;.  The action script has the following structure.  ```script2:      cmd1: {cmd_name: play,  cmd_arg: 2}     cmd2: {cmd_name: sleep, cmd_arg: 1800}     cmd3: {cmd_name: mp3,   cmd_arg: &quot;/home/robotis/Music/thormang_mp3/hello_kor.mp3&quot;}     cmd4: {cmd_name: sleep, cmd_arg: 1100}     cmd5: {cmd_name: mp3,   cmd_arg: &quot;/home/robotis/Music/thormang_mp3/i_am_thormang_kor.mp3&quot;}```The action script is a list of cmd#, and scripts are executed in order of cmd#.  cmd# has two parameters. one is cmd_name, and the othrer is cmd_arg.  There are below four cmd_name in the action script.  * **play** : &quot;Play&quot; cmd_name means to execute action. User can specify the page number to execute as cmd_arg.  * **mp3** : &quot;mp3&quot; cmd_name means to play sound file. User can specify the sound file path to play as cmd_arg.    Because [ros_mpg321_player](https://github.com/ROBOTIS-GIT/ROBOTIS-Utility) is excuted in PPC, the sound file has to be in PPC.  * **wait** : &quot;wait&quot; cmd_name means to wait until finish of action playing. There is no cmd_arg for &quot;wait&quot; cmd_name.  * **sleep** : &quot;sleep&quot; cmd_name means to wait for a certain amount of time. User can specify the wait time as cmd_arg.  #### ROS API  ##### Subscribed Topics  `/robotis/demo/action_index`([std_msgs/Int32])    The action script number to play.  ##### Parameters  `/action_script_file_path`(string, default : &quot;thormang3_action_script_player/script/action_script.yaml&quot;)    The location of action script file.  ### [thormang3_foot_step_generator](#thormang3-foot-step-generator)The Node that can create a basic Step Data.  Based on the simple Parameter from Topic, the package creates StepData and transmit it to [thormang3_walking_module].    #### Download &amp; Build  `Note` Reference : [OPC Installation]  {: .notice}#### Run  &gt; Reference : [How to operate walking module]#### ROS API  ##### Subscribed Topics  `/robotis/status`([robotis_controller_msgs::Status])    Status message of THORMANG3`/robotis/thormang3_foot_step_generator/walking_command`([thormang3_foot_step_generator::FootStepCommand])    The topic includes walking type and step length.  `/robotis/thormang3_foot_step_generator/footsteps_2d`([thormang3_foot_step_generator::Step2DArray])    Planar walking step data contains x, y, theta and moving_foot_flag   ##### Services Called  `/robotis/walking/get_reference_step_data`([thormang3_walking_module_msgs::GetReferenceStepData])    The service obtains current location of THORMANG3 in the Global space from the Walking Module.  `/robotis/walking/add_step_data`([thormang3_walking_module_msgs::AddStepDataArray])    The service adds StepData created by the User.  `/robotis/walking/set_balance_param`([thormang3_walking_module_msgs::SetBalanceParam])    The service initiates walking.  `/robotis/walking/is_running`([thormang3_walking_module_msgs::IsRunning])    The service checks whether the robot is walking or not.  #### ROS Message Type  * [FootStepCommand.msg]* [Step2D.msg]* [Step2DArray.msg]### [thormang3_offset_tuner_client](#thormang3-offset-tuner-client)The GUI Node that can adjust offset of THORMANG3.It is used with the [thormang3_offset_tuner_server].#### Download &amp; Build  `Note` Reference : [OPC Installation]  {: .notice}#### Run  ```$ rosrun thormang3_offset_tuner_client thormang3_offset_tuner_client```#### ROS API##### Published Topics`/robotis/offset_tuner/joint_offset_data`([thormang3_offset_tuner_msgs::JointOffsetData|JointOffsetData.msg])       The topic transfers Joint offset   `/robotis/offset_tuner/torque_enable`([thormang3_offset_tuner_msgs::JointTorqueOnOffArray|JointTorqueOnOffArray.msg])      The topic executes Torque on/off command   `/robotis/offset_tuner/command`([std_msgs::String](http://docs.ros.org/api/std_msgs/html/msg/String.html))      The topic transfers other commands(save, initial posture, etc).   ##### Services`/robotis/offset_tuner/get_present_joint_offset_data`([thormang3_offset_tuner_msgs::GetPresentJointOffsetData|GetPresentJointOffsetData.srv])    The service obtains saved joint offset##### Parameters  `~/ROBOTIS-THORMANG-MPC/thormang3_manager/config/offset.yaml`     Saved offset value   ## [Common Packages](#common-packages)### [thormang3_description](#thormang3-description)Thormang3 URDF Model- Make a URDF Model : [URDF-ROS Wiki](http://wiki.ros.org/urdf)- Package  - doc : document for Thormang3 joint &amp; link information  - launch : launch file to execute Rviz  - meshes : STL files of Thormang3&#39;s each parts  - src : ROS node for Rviz to publish imaginary gripper joint  - urdf : urdf &amp; xacro files for Thormang3 model### [thormang3_gazebo](#thormang3-gazebo)Thormang3 Gazebo Simulation- Gazebo with ROS : [Connect to ROS](http://gazebosim.org/tutorials?cat=connect_ros)- Package  - config : ros controller for gazebo  - launch : launch files to execute gazebo simulation  - worlds : simulation environments## [Tools Packages](#tools-packages)### [thormang3_offset_tuner_server](#thormang3-offset-tuner-server)THORMANG3 Offset Tuner Node   Data related to the Offset can be Tuned, Loaded and Saved.   It is used with the [thormang3_offset_tuner_client].  #### Download &amp; Build  `Note` Reference : [MPC Installation]  {: .notice}#### Run  Execute the launch file.  ```$ roslaunch thormang3_offset_tuner_server thormang3_offset_tuner_server.launch```#### ROS API##### Subscribed Topics`/robotis/base/send_tra`([std_msgs/String])    The topic informs the start and end of trajectory following.  `/robotis/offset_tuner/joint_offset_data`([thormang3_offset_tuner_msgs/JointOffsetData])    The topic updates joint offset related parameters.  `/robotis/offset_tuner/torque_enable`([thormang3_offset_tuner_msgs/JointTorqueOnOffArray])    The topic transfers Torque enable/disable command for joints.`/robotis/offset_tuner/command`([std_msgs/String](http://docs.ros.org/api/std_msgs/html/msg/String.html))    The topic transfers command to the [thormang3_offset_tuner_client].    - &quot;save&quot;     : Saves current offset to yaml    - &quot;ini_pose&quot; : Take the initial posture for offset tuning  #### 3.2 Services`robotis/offset_tuner/get_present_joint_offset_data`([thormang3_offset_tuner_msgs/GetPresentJointOffsetData])    The service obtains current offset data from the [thormang3_offset_tuner_client].  ### [thormang3_action_editor](#thormang3-action-editor)THORMANG3 Action Editor Node   The action file can be edited by this action editor.   The action file will be used with [thormang3_action_module](thormang3_action_module).#### Action FileThe action file is in the &quot;thormang3_action_module/data&quot; folder. The action file is a file that contains THORMANG3’s poses and time data.  The data is written that the positions of dynamixels which converted from original resolution to 4095 resolution.And the action file is binaries file you cannot view its contents directly. User can view its contents with thormang3_action_editor.  ROBOTIS currently supplies a default action file with the source code. They are located in &quot;thormang3_action_module/data&quot; directory.    The action file contains 256 pages. Each page can store up to 7 stages (or steps) of action data. In the default action file provided not all pages are used. User can add user&#39;s own action by using of the empty pages.   #### Download &amp; Build  `Note` Reference : [MPC Installation]  {: .notice}#### Run  Execute the launch file on the MPC.```$ roslaunch thormang3_action_editor thormang3_action_editor.launch```#### UI![](/assets/images/platform/thormang3/thormang3_038.jpg)- **Page number**: Page number is the listed page number. If user wants to create a new action poses, user can use any empty page.  - **Page title**: We&#39;d like to recommend to user that they use a page title, if they will make a new action on an empty page.  - **Current position**: This is the current position of dynamixels which converted from original resolution to 4095 resolution. This data is represented by STP7 in thormang3_action_editor. Sometimes the position may read as ---- in thormang3_action_editor. This means position of the dynamixel is not being read (or its torque is off).    If user turn a dynamixel off, user cannot get current position reading until user turn it back on.    User can turn off any or all dynamixels. This is very convenient to make robot poses rather than entering position values.    For example, if user wants to make a new robot pose, user simply turns any dynamixels off, makes the robot pose, and turn the dynamixels back on at that robot pose. Once turning on, user will get the pose values.  - **Steps or stages**: Each page can be stored up to 7 steps, from STP0 to STP6. However, some actions may be required more than 7 stages to perform completely. It can be resolved by simply using multiple pages and link them with “Next”.  - **Next**: “Next” indicates whether or not action continues at a different page. To continue actions, just list the page number where action is to be continued. Number 0 indicates that action does not continue onto another page (default value). Linking page does not have to the in numerical order allowing you to link from one page to any other page.  - **Play Count**: “Play Count” is the number of times the action of the page is to be played.  - **Exit**: There may be times when an action is stopped. In this case, the robot may be in an unstable position. “Exit” is much like &quot;Next&quot;, so &quot;Exit&quot; should be linked to a page where THORMANG3 can return to a stable pose.if &quot;Exit&quot; is 0, it means that there is  no link to exit page linked (default value).    `Tip` When calling an action requires multiple pages, we strongly suggest that user call that action from the starting page. For example “clap” starts at page 7 and ends at page 8. This means you should call page 7 when calling “clap.” Calling the page 8 may cause the robot to perform abnormally.  - **STP7**: &quot;STP7&quot; column is the current position of the dynamixels which converted to 4095 resolution from its original resolution. &quot;----&quot; means that torque has been released.  - **PauseTime**: &quot;PauseTime&quot; is the pause for motion playback for step STP[x].  - **Time(x 8msec)** : &quot;Time&quot; is the time period for THORMANG3 to complete step STP[x]. Each time unit account for 8ms of time.    It is strongly advised that when user tests user’s own newly-created or edited actions, there should be small incremental changes in position, speed/time, and pause values for the sake of THORMANG3&#39;s stability.  #### The Contents of The Default Action FileThe below table shows the contents of the default action file.  | page number | page title | brief description of page                             | number of pages ||:-----------:|:----------:|-------------------------------------------------------|:---------------:||      1      | walki_init | initial standing pose                                 |        1        ||      2      |    hello   | greeting                                              |        1        ||      3      |  thank_you | Thank you                                             |        1        ||      4      |     yes    | yes                                                   |        1        ||      5      |      no    | no                                                    |        1        ||      6      |  fighting  | fighting                                              |        1        ||      7      |    clap    | clap                                                  |        2        ||      9      |   S_H_RE   | ready for shaking hands                               |        1        ||     10      |     S_H    | shaking hands                                         |        1        ||     11      |   S_H_END  | move to initialpose fram ready pose for shaking hands |        1        ||     12      |  scanning  | looking around                                        |        1        ||     13      |  ceremony  | ceremony                                              |        1        |#### Basic Command of Action EditorAfter typing &quot;help&quot;, the commend list will appear as shown below.  ![](/assets/images/platform/thormang3/thormang3_039.jpg)- **exit**: exits the program.  - **re**: refreshes the screen.  - **b**: moves to the previous page.  - **n**: moves to the next page.  - **page [index]**: moves to the [index] page. For example typing page 5 outputs data from page 5 on screen.  - **list**: outputs a list of pages.  - **new**: initializes current page by clearing all actuator position data.  - **copy [index]**: copies data from page [index] to current page. For example if you are on page 5 and want to copy page 9 then type copy 9.  - **set [value]**: sets position value on chosen actuator. For example If you want ID19 (head pan) to have a value of 512 then using the keyboard&#39;s directional keys place the cursor on ID19 and type set 512.  - **save**: saves any changes you&#39;ve made. the saved motion file (motion_4096.bin can be found at &quot;thormang3_action_module/data&quot;)  - **play**: plays motion(s) of current page.  - **name**: changes the name of the current page. You can view the name of the page at the top right portion of the screen. For example, page 2 is titled hello; to change the name type name and press the &quot;ENTER&quot; key. &quot;name:&quot; will appear at the bottom of the screen. Input the desired name for the page, good for instance, and press the &quot;ENTER&quot; key again.  - **i**: inserts data from STP7 to STP0. Moves data from STP[x] to STP[x + 1] if any.  - **i [index]**: inserts data from STP7 to STP[index]. Moves data from STP[index] to STP[index + 1] if any.  - **m [index] [index2]**: moves data from [index2] to [index].  - **d [index]**: deletes data from STP[index]. Moves data from STP[index] to STP[index - 1].  - **on/off**: turns on/off torque from all Dynamixels.  - **on/off [index1] [index2] [index3] …** : turns torque on/off from ID[index1] ID[index2] ID[index3]. For example off 20 releases torque from ID20. Notice that STP7 for ID20 will read [----]. Typing on 20 turns torque from ID20 on again and the screen outputs the current position data of ID20.  #### Example Action editing with thormang3_action_editor1. Run the thormang3_action_editor on MPC  2. Find the page where the &quot;walking_init page&quot; is by typing &quot;list&quot;    ![](/assets/images/platform/thormang3/thormang3_040.jpg)3. Exit the list and go to any blank page by typing &quot;page [x]&quot;(for example, page 15).  ![](/assets/images/platform/thormang3/thormang3_041.jpg)4. And copy the page 1 to page [x].      ![](/assets/images/platform/thormang3/thormang3_042.jpg)5. Go to &quot;walking_init&quot; pose by typing &quot;play&quot;    ![](/assets/images/platform/thormang3/thormang3_043.jpg)6. Turn off the torque of ID 2, 4 and 8 by typing &quot;off 2 4 8&quot;    ![](/assets/images/platform/thormang3/thormang3_044.jpg)7. After getting the desired pose turn torque on again by simple typing on. And insert the pose to step 1 by typing &quot;i 1&quot;    ![](/assets/images/platform/thormang3/thormang3_045.jpg)8. Edit &quot;Pause Time&quot;, &quot;Time&quot; of STP1 and &quot;Page Step&quot; as shown below.    ![](/assets/images/platform/thormang3/thormang3_046.png)9. Type &quot;play&quot; and check the THORMANG3&#39;s action  ## [THORMANG msgs Package](#thormang-msgs-package)### [thormang3_action_module_msgs]The followings are Messages and Services used for the [thormang3_action_module].- ROS Message Type : [StartAction.msg]- ROS Service Type : [IsRunning.srv]### [thormang3_feet_ft_module_msgs]Message used in the [thormang3_feet_ft_module].- ROS Message Type : [BothWrench.msg]### [thormang3_manipulation_module_msgs]Messages and Services used in the [thormang3_manipulation_module]- ROS Message Type  - [JointPose.msg]  - [KinematicsPose.msg]- ROS Service Type  - [GetJointPose.srv]  - [GetKinematicsPose.srv]### [thormang3_walking_module_msgs]Messages and Services used in the [thormang3_walking_module].- ROS Message Type  - [BalanceParam.msg]  - [DampingBalanceParam.msg]  - [JointFeedBackGain.msg]  - [PoseXYZRPY.msg]  - [PoseZRPY.msg]  - [RobotPose.msg]  - [StepData.msg]  - [StepPositionData.msg]  - [StepTimeData.msg]  - [WalkingJointStatesStamped.msg]- ROS Service Type  - [AddStepDataArray.srv]  - [GetReferenceStepData.srv]  - [IsRunning.srv]  - [RemoveExistingStepData.srv]  - [SetBalanceParam.srv]  - [SetDampingBalanceParam.srv]  - [SetJointFeedBackGain.srv]  - [StartWalking.srv]### [thormang3_head_control_module_msgs]Messages used in the [thormang3_head_control_module]- ROS Message Type : [HeadJointPose.msg]### [thormang3_offset_tuner_msgs]The following are Messages and Service used for the thormang3_offset_tuner_server and the [thormang3_offset_tuner_client].- ROS Message Type  - [JointOffsetData.msg]  - [JointOffsetPositionData.msg]  - [JointTorqueOnOff.msg]  - [JointTorqueOnOffArray.msg]- ROS Service Type  - [GetPresentJointOffsetData.srv][MPC Installation]: /docs/en/platform/thormang3/getting_started/#mpc-installation[PPC Installation]: /docs/en/platform/thormang3/getting_started/#ppc-installation[OPC Installation]: /docs/en/platform/thormang3/getting_started/#opc-installation[std_msgs/Int32]: http://docs.ros.org/api/std_msgs/html/msg/Int32.html[std_msgs/String]: http://docs.ros.org/api/std_msgs/html/msg/String.html[thormang3_action_module_msgs/StartAction]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/StartAction.msg[StartAction.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/StartAction.msg[robotis_controller_msgs/StatusMsg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/StatusMsg.msg[thormang3_action_module_msgs/IsRunning]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/(thormang3_action_module_msgs)IsRunning.srv[IsRunning.srv]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/(thormang3_action_module_msgs)IsRunning.srv[sensor_msgs/PointCloud2]: http://docs.ros.org/api/sensor_msgs/html/msg/PointCloud2.html[laser_assembler/AssembleScan2]: http://docs.ros.org/api/laser_assembler/html/srv/AssembleScans2.html[How to execute Simple Demonstration]: /docs/en/platform/thormang3/thormang3_operation/#simple-demo[How to operate walking module]: /docs/en/platform/thormang3/thormang3_ros_packages/#thormang3_walking_module[thormang3_offset_tuner_client]: /docs/en/platform/thormang3/thormang3_ros_packages/#thormang3-offset-tuner-client[thormang3_manipulation_module_msgs/KinematicsPose]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/KinematicsPose.msg[KinematicsPose.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/KinematicsPose.msg[thormang3_walking_module_msgs/GetReferenceStrpData]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/GetReferenceStepData.srv[GetReferenceStepData.srv]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/GetReferenceStepData.srv[thormang3_walking_module_msgs/AddStepDataArray]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/AddStepDataArray.srv[AddStepDataArray.srv]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/AddStepDataArray.srv[thormang3_walking_module_msgs/SetBalanceParam]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/SetBalanceParam.srv[SetBalanceParam.srv]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/SetBalanceParam.srv[thormang3_walking_module_msgs::IsRunning]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/IsRunning.srv[thormang3_feet_ft_module_msgs/BothWrench]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/BothWrench.msg[BothWrench.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/BothWrench.msg[robotis_controller_msgs/JointCtrlModule]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/JointCtrlModule.msg[thormang3_manipulation_module_msgs/JointPose]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/JointPose.msg[JointPose.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/JointPose.msg[thormang3_foot_step_generator/FootStepCommand]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/FootStepCommand.msg[thormang3_foot_step_generator/Step2DArray]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/Step2DArray.msg[robotis_controller_msgs/GetJointModule]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/GetJointModule.srv[thormang3_manipulation_module_msgs/GetJointPose]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/GetJointPose.srv[GetJointPose.srv]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/GetJointPose.srv[thormang3_manipulation_module_msgs/GetKinematicsPose]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/GetKinematicsPose.srv[GetKinematicsPose.srv]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/GetKinematicsPose.srv[thormang3_walking_module_msgs::GetReferenceStepData]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/GetReferenceStepData.srv[Remote Control(GUI Demo)]: /docs/en/platform/thormang3/thormang3_operation/#gui-program[thormang3_walking_module]: /docs/en/platform/thormang3/thormang3_ros_packages/#thormang3_walking_module[thormang3_action_module]: /docs/en/platform/thormang3/thormang3_ros_packages/#thormang3_action_module[thormang3_feet_ft_module]: /docs/en/platform/thormang3/thormang3_ros_packages/#thormang3_feet_ft_module[thormang3_manipulation_module]: /docs/en/platform/thormang3/thormang3_ros_packages/#thormang3_manipulation_module[thormang3_head_control_module]: /docs/en/platform/thormang3/thormang3_ros_packages/#thormang3_head_control_module[thormang3_offset_tuner_server]: /docs/en/platform/thormang3/thormang3_ros_packages/#thormang3-offset-tuner-server[robotis_controller_msgs::Status]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/StatusMsg.msg[FootStepCommand.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/FootStepCommand.msg[Step2D.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/Step2D.msg[Step2DArray.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/Step2DArray.msg[thormang3_offset_tuner_msgs::JointOffsetData|JointOffsetData.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/JointOffsetData.msg[thormang3_offset_tuner_msgs/JointOffsetData]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/JointOffsetData.msg[JointOffsetData.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/JointOffsetData.msg[JointOffsetPositionData.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/JointOffsetPositionData.msg[thormang3_offset_tuner_msgs::JointTorqueOnOffArray|JointTorqueOnOffArray.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/JointTorqueOnOffArray.msg[thormang3_offset_tuner_msgs/JointTorqueOnOffArray]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/JointTorqueOnOffArray.msg[JointTorqueOnOffArray.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/JointTorqueOnOffArray.msg[thormang3_offset_tuner_msgs::GetPresentJointOffsetData|GetPresentJointOffsetData.srv]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/GetPresentJointOffsetData.srv[thormang3_offset_tuner_msgs/GetPresentJointOffsetData]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/GetPresentJointOffsetData.srv[GetPresentJointOffsetData.srv]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/GetPresentJointOffsetData.srv[BalanceParam.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/BalanceParam.msg[DampingBalanceParam.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/DampingBalanceParam.msg[JointFeedBackGain.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/JointFeedBackGain.msg[PoseXYZRPY.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/PoseXYZRPY.msg[PoseZRPY.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/PoseZRPY.msg[RobotPose.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/RobotPose.msg[StepData.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/StepData.msg[StepPositionData.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/StepPositionData.msg[StepTimeData.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/StepTimeData.msg[WalkingJointStatesStamped.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/WalkingJointStatesStamped.msg[RemoveExistingStepData.srv]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/RemoveExistingStepData.srv[SetDampingBalanceParam.srv]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/SetDampingBalanceParam.srv[SetJointFeedBackGain.srv]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/SetJointFeedBackGain.srv[StartWalking.srv]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/StartWalking.srv[HeadJointPose.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/HeadJointPose.msg[JointTorqueOnOff.msg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/JointTorqueOnOff.msg",
        "url": " http://localhost:4000/docs/en/platform/thormang3/thormang3_ros_packages/"
      } ,
  
      "docs-en-platform-thormang3-thormang3-ros-packages":  {
        "title": "THORMANG3",
      "content"	 : "# [THORMANG3 ROS Packages](#thormang3-ros-packages)## [MPC Packages](#mpc-packages)### [thormang3_manager](#thormang3_manager)`thormang3_manager` is a package to apply ROBOTIS Framework to THORMANG3. Refer to the below link to create a new robot manager.1. Download &amp; Build    `Note` Reference : [MPC Installation]    {: .notice}2. Run    Execute the program with a .launch file in order to load ROS parameters. The command should be executed from the root account to configure the attribute of Thread.    ```    $ sudo bash    [sudo] password for robotis:    # roslaunch thormang3_manager thormang3_manager.launch    ```#### ROS API+ Launch Parameters  - gazebo (bool, default: false) : Configure whether to the program run in gazebo mode.  - gazebo_robot_name (string, default: &quot;&quot;) : Configure the robot name for joint_state topic name when running in gazebo mode.  ex) If thormang3 is the gazebo_robot_name, /thormang3/joint_states will be subscribed.  - offset_file_path (string, default: &quot;&quot;) : This path indicates the location of the file that contains offset data of each joint and initial posture data for offset adjustment.  - robot_file_path (string, default: &quot;&quot;) : This path indicates the location of .robot file that contains robot data.  - init_file_path (string, default: &quot;&quot;) : This path indicates the location of the file that contains initialization information of each joint.  - ft_data_path (string, default: &quot;&quot;) : This path indicates the location of the file that contains calibration matrix and unloaded voltage information of the FT sensor.  - ft_calibration_data_path (string, default: &quot;&quot;) : This path indicates the location of the file that contains the reference value for FT sensor calibration.### [thormang3_kinematics_dynamics](#thormang3_kinematics_dynamics)`thormang3_kinematics_dynamics` is a kinematics and dynamics library that provides joint &amp; link information and basic robotics function. To use this library, it is necessary to set the `CMakeList.txt` and `package.xml` of each moduleIn `CMakeList.txt`,```c++find_package( thormang3_kinematics_dynamics )target_link_libraries( thormang3_kinematics_dynamics )```In `package.xml`,```c++thormang3_kinematics_dynamics```#### Functions1. LinkData.cpp    + name : Joint name    + parent : Parent joint ID    + sibling : Sibling joint ID    + child : Child joint ID    + mass : Mass    + relative_position : Joint relative position (relative to parent)    + joint_axis : Joint axis vector (relative to parent)    + center_of_mass : Center of mass (Link Local)    + inertia : Moment of Inertia (Link Local)    + joint_limit_max : Joint upper limit    + joint_limit_min : Joint lower limit    + joint_angle : Joint angle    + joint_velocity : Joint velocity    + joint_acceleration : Joint acceleration    + position: Link position    + orientation : Link orientation    + transformation : Link transformation matrix2. ThorMang3KinematicsDynamics.cpp  + THORMANG3 joint &amp; link information    ```c++    ThorMang3KinematicsDynamics(TREE_SELECT tree)    ```  + Find kinematics tree    - arguments : start joint id    - return value : vector ( n x 1 )    ```c++    std::vector findRoute( int to )    ```  + Find kinematics tree    - arguments : start joint id and end joint id    - return value : vector ( n x 1 )    ```c++    std::vector findRoute( int from , int to )    ```  + Calculate total mass    - arguments : start joint id    - return value : total mass    ```c++    double TotalMass( int joint_ID )    ```  + Calculate center of mass    - arguments : start joint id    - return value : 3 x 1 matrix    ```c++    Eigen::MatrixXd CalcMC( int joint_ID )    Eigen::MatrixXd CalcCOM( Eigen::MatrixXd MC )    ```  + Calculate forward kinematics    - arguments : start joint id    ```c++    void ForwardKinematics( int joint_ID )    ```  + Calculate forward kinematics    - arguments : vector ( n x 1 )    - return value : 6 x n matrix    ```c++    Eigen::MatrixXd CalcJacobian( std::vector idx )    ```  + Calculate inverse kinematics    - arguments : end joint id, target position, target orientation, max iteration, calculation error    - return value : true or false    ```c++    bool InverseKinematics    ( int to,      Eigen::MatrixXd tar_position, Eigen::MatrixXd tar_orientation,      int max_iter,                 double ik_err )    ```  + Calculate inverse kinematics    - arguments : start joint id, end joint id, target position, target orientation, max iteration, calculation error    - return value : true or false    ```c++    bool InverseKinematics    ( int from,                     int to,      Eigen::MatrixXd tar_position, Eigen::MatrixXd tar_orientation,      int max_iter,                 double ik_err )    ```  + Calculate inverse kinematics for leg    - arguments : output, target position (x y z), target orientation (roll pitch yaw)    - return value : true or false    ```c++    bool InverseKinematicsforLeg    ( double *out,      double x,    double y,     double z,      double roll, double pitch, double yaw )    ```  + Calculate inverse kinematics for right leg    - arguments : output, target position (x y z), target orientation (roll pitch yaw)    - return value : true or false    ```c++    bool InverseKinematicsforRightLeg    ( double *out,      double x,    double y,     double z,      double roll, double pitch, double yaw);    ```  + Calculate inverse kinematics for left leg    - arguments : output, target position (x y z), target orientation (roll pitch yaw)    - return value : true or false    ```c++    bool InverseKinematicsforLeftLeg    ( double *out,      double x,    double y,     double z,      double roll, double pitch, double yaw);    ```### [thormang3_action_module](#thormang3_action_module)`thormang3_action_module` is one of the Motion Module. This module can load and play a motion file.The motion file is edited with thormang3_action_editor- Download &amp; Build  `Note` Reference : [MPC Installation]  {: .notice}#### ROS API  - Subscribed Topics    `/robotis/action/page_num`([std_msgs/Int32])     The page number will be played.     If user send a page number between 1 ~ 255, the page will be played.     If user send -1, the action will be stopped.     If user send -2, the action will be broken(stop immediately).    `/robotis/action/start_action`([thormang3_action_module_msgs/StartAction])     The page number and joint names will be played.  - Published Topics    `/robotis/status`([robotis_controller_msgs/StatusMsg])     The message indicates status of the action_module.  - Services    `/robotis/action/is_running`([thormang3_action_module_msgs/IsRunning])     The service that checks whether THORMANG3&#39;s action is being played or not.### [thormang3_base_module](#thormang3_base_module)`thormang3_base_module` is a module for initial posture. This module is included in thormang3_manager as a library.- Download &amp; Build  `Note` Reference : [MPC Installation]  {: .notice}  The Motion Module is used in the manager as a form of library.  `Note` Reference : Creating new robot manager  {: .notice}#### ROS API  - Subscribed Topics    `/robotis/base/ini_pose`([std_msgs/String])     A command to take the initial posture(This command is effective even when the base module is inactive).  - Published Topics    `/robotis/enable_ctrl_module`([std_msgs/String])     A base_module activation topic to take the initial posture.    `/robotis/status`([robotis_controller_msgs/StatusMsg])     A message that contains the status of base_module.### [thormang3_manipulation_module](#thormang3_manipulation_module)THORMANG3 manipulation module for the upper body.- Download &amp; Build  `Note` Reference : [MPC Installation]  {: .notice}#### ROS API  - Subscribed Topics    `/robotis/manipulation/ini_pose_msg` (std_msgs/String)     A message to take the initial posture.    `/robotis/manipulation/joint_pose_msg` (thormang3_manipulation_module_msgs/JointPose)     A message to move to the target point in the Joint Space.    `/robotis/manipulation/kinematics_pose_msg` (thormang3_manipulation_module_msgs/KinematicsPose)     A message to move to the target pose in the Task Space.  - Published Topics    `/robotis/status` (robotis_controller_msgs/StatusMsg)     A status message of THORMANG3  - Services    `/robotis/manipulation/get_joint_pose` (thormang3_manipulation_module_msgs/GetJointPose)     A service that reads the pose of specific joint.    `/robotis/manipulation/get_kinematics_pose` (thormang3_manipulation_module_msgs/GetKinematicsPose)     A service that reads the pose of end effector from a specific kinematics group.### [thormang3_walking_module](#thormang3_walking_module)![](/assets/images/platform/thormang3/thormang3_walking_module_diagram.jpg)As seen from the above figure, thormang3_walking_module is one of the MotionModules from ROS Framework.THROMANG3 can be controlled with Topics and Services.Users can designate almost all Step Parameters.(thormang3_walking_module_msgs/StepData)1. Pattern Generation    thormang3_walking_module includes online walking pattern generator.    The pattern is generated from Foot Step Data input.    ![](/assets/images/platform/thormang3/thormang3_walking_module_algorithm_diagram.jpg)2. Balance Algorithm    The balance algorithm is included as shown below.(thormang3_walking_module_msgs/BalanceParam)    ![](/assets/images/platform/thormang3/thormang3_walking_module_balance_diagram.jpg)- Download &amp; Build  `Note` Reference : [MPC Installation]  {: .notice}#### ROS API  - Subscribed Topics    `/robotis/sensor/imu/imu` (sensor_msgs/Imu)   Current data of the IMU Sensor  - Published Topics    `/robotis/status`(robotis_controller_msgs/StatusMsg)   Status message of THORMANG3  - Services    `/robotis/walking/get_reference_step_data`(thormang3_walking_module_msgs/GetReferenceStrpData)   A service that collects current location of THORMANG3 in the Global from the Walking Module.    `/robotis/walking/add_step_data`(thormang3_walking_module_msgs/AddStepDataArray)   A service that adds StepData created by the user.    `/robotis/walking/walking_start`(thormang3_walking_module_msgs/WalkingStart)   A service that commands to start walking.    `/robotis/walking/is_running`(thormang3_walking_module_msgs/IsRunning)   A service that checks whether THORMANG3 is walking or not.    `/robotis/walking/set_balance_param`(thormang3_walking_module_msgs/SetBalanceParam)   A service that can set Balance Algorithm parameters.    `/robotis/walking/remove_existing_step_data`(thormang3_walking_module_msgs/RemoveExistingStepData)   A service that deletes existing StepData.### [thormang3_head_control_module](#thormang3_head_control_module)This module is to control the head. This module is included in the Thormang3 Manager as a library.- Download &amp; Build  `Note` Reference : [MPC Installation]  {: .notice}`Note` Reference : Creating new robot manager{: .notice}#### ROS API- Subscribed Topics    `/robotis/head_control/move_lidar`(std_msgs/String)     The command moves the head in order to obtain Lidar data.    `/robotis/head_control/move_lidar_with_range`(std_msgs/Float64)     This command scans up and down a given range at the current head position to generate 3D lidar data.    `/robotis/head_control/set_joint_states`(sensor_msgs/JointState)     The message controls joints that are connected to the head.    `/robotis/head_control/set_joint_states_time`(thormang3_head_control_module_msgs/HeadJointPose)     The message moves head joints for given time.- Published Topics    `/robotis/sensor/move_lidar`(std_msgs/String)     This message reports the head movement to the Node which assembles LiDAR data.    `/robotis/status`(robotis_controller_msgs/StatusMsg)     The message indicates status of the head_control_module.### [ati_ft_sensor](#ati_ft_sensor)This is a library to use ForceTorque Sensor(FT Sensor) of ATI Inc in the ROS.The library can load saved Calibration Matrix and Unloaded Voltage from the YAML File.The library does not include functions to communicate with hardwares. It can convert voltage output from the FT sensor to N or Nm.#### Functions1. ATIForceTorqueSensorTWE Class```cppbool Initialize(const std::string&amp; ft_data_path,                const std::string&amp; ft_data_key,                const std::string&amp; ft_frame_id,                const std::string&amp; ft_raw_publish_name,                const std::string&amp; ft_scaled_publish_name)```  - arguments :      - ft_data_path : Location of the YAML file to save Calibration Matrix and Unloaded Voltage      - ft_data_key        - The key to read data from YAML        - Key format used to read YAML looks like : ft_data_key + &quot;_calibration_matrix&quot; 와 _ft_data_key + &quot;_unload&quot;        - For example, if &quot;ft_right_foot_calibration_matrix&quot; and &quot;ft_right_foot_unload&quot; are saved in the YAML, ft_data_key should be &quot;ft_right_foot&quot;.      - ft_frame_id : The frame_id to publish sensor outputs      - ft_raw_publish_name : The topic name for raw outputs      - ft_scaled_publish_name : The topic name for scaled outputs  - description : The function that configures variables in the Class according to Arguments  - return value : Indicates Initialization success/failure result ```cppvoid SetScaleFactor(double ft_scale_factor)```  - arguments :    - ft_scale_factor : The gain value for calculating scaled output    - Refer to the &quot;SetScaleParam&quot; function.  - description : Function sets the scale gain of the FT sensor  - return value : void ```cppvoid SetNullForceTorque(Eigen::MatrixXd ft_null)```  - arguments :    - ft_null : Null value for calculating scaled output    - Refer to the &quot;SetScaleParam&quot; function  - description : Function sets null value of the FT sensor  - return value : void ```cppvoid SetScaleParam(double ft_scale_factor, Eigen::MatrixXd ft_null)```  - arguments :    - ft_scale_factor : The gain value for calculating scaled output    - ft_null : Null value when calculating scaled output  - description :    - Function sets Parameter for calculating scaled output    - The scaled output can be calculated as below.    - ft_scaled = ft_scale_factor * (ft_raw - ft_null)  - return value : void ```cppvoid SetCurrentVoltageOutput(double voltage0, double voltage1, double voltage2, double voltage3, double voltage4, double voltage5)```  - arguments :    - voltage0 : The output voltage of the FT sensor #0    - voltage1 : The output voltage of the FT sensor #1    - voltage2 : The output voltage of the FT sensor #2    - voltage3 : The output voltage of the FT sensor #3    - voltage4 : The output voltage of the FT sensor #4    - voltage5 : The output voltage of the FT sensor #5  - description : Function sets internal variables for the output voltage of the FT sensors and converts them to force torque.  - return value : void ```cppvoid SetCurrentVoltageOutput(Eigen::MatrixXd _voltage)```  - arguments :    - voltage : The 6x1 matrix form of output voltage of the FT sensor  - description : Function sets internal variables for the output voltage of the FT sensors and converts them to force torque.  - return value : void ```cppEigen::MatrixXd GetCurrentForceTorqueRaw()```  - arguments : void  - description : Return the most recent Raw Force and Torque of the voltage calculated from the &quot;SetCurrentVoltageOutput&quot; function.  - return value : Raw Force &amp; Raw Torque  - Eigen::MatrixXd ft = GetCurrentForceTorqueRaw()  - force_x = ft.coeff(0,0);  - force_y = ft.coeff(1,0);  - force_z = ft.coeff(2,0);  - torque_x = ft.coeff(3,0);  - torque_y = ft.coeff(4,0);  - torque_z = ft.coeff(5,0); ```cppEigen::MatrixXd GetCurrentForceTorqueScaled()```  - arguments : void  - description : Return the most recent Scaled Force and Torque of the voltage calculated from the &quot;SetCurrentVoltageOutput&quot; function.  - return value : Scaled Force &amp; Scaled Torque  - Eigen::MatrixXd ft = GetCurrentForceTorqueScaled()  - force_x = ft.coeff(0,0);  - force_y = ft.coeff(1,0);  - force_z = ft.coeff(2,0);  - torque_x = ft.coeff(3,0);  - torque_y = ft.coeff(4,0);  - torque_z = ft.coeff(5,0); ```cppvoid GetCurrentForceTorqueRaw(double* _force_x_N,   double* _force_y_N,   double* _force_z_N,                              double* _torque_x_Nm, double* _torque_y_Nm, double* _torque_z_Nm)```  - arguments : The return pointer of Raw Force and Raw Torque  - description : Return the most recent Raw Force and Torque of the voltage calculated from the &quot;SetCurrentVoltageOutput&quot; function.  - return value : void ```cppvoid GetCurrentForceTorqueScaled(double* _force_x_N,   double* _force_y_N,   double* _force_z_N,                                 double* _torque_x_Nm, double* _torque_y_Nm, double* _torque_z_Nm)```  - description : Return the most recent Scaled Force and Torque of the voltage calculated from the &quot;SetCurrentVoltageOutput&quot; function.  - return value : void ```cppvoid SetCurrentVoltageOutputPublishForceTorque(double _voltage0, double _voltage1, double _voltage2,                                               double _voltage3, double _voltage4, double _voltage5)```  - arguments :    - voltage0 : The output voltage of the FT sensor #0    - voltage1 : The output voltage of the FT sensor #1    - voltage2 : The output voltage of the FT sensor #2    - voltage3 : The output voltage of the FT sensor #3    - voltage4 : The output voltage of the FT sensor #4    - voltage5 : The output voltage of the FT sensor #5  - description : Function sets internal variables for the output voltage of the FT sensors and converts them to force torque, then publish the converted force torque.  - return value : void ```cppvoid SetCurrentVoltageOutputPublish(Eigen::MatrixXd _voltage)```  - arguments :    - voltage : The 6x1 matrix form of output voltage of the FT sensor  - description : Function sets internal variables for the output voltage of the FT sensors and converts them to force torque, then publish the converted force torque.  - return value : void### [thormang3_feet_ft_module](#thormang3_feet_ft_module)The sensor module of THORMANG3 that uses ati_ft_sensor library.Acquired sensor values when the robot is hanging on the lift and standing on the ground can be used for the Calibration feature.#### ROS API1. Subscribed Topics  `/robotis/feet_ft/ft_calib_command` (std_msgs/String)   FT Calibration Command2. Published Topics  `/robotis/status` (robotis_controller_msgs/StatusMsg)   The status message of THORMANG3  `/robotis/feet_ft/both_ft_value` (thormang3_feet_ft_module_msgs/BothWrench)   Both Wrench  `/robotis/sensor/ft_right_foot/raw` (geometry_msgs/WrenchStamped)   raw output from the force torque sensor on the right foot  `/robotis/sensor/ft_right_foot/scaled` (geometry_msgs/WrenchStamped)   scaled output from the force torque sensor on the right foot  `/robotis/sensor/ft_right_foot/raw`(geometry_msgs/WrenchStamped)   raw output from the force torque sensor on the left foot  `/robotis/sensor/ft_right_foot/scaled`(geometry_msgs/renchStamped)   scaled output from the force torque sensor on the left foot### [thormang3_balance_control](#thormang3_balance_control)Library for using Balance Algorithm of THORMANG3 in ROS. There is two kinds of algorithm.#### Functions and Variables1. BalanceLowPassFilter Class    `void initialize(double control_cycle_sec_, double cut_off_frequency)`    - arguments :        - control_cycle_sec : control cycle in sec of motion module        - cut_off_frequency : cut off frequency for low pass filter    - description : the function that configures variables in the class according to arguments    - return value : void    `void setCutOffFrequency(double cut_off_frequency)`    - arguments :        -cut off frequency : desired cut off frequency for filtering. If cut_off_frequency is less than 0, filtering is not performed.    - description : the function for setting cut off frequency    - return value : void    `double getCutOffFrequency(void)`    - arguments : void    - description : the function for getting set cut off frequency    - return value : current set cut off frequency    `double getFilteredOutput(double present_raw_value)`    - arguments :        - present_raw_value : raw value    - description : the function for filtering and getting its result    - return value : filtered value2. Damping Controller Class    `double getFeedBack(double present_sensor_output)`    - arguments :        - present_sensor_output : present sensor output    - description : the function for calculating damping control and getting its result    - return value : result calculated by damping controller    `double desired_`    - description : desired value for damping controller    `double gain_`    - description : gain for damping controller    `double time_constant_sec_`    - description : time constant for damping controller    `double output_`    - description : result of damping controller    `double control_cycle_sec_`    - description : control cycle in sec of motion module3. BalancePDController Class    `double getFeedBack(double present_sensor_output)`    - arguments :        - present_sensor_output : present sensor output    - description : the function for calculating PD control and getting its result    - return value : result calculated by PD controller    `double desired_`    - description : desired value for PD controller    `double p_gain_`    - description : P gain for PD controller    `double d_gain_`    - description : D gain for PD controller4. BalanceControlUsingDampingConroller Class    `void initialize(const int control_cycle_msec)`    - arguments :        - control_cycle_msec : control cycel of motion module in milliseconds    - description : the function that configures variables in the class according to arguments    - return value : void    `void setGyroBalanceEnable(bool enable)`    - arguments :        - enable : true or false    - description : The function that turns on or off the balance algorithm with gyro    - return value : void    `void setOrientationBalanceEnable(bool enable)`    - arguments :        - enable : true or false    - description : The function that turns on or off the balance algorithm with orientation from IMU sensor    - return value : void    `void setForceTorqueBalanceEnable(bool enable)`    - arguments :        - enable : true or false    - description : The function that turns on or off the balance algorithm with force and torque from ft sensor    - return value : void    `void process(int *balance_error, Eigen::MatrixXd *robot_to_cob_modified, Eigen::MatrixXd *robot_to_right_foot_modified, Eigen::MatrixXd *robot_to_left_foot_modified)`    - arguments :        - balance_error : the one of below values would be returned            - BalanceControlError::NoError(= 0) : There is no error.            - BalanceControlError::BalanceLimit(= 0) : The modification value by the balance algorithm is greater than the maximum modification.        - robot_to_cob_modified : the center of body modification calculated by balance algorithm        - robot_to_right_foot_modified : the right foot modification calculated by balance algorithm        - robot_to_left_foot_modified : the left_foot of body modification calculated by balance algorithm    - description : calculating balance algorithm using desired values and sensor outputs    - return value : void    `void setDesiredPose(const Eigen::MatrixXd &amp;robot_to_cob, const Eigen::MatrixXd &amp;robot_to_right_foot, const Eigen::MatrixXd &amp;robot_to_left_foot)`    - arguments :        - robot_to_cob : desired pose of center of body with respect to robot&#39;s local coordinate        - robot_to_right_foot : desired pose of right foot with respect to robot&#39;s local coordinate        - robot_to_left_foot : desired pose of left foot with respect to robot&#39;s local coordinate    - description : the function for setting desired pose of right foot, left foot and center of body    - return value : void    `void setDesiredCOBGyro(double gyro_roll, double gyro_pitch)`    - arguments :        - gyro_roll : desired x directional angular velocity with respect robot&#39;s local coordinate        - gyro_pitch : desired y directional angular velocity with respect robot&#39;s local coordinate    - description : the function for setting desired angular velocity    - return value : void    `void setDesiredCOBOrientation(double cob_orientation_roll, double cob_orientation_pitch)`    - arguments :        - cob_orientation_roll : desired roll angle in radian of robot&#39;s local coordinate        - cob_orientation_pitch : desired pitch angle in radian of robot&#39;s local coordinate    - description : the function for setting desired robot&#39;s orientation    - return value : void    `void setDesiredFootForceTorque(double r_force_x_N,      double r_force_y_N,       double r_force_z_N,                                 double r_torque_roll_Nm, double r_torque_pitch_Nm, double r_torque_yaw_Nm,                                 double l_force_x_N,      double l_force_y_N,       double l_force_z_N,                                 double l_torque_roll_Nm, double l_torque_pitch_Nm, double l_torque_yaw_Nm)`    - arguments :        - r_force_x_N : desired x directional force on right foot with respect to robot&#39;s local coordinate        - r_force_y_N : desired y directional force on right foot with respect to robot&#39;s local coordinate        - r_force_z_N : desired z directional force on right foot with respect to robot&#39;s local coordinate        - r_torque_roll_Nm : desired x directional torque on right foot with respect to robot&#39;s local coordinate        - r_torque_pitch_Nm : desired y directional torque on right foot with respect to robot&#39;s local coordinate        - r_torque_yaw_Nm : desired z directional torque on right foot with respect to robot&#39;s local coordinate        - l_force_x_N : desired x directional force on left foot with respect to robot&#39;s local coordinate        - l_force_y_N : desired y directional force on left foot with respect to robot&#39;s local coordinate        - l_force_z_N : desired z directional force on left foot with respect to robot&#39;s local coordinate        - l_torque_roll_Nm : desired x directional torque on left foot with respect to robot&#39;s local coordinate        - l_torque_pitch_Nm : desired x directional torque on left foot with respect to robot&#39;s local coordinate        - l_torque_yaw_Nm : desired x directional torque on left foot with respect to robot&#39;s local coordinate    - description : the function for setting desired force in newton and torque in newton-meter on feet    - return value : void    `void setCurrentGyroSensorOutput(double gyro_roll, double gyro_pitch)`    - arguments :      - gyro_roll : current x directional angular velocity with respect robot&#39;s local coordinate      - gyro_pitch : current y directional angular velocity with respect robot&#39;s local coordinate    - description : the function for setting current angular velocity from IMU sensor    - return value :    `void setCurrentOrientationSensorOutput(double cob_orientation_roll, double cob_orientation_pitch)`    - arguments :        - cob_orientation_roll : current roll angle in radian of robot&#39;s local coordinate        - cob_orientation_pitch : current pitch angle in radian of robot&#39;s local coordinate    - description : the function for setting current orientation from IMU sensor    - return value : void    `void setCurrentFootForceTorqueSensorOutput(double r_force_x_N,      double r_force_y_N,       double r_force_z_N,                                               double r_torque_roll_Nm, double r_torque_pitch_Nm, double r_torque_yaw_Nm,                                               double l_force_x_N,      double l_force_y_N,       double l_force_z_N,                                               double l_torque_roll_Nm, double l_torque_pitch_Nm, double l_torque_yaw_Nm)`    - arguments :        - r_force_x_N : current x directional force on right foot with respect to robot&#39;s local coordinate        - r_force_y_N : current y directional force on right foot with respect to robot&#39;s local coordinate        - r_force_z_N : current z directional force on right foot with respect to robot&#39;s local coordinate        - r_torque_roll_Nm : current x directional torque on right foot with respect to robot&#39;s local coordinate        - r_torque_pitch_Nm : current y directional torque on right foot with respect to robot&#39;s local coordinate        - r_torque_yaw_Nm : current z directional torque on right foot with respect to roboti&#39;s local coordinate        - l_force_x_N : current x directional force on left foot with respect to robot&#39;s local coordinate        - l_force_y_N : current y directional force on left foot with respect to robot&#39;s local coordinate        - l_force_z_N : current z directional force on left foot with respect to robot&#39;s local coordinate        - l_torque_roll_Nm : current x directional torque on left foot with respect to robot&#39;s local coordinate        - l_torque_pitch_Nm : current x directional torque on left foot with respect to robot&#39;s local coordinate        - l_torque_yaw_Nm : current x directional torque on left foot with respect to robot&#39;s local coordinate    - description : the function for setting current force and torque from force-torque sensor on both feet    - return value : void    `void setMaximumAdjustment(double cob_x_max_adjustment_m,  double cob_y_max_adjustment_m,  double cob_z_max_adjustment_m,                              double cob_roll_max_adjustment_rad, double cob_pitch_max_adjustment_rad, double cob_yaw_max_adjustment_rad,                              double foot_x_max_adjustment_m, double foot_y_max_adjustment_m, double foot_z_max_adjustment_m,                              double foot_roll_max_adjustment_rad, double foot_pitch_max_adjustment_rad, double foot_yaw_max_adjustment_rad)`    - arguments :        - cob_x_max_adjustment_m : the maximum x directinal linear modification of center of body        - cob_y_max_adjustment_m : the maximum y directinal linear modification of center of body        - cob_z_max_adjustment_m : the maximum z directinal linear modification of center of body        - cob_roll_max_adjustment_rad : the maximum x directinal angular modification of center of body        - cob_pitch_max_adjustment_rad : the maximum y directinal angular modification of center of body        - cob_yaw_max_adjustment_rad : the maximum z directinal angular modification of center of body        - foot_x_max_adjustment_m : the maximum x directinal linear modification of foot        - foot_y_max_adjustment_m : the maximum y directinal linear modification of foot        - foot_z_max_adjustment_m : the maximum z directinal linear modification of foot        - foot_roll_max_adjustment_rad : the maximum x directinal angular modification of foot        - foot_pitch_max_adjustment_rad : the maximum y directinal angular modification of foot        - foot_yaw_max_adjustment_rad : the maximum z directinal angular modification of foot    - description : the function for setting maximum modification    - return value : void    `void setCOBManualAdjustment(double cob_x_adjustment_m, double cob_y_adjustment_m, double cob_z_adjustment_m)`    - arguments :        - cob_x_adjustment_m : the x offset of center of body        - cob_y_adjustment_m : the y offset of center of body        - cob_z_adjustment_m : the z offset of center of body    - description : the function for setting manual modification of center of body    - return value : void    `double getCOBManualAdjustmentX()`    - arguments : void    - description : the function for getting x directional manual modification of center of body    - return value : x directional manual modification of center of body    `double getCOBManualAdjustmentY()`    - arguments : void    - description : the function for getting y directional manual modification of center of body    - return value : y directional manual modification of center of body    `double getCOBManualAdjustmentZ()`    - arguments : void    - description : the function for getting z directional manual modification of center of body    - return value : z directional manual modification of center of body    `void setGyroBalanceGainRatio(double gyro_balance_gain_ratio)`    - arguments :    - gyro_balance_gain_ratio : gyro balance gain    - description : the function for setting gyro balance gain    - return value : void    `double getGyroBalanceGainRatio(void)`    - arguments : void    - description : the function for getting set gyro balance gain    - return value : current set gyro balance gain    `DampingController foot_roll_angle_ctrl_`    - description : damping controller for foot using roll angle    `DampingController foot_pitch_angle_ctrl_`    - description : damping controller for foot using pitch angle    `DampingController right_foot_force_x_ctrl_`    - description : damping controller for foot using force x on right foot    `DampingController right_foot_force_y_ctrl_`    - description : damping controller for foot using force y on right foot    `DampingController right_foot_force_z_ctrl_`    - description : damping controller for foot using force z on right foot    `DampingController right_foot_torque_roll_ctrl_`    - description : damping controller for foot using torque x on right foot    `DampingController right_foot_torque_pitch_ctrl_`    - description : damping controller for foot using torque y on right foot    `DampingController left_foot_force_x_ctrl_`    - description : damping controller for foot using force x on left foot    `DampingController left_foot_force_y_ctrl_`    - description : damping controller for foot using force y on left foot    `DampingController left_foot_force_z_ctrl_`    - description : damping controller for foot using force z on left foot    `DampingController left_foot_torque_roll_ctrl_`    - description : damping controller for foot using torque x on left foot    `DampingController left_foot_torque_pitch_ctrl_`    - description : damping controller for foot using torque y on left foot5. BalanceControlUsingPDController Class    `void initialize(const int control_cycle_msec)`    - arguments :        - control_cycle_msec : control cycel of motion module in milliseconds    - description : the function that configures variables in the class according to arguments    - return value : void    `void setGyroBalanceEnable(bool enable)`    - arguments :        - enable : true or false    - description : The function that turns on or off the balance algorithm with gyro    - return value : void    `void setOrientationBalanceEnable(bool enable)`    - arguments :        - enable : true or false    - description : The function that turns on or off the balance algorithm with orientation from IMU sensor    - return value : void    `void setForceTorqueBalanceEnable(bool enable)`    - arguments :        - enable : true or false    - description : The function that turns on or off the balance algorithm with force and torque from ft sensor    - return value : void    `void process(int *balance_error, Eigen::MatrixXd *robot_to_cob_modified, Eigen::MatrixXd *robot_to_right_foot_modified, Eigen::MatrixXd *robot_to_left_foot_modified)`    - arguments :        - balance_error : the one of below values would be returned        - BalanceControlError::NoError(= 0) : There is no error.        - BalanceControlError::BalanceLimit(= 0) : The modification value by the balance algorithm is greater than the maximum modification.        - robot_to_cob_modified : the center of body modification calculated by balance algorithm        - robot_to_right_foot_modified : the right foot modification calculated by balance algorithm        - robot_to_left_foot_modified : the left_foot of body modification calculated by balance algorithm    - description : calculating balance algorithm using desired values and sensor outputs    - return value : void    `void setDesiredPose(const Eigen::MatrixXd &amp;robot_to_cob, const Eigen::MatrixXd &amp;robot_to_right_foot, const Eigen::MatrixXd &amp;robot_to_left_foot)`    - arguments :        - robot_to_cob : desired pose of center of body with respect to robot&#39;s local coordinate        - robot_to_right_foot : desired pose of right foot with respect to robot&#39;s local coordinate        - robot_to_left_foot : desired pose of left foot with respect to robot&#39;s local coordinate    - description : the function for setting desired pose of right foot, left foot and center of body    - return value : void    `void setDesiredCOBGyro(double gyro_roll, double gyro_pitch)`    - arguments :        - gyro_roll : desired x directional angular velocity with respect robot&#39;s local coordinate        - gyro_pitch : desired y directional angular velocity with respect robot&#39;s local coordinate    - description : the function for setting desired angular velocity    - return value : void    `void setDesiredCOBOrientation(double cob_orientation_roll, double cob_orientation_pitch)`    - arguments :        - cob_orientation_roll : desired roll angle in radian of robot&#39;s local coordinate        - cob_orientation_pitch : desired pitch angle in radian of robot&#39;s local coordinate    - description : the function for setting desired robot&#39;s orientation    - return value : void    `void setDesiredFootForceTorque(double r_force_x_N,      double r_force_y_N,       double r_force_z_N,                                     double r_torque_roll_Nm, double r_torque_pitch_Nm, double r_torque_yaw_Nm,                                     double l_force_x_N,      double l_force_y_N,       double l_force_z_N,                                     double l_torque_roll_Nm, double l_torque_pitch_Nm, double l_torque_yaw_Nm)`    - arguments :        - r_force_x_N : desired x directional force on right foot with respect to robot&#39;s local coordinate        - r_force_y_N : desired y directional force on right foot with respect to robot&#39;s local coordinate        - r_force_z_N : desired z directional force on right foot with respect to robot&#39;s local coordinate        - r_torque_roll_Nm : desired x directional torque on right foot with respect to robot&#39;s local coordinate        - r_torque_pitch_Nm : desired y directional torque on right foot with respect to robot&#39;s local coordinate        - r_torque_yaw_Nm : desired z directional torque on right foot with respect to robot&#39;s local coordinate        - l_force_x_N : desired x directional force on left foot with respect to robot&#39;s local coordinate        - l_force_y_N : desired y directional force on left foot with respect to robot&#39;s local coordinate        - l_force_z_N : desired z directional force on left foot with respect to robot&#39;s local coordinate        - l_torque_roll_Nm : desired x directional torque on left foot with respect to robot&#39;s local coordinate        - l_torque_pitch_Nm : desired x directional torque on left foot with respect to robot&#39;s local coordinate        - l_torque_yaw_Nm : desired x directional torque on left foot with respect to robot&#39;s local coordinate    - description : the function for setting desired force in newton and torque in newton-meter on feet    - return value : void    `void setCurrentGyroSensorOutput(double gyro_roll, double gyro_pitch)`    - arguments :        - gyro_roll : current x directional angular velocity with respect robot&#39;s local coordinate        - gyro_pitch : current y directional angular velocity with respect robot&#39;s local coordinate    - description : the function for setting current angular velocity from IMU sensor    - return value :    `void setCurrentOrientationSensorOutput(double cob_orientation_roll, double cob_orientation_pitch)`    - arguments :        - cob_orientation_roll : current roll angle in radian of robot&#39;s local coordinate        - cob_orientation_pitch : current pitch angle in radian of robot&#39;s local coordinate    - description : the function for setting current orientation from IMU sensor    - return value : void    `void setCurrentFootForceTorqueSensorOutput(double r_force_x_N,      double r_force_y_N,       double r_force_z_N,                                               double r_torque_roll_Nm, double r_torque_pitch_Nm, double r_torque_yaw_Nm,                                               double l_force_x_N,      double l_force_y_N,       double l_force_z_N,                                               double l_torque_roll_Nm, double l_torque_pitch_Nm, double l_torque_yaw_Nm)`    - arguments :        - r_force_x_N : current x directional force on right foot with respect to robot&#39;s local coordinate        - r_force_y_N : current y directional force on right foot with respect to robot&#39;s local coordinate        - r_force_z_N : current z directional force on right foot with respect to robot&#39;s local coordinate        - r_torque_roll_Nm : current x directional torque on right foot with respect to robot&#39;s local coordinate        - r_torque_pitch_Nm : current y directional torque on right foot with respect to robot&#39;s local coordinate        - r_torque_yaw_Nm : current z directional torque on right foot with respect to robot&#39;s local coordinate        - l_force_x_N : current x directional force on left foot with respect to robot&#39;s local coordinate        - l_force_y_N : current y directional force on left foot with respect to robot&#39;s local coordinate        - l_force_z_N : current z directional force on left foot with respect to robot&#39;s local coordinate        - l_torque_roll_Nm : current x directional torque on left foot with respect to robot&#39;s local coordinate        - l_torque_pitch_Nm : current x directional torque on left foot with respect to robot&#39;s local coordinate        - l_torque_yaw_Nm : current x directional torque on left foot with respect to robot&#39;s local coordinate    - description : the function for setting current force and torque from force-torque sensor on both feet    - return value : void    `void setMaximumAdjustment(double cob_x_max_adjustment_m,  double cob_y_max_adjustment_m,  double cob_z_max_adjustment_m,                              double cob_roll_max_adjustment_rad, double cob_pitch_max_adjustment_rad, double cob_yaw_max_adjustment_rad,                              double foot_x_max_adjustment_m, double foot_y_max_adjustment_m, double foot_z_max_adjustment_m,                              double foot_roll_max_adjustment_rad, double foot_pitch_max_adjustment_rad, double foot_yaw_max_adjustment_rad)`    - arguments :        - cob_x_max_adjustment_m : the maximum x directinal linear modification of center of body        - cob_y_max_adjustment_m : the maximum y directinal linear modification of center of body        - cob_z_max_adjustment_m : the maximum z directinal linear modification of center of body        - cob_roll_max_adjustment_rad : the maximum x directinal angular modification of center of body        - cob_pitch_max_adjustment_rad : the maximum y directinal angular modification of center of body        - cob_yaw_max_adjustment_rad : the maximum z directinal angular modification of center of body        - foot_x_max_adjustment_m : the maximum x directinal linear modification of foot        - foot_y_max_adjustment_m : the maximum y directinal linear modification of foot        - foot_z_max_adjustment_m : the maximum z directinal linear modification of foot        - foot_roll_max_adjustment_rad : the maximum x directinal angular modification of foot        - foot_pitch_max_adjustment_rad : the maximum y directinal angular modification of foot        - foot_yaw_max_adjustment_rad : the maximum z directinal angular modification of foot    - description : the function for setting maximum modification    - return value : void    `void setCOBManualAdjustment(double cob_x_adjustment_m, double cob_y_adjustment_m, double cob_z_adjustment_m)`    - arguments :        - cob_x_adjustment_m : the x offset of center of body        - cob_y_adjustment_m : the y offset of center of body        - cob_z_adjustment_m : the z offset of center of body    - description : the function for setting manual modification of center of body    - return value : void    `double getCOBManualAdjustmentX()`    - arguments : void    - description : the function for getting current set x directional manual modification of center of body    - return value : x directional manual modification of center of body    `double getCOBManualAdjustmentY()`    - arguments : void    - description : the function for getting current set y directional manual modification of center of body    - return value : y directional manual modification of center of body    `double getCOBManualAdjustmentZ()`    - arguments : void    - description : the function for getting current set z directional manual modification of center of body    - return value : z directional manual modification of center of body    `BalancePDController foot_roll_gyro_ctrl_`    - description : PD controller for foot using x directional gyro    `BalancePDController foot_pitch_gyro_ctrl_`    - description : PD controller for foot using y directional gyro    `BalancePDController foot_roll_angle_ctrl_`    - description : PD controller for foot using roll angle    `BalancePDController right_foot_force_x_ctrl_`    - description : PD controller for foot using x directional force on right foot    `BalancePDController right_foot_force_y_ctrl_`    - description : PD controller for foot using y directional force on right foot    `BalancePDController right_foot_force_z_ctrl_`    - description : PD controller for foot using z directional force on right foot    `BalancePDController right_foot_torque_roll_ctrl_`    - description : PD controller for foot using x directional torque on right foot    `BalancePDController right_foot_torque_pitch_ctrl_`    - description : PD controller for foot using y directional torque on right foot    `BalancePDController left_foot_force_x_ctrl_`    - description : PD controller for foot using x directional force on left foot    `BalancePDController left_foot_force_y_ctrl_`    - description : PD controller for foot using y directional force on left foot    `BalancePDController left_foot_force_z_ctrl_`    - description : PD controller for foot using z directional force on left foot    `BalancePDController left_foot_torque_roll_ctrl_`    - description : PD controller for foot using x directional torque on left foot    `BalancePDController left_foot_torque_pitch_ctrl_`    - description : PD controller for foot using y directional torque on left foot    `BalanceLowPassFilter roll_gyro_lpf_`    - description : Low Pass Filter for x directional angular velocity from IMU    `BalanceLowPassFilter pitch_gyro_lpf_`    - description : Low Pass Filter for y directional angular velocity from IMU    `BalanceLowPassFilter roll_angle_lpf_;`    - description : Low Pass Filter for roll angle from IMU    `BalanceLowPassFilter pitch_angle_lpf_;`    - description : Low Pass Filter for pitch angle from IMU    `BalanceLowPassFilter right_foot_force_x_lpf_;`    - description : Low Pass Filter for x directional force from force-torque sensor on right foot    `BalanceLowPassFilter right_foot_force_y_lpf_;`    - description : Low Pass Filter for y directional force from force-torque sensor on right foot    `BalanceLowPassFilter right_foot_force_z_lpf_;`    - description : Low Pass Filter for z directional force from force-torque sensor on right foot    `BalanceLowPassFilter right_foot_torque_roll_lpf_;`    - description : Low Pass Filter for x directional torque from force-torque sensor on right foot    `BalanceLowPassFilter right_foot_torque_pitch_lpf_;`    - description : Low Pass Filter for y directional torque from force-torque sensor on right foot    `BalanceLowPassFilter left_foot_force_x_lpf_;`    - description : Low Pass Filter for x directional force from force-torque sensor on left foot    `BalanceLowPassFilter left_foot_force_y_lpf_;`    - description : Low Pass Filter for y directional force from force-torque sensor on left foot    `BalanceLowPassFilter left_foot_force_z_lpf_;`    - description : Low Pass Filter for z directional force from force-torque sensor on left foot    `BalanceLowPassFilter left_foot_torque_roll_lpf_;`    - description : Low Pass Filter for x directional torque from force-torque sensor on left foot    `BalanceLowPassFilter left_foot_torque_pitch_lpf_;`    - description : Low Pass Filter for y directional torque from force-torque sensor on left foot### [imu-3dm-gx4](#imu-3dm-gx4)This module is for the IMU Sensor(MicroStrain 3DM-GX4-25).This module exists in a separated Node, and this module is launched along with the thormang3_manager when executing .launch file of the thormang3_manager.This is the modified version of KumarRobotics/imu_3dm_gx4.#### ROS API- Published Topics    `/robotis/sensor/imu/imu` (sensor_msgs/Imu)    Current output of the IMU Sensor## [PPC Packages](#ppc-packages)## [OPC Packages](#opc-packages)## [Common Packages](#common-packages)## [Tools Packages](#tools-packages)## [THORMANG msgs Package](#thormang-msgs-package)[MPC Installation]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/ROBOTIS-ROS-Package-installation#21-mpc[std_msgs/Int32]: http://docs.ros.org/api/std_msgs/html/msg/Int32.html[std_msgs/String]: http://docs.ros.org/api/std_msgs/html/msg/String.html[thormang3_action_module_msgs/StartAction]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/StartAction.msg[robotis_controller_msgs/StatusMsg]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/StatusMsg.msg[thormang3_action_module_msgs/IsRunning]: https://github.com/ROBOTIS-GIT/ROBOTIS-Documents/wiki/(thormang3_action_module_msgs)IsRunning.srv",
        "url": " http://localhost:4000/docs/en/platform/thormang3/thormang3_ros_packages/"
      } ,
  
      "docs-en-parts-sensor-tps-10":  {
        "title": "Temperature Sensor(TPS-10)",
      "content"	 : "# Temperature Sensor(TPS-10)![](/assets/images/parts/sensors/tps-10_product.jpg)# [Introduction](#introduction)- Sensor measures changes in temperature- Sensor activates when heat is applied to object`Compatibility Guide` [Controller Compatibility]# [Specifications](#specifications)- Weight : 18g- Length : 1M(including cable)- Sensing Temperature Range : -20&amp;deg;C ~ 120&amp;deg;C# [Pinout](#pinout)1. Not used2. GND3. ADC : Sensor output (heat-sensing)4. VCC ( 3.3V )5. Not used`Caution` Cables can may be damaged when not properly connected (i.e. wrong orientation), or use of excessive force during connection.{: .notice--warning}`Caution` Make connections to the controlled while unpowered. Making connections while the controller is powered may cause it to malfunction or/and damage.{: .notice--warning}# [Videos](#videos)[Controller Compatibility]: /docs/en/parts/controller/controller_compatibility/",
        "url": " http://localhost:4000/docs/en/parts/sensor/tps-10/"
      } ,
  
      "docs-en-parts-sensor-ts-10":  {
        "title": "Touch Sensor(TS-10)",
      "content"	 : "# Touch Sensor(TS-10)![](/assets/images/parts/sensors/touch.jpg)# [Introduction](#introduction)- This is a switch like the sensor used with OLLO to sense touch by other objects.- Can be used as a bumper on cars to detect impact.`Compatibility Guide` [Controller Compatibility]# [Specifications](#specifications)- Weight : 4g- Dimensions : 24mm x 18mm x 15mm# [Pinout](#pinout)![](/assets/images/parts/sensors/ts-10_pinout.png)1. Not used2. GND3. ADC : Outputs status of switch, i.e. Pressed or Not Pressed4. VCC5. Not used`Caution` Cables can may be damaged when not properly connected (i.e. wrong orientation), or use of excessive force during connection.{: .notice--warning}# [Tutorials](#tutorials)- RoboPlus Task : Please refer to [Touch Sensor] section in the Roboplus Task.# [Videos](#videos)[Controller Compatibility]: /docs/en/parts/controller/controller_compatibility/[Touch Sensor]: /docs/en/software/rplus1/task/programming_02/#touch-sensor",
        "url": " http://localhost:4000/docs/en/parts/sensor/ts-10/"
      } ,
  
      "docs-en-parts-interface-usb2dynamixel":  {
        "title": "USB2Dynamixel",
      "content"	 : "# USB2Dynamixel![](/assets/images/parts/interface/usb2dynamixel_product.jpg)# [Introduction](#introduction)# [How to Use](#how-to-use)USB2Dynamixel is a device used to operate Dynamixel directly from PC.  USB2Dynamixel is connected to USB port of PC, and 3P and 4P connectors are installed so that various Dynamixels can be conntected.Also, USB2Dynamixel can be used to change from USB port to Serial port on the PC without serial port such as notebook computer, etc.  The function is very useful in the cases when the Dynamixel exclusive controllers such as CM-2, CM-2+, CM-5, and CM-510 are connected to USB Port, or when ZIG2Serial is connected to USB port to control robots wirelessly.## Dynamixel Control Using PC![](/assets/images/parts/interface/usb2dynamixel_01.png)## Changing Serial Port![](/assets/images/parts/interface/usb2dynamixel_02.png)## Wireless Communication![](/assets/images/parts/interface/usb2dynamixel_03.png)`Note` Difference in voltage may cause unstable USB2DXL connections. Ensure that both connecting equipment and PC are properly grounded.{: .notice}# [Layout](#layout)![](/assets/images/parts/interface/usb2dynamixel_04.jpg)![](/assets/images/parts/interface/usb2dynamixel_05.jpg)|Name|Description||:---:|:---:||Status Display LED|Display power supply, TXD(data writing), and RXD(data reading) status.||Function Selection Switch|Select the communication method of TTL, RS-485, and RS-232.||3P Connector|Connect Dynamixels of AX Series through TTL communication.||4P Connector|Connect Dynamixels of DX, RX Series through RS-485 communication.||Serial Connector|Change from USB port to Serial port through RS-232 communication.|## [Pinout](#pinout)The following pictures show the usage of connector pins used by USB2Dynamixel. If you want to use each pin for your own purpose, please use them after you learn the usage of each pin.- PIN Figure of 4P / 3P Cable Connctors  ![](/assets/images/parts/interface/usb2dynamixel_07.jpg)- PIN Figure of Serial Connector  ![](/assets/images/parts/interface/usb2dynamixel_08.jpg)# [Select Communication Mode](#select-communication-mode)The communication mode can be selected by chaning the switch of USB2Dynamixel as below.![](/assets/images/parts/interface/usb2dynamixel_06.png)1. TTL Communication : Dynamixels using 3-pin port such as AX Series, AX-S1 etc.2. RS485 Communication : Dynamixels using 4-pin port such as DX Series, RX Series, EX Series etc.3. RS232 Communication : Controllers using serial cable such as CM-5, CM-510 etc.# [Tutorials](#tutorials)- USB2Dynamixel SDK : Please refer to the [USB2Dynamixel SDK].# [Supply Power](#supply-power)USB2Dynamixel does not supply power to Dynamixel. Therefore, the power must be supplied separately to operate Dynamixel as the following pictures. Please refer to the explanation page of each Dynamixel regarding proper voltages for each Dynamixel mode. {% capture usb2dynamixel_warning_01 %}`Warning`- For the stable power supply, we recommend using ROBOTIS controller or SMPS2Dynamixel.- Connect your DYNAMIXEL to power supply while it’s off and turn on/off with the power switch.{% endcapture %}{{ usb2dynamixel_warning_01 | markdownify }} ## Applying Power to the DynamixelReferring to PIN Figure, apply positive (+) voltage to the #2 PIN of the connector, and negative (-) voltage on #1 PIN of the connector.  Since the 2 connectors of Dynamixels are equal,  power can be applied at any of.)![](/assets/images/parts/interface/usb2dynamixel_09.jpg)## Applying power between USB2Dynamixel and DynamixelIf power cannot be applied as above, apply the power between USB2Dynamixel and Dynamixel as below.Separate the power cable on the #2 PIN of USB2Dynamixel connector, and then apply positive(+) voltage.  Connect additionally Y-cable to the power cable on the #1 PIN of  USB2Dynamixel connector, and then apply negative (-) voltage.![](/assets/images/parts/interface/usb2dynamixel_10.jpg)# [Check Driver](#check-driver)How to check whether the USB2Dynamixel driver is installed correctly.`Note` USB2Dynamixel and LN-101 uses an identical USB chipset.{: .notice}1. Connect USB2Dynamixel to the USB Port of PC.    ![img_02][img_02]2. Select Manage in the popped-up menu shown by right-clicking My Computer.    ![img_04][img_04]3. Check USB Serial Converter in Universal Serial Bus Controllers of Device Manager.    ![img_05][img_05]4. Check USB Serial Port(COMx) in the list of Ports(COM &amp; LPT). COM Port number may vary depending on each system.    ![img_06][img_06]# [Install Driver Manually](#install-driver-manually)If you installed RoboPlus, FTDI Driver (USB2Dynamixel, USB Downloader (LN-101) driver) is installed together automatically. If you didn&#39;t install the RoboPlus yet, or if the driver is not installed appropriately, please install it manually according to following procedures.{: .notice}1. Connect a device to PC. If the driver is not installed yet, Found New Hardware Wizard will be popped up. Install from a list or specific location (Advanced)(S) -&gt; Next(N)    ![img_07][img_07]2. Decide the location of Driver. If RoboPlus S/W has been installed automatically, the driver is in LN101 folder of RoboPlus Installation folder. Or if you want to install the newest version, download the newest version VCP driver from [FTDI Driver Download] page.    ![img_08][img_08]        ![img_09][img_09]3. Click the Next(N) button to start the installation. Installation of USB Serial Converter driver is completed.    ![img_10][img_10]4. Install the USB Serial Port driver in the same way.    ![img_11][img_11]# [Videos](#videos)Setting up the port[USB2Dynamixel SDK]: /docs/en/software/sdk/usb2dynamixel/[download_task_code]: /docs/en/software/rplus1/task/getting_started/#program-download[task_result_print]: /docs/en/software/rplus1/task/getting_started/#print-on-the-screen[virtual_robot_control]: /docs/en/software/rplus1/task/getting_started/#virtual-robot-control[CM-100]: /docs/en/parts/controller/cm-100/[CM-150]: /docs/en/parts/controller/cm-150/[CM-200]: /docs/en/parts/controller/cm-200/[CM-700]: /docs/en/parts/controller/cm-700/[OpenCM9.04]: /docs/en/parts/controller/opencm904/[FTDI Driver Download]: http://www.ftdichip.com/Drivers/VCP.htm[img_01]: /assets/images/parts/interface/ln101.jpg[img_02]: /assets/images/edu/task_download_01.jpg[img_03]: /assets/images/parts/interface/ln101_to_cm700.png[img_04]: /assets/images/parts/interface/ln101_01.png[img_05]: /assets/images/parts/interface/ln101_02.png[img_06]: /assets/images/parts/interface/ln101_03.png[img_07]: /assets/images/parts/interface/ln101_04.png[img_08]: /assets/images/parts/interface/ln101_05.png[img_09]: /assets/images/parts/interface/ln101_06.png[img_10]: /assets/images/parts/interface/ln101_07.png[img_11]: /assets/images/parts/interface/ln101_08.png",
        "url": " http://localhost:4000/docs/en/parts/interface/usb2dynamixel/"
      } ,
  
      "docs-en-dxl-x-xh430-v210":  {
        "title": "XH430-V210",
      "content"	 : "# XH430-V210![](/assets/images/dxl/x/x_series_product.png)# [Specifications](#specifications)| Item           | Specifications     || :------------- | :------------- || MCU       | ST CORTEX-M3 (STM32F103C8 @ 72Mhz, 32Bit)       || Position Sensor       | Contactless absolute encoder (12Bit, 360&amp;deg;)Maker : ams(www.ams.com), Part No : AS5045|| Motor       | Maxon       || Baud Rate       | 9600 bps ~ 4.5 Mbps       || Control Algorithm | PID control     || Degree of Precision | 0.088&amp;deg;  || Operating Modes | Current Control Mode  Velocity Control Mode  Position Control Mode (0&amp;deg; ~ 360&amp;deg;)  Extended Position Control Mode  Current-based Position Control Mode  PWM Control Mode (Voltage Control Mode) || Weight | 82g || Dimensions (W x H x D) | 28.5mm x 46.5mm x 34mm || Gear Ratio | 212.6 : 1  || Stall Torque | 2.6Nm @ 24V, 0.7A || No Load Speed | 52rpm @ 24V || Operating Temperature | -5&amp;deg;C ~ +80&amp;deg;C || Input Voltage | 24.0V (**Recommended : 24.0V**) || Standby Current | 36mA || Command Signal | Digital Packet || Protocol Type | RS485 Asynchronous Serial Communication(8bit, 1stop, No Parity) || Physical Connection | RS485 Multidrop BUS || ID | 0 ~ 252 || Feedback | Position, Velocity, Current, Realtime tick, Trajectory, Temperature, Input Voltage, etc || Part Material | Full Metal GearMetal(Front, Middle), Engineering Plastic(Back) |## [Performance Graph](#performance-graph)![](/assets/images/dxl/x/xh430_v210_performance_graph.jpg){% include en/dxl/note_performance_graph.md %}{% include en/dxl/control_table_protocol2.md %}## [Control Table of EEPROM Area](#control-table-of-eeprom-area)| Address     | Size(Byte)     | Data Name     | Description     | Access     | Initial Value     || :------------- | :------------- | :------------- | :------------- | :------------- | :------------- ||0|2|[Model Number](#model-number)                    |Model Number                             |R  |1050||2|4|[Model Information](#model-information)          |Model Information                        |R  |-||6|1|[Firmware Version](#firmware-version)            |Firmware Version                         |R  |-||7|1|[ID](#id)                                        |DYNAMIXEL ID                             |RW |1||8|1|[Baud Rate](#baud-rate)                          |Communication Speed                      |RW |1||9|1|[Return Delay Time](#return-delay-time)          |Response Delay Time                      |RW |250||10|1|[Drive Mode](#drive-mode)                       |Default Rotation Direction               |RW |0||11|1|[Operating Mode](#operating-mode)               |Operating Mode                           |RW |3||12|1|[Secondary(Shadow) ID](#secondary-shadow-id)    |Secondary(Shadow) ID                     |RW |255||13|1|[Protocol Version](#protocol-version)           |Protocol Version                         |RW |2||20|4|[Homing Offset](#homing-offset)                 |Home Position Offset                     |RW |0||24|4|[Moving Threshold](#moving-threshold)           |Velocity Threshold for Movement Detection|RW |10||31|1|[Temperature Limit](#temperature-limit)         |Maximum Internal Temperature Limit       |RW |80||32|2|[Max Voltage Limit](#max-voltage-limit)         |Maximum Input Voltage Limit              |RW |300||34|2|[Min Voltage Limit](#min-voltage-limit)         |Minimum Input Voltage Limit              |RW |110||36|2|[PWM Limit](#pwm-limit)                         |Maximum PWM Limit                        |RW |885||38|2|[Current Limit](#current-limit)                 |Maximum Current Limit                    |RW |689||40|4|[Acceleration Limit](#acceleration-limit)       |Maximum Accleration Limit                |RW |32767||44|4|[Velocity Limit](#velocity-limit)               |Maximum Velocity Limit                   |RW |380||48|4|[Max Position Limit](#max-position-limit)       |Maximum Position Limit                   |RW |4095||52|4|[Min Position Limit](#min-position-limit)       |Minimum Position Limit                   |RW |0||63|1|[Shutdown](#shutdown)                           |Shutdown Error Information               |RW |52|## [Control Table of RAM Area](#control-table-of-ram-area)| Address     | Size(Byte)     | Data Name     | Description     | Access     | Initial Value     || :------------- | :------------- | :------------- | :------------- | :------------- | :------------- ||64|1|[Torque Enable](#torque-enable)               |Motor Torque On/Off                        |RW |0||65|1|[LED](#led)                                   |Status LED On/Off                          |RW |0||68|1|[Status Return Level](#status-return-level)   |Select Types of Status Return              |RW |2||69|1|[Registered Instruction](#registered-instruction)|Check Reception of Instruction          |R  |0||70|1|[Hardware Error Status](#hardware-error-status)  |Hardware Error Status                   |R  |0||76|2|[Velocity I Gain](#velocity-i-gain)           |I Gain of Velocity                         |RW |1920||78|2|[Velocity P Gain](#velocity-p-gain)           |P Gain of Velocity                         |RW |100||80|2|[Position D Gain](#position-d-gain)           |D Gain of Position                         |RW |0||82|2|[Position I Gain](#position-i-gain)           |I Gain of Position                         |RW |0||84|2|[Position P Gain](#position-p-gain)           |P Gain of Position                         |RW |800||88|2|[Feedforward 2nd Gain](#feedforward-2nd-gain) |2nd Gain of Feed-Forward                   |RW |0||90|2|[Feedforward 1st Gain](#feedforward-1st-gain) |1st Gain of Feed-Forward                   |RW |0||98|1|[Bus Watchdog](#bus-watchdog)                 |DYNAMIXEL Bus Watchdog                     |RW |0||100|2|[Goal PWM](#goal-pwm)                        |Target PWM Value                           |RW |-||102|2|[Goal Current](#goal-current)                |Target Current Value                       |RW |-||104|4|[Goal Velocity](#goal-velocity)              |Target Velocity Value                      |RW |-||108|4|[Profile Acceleration](#profile-acceleration)|Acceleration Value of Profile              |RW |0||112|4|[Profile Velocity](#profile-velocity)        |Velocity Value of Profile                  |RW |0||116|4|[Goal Position](#goal-position)              |Target Position Value                      |RW |-||120|2|[Realtime Tick](#realtime-tick)              |Count Time in millisecond                  |R  |-||122|1|[Moving](#moving)                            |Movement Status                            |R  |0||123|1|[Moving Status](#moving-status)              |Detailed Information of Movement Status    |R  |0||124|2|[Present PWM](#present-pwm)                  |Current PWM Value                          |R  |-||126|2|[Present Current](#present-current)          |Current Current Value                      |R  |-||128|4|[Present Velocity](#present-velocity)        |Current Velocity Value                     |R  |-||132|4|[Present Position](#present-position)        |Current Position Value                     |R  |-||136|4|[Velocity Trajectory](#velocity-trajectory)  |Target Velocity Trajectory Generated by Profile|R|-||140|4|[Position Trajectory](#position-trajectory)  |Target Position Trajectory Generated by Profile|R|-||144|2|[Present Input Voltage](#present-input-voltage)|Current Input Voltage                    |R  |-||146|1|[Present Temperature](#present-temperature)    |Current Internal Temperature             |R  |-||168|2|[Indirect Address 1](#indirect-address)      |Indirect Address 1                         |RW |224||170|2|[Indirect Address 2](#indirect-address)      |Indirect Address 2                         |RW |225||172|2|[Indirect Address 3](#indirect-address)      |Indirect Address 3                         |RW |226||…|…|…                        |…|…|…||218|2|[Indirect Address 26](#indirect-address)     |Indirect Address 26                        |RW |249||220|2|[Indirect Address 27](#indirect-address)     |Indirect Address 27                        |RW |250||222|2|[Indirect Address 28](#indirect-address)     |Indirect Address 28                        |RW |251||224|1|[Indirect Data 1](#indirect-data)            |Indirect Data 1                            |RW |0||225|1|[Indirect Data 2](#indirect-data)            |Indirect Data 2                            |RW |0||226|1|[Indirect Data 3](#indirect-data)            |Indirect Data 3                            |RW |0||…|…|…                        |…|…|…||249|1|[Indirect Data 26](#indirect-data)           |Indirect Data 26                           |RW |0||250|1|[Indirect Data 27](#indirect-data)           |Indirect Data 27                           |RW |0||251|1|[Indirect Data 28](#indirect-data)           |Indirect Data 28                           |RW |0||578|2|[Indirect Address 29](#indirect-address)     |Indirect Address 29                        |RW |634||580|2|[Indirect Address 30](#indirect-address)     |Indirect Address 30                        |RW |635||582|2|[Indirect Address 31](#indirect-address)     |Indirect Address 31                        |RW |636||…|…|…|…|…|…||628|2|[Indirect Address 54](#indirect-address)     |Indirect Address 54                        |RW |659||630|2|[Indirect Address 55](#indirect-address)     |Indirect Address 55                        |RW |660||632|2|[Indirect Address 56](#indirect-address)     |Indirect Address 56                        |RW |661||634|1|[Indirect Data 29](#indirect-data)           |Indirect Data 29                           |RW |0||635|1|[Indirect Data 30](#indirect-data)           |Indirect Data 30                           |RW |0||636|1|[Indirect Data 31](#indirect-data)           |Indirect Data 31                           |RW |0||…|…|…|…|…|…||659|1|[Indirect Data 54](#indirect-data)           |Indirect Data 54                           |RW |0||660|1|[Indirect Data 55](#indirect-data)           |Indirect Data 55                           |RW |0||661|1|[Indirect Data 56](#indirect-data)           |Indirect Data 56                           |RW |0|`Caution` Protocol 1.0 does not support addresses greater than 256. Therefore, Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.{: .notice--warning}## [Control Table Description](#control-table-description)`Caution` Data in the EEPROM Area can only be written when the value of Torque Enable(64) is cleared to ‘0’.{: .notice--warning}### **Model Number(0)** This address stores model number of the DYNAMIXEL.### **Firmware Version(6)** This address stores firmware version of the DYNAMIXEL.### **ID(7)**{% include en/dxl/control_table_id.md %}### **Baud Rate(8)**{% include en/dxl/control_table_baudrate_2.md %}### **Return Delay Time(9)**{% include en/dxl/control_table_return_delay_time.md %}### **Drive Mode(10, Available from Firmware v38)**{% include en/dxl/control_table_drivemode.md %}### **Operating Mode(11)**{% include en/dxl/control_table_opmode_six_2.md %}### **Secondary(Shadow) ID(12)**{% include en/dxl/control_table_shadowid.md %}### **Protocol version(13)**{% include en/dxl/control_table_protocolversion.md %}### **Homing Offset(20)**{% include en/dxl/control_table_homingoffset.md %}### **Moving Threshold(24)**{% include en/dxl/control_table_movingthreshold.md %}### **Temperature Limit(31)**{% include en/dxl/control_table_temp_limit_2.md %}### **Min/Max Voltage Limit(34, 32)**{% include en/dxl/control_table_volt_limit_24v.md %}### **PWM Limit(36)**{% include en/dxl/control_table_pwm_limit.md %}### **Current Limit(38)**{% include en/dxl/control_table_current_limit.md %}| Unit | Value Range     || :---: | :------------: ||about  1.34[mA]|0 ~ 689|`Note` Current Limit(38) could be differ by each DYNAMIXEL so please check the Control Table.{: .notice}### **Acceleration Limit(40)**{% include en/dxl/control_table_acclimit.md %}### **Velocity Limit(44)**{% include en/dxl/control_table_vellimit.md %}### **Min/Max Position Limits(52, 48)**{% include en/dxl/control_table_positionlimit.md %}### **Shutdown(63)**{% include en/dxl/control_table_shutdown.md %}### **Torque Enable(64)**{% include en/dxl/control_table_torque_enable_2.md %}### **LED(65)**{% include en/dxl/control_table_led.md %}### **Status Return Level(68)**{% include en/dxl/control_table_status_return_lv.md %}### **Registered Instruction(69)**{% include en/dxl/control_table_reg_instruction.md %}### **Hardware Error Status(70)**This value indicates hardware error status.{% include en/dxl/control_table_shutdown.md %}### **Velocity PI Gain(78, 76)**{% include en/dxl/control_table_velocity_pi_gain.md %}### **Position PID Gain(84, 82, 80), Feedforward 1st/2nd Gains(90, 88)**{% include en/dxl/control_table_position_pid_gain.md %}{% include en/dxl/control_table_current_position_pid_gain.md %}### **Bus Watchdog(98, Available from Firmware v38)**{% include en/dxl/control_table_buswatchdog.md %}### **Goal PWM(100)**{% include en/dxl/control_table_goal_pwm.md %}### **Goal Current(102)**{% include en/dxl/control_table_goal_current.md %}| Unit | Value Range     || :---: | :------------: ||about  1.34[mA]|-Current Limit(38) ~ Current Limit(38)|`Note` Applying high current to the motor for long period of time might damage the motor.{: .notice}### **Goal Velocity(104)**{% include en/dxl/control_table_goal_velocity.md %}### **Profile Acceleration(108)**{% include en/dxl/control_table_profile_acceleration.md %}### **Profile Velocity(112)**{% include en/dxl/control_table_profile_velocity.md %}### **Goal Position(116)**{% include en/dxl/control_table_goal_position_2.md %}### **Realtime Tick(120)**{% include en/dxl/control_table_realtime_tick.md %}### **Moving(122)**{% include en/dxl/control_table_moving_2.md %}### **Moving Status(123)**{% include en/dxl/control_table_moving_status.md %}### **Present PWM(124)**This value indicates current PWM. For more details, please refer to the [Goal PWM(100)](#goal-pwm).### **Present Current(126)**This value indicates current Current. For more details, please refer to the Goal Current(102).### **Present Velocity(128)**This value indicates current Velocity. For more details, please refer to the Goal Velocity(104).### **Present Position(132)**{% include en/dxl/control_table_present_position.md %}### **Velocity Trajectory(136)**{% include en/dxl/control_table_velocity_trajectory.md %}### **Position Trajectory(140)**{% include en/dxl/control_table_position_trajectory.md %}### **Present Input Voltage(144)**{% include en/dxl/control_table_present_volt_2.md %}### **Present Temperature (144)**{% include en/dxl/control_table_present_temp_2.md %}### **Indirect Address, Indirect Data**{% include en/dxl/control_table_indirect_data.md %}# [How to Assemble](#how-to-assemble)## [Wiring through Back Case](#wiring-through-back-case)![](/assets/images/dxl/x/wiring_through_back_case.jpg)## [Option Frame Assembly](#option-frame-assembly)![](/assets/images/dxl/x/x430_option_frame.jpg)# [Maintenance](#maintenance){% include en/dxl/horn_bearing_replacement.md %}# [Reference](#reference)`Note` [Compatibility Guide]{: .notice}## [Quick Start](#quick-start){% include en/dxl/quick_start.md %}## [Drawings](#drawings)`Download` [X_430_std_ref.pdf][X_430_std_ref.pdf]: http://support.robotis.com/en/baggage_files/dynamixel/x-430_std_ref.pdf[Compatibility Guide]: http://en.robotis.com/BlueAD/board.php?bbs_id=faq&amp;mode=view&amp;bbs_no=47&amp;page=1&amp;key=&amp;keyword=&amp;sort=&amp;scate=",
        "url": " http://localhost:4000/docs/en/dxl/x/xh430-v210/"
      } ,
  
      "docs-kr-dxl-x-xh430-v210":  {
        "title": "XH430-V210",
      "content"	 : "DYNAMIXEL XH430-V210",
        "url": " http://localhost:4000/docs/kr/dxl/x/xh430-v210/"
      } ,
  
      "docs-en-dxl-x-xh430-v350":  {
        "title": "XH430-V350",
      "content"	 : "# XH430-V350![](/assets/images/dxl/x/x_series_product.png)# [Specifications](#specifications)| Item           | Specifications     || :------------- | :------------- || MCU       | ST CORTEX-M3 (STM32F103C8 @ 72Mhz, 32Bit)       || Position Sensor       | Contactless absolute encoder (12Bit, 360&amp;deg;)Maker : ams(www.ams.com), Part No : AS5045|| Motor       | Maxon       || Baud Rate       | 9600 bps ~ 4.5 Mbps       || Control Algorithm | PID control     || Degree of Precision | 0.088&amp;deg;  || Operating Modes | Current Control Mode  Velocity Control Mode  Position Control Mode (0&amp;deg; ~ 360&amp;deg;)  Extended Position Control Mode  Current-based Position Control Mode  PWM Control Mode (Voltage Control Mode) || Weight | 82g || Dimensions (W x H x D) | 28.5mm x 46.5mm x 34mm || Gear Ratio | 353.5 : 1  || Stall Torque | 3.3Nm @ 24V, 0.7A || No Load Speed | 31rpm @ 24V || Operating Temperature | -5&amp;deg;C ~ +80&amp;deg;C || Input Voltage | 24.0V (**Recommended : 24.0V**) || Standby Current | 36mA || Command Signal | Digital Packet || Protocol Type | RS485 Asynchronous Serial Communication(8bit, 1stop, No Parity) || Physical Connection | RS485 Multidrop BUS || ID | 0 ~ 252 || Feedback | Position, Velocity, Current, Realtime tick, Trajectory, Temperature, Input Voltage, etc || Part Material | Full Metal GearMetal(Front, Middle), Engineering Plastic(Back) |## [Performance Graph](#performance-graph)![](/assets/images/dxl/x/xh430_v350_performance_graph.jpg){% include en/dxl/note_performance_graph.md %}{% include en/dxl/control_table_protocol2.md %}## [Control Table of EEPROM Area](#control-table-of-eeprom-area)| Address     | Size(Byte)     | Data Name     | Description     | Access     | Initial Value     || :------------- | :------------- | :------------- | :------------- | :------------- | :------------- ||0|2|[Model Number](#model-number)                    |Model Number                             |R  |1040||2|4|[Model Information](#model-information)          |Model Information                        |R  |-||6|1|[Firmware Version](#firmware-version)            |Firmware Version                         |R  |-||7|1|[ID](#id)                                        |DYNAMIXEL ID                             |RW |1||8|1|[Baud Rate](#baud-rate)                          |Communication Speed                      |RW |1||9|1|[Return Delay Time](#return-delay-time)          |Response Delay Time                      |RW |250||10|1|[Drive Mode](#drive-mode)                       |Default Rotation Direction               |RW |0||11|1|[Operating Mode](#operating-mode)               |Operating Mode                           |RW |3||12|1|[Secondary(Shadow) ID](#secondary-shadow-id)    |Secondary(Shadow) ID                     |RW |255||13|1|[Protocol Version](#protocol-version)           |Protocol Version                         |RW |2||20|4|[Homing Offset](#homing-offset)                 |Home Position Offset                     |RW |0||24|4|[Moving Threshold](#moving-threshold)           |Velocity Threshold for Movement Detection|RW |10||31|1|[Temperature Limit](#temperature-limit)         |Maximum Internal Temperature Limit       |RW |80||32|2|[Max Voltage Limit](#max-voltage-limit)         |Maximum Input Voltage Limit              |RW |300||34|2|[Min Voltage Limit](#min-voltage-limit)         |Minimum Input Voltage Limit              |RW |110||36|2|[PWM Limit](#pwm-limit)                         |Maximum PWM Limit                        |RW |885||38|2|[Current Limit](#current-limit)                 |Maximum Current Limit                    |RW |689||40|4|[Acceleration Limit](#acceleration-limit)       |Maximum Accleration Limit                |RW |32767||44|4|[Velocity Limit](#velocity-limit)               |Maximum Velocity Limit                   |RW |285||48|4|[Max Position Limit](#max-position-limit)       |Maximum Position Limit                   |RW |4095||52|4|[Min Position Limit](#min-position-limit)       |Minimum Position Limit                   |RW |0||63|1|[Shutdown](#shutdown)                           |Shutdown Error Information               |RW |52|## [Control Table of RAM Area](#control-table-of-ram-area)| Address     | Size(Byte)     | Data Name     | Description     | Access     | Initial Value     || :------------- | :------------- | :------------- | :------------- | :------------- | :------------- ||64|1|[Torque Enable](#torque-enable)               |Motor Torque On/Off                        |RW |0||65|1|[LED](#led)                                   |Status LED On/Off                          |RW |0||68|1|[Status Return Level](#status-return-level)   |Select Types of Status Return              |RW |2||69|1|[Registered Instruction](#registered-instruction)|Check Reception of Instruction          |R  |0||70|1|[Hardware Error Status](#hardware-error-status)  |Hardware Error Status                   |R  |0||76|2|[Velocity I Gain](#velocity-i-gain)           |I Gain of Velocity                         |RW |1920||78|2|[Velocity P Gain](#velocity-p-gain)           |P Gain of Velocity                         |RW |100||80|2|[Position D Gain](#position-d-gain)           |D Gain of Position                         |RW |0||82|2|[Position I Gain](#position-i-gain)           |I Gain of Position                         |RW |0||84|2|[Position P Gain](#position-p-gain)           |P Gain of Position                         |RW |800||88|2|[Feedforward 2nd Gain](#feedforward-2nd-gain) |2nd Gain of Feed-Forward                   |RW |0||90|2|[Feedforward 1st Gain](#feedforward-1st-gain) |1st Gain of Feed-Forward                   |RW |0||98|1|[Bus Watchdog](#bus-watchdog)                 |DYNAMIXEL Bus Watchdog                     |RW |0||100|2|[Goal PWM](#goal-pwm)                        |Target PWM Value                           |RW |-||102|2|[Goal Current](#goal-current)                |Target Current Value                       |RW |-||104|4|[Goal Velocity](#goal-velocity)              |Target Velocity Value                      |RW |-||108|4|[Profile Acceleration](#profile-acceleration)|Acceleration Value of Profile              |RW |0||112|4|[Profile Velocity](#profile-velocity)        |Velocity Value of Profile                  |RW |0||116|4|[Goal Position](#goal-position)              |Target Position Value                      |RW |-||120|2|[Realtime Tick](#realtime-tick)              |Count Time in millisecond                  |R  |-||122|1|[Moving](#moving)                            |Movement Status                            |R  |0||123|1|[Moving Status](#moving-status)              |Detailed Information of Movement Status    |R  |0||124|2|[Present PWM](#present-pwm)                  |Current PWM Value                          |R  |-||126|2|[Present Current](#present-current)          |Current Current Value                      |R  |-||128|4|[Present Velocity](#present-velocity)        |Current Velocity Value                     |R  |-||132|4|[Present Position](#present-position)        |Current Position Value                     |R  |-||136|4|[Velocity Trajectory](#velocity-trajectory)  |Target Velocity Trajectory Generated by Profile|R|-||140|4|[Position Trajectory](#position-trajectory)  |Target Position Trajectory Generated by Profile|R|-||144|2|[Present Input Voltage](#present-input-voltage)|Current Input Voltage                    |R  |-||146|1|[Present Temperature](#present-temperature)    |Current Internal Temperature             |R  |-||168|2|[Indirect Address 1](#indirect-address)      |Indirect Address 1                         |RW |224||170|2|[Indirect Address 2](#indirect-address)      |Indirect Address 2                         |RW |225||172|2|[Indirect Address 3](#indirect-address)      |Indirect Address 3                         |RW |226||…|…|…                        |…|…|…||218|2|[Indirect Address 26](#indirect-address)     |Indirect Address 26                        |RW |249||220|2|[Indirect Address 27](#indirect-address)     |Indirect Address 27                        |RW |250||222|2|[Indirect Address 28](#indirect-address)     |Indirect Address 28                        |RW |251||224|1|[Indirect Data 1](#indirect-data)            |Indirect Data 1                            |RW |0||225|1|[Indirect Data 2](#indirect-data)            |Indirect Data 2                            |RW |0||226|1|[Indirect Data 3](#indirect-data)            |Indirect Data 3                            |RW |0||…|…|…                        |…|…|…||249|1|[Indirect Data 26](#indirect-data)           |Indirect Data 26                           |RW |0||250|1|[Indirect Data 27](#indirect-data)           |Indirect Data 27                           |RW |0||251|1|[Indirect Data 28](#indirect-data)           |Indirect Data 28                           |RW |0||578|2|[Indirect Address 29](#indirect-address)     |Indirect Address 29                        |RW |634||580|2|[Indirect Address 30](#indirect-address)     |Indirect Address 30                        |RW |635||582|2|[Indirect Address 31](#indirect-address)     |Indirect Address 31                        |RW |636||…|…|…|…|…|…||628|2|[Indirect Address 54](#indirect-address)     |Indirect Address 54                        |RW |659||630|2|[Indirect Address 55](#indirect-address)     |Indirect Address 55                        |RW |660||632|2|[Indirect Address 56](#indirect-address)     |Indirect Address 56                        |RW |661||634|1|[Indirect Data 29](#indirect-data)           |Indirect Data 29                           |RW |0||635|1|[Indirect Data 30](#indirect-data)           |Indirect Data 30                           |RW |0||636|1|[Indirect Data 31](#indirect-data)           |Indirect Data 31                           |RW |0||…|…|…|…|…|…||659|1|[Indirect Data 54](#indirect-data)           |Indirect Data 54                           |RW |0||660|1|[Indirect Data 55](#indirect-data)           |Indirect Data 55                           |RW |0||661|1|[Indirect Data 56](#indirect-data)           |Indirect Data 56                           |RW |0|`Caution` Protocol 1.0 does not support addresses greater than 256. Therefore, Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.{: .notice--warning}## [Control Table Description](#control-table-description)`Caution` Data in the EEPROM Area can only be written when the value of Torque Enable(64) is cleared to ‘0’.{: .notice--warning}### **Model Number(0)** This address stores model number of the DYNAMIXEL.### **Firmware Version(6)** This address stores firmware version of the DYNAMIXEL.### **ID(7)**{% include en/dxl/control_table_id.md %}### **Baud Rate(8)**{% include en/dxl/control_table_baudrate_2.md %}### **Return Delay Time(9)**{% include en/dxl/control_table_return_delay_time.md %}### **Drive Mode(10, Available from Firmware v38)**{% include en/dxl/control_table_drivemode.md %}### **Operating Mode(11)**{% include en/dxl/control_table_opmode_six_2.md %}### **Secondary(Shadow) ID(12)**{% include en/dxl/control_table_shadowid.md %}### **Protocol version(13)**{% include en/dxl/control_table_protocolversion.md %}### **Homing Offset(20)**{% include en/dxl/control_table_homingoffset.md %}### **Moving Threshold(24)**{% include en/dxl/control_table_movingthreshold.md %}### **Temperature Limit(31)**{% include en/dxl/control_table_temp_limit_2.md %}### **Min/Max Voltage Limit(34, 32)**{% include en/dxl/control_table_volt_limit_24v.md %}### **PWM Limit(36)**{% include en/dxl/control_table_pwm_limit.md %}### **Current Limit(38)**{% include en/dxl/control_table_current_limit.md %}| Unit | Value Range     || :---: | :------------: ||about  1.34[mA]|0 ~ 689|`Note` Current Limit(38) could be differ by each DYNAMIXEL so please check the Control Table.{: .notice}### **Acceleration Limit(40)**{% include en/dxl/control_table_acclimit.md %}### **Velocity Limit(44)**{% include en/dxl/control_table_vellimit.md %}### **Min/Max Position Limits(52, 48)**{% include en/dxl/control_table_positionlimit.md %}### **Shutdown(63)**{% include en/dxl/control_table_shutdown.md %}### **Torque Enable(64)**{% include en/dxl/control_table_torque_enable_2.md %}### **LED(65)**{% include en/dxl/control_table_led.md %}### **Status Return Level(68)**{% include en/dxl/control_table_status_return_lv.md %}### **Registered Instruction(69)**{% include en/dxl/control_table_reg_instruction.md %}### **Hardware Error Status(70)**This value indicates hardware error status.{% include en/dxl/control_table_shutdown.md %}### **Velocity PI Gain(78, 76)**{% include en/dxl/control_table_velocity_pi_gain.md %}### **Position PID Gain(84, 82, 80), Feedforward 1st/2nd Gains(90, 88)**{% include en/dxl/control_table_position_pid_gain.md %}{% include en/dxl/control_table_current_position_pid_gain.md %}### **Bus Watchdog(98, Available from Firmware v38)**{% include en/dxl/control_table_buswatchdog.md %}### **Goal PWM(100)**{% include en/dxl/control_table_goal_pwm.md %}### **Goal Current(102)**{% include en/dxl/control_table_goal_current.md %}| Unit | Value Range     || :---: | :------------: ||about  1.34[mA]|-Current Limit(38) ~ Current Limit(38)|`Note` Applying high current to the motor for long period of time might damage the motor.{: .notice}### **Goal Velocity(104)**{% include en/dxl/control_table_goal_velocity.md %}### **Profile Acceleration(108)**{% include en/dxl/control_table_profile_acceleration.md %}### **Profile Velocity(112)**{% include en/dxl/control_table_profile_velocity.md %}### **Goal Position(116)**{% include en/dxl/control_table_goal_position_2.md %}### **Realtime Tick(120)**{% include en/dxl/control_table_realtime_tick.md %}### **Moving(122)**{% include en/dxl/control_table_moving_2.md %}### **Moving Status(123)**{% include en/dxl/control_table_moving_status.md %}### **Present PWM(124)**This value indicates current PWM. For more details, please refer to the [Goal PWM(100)](#goal-pwm).### **Present Current(126)**This value indicates current Current. For more details, please refer to the Goal Current(102).### **Present Velocity(128)**This value indicates current Velocity. For more details, please refer to the Goal Velocity(104).### **Present Position(132)**{% include en/dxl/control_table_present_position.md %}### **Velocity Trajectory(136)**{% include en/dxl/control_table_velocity_trajectory.md %}### **Position Trajectory(140)**{% include en/dxl/control_table_position_trajectory.md %}### **Present Input Voltage(144)**{% include en/dxl/control_table_present_volt_2.md %}### **Present Temperature (144)**{% include en/dxl/control_table_present_temp_2.md %}### **Indirect Address, Indirect Data**{% include en/dxl/control_table_indirect_data.md %}# [How to Assemble](#how-to-assemble)## [Wiring through Back Case](#wiring-through-back-case)![](/assets/images/dxl/x/wiring_through_back_case.jpg)## [Option Frame Assembly](#option-frame-assembly)![](/assets/images/dxl/x/x430_option_frame.jpg)# [Maintenance](#maintenance){% include en/dxl/horn_bearing_replacement.md %}# [Reference](#reference)`Note` [Compatibility Guide]{: .notice}## [Quick Start](#quick-start){% include en/dxl/quick_start.md %}## [Drawings](#drawings)`Download` [X_430_std_ref.pdf][X_430_std_ref.pdf]: http://support.robotis.com/en/baggage_files/dynamixel/x-430_std_ref.pdf[Compatibility Guide]: http://en.robotis.com/BlueAD/board.php?bbs_id=faq&amp;mode=view&amp;bbs_no=47&amp;page=1&amp;key=&amp;keyword=&amp;sort=&amp;scate=",
        "url": " http://localhost:4000/docs/en/dxl/x/xh430-v350/"
      } ,
  
      "docs-kr-dxl-x-xh430-v350":  {
        "title": "XH430-V350",
      "content"	 : "DYNAMIXEL XH430-V350",
        "url": " http://localhost:4000/docs/kr/dxl/x/xh430-v350/"
      } ,
  
      "docs-en-dxl-x-xh430-w210":  {
        "title": "XH430-W210",
      "content"	 : "# XH430-W210![](/assets/images/dxl/x/x_series_product.png)# [Specifications](#specifications)| Item           | Specifications     || :------------- | :------------- || MCU       | ST CORTEX-M3 (STM32F103C8 @ 72Mhz, 32Bit)       || Position Sensor       | Contactless absolute encoder (12Bit, 360&amp;deg;)Maker : ams(www.ams.com), Part No : AS5045|| Motor       | Maxon       || Baud Rate       | 9600 bps ~ 4.5 Mbps       || Control Algorithm | PID control     || Degree of Precision | 0.088&amp;deg;  || Operating Modes | Current Control Mode  Velocity Control Mode  Position Control Mode (0&amp;deg; ~ 360&amp;deg;)  Extended Position Control Mode  Current-based Position Control Mode  PWM Control Mode (Voltage Control Mode) || Weight | 82g || Dimensions (W x H x D) | 28.5mm x 46.5mm x 34mm || Gear Ratio | 212.6 : 1  || Stall Torque | 2.2N.m @ 11.1V, 1.2A2.5Nm @ 12.0V, 1.3A3.1Nm @ 14.8V, 1.5A || No Load Speed | 46rpm @ 11.1V50rpm @ 12.0V62rpm @ 14.8V || Operating Temperature | -5&amp;deg;C ~ +80&amp;deg;C || Input Voltage | 10.0 ~ 14.8V (**Recommended : 12.0V**) || Standby Current | 40mA || Command Signal | Digital Packet || Protocol Type | XH430-W210-T: Half Duplex Asynchronous Serial CommunicationXH430-W210-R: RS485 Asynchronous Serial Communication(8bit, 1stop, No Parity) || Physical Connection | XH430-W210-T: TTL Level Multidrop BUS XH430-W210-R: RS485 Multidrop BUS || ID | 0 ~ 252 || Feedback | Position, Velocity, Current, Realtime tick, Trajectory, Temperature, Input Voltage, etc || Part Material | Full Metal GearMetal(Front, Middle), Engineering Plastic(Back) |## [Performance Graph](#performance-graph)![](/assets/images/dxl/x/xh430_w210_performance_graph.jpg){% include en/dxl/note_performance_graph.md %}{% include en/dxl/control_table_protocol2.md %}## [Control Table of EEPROM Area](#control-table-of-eeprom-area)| Address     | Size(Byte)     | Data Name     | Description     | Access     | Initial Value     || :------------- | :------------- | :------------- | :------------- | :------------- | :------------- ||0|2|[Model Number](#model-number)                    |Model Number                             |R  |1010||2|4|[Model Information](#model-information)          |Model Information                        |R  |-||6|1|[Firmware Version](#firmware-version)            |Firmware Version                         |R  |-||7|1|[ID](#id)                                        |DYNAMIXEL ID                             |RW |1||8|1|[Baud Rate](#baud-rate)                          |Communication Speed                      |RW |1||9|1|[Return Delay Time](#return-delay-time)          |Response Delay Time                      |RW |250||10|1|[Drive Mode](#drive-mode)                       |Default Rotation Direction               |RW |0||11|1|[Operating Mode](#operating-mode)               |Operating Mode                           |RW |3||12|1|[Secondary(Shadow) ID](#secondary-shadow-id)    |Secondary(Shadow) ID                     |RW |255||13|1|[Protocol Version](#protocol-version)           |Protocol Version                         |RW |2||20|4|[Homing Offset](#homing-offset)                 |Home Position Offset                     |RW |0||24|4|[Moving Threshold](#moving-threshold)           |Velocity Threshold for Movement Detection|RW |10||31|1|[Temperature Limit](#temperature-limit)         |Maximum Internal Temperature Limit       |RW |80||32|2|[Max Voltage Limit](#max-voltage-limit)         |Maximum Input Voltage Limit              |RW |160||34|2|[Min Voltage Limit](#min-voltage-limit)         |Minimum Input Voltage Limit              |RW |95||36|2|[PWM Limit](#pwm-limit)                         |Maximum PWM Limit                        |RW |885||38|2|[Current Limit](#current-limit)                 |Maximum Current Limit                    |RW |648||40|4|[Acceleration Limit](#acceleration-limit)       |Maximum Accleration Limit                |RW |32767||44|4|[Velocity Limit](#velocity-limit)               |Maximum Velocity Limit                   |RW |360||48|4|[Max Position Limit](#max-position-limit)       |Maximum Position Limit                   |RW |4095||52|4|[Min Position Limit](#min-position-limit)       |Minimum Position Limit                   |RW |0||63|1|[Shutdown](#shutdown)                           |Shutdown Error Information               |RW |52|## [Control Table of RAM Area](#control-table-of-ram-area)| Address     | Size(Byte)     | Data Name     | Description     | Access     | Initial Value     || :------------- | :------------- | :------------- | :------------- | :------------- | :------------- ||64|1|[Torque Enable](#torque-enable)               |Motor Torque On/Off                        |RW |0||65|1|[LED](#led)                                   |Status LED On/Off                          |RW |0||68|1|[Status Return Level](#status-return-level)   |Select Types of Status Return              |RW |2||69|1|[Registered Instruction](#registered-instruction)|Check Reception of Instruction          |R  |0||70|1|[Hardware Error Status](#hardware-error-status)  |Hardware Error Status                   |R  |0||76|2|[Velocity I Gain](#velocity-i-gain)           |I Gain of Velocity                         |RW |1920||78|2|[Velocity P Gain](#velocity-p-gain)           |P Gain of Velocity                         |RW |100||80|2|[Position D Gain](#position-d-gain)           |D Gain of Position                         |RW |0||82|2|[Position I Gain](#position-i-gain)           |I Gain of Position                         |RW |0||84|2|[Position P Gain](#position-p-gain)           |P Gain of Position                         |RW |900||88|2|[Feedforward 2nd Gain](#feedforward-2nd-gain) |2nd Gain of Feed-Forward                   |RW |0||90|2|[Feedforward 1st Gain](#feedforward-1st-gain) |1st Gain of Feed-Forward                   |RW |0||98|1|[Bus Watchdog](#bus-watchdog)                 |DYNAMIXEL Bus Watchdog                     |RW |0||100|2|[Goal PWM](#goal-pwm)                        |Target PWM Value                           |RW |-||102|2|[Goal Current](#goal-current)                |Target Current Value                       |RW |-||104|4|[Goal Velocity](#goal-velocity)              |Target Velocity Value                      |RW |-||108|4|[Profile Acceleration](#profile-acceleration)|Acceleration Value of Profile              |RW |0||112|4|[Profile Velocity](#profile-velocity)        |Velocity Value of Profile                  |RW |0||116|4|[Goal Position](#goal-position)              |Target Position Value                      |RW |-||120|2|[Realtime Tick](#realtime-tick)              |Count Time in millisecond                  |R  |-||122|1|[Moving](#moving)                            |Movement Status                            |R  |0||123|1|[Moving Status](#moving-status)              |Detailed Information of Movement Status    |R  |0||124|2|[Present PWM](#present-pwm)                  |Current PWM Value                          |R  |-||126|2|[Present Current](#present-current)          |Current Current Value                      |R  |-||128|4|[Present Velocity](#present-velocity)        |Current Velocity Value                     |R  |-||132|4|[Present Position](#present-position)        |Current Position Value                     |R  |-||136|4|[Velocity Trajectory](#velocity-trajectory)  |Target Velocity Trajectory Generated by Profile|R|-||140|4|[Position Trajectory](#position-trajectory)  |Target Position Trajectory Generated by Profile|R|-||144|2|[Present Input Voltage](#present-input-voltage)|Current Input Voltage                    |R  |-||146|1|[Present Temperature](#present-temperature)    |Current Internal Temperature             |R  |-||168|2|[Indirect Address 1](#indirect-address)      |Indirect Address 1                         |RW |224||170|2|[Indirect Address 2](#indirect-address)      |Indirect Address 2                         |RW |225||172|2|[Indirect Address 3](#indirect-address)      |Indirect Address 3                         |RW |226||…|…|…                        |…|…|…||218|2|[Indirect Address 26](#indirect-address)     |Indirect Address 26                        |RW |249||220|2|[Indirect Address 27](#indirect-address)     |Indirect Address 27                        |RW |250||222|2|[Indirect Address 28](#indirect-address)     |Indirect Address 28                        |RW |251||224|1|[Indirect Data 1](#indirect-data)            |Indirect Data 1                            |RW |0||225|1|[Indirect Data 2](#indirect-data)            |Indirect Data 2                            |RW |0||226|1|[Indirect Data 3](#indirect-data)            |Indirect Data 3                            |RW |0||…|…|…                        |…|…|…||249|1|[Indirect Data 26](#indirect-data)           |Indirect Data 26                           |RW |0||250|1|[Indirect Data 27](#indirect-data)           |Indirect Data 27                           |RW |0||251|1|[Indirect Data 28](#indirect-data)           |Indirect Data 28                           |RW |0||578|2|[Indirect Address 29](#indirect-address)     |Indirect Address 29                        |RW |634||580|2|[Indirect Address 30](#indirect-address)     |Indirect Address 30                        |RW |635||582|2|[Indirect Address 31](#indirect-address)     |Indirect Address 31                        |RW |636||…|…|…|…|…|…||628|2|[Indirect Address 54](#indirect-address)     |Indirect Address 54                        |RW |659||630|2|[Indirect Address 55](#indirect-address)     |Indirect Address 55                        |RW |660||632|2|[Indirect Address 56](#indirect-address)     |Indirect Address 56                        |RW |661||634|1|[Indirect Data 29](#indirect-data)           |Indirect Data 29                           |RW |0||635|1|[Indirect Data 30](#indirect-data)           |Indirect Data 30                           |RW |0||636|1|[Indirect Data 31](#indirect-data)           |Indirect Data 31                           |RW |0||…|…|…|…|…|…||659|1|[Indirect Data 54](#indirect-data)           |Indirect Data 54                           |RW |0||660|1|[Indirect Data 55](#indirect-data)           |Indirect Data 55                           |RW |0||661|1|[Indirect Data 56](#indirect-data)           |Indirect Data 56                           |RW |0|`Caution` Protocol 1.0 does not support addresses greater than 256. Therefore, Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.{: .notice--warning}## [Control Table Description](#control-table-description)`Caution` Data in the EEPROM Area can only be written when the value of Torque Enable(64) is cleared to ‘0’.{: .notice--warning}### **Model Number(0)** This address stores model number of the DYNAMIXEL.### **Firmware Version(6)** This address stores firmware version of the DYNAMIXEL.### **ID(7)**{% include en/dxl/control_table_id.md %}### **Baud Rate(8)**{% include en/dxl/control_table_baudrate_2.md %}### **Return Delay Time(9)**{% include en/dxl/control_table_return_delay_time.md %}### **Drive Mode(10, Available from Firmware v38)**{% include en/dxl/control_table_drivemode.md %}### **Operating Mode(11)**{% include en/dxl/control_table_opmode_six_2.md %}### **Secondary(Shadow) ID(12)**{% include en/dxl/control_table_shadowid.md %}### **Protocol version(13)**{% include en/dxl/control_table_protocolversion.md %}### **Homing Offset(20)**{% include en/dxl/control_table_homingoffset.md %}### **Moving Threshold(24)**{% include en/dxl/control_table_movingthreshold.md %}### **Temperature Limit(31)**{% include en/dxl/control_table_temp_limit_2.md %}### **Min/Max Voltage Limit(34, 32)**{% include en/dxl/control_table_volt_limit_2.md %}### **PWM Limit(36)**{% include en/dxl/control_table_pwm_limit.md %}### **Current Limit(38)**{% include en/dxl/control_table_current_limit.md %}| Unit | Value Range     || :---: | :------------: ||about  2.69[mA]|0 ~ 648|`Note` Current Limit(38) could be differ by each DYNAMIXEL so please check the Control Table.{: .notice}### **Acceleration Limit(40)**{% include en/dxl/control_table_acclimit.md %}### **Velocity Limit(44)**{% include en/dxl/control_table_vellimit.md %}### **Min/Max Position Limits(52, 48)**{% include en/dxl/control_table_positionlimit.md %}### **Shutdown(63)**{% include en/dxl/control_table_shutdown.md %}### **Torque Enable(64)**{% include en/dxl/control_table_torque_enable_2.md %}### **LED(65)**{% include en/dxl/control_table_led.md %}### **Status Return Level(68)**{% include en/dxl/control_table_status_return_lv.md %}### **Registered Instruction(69)**{% include en/dxl/control_table_reg_instruction.md %}### **Hardware Error Status(70)**This value indicates hardware error status.{% include en/dxl/control_table_shutdown.md %}### **Velocity PI Gain(78, 76)**{% include en/dxl/control_table_velocity_pi_gain.md %}### **Position PID Gain(84, 82, 80), Feedforward 1st/2nd Gains(90, 88)**{% include en/dxl/control_table_position_pid_gain.md %}{% include en/dxl/control_table_current_position_pid_gain.md %}### **Bus Watchdog(98, Available from Firmware v38)**{% include en/dxl/control_table_buswatchdog.md %}### **Goal PWM(100)**{% include en/dxl/control_table_goal_pwm.md %}### **Goal Current(102)**{% include en/dxl/control_table_goal_current.md %}| Unit | Value Range     || :---: | :------------: ||about  2.69[mA]|-Current Limit(38) ~ Current Limit(38)|`Note` Applying high current to the motor for long period of time might damage the motor.{: .notice}### **Goal Velocity(104)**{% include en/dxl/control_table_goal_velocity.md %}### **Profile Acceleration(108)**{% include en/dxl/control_table_profile_acceleration.md %}### **Profile Velocity(112)**{% include en/dxl/control_table_profile_velocity.md %}### **Goal Position(116)**{% include en/dxl/control_table_goal_position_2.md %}### **Realtime Tick(120)**{% include en/dxl/control_table_realtime_tick.md %}### **Moving(122)**{% include en/dxl/control_table_moving_2.md %}### **Moving Status(123)**{% include en/dxl/control_table_moving_status.md %}### **Present PWM(124)**This value indicates current PWM. For more details, please refer to the [Goal PWM(100)](#goal-pwm).### **Present Current(126)**This value indicates current Current. For more details, please refer to the Goal Current(102).### **Present Velocity(128)**This value indicates current Velocity. For more details, please refer to the Goal Velocity(104).### **Present Position(132)**{% include en/dxl/control_table_present_position.md %}### **Velocity Trajectory(136)**{% include en/dxl/control_table_velocity_trajectory.md %}### **Position Trajectory(140)**{% include en/dxl/control_table_position_trajectory.md %}### **Present Input Voltage(144)**{% include en/dxl/control_table_present_volt_2.md %}### **Present Temperature (144)**{% include en/dxl/control_table_present_temp_2.md %}### **Indirect Address, Indirect Data**{% include en/dxl/control_table_indirect_data.md %}# [How to Assemble](#how-to-assemble)## [Wiring through Back Case](#wiring-through-back-case)![](/assets/images/dxl/x/wiring_through_back_case.jpg)## [Option Frame Assembly](#option-frame-assembly)![](/assets/images/dxl/x/x430_option_frame.jpg)# [Maintenance](#maintenance){% include en/dxl/horn_bearing_replacement.md %}# [Reference](#reference)`Note` [Compatibility Guide]{: .notice}## [Quick Start](#quick-start){% include en/dxl/quick_start.md %}## [Drawings](#drawings)`Download` [X_430_std_ref.pdf][X_430_std_ref.pdf]: http://support.robotis.com/en/baggage_files/dynamixel/x-430_std_ref.pdf[Compatibility Guide]: http://en.robotis.com/BlueAD/board.php?bbs_id=faq&amp;mode=view&amp;bbs_no=47&amp;page=1&amp;key=&amp;keyword=&amp;sort=&amp;scate=",
        "url": " http://localhost:4000/docs/en/dxl/x/xh430-w210/"
      } ,
  
      "docs-kr-dxl-x-xh430-w210":  {
        "title": "XH430-W210",
      "content"	 : "![](/assets/images/dxl/x/x_series_product.png)# [스펙](#스펙)| 항목           | 스펙     || :------------- | :------------- || MCU       | ST CORTEX-M3 (STM32F103C8 @ 72Mhz, 32Bit)       || 위치값 센서       | 무접점 절대값 엔코더 (12Bit, 360&amp;deg;)Maker : ams(www.ams.com), Part No : AS5045|| 모터       | Maxon       || Baud Rate       | 9600 bps ~ 4.5 Mbps       || 제어 알고리즘 | PID 제어     || 위치 정확도 | 0.088&amp;deg;  || 제어 모드 | 전류제어  속도제어  위치제어 (0&amp;deg; ~ 360&amp;deg;)  확장 위치제어  전류기반 위치제어  PWM 제어 (전압 제어) || 무게 | 82g || 크기 (W x H x D) | 28.5mm x 46.5mm x 34mm || 기어비 | 212.6 : 1  || 정지토크 | 2.2 N.m (at 11.1V, 1.2A)2.5 N.m (at 12.0V, 1.3A)3.1 N.m (at 14.8V, 1.5A) || Stall Current | 2.3A || No Load Speed | 46rpm (at 11.1V)50rpm (at 12.0V)62rpm (at 14.8V) || 동작 온도 | -5&amp;deg;C ~ +80&amp;deg;F || 사용 전압 | 10.0 ~ 14.8V (**권장 전압 : 12.0V**) || 제어 명령 | Digital Packet || 통신 타입 | XH430-W210-T (Half Duplex Asynchronous Serial Communication with 8bit, 1stop, No Parity)XH430-W210-R (RS485 Asynchronous Serial Communication with 8bit, 1stop, No Parity) || 통신 연결 | XH430-W210-T (TTL Level Multi Drop Bus)  XH430-W210-R (RS485 Multi Drop Bus) || ID | 0 ~ 252 (253 IDs are available in a single channel) || 피드백 | Position, Velocity, Current, Realtime tick, Trajectory, Temperature, Input Voltage, etc || 재료 | Full Metal Gear, Metal Body(front and middle), Engineering Plastic Body(back) || 대기전류 | 40mA |## [성능 그래프](#성능-그래프)![](/assets/images/dxl/x/xh430_w210_performance_graph.jpg)`Note` Stall torque와 Performance Graph의 Max torque의 차이는 측정 방식에 기인합니다. Stall torque는 순간적인 최대토크를 측정하는 방식으로, 고전적인 RC Servo 제품에서 주로 사용하는 사양입니다. Performance Graph는 N-T Curve라고도 불리며, 부하(load)를 점진적으로 증가시키면서 측정됩니다. 모터 구동되는 환경은 Stall torque 측정 방식보다는 Performance Graph 측정 방식에 가깝습니다. 이러한 이유로 Performance Graph가 산업전반에서 보다 폭넓게 사용됩니다. 일반적으로 Performance Graph의 Max torque는 Stall torque보다 적게 측정됩니다.{: .notice}`Warning` 전원공급시, 안정적인 전원공급을 위해 로보티즈 제어기나 SMPS2DYNAMIXEL을 통한 전원공급을 권장드립니다. 전원이 꺼진 상태에서 다이나믹셀과 전원을 연결하시고 스위치로 On/Off 해주세요.{: .notice--warning}# [컨트롤 테이블](#컨트롤-테이블)Control Table은 다이나믹셀 내부에 존재하는 Data의 집합체입니다. 사용자는 Instruction Packet을 통해 Control Table의 특정 Data를 읽어서(READ Instruction) 다이나믹셀의 상태를 파악할 수 있고, Data를 변경함으로써(WRITE Instruction) 다이나믹셀을 제어할 수 있습니다.## [컨트롤 테이블, 데이터, 주소](#컨트롤-테이블-데이터-주소)Control Table은 다이나믹셀의 상태와 제어를 위한 다수의 Data 필드로 구성된 집합체입니다. 사용자는 READ Instruction Packet을 통해 Control Table의 특정 Data를 읽어서 다이나믹셀의 상태를 파악할 수 있습니다. 또한 WRITE Instruction Packet을 통해 Control Table의 특정 Data를 변경함으로써 다이나믹셀을 제어할 수 있습니다. Address는 Instruction Packet으로 Control Table의 특정 Data를 접근할 때 사용하는 고유값입니다. 다이나믹셀의 Data를 읽거나 쓰기 위해서는 Instruction Packet에 해당 Data의 Address를 지정해 주어야 합니다. Packet에 대한 자세한 내용은 e-Manual의 프로토콜을 참고해주세요.`Note` 음수의 표현 방법은 2의 보수(Two’s complement) 규칙을 따릅니다. 2의 보수에 대한 자세한 설명은 위키피디아를 참고하세요. [Two&#39;s complement]{: .notice}### Area (EEPROM, RAM)Control Table은 2가지 영역으로 구분됩니다. RAM Area에 위치한 Data는 전원이 인가될 때마다 다시 초기값으로 설정됩니다(Volatile). 반면 EEPROM Area에 위치한 Data는 값을 변경하면 전원이 꺼져도 그 값이 보존됩니다(Non-Volatile). EEPROM Area에 위치한 모든 Data는 Torque Enable(64)의 값이 ‘0’일 때만 변경할 수 있습니다.### SizeData의 Size는 용도에 따라 1, 2, 4[byte]로 정해져 있습니다. Instruction Packet을 통해 Data를 변경할 때는 해당 Data의 Size를 확인하시기 바랍니다.### AccessControl Table의 Data는 2가지 접근 속성을 갖습니다. ‘RW’는 읽기와 쓰기 접근이 모두 가능합니다. 반면 ‘R’은 읽기 전용(Read Only) 속성을 갖습니다. 읽기 전용 속성의 Data는 WRITE Instruction으로 값이 변경되지 않습니다. 읽기 전용 속성(‘R’)은 주로 측정 또는 모니터링 용도로 사용되고, 읽기쓰기 속성(‘RW’)은 다이나믹셀의 제어 용도로 사용됩니다.### Initial Value다이나믹셀에 전원이 인가될 때, Control Table의 각 Data는 초기값으로 설정됩니다. 매뉴얼에 표기된 EEPROM 영역의 Default Value는 제품의 초기 설정값(공장 출하 설정값)입니다. 사용자가 변경한 경우, 초기값은 사용자가 변경한 값으로 적용됩니다. RAM 영역의 Default Value 값은 전원이 인가되었을 때 설정되는 값입니다.## [EEPROM 영역](#eeprom-영역)| Address     | Size(Byte)     | Data Name     | Description     | Access     | Initial Value     || :------------- | :------------- | :------------- | :------------- | :------------- | :------------- ||0|2|[Model Number](#model-number)         | 모델 번호       | R       | 1010       ||2|4|[Model Information](#model-information)   |모델 정보|R|-||6|1|[Firmware Version](#firmware-version)    |펌웨어 버전 정보|R|-||7|1|[ID](#id)                  |다이나믹셀 ID      |RW|1||8|1|[Baud Rate](#baud-rate)           |다이나믹셀 통신속도|RW|1||9|1|[Return Delay Time](#return-delay-time)   |응답 지연 시간|RW|250||10|1|[Drive Mode](#drive-mode)          |드라이브 모드|RW|0||11|1|[Operating Mode](#operating-mode)      |동작 모드|RW|3||12|1|[Secondary(Shadow) ID](#secondary-shadow-id)|보조 ID|RW|255||13|1|[Protocol Version](#protocol-version)    |프로토콜 버전|RW|2||20|4|[Homing Offset](#homing-offset)       |&#39;0&#39;점위치 조정값&#39;|RW|0||24|4|[Moving Threshold](#moving-threshold)    |움직임 유무를 결정하는 속도 기준값|RW|10||31|1|[Temperature Limit](#temperature-limit)   |내부 한계온도|RW|80||32|2|[Max Voltage Limit](#max-voltage-limit)   |최고 한계전압|RW|160||34|2|[Min Voltage Limit](#min-voltage-limit)   |최저 한계전압|RW|95||36|2|[PWM Limit](#pwm-limit)           |PWM 한계값|RW|885||38|2|[Current Limit](#current-limit)       |전류 한계값|RW|648||40|4|[Acceleration Limit](#acceleration-limit)  |가속도 한계값|RW|32767||44|4|[Velocity Limit](#velocity-limit)      |속도 한계값|RW|360||48|4|[Max Position Limit](#max-position-limit)  |최대 위치 제한값|RW|4095||52|4|[Min Position Limit](#min-position-limit)  |최소 위치 제한값|RW|00||63|1|[Shutdown](#shutdown)            |셧다운 에러 정보|RW|52|## [RAM 영역](#ram-영역)| Address     | Size(Byte)     | Data Name     | Description     | Access     | Initial Value     || :------------- | :------------- | :------------- | :------------- | :------------- | :------------- ||64|1|[Torque Enable](#torque-enable)            |토크 On/Off|RW|0||65|1|[LED](#led)                             |상태 LED On/Off|RW|0||68|1|[Status Return Level](status-return-level)      |응답레벨|RW|2||69|1|[Registered Instruction](#registered-instruction)   |Instruction의 등록 여부|R|0||70|1|[Hardware Error Status](#hardware-error-status)    |하드웨어 에러 상태|R|0||76|2|[Velocity I Gain](#velocity-i-gain)           |속도 I Gain|RW|1920||78|2|[Velocity P Gain](#velocity-p-gain)           |속도 P Gain|RW|100||80|2|[Position D Gain](#position-d-gain)           |위치 D Gain|RW|0||82|2|[Position I Gain](#position-i-gain)           |위치 I Gain|RW|0||84|2|[Position P Gain](#position-p-gain)           |위치 P Gain|RW|900||88|2|[Feedforward 2nd Gain](#feedforward-2nd-gain)      |피드포워드 2nd Gain|RW|0||90|2|[Feedforward 1st Gain](#feedforward-1st-gain)      |피드포워드 1st Gain|RW|0||98|1|[Bus Watchdog](#bus-watchdog)              |다이나믹셀 버스 워치독|RW|0||100|2|[Goal PWM](#goal-pwm)                 |목표 PWM값|RW|-||102|2|[Goal Current](#goal-current)             |목표 전류값|RW|-||104|4|[Goal Velocity](#goal-velocity)            |목표 속도값|RW|-||108|4|[Profile Acceleration](#profile-acceleration)     |프로파일 가속도값|RW|0||112|4|[Profile Velocity](#profile-velocity)         |프로파일 속도값|RW|0||116|4|[Goal Position](#goal-position)            |목표 위치값|RW|-||120|2|[Realtime Tick](#realtime-tick)            |실시간 Tick[ms]|R|-||122|1|[Moving](#moving)                   |음직임 유무|R|0||123|1|[Moving Status](#moving-status)            |움직임의 상태|R|0||124|2|[Present PWM](#present-pwm)              |현재 PWM값|R|-||126|2|[Present Current](#present-current)          |현지 전류값|R|-||128|4|[Present Velocity](#present-velocity)         |현재 속도값|R|-||132|4|[Present Position](#present-position)         |현재 위치값|R|-||136|4|[Velocity Trajectory](#velocity-trajectory)      |속도 궤적값|R|-||140|4|[Position Trajectory](#position-trajectory)      |위치 궤적값|R|-||144|2|[Present Input Voltage](#present-input-voltage)    |현재 전압|R|-||146|1|[Present Temperature](#present-temperature)      |현재 내부온도|R|-||168|2|[Indirect Address 1](#indirect-address)       |간접 주소값 1|RW|224||170|2|[Indirect Address 2](#indirect-address)       |간접 주소값 2|RW|225||172|2|[Indirect Address 3](#indirect-address)       |간접 주소값 3|RW|226||…|…|…                        |…|…|…||220|2|[Indirect Address 27](#indirect-address)      |간접 주소값 27|RW|250||218|2|[Indirect Address 26](#indirect-address)      |간접 주소값 26|RW|249||222|2|[Indirect Address 28](#indirect-address)     |간접 주소값 28|RW|251||224|1|[Indirect Data 1](#indirect-data)          |간접 주소 데이터 1|RW|0||225|1|[Indirect Data 2](#indirect-data)           |간접 주소 데이터 2|RW|0||226|1|[Indirect Data 3](#indirect-data)           |간접 주소 데이터 3|RW|0||…|…|…                        |…|…|…||249|1|[Indirect Data 26](#indirect-data)          |간접 주소 데이터 26|RW|0||250|1|[Indirect Data 27](#indirect-data)          |간접 주소 데이터 27|RW|0||251|1|[Indirect Data 28](#indirect-data)          |간접 주소 데이터 28|RW|0||578|2|[Indirect Address 29](#indirect-address)      |간접 주소값 29|RW|634||580|2|[Indirect Address 30](#indirect-address)      |간접 주소값 30|RW|635||582|2|[Indirect Address 31](#indirect-address)      |간접 주소값 31|RW|636||…|…|…|…|…|…||628|2|[Indirect Address 54](#indirect-address)      |간접 주소값 54|RW|659||630|2|[Indirect Address 55](#indirect-address)      |간접 주소값 55|RW|660||632|2|[Indirect Address 56](#indirect-address)      |간접 주소값 56|RW|661||634|1|[Indirect Data 29](#indirect-data)          |간접 주소 데이터 29|RW|0||635|1|[Indirect Data 30](#indirect-data)          |간접 주소 데이터 30|RW|0||636|1|[Indirect Data 31](#indirect-data)          |간접 주소 데이터 31|RW|0||…|…|…|…|…|…||659|1|[Indirect Data 54](#indirect-data)          |간접 주소 데이터 54|RW|0||660|1|[Indirect Data 55](#indirect-data)          |간접 주소 데이터 55|RW|0||661|1|[Indirect Data 56](#indirect-data)          |간접 주소 데이터 56|RW|0|`Note` Address가 256보다 큰 경우 프로토콜 1.0으로 접근할 수 없습니다. 따라서 Indirect Address 29 ~ 56과 Indirect Data29~56은 프로토콜 2.0으로만 접근이 가능합니다.{: .notice}## [컨트롤 테이블 설명](#컨트롤-테이블-설명)### **Model Number (0)**다이나믹셀의 모델 번호입니다.### **Firmware Version (6)**다이나믹셀 펌웨어 버전입니다.### **ID (7)**Instruction Packet으로 다이나믹셀을 식별하기 위한 고유 번호입니다. 0~252 (0xFC) 까지 사용 가능하며, 254(0xFE)는 브로드캐스트(Broadcast) ID로 특수하게 사용됩니다. 브로드캐스트 ID(254, 0xFE)로 Instruction Packet을 전송하면 모든 다이나믹셀에 명령을 내릴 수 있습니다. `Note` 연결된 다이나믹셀의 ID가 중복되지 않도록 주의해야 합니다. 또한 ID(7)은 EEPROM Area에 존재하기 때문에 Torque Enable(64) 의 값이 ’0’ 일 때만 변경할 수 있습니다. {: .notice}### **Baud Rate (8)**제어기와 통신하기 위한 통신 속도 입니다.| Value     | Baud Rate     | Margin of Error     || :------------- | :------------- | :------------- ||0|9,600|0.000%||1(Default)|57,600|0.000%|| 2|115,200| 0.000%|| 3| 1M| 0.000%|| 4| 2M| 0.000%|| 5| 3M| 0.000%|| 6| 4M| 0.000%|| 7| 4.5M| 0.000%|`Note` UART는 Baudrate오차가 3% 이내이면 통신에 지장이 없습니다.{: .notice}### **Return Delay Time (9)**다이나믹셀이 Instruction Packet을 받은 후, Status Packet을 반환하기까지 걸리는 시간입니다. Return Delay Time(9)의 값이 ‘10’인 경우를 예로 들면, Instruction Packet을 받고 20[μsec] 만큼 경과한 후에 Status Packet을 반환합니다. |      | Value     | Description     | | :------------- | :------------- | :------------- | |Unit| 2[μsec] | - | |Range| 0 ~ 254  | Default value ‘250’(500[μsec]), Maximum 508[μsec]|### **Drive Mode (10, Available after Firmware version 38)**Dynamixel의 드라이브 모드를 설정합니다.||     | Definition     | Values     || :------------- | :------------- | :------------- | :------------- ||Bit 7|0x80|-|Unused, always ‘0’||Bit 6|0x40|-|Unused, always ‘0’||Bit 5|0x20|-|Unused, always ‘0’||Bit 4|0x10|-|Unused, always ‘0’||Bit 3|0x08|-|Unused, always ‘0’||Bit 2|0x04|-|Unused, always ‘0’||Bit 1|0x02|Rotation Direction| Normal Mode(&#39;0&#39;) : CCW(Positive), CW(Negative)||Bit 0|0x01|Rotation Direction| Reverse Mode(&#39;1&#39;) : CCW(Negative), CW(Positive)|`Note` Direction of rotation의 Reverse mode(‘1’)를 설정하면, Dynamixel의 회전 방향이 변경됩니다. 따라서 Position, Velocity, Current, PWM의 방향이 모두 변경됩니다. 좌우 대칭적인 구조의 관절이나 바퀴 구동 시스템을 구성할 때 편리하게 사용할 수 있습니다.{: .notice}### **Operating Mode (11)**다이나믹셀의 제어 모드를 설정합니다. 각 제어 모드마다 특성이 다르기 때문에, 구현하려는 시스템에 적합한 제어 모드를 설정하시기 바랍니다.|Value|Operating Mode| Description     || :---- | :------------------------------ | :------------------------------------------- || 0 | 전류 제어 모드 | 전류 제어 모드 속도와 위치는 제어하지 않고 전류(토크)를 제어합니다. 지령된 전류(토크)만 제어하는 시스템이나 그리퍼 또는 상위 제어기(위치, 속도 등)를 별도로 구성할 경우에 유용합니다. || 1 | 속도 제어 모드(0&amp;deg; ~ 360&amp;deg;) | 속도를 제어하는 모드 입니다. 기존제품의 바퀴 모드(무한회전)과 동일합니다. 바퀴형태의 로봇에 유용합니다. || 3(Default) | 위치 제어 모드  | 위치를 제어하는 모드 입니다. 기존제품의 관절 모드와 동일합니다. Max Position Limit(48), Min Position Limit(52)에 의해서 동작 범위가 제한됩니다. 1회전 내에서 구동하는 다관절 로봇에 유용합니다.  ||  4  |  확장 위치 제어 모드(Multi-turn)  |  위치를 제어하는 모드 입니다. 기존제품의 다중 회전 모드와 동일합니다. 동작 범위는 총 512회전(-256[rev] ~ 256[rev]) 입니다. 다수의 회전(멀티턴)이 필요한 로봇의 손목 부위나 컨베이어시스템 또는 추가 감속기가 필요한 시스템에 유용합니다.  ||  5  |  전류기반 위치 제어 모드  |  위치와 전류(토크)를 제어합니다. 동작 범위는 총 512회전(-256[rev] ~ 256[rev]) 입니다. 위치와 전류를 동시에 제어할 필요가 있는 다관절 로봇이나 그리퍼에 유용합니다.  ||  16  |  PWM 제어 모드 (Voltage Control Mode)  |  PWM 출력을 직접 제어합니다. (Voltage Control Mode)  |{% capture group_notice_01 %}`Note` 제어 모드가 변경될 때 제어기의Gain(PID, Feedforward)은 제어 모드에 적합하게 초기화 됩니다. 또한 프로파일 생성기와 제한값들 역시 초기화 됩니다.1. Profile Velocity(112), Profile Acceleration(108) : ‘0’으로 초기화2. Goal PWM(100), Goal Current(102) : PWM Limit(36), Current Limit(38)으로 초기화3. 전류기반 위치 제어 모드 : 별도의 Position Gain(PID)과 PWM Limit(36) 값으로 재설정 됩니다.변경된 Position Gain(PID)과 PWM Limit(36) 값은 컨트롤테이블을 통해서 확인할 수 있습니다.{% endcapture %}  {{ group_notice_01 | markdownify }}`Note` PWM이란Pulse Width Modulation(펄스 폭 변조)의 약자로 펄스의 폭(PWM Duty)을 변경시키는 변조방식을 뜻합니다. 모터 제어 분야에서는 펄스의 폭을 변경하여 모터에 공급되는 평균 전압을 제어하는 용도로 폭넓게 사용되고 있습니다. 따라서 PWM 제어 모드는 Goal PWM(100)을 이용하여 모터에 공급되는 전압을 제어하는 제어 방식을 뜻합니다. PWM 모드는 다이나믹셀AX, RX 시리즈의 바퀴모드와 유사합니다.{: .notice}### **Secondary(Shadow) ID (12)**Dynamixel의 Secondary ID를 설정합니다. Secondary ID(12)는 ID(7)과 동일하게 다이나믹셀을 식별하기 위한 번호로 사용됩니다. 다만, Secondary ID(12)는 ID(7)과 달리 고유한 번호가 아닙니다. 따라서 동일한 Secondary ID 값을 갖은 다이나믹셀들은 하나의 그룹을 형성하게 됩니다. Secondary ID(12)와 ID(7)의 차이는 다음과 같습니다.1. Secondary ID(12)는 ID(7)과 달리 고유 번호가 아닙니다. 즉, 다수의 다이나믹셀이 동일한 Secondary ID 값을 가질 수 있습니다.2. Secondary ID(12)보다 ID(7)의 우선순위가 높습니다. 따라서 Secondary ID(12)와 ID(7)가 같을 경우, ID(7)가 우선적으로 적용됩니다.3. Secondary ID(12)로는 컨트롤테이블의 EEPROM 영역을 변경할 수 없습니다. RAM 영역만 변경이 가능합니다.4. Instruction Packet의 ID가 Sencodary ID(12)와 같은 경우, Status Packet을 반환하지 않습니다.5. Secondary ID(12)의 값이 253 이상인 경우, Secondary ID 기능은 비활성화 됩니다.|      | Values     | Description     || :------------- | :------------- | :------------- || 범위     | 0 ~ 252253 ~ 255       | Secondary ID 기능 활성화Secondary ID 기능 비활성화, 초기값 ‘255’ |다음은 ID(7)가 1부터 5로 설정된 5개의 다이나믹셀이 있는 경우에 대한 동작 예시입니다.1. 5개 다이나믹셀의 Secondary ID(12)를 모두 ‘5’로 동일하게 설정합니다.2. Write Instruction Packet(ID = 1, LED(65) = 1)을 전송합니다.3. ID가 ‘1’인 다이나믹셀은 LED를 켠 후, Status Packet을 반환합니다.4. Write Instruction Packet(ID = 5, LED(65) = 1)을 전송합니다.5. 5개의 다이나믹셀은 모두 LED를 켭니다. 단, Status Packet은 ID가 ‘5’인 다이나믹셀만 반환합니다.6. 5개 다이나믹셀의 Secondary ID(12)를 모두 ‘100’으로 동일하게 설정합니다.7. Write Instruction Packet(ID = 100, LED(65) = 0)을 전송합니다.8. 5개의 다이나믹셀은 모두 LED를 끕니다. 단, ID ‘100’인 다이나믹셀이 없으므로 Status Packet은 반환되지 않습니다.### **Protocol version (13)**다이나믹셀의 프로토콜 버전(1.0, 2.0)을 설정할 수 있습니다. 함께 사용할 다이나믹셀의 프로토콜 버전에 맞춰서 설정하세요.|      | Protocol Version     |Compatible DYNAMIXELs|| :------------- | :------------- | :------------- ||1|1.0| AX, DX, RX, MX, EX 시리즈||2(Default)|2.0|DYNAMIXEL-X, DYNAMIXEL-PRO 시리즈|`Note` 프로토콜 2.0은 프로토콜 1.0의 문제점을 대폭 개선한 버전입니다. 프로토콜 1.0을 사용할 경우, 컨트롤테이블의 일부 영역의 접근이 제한될 수 있습니다. 매뉴얼에서는 프로토콜 2.0을 기준으로 설명합니다. 프로토콜에 대한 자세한 사항은 e-Manual의 프로토콜을 참고해주세요.{: .notice}### **Homing Offset (20)**‘0’ 점의 위치를 조절 할 수 있습니다. 이 값은 Present Position(132)에 더해지게 됩니다.Present Position(132) = 실제 위치 + Homing Offset(20) 이 됩니다.|      | Values     | Description     || :------------- | :------------- | :------------- ||Unit|약 0.088&amp;deg;|4096 분해능, 위치 관련 Data의 단위는 모두 동일||Range|-1,044,479 ~ 1,044,479|±255[rev] 범위|`Note` 1회전 내에서 제어하는 위치 제어 모드(관절 모드)의 경우, Homing Offset(20)은 (-1024 ~ 1024) 범위보다 클 경우 무시됩니다.{: .notice}### **Moving Threshold (24)**움직임의 유무를 판별하는 기준 속도로 사용됩니다. Present Velocity(128)의 절대값이 Moving Threshold(24)보다 크면, 움직임 유무를 나타내는 Moving(122) 이 ‘1’이 되고, 적으면 ‘0’이 됩니다.|      | Values     | Description     || :------------- | :------------- | :------------- ||Unit|about 0.229rpm|속도 관련 Data의 단위는 모두 동일||Range|0 ~ 1,023|-|### **Temperature Limit (31)**동작 온도의 상한 값입니다. 다이나믹셀의 현재 내부온도를 나타내는 Present Temperature(146)가 Temperature Limit(31)보다 높아지면 Hardware Error Status(70)의 Over Heating Error Bit(0x04)와 Hardware Error Bit(0x80)이 설정됩니다. Shutdown(63)에 Overheating Error Bit(0x04)가 설정된 경우, Torque Enable(64)은 ‘0’이 되고 Torque가 OFF됩니다. 자세한 설명은 Shutdown(63)을 참고하세요.|      | Values     | Description     || :------------- | :------------- | :------------- ||Unit|약 1&amp;deg;C|온도 관련 Data의 단위는 모두 동일||Range|0 ~ 100|-|### **Max Voltage Limit (32), Min Voltage Limit (34)**동작 전압의 상한 값과 하한 값입니다. 다이나믹셀에 현재 인가된 전압을 나타내는 Present Input Voltage(144)가 Max Voltage Limit(32)와 Min Voltage Limit(34)의 범위를 벗어날 경우, Hardware Error Status(70)의 Voltage Range Error Bit(0x01)와 Hardware Error Bit(0x80)이 설정됩니다. Shutdown(63)에 Input Voltage Error Bit(0x10)가 설정된 경우, Torque Enable(64)은 ‘0’이 되고 Torque가 OFF 됩니다. 자세한 설명은 Shutdown(63)을 참고하세요.|      | Values     | Description     || :------------- | :------------- | :------------- ||Unit|약 0.1[V]|전압 관련 Data의 단위는 모두 동일||Range|95 ~ 160|9.5 ~ 16.0[V]|### **PWM Limit (36)**PWM 출력의 한계 값입니다. Goal PWM(100)에는 PWM Limit(36)보다 큰 값을 쓸 수 없습니다. PWM Limit(36)은 모든 제어모드에 공통으로 적용되는 출력 제한 값으로써, PWM 출력을 낮추면 다이나믹셀의 토크와 속도 모두 감소합니다. 자세한 사항은 해당 제어 모드의 Gain 부분을 참고하세요.|      | Values     | Description     || :------------- | :------------- | :------------- ||Range|0 ~ 885|885 = 100[%] 출력|### **Current Limit (38)**전류(토크) 출력의 한계 값입니다. Goal Current(102)에는 Current Limit(38)보다 큰 값을 쓸 수 없습니다. Current Limit(38)은 전류 제어 모드와 전류기반 위치 제어 모드에서 적용되는 제한 값으로써, 전류 출력을 낮추면 다이나믹셀의 토크가 감소합니다. 자세한 사항은 Position PID Gain(80 ~ 84)을 참고하세요.|      | Values     | Description     || :------------- | :------------- | :------------- ||Unit|약  2.69[mA]|전류 관련 Data의 단위는 모두 동일||Range|0 ~ 648|-|`Note` Current Limit(38)은 다이나믹셀 별로 다를 수 있으니 Control Table을 확인하시기 바랍니다.{: .notice}### **Acceleration Limit (40)**Profile Acceleration(108)의 한계 값입니다. Profile Acceleration(108)에는 Acceleration Limit(40)보다 큰 값을 쓸 수 없습니다. Profile Acceleration(108)은 전류 제어 모드를 제외한 모든 제어 모드에서 목표 궤적을 생성하는데 사용됩니다. 자세한 설명은 Profile Velocity(112)을 참고하세요.|      | Values     | Description     || :------------- | :------------- | :------------- ||Unit|214.577[Rev/min2]|가속도 관련 Data의 단위는 모두 동일||Range|0 ~ 32.767|-|`Note` Status Packet의 Error필드의 비트정보는 프로토콜 1.0과 2.0이 다릅니다. 여기서는 프로토콜 2.0을 기준으로 설명합니다. 자세한 사항은 e-Manual의 프로토콜을 참고해주세요.{: .notice}### **Velocity Limit (44)**Goal Velocity(104)와 Profile Velocity(112)의 한계 값입니다. 자세한 설명은 Profile Velocity(112)을 참고하세요.|      | Values     | Description     || :------------- | :------------- | :------------- ||Unit|0.229[RPM]|속도 관련 Data의 단위는 모두 동일||Range|0 ~ 1,023|-|### **Max Position Limit (48), Min Position Limit (52)**위치 제어 모드(관절 모드)에서 목표 위치의 제한 값으로써, 1회전(0~4095) 범위 내에서 목표 위치를 제한 합니다. 따라서 위치 제어 모드에서 Goal position(116)은 이 값보다 클 수 없습니다. 확장 위치 제어 모드와 전류기반 위치 제어 모드에서는 적용되지 않습니다.|      | Values     | Description     || :------------- | :------------- | :------------- ||Unit|0.088&amp;deg;|위치 관련 Data의 단위는 모두 동일||Range|0 ~ 4095|제한 값의 범위는 1회전으로 국한됨|`Note` 1회전 내에서 제어하는 위치 제어 모드(관절 모드)에서만 적용 됩니다.{: .notice}### **Shutdown (63)**다이나믹셀은 동작 중에 발생하는 위험 상황을 감지하여 스스로를 보호할 수 있습니다. 각 Bit의 기능은 ‘OR’의 논리로 적용되기 때문에 중복 설정이 가능합니다. 즉 Shutdown(63)이 ‘0x05’ (2 진수: 0000,0101)로 설정되었을 경우, Input Voltage Error(2 진수 : 0000,0001)와 Overheating Error(2 진수 : 0000,0100)가 발생하는 것을 모두 감지할 수 있습니다. 위험 상황이 감지되면, Torque Enable(64) 값이 ‘0’으로 변경되고 모터 출력은 0[%]가 됩니다. 위험 상황이 감지된 후에는 REBOOT을 하지 않는 한, Torque Enable(64)을 ‘1’(Torque ON)로 설정할 수 없습니다. Shutdown(63)에서 감지할 수 있는 위험 상황은 아래 표와 같습니다.|||Definition|Description||bit 7|0x80|-|미사용, 항상 ‘0’||bit 6|0x40|-|미사용, 항상 ‘0’||bit 5|0x20|Overload Error(Default)|최대 출력으로 제어할 수 없는 하중이 지속적으로 발생한 경우||bit 4|0x10|Electrical Shock Error(Default)|전기적으로 회로가 충격을 받았거나, 입력 전력이 부족해서 모터가 정상 동작하지 못하는 경우||bit 3|0x08|Motor Encoder Error|모터의 엔코더가 동작하지 않는 경우||bit 2|0x04|Overheating Error(Default)|내부 온도가 설정된 동작 온도 범위를 벗어난 경우||bit 1|0x02|Motor Hall Sensor Error(Unused)|미사용, 항상 ‘0’||bit 0|0x01|Input Voltage Error|인가된 전압이 설정된 동작 전압 범위를 벗어난 경우|{% capture group_notice_02 %}`Note` Shutdown이 발생하면 다음과 같은 방법으로 다이나믹셀을 REBOOT 시킬 수 있습니다.1. H/W REBOOT : 전원을 껐다 켜는 방법2. S/W REBOOT : REBOOT Instruction 전송하는 방법(자세한 사항은 e-Manual의 프로토콜을 참고해주세요.){% endcapture %}  {{ group_notice_02 | markdownify }}### **Torque Enable (64)**Torque ON/OFF를 제어합니다. ‘1’을 쓰면 Torque ON 상태가 되고, EEPROM 영역의 모든 Data는 잠김 상태로 변경됩니다.| Values     | Description     || :------------- | :------------- ||0(Default)|Torque OFF(Free-run) 상태로 변경됩니다.||1|Torque ON 상태로 변경되고 EEPROM 영역의 모든 Data는 잠김 상태로 변경됩니다.|`Note` Present Position(132)은 Operating Mode(11)와 Torque Enable(64)이 변경되는 시점에 초기화 될 수 있습니다. 자세한 사항은 Homing Offset(20)과 Present Position(132)를 참고하세요.{: .notice}### **LED (65)**LED를 ON/OFF 합니다. 다이나믹셀의 LED는 LED(65)에 의해서만 제어 됩니다.| Values     | Description     || :------------- | :------------- ||0(Default)|LED를 OFF 시킵니다.||1|LED를 ON 시킵니다.|### **Status Return Level (68)**다이나믹셀이 Instruction Packet을 수령했을 때, Status Packet의 반환 방식을 결정합니다.| Values     |When to return Status Packet| Description     || :------------- | :------------- | :------------- ||0|PING Instruction|모든 Instruction에 대해 Status Packet을 반환하지 않습니다.(PING Instruction 제외)||1|PING InstructionREAD Instruction|READ Instruction에만 Status Packet을 반환합니다.PING Instruction은 예외적으로 모든 Instruction에 Status Packet을 반환합니다.||2|All Instructions|모든 Instruction에 대해 Status Packet을 반환합니다.|`Note` Instruction Packet의 ID가 Broad Cast ID(0xFE)인 경우, READ, WRITE Instruction에 대해서는 Status Return Level(68)과 무관하게 Status Packet을 반환하지 않습니다. 자세한 사항은 e-Manual의 프로토콜을 참고해주세요.{: .notice}### **Registered Instruction (69)**다이나믹셀이 REG_WRITE Instruction Packet을 수신한 경우 ‘1’로 설정되고, ACTION Instruction Packet을 수행하면 ‘0’으로 변경됩니다.### **Hardware Error Status (70)**하드웨어의 에러 상태를 나타냅니다. 자세한 사항은 Shutdown(63)을 참고하세요.### **Velocity I Gain (76), Velocity P Gain (78)**속도 제어 모드에서 동작하는 속도 제어기의 Gain 입니다. Control Table의 Gain과 다이나믹셀 내부 제어기의 Gain은 다음은 같은 관계를 갖습니다.하기의 상수에는 샘플링타임이 포함되어 있습니다. 편의상 다이나믹셀 내부 제어기의 Velocity P Gain을 KVP로 표기하고 Control Table의 Gain은 KVP(TBL)로 표기합니다.|| Controller Gain     | Conversion Equations     | Range | Description || :------------- | :------------- | :------------- | :------------- || Velocity I Gain(76) | KVI | KVI = KVI(TBL) / 65536 | 0 ~ 16383 | I Gain || Velocity P Gain(78) | KVP | KVP = KVP(TBL) / 128 | 0 ~ 16383 | P Gain|다음은 속도 제어 모드에서 동작하는 속도제어기의 블록다이어그램입니다. 사용자의 요청이 다이나믹셀에 전달된 후, 다이나믹셀의 Horn이 구동되기까지의 과정은 다음과 같습니다.1. 사용자의 요청이 다이나믹셀 버스를 통해 Goal Velocity(104)에 등록됩니다.2. Goal Velocity(104)는 Profile Acceleration(108)에 의해서 목표 속도 궤적으로 변경됩니다.3. 목표 속도 궤적은 Velocity Trajectory(136) 에 표기됩니다.4. PI 제어기는 목표 속도 궤적을 기반으로 모터에 인가할 PWM 출력을 계산합니다.5. Goal PWM(100)은 계산된 PWM 출력을 제한하여 최종 PWM값을 결정합니다.6. 최종 PWM값은 Inverter를 통해 모터에 적용되고 다이나믹셀의 Horn이 구동됩니다.7. 구동 결과는 Present Position(132), Present Velocity(128) Present PWM(124), Present Current(126)에 표기됩니다.![](/assets/images/dxl/x/dxl_velocity_controller.jpg)`Note` Ka는 Anti-windup Gain이고 ‘β’는 위치와 속도의 변환계수로 사용자가 변경할 수는 없습니다. PID 제어기에 대한 자세한 설명은 위키피디아 사이트를 참고하세요. [PID Controller at wikipedia](http://en.wikipedia.org/wiki/PID_controller).{: .notice}### **Position D Gain (80), Position I Gain (82), Position P Gain (84)**### **Feedforward 2nd Gain (88), Feedforward 1st Gain (90)**위치 제어 모드, 확장 위치 제어 모드에서 동작하는 위치 제어기의 Gain입니다. Control Table의 Gain과 다이나믹셀 내부 제어기의 Gain은 다음은 같은 관계를 갖습니다. 하기의 상수에는 샘플링타임이 포함되어 있습니다.편의상 다이나믹셀 내부 제어기의 Position P Gain을 KPP로 표기하고 Control Table의 Gain은 KPP(TBL)로 표기합니다.|  | Controller Gain | Conversion Equation | Range | Description || :------------- | :------------- || Position D Gain(76)| KPD | KPD = KPD(TBL) / 16 | 0 ~ 16383 | D Gain || Position I Gain(76)| KPI | KPI = KPI(TBL) / 65536 | 0 ~ 16383 | I Gain || Position P Gain(78)| KPP | KPP = KPP(TBL) / 128 | 0 ~ 16383 | P Gain || Feedforward 2nd Gain(88) | KFF2nd | KFF2nd = KFF2nd(TBL) / 4 | 0 ~ 16383 | Feedforward Acceleration Gain || Feedforward 1st Gain(90) | KFF1st | KFF1st = KFF1st(TBL) / 4 | 0 ~ 16383 | Feedforward Velocity Gain |다음은 위치 제어 모드, 확장 위치 제어 모드에서 동작하는 위치제어기의 블록다이어그램입니다. 사용자의 요청이 다이나믹셀에 전달된 후, 다이나믹셀의 Horn이 구동되기까지의 과정은 다음과 같습니다.1. 사용자의 요청이 다이나믹셀 버스를 통해 Goal Position(116)에 등록됩니다.2. Goal Position은 Profile Velocity(112)와 Profile Acceleration(108)에 의해서 목표 위치 궤적과 목표 속도 궤적으로 변경됩니다.3. 목표 속도 궤적과 목표 위치 궤적은 Velocity Trajectory(136), Position Trajectory(140)에 표기됩니다.4. Feedforward와 PID 제어기는 목표 궤적을 기반으로 모터에 인가할 PWM 출력을 계산합니다.5. Goal PWM(100)은 계산된 PWM 출력을 제한하여 최종 PWM값을 결정합니다.6. 최종 PWM값은 Inverter를 통해 모터에 적용되고 다이나믹셀의 Horn이 구동됩니다.7. 구동 결과는 Present Position(132), Present Velocity(128) Present PWM(124), Present Current(126)에 표기됩니다.![](/assets/images/dxl/x/dxl_position_controller.jpg)`Note` PWM 제어 모드의 경우, PID 제어기와 Feedforward 제어기는 모두 비활성화되고 Goal PWM(100) 값이 Inverter를 통해서 모터에 직접 인가됩니다. 이를 통해 모터의 전압을 직접 제어할 수 있습니다.{: .notice}`Note` Ka는 Anti-windup Gain로서 사용자가 변경할 수는 없습니다..{: .notice}다음은 전류기반 위치제어기(전류기반 위치 제어 모드)의 블록다이어그램입니다. 기본적인 내용은 위치제어기와 동일하므로, 위치제어기와의 차이점만 설명합니다. 블록다이어그램에서 위치제어기와 다른 부분은 초록색으로 표기 하였습니다.1. Feedforward와 PID 제어기는 목표 궤적을 기반으로 목표 전류를 계산합니다.2. Goal Current(102)는 계산된 목표 전류를 제한하여 최종 목표 전류를 결정합니다.3. 전류제어기는 최종 목표 전류를 기반으로 모터에 인가할 PWM 출력을 계산합니다.4. Goal PWM(100)은 계산된 PWM 출력을 제한하여 최종 PWM값을 결정합니다.5. 최종 PWM값은 Inverter를 통해 모터에 적용되고 다이나믹셀의 Horn이 구동됩니다.6. 구동 결과는 Present Position(132), Present Velocity(128) Present PWM(124), Present Current(126)에 표기됩니다.![](/assets/images/dxl/x/dxl_current_position_controller.jpg)`Note` Ka는 Anti-windup Gain로서 사용자가 변경할 수는 없습니다. 보다 자세한 PID 제어기와 Feedforward 제어기에 대한 설명은 위키피디아 사이트를 참고하세요. [PID Controller](http://en.wikipedia.org/wiki/PID_controller), [Feed Forward](https://en.wikipedia.org/wiki/Feed_forward_(control)).{: .notice}### **Bus Watchdog (98, Available after Firmware version 38)**Bus Watchdog(98)은 특정할 수 없는 오류에 의해 제어기와 다이나믹셀의 통신(RS485, TTL)이 단절된 경우, 다이나믹셀을 정지시키기 위한 안전장치(Fail-safe) 입니다. 여기서 통신이란 DYNAMIXEL Protocol에서 정의된 모든 Instruction Packet을 의미합니다.|  | Values  | Description || :------------- | :------------- || Unit | 20[ms] | - || Range | 0 | Bus Watchdog 기능 비활성화, Bus Watchdog Error 해제 ||Range| 1 ~ 127 | Bus Watchdog 활성화 ||Range| -1 | Bus Watchdog Error 상태 |Bus Watchdog 기능은 Torque Enable(64)가 ‘1’인 경우, 제어기와 다이나믹셀의 통신 간격(시간)을 감시합니다. 측정된 통신 간격(시간)이 Bus Watchdog(98) 보다 클 경우, 다이나믹셀은 정지합니다. 이때 Bus Watchdog(98)은 ‘-1’(Bus Watchdog Error)로 변경됩니다. Bus Watchdog Error 상태가 되면, Goal Value(Goal PWM(100), Goal Current(102), Goal Velocity(104), Goal Position(116))의 Access(접근 속성)은 읽기 전용(Read Only)로 변경됩니다. 따라서 Goal Value에 새로운 값을 쓸 경우, Status packet을 통해 Range Error를 회신합니다. Bus Wathdog(98)의 값을 ‘0’으로 변경하면, Bus Watchdog Error는 해제됩니다.`Note` Range Error에 대한 자세한 사항은 e-Manual의 프로토콜을 참고해주세요.{: .notice}다음은 Bus Watchdog 기능의 동작 예시입니다.1. Operating Mode(11)를 속도 제어 모드로 설정한 후, Torque Enable(64)를 ‘1’로 변경 합니다.2. Goal Velocity(104)에 ‘50’을 쓰면, 다이나믹셀은 CCW 방향으로 회전합니다.3. Bus Watchdog(98)의 값을 ‘100’(2,000[ms])으로 변경합니다.(Bus Watchdog 기능 활성화)4. 2,000[ms] 동안 Instruction packet이 수신되지 않으면, Dynamixel은 정지합니다. 정지할 때 Profile Acceleration(108)과 Profile Velocity(112)는 ‘0’으로 적용됩니다.5. Bus Watchdog(98)의 값은 ‘-1’(Bus Watchdog Error)으로 변경됩니다. 이때 Goal Value의 접근속성(Access)은 모두 읽기전용(Read Only)으로 변경됩니다.6. Goal Velocity(104)에 ‘150’을 쓰면, Status Packet을 통해 Range Error가 회신합니다.7. Bus Watchdog(98)의 값을 ‘0’으로 변경하면, Bus Watchdog Error가 해제됩니다.8. Goal Velocity(104)에 ‘150’을 쓰면, Dynamixel은 CCW 방향으로 회전합니다.### **Goal PWM (100)**PWM 제어 모드의 경우, PID 제어기나 Feedforward 제어기는 모두 비활성화되고 Goal PWM(100) 값이 Inverter를 통해서 모터에 직접 인가됩니다. 그 외 제어 모드에서는 PWM 제한값으로 사용됩니다. 이 값은 PWM Limit(36)보다 클 수 없습니다. 제어 모드 별 Goal PWM(100)의 동작 방식은 해당 Gain의 설명 부분을 참고하세요.|  | Values  | Description || :------------- | :------------- ||Range | -PWM Limit(36) ~ PWM Limit(36) | PWM Limit(36)의 초기값은 ‘885’ 입니다. |### **Goal Current (102)**전류 제어 모드의 경우, Goal Current(102)를 통해 목표 전류를 설정할 수 있습니다. 전류기반 위치 제어 모드에서는 Current 제한값으로 사용됩니다. 이 값은 Current Limit(38)보다 클 수 없습니다.|  | Values  | Description || :------------- | :------------- ||Unit | 약 2.69[mA] | 전류 관련 Data의 단위는 모두 동일 || Range | -Current Limit(38) ~ Current Limit(38) | - |`Note` 높은 전류를 장시간 사용할 경우, 모터가 손상될 수 있습니다.{: .notice}### **Goal Velocity (104)**속도 제어 모드의 경우, Goal Velocity(104)를 통해 목표 속도를 설정할 수 있습니다. 이 값은 Velocity Limit(44)보다 클 수 없습니다. 현재 Goal Velocity(104)는 목표 속도로만 사용되고, 속도 제한 값으로는 사용되지 않습니다.|  | Values  | Description || :------------- | :------------- ||Unit | 0.229[RPM] | 속도 관련 Data의 단위는 모두 동일 ||Range | -Velocity Limit(44) ~ Velocity Limit(44) | - |`Note` 다이나믹셀의 최대 속도와 최대 토크는 입력전압에 따라 달라집니다. 따라서 입력 전압에 따라 추종할 수 있는 최대 속도 역시 달라집니다. 매뉴얼에서는 권장전압(12[V])를 기준으로 설명합니다.{: .notice}`Note` Profile Acceleration(108)과 Goal Velocity(104)를 동시에 변경할 경우, 변경된 Profile Acceleration(108)이 적용되어 Goal Velocity(104)가 수행됩니다.{: .notice}### **Profile Acceleration (108)**Profile의 가속도를 설정합니다. Profile Acceleration(108)은 전류 제어 모드를 제외한 모든 제어 모드에서 적용 가능합니다. Profile Acceleration(108)은 Acceleration Limit(40)보다 클 수 없습니다. 자세한 사항은 Profile Velocity(112)를 참고하세요.|  | Values  | Description || :------------- | :------------- ||Unit | 214.577[Rev/min2] | 가속도 관련 Data의 단위는 모두 동일 || Range | 0 ~ Acceleration Limit(40) | Profile Acceleration(108)이 &#39;0&#39;인 경우, 무한대 가속도를 뜻합니다. |### **Profile Velocity (112)**Profile의 최대 속도를 설정합니다. Profile Velocity(112)는 전류 제어 모드와 속도 제어 모드를 제외한 모든 제어 모드에서 적용 가능합니다. Profile Velocity(112)는 Velocity Limit(44)보다 클 수 없습니다. 참고로 속도 제어 모드에서는 Profile Velocity(112)는 적용되지 않고 Profile Acceleration(108)만 적용됩니다.|  | Values  | Description || :------------- | :------------- ||Unit | 0.229[RPM] | 속도 관련 Data의 단위는 모두 동일 ||Range|0 ~ Velocity Limit(44) | Profile Velocity(112)이 ‘0’인 경우, 무한대 속도를 뜻합니다.|Profile이란 모터 구동 시 급격하게 변하는 속도와 가속도를 조절함으로써 진동, 소음 및 모터의 부하를 줄이는 가감속 제어 방법입니다. 일반적으로 속도에 근거하여 가감속을 제어하기 때문에 Velocity Profile이라고 불립니다. 다이나믹셀은 4가지 형태의 Profile을 제공합니다. 다음은 4가지 종류의 Profile과 Profile의 선택 방법을 표시합니다. 기본적으로 Profile의 선택은 Profile Velocity(112)와 Profile Acceleration(108)의 조합에 의해서 결정됩니다. 예외적으로 Triangle과 Trapezoidal Profile은 총 이동거리(ΔPos, 목표위치와 현재위치의 차이)가 추가로 고려되어 선택됩니다. 편의상 Profile Velocity(112)를 VPRFL, Profile Acceleration(108)을 APRFL로 표기합니다. ‘X’는 “상관없음”(Don’t Care)를 뜻합니다.![](/assets/images/dxl/x/dxl_profiles.jpg)다이나믹셀의 Profile은 Goal Position(116)이 주어졌을 때, 현재 속도(Profile의 시작속도)를 기반으로 목표 속도 궤적을 생성합니다. 따라서 다이나믹셀이 Goal Position(116)로 이동하는 중에 새로운 Goal Position(116)로 목표위치가 변경되어도, 속도의 연속성을 유지하면서 목표 속도 궤적을 생성합니다. 이와 같이 속도의 불연속이 발생하지 않도록 목표 속도 궤적을 생성하는 기능을 Velocity Override라고 합니다. 여기서는 수식의 단순화를 위해 Profile의 시작속도를 ‘0’으로 가정합니다.다음은 위치 제어 모드, 확장 위치 제어 모드, 전류기반 위치 제어 모드에서, Goal Position(116) 명령에 대한 Profile의 동작 과정을 나타냅니다.1. 사용자의 요청이 다이나믹셀 버스를 통해 Goal Position(116)에 등록됩니다.2. Profile Velocity(112)와 Profile Acceleration(108)에 의해서 가속 시간(t1)이 결정됩니다.3. Profile Velocity(112), Profile Acceleration(108) 그리고 총 이동거리(ΔPos, 목표위치와 현재위치의 차이)에 의해서 Profile의 형태가 다음과 같이 결정됩니다.4. 최종 선정된 Profile의 형태는 Moving Status(123)에 표기됩니다.(Moving Status(123) 참고)5. 다이나믹셀은 Profile에 의해 산출된 목표 궤적에 따라 이동하게 됩니다.6. Profile에 의한 목표 속도 궤적과 목표 위치 궤적은 Velocity Trajectory(136)와 Position Trajectory(140)에 표기됩니다.7. Goal Position(116)에 도달하는 시간(t3)와 ③의 VPRFL_TRI은 다음과 같이 계산됩니다.| Condition     | Types of Profile     || :------------- | :------------- || VPRFL(112) = 0 | 프로파일 미사용(Step 명령) || (VPRFL(112) ≠ 0) &amp; (APRF(108) = 0) | 사각(Rectangle) 프로파일 형태 || (VPRFL(112) ≠ 0) &amp; (APRF(108) ≠ 0) &amp; (VPRFL_TRI ≤ VPRFL(112)) | 삼각(Triangle) 프로파일 형태 || (VPRFL(112) ≠ 0) &amp; (APRF(108) ≠ 0) &amp; (VPRFL_TRI ＞ VPRFL(112))| 사다리꼴(Trapezoidal) 프로파일 형태 |![](/assets/images/dxl/x/dxl_velocity_profiles.jpg)`Note` 급격한 가속도의 변화를 최소화하기 위해서 다이나믹셀은 Jerk를 관리하고 있습니다. 따라서 Profile에 의한 목표궤적의 정확한 완료시간은 t3 보다 다소 길어질 수 있습니다.(상기 그림의 t4){: .notice}{% capture group_notice_03 %}`Note` 속도 제어 모드에서는 Profile Acceleration(108)만 적용됩니다. 제공되는 Profile의 형태는 Step과 Trapezoidal 2가지 입니다. Velocity Override 기능과 Jerk 관리 기능은 동일하게 동작합니다. 이때의 가속시간(t1)은 다음과 같습니다.![](/assets/images/dxl/x/equation_01.gif){% endcapture %}  {{ group_notice_03 | markdownify }}### **Goal Position (116)**Goal Position(116)을 통해 목표위치를 설정할 수 있습니다. 모든 다이나믹셀은 Horn을 정면에서 바라봤을 때 CCW(Counter Clockwise) 방향이 증가 방향이고, CW(Clockwise) 방향이 감소 방향입니다. Goal Position(116)에 도달하는 방식은 다이나믹셀이 제공하는 4가지 형태의 Profile에 따라 달라집니다. Profile에 대한 자세한 내용은 Profile Velocity(112)를 참고하세요.![](/assets/images/dxl/x/dxl_goal_position.jpg)|| Mode     | Values     | Description || :------------- | :------------- || Unit |  | 0.088&amp;deg; | 1[rev] : 0 ~ 4,095 || Range | 위치제어 모드확장 위치제어 모드전류기반 위치제어 모드 | Min Position Limit(52) ~ Max Position Limit(48)-1,048,575 ~ 1,048,575-1,048,575 ~ 1,048,575 | Initial Value : 0 ~ 4,095-256[rev] ~ 256[rev]-256[rev] ~ 256[rev]|`Note` Profile Acceleration(108), Profile Velocity(112)와 Goal Position(116)을 동시에 변경할 경우, 변경된 Profile Acceleration(108)과 Profile Velocity(112)가 적용되어 Goal Position(116)이 수행됩니다.{: .notice}### **Realtime Tick (120)**다이나믹셀의 시간을 나타내는 지수입니다.|     | Values     | Description || :------------- | :------------- || Unit | 1[ms] | - || Range | 0 ~ 32,767 | 32,767 이후에는 ‘0’부터 다시 시작 합니다. |### **Moving (122)**움직임의 유무를 나타냅니다. Present Velocity(128)의 절대값이 Moving Threshold(24)보다 크면 Moving(122) 이 ‘1’이 되고, 적으면 ‘0’이 됩니다. 단 Profile 진행 중, 즉 Goal Position(116) 명령을 수행하는 중에는 Present Velocity(128)와 무관하게 ‘1’로 설정됩니다.| Value | Description     || :------------- | :------------- || 0 | 움직임이 감지 되지 않음 || 1 | 움직임이 감지 되었거나, Profile 진행 중인 경우(Goal Position(116) 명령을 수행하는 중) |### **Moving Status (123)**움직임에 대한 추가적인 정보를 제공합니다. Following Error Bit(0x08)과 In-Position Bit(0x01)은 위치 제어 모드, 확장 위치 제어 모드, 전류기반 위치 제어 모드에서만 동작합니다.||| Details     | Description     || :------------- | :------------- |:------------- | :------------- || Bit 7 | 0x80 | - | 미사용 || Bit 6 | 0x40 | - | 미사용 || Bit 5~Bit 4 | 0x30 | Profile Type(0x30)Profile Type(0x20)Profile Type(0x10)Profile Type(0x00)|사다리꼴 속도 프로파일(Trapezoidal Velocity Profile)삼각 속도 프로파일(Triangle Velocity Profile)사각 속도 프로파일(Rectangle Velocity Profile)프로파일 미사용(Step)|| Bit 3 | 0x08 | Following Error | 다이나믹셀이 목표위치 궤적을 추종하지 못하는 경우 || Bit 2 | 0x04 | - | 미사용 || Bit 1 | 0x02 | Profile Ongoing | Goal Position(116) 명령에 따라 Profile 진행 중인 경우 || Bit 0 | 0x01 | In-Position | 다이나믹셀이 목표위치에 도달 경우 |### **Present PWM (124)**현재 PWM 값입니다. 자세한 사항은 Goal PWM(100)을 참고하세요.### **Present Current (126)**현재 전류 값입니다. 자세한 사항은 Goal Current(102)를 참고하세요.### **Present Velocity (128)**현재 속도 값입니다. 자세한 사항은 Goal Velocity(104) 참고하세요.### **Present Position (132)**현재 위치 값입니다. 자세한 사항은 Goal Position(116)을 참고하세요.{% capture group_notice_04 %}`Note` Present Position(132)은 Torque OFF 상태일 경우, Operating Mode(11)와 상관없이 4[byte](-2,147,483,648 ~ 2,147,483,647)의 범위를 연속적으로 표현합니다. Present Position(132)의 값이 초기화되는 시점은 다음과 같습니다.1. Operating Mode(11)가 위치 제어 모드로 변경되는 시점에 1[rev](0~4,095) 범위로 초기화2. 위치 제어 모드에서 Torque ON으로 변경되는 시점에 1[rev](0~4,095) 범위로 초기화Homing Offset(20)에 의해 초기화 되는 값은 변경될 수 있습니다.{% endcapture %}  {{ group_notice_04 | markdownify }}### **Velocity Trajectory (136)**Profile에 의해 생성된 목표 속도 궤적입니다. 제어 모드에 따라 동작 방식이 다음과 같이 달라집니다. 자세한 사항은 Profile Velocity(112)를 참고하세요.1. 속도 제어 모드 : Profile이 종료되면 Velocity Trajectory(136)은 Goal Velocity(104)와 동일해 집니다.2. 위치 제어 모드, 확장 위치 제어 모드, 전류기반 위치 제어 모드 : Position Trajectory(140)을 생성하기 위한 목표 속도 궤적입니다. Profile이 종료되면 Velocity Trajectory(136)은 ‘0’이 됩니다.### **Position Trajectory (140)**Profile에 의해 생성된 목표 위치 궤적입니다. 위치 제어 모드, 확장 위치 제어 모드, 전류기반 위치 제어 모드에서만 동작 합니다. 자세한 사항은 Profile Velocity(112)를 참고하세요.### **Present Input Voltage (144)**현재 공급되는 전압입니다. 자세한 사항은 Max/Min Voltage Limit(32, 34)를 참고하세요.### **Present Temperature (144)**현재 내부온도입니다. 자세한 사항은 Temperature Limit(31)을 참고하세요.### **Indirect Address 1 ~ 28 (168, 170 ~ 220, 222), Indirect Address 29 ~ 56 (578, 580 ~ 630, 632)Indirect Data 1 ~ 28 (224, 225 ~ 250, 251), Indirect Data 29 ~ 56 (634, 635 ~ 660, 661)**Indirect Address와 Indirect Data 용도는 서로 떨어져있는 Control Table의 Address를 연속된 Address로 사용하기 위함입니다. 연속된 Address는 Instruction Packet을 효율성을 향상 시킵니다. Indirect Address로 설정할 수 있는 Address는 RAM 영역(Address 64 ~ 661)으로 한정 됩니다.Indirect Address에 특정 Address를 설정하면, Indirect Data는 특정한 Address에 해당하는 Data의 기능과 속성을 모두 상속받습니다. 동일한 속성이란 Size(Byte 길이), 값의 범위 그리고 Access(읽기 전용 속성, 읽기 쓰기 속성)를 모두 포함합니다. 즉 Indirect Address 1(168)에 65(LED의 Address)를 설정하면, Indirect Data 1(224)은 LED(65)와 동일한 기능을 수행하게 됩니다.1. 예제1) Size 1[byte]인 LED(65)를 Indirect Data 1(224)로 사용할 경우  A. Indirect Address 1(168) : LED의 주소 ‘65’로 변경  B. Indirect Data 1(224)를 ‘1’로 변경 -&gt; LED(65) 역시 ‘1’로 변경되면서 LED가 켜집니다.  C. Indirect Data 1(224)를 ‘0’로 변경 -&gt; LED(65) 역시 ‘0’로 변경되면서 LED가 꺼집니다.2. 예제2) Size 4[byte]인 Goal Position(116)을 Indirect Data 2(225)로 사용할 경우, 4[byte] 모두 변경 해야함  A. Indirect Address 2(170) : Goal Position의 첫 번째 주소 ‘116’으로 변경  B. Indirect Address 3(172) : Goal Position의 두 번째 주소 ‘117’으로 변경  C. Indirect Address 4(174) : Goal Position의 세 번째 주소 ‘118’으로 변경  D. Indirect Address 5(176) : Goal Position의 네 번째 주소 ‘119’으로 변경  E. Indirect Data 2에서 4[byte] 값을 ‘1024’ 변경 -&gt; Goal Position(116) 역시 ‘1024’로 변경되고 다이나믹셀이 구동됩니다.| | Values | Description     || :------------- | :------------- || Indirect Address Range | 64~661 | Indirection Address는 EEPROM 영역을 지정할 수 없습니다. |`Note` 2[byte] 이상의 길이를 갖는 Control Table의 Data를 Indirect Address로 설정할 경우에는 &quot;예제 2)&quot;와 같이 Control Table의 Data가 포함된 모든 Address를 Indirect Address로 설정해 주어야 정상동작합니다.{: .notice}`Note` Indirect Address 29 ~ 56과 Indirect Data 29 ~ 56은 프로토콜 2.0으로만 접근할 수 있습니다.{: .notice}# [조립 예시](#조립-예시)## [배선 예시](#배선-예시)![](/assets/images/dxl/x/wiring_through_back_case.jpg)## [옵션프레임 조립](#옵션프레임-조립)![](/assets/images/dxl/x/x430_option_frame.jpg)# [유지보수](#유지보수)## [혼, 베어링](#혼-베어링)혼은 다이나믹셀의 전면 휠기어에 장착되며, 베어링은 후면에 장착됩니다.![](/assets/images/dxl/x/horn_bearing.jpg)### Installing the Horn혼을 삽입하기 전에 혼 와셔를 와셔 홈에 맞도록 올려놓으십시오.혼과 휠기어에 표시된 도트 표시를 맞추어서 혼을 끼워넣으십시오.![](/assets/images/dxl/x/horn_alignment.jpg)도트 표시를 맞추어서 혼을 휠기어에 끼웠으면 혼의 중심부를 누르면서 휠기어의 끝까지 완전히 삽입되도록 조립하십시오. 이 과정에서 먼저 끼워진 혼 와셔가 이탈하지 않는지 확인하십시오. 혼과 와셔가 모두 정상적으로 조립되면 볼트를 이용해서 혼과 휠기어를 단단히 고정하십시오.### Installing the Bearing Set다이나믹셀에 사용되던 베어링 셋트를 분리하거나 새로운 베어링 셋트를 구입해서 다이나믹셀에 조립할 수 있습니다.  베어링 셋트는 구동축과 분리되어 자유롭게 회전하기 때문에 혼을 조립할때 처럼 위치를 맞추어 조립할 필요가 없습니다.![](/assets/images/dxl/x/bearing.jpg)# [참고자료](#참고자료)## [퀵스타트](#퀵스타트){% include en/dxl/quick_start.md %}## [도면](#도면)- [X_430_std_ref.pdf][Protocol]: #[Two&#39;s complement]: #[X_430_std_ref.pdf]: http://support.robotis.com/en/baggage_files/dynamixel/x-430_std_ref.pdf",
        "url": " http://localhost:4000/docs/kr/dxl/x/xh430-w210/"
      } ,
  
      "docs-en-dxl-x-xh430-w350":  {
        "title": "XH430-W350",
      "content"	 : "# XH430-W350![](/assets/images/dxl/x/x_series_product.png)# [Specifications](#specifications)| Item           | Specifications     || :------------- | :------------- || MCU       | ST CORTEX-M3 (STM32F103C8 @ 72Mhz, 32Bit)       || Position Sensor       | Contactless absolute encoder (12Bit, 360&amp;deg;)Maker : ams(www.ams.com), Part No : AS5045|| Motor       | Maxon       || Baud Rate       | 9600 bps ~ 4.5 Mbps       || Control Algorithm | PID control     || Degree of Precision | 0.088&amp;deg;  || Operating Modes | Current Control Mode  Velocity Control Mode  Position Control Mode (0&amp;deg; ~ 360&amp;deg;)  Extended Position Control Mode  Current-based Position Control Mode  PWM Control Mode (Voltage Control Mode) || Weight | 82g || Dimensions (W x H x D) | 28.5mm x 46.5mm x 34mm || Gear Ratio | 353.5 : 1  || Stall Torque | 3.1Nm @ 11.1V, 1.2A3.4Nm @ 12.0V, 1.3A4.2Nm @ 14.8V, 1.5A || No Load Speed | 27rpm @ 11.1V30rpm @ 12.0V37rpm @ 14.8V || Operating Temperature | -5&amp;deg;C ~ +80&amp;deg;C || Input Voltage | 10.0 ~ 14.8V (**Recommended : 12.0V**) || Standby Current | 40mA || Command Signal | Digital Packet || Protocol Type | XH430-W350-T: Half Duplex Asynchronous Serial CommunicationXH430-W350-R: RS485 Asynchronous Serial Communication(8bit, 1stop, No Parity) || Physical Connection | XH430-W350-T: TTL Level Multidrop BUS XH430-W350-R: RS485 Multidrop BUS || ID | 0 ~ 252 || Feedback | Position, Velocity, Current, Realtime tick, Trajectory, Temperature, Input Voltage, etc || Part Material | Full Metal GearMetal(Front, Middle), Engineering Plastic(Back) |## [Performance Graph](#performance-graph)![](/assets/images/dxl/x/xh430_w350_performance_graph.jpg){% include en/dxl/note_performance_graph.md %}{% include en/dxl/control_table_protocol2.md %}## [Control Table of EEPROM Area](#control-table-of-eeprom-area)| Address     | Size(Byte)     | Data Name     | Description     | Access     | Initial Value     || :------------- | :------------- | :------------- | :------------- | :------------- | :------------- ||0|2|[Model Number](#model-number)                    |Model Number                             |R  |1000||2|4|[Model Information](#model-information)          |Model Information                        |R  |-||6|1|[Firmware Version](#firmware-version)            |Firmware Version                         |R  |-||7|1|[ID](#id)                                        |DYNAMIXEL ID                             |RW |1||8|1|[Baud Rate](#baud-rate)                          |Communication Speed                      |RW |1||9|1|[Return Delay Time](#return-delay-time)          |Response Delay Time                      |RW |250||10|1|[Drive Mode](#drive-mode)                       |Default Rotation Direction               |RW |0||11|1|[Operating Mode](#operating-mode)               |Operating Mode                           |RW |3||12|1|[Secondary(Shadow) ID](#secondary-shadow-id)    |Secondary(Shadow) ID                     |RW |255||13|1|[Protocol Version](#protocol-version)           |Protocol Version                         |RW |2||20|4|[Homing Offset](#homing-offset)                 |Home Position Offset                     |RW |0||24|4|[Moving Threshold](#moving-threshold)           |Velocity Threshold for Movement Detection|RW |10||31|1|[Temperature Limit](#temperature-limit)         |Maximum Internal Temperature Limit       |RW |80||32|2|[Max Voltage Limit](#max-voltage-limit)         |Maximum Input Voltage Limit              |RW |160||34|2|[Min Voltage Limit](#min-voltage-limit)         |Minimum Input Voltage Limit              |RW |95||36|2|[PWM Limit](#pwm-limit)                         |Maximum PWM Limit                        |RW |885||38|2|[Current Limit](#current-limit)                 |Maximum Current Limit                    |RW |648||40|4|[Acceleration Limit](#acceleration-limit)       |Maximum Accleration Limit                |RW |32767||44|4|[Velocity Limit](#velocity-limit)               |Maximum Velocity Limit                   |RW |280||48|4|[Max Position Limit](#max-position-limit)       |Maximum Position Limit                   |RW |4095||52|4|[Min Position Limit](#min-position-limit)       |Minimum Position Limit                   |RW |0||63|1|[Shutdown](#shutdown)                           |Shutdown Error Information               |RW |52|## [Control Table of RAM Area](#control-table-of-ram-area)| Address     | Size(Byte)     | Data Name     | Description     | Access     | Initial Value     || :------------- | :------------- | :------------- | :------------- | :------------- | :------------- ||64|1|[Torque Enable](#torque-enable)               |Motor Torque On/Off                        |RW |0||65|1|[LED](#led)                                   |Status LED On/Off                          |RW |0||68|1|[Status Return Level](#status-return-level)   |Select Types of Status Return              |RW |2||69|1|[Registered Instruction](#registered-instruction)|Check Reception of Instruction          |R  |0||70|1|[Hardware Error Status](#hardware-error-status)  |Hardware Error Status                   |R  |0||76|2|[Velocity I Gain](#velocity-i-gain)           |I Gain of Velocity                         |RW |1920||78|2|[Velocity P Gain](#velocity-p-gain)           |P Gain of Velocity                         |RW |100||80|2|[Position D Gain](#position-d-gain)           |D Gain of Position                         |RW |0||82|2|[Position I Gain](#position-i-gain)           |I Gain of Position                         |RW |0||84|2|[Position P Gain](#position-p-gain)           |P Gain of Position                         |RW |900||88|2|[Feedforward 2nd Gain](#feedforward-2nd-gain) |2nd Gain of Feed-Forward                   |RW |0||90|2|[Feedforward 1st Gain](#feedforward-1st-gain) |1st Gain of Feed-Forward                   |RW |0||98|1|[Bus Watchdog](#bus-watchdog)                 |DYNAMIXEL Bus Watchdog                     |RW |0||100|2|[Goal PWM](#goal-pwm)                        |Target PWM Value                           |RW |-||102|2|[Goal Current](#goal-current)                |Target Current Value                       |RW |-||104|4|[Goal Velocity](#goal-velocity)              |Target Velocity Value                      |RW |-||108|4|[Profile Acceleration](#profile-acceleration)|Acceleration Value of Profile              |RW |0||112|4|[Profile Velocity](#profile-velocity)        |Velocity Value of Profile                  |RW |0||116|4|[Goal Position](#goal-position)              |Target Position Value                      |RW |-||120|2|[Realtime Tick](#realtime-tick)              |Count Time in millisecond                  |R  |-||122|1|[Moving](#moving)                            |Movement Status                            |R  |0||123|1|[Moving Status](#moving-status)              |Detailed Information of Movement Status    |R  |0||124|2|[Present PWM](#present-pwm)                  |Current PWM Value                          |R  |-||126|2|[Present Current](#present-current)          |Current Current Value                      |R  |-||128|4|[Present Velocity](#present-velocity)        |Current Velocity Value                     |R  |-||132|4|[Present Position](#present-position)        |Current Position Value                     |R  |-||136|4|[Velocity Trajectory](#velocity-trajectory)  |Target Velocity Trajectory Generated by Profile|R|-||140|4|[Position Trajectory](#position-trajectory)  |Target Position Trajectory Generated by Profile|R|-||144|2|[Present Input Voltage](#present-input-voltage)|Current Input Voltage                    |R  |-||146|1|[Present Temperature](#present-temperature)    |Current Internal Temperature             |R  |-||168|2|[Indirect Address 1](#indirect-address)      |Indirect Address 1                         |RW |224||170|2|[Indirect Address 2](#indirect-address)      |Indirect Address 2                         |RW |225||172|2|[Indirect Address 3](#indirect-address)      |Indirect Address 3                         |RW |226||…|…|…                        |…|…|…||218|2|[Indirect Address 26](#indirect-address)     |Indirect Address 26                        |RW |249||220|2|[Indirect Address 27](#indirect-address)     |Indirect Address 27                        |RW |250||222|2|[Indirect Address 28](#indirect-address)     |Indirect Address 28                        |RW |251||224|1|[Indirect Data 1](#indirect-data)            |Indirect Data 1                            |RW |0||225|1|[Indirect Data 2](#indirect-data)            |Indirect Data 2                            |RW |0||226|1|[Indirect Data 3](#indirect-data)            |Indirect Data 3                            |RW |0||…|…|…                        |…|…|…||249|1|[Indirect Data 26](#indirect-data)           |Indirect Data 26                           |RW |0||250|1|[Indirect Data 27](#indirect-data)           |Indirect Data 27                           |RW |0||251|1|[Indirect Data 28](#indirect-data)           |Indirect Data 28                           |RW |0||578|2|[Indirect Address 29](#indirect-address)     |Indirect Address 29                        |RW |634||580|2|[Indirect Address 30](#indirect-address)     |Indirect Address 30                        |RW |635||582|2|[Indirect Address 31](#indirect-address)     |Indirect Address 31                        |RW |636||…|…|…|…|…|…||628|2|[Indirect Address 54](#indirect-address)     |Indirect Address 54                        |RW |659||630|2|[Indirect Address 55](#indirect-address)     |Indirect Address 55                        |RW |660||632|2|[Indirect Address 56](#indirect-address)     |Indirect Address 56                        |RW |661||634|1|[Indirect Data 29](#indirect-data)           |Indirect Data 29                           |RW |0||635|1|[Indirect Data 30](#indirect-data)           |Indirect Data 30                           |RW |0||636|1|[Indirect Data 31](#indirect-data)           |Indirect Data 31                           |RW |0||…|…|…|…|…|…||659|1|[Indirect Data 54](#indirect-data)           |Indirect Data 54                           |RW |0||660|1|[Indirect Data 55](#indirect-data)           |Indirect Data 55                           |RW |0||661|1|[Indirect Data 56](#indirect-data)           |Indirect Data 56                           |RW |0|`Caution` Protocol 1.0 does not support addresses greater than 256. Therefore, Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.{: .notice--warning}## [Control Table Description](#control-table-description)`Caution` Data in the EEPROM Area can only be written when the value of Torque Enable(64) is cleared to ‘0’.{: .notice--warning}### **Model Number(0)** This address stores model number of the DYNAMIXEL.### **Firmware Version(6)** This address stores firmware version of the DYNAMIXEL.### **ID(7)**{% include en/dxl/control_table_id.md %}### **Baud Rate(8)**{% include en/dxl/control_table_baudrate_2.md %}### **Return Delay Time(9)**{% include en/dxl/control_table_return_delay_time.md %}### **Drive Mode(10, Available from Firmware v38)**{% include en/dxl/control_table_drivemode.md %}### **Operating Mode(11)**{% include en/dxl/control_table_opmode_six_2.md %}### **Secondary(Shadow) ID(12)**{% include en/dxl/control_table_shadowid.md %}### **Protocol version(13)**{% include en/dxl/control_table_protocolversion.md %}### **Homing Offset(20)**{% include en/dxl/control_table_homingoffset.md %}### **Moving Threshold(24)**{% include en/dxl/control_table_movingthreshold.md %}### **Temperature Limit(31)**{% include en/dxl/control_table_temp_limit_2.md %}### **Min/Max Voltage Limit(34, 32)**{% include en/dxl/control_table_volt_limit_2.md %}### **PWM Limit(36)**{% include en/dxl/control_table_pwm_limit.md %}### **Current Limit(38)**{% include en/dxl/control_table_current_limit.md %}| Unit | Value Range     || :---: | :------------: ||about  2.69[mA]|0 ~ 648|`Note` Current Limit(38) could be differ by each DYNAMIXEL so please check the Control Table.{: .notice}### **Acceleration Limit(40)**{% include en/dxl/control_table_acclimit.md %}### **Velocity Limit(44)**{% include en/dxl/control_table_vellimit.md %}### **Min/Max Position Limits(52, 48)**{% include en/dxl/control_table_positionlimit.md %}### **Shutdown(63)**{% include en/dxl/control_table_shutdown.md %}### **Torque Enable(64)**{% include en/dxl/control_table_torque_enable_2.md %}### **LED(65)**{% include en/dxl/control_table_led.md %}### **Status Return Level(68)**{% include en/dxl/control_table_status_return_lv.md %}### **Registered Instruction(69)**{% include en/dxl/control_table_reg_instruction.md %}### **Hardware Error Status(70)**This value indicates hardware error status.{% include en/dxl/control_table_shutdown.md %}### **Velocity PI Gain(78, 76)**{% include en/dxl/control_table_velocity_pi_gain.md %}### **Position PID Gain(84, 82, 80), Feedforward 1st/2nd Gains(90, 88)**{% include en/dxl/control_table_position_pid_gain.md %}{% include en/dxl/control_table_current_position_pid_gain.md %}### **Bus Watchdog(98, Available from Firmware v38)**{% include en/dxl/control_table_buswatchdog.md %}### **Goal PWM(100)**{% include en/dxl/control_table_goal_pwm.md %}### **Goal Current(102)**{% include en/dxl/control_table_goal_current.md %}| Unit | Value Range     || :---: | :------------: ||about  2.69[mA]|-Current Limit(38) ~ Current Limit(38)|`Note` Applying high current to the motor for long period of time might damage the motor.{: .notice}### **Goal Velocity(104)**{% include en/dxl/control_table_goal_velocity.md %}### **Profile Acceleration(108)**{% include en/dxl/control_table_profile_acceleration.md %}### **Profile Velocity(112)**{% include en/dxl/control_table_profile_velocity.md %}### **Goal Position(116)**{% include en/dxl/control_table_goal_position_2.md %}### **Realtime Tick(120)**{% include en/dxl/control_table_realtime_tick.md %}### **Moving(122)**{% include en/dxl/control_table_moving_2.md %}### **Moving Status(123)**{% include en/dxl/control_table_moving_status.md %}### **Present PWM(124)**This value indicates current PWM. For more details, please refer to the [Goal PWM(100)](#goal-pwm).### **Present Current(126)**This value indicates current Current. For more details, please refer to the Goal Current(102).### **Present Velocity(128)**This value indicates current Velocity. For more details, please refer to the Goal Velocity(104).### **Present Position(132)**{% include en/dxl/control_table_present_position.md %}### **Velocity Trajectory(136)**{% include en/dxl/control_table_velocity_trajectory.md %}### **Position Trajectory(140)**{% include en/dxl/control_table_position_trajectory.md %}### **Present Input Voltage(144)**{% include en/dxl/control_table_present_volt_2.md %}### **Present Temperature (144)**{% include en/dxl/control_table_present_temp_2.md %}### **Indirect Address, Indirect Data**{% include en/dxl/control_table_indirect_data.md %}# [How to Assemble](#how-to-assemble)## [Wiring through Back Case](#wiring-through-back-case)![](/assets/images/dxl/x/wiring_through_back_case.jpg)## [Option Frame Assembly](#option-frame-assembly)![](/assets/images/dxl/x/x430_option_frame.jpg)# [Maintenance](#maintenance){% include en/dxl/horn_bearing_replacement.md %}# [Reference](#reference)`Note` [Compatibility Guide]{: .notice}## [Quick Start](#quick-start){% include en/dxl/quick_start.md %}## [Drawings](#drawings)`Download` [X_430_std_ref.pdf][X_430_std_ref.pdf]: http://support.robotis.com/en/baggage_files/dynamixel/x-430_std_ref.pdf[Compatibility Guide]: http://en.robotis.com/BlueAD/board.php?bbs_id=faq&amp;mode=view&amp;bbs_no=47&amp;page=1&amp;key=&amp;keyword=&amp;sort=&amp;scate=",
        "url": " http://localhost:4000/docs/en/dxl/x/xh430-w350/"
      } ,
  
      "docs-kr-dxl-x-xh430-w350":  {
        "title": "XH430-W350",
      "content"	 : "DYNAMIXEL XH430-W350",
        "url": " http://localhost:4000/docs/kr/dxl/x/xh430-w350/"
      } ,
  
      "docs-en-dxl-x-xl320":  {
        "title": "XL320",
      "content"	 : "# XL320![](/assets/images/dxl/x/xl320_product.jpg)`Caution` XL-320 is a different product from the OLLO Geared and Servo Motor.{: .notice--warning}# [Specifications](#specifications)| Item           | Specifications     || :------------- | :------------- || Baud Rate       | 7343 bps ~ 1 Mbps       || Resolution | 0.29&amp;deg;  || Running Degree | 0&amp;deg; ~ 360&amp;deg;Endless Turn || Weight | 16.7g || Dimensions (W x H x D) | 24mm x 36mm x 27mm || Gear Ratio | 238 : 1  || Stall Torque | 0.39Nm @ 7.4V, 1.1A || No Load Speed | 114rpm @ 7.4V, 0.18A || Operating Temperature | -5&amp;deg;C ~ +70&amp;deg;C || Input Voltage | 6 ~ 8.4V (**Recommended : 7.4V**) || Command Signal | Digital Packet || Protocol Type | Half Duplex Asynchronous Serial Communication(8bit, 1stop, No Parity) || Physical Connection | TTL Level Multidrop Bus(Daisy Chain Type Connector) || ID | 0 ~ 252 || Feedback | Position, Temperature, Load, Input Voltage, etc || Material | Engineering Plastic |`Note` Stall torque is the maximum instantaneous and static torque. Stable motions are possible with robots designed for loads with 1/5 or less of the stall torque.{: .notice}{% include en/dxl/control_table_protocol1.md %}## [Control Table of EEPROM Area](#control-table-of-eeprom-area)| Address     | Size(Byte)     | Data Name     | Description     | Access     | Initial Value     | Min | Max || :---------: | :----------: | :-------------: | :-------------: | :--------: | :-------------: | :---: | :---: ||0|2|[Model Number](#model-number)         | Model Number       | R       | 350 |-|-||2|1|[Firmware Version](#firmware-version)    |Firmware Version|R|-|-|-||3|1|[ID](#id)                  |DYNAMIXEL ID      |RW|1|0|252||4|1|[Baud Rate](#baud-rate)           |Communication Speed|RW|3|0|3||5|1|[Return Delay Time](#return-delay-time)   |Response Delay Time|RW|250|0|254||6|2|[CW Angle Limit](#cw-angle-limit)          |Clockwise Angle Limit|RW|0|0|1023||8|2|[CCW Angle Limit](#ccw-angle-limit)          |Counter-Clockwise Angle Limit|RW|1023|0|1023||11|1|[Control Mode](#control-mode)             |Control Mode|RW|2|1|2||12|1|[Temperature Limit](#temperature-limit)   |Maximum Internal Temperature Limit|RW|65|0|150||13|1|[Min Voltage Limit](#min-voltage-limit)   |Minimum Input Voltage Limit|RW|60|50|250||14|1|[Max Voltage Limit](#max-voltage-limit)   |Maximum Input Voltage Limit|RW|90|50|250||15|2|[Max Torque](#max-torque)           |Maximun Torque|RW|1023|0|1023||17|1|[Status Return Level](#status-return-level)      |Select Types of Status Return|RW|2|0|2||18|1|[Shutdown](#shutdown)            |Shutdown Error Information|RW|3|0|7|## [Control Table of RAM Area](#control-table-of-ram-area)| Address     | Size(Byte)     | Data Name     | Description     | Access     | Initial Value     | Min | Max || :---------: | :----------: | :-------------: | :-------------: | :--------: | :-------------: | :---: | :---: ||24|1|[Torque Enable](#torque-enable)            |Motor Torque On/Off|RW|0|0|1||25|1|[LED](#led)                             |Status LED On/Off|RW|0|0|7||27|1|[D Gain](#d-gain)   |Derivative Gain|RW|0|0|254||28|1|[I Gain](#i-gain)   |Integral Gain|RW|0|0|254||29|1|[P Gain](#p-gain)   |Proportional Gain|RW|32|0|254||30|2|[Goal Position](#goal-position)                 |Target Position|RW|-|0|1023||32|2|[Moving Speed](#moving-speed)             |Moving Speed(Moving Velocity)|RW|-|0|2047||35|2|[Torque Limit](#torque-limit)            |Torque Limit(Goal Torque)|RW|-|0|1023||37|2|[Present Position](#present-position)     |Present Position|R|-|-|-||39|2|[Present Speed](#present-speed)           |Present Speed|R|-|-|-||41|2|[Present Load](#present-load)             |Present Load|R|-|-|-||45|1|[Present Voltage](#present-voltage)       |Present Voltage|R|-|-|-||46|1|[Present Temperature](#present-temperature)|Present Temperature|R|-|-|-||47|1|[Registered](#registered)                 |If Instruction is registered|R|0|-|-||49|1|[Moving](#moving)                   |Movement Status|R|0|-|-||50|1|[Hardware Error Stat](#hardware-error-stat)|Hardware Error Status|R|0|-|-||51|2|[Punch](#punch)                   |Minimum Current Threshold|RW|32|0|1023|## [Control Table Description](#control-table-description)### **Model Number (0)** This address stores model number of the DYNAMIXEL.### **Firmware Version (2)** This address stores firmware version of the DYNAMIXEL.### **ID (3)**{% include en/dxl/control_table_id.md %}### **Baud Rate (4)**Baud Rate determines serial communication speed between a controller and DYNAMIXELs.| Value     | Baud Rate     || :-------: | :-----------: ||0          |9,600 bps      ||1          |57,600 bps     ||2          |115,200 bps    ||3          |1 Mbps         |### **Return Delay Time (5)**{% include en/dxl/control_table_return_delay_time.md %}### **CW/CCW Angle Limit(6, 8)**{% include en/dxl/control_table_angle_limit.md %}### **Control Mode(11)**| Value     | Mode     || :-------: | :-----------: ||0          |Wheel Mode      ||1          |Joint Mode     |### **Temperature Limit(12)**{% include en/dxl/control_table_temp_limit.md %}### **Min/Max Voltage Limit(13, 14)**It is the operation range of voltage.|Unit|Value Range|Description|| :---: | :---: | :---: ||About 0.1V|50 ~ 250|5.0 ~ 25.0V|For example, if the value is 80, the voltage is 8V.If [Present Voltage(45)] is out of the range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and [Shutdown(18)] is triggered.[Present Voltage(45)]: #present-voltage[Shutdown(18)]: #shutdown### **Max Torque(15)**{% include en/dxl/control_table_max_torque.md %}### **Status Return Level(17)**{% include en/dxl/control_table_status_return_lv.md %}### **Shutdown(18)**Dynamixel can protect itself by detecting errors occur during the operation.The errors can be set are as the table below.|Bit   | Item     | Description     || :-------------: | :-------------: | :------------- ||Bit 3~7|-|-||Bit 2|ERROR_INPUT_VOLTAGE|Voltage is out of operational voatage range||Bit 1|ERROR_OVER_HEATING|Temperature is out of operational temperature range||Bit 0|ERROR_OVERLOAD|Motor cannot output max load due to load being applied continouosly|It is possible to make duplicate set since the function of each bit is run by  the logic of ‘OR’. That is, if 0x05 (binary 00000101) is set, both Input Voltage Error and Overload Error can be detected.If errors occur, in case of Alarm LED, the LED blinks; in case of Alarm Shutdown, the motor output becomes 0 % by making the value of Torque Limit(35) to 0.### **Torque Enable(24)**{% include en/dxl/control_table_torque_enable.md %}### **LED(25)**The combination of bit changes the output color of XL-320.|Bit   | Output Color || :-------------: | :-------------: ||0      | Red   ||1      | Green ||2      | Blue  ||0 + 1  | Yellow||1 + 2  | Cyan  ||0 + 2  | Purple||0 + 1 + 2  | White |### **PID Gains(27, 28, 29)**{% include en/dxl/control_table_mx_pid.md %}### **Goal Position(30)**{% include en/dxl/control_table_dx_goal_position.md %}### **Moving Speed(32)**- Join Mode, Multi-Turn mode  It is a moving speed to Goal Position.  0~1,023 (0x3FF) can be used, and the unit is about 0.111rpm.  If it is set to 0, it means the maximum rpm of the motor is used without controlling the speed.  If it is 1,023, it is about 114rpm.  For example, if it is set to 300, it is about 33.3 rpm.  However, the rpm will not exceed the No Load Speed.- Wheel Mode  It is a moving speed to Goal direction.  0~2,047 (0x7FF) can be used, and the unit is about 0.1%.  If a value in the range of 0~1,023 is used, it is stopped by setting to 0 while rotating to CCW direction.  If a value in the range of 1,024~2,047 is used, it is stopped by setting to 1,024 while rotating to CW direction.  That is, the 10th bit becomes the direction bit to control the direction.  For example, if it is set to 512, it means the output is controlled by 50% of the maximum output.  `Note` Wheel mode allows to check max rpm. Any values higher than max rpm will not take effect.  {: .notice}### **Torque Limit(35)**{% include en/dxl/control_table_torque_limit.md %}### **Present Position(37)**{% include en/dxl/control_table_dx_present_position.md %}`Caution` If it is set to Wheel Mode, the value cannot be used to measure the moving distance and the rotation frequency.{: .notice--warning}### **Present Speed(39)**Is the present moving speed.0~2,047 (0x000 ~ 0x7FF) can be used.If a value is in the rage of 0~1,023 then the motor rotates to the CCW direction.If a value is in the rage of 1,024~2,047 then the motor rotates to the CW direction.The 10th bit becomes the direction bit to control the direction; 0 and 1,024 are equal.The unit of this value varies depending on operation mode.- Joint Mode  The unit is about 0.111rpm.  For example, if it is set to 300, it means that the motor is moving to the CCW direction at a rate of about 33.3rpm.- Wheel Mode  The unit is about 0.1%.  For example, if it is set to 512, it means that the torque is controlled by 50% of the maximum torque to the CCW direction.### **Present Load(41)**{% include en/dxl/control_table_present_load.md %}### **Present Voltage(45)**It is the size of the present voltage supplied.This value is 10 times larger than the actual voltage. For example, when 10V is supplied, the data value is 100 (0x64)If Present Voltage(45) value is out of range, Voltage Range Error Bit (Bit0) of Status Packet is returned as ‘1’ and Shutdown(18) is triggered by setting 1 to the Bit 0 of the address 18.### **Present Temperature(46)**{% include en/dxl/control_table_present_temp.md %}### **Registered Instruction(47)**{% include en/dxl/control_table_reg_instruction.md %}### **Moving(49)**{% include en/dxl/control_table_moving.md %}### **Hardware Error Status(50)**Present hardware error staus. Alarm shutdown error value.### **Punch(51)**{% include en/dxl/control_table_punch.md %}# [Reference](#reference)`Note` [Compatibility Guide]{: .notice}## [Drawings](#drawings)![](/assets/images/dxl/x/xl320_dimension.png)[Compatibility Guide]: http://en.robotis.com/BlueAD/board.php?bbs_id=faq&amp;mode=view&amp;bbs_no=47&amp;page=1&amp;key=&amp;keyword=&amp;sort=&amp;scate=",
        "url": " http://localhost:4000/docs/en/dxl/x/xl320/"
      } ,
  
      "docs-kr-dxl-x-xl320":  {
        "title": "XL320",
      "content"	 : "DYNAMIXEL XL320",
        "url": " http://localhost:4000/docs/kr/dxl/x/xl320/"
      } ,
  
      "docs-en-dxl-x-xl430-w250":  {
        "title": "XL430-W250",
      "content"	 : "# XL430-W250![](/assets/images/dxl/x/xl430_product.png)# [Specifications](#specifications)| Item           | Specifications     || :------------- | :------------- || MCU       | ST CORTEX-M3 (STM32F103C8 @ 72Mhz, 32Bit)       || Position Sensor       | Contactless absolute encoder (12Bit, 360&amp;deg;)Maker : ams(www.ams.com), Part No : AS5045|| Motor       | Cored Motor       || Baud Rate       | 9600 bps ~ 4.5 Mbps       || Control Algorithm | PID control     || Degree of Precision | 0.088&amp;deg;  || Operating Modes | Velocity Control Mode  Position Control Mode (0&amp;deg; ~ 360&amp;deg;)  Extended Position Control Mode PWM Control Mode (Voltage Control Mode) || Weight | 57.2g || Dimensions (W x H x D) | 28.5mm x 46.5mm x 34mm || Gear Ratio | 258.5 : 1  || Stall Torque | 1.0N.m @ 9.0V, 1.0A1.4Nm @ 11.1V, 1.3A1.5Nm @ 12.0V, 1.4A || No Load Speed | 47rpm @ 9.0V57rpm @ 11.1V61rpm @ 12.0V || Operating Temperature | -5&amp;deg;C ~ +72&amp;deg;C || Input Voltage | 6.5 ~ 12.0V (**Recommended : 11.1V**) || Standby Current | 52mA || Command Signal | Digital Packet || Protocol Type | Half Duplex Asynchronous Serial Communication(8bit, 1stop, No Parity) || Physical Connection | TTL Level Multidrop BUS|| ID | 0 ~ 252 || Feedback | Position, Velocity, Load, Realtime tick, Trajectory, Temperature, Input Voltage, etc || Part Material | Engineering Plastic |## [Performance Graph](#performance-graph)![](/assets/images/dxl/x/xl430_w250_performance_graph.png){% include en/dxl/note_performance_graph.md %}{% include en/dxl/control_table_protocol2.md %}## [Control Table of EEPROM Area](#control-table-of-eeprom-area)| Address     | Size(Byte)     | Data Name     | Description     | Access     | Initial Value     || :------------- | :------------- | :------------- | :------------- | :------------- | :------------- ||0|2|[Model Number](#model-number)                    |Model Number                             |R  |1060||2|4|[Model Information](#model-information)          |Model Information                        |R  |-||6|1|[Firmware Version](#firmware-version)            |Firmware Version                         |R  |-||7|1|[ID](#id)                                        |DYNAMIXEL ID                             |RW |1||8|1|[Baud Rate](#baud-rate)                          |Communication Speed                      |RW |1||9|1|[Return Delay Time](#return-delay-time)          |Response Delay Time                      |RW |250||10|1|[Drive Mode](#drive-mode)                       |Default Rotation Direction               |RW |0||11|1|[Operating Mode](#operating-mode)               |Operating Mode                           |RW |3||12|1|[Secondary(Shadow) ID](#secondary-shadow-id)    |Secondary(Shadow) ID                     |RW |255||13|1|[Protocol Version](#protocol-version)           |Protocol Version                         |RW |2||20|4|[Homing Offset](#homing-offset)                 |Home Position Offset                     |RW |0||24|4|[Moving Threshold](#moving-threshold)           |Velocity Threshold for Movement Detection|RW |10||31|1|[Temperature Limit](#temperature-limit)         |Maximum Internal Temperature Limit       |RW |72||32|2|[Max Voltage Limit](#max-voltage-limit)         |Maximum Input Voltage Limit              |RW |140||34|2|[Min Voltage Limit](#min-voltage-limit)         |Minimum Input Voltage Limit              |RW |60||36|2|[PWM Limit](#pwm-limit)                         |Maximum PWM Limit                        |RW |885||40|4|[Acceleration Limit](#acceleration-limit)       |Maximum Accleration Limit                |RW |32767||44|4|[Velocity Limit](#velocity-limit)               |Maximum Velocity Limit                   |RW |415||48|4|[Max Position Limit](#max-position-limit)       |Maximum Position Limit                   |RW |4095||52|4|[Min Position Limit](#min-position-limit)       |Minimum Position Limit                   |RW |0||63|1|[Shutdown](#shutdown)                           |Shutdown Error Information               |RW |52|## [Control Table of RAM Area](#control-table-of-ram-area)| Address     | Size(Byte)     | Data Name     | Description     | Access     | Initial Value     || :------------- | :------------- | :------------- | :------------- | :------------- | :------------- ||64|1|[Torque Enable](#torque-enable)               |Motor Torque On/Off                        |RW |0||65|1|[LED](#led)                                   |Status LED On/Off                          |RW |0||68|1|[Status Return Level](#status-return-level)   |Select Types of Status Return              |RW |2||69|1|[Registered Instruction](#registered-instruction)|Check Reception of Instruction          |R  |0||70|1|[Hardware Error Status](#hardware-error-status)  |Hardware Error Status                   |R  |0||76|2|[Velocity I Gain](#velocity-i-gain)           |I Gain of Velocity                         |RW |1000||78|2|[Velocity P Gain](#velocity-p-gain)           |P Gain of Velocity                         |RW |100||80|2|[Position D Gain](#position-d-gain)           |D Gain of Position                         |RW |4000||82|2|[Position I Gain](#position-i-gain)           |I Gain of Position                         |RW |0||84|2|[Position P Gain](#position-p-gain)           |P Gain of Position                         |RW |640||88|2|[Feedforward 2nd Gain](#feedforward-2nd-gain) |2nd Gain of Feed-Forward                   |RW |0||90|2|[Feedforward 1st Gain](#feedforward-1st-gain) |1st Gain of Feed-Forward                   |RW |0||98|1|[Bus Watchdog](#bus-watchdog)                 |DYNAMIXEL Bus Watchdog                     |RW |0||100|2|[Goal PWM](#goal-pwm)                        |Target PWM Value                           |RW |-||102|2|[Goal Current](#goal-current)                |Target Current Value                       |RW |-||104|4|[Goal Velocity](#goal-velocity)              |Target Velocity Value                      |RW |-||108|4|[Profile Acceleration](#profile-acceleration)|Acceleration Value of Profile              |RW |0||112|4|[Profile Velocity](#profile-velocity)        |Velocity Value of Profile                  |RW |0||116|4|[Goal Position](#goal-position)              |Target Position Value                      |RW |-||120|2|[Realtime Tick](#realtime-tick)              |Count Time in millisecond                  |R  |-||122|1|[Moving](#moving)                            |Movement Status                            |R  |0||123|1|[Moving Status](#moving-status)              |Detailed Information of Movement Status    |R  |0||124|2|[Present PWM](#present-pwm)                  |Present PWM Value                          |R  |-||126|2|[Present Load](#present-load)                |Present Load Value                         |R  |-||128|4|[Present Velocity](#present-velocity)        |Present Velocity Value                     |R  |-||132|4|[Present Position](#present-position)        |Present Position Value                     |R  |-||136|4|[Velocity Trajectory](#velocity-trajectory)  |Target Velocity Trajectory Generated by Profile|R|-||140|4|[Position Trajectory](#position-trajectory)  |Target Position Trajectory Generated by Profile|R|-||144|2|[Present Input Voltage](#present-input-voltage)|Present Input Voltage                    |R  |-||146|1|[Present Temperature](#present-temperature)    |Present Internal Temperature             |R  |-||168|2|[Indirect Address 1](#indirect-address)      |Indirect Address 1                         |RW |224||170|2|[Indirect Address 2](#indirect-address)      |Indirect Address 2                         |RW |225||172|2|[Indirect Address 3](#indirect-address)      |Indirect Address 3                         |RW |226||…|…|…                        |…|…|…||218|2|[Indirect Address 26](#indirect-address)     |Indirect Address 26                        |RW |249||220|2|[Indirect Address 27](#indirect-address)     |Indirect Address 27                        |RW |250||222|2|[Indirect Address 28](#indirect-address)     |Indirect Address 28                        |RW |251||224|1|[Indirect Data 1](#indirect-data)            |Indirect Data 1                            |RW |0||225|1|[Indirect Data 2](#indirect-data)            |Indirect Data 2                            |RW |0||226|1|[Indirect Data 3](#indirect-data)            |Indirect Data 3                            |RW |0||…|…|…                        |…|…|…||249|1|[Indirect Data 26](#indirect-data)           |Indirect Data 26                           |RW |0||250|1|[Indirect Data 27](#indirect-data)           |Indirect Data 27                           |RW |0||251|1|[Indirect Data 28](#indirect-data)           |Indirect Data 28                           |RW |0||578|2|[Indirect Address 29](#indirect-address)     |Indirect Address 29                        |RW |634||580|2|[Indirect Address 30](#indirect-address)     |Indirect Address 30                        |RW |635||582|2|[Indirect Address 31](#indirect-address)     |Indirect Address 31                        |RW |636||…|…|…|…|…|…||628|2|[Indirect Address 54](#indirect-address)     |Indirect Address 54                        |RW |659||630|2|[Indirect Address 55](#indirect-address)     |Indirect Address 55                        |RW |660||632|2|[Indirect Address 56](#indirect-address)     |Indirect Address 56                        |RW |661||634|1|[Indirect Data 29](#indirect-data)           |Indirect Data 29                           |RW |0||635|1|[Indirect Data 30](#indirect-data)           |Indirect Data 30                           |RW |0||636|1|[Indirect Data 31](#indirect-data)           |Indirect Data 31                           |RW |0||…|…|…|…|…|…||659|1|[Indirect Data 54](#indirect-data)           |Indirect Data 54                           |RW |0||660|1|[Indirect Data 55](#indirect-data)           |Indirect Data 55                           |RW |0||661|1|[Indirect Data 56](#indirect-data)           |Indirect Data 56                           |RW |0|`Caution` Protocol 1.0 does not support addresses greater than 256. Therefore, Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.{: .notice--warning}## [Control Table Description](#control-table-description)`Caution` Data in the EEPROM Area can only be written when the value of Torque Enable(64) is cleared to ‘0’.{: .notice--warning}### **Model Number(0)** This address stores model number of the DYNAMIXEL.### **Firmware Version(6)** This address stores firmware version of the DYNAMIXEL.### **ID(7)**{% include en/dxl/control_table_id.md %}### **Baud Rate(8)**{% include en/dxl/control_table_baudrate_2.md %}### **Return Delay Time(9)**{% include en/dxl/control_table_return_delay_time.md %}### **Drive Mode(10, Available from Firmware v38)**{% include en/dxl/control_table_drivemode.md %}### **Operating Mode(11)**{% include en/dxl/control_table_mx_opmode_2.md %}### **Secondary(Shadow) ID(12)**{% include en/dxl/control_table_shadowid.md %}### **Protocol version(13)**{% include en/dxl/control_table_protocolversion.md %}### **Homing Offset(20)**{% include en/dxl/control_table_homingoffset.md %}### **Moving Threshold(24)**{% include en/dxl/control_table_movingthreshold.md %}### **Temperature Limit(31)**{% include en/dxl/control_table_temp_limit_2.md %}### **Min/Max Voltage Limit(34, 32)**These values are maximum and minimum operating voltages.When current input voltage acquired from Present Input Voltage(144) exceeds the range of Max Voltage Limit(32) and Min Voltage Limit(34), Voltage Range Error Bit(0x01) and Hardware Error Bit(0x80) in the Hardware Error Status(70) are set. If Input Voltage Error Bit(0x10) is configured in the Shutdown(63), Torque Enable(64) is cleared to ‘0’ and Torque is disabled. For more details, please refer to the [Shutdown(63)](#shutdown) section.|Unit|Value Range|Description|| :---: | :---: | :---: ||About 0.1V|60 ~ 140|6.0 ~ 14.0V|### **PWM Limit(36)**{% include en/dxl/control_table_pwm_limit.md %}### **Acceleration Limit(40)**{% include en/dxl/control_table_acclimit.md %}### **Velocity Limit(44)**{% include en/dxl/control_table_vellimit.md %}### **Min/Max Position Limits(52, 48)**These values limit maximum and minimum target positions for Position Control Mode(Joint Mode) within the range of 1 rotation(0 ~ 4,095). Therefore, Goal Position(116) should be configured within the position limit range. These values are not used in Extended Position Control Mode.|Unit|Value Range|| :---: | :---: ||0.088&amp;deg;|0 ~ 4,095(1 rotation)|`Note` Max Position Limit(48) and Min Position Limit(52) are only used in Position Control Mode with a single turn.### **Shutdown(63)**{% include en/dxl/control_table_shutdown.md %}### **Torque Enable(64)**{% include en/dxl/control_table_torque_enable_2.md %}### **LED(65)**{% include en/dxl/control_table_led.md %}### **Status Return Level(68)**{% include en/dxl/control_table_status_return_lv.md %}### **Registered Instruction(69)**{% include en/dxl/control_table_reg_instruction.md %}### **Hardware Error Status(70)**This value indicates hardware error status.{% include en/dxl/control_table_shutdown.md %}### **Velocity PI Gain(78, 76)**These values indicate Gains of Velocity Control Mode. Gains of DYNAMIXEL’s internal controller can be calculated from Gains of the Control Table as shown below. The constant in each equations include sampling time. Velocity P Gain of DYNAMIXEL’s internal controller is abbreviated to KVP and that of the Control Table is abbreviated to KVP(TBL).|| Controller Gain     | Conversion Equations     | Range | Description || :------------- | :------------- | :------------- | :------------- || Velocity I Gain(76) | KVI | KVI = KVI(TBL) / 65536 | 0 ~ 16383 | I Gain || Velocity P Gain(78) | KVP | KVP = KVP(TBL) / 128 | 0 ~ 16383 | P Gain|Below figure is a block diagram describing the velocity controller in Velocity Control Mode. When the instruction transmitted from the user is received by DYNAMIXEL, it takes following steps until driving the horn.1. An Instruction from the user is transmitted via DYNAMIXEL bus, then registered to Goal Velocity(104).2. Goal Velocity(104) is converted to target velocity trajectory by Profile Acceleration(108).3. The target velocity trajectory is stored at Velocity Trajectory(136).4. PI controller calculates PWM output for the motor based on the target velocity trajectory.5. Goal PWM(100) sets a limit on the calculated PWM output and decides the final PWM value.6. The final PWM value is applied to the motor through an Inverter, and the horn of DYNAMIXEL is driven.7. Results are stored at Present Position(132), Present Velocity(128), Present PWM(124) and Present Load(126).![](/assets/images/dxl/velocity_controller_pi_gain.jpg)`Note` Ka stands for Anti-windup Gain and ‘β’ is a conversion coefficient of position and velocity that cannot be modified by users. For more details about the PID controller, please refer to the [PID Controller at wikipedia](http://en.wikipedia.org/wiki/PID_controller).{: .notice}### **Position PID Gain(84, 82, 80), Feedforward 1st/2nd Gains(90, 88)**These Gains are used in Position Control Mode and Extended Position Control Mode. Gains of Dynamixel’s internal controller can be calculated from Gains of the Control Table as shown below. The constant in each equations include sampling time. Position P Gain of Dynamixel’s internal controller is abbreviated to KPP and that of the Control Table is abbreviated to KPP(TBL).|| Controller Gain     | Conversion Equations     | Range | Description || :------------- | :------------- | :------------- | :------------- || Position D Gain(80) | KPD | KPD = KPD(TBL) / 16 | 0 ~ 16,383 | D Gain || Position I Gain(82) | KPI | KPI = KPI(TBL) / 65,536 | 0 ~ 16,383 | I Gain || Position P Gain(84) | KPP | KPP = KPP(TBL) / 128 | 0 ~ 16,383 | P Gain || Feedforward 2nd Gain(88) | KFF2nd | KFF2nd(TBL) / 4 | 0 ~ 16,383 | Feedforward Acceleration Gain || Feedforward 1st Gain(90) | KFF1st | KFF1st(TBL) / 4 | 0 ~ 16,383 | Feedforward Velocity Gain |Below figure is a block diagram describing the position controller in Position Control Mode and Extended Position Control Mode. When the instruction from the user is received by Dynamixel, it takes following steps until driving the horn.1. An Instruction from the user is transmitted via Dynamixel bus, then registered to Goal Position(116).2. Goal Position(116) is converted to target position trajectory and target velocity trajectory by Profile Velocity(112) and Profile Acceleration(108).3. The target position trajectory and target velocity trajectory is stored at Position Trajectory(140) and Velocity Trajectory(136) respectively.4. Feedforward and PID controller calculate PWM output for the motor based on target trajectories.5. Goal PWM(100) sets a limit on the calculated PWM output and decides the final PWM value.6. The final PWM value is applied to the motor through an Inverter, and the horn of Dynamixel is driven.7. Results are stored at Present Position(132), Present Velocity(128), Present PWM(124) and Present Load(126).![](/assets/images/dxl/position_controller_pid_gain.jpg)`Note` In case of PWM Control Mode, both PID controller and Feedforward controller are deactivated while Goal PWM(100) value is directly controlling the motor through an Inverter. In this manner, users can directly control the supplying voltage to the motor.{: .notice}`Note` Ka is an Anti-windup Gain that cannot be modified by users. For more details about the PID controller and Feedforward controller, please refer to the [PID Controller](http://en.wikipedia.org/wiki/PID_controller) and [Feed Forward](https://en.wikipedia.org/wiki/Feed_forward_(control)).{: .notice}### **Bus Watchdog(98, Available from Firmware v38)**{% include en/dxl/control_table_buswatchdog.md %}### **Goal PWM(100)**{% include en/dxl/control_table_goal_pwm.md %}### **Goal Velocity(104)**{% include en/dxl/control_table_goal_velocity.md %}### **Profile Acceleration(108)**{% include en/dxl/control_table_profile_acceleration.md %}### **Profile Velocity(112)**The Maximum velocity of Profile can be set with this value. Profile Velocity(112) can be used in all control modes except Torque Control Mode and Velocity Control Mode. Profile Velocity(112) cannot exceed Velocity Limit(44). Velocity Control Mode only uses Profile Acceleration(108) instead of Profile Velocity(112).|Unit|Value Range|Description|| :---: | :---: | :---: || 0.229 rpm | 0 ~ Velocity Limit(44) | &#39;0&#39; stands for an infinite velocity |The Profile is an acceleration/deceleration control method to reduce vibration, noise and load of the motor by controlling dramatically changing velocity and acceleration. It is also called Velocity Profile as it controls acceleration and deceleration based on velocity. DYNAMIXEL provides 4 different types of Profile. The following explains 4 Profiles and how to select them. Profiles are usually selected by a combination of Profile Velocity(112) and Profile Acceleration(108). Triangular and Trapezoidal Profiles exceptionally consider total travel distance(ΔPos, the distance difference between target position and current position) as an additional factor. For convenience, Profile Velocity(112) is abbreviated to VPRFL and Profile Acceleration(108) is abbreviated to VPRFL. &#39;X&#39; stands for &quot;Don&#39;t Care&quot; case.![](/assets/images/dxl/dxl_profiles.jpg)When given Goal Position(116), Dynamixel&#39;s profile creates target velocity trajectory based on current velocity(initial velocity of the Profile). When Dynamixel receives updated target position from a new Goal Position(116) while it is moving toward the previous Goal Position(116), velocity smoothly varies for the new target velocity trajectory. Maintaining velocity continuity while updating target velocity trajectory is called Velocity Override. For a simple calculation, let&#39;s assume that the initial velocity of the Profile is &#39;0&#39;. The following explains how Profile processes Goal Position(116) instruction in Position Control mode, Extended Position Control Mode.1. An Instruction from the user is transmitted via Dynamixel bus, then registered to Goal Position(116).2. Acceleration time(t1) is calculated from Profile Velocity(112) and Profile Acceleration(108).3. Types of Profile is decided based on Profile Velocity(112), Profile Acceleration(108) and total travel distance(ΔPos, the distance difference between target position and current position).4. Selected Profile type is stored at Moving Status(123).(Refer to the Moving Status(123))5. Dynamixel is driven by the calculated target trajectory from Profile.6. Target velocity trajectory and target position trajectory from Profile are stored at Velocity Trajectory(136) and Position Trajectory(140) respectively.7. VPRFL_TRI of ③ and Travel time(t3) to reach Goal Position(116) is calculated as below.| Condition     | Types of Profile     || :------------- | :------------- || VPRFL(112) = 0 | Profile not used (Step Instruction) || (VPRFL(112) ≠ 0) &amp; (APRF(108) = 0) | Rectangular Profile || (VPRFL(112) ≠ 0) &amp; (APRF(108) ≠ 0) &amp; (VPRFL_TRI ≤ VPRFL(112)) | Triangular Profile || (VPRFL(112) ≠ 0) &amp; (APRF(108) ≠ 0) &amp; (VPRFL_TRI ＞ VPRFL(112))| Trapezoidal Profile |![](/assets/images/dxl/dxl_velocity_profiles.jpg)`Note` Dynamixel supports Jerk control in order to minimize dramatic change of acceleration. Therefore, actual travel time by the target trajectory of Profile could be longer than t3(t4 of above figure).{: .notice}{% capture group_notice_03 %}`Note` Velocity Control Mode only uses Profile Acceleration(108). Step and Trapezoidal Profiles are supported. Velocity Override and Jerk control are supported as well. Acceleration time(t1) can be calculated as below equation.![](/assets/images/dxl/x/equation_01.gif){% endcapture %}  {{ group_notice_03 | markdownify }}### **Goal Position(116)**{% include en/dxl/control_table_goal_position_2.md %}### **Realtime Tick(120)**{% include en/dxl/control_table_realtime_tick.md %}### **Moving(122)**{% include en/dxl/control_table_moving_2.md %}### **Moving Status(123)**{% include en/dxl/control_table_moving_status.md %}### **Present PWM(124)**This value indicates present PWM. For more details, please refer to the [Goal PWM(100)](#goal-pwm).### **Present Load(126)**{% include en/dxl/control_table_present_load_2.md %}### **Present Velocity(128)**This value indicates present Velocity. For more details, please refer to the Goal Velocity(104).### **Present Position(132)**{% include en/dxl/control_table_present_position.md %}### **Velocity Trajectory(136)**This is a target velocity trajectory created by Profile. Operating method can be changed based on control mode. For more details, please refer to the Profile Velocity(112).1. **Velocity Control Mode** : When Profile reaches to the endpoint, Velocity Trajectory(136) becomes equal to Goal Velocity(104).2. **Position Control Mode, Extended Position Control Mode** : Velocity Trajectory is used to create Position Trajectory(140). When Profile reaches to an endpoint, Velocity Trajectory(136) is cleared to &#39;0&#39;.### **Position Trajectory(140)**{% include en/dxl/control_table_position_trajectory.md %}### **Present Input Voltage(144)**{% include en/dxl/control_table_present_volt_2.md %}### **Present Temperature (144)**{% include en/dxl/control_table_present_temp_2.md %}### **Indirect Address, Indirect Data**{% include en/dxl/control_table_indirect_data.md %}# [How to Assemble](#how-to-assemble)## [Wiring through Back Case](#wiring-through-back-case)## [Option Frame Assembly](#option-frame-assembly)![](/assets/images/dxl/x/xl430_option_frame.jpg)# [Maintenance](#maintenance){% include en/dxl/horn_bearing_replacement.md %}# [Reference](#reference)`Note` [Compatibility Guide]{: .notice}## [Quick Start](#quick-start){% include en/dxl/quick_start.md %}## [Drawings](#drawings)`Download` [dc11_a01_xl430_ref.pdf][dc11_a01_xl430_ref.pdf]: http://support.robotis.com/en/baggage_files/dynamixel/dc11_a01_xl430_ref.pdf[Compatibility Guide]: http://en.robotis.com/BlueAD/board.php?bbs_id=faq&amp;mode=view&amp;bbs_no=47&amp;page=1&amp;key=&amp;keyword=&amp;sort=&amp;scate=",
        "url": " http://localhost:4000/docs/en/dxl/x/xl430-w250/"
      } ,
  
      "docs-kr-dxl-x-xl430-w250":  {
        "title": "XL430-W250",
      "content"	 : "DYNAMIXEL XL430-W250",
        "url": " http://localhost:4000/docs/kr/dxl/x/xl430-w250/"
      } ,
  
      "docs-en-dxl-x-xm430-w210":  {
        "title": "XM430-W210",
      "content"	 : "# XM430-W210![](/assets/images/dxl/x/x_series_product.png)# [Specifications](#specifications)| Item           | Specifications     || :------------- | :------------- || MCU       | ST CORTEX-M3 (STM32F103C8 @ 72Mhz, 32Bit)       || Position Sensor       | Contactless absolute encoder (12Bit, 360&amp;deg;)Maker : ams(www.ams.com), Part No : AS5045|| Motor       | Coreless Motor       || Baud Rate       | 9600 bps ~ 4.5 Mbps       || Control Algorithm | PID control     || Degree of Precision | 0.088&amp;deg;  || Operating Modes | Current Control Mode  Velocity Control Mode  Position Control Mode (0&amp;deg; ~ 360&amp;deg;)  Extended Position Control Mode  Current-based Position Control Mode  PWM Control Mode (Voltage Control Mode) || Weight | 82g || Dimensions (W x H x D) | 28.5mm x 46.5mm x 34mm || Gear Ratio | 212.6 : 1  || Stall Torque | 2.7N.m @ 11.1V, 2.1A3.0Nm @ 12.0V, 2.3A3.7Nm @ 14.8V, 2.7A || No Load Speed | 70rpm @ 11.1V77rpm @ 12.0V95rpm @ 14.8V || Operating Temperature | -5&amp;deg;C ~ +80&amp;deg;C || Input Voltage | 10.0 ~ 14.8V (**Recommended : 12.0V**) || Standby Current | 40mA || Command Signal | Digital Packet || Protocol Type | XM430-W210-T: Half Duplex Asynchronous Serial CommunicationXM430-W210-R: RS485 Asynchronous Serial Communication(8bit, 1stop, No Parity) || Physical Connection | XM430-W210-T: TTL Level Multidrop BUS XM430-W210-R: RS485 Multidrop BUS || ID | 0 ~ 252 || Feedback | Position, Velocity, Current, Realtime tick, Trajectory, Temperature, Input Voltage, etc || Part Material | Full Metal GearMetal(Front, Middle), Engineering Plastic(Back) |## [Performance Graph](#performance-graph)![](/assets/images/dxl/x/xm430_w210_performance_graph.jpg){% include en/dxl/note_performance_graph.md %}{% include en/dxl/control_table_protocol2.md %}## [Control Table of EEPROM Area](#control-table-of-eeprom-area)| Address     | Size(Byte)     | Data Name     | Description     | Access     | Initial Value     || :------------- | :------------- | :------------- | :------------- | :------------- | :------------- ||0|2|[Model Number](#model-number)                    |Model Number                             |R  |1030||2|4|[Model Information](#model-information)          |Model Information                        |R  |-||6|1|[Firmware Version](#firmware-version)            |Firmware Version                         |R  |-||7|1|[ID](#id)                                        |DYNAMIXEL ID                             |RW |1||8|1|[Baud Rate](#baud-rate)                          |Communication Speed                      |RW |1||9|1|[Return Delay Time](#return-delay-time)          |Response Delay Time                      |RW |250||10|1|[Drive Mode](#drive-mode)                       |Default Rotation Direction               |RW |0||11|1|[Operating Mode](#operating-mode)               |Operating Mode                           |RW |3||12|1|[Secondary(Shadow) ID](#secondary-shadow-id)    |Secondary(Shadow) ID                     |RW |255||13|1|[Protocol Version](#protocol-version)           |Protocol Version                         |RW |2||20|4|[Homing Offset](#homing-offset)                 |Home Position Offset                     |RW |0||24|4|[Moving Threshold](#moving-threshold)           |Velocity Threshold for Movement Detection|RW |10||31|1|[Temperature Limit](#temperature-limit)         |Maximum Internal Temperature Limit       |RW |80||32|2|[Max Voltage Limit](#max-voltage-limit)         |Maximum Input Voltage Limit              |RW |160||34|2|[Min Voltage Limit](#min-voltage-limit)         |Minimum Input Voltage Limit              |RW |95||36|2|[PWM Limit](#pwm-limit)                         |Maximum PWM Limit                        |RW |885||38|2|[Current Limit](#current-limit)                 |Maximum Current Limit                    |RW |1193||40|4|[Acceleration Limit](#acceleration-limit)       |Maximum Accleration Limit                |RW |32767||44|4|[Velocity Limit](#velocity-limit)               |Maximum Velocity Limit                   |RW |480||48|4|[Max Position Limit](#max-position-limit)       |Maximum Position Limit                   |RW |4095||52|4|[Min Position Limit](#min-position-limit)       |Minimum Position Limit                   |RW |0||63|1|[Shutdown](#shutdown)                           |Shutdown Error Information               |RW |52|## [Control Table of RAM Area](#control-table-of-ram-area)| Address     | Size(Byte)     | Data Name     | Description     | Access     | Initial Value     || :------------- | :------------- | :------------- | :------------- | :------------- | :------------- ||64|1|[Torque Enable](#torque-enable)               |Motor Torque On/Off                        |RW |0||65|1|[LED](#led)                                   |Status LED On/Off                          |RW |0||68|1|[Status Return Level](#status-return-level)   |Select Types of Status Return              |RW |2||69|1|[Registered Instruction](#registered-instruction)|Check Reception of Instruction          |R  |0||70|1|[Hardware Error Status](#hardware-error-status)  |Hardware Error Status                   |R  |0||76|2|[Velocity I Gain](#velocity-i-gain)           |I Gain of Velocity                         |RW |1920||78|2|[Velocity P Gain](#velocity-p-gain)           |P Gain of Velocity                         |RW |100||80|2|[Position D Gain](#position-d-gain)           |D Gain of Position                         |RW |0||82|2|[Position I Gain](#position-i-gain)           |I Gain of Position                         |RW |0||84|2|[Position P Gain](#position-p-gain)           |P Gain of Position                         |RW |800||88|2|[Feedforward 2nd Gain](#feedforward-2nd-gain) |2nd Gain of Feed-Forward                   |RW |0||90|2|[Feedforward 1st Gain](#feedforward-1st-gain) |1st Gain of Feed-Forward                   |RW |0||98|1|[Bus Watchdog](#bus-watchdog)                 |DYNAMIXEL Bus Watchdog                     |RW |0||100|2|[Goal PWM](#goal-pwm)                        |Target PWM Value                           |RW |-||102|2|[Goal Current](#goal-current)                |Target Current Value                       |RW |-||104|4|[Goal Velocity](#goal-velocity)              |Target Velocity Value                      |RW |-||108|4|[Profile Acceleration](#profile-acceleration)|Acceleration Value of Profile              |RW |0||112|4|[Profile Velocity](#profile-velocity)        |Velocity Value of Profile                  |RW |0||116|4|[Goal Position](#goal-position)              |Target Position Value                      |RW |-||120|2|[Realtime Tick](#realtime-tick)              |Count Time in millisecond                  |R  |-||122|1|[Moving](#moving)                            |Movement Status                            |R  |0||123|1|[Moving Status](#moving-status)              |Detailed Information of Movement Status    |R  |0||124|2|[Present PWM](#present-pwm)                  |Current PWM Value                          |R  |-||126|2|[Present Current](#present-current)          |Current Current Value                      |R  |-||128|4|[Present Velocity](#present-velocity)        |Current Velocity Value                     |R  |-||132|4|[Present Position](#present-position)        |Current Position Value                     |R  |-||136|4|[Velocity Trajectory](#velocity-trajectory)  |Target Velocity Trajectory Generated by Profile|R|-||140|4|[Position Trajectory](#position-trajectory)  |Target Position Trajectory Generated by Profile|R|-||144|2|[Present Input Voltage](#present-input-voltage)|Current Input Voltage                    |R  |-||146|1|[Present Temperature](#present-temperature)    |Current Internal Temperature             |R  |-||168|2|[Indirect Address 1](#indirect-address)      |Indirect Address 1                         |RW |224||170|2|[Indirect Address 2](#indirect-address)      |Indirect Address 2                         |RW |225||172|2|[Indirect Address 3](#indirect-address)      |Indirect Address 3                         |RW |226||…|…|…                        |…|…|…||218|2|[Indirect Address 26](#indirect-address)     |Indirect Address 26                        |RW |249||220|2|[Indirect Address 27](#indirect-address)     |Indirect Address 27                        |RW |250||222|2|[Indirect Address 28](#indirect-address)     |Indirect Address 28                        |RW |251||224|1|[Indirect Data 1](#indirect-data)            |Indirect Data 1                            |RW |0||225|1|[Indirect Data 2](#indirect-data)            |Indirect Data 2                            |RW |0||226|1|[Indirect Data 3](#indirect-data)            |Indirect Data 3                            |RW |0||…|…|…                        |…|…|…||249|1|[Indirect Data 26](#indirect-data)           |Indirect Data 26                           |RW |0||250|1|[Indirect Data 27](#indirect-data)           |Indirect Data 27                           |RW |0||251|1|[Indirect Data 28](#indirect-data)           |Indirect Data 28                           |RW |0||578|2|[Indirect Address 29](#indirect-address)     |Indirect Address 29                        |RW |634||580|2|[Indirect Address 30](#indirect-address)     |Indirect Address 30                        |RW |635||582|2|[Indirect Address 31](#indirect-address)     |Indirect Address 31                        |RW |636||…|…|…|…|…|…||628|2|[Indirect Address 54](#indirect-address)     |Indirect Address 54                        |RW |659||630|2|[Indirect Address 55](#indirect-address)     |Indirect Address 55                        |RW |660||632|2|[Indirect Address 56](#indirect-address)     |Indirect Address 56                        |RW |661||634|1|[Indirect Data 29](#indirect-data)           |Indirect Data 29                           |RW |0||635|1|[Indirect Data 30](#indirect-data)           |Indirect Data 30                           |RW |0||636|1|[Indirect Data 31](#indirect-data)           |Indirect Data 31                           |RW |0||…|…|…|…|…|…||659|1|[Indirect Data 54](#indirect-data)           |Indirect Data 54                           |RW |0||660|1|[Indirect Data 55](#indirect-data)           |Indirect Data 55                           |RW |0||661|1|[Indirect Data 56](#indirect-data)           |Indirect Data 56                           |RW |0|`Caution` Protocol 1.0 does not support addresses greater than 256. Therefore, Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.{: .notice--warning}## [Control Table Description](#control-table-description)`Caution` Data in the EEPROM Area can only be written when the value of Torque Enable(64) is cleared to ‘0’.{: .notice--warning}### **Model Number(0)** This address stores model number of the DYNAMIXEL.### **Firmware Version(6)** This address stores firmware version of the DYNAMIXEL.### **ID(7)**{% include en/dxl/control_table_id.md %}### **Baud Rate(8)**{% include en/dxl/control_table_baudrate_2.md %}### **Return Delay Time(9)**{% include en/dxl/control_table_return_delay_time.md %}### **Drive Mode(10, Available from Firmware v38)**{% include en/dxl/control_table_drivemode.md %}### **Operating Mode(11)**{% include en/dxl/control_table_opmode_six_2.md %}### **Secondary(Shadow) ID(12)**{% include en/dxl/control_table_shadowid.md %}### **Protocol version(13)**{% include en/dxl/control_table_protocolversion.md %}### **Homing Offset(20)**{% include en/dxl/control_table_homingoffset.md %}### **Moving Threshold(24)**{% include en/dxl/control_table_movingthreshold.md %}### **Temperature Limit(31)**{% include en/dxl/control_table_temp_limit_2.md %}### **Min/Max Voltage Limit(34, 32)**{% include en/dxl/control_table_volt_limit_2.md %}### **PWM Limit(36)**{% include en/dxl/control_table_pwm_limit.md %}### **Current Limit(38)**{% include en/dxl/control_table_current_limit.md %}| Unit | Value Range     || :---: | :------------: ||about  2.69[mA]|0 ~ 1,193|`Note` Current Limit(38) could be differ by each DYNAMIXEL so please check the Control Table.{: .notice}### **Acceleration Limit(40)**{% include en/dxl/control_table_acclimit.md %}### **Velocity Limit(44)**{% include en/dxl/control_table_vellimit.md %}### **Min/Max Position Limits(52, 48)**{% include en/dxl/control_table_positionlimit.md %}### **Shutdown(63)**{% include en/dxl/control_table_shutdown.md %}### **Torque Enable(64)**{% include en/dxl/control_table_torque_enable_2.md %}### **LED(65)**{% include en/dxl/control_table_led.md %}### **Status Return Level(68)**{% include en/dxl/control_table_status_return_lv.md %}### **Registered Instruction(69)**{% include en/dxl/control_table_reg_instruction.md %}### **Hardware Error Status(70)**This value indicates hardware error status.{% include en/dxl/control_table_shutdown.md %}### **Velocity PI Gain(78, 76)**{% include en/dxl/control_table_velocity_pi_gain.md %}### **Position PID Gain(84, 82, 80), Feedforward 1st/2nd Gains(90, 88)**{% include en/dxl/control_table_position_pid_gain.md %}{% include en/dxl/control_table_current_position_pid_gain.md %}### **Bus Watchdog(98, Available from Firmware v38)**{% include en/dxl/control_table_buswatchdog.md %}### **Goal PWM(100)**{% include en/dxl/control_table_goal_pwm.md %}### **Goal Current(102)**{% include en/dxl/control_table_goal_current.md %}| Unit | Value Range     || :---: | :------------: ||about  2.69[mA]|-Current Limit(38) ~ Current Limit(38)|`Note` Applying high current to the motor for long period of time might damage the motor.{: .notice}### **Goal Velocity(104)**{% include en/dxl/control_table_goal_velocity.md %}### **Profile Acceleration(108)**{% include en/dxl/control_table_profile_acceleration.md %}### **Profile Velocity(112)**{% include en/dxl/control_table_profile_velocity.md %}### **Goal Position(116)**{% include en/dxl/control_table_goal_position_2.md %}### **Realtime Tick(120)**{% include en/dxl/control_table_realtime_tick.md %}### **Moving(122)**{% include en/dxl/control_table_moving_2.md %}### **Moving Status(123)**{% include en/dxl/control_table_moving_status.md %}### **Present PWM(124)**This value indicates current PWM. For more details, please refer to the [Goal PWM(100)](#goal-pwm).### **Present Current(126)**This value indicates current Current. For more details, please refer to the Goal Current(102).### **Present Velocity(128)**This value indicates current Velocity. For more details, please refer to the Goal Velocity(104).### **Present Position(132)**{% include en/dxl/control_table_present_position.md %}### **Velocity Trajectory(136)**{% include en/dxl/control_table_velocity_trajectory.md %}### **Position Trajectory(140)**{% include en/dxl/control_table_position_trajectory.md %}### **Present Input Voltage(144)**{% include en/dxl/control_table_present_volt_2.md %}### **Present Temperature (144)**{% include en/dxl/control_table_present_temp_2.md %}### **Indirect Address, Indirect Data**{% include en/dxl/control_table_indirect_data.md %}# [How to Assemble](#how-to-assemble)## [Wiring through Back Case](#wiring-through-back-case)![](/assets/images/dxl/x/wiring_through_back_case.jpg)## [Option Frame Assembly](#option-frame-assembly)![](/assets/images/dxl/x/x430_option_frame.jpg)# [Maintenance](#maintenance){% include en/dxl/horn_bearing_replacement.md %}# [Reference](#reference)`Note` [Compatibility Guide]{: .notice}## [Quick Start](#quick-start){% include en/dxl/quick_start.md %}## [Drawings](#drawings)`Download` [X_430_std_ref.pdf][X_430_std_ref.pdf]: http://support.robotis.com/en/baggage_files/dynamixel/x-430_std_ref.pdf[Compatibility Guide]: http://en.robotis.com/BlueAD/board.php?bbs_id=faq&amp;mode=view&amp;bbs_no=47&amp;page=1&amp;key=&amp;keyword=&amp;sort=&amp;scate=",
        "url": " http://localhost:4000/docs/en/dxl/x/xm430-w210/"
      } ,
  
      "docs-kr-dxl-x-xm430-w210":  {
        "title": "XM430-W210",
      "content"	 : "DYNAMIXEL XM430-W210",
        "url": " http://localhost:4000/docs/kr/dxl/x/xm430-w210/"
      } ,
  
      "docs-en-dxl-x-xm430-w350":  {
        "title": "XM430-W350",
      "content"	 : "# XM430-W350![](/assets/images/dxl/x/x_series_product.png)# [Specifications](#specifications)| Item           | Specifications     || :------------- | :------------- || MCU       | ST CORTEX-M3 (STM32F103C8 @ 72Mhz, 32Bit)       || Position Sensor       | Contactless absolute encoder (12Bit, 360&amp;deg;)Maker : ams(www.ams.com), Part No : AS5045|| Motor       | Coreless Motor       || Baud Rate       | 9600 bps ~ 4.5 Mbps       || Control Algorithm | PID control     || Degree of Precision | 0.088&amp;deg;  || Operating Modes | Current Control Mode  Velocity Control Mode  Position Control Mode (0&amp;deg; ~ 360&amp;deg;)  Extended Position Control Mode  Current-based Position Control Mode  PWM Control Mode (Voltage Control Mode) || Weight | 82g || Dimensions (W x H x D) | 28.5mm x 46.5mm x 34mm || Gear Ratio | 353.5 : 1  || Stall Torque | 3.8N.m @ 11.1V, 2.1A4.1Nm @ 12.0V, 2.3A4.8Nm @ 14.8V, 2.7A || No Load Speed | 43rpm @ 11.1V46rpm @ 12.0V57rpm @ 14.8V || Operating Temperature | -5&amp;deg;C ~ +80&amp;deg;C || Input Voltage | 10.0 ~ 14.8V (**Recommended : 12.0V**) || Standby Current | 40mA || Command Signal | Digital Packet || Protocol Type | XM430-W350-T: Half Duplex Asynchronous Serial CommunicationXM430-W350-R: RS485 Asynchronous Serial Communication(8bit, 1stop, No Parity) || Physical Connection | XM430-W350-T: TTL Level Multidrop BUS XM430-W350-R: RS485 Multidrop BUS || ID | 0 ~ 252 || Feedback | Position, Velocity, Current, Realtime tick, Trajectory, Temperature, Input Voltage, etc || Part Material | Full Metal GearMetal(Front, Middle), Engineering Plastic(Back) |## [Performance Graph](#performance-graph)![](/assets/images/dxl/x/xm430_w350_performance_graph.jpg){% include en/dxl/note_performance_graph.md %}{% include en/dxl/control_table_protocol2.md %}## [Control Table of EEPROM Area](#control-table-of-eeprom-area)| Address     | Size(Byte)     | Data Name     | Description     | Access     | Initial Value     || :------------- | :------------- | :------------- | :------------- | :------------- | :------------- ||0|2|[Model Number](#model-number)                    |Model Number                             |R  |1020||2|4|[Model Information](#model-information)          |Model Information                        |R  |-||6|1|[Firmware Version](#firmware-version)            |Firmware Version                         |R  |-||7|1|[ID](#id)                                        |DYNAMIXEL ID                             |RW |1||8|1|[Baud Rate](#baud-rate)                          |Communication Speed                      |RW |1||9|1|[Return Delay Time](#return-delay-time)          |Response Delay Time                      |RW |250||10|1|[Drive Mode](#drive-mode)                       |Default Rotation Direction               |RW |0||11|1|[Operating Mode](#operating-mode)               |Operating Mode                           |RW |3||12|1|[Secondary(Shadow) ID](#secondary-shadow-id)    |Secondary(Shadow) ID                     |RW |255||13|1|[Protocol Version](#protocol-version)           |Protocol Version                         |RW |2||20|4|[Homing Offset](#homing-offset)                 |Home Position Offset                     |RW |0||24|4|[Moving Threshold](#moving-threshold)           |Velocity Threshold for Movement Detection|RW |10||31|1|[Temperature Limit](#temperature-limit)         |Maximum Internal Temperature Limit       |RW |80||32|2|[Max Voltage Limit](#max-voltage-limit)         |Maximum Input Voltage Limit              |RW |160||34|2|[Min Voltage Limit](#min-voltage-limit)         |Minimum Input Voltage Limit              |RW |95||36|2|[PWM Limit](#pwm-limit)                         |Maximum PWM Limit                        |RW |885||38|2|[Current Limit](#current-limit)                 |Maximum Current Limit                    |RW |1193||40|4|[Acceleration Limit](#acceleration-limit)       |Maximum Accleration Limit                |RW |32767||44|4|[Velocity Limit](#velocity-limit)               |Maximum Velocity Limit                   |RW |350||48|4|[Max Position Limit](#max-position-limit)       |Maximum Position Limit                   |RW |4095||52|4|[Min Position Limit](#min-position-limit)       |Minimum Position Limit                   |RW |0||63|1|[Shutdown](#shutdown)                           |Shutdown Error Information               |RW |52|## [Control Table of RAM Area](#control-table-of-ram-area)| Address     | Size(Byte)     | Data Name     | Description     | Access     | Initial Value     || :------------- | :------------- | :------------- | :------------- | :------------- | :------------- ||64|1|[Torque Enable](#torque-enable)               |Motor Torque On/Off                        |RW |0||65|1|[LED](#led)                                   |Status LED On/Off                          |RW |0||68|1|[Status Return Level](#status-return-level)   |Select Types of Status Return              |RW |2||69|1|[Registered Instruction](#registered-instruction)|Check Reception of Instruction          |R  |0||70|1|[Hardware Error Status](#hardware-error-status)  |Hardware Error Status                   |R  |0||76|2|[Velocity I Gain](#velocity-i-gain)           |I Gain of Velocity                         |RW |1920||78|2|[Velocity P Gain](#velocity-p-gain)           |P Gain of Velocity                         |RW |100||80|2|[Position D Gain](#position-d-gain)           |D Gain of Position                         |RW |0||82|2|[Position I Gain](#position-i-gain)           |I Gain of Position                         |RW |0||84|2|[Position P Gain](#position-p-gain)           |P Gain of Position                         |RW |800||88|2|[Feedforward 2nd Gain](#feedforward-2nd-gain) |2nd Gain of Feed-Forward                   |RW |0||90|2|[Feedforward 1st Gain](#feedforward-1st-gain) |1st Gain of Feed-Forward                   |RW |0||98|1|[Bus Watchdog](#bus-watchdog)                 |DYNAMIXEL Bus Watchdog                     |RW |0||100|2|[Goal PWM](#goal-pwm)                        |Target PWM Value                           |RW |-||102|2|[Goal Current](#goal-current)                |Target Current Value                       |RW |-||104|4|[Goal Velocity](#goal-velocity)              |Target Velocity Value                      |RW |-||108|4|[Profile Acceleration](#profile-acceleration)|Acceleration Value of Profile              |RW |0||112|4|[Profile Velocity](#profile-velocity)        |Velocity Value of Profile                  |RW |0||116|4|[Goal Position](#goal-position)              |Target Position Value                      |RW |-||120|2|[Realtime Tick](#realtime-tick)              |Count Time in millisecond                  |R  |-||122|1|[Moving](#moving)                            |Movement Status                            |R  |0||123|1|[Moving Status](#moving-status)              |Detailed Information of Movement Status    |R  |0||124|2|[Present PWM](#present-pwm)                  |Current PWM Value                          |R  |-||126|2|[Present Current](#present-current)          |Current Current Value                      |R  |-||128|4|[Present Velocity](#present-velocity)        |Current Velocity Value                     |R  |-||132|4|[Present Position](#present-position)        |Current Position Value                     |R  |-||136|4|[Velocity Trajectory](#velocity-trajectory)  |Target Velocity Trajectory Generated by Profile|R|-||140|4|[Position Trajectory](#position-trajectory)  |Target Position Trajectory Generated by Profile|R|-||144|2|[Present Input Voltage](#present-input-voltage)|Current Input Voltage                    |R  |-||146|1|[Present Temperature](#present-temperature)    |Current Internal Temperature             |R  |-||168|2|[Indirect Address 1](#indirect-address)      |Indirect Address 1                         |RW |224||170|2|[Indirect Address 2](#indirect-address)      |Indirect Address 2                         |RW |225||172|2|[Indirect Address 3](#indirect-address)      |Indirect Address 3                         |RW |226||…|…|…                        |…|…|…||218|2|[Indirect Address 26](#indirect-address)     |Indirect Address 26                        |RW |249||220|2|[Indirect Address 27](#indirect-address)     |Indirect Address 27                        |RW |250||222|2|[Indirect Address 28](#indirect-address)     |Indirect Address 28                        |RW |251||224|1|[Indirect Data 1](#indirect-data)            |Indirect Data 1                            |RW |0||225|1|[Indirect Data 2](#indirect-data)            |Indirect Data 2                            |RW |0||226|1|[Indirect Data 3](#indirect-data)            |Indirect Data 3                            |RW |0||…|…|…                        |…|…|…||249|1|[Indirect Data 26](#indirect-data)           |Indirect Data 26                           |RW |0||250|1|[Indirect Data 27](#indirect-data)           |Indirect Data 27                           |RW |0||251|1|[Indirect Data 28](#indirect-data)           |Indirect Data 28                           |RW |0||578|2|[Indirect Address 29](#indirect-address)     |Indirect Address 29                        |RW |634||580|2|[Indirect Address 30](#indirect-address)     |Indirect Address 30                        |RW |635||582|2|[Indirect Address 31](#indirect-address)     |Indirect Address 31                        |RW |636||…|…|…|…|…|…||628|2|[Indirect Address 54](#indirect-address)     |Indirect Address 54                        |RW |659||630|2|[Indirect Address 55](#indirect-address)     |Indirect Address 55                        |RW |660||632|2|[Indirect Address 56](#indirect-address)     |Indirect Address 56                        |RW |661||634|1|[Indirect Data 29](#indirect-data)           |Indirect Data 29                           |RW |0||635|1|[Indirect Data 30](#indirect-data)           |Indirect Data 30                           |RW |0||636|1|[Indirect Data 31](#indirect-data)           |Indirect Data 31                           |RW |0||…|…|…|…|…|…||659|1|[Indirect Data 54](#indirect-data)           |Indirect Data 54                           |RW |0||660|1|[Indirect Data 55](#indirect-data)           |Indirect Data 55                           |RW |0||661|1|[Indirect Data 56](#indirect-data)           |Indirect Data 56                           |RW |0|`Caution` Protocol 1.0 does not support addresses greater than 256. Therefore, Indirect Address 29 ~ 56 and Indirect Data 29 ~ 56 can only be accessed with Protocol 2.0.{: .notice--warning}## [Control Table Description](#control-table-description)`Caution` Data in the EEPROM Area can only be written when the value of Torque Enable(64) is cleared to ‘0’.{: .notice--warning}### **Model Number(0)** This address stores model number of the DYNAMIXEL.### **Firmware Version(6)** This address stores firmware version of the DYNAMIXEL.### **ID(7)**{% include en/dxl/control_table_id.md %}### **Baud Rate(8)**{% include en/dxl/control_table_baudrate_2.md %}### **Return Delay Time(9)**{% include en/dxl/control_table_return_delay_time.md %}### **Drive Mode(10, Available from Firmware v38)**{% include en/dxl/control_table_drivemode.md %}### **Operating Mode(11)**{% include en/dxl/control_table_opmode_six_2.md %}### **Secondary(Shadow) ID(12)**{% include en/dxl/control_table_shadowid.md %}### **Protocol version(13)**{% include en/dxl/control_table_protocolversion.md %}### **Homing Offset(20)**{% include en/dxl/control_table_homingoffset.md %}### **Moving Threshold(24)**{% include en/dxl/control_table_movingthreshold.md %}### **Temperature Limit(31)**{% include en/dxl/control_table_temp_limit_2.md %}### **Min/Max Voltage Limit(34, 32)**{% include en/dxl/control_table_volt_limit_2.md %}### **PWM Limit(36)**{% include en/dxl/control_table_pwm_limit.md %}### **Current Limit(38)**{% include en/dxl/control_table_current_limit.md %}| Unit | Value Range     || :---: | :------------: ||about  2.69[mA]|0 ~ 1,193|`Note` Current Limit(38) could be differ by each DYNAMIXEL so please check the Control Table.{: .notice}### **Acceleration Limit(40)**{% include en/dxl/control_table_acclimit.md %}### **Velocity Limit(44)**{% include en/dxl/control_table_vellimit.md %}### **Min/Max Position Limits(52, 48)**{% include en/dxl/control_table_positionlimit.md %}### **Shutdown(63)**{% include en/dxl/control_table_shutdown.md %}### **Torque Enable(64)**{% include en/dxl/control_table_torque_enable_2.md %}### **LED(65)**{% include en/dxl/control_table_led.md %}### **Status Return Level(68)**{% include en/dxl/control_table_status_return_lv.md %}### **Registered Instruction(69)**{% include en/dxl/control_table_reg_instruction.md %}### **Hardware Error Status(70)**This value indicates hardware error status.{% include en/dxl/control_table_shutdown.md %}### **Velocity PI Gain(78, 76)**{% include en/dxl/control_table_velocity_pi_gain.md %}### **Position PID Gain(84, 82, 80), Feedforward 1st/2nd Gains(90, 88)**{% include en/dxl/control_table_position_pid_gain.md %}{% include en/dxl/control_table_current_position_pid_gain.md %}### **Bus Watchdog(98, Available from Firmware v38)**{% include en/dxl/control_table_buswatchdog.md %}### **Goal PWM(100)**{% include en/dxl/control_table_goal_pwm.md %}### **Goal Current(102)**{% include en/dxl/control_table_goal_current.md %}| Unit | Value Range     || :---: | :------------: ||about  2.69[mA]|-Current Limit(38) ~ Current Limit(38)|`Note` Applying high current to the motor for long period of time might damage the motor.{: .notice}### **Goal Velocity(104)**{% include en/dxl/control_table_goal_velocity.md %}### **Profile Acceleration(108)**{% include en/dxl/control_table_profile_acceleration.md %}### **Profile Velocity(112)**{% include en/dxl/control_table_profile_velocity.md %}### **Goal Position(116)**{% include en/dxl/control_table_goal_position_2.md %}### **Realtime Tick(120)**{% include en/dxl/control_table_realtime_tick.md %}### **Moving(122)**{% include en/dxl/control_table_moving_2.md %}### **Moving Status(123)**{% include en/dxl/control_table_moving_status.md %}### **Present PWM(124)**This value indicates current PWM. For more details, please refer to the [Goal PWM(100)](#goal-pwm).### **Present Current(126)**This value indicates current Current. For more details, please refer to the Goal Current(102).### **Present Velocity(128)**This value indicates current Velocity. For more details, please refer to the Goal Velocity(104).### **Present Position(132)**{% include en/dxl/control_table_present_position.md %}### **Velocity Trajectory(136)**{% include en/dxl/control_table_velocity_trajectory.md %}### **Position Trajectory(140)**{% include en/dxl/control_table_position_trajectory.md %}### **Present Input Voltage(144)**{% include en/dxl/control_table_present_volt_2.md %}### **Present Temperature (144)**{% include en/dxl/control_table_present_temp_2.md %}### **Indirect Address, Indirect Data**{% include en/dxl/control_table_indirect_data.md %}# [How to Assemble](#how-to-assemble)## [Wiring through Back Case](#wiring-through-back-case)![](/assets/images/dxl/x/wiring_through_back_case.jpg)## [Option Frame Assembly](#option-frame-assembly)![](/assets/images/dxl/x/x430_option_frame.jpg)# [Maintenance](#maintenance){% include en/dxl/horn_bearing_replacement.md %}# [Reference](#reference)`Note` [Compatibility Guide]{: .notice}## [Quick Start](#quick-start){% include en/dxl/quick_start.md %}## [Drawings](#drawings)`Download` [X_430_std_ref.pdf][X_430_std_ref.pdf]: http://support.robotis.com/en/baggage_files/dynamixel/x-430_std_ref.pdf[Compatibility Guide]: http://en.robotis.com/BlueAD/board.php?bbs_id=faq&amp;mode=view&amp;bbs_no=47&amp;page=1&amp;key=&amp;keyword=&amp;sort=&amp;scate=",
        "url": " http://localhost:4000/docs/en/dxl/x/xm430-w350/"
      } ,
  
      "docs-kr-dxl-x-xm430-w350":  {
        "title": "XM430-W350",
      "content"	 : "DYNAMIXEL XM430-W350",
        "url": " http://localhost:4000/docs/kr/dxl/x/xm430-w350/"
      } ,
  
      "docs-en-parts-communication-zig-110":  {
        "title": "ZIG-100/110A",
      "content"	 : "# ZIG-100/110A# [Introduction](#introduction)![](/assets/images/parts/communication/zig-110_product.jpg)`Note` ZIG-100/110A is discontinued.{: .notice}ZIG-100/110A, using Zigbee communication, makes serial communication (UART) possible.  ZIG-100 and ZIG-110A provide equal functions; the only difference is the interface with the parts to be installed. The connectable parts are as follows:  (Please refer to the explanation pages on each part on how to install.)- ZIG-100 : CM-5, ZIG2Serial, RC-100- ZIG-110A : CM-100, CM-510, CM-530, CM-700One set is composed of two units of ZIG-100/110A for sale, and it can be used immediately without setting separate ID since the ID of other module has been already set from the beginning of purchase. (**Please be careful not to lose one of the set.**) `Example`- Controlling OLLO Bug using Zigbee Communication ( ZIG-110A set is used. )  - Installing ZIG-110A to OLLO Bug Controller(CM-100)  - Installing ZIG-100 to Wireless Controller(RC-100)- Controlling Bioloid Premium Kit in PC using Zigbee Communication ( ZIG-110A set is used. )  - Connecting to the serial port of PC after installing ZIG-100 to ZIG2Serial  - Installing ZIG-110A to Bioloid Premium Kit Controller(CM-510 / CM530)# [Specifications](#specifications)|Item|Description||:---:|:---:||Weight|ZIG-100 : 3.1g, ZIG-110A : 5.7g||Dimension|ZIG-100 : 19mm * 27mm * 9mm (6mm, the height excluding connector)ZIG-110A : 18.1mm * 30mm * 9.1mm||Frequency|2.4GHz||Bandwidth|MAX 250kbps||Operation Voltage|2.7V ~ 3.6V (3.3V Recommended)||Current Consumption|30mA (at 3.3V)||Default baud rate|ZIG-100 : 57,600bps, ZIG-110A : 57,600bps|# [How to Use](#how-to-use)## RoboPlusChaning wireless ID of others and setting to broadcasting mode can be done with the two methods as below.The appropriate method can be chosen depending on the users&#39; hardware composition. ### Connected to the Controller- RoboPlus Manager can be executed after connecting ZIG-100 or ZIG-110A.- If the appropriate port is selected and it is connected to the controller, the following widow can be seen.- In the controller management window, if others&#39; wireless ID is selected, the value can be set in the subsidiary control window on the right.- If the &quot;Apply&quot; button is pressed after setting the desired value, the value is set.    ![](/assets/images/parts/communication/zig-110_01.png) ### Connected to ZIG2Serial- RoboPlus Manager is executed after connecting ZIG-100 to ZIG2Serial.- ZIG2Serial-connected port is selected, and the ZIG2Serial setting icon is clicked.- ZigBee setting button is clicked, and the direction indicated  in the window is proceeded.- If the setting window is popped up to set the desired value, and then the value is set by clicking change button.    ![](/assets/images/parts/communication/zig-110_02.png) ## TerminalUse the terminal program for the Zig2Serial and Serial Communication to set the ZIG-100(The directions here are based on the RoboPlus Terminal)- Connect the ZIG-100 on the Zig2Serial, then open the terminal program- Open the port using the serial number of the PC which the Zig2Serial is connected  ![](/assets/images/parts/communication/zig-110_03.png)  - While pressing on “1” (Shift+1) on your keyboard also press the reset switch on the Zig2Serial. When “!” is input during the ZIG-100’s booting, the setting mode is set to run. This screen will appear when you succeed.  - Baudrate : The baud rate set on the ZIG-100  - My-ID : ZIG-100’s exclusive unchangeable ID  - Dest Addr : ID of the opposite party’s zigbee     ![](/assets/images/parts/communication/zig-110_04.png)  - Set the ZIG-100 using commands. Applicable commands as follows :  - “I” key : Check the ZIG-100 current set value  - “D” key : Designate the opposite party’s ZIG-100 ID. Must input a hexadecimal. You can access Broadcat Communication Mode by inputting FFFF.  - “B” key : Change the ZIG-100’s baud rate. Must input a hexadecimal.        ![](/assets/images/parts/communication/zig-110_05.png)   - “W” key : Designate Waiting Mode. This can only be done when not in Broadcast Mode.  - “E” key : End Setting Mode. End by pressing the reset switch on the Zig2Serial# [Communication Mode](#communication-mode)Depending on the settings of ZIG-100 and ZIG-110A, 1:1 communication, 1:N, or  N:N communcation can be performed.- 1:1 Communication  - From a pair of ZIG-100 or the set value of ZIG-110A module, If one and the other&#39;s wireless ID is pointing each other, it becomes 1:1 communication.  - If the power is impressed at the beginning, red LED flickers, and shortly it is recognized, the red LED is turned on continuously. - 1:N Communication  - ZIG-100 module can be set to Waiting Mode.  - The module of Waiting Mode ignores others&#39; ID.  - The Waiting module of other ZIG-100 and ZIG-110A module must be set to others&#39; ID.  - Multiple ZIG-100 and ZIG-110A module can set Waiting module using others&#39; ID.  - If the power is impressed at the beginning, red LED filickers, and then if the module of Waiting mode and the module indicating the Waiting mode module recognize each other, the red LED is turned on continuously.  - At this moment, once it is connected, the connection is continued unless the power is turned off.  - If multiple modules try to connect to the module of Waiting mode at the same time, it continues the comunication with the first connected module.  - How to set to Waiting mode is as below.  - Communicates with the initial connected module; other modules&#39; signal maintain the standby status.    ![](/assets/images/parts/communication/zig-110_06.png) - N:N Communication  - ZIG-100 or ZIG-110A module can be set to Broadcasting mode.  - If it is se to Broadcasting mode, all modules set to Broadcasting mode transmits and receives their data.  - Generally it is used to transmit a command from a module to all other modules.  - ZIG-110A : Broadcast channel is unchangeable (Default Value : 4)  - ZIG-100 : The broadcast channel can be changed based on the zigbee&#39;s pin status  - ZIG-110A can be entered by setting the ID of the other party to hexadecimal FFFF.# [Pinout](#pinout)## ZIG-100![](/assets/images/parts/communication/zig-110_07.png) 1. GND : Ground Level of Zigbee Module (0v)2. VCC : Supply Voltage of Zigbee Module ( 2.7~3.6V )3. LED : LED to inform the connection stautus of Zigbee Module4. /RESET : Used to reset Zigbee Module (Also, used when it is entered Zigbee setting mode)5. RXD : Receive Signal Terminal of Zigbee Module6. TXD : Transmit Signal Terminal of Zigbee Module7. CHANNEL_SEL1 : Used in Broadcasting Mode8. CHANNEL_SEL2 : Used in Broadcasting Mode※ ZIG-100 pin status according to the Broadcasting Channel information|Channel|Pin Status||:---:|:---:||1|CHANNEL_SEL1 =&gt; LowCHANNEL_SEL2 =&gt; Low||2|CHANNEL_SEL1 =&gt; HighCHANNEL_SEL2 =&gt; Low||3|CHANNEL_SEL1 =&gt; LowCHANNEL_SEL2 =&gt; High||4|CHANNEL_SEL1 =&gt; HighCHANNEL_SEL2 =&gt; High| ## ZIG-110A![](/assets/images/parts/communication/zig-110_08.jpg)1. RXD : Receive Signal Terminal of Zigbee Module2. TXD : Transmit Signal Terminal of Zigbee Module3. VCC : Supply Voltage of Zigbee Module ( 2.7~3.6V )4. GND : Ground Level of Zigbee Module (0v) `Warning` Make connections to the controlled while unpowered. Making connections while the controller is powered may cause it to malfunction or/and damage.{: .notice--warning} # [Tutorials](#tutorials)- Zigbee SDK    Control zigbee via [Zigbee SDK] (C language)[Zigbee SDK]: /docs/en/software/sdk/zigbee_sdk/",
        "url": " http://localhost:4000/docs/en/parts/communication/zig-110/"
      } ,
  
      "docs-en-parts-communication-zig2serial":  {
        "title": "ZIG2Serial",
      "content"	 : "# ZIG2Serial# [Introduction](#introduction)![](/assets/images/parts/communication/zig2serial_product.png)- Chaning the ID of ZIG-100 : the ID can be changed through [RoboPlus Manager].- Serial communication with Bioloid through Zigbee communcation in PC  - The program for PC must be created separately.  - Communication test can be done with RoboPlus Manager.# [Specifications](#specifications)|Item|Description||:---:|:---:||Weight|11.12g||Dimension|56mm x 34mm x 12mm||Operating Voltage|4.5V ~ 5.5V||Baud Rate|57,600bps|# [Layout](#layout)![](/assets/images/parts/communication/zig2serial_01.png)|Item|Description||:---:|:---||Communication Status Display LED|If there is an outgoing signal  through ZIG-100 in RS-232, TXD is turned on; if there is an incoming signal through ZIG-100, RXD is turned on.||ZIG-100 Connector|It is to connect ZIG-100 to ZIG2Serial.||ZIG-100 Status Display LED|The status of ZIG-100 is displayed.- If it is turned off : ZIG-100 is not connected or in set status.- If it is turned on : It is connected to other ZIG-100 and thecommunication is ready.- If It  flickers : Other ZIG-100 has not been found.||Reset Switch|It is used when ZIG-100 is rebooted.||Power Connector|The power of 5V is needed to operate ZIG2Serial. The user can supply power using this connector. If it is connected to USB2Dynamixel, a separate power supply is not necessary.||RS232 Connector|It can be connected to RS-232 port of PC.|# [Pinout](#pinout)![](/assets/images/parts/communication/zig2serial_02.png)# [How to Use](#how-to-use)## [Connect to PC](#connect-to-pc)There is RS-232 Connector for communication in PC; it is called serial port. RS-232 connector of ZIG2Serial can be connected here.  If there is no serial port in PC, USB2Serial converter must be purchased. ## [Supply Power](#supply-power)The power of 5V mus be supplied to operate ZIG2Serial.  The power can be supplied using the power connector of ZIG2Serial.  The cable for power connection must be made referring to the pin arrangement as below.![](/assets/images/parts/communication/zig2serial_03.png)**Zero ohm resistor** must be attached or connected by soldering on the location of resistor for external power to supply the external power. If [USB2Dynamixel] products of Robotis are used, those products can be used without supplying separate power since the power is supplied from USB2Dynamixel to ZIG2Serial. `Warning` If the resistor for external power connection is connected, please use after removing the resistor.{: .notice--warning}![](/assets/images/parts/communication/zig2serial_04.png)## [Connect ZIG-100](#connect-zig-100)Please be careful with the direction of ZIG-100 when it is connected.![](/assets/images/parts/communication/zig2serial_05.png)## [Select Broadcast Channel](#select-broadcast-channel)You can select the Broadcast channel on the ZIG-100 by using the CHANNEL_SEL 1,2 pins.  The connection status must be changed to select the channel on the Zig2Serial.![](/assets/images/parts/communication/zig2serial_06.png)- Open is eliminating the lead which is not connected.- Short is using the lead to connecting it.- The resistance on the R5 and R6 is 0Ω. Thus you can eliminate or short the lead.- The default setting of the Zig2Serial is set at channel #1 and R5, R6, and R7 are short. Easily select channel #1 and #4 by opening and shorting the lead on R7.`Note` When the ZIG-100 is mounted on the CM-5, the broadcast channel to set at #1. If the channel of the Zig2Serial is set differently, it will communicate with the CM-5 in broadcast communication mode.{: .notice}|Channel|Connection Status of the Zig2Serial||:---:|:---:||1|R7 =&gt; ShortR6 =&gt; ShortR5 =&gt; Short||2|R7 =&gt; ShortR6 =&gt; OpenR5 =&gt; Short||3|R7 =&gt; ShortR6 =&gt; ShortR5 =&gt; Open||4|R7 =&gt; ShortR6 =&gt; OpenR5 =&gt; Open||4|R7 =&gt; OpenR6 =&gt; Don’t careR5 =&gt; Don’t care|# [Tutorials](#tutorials)- RoboPlus Manager : The set value of Zig-100 and Zig-110 can be set through [RoboPlus Manager]. - Zigbee SDK : Zigbee can be controlled through [Zigbee SDK] in C language.# [Circuit](#circuit)![](/assets/images/parts/communication/zig2serial_07.gif)# [Videos](#videos)[RoboPlus Manager]: /docs/en/software/rplus1/manager/[USB2Dynamixel]: /docs/en/parts/interface/usb2dynamixel/[Zigbee SDK]: /docs/en/software/sdk/zigbee_sdk/",
        "url": " http://localhost:4000/docs/en/parts/communication/zig2serial/"
      } ,
  
      "docs-en-software-sdk-zigbee-sdk":  {
        "title": "ZIGBEE SDk",
      "content"	 : "# [Introduction](#introduction)Zigbee SDK is a standard programming library to develop S/W communicates with RoboPlus Task with RoboPlus Task code. The characteristics of Zigbee SDK are as below.- It has outstanding portability in each platform since written in C language.- It is easy to perform platform porting since it is written in both platform independent and dependent sources.- The interface is standardized; thus, the developed software can be used again even if the controller is different.# [API Reference](#api-reference)## Device Control MethodFunctions to control the communication devices### [zgb_initialize](#zgb-initialize)It initializes the communication devices and makes ready status. ```cint zgb_initialize(   int devIndex , );```#### Parameters- devIndex : It is the number of currently connected communication devices. (It may vary depending on each platform.)    For example, Windows distinguishes devices by COM port. #### Return Values- If the value is 1, it means success; if the value is 0, it means failure. #### ExampleIt shows how to initialize in Windows environment using COM3 port.```c#define DEFAULT_PORTNUM 3   // COM3 int result; result =  dxl_initialize( DEFAULT_PORTNUM); if( result == 1) {   // Succeed to open Zig2Serial}else if( result == 0 ){  // Failed to open Zig2Serial}```### [zgb_terminate](#zgb-terminate)It terminates the communication devices. ```cvoid zgb_terminate();```#### Parameters- None #### Return Values- None #### Example```czgb_terminate();``` ## [Communication Method](#communication-method)Functions to transmit and receive the packet### [zgb_tx_data](#zgb-tx-data)It initializes the communication devices and makes ready status.```c int zgb_tx_data(   int data , );``` #### Parameters- data : The data values to be transmitted. If it has the effects of controlling with RC-100, the button value declared in advance can be used.|Value|Name|Contents||:---:|:---:|:---:|1|RC100_BTN_U|Pressed value- U Button||2|RC100_BTN_D|Pressed value- D Button||4|RC100_BTN_L|Pressed value- L Button||8|RC100_BTN_R|Pressed value- R Button||16|RC100_BTN_1|Pressed value- Button 1||32|RC100_BTN_2|Pressed value- Button 2||64|RC100_BTN_3|Pressed value- Button 3||128|RC100_BTN_4|Pressed value- Button 4||256|RC100_BTN_5|Pressed value- Button 5||512|RC100_BTN_6|Pressed value- Button 6| #### Return Values- If the value is 1, it means success; if the value is 0, it means failure. #### Example```cint TxData; int result TxData = 1;   result = zgb_tx_data(TxData);   if( result == 0) {    // Failed to transmit }   else if( result ==1) {    // Succeed to transmit }```### [zgb_rx_check](#zgb-rx-check)It checks whether the data is arrived to the communication devices or not. ```cint zgb_rx_check();``` #### Parameters- None #### Return Values- If the value is 1, there is a received data; if the value is 0, there is no received data. #### Example```cint resut;result = zgb_rx_check();if( result == 1 ){  // Succeed to data recieved}else if( result == 0 ){  // Failed to data recieved}```### [zgb_rx_data](#zgb-rx-data)It receives data from the communication devices.  First of all, the data reception must be chacked using zgb_rx_check in order to receive the latest data.```c int zgb_rxdata( );``` #### Parameters- None #### Return Values- The most recently received data value.    The button value declared in advance can be used to receive the button values from RC-100.|Value|Name|Contents||:---:|:---:|:---:|1|RC100_BTN_U|Pressed value- U Button||2|RC100_BTN_D|Pressed value- D Button||4|RC100_BTN_L|Pressed value- L Button||8|RC100_BTN_R|Pressed value- R Button||16|RC100_BTN_1|Pressed value- Button 1||32|RC100_BTN_2|Pressed value- Button 2||64|RC100_BTN_3|Pressed value- Button 3||128|RC100_BTN_4|Pressed value- Button 4||256|RC100_BTN_5|Pressed value- Button 5||512|RC100_BTN_6|Pressed value- Button 6| #### Example```cint RxData; if(zgb_rx_check() == 1){  // Get data verified  RxData = zgb_rx_data();}```# [Platform Porting](#platform-porting)Zigbee SDK provides sources so that the users can perform porting to various platforms.- [Download ZIGBEE Porting SDK](http://support.robotis.com/en/baggage_files/zigbee_sdk/zigbee_sdk_porting_v1_00.zip)## The Structure of Source- Platform-independent Source    Platform-independent source is written in standard C language so as to be compiled in all C language compilers without H/W-dependent routine.   In this source, only the protocol-related contents are actualized to make instruction packet and analyze status packet.  The users, if there is no specific case, do not have to modify the contents of source.  - Related Source File: zigbee.h, zigbee.c  - Necessary File for Build: zgb_hal.h, zgb_hal.c- Platform-dependent Source    Platform-dependent Source must include H/W-dependent routine in order to be actually operated in the controller.  If the users want to use Zigbee SDK in other unsupported platforms, the source must be modified.  - Related Source File: zgb_hal.h, zgb_hal.c If you want to do Porting, you must actualize the following functions depending on each platform.- zgb_hal_open- zgb_hal_close- zgb_hal_tx- zgb_hal_rx## [zgb_hal_open](#zgb-hal-open)It actualizes the available routine by initializing the communication devices.  zgb_initialize activates the communication devices through  zgb_hal_open. ```cint zgb_hal_open(   int devIndex, float baudrate )``` #### Parameters- devIndex : It is the number of currently connected communication devices. (It may vary pursuant to each platform.) For example, Windows distinguishes devices by COM Port.- baudrate : It is the actual baudrate value.#### Return Values- The function returnes 1, if it is successful; otherwise , it returns 0.## [zgb_hal_close](#zgb-hal-close)It actualizes the routine that let other application programs use by terminating the communication devices.  zgb_terminate terminates the communication devices through this function.```cvoid zgb_hal_close();``` #### Parameters- None#### Return Values- None## [zgb_hal_tx](#zgb-hal-tx)It actualizes the routine that transmits packet through the communication devices. ```cint zgb_hal_tx(   unsigned char *pPacket, int numPacket );```#### Parameters- pPacket : The pointer of the line includes the data to be trasmitted- numPacket : The number of data to be transmitted#### Return Values- It returns the number of data actually transmitted.## [zgb_hal_rx](#zgb-hal-rx)It actualizes the routine that takes out packet from the received buffers of the communication devices. ```cint zgb_hal_rx(   unsigned char *pPacket, int numPacket );``` #### Parameters- pPacket : The pointer of the line to save taken-out data- numPacket : The number of data to be taken out#### Return Values- It returns the number of data actually taken out.# [ZIG2Serial](#zig2serial)## For Windows- [Download ZIG2Serial SDK for 32bit Windows](http://support.robotis.com/en/baggage_files/zigbee_sdk/zigbee_sdk_win32_v1_02.zip)- [Download ZIG2Serial SDK for 64bit Windows](http://support.robotis.com/en/baggage_files/zigbee_sdk/zigbee_sdk_win64_v1_02.zip) ### System Requirements- OS : Windows XP/Vista/7 (32/64bit)- Zig2Serial is required- In case DLL loading is not available :  Needs to install Microsoft Visual C++ 2005 re-distribution package### Composing Folder- /bin : DLL files for Windows are included.- /import : Necessary files for programming are included.- /src : DLL sources are included.- /example : Examples to control Zigbee for users&#39; programming environment are included. ### Setting Environment VariablesIf you want to execute a program developed by Zigbee SDK, zigbee.dll is required.  zigbee.dll is included in bin folder of Zigbee SDK.  If you register the location of zigbee.dll as an environment variable for Windows, dll is not necessary when the program is executed.  If you do not want to register the location of dll as environment variables, the program and dll must be distributed together. 1. If you go into Control Panel - System -  Advanced, you can find Environment Variables button as below.    ![](/assets/images/sw/sdk/zig2serial_sdk_014.png) 2. Find Path category in System Variables, and then click Edit button.    ![](/assets/images/sw/sdk/zig2serial_sdk_015.png) 3. As the example below, add bin folder with semicolon to the end of existing variable values. **Please be careful not to change or delete the existing variable values.** The example shows the things are added, assuming the location of DLL file is C:Projectbin.    ![](/assets/images/sw/sdk/zig2serial_sdk_016.png)## For Linux- [Download ZIG2Serial SDK for Linux](http://support.robotis.com/en/baggage_files/zigbee_sdk/zigbee_sdk_linux_v1_00.zip) ### System Requirements- OS : Over Linux Kernel 2.6.21 is recommended- USB2Dynamixel and  Zig2Serial are required ### Composing Folder- /include :  Header file for Zigbee SDK is included.- /src : Zigbee SDK source file is included.- /lib : Compiled library file is included.- /example : Examples to control Zigbee are included. ### Zigbee SDK BuildIf library is built by &quot;make&quot; command in ZigbeeSDK/src folder, it is automatically copied to ZigbeeSDK/lib.## [Visual C++](#visual-c)This is an example for Visual C++. This example has been tested in Visual Studio 2005.### Setting EnvironmentThe environment must be set in C++ to execute the examples.#### Registering the PathThe location of Zigbee SDK must be registered in Visual Studio. 1. Select Tools -&gt; Options in the menu.    ![](/assets/images/sw/sdk/zig2serial_sdk_001.png) 2. Click Project &amp; Solution -&gt; VC++ Directory.    ![](/assets/images/sw/sdk/zig2serial_sdk_002.png) 3. Change the &quot;Directory mark of the next file&quot; part as &quot;Include File,&quot; and then add the ZigbeeSDK-installed folder by clicking the icon where &quot;2&quot; is marked. (For example, C:ZigbeeSDKimport)    ![](/assets/images/sw/sdk/zig2serial_sdk_003.png) 4. Change the &quot;Directory mark of the next file&quot; part as &quot;Library File,&quot; and then add the ZigbeeSDK-installed folder by clicking the icon where &quot;2&quot; is marked. (For Example, C:ZigbeeSDKimport)    ![](/assets/images/sw/sdk/zig2serial_sdk_004.png) #### Using Zigbee SDK1. Include Header file. Add #include &quot;zigbee.h&quot; on source file.2. Include Library file. Add #pragma comment(lib, &quot;zigbee.lib&quot;) on source file, or add zigbee.lib on the module of Link tap&#39;s input in project characteristics.3. Use functions.Call the necessary functions from the source.  Please refer to API Reference on the usage of each function.![](/assets/images/sw/sdk/zig2serial_sdk_005.png)### Send/Receive Example#### PreparationUsed Zigbee modules are set to 1:1 communication for each other.  Download tsk file appropriate to the controller type so that the controller can respond.- [Download CM100_Echo.tsk](http://support.robotis.com/en/baggage_files/zigbee_sdk/cm100_echo.tsk)- [Download CM5_Echo.tsk](http://support.robotis.com/en/baggage_files/zigbee_sdk/cm5_echo.tsk)- [Download CM510_Echo.tsk](http://support.robotis.com/en/baggage_files/zigbee_sdk/cm510_echo.tsk)- [Download CM700_Echo.tsk](http://support.robotis.com/en/baggage_files/zigbee_sdk/cm700_echo.tsk) #### Source##### Initialization```c// Open deviceif( zgb_initialize(DEFAULT_PORTNUM) == 0 ){  printf( &quot;Failed to open Zig2Serial!n&quot; );}else{  printf( &quot;Succeed to open Zig2Serial!n&quot; );}```The source above checks whether the initialization is done properly or not.  Since the initialization is succeeded, 1 is returned and if it is failed, 0 is returned, the failed source is included in &quot;If&quot; sentence, and the succeeded source goes to &quot;Else&quot; sentence.zgb_initialize is called from Zigbee API.  DEFAULT_PORTNUM means the number of a connected device.  DEFAULT_PORTNUM must be set depending on the user&#39;s system status, and it is originally set to COM3. ##### Termination```c// Close devicezgb_terminate();```The source above terminates communication with the controller&#39;s communication device. zgb_terminate is called from Zigbee API. ##### Tramsmitting Pakcet```cif (zgb_tx_data(TxData) == 0){  printf( &quot;Failed to transmitn&quot; );}```The source above makes Zigbee module to transmit the packet to the controller.  Using zgb_tx_data function among Zigbee API, the users transmit packets and the results are returned.  If the returned value is 1, the transmission is successful, and if it is 0, it means transmission failure.  TxData means the value users transmit to the controller. ##### Receiving Packet```cfor( i=0; i  Existing Category by clicking the right button of the mouse on the Projct File name.     ![](/assets/images/sw/sdk/zig2serial_sdk_006.png) 2. Add zigbee.vb file.  zigbee.vb is in the import folder where ZigbeeSDK is saved. (For example, C:ZigbeeSDKimportzigbee.vb)    ![](/assets/images/sw/sdk/zig2serial_sdk_007.png) 3. Check whether the zigbee.vb is added or not.    ![](/assets/images/sw/sdk/zig2serial_sdk_008.png) 4. Use ZigbeeAPI functions. Please refer to API Reference on the usage of each function.    ![](/assets/images/sw/sdk/zig2serial_sdk_009.png)### Send/Receive Example#### PreparationUsed Zigbee modules are set to 1:1 communication for each other. Download tsk file appropriate to the controller type so that the controller can respond.- [Download CM100_Echo.tsk](http://support.robotis.com/en/baggage_files/zigbee_sdk/cm100_echo.tsk)- [Download CM5_Echo.tsk](http://support.robotis.com/en/baggage_files/zigbee_sdk/cm5_echo.tsk)- [Download CM510_Echo.tsk](http://support.robotis.com/en/baggage_files/zigbee_sdk/cm510_echo.tsk)- [Download CM700_Echo.tsk](http://support.robotis.com/en/baggage_files/zigbee_sdk/cm700_echo.tsk) #### Source##### Initialization```code &#39;Open device        If (zgb_initialize(DEFAULT_PORTNUM) = 0) Then            Console.WriteLine(&quot;Failed to open Zig2Serial!&quot;)            Exit Sub        Else            Console.WriteLine(&quot;Succeed to open Zig2Serial!&quot;)        End If```The source above checks whether the initialization is done properly or not.  Since the initialization is succeeded, 1 is returned and if it is failed, 0 is returned, the failed source is included in &quot;If&quot; sentence, and the succeeded source goes to &quot;Else&quot; sentence.  zgb_initialize is called from Zigbee API.  DEFAULT_PORTNUM means the number of a connected device.  DEFAULT_PORTNUM must be set depending on the user&#39;s system status, and it is originally set to COM3. ##### Termination```code&#39;Close devicezgb_terminate()```The source above terminates communication with the controller&#39;s communication device. zgb_terminate is called from Zigbee API. ##### Transmitting Packet```codeIf (zgb_tx_data(TxData) = 0) Then                Console.WriteLine(&quot;Failed to transmit&quot;)End If```The source above makes Zigbee module to transmit the packet to the controller.  Using zgb_tx_data function among Zigbee API, the users transmit packets and the results are returned.  If the returned value is 1, the transmission is successful, and if it is 0, it means transmission failure.  TxData means the value users transmit to the controller. ##### Receiving Packet```code For i = 1 To TIMEOUT_TIME                &#39;Verify data recieved                If (zgb_rx_check() = 1) Then                    &#39;Get data verified                    RxData = zgb_rx_data()                    Console.WriteLine(&quot;Recieved: &quot; &amp; RxData &amp; &quot;&quot;)                    Exit For                End If                Sleep(1)Next i```           The source above makes Zigbee module to receive the packet from the controller.  Using zgb_rx_check function, the users can check whether the packet is received or not.  If the returned value is 1, the reception is successful, and if it is 0, it means reception failure.  If the packet is received (if the returned value is 1), using zgb_rx_data function, the received data is saved in RxData variable.  If the packet is not received, it spins the loop as long as the Timeout_Time using Sleep() function after providing the delay time of 1ms.  TIMEOUT_TIME is initially set to 1000, and the packet is waited for 1 second in this example source.## [Visual C#](#visual-c#)This is an example for Visual C#. This example has been tested in Visual Studio 2005.### Setting EnvironmentThe environment must be set in Visual C# to execute the examples.#### Using Zigbee SDK1. In the Solution Browser, select Add -&gt; Existing Category by clicking the right button of the mouse on the Project File name.    ![](/assets/images/sw/sdk/zig2serial_sdk_010.png)2. Add Zigbee.cs file.  Zigbee.cs is in the import folder where ZigbeeSDK is saved. (For example, C:ZigbeeSDKimportZigbee.cs)    ![](/assets/images/sw/sdk/zig2serial_sdk_011.png) 3. Check whether the Zigbee.cs is added or not.    ![](/assets/images/sw/sdk/zig2serial_sdk_012.png) 4. Add using ROBOTIS, and then use ZigbeeAPI funcitons. Please refer to API Reference on the usage of each function.     ![](/assets/images/sw/sdk/zig2serial_sdk_013.png) ### Send_Receive#### PreparationUsed Zigbee modules are set to 1:1 communication for each other. Download tsk file appropriate to the controller type so that it can respond.- [Download CM100_Echo.tsk](http://support.robotis.com/en/baggage_files/zigbee_sdk/cm100_echo.tsk)- [Download CM5_Echo.tsk](http://support.robotis.com/en/baggage_files/zigbee_sdk/cm5_echo.tsk)- [Download CM510_Echo.tsk](http://support.robotis.com/en/baggage_files/zigbee_sdk/cm510_echo.tsk)- [Download CM700_Echo.tsk](http://support.robotis.com/en/baggage_files/zigbee_sdk/cm700_echo.tsk) #### Source##### Initialization```c// Open deviceif (zigbee.zgb_initialize(DEFAULT_PORTNUM) == 0){  printf( &quot;Failed to open Zig2Serial!n&quot; );}else{  printf( &quot;Succeed to open Zig2Serial!n&quot; );}```The source above checks whether the initialization is done properly or not.  Since the initialization is succeeded, 1 is returned and if it is failed, 0 is returned, the failed source is included in &quot;If&quot; sentence, and the succeeded source goes to &quot;Else&quot; sentence.  zgb_initialize is called from Zigbee API.  DEFAULT_PORTNUM means the number of a connected device.  DEFAULT_PORTNUM must be set depending on the user&#39;s system status, and it is originally set to COM3. ##### Termination```c// Close devicezigbee.zgb_terminate();```The source above terminates communication with the controller&#39;s communication device. zgb_terminate is called from Zigbee API. ##### Transmitting Packet```cif (zigbee.zgb_tx_data(TxData) == 0){  Console.WriteLine(&quot;Failed to transmit&quot;);}```The source above makes Zigbee module to transmit the packet to the controller.  Using zgb_tx_data function among Zigbee API Functions, the users transmit packets and the results are returned.  If the returned value is 1, the transmission is successful, and if it is 0, it means transmission failure.  TxData means the value users transmit to the controller. ##### Receiving Packet```cfor( i=0; i  to source file.2. Call functions. Call necessary functions for the source.  Please refer to API Reference on the usage of each function. ### Send/Receive Example#### PreparationZig2Serial and ZIG-100 must be connected to USB2Dynamixel.  Also, there must be the controller or other communication device which can communicatte with ZIG-100 communication module connected to Zig2Serial.#### Source##### Initialization```cif( zgb_initialize(DEFAULT_DEVICEINDEX) == 0 ){printf( &quot;Failed to open Zig2Serial!n&quot; );printf( &quot;Press any key to terminate...n&quot; );getchar();return 0;}elseprintf( &quot;Succeed to open Zig2Serial!n&quot; );```The source above checks whether the initialization is done properly or not.  Since the initialization is succeeded, 1 is returned and if it is failed, 0 is returned, the failed source is included in &quot;If&quot; sentence, and the succeeded source goes to &quot;Else&quot; sentence.  zgb_initialize is called from zigbee API.  DEFAULT_DEVICEINDEX is the device index of Linux communication devices; the basic value is 1.  DEFAULT_DEVICEINDEX must be set appropriately to the users&#39; status.  Baud Rate is fixed to 57600. ##### Termination```c// Close devicezgb_terminate();```The source is for termination. The connection is terminated by calling zgb_teminate function from zigbee API. ##### Transmitting Data```c// Wait user&#39;s inputprintf( &quot;Input number to transmit: &quot; );if(scanf(&quot;%d&quot;, &amp;TxData));// Transmit dataif(zgb_tx_data(TxData) == 0)printf( &quot;Failed to transmitn&quot; );```The source above is to transmit the inputted values by users through zigbee. zgb_tx_data function is called form zigbee API. ##### Receiving Data```cfor( i=0; i &lt; TIMEOUT_TIME; i++){  // Verify data recieved  if(zgb_rx_check() == 1)  {    // Get data verified    RxData = zgb_rx_data();    printf( &quot;Recieved: %dn&quot;, RxData );    break;  }  sleep(1);}```The source above is to receive data before the set TIMEOUT. zgb_rx_check and  zgb_rx_data functions are called from zigbee API.# [CM-510/700](#cm-510700)Zigbee SDK for CM-510/700 is included in Embedded C.  Please refer to [RC100 and ZigBee][RC100 and ZigBee]: ???",
        "url": " http://localhost:4000/docs/en/software/sdk/zigbee_sdk/"
      } ,
  
      "sitemap-xml":  {
        "title": "",
      "content"	 : "{% if page.xsl %}{% endif %}{% assign collections = site.collections | where_exp:&#39;collection&#39;,&#39;collection.output != false&#39; %}{% for collection in collections %}{% assign docs = collection.docs | where_exp:&#39;doc&#39;,&#39;doc.sitemap != false&#39; %}{% for doc in docs %}{{ doc.url | replace:&#39;/index.html&#39;,&#39;/&#39; | absolute_url | xml_escape }}{% if doc.last_modified_at or doc.date %}{{ doc.last_modified_at | default: doc.date | date_to_xmlschema }}{% endif %}{% endfor %}{% endfor %}{% assign pages = site.html_pages | where_exp:&#39;doc&#39;,&#39;doc.sitemap != false&#39; | where_exp:&#39;doc&#39;,&#39;doc.url != &quot;/404.html&quot;&#39; %}{% for page in pages %}{{ page.url | replace:&#39;/index.html&#39;,&#39;/&#39; | absolute_url | xml_escape }}{% if page.last_modified_at %}{{ page.last_modified_at | date_to_xmlschema }}{% endif %}{% endfor %}{% assign static_files = page.static_files | where_exp:&#39;page&#39;,&#39;page.name != &quot;404.html&quot;&#39; %}{% for file in static_files %}{{ file.path | absolute_url | xml_escape }}{{ file.modified_time | date_to_xmlschema }}{% endfor %}",
        "url": " "
      } ,
  
      "robots-txt":  {
        "title": "",
      "content"	 : "Sitemap: {{ &quot;sitemap.xml&quot; | absolute_url }}",
        "url": " "
      } ,
  
      "feed-xml":  {
        "title": "",
      "content"	 : "{% if page.xsl %}{% endif %}Jekyll{{ site.time | date_to_xmlschema }}{{ &#39;/&#39; | absolute_url | xml_escape }}{% if site.title %}{{ site.title | smartify | xml_escape }}{% elsif site.name %}{{ site.name | smartify | xml_escape }}{% endif %}{% if site.description %}{{ site.description | xml_escape }}{% endif %}{% if site.author %}{{ site.author.name | default: site.author | xml_escape }}{% if site.author.email %}{{ site.author.email | xml_escape }}{% endif %}{% if site.author.uri %}{{ site.author.uri | xml_escape }}{% endif %}{% endif %}{% assign posts = site.posts | where_exp: &quot;post&quot;, &quot;post.draft != true&quot; %}{% for post in posts limit: 10 %}{{ post.title | smartify | strip_html | normalize_whitespace | xml_escape }}{{ post.date | date_to_xmlschema }}{{ post.last_modified_at | default: post.date | date_to_xmlschema }}{{ post.id | absolute_url | xml_escape }}{{ post.content | strip | xml_escape }}{% assign post_author = post.author | default: post.authors[0] | default: site.author %}{% assign post_author = site.data.authors[post_author] | default: post_author %}{% assign post_author_email = post_author.email | default: nil %}{% assign post_author_uri = post_author.uri | default: nil %}{% assign post_author_name = post_author.name | default: post_author %}{{ post_author_name | default: &quot;&quot; | xml_escape }}{% if post_author_email %}{{ post_author_email | xml_escape }}{% endif %}{% if post_author_uri %}{{ post_author_uri | xml_escape }}{% endif %}{% if post.category %}{% endif %}{% for tag in post.tags %}{% endfor %}{% if post.excerpt and post.excerpt != empty %}{{ post.excerpt | strip_html | normalize_whitespace | xml_escape }}{% endif %}{% assign post_image = post.image.path | default: post.image %}{% if post_image %}{% unless post_image contains &quot;://&quot; %}{% assign post_image = post_image | absolute_url | xml_escape  %}{% endunless %}{% endif %}{% endfor %}",
        "url": " "
      } 
  
}
